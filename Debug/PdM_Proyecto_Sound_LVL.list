
PdM_Proyecto_Sound_LVL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abc8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800ad98  0800ad98  0001ad98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af50  0800af50  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af58  0800af58  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af58  0800af58  0001af58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800af60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f20  20000168  0800b0c8  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20002088  0800b0c8  00022088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a42b  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004645  00000000  00000000  0003a606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003ec50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001149  00000000  00000000  00040300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002836f  00000000  00000000  00041449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ee9  00000000  00000000  000697b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df9dc  00000000  00000000  0008a6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006580  00000000  00000000  0016a080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00170600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad80 	.word	0x0800ad80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	0800ad80 	.word	0x0800ad80

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fc96 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f810 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f95a 	bl	80008a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f92e 	bl	800084c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005f0:	f000 f876 	bl	80006e0 <MX_ADC1_Init>
  MX_SPI3_Init();
 80005f4:	f000 f8f4 	bl	80007e0 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80005f8:	f008 fe7a 	bl	80092f0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80005fc:	f000 f8c2 	bl	8000784 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  project_main();
 8000600:	f008 fe6f 	bl	80092e2 <project_main>
  while (1)
 8000604:	e7fe      	b.n	8000604 <main+0x28>
	...

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2234      	movs	r2, #52	; 0x34
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f009 fd39 	bl	800a08e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <SystemClock_Config+0xd0>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a28      	ldr	r2, [pc, #160]	; (80006d8 <SystemClock_Config+0xd0>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <SystemClock_Config+0xd0>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemClock_Config+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd4>)
 8000656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000680:	2348      	movs	r3, #72	; 0x48
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000688:	2303      	movs	r3, #3
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4618      	mov	r0, r3
 8000696:	f003 fd1d 	bl	80040d4 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a0:	f000 f9a4 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	2102      	movs	r1, #2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fe93 	bl	80033ec <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006cc:	f000 f98e 	bl	80009ec <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_ADC1_Init+0x98>)
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <MX_ADC1_Init+0x9c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_ADC1_Init+0x98>)
 8000720:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_ADC1_Init+0xa0>)
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_ADC1_Init+0x98>)
 800072c:	2201      	movs	r2, #1
 800072e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_ADC1_Init+0x98>)
 800073a:	2201      	movs	r2, #1
 800073c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073e:	480e      	ldr	r0, [pc, #56]	; (8000778 <MX_ADC1_Init+0x98>)
 8000740:	f000 fc7c 	bl	800103c <HAL_ADC_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 f94f 	bl	80009ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800074e:	2301      	movs	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_ADC1_Init+0x98>)
 8000760:	f000 fcb0 	bl	80010c4 <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800076a:	f000 f93f 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000184 	.word	0x20000184
 800077c:	40012000 	.word	0x40012000
 8000780:	0f000001 	.word	0x0f000001

08000784 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_I2C1_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2C1_Init+0x50>)
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_I2C1_Init+0x58>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007c2:	f001 fa31 	bl	8001c28 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 f90e 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200001cc 	.word	0x200001cc
 80007d8:	40005400 	.word	0x40005400
 80007dc:	000186a0 	.word	0x000186a0

080007e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI3_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_SPI3_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_SPI3_Init+0x64>)
 80007ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_SPI3_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI3_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_SPI3_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI3_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_SPI3_Init+0x64>)
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_SPI3_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_SPI3_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_SPI3_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_SPI3_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_SPI3_Init+0x64>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_SPI3_Init+0x64>)
 8000832:	f003 feed 	bl	8004610 <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800083c:	f000 f8d6 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000220 	.word	0x20000220
 8000848:	40003c00 	.word	0x40003c00

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_USART2_UART_Init+0x50>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART2_UART_Init+0x4c>)
 8000884:	f003 ff4d 	bl	8004722 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f8ad 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000278 	.word	0x20000278
 800089c:	40004400 	.word	0x40004400

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b48      	ldr	r3, [pc, #288]	; (80009dc <MX_GPIO_Init+0x13c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a47      	ldr	r2, [pc, #284]	; (80009dc <MX_GPIO_Init+0x13c>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b45      	ldr	r3, [pc, #276]	; (80009dc <MX_GPIO_Init+0x13c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b41      	ldr	r3, [pc, #260]	; (80009dc <MX_GPIO_Init+0x13c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a40      	ldr	r2, [pc, #256]	; (80009dc <MX_GPIO_Init+0x13c>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b3e      	ldr	r3, [pc, #248]	; (80009dc <MX_GPIO_Init+0x13c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <MX_GPIO_Init+0x13c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a39      	ldr	r2, [pc, #228]	; (80009dc <MX_GPIO_Init+0x13c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b37      	ldr	r3, [pc, #220]	; (80009dc <MX_GPIO_Init+0x13c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b33      	ldr	r3, [pc, #204]	; (80009dc <MX_GPIO_Init+0x13c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a32      	ldr	r2, [pc, #200]	; (80009dc <MX_GPIO_Init+0x13c>)
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b30      	ldr	r3, [pc, #192]	; (80009dc <MX_GPIO_Init+0x13c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_GPIO_Init+0x13c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a2b      	ldr	r2, [pc, #172]	; (80009dc <MX_GPIO_Init+0x13c>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_GPIO_Init+0x13c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2120      	movs	r1, #32
 8000946:	4826      	ldr	r0, [pc, #152]	; (80009e0 <MX_GPIO_Init+0x140>)
 8000948:	f001 f93a 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000952:	4824      	ldr	r0, [pc, #144]	; (80009e4 <MX_GPIO_Init+0x144>)
 8000954:	f001 f934 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2104      	movs	r1, #4
 800095c:	4822      	ldr	r0, [pc, #136]	; (80009e8 <MX_GPIO_Init+0x148>)
 800095e:	f001 f92f 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000968:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	481a      	ldr	r0, [pc, #104]	; (80009e4 <MX_GPIO_Init+0x144>)
 800097a:	f000 ff75 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800097e:	2320      	movs	r3, #32
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4812      	ldr	r0, [pc, #72]	; (80009e0 <MX_GPIO_Init+0x140>)
 8000996:	f000 ff67 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800099a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_GPIO_Init+0x144>)
 80009b4:	f000 ff58 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80009b8:	2304      	movs	r3, #4
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_GPIO_Init+0x148>)
 80009d0:	f000 ff4a 	bl	8001868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 fe42 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <HAL_ADC_MspInit+0x7c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d127      	bne.n	8000aba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_ADC_MspInit+0x80>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <HAL_ADC_MspInit+0x84>)
 8000ab6:	f000 fed7 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	; 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40012000 	.word	0x40012000
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020000 	.word	0x40020000

08000ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <HAL_I2C_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12c      	bne.n	8000b4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b14:	2312      	movs	r3, #18
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b20:	2304      	movs	r3, #4
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <HAL_I2C_MspInit+0x8c>)
 8000b2c:	f000 fe9c 	bl	8001868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_I2C_MspInit+0x88>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	; 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40005400 	.word	0x40005400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400

08000b60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_SPI_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12c      	bne.n	8000bdc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000bba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bcc:	2306      	movs	r3, #6
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_SPI_MspInit+0x8c>)
 8000bd8:	f000 fe46 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40003c00 	.word	0x40003c00
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020800 	.word	0x40020800

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0x94>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d133      	bne.n	8000c7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <HAL_UART_MspInit+0x98>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <HAL_UART_MspInit+0x98>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <HAL_UART_MspInit+0x98>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_UART_MspInit+0x98>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_UART_MspInit+0x98>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_UART_MspInit+0x98>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <HAL_UART_MspInit+0x9c>)
 8000c66:	f000 fdff 	bl	8001868 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2026      	movs	r0, #38	; 0x26
 8000c70:	f000 fd31 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c74:	2026      	movs	r0, #38	; 0x26
 8000c76:	f000 fd4a 	bl	800170e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40004400 	.word	0x40004400
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f96a 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <USART2_IRQHandler+0x10>)
 8000cea:	f003 fdf5 	bl	80048d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000278 	.word	0x20000278

08000cf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <OTG_FS_IRQHandler+0x10>)
 8000cfe:	f001 fa22 	bl	8002146 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20001838 	.word	0x20001838

08000d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return 1;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_kill>:

int _kill(int pid, int sig)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d26:	f009 fa01 	bl	800a12c <__errno>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2216      	movs	r2, #22
 8000d2e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_exit>:

void _exit (int status)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff ffe7 	bl	8000d1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d4e:	e7fe      	b.n	8000d4e <_exit+0x12>

08000d50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e00a      	b.n	8000d78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d62:	f3af 8000 	nop.w
 8000d66:	4601      	mov	r1, r0
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf0      	blt.n	8000d62 <_read+0x12>
  }

  return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	e009      	b.n	8000db0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf1      	blt.n	8000d9c <_write+0x12>
  }
  return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_close>:

int _close(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dea:	605a      	str	r2, [r3, #4]
  return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_isatty>:

int _isatty(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f009 f966 	bl	800a12c <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20020000 	.word	0x20020000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	200002c0 	.word	0x200002c0
 8000e94:	20002088 	.word	0x20002088

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f009 f925 	bl	800a138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fb75 	bl	80005dc <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000f00:	0800af60 	.word	0x0800af60
  ldr r2, =_sbss
 8000f04:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000f08:	20002088 	.word	0x20002088

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_Init+0x40>)
 8000f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <HAL_Init+0x40>)
 8000f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x40>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 fbc1 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fd58 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fbd9 	bl	800172a <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 fba1 	bl	80016d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_IncTick+0x24>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	200002c4 	.word	0x200002c4

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <HAL_GetTick+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200002c4 	.word	0x200002c4

08000ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff ffee 	bl	8000fdc <HAL_GetTick>
 8001000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100c:	d005      	beq.n	800101a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_Delay+0x44>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4413      	add	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101a:	bf00      	nop
 800101c:	f7ff ffde 	bl	8000fdc <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d8f7      	bhi.n	800101c <HAL_Delay+0x28>
  {
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e033      	b.n	80010ba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	2b00      	cmp	r3, #0
 8001058:	d109      	bne.n	800106e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fcf4 	bl	8000a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	d118      	bne.n	80010ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001082:	f023 0302 	bic.w	r3, r3, #2
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f94a 	bl	8001328 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1c>
 80010dc:	2302      	movs	r3, #2
 80010de:	e113      	b.n	8001308 <HAL_ADC_ConfigChannel+0x244>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	d925      	bls.n	800113c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68d9      	ldr	r1, [r3, #12]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	3b1e      	subs	r3, #30
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43da      	mvns	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	400a      	ands	r2, r1
 8001114:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68d9      	ldr	r1, [r3, #12]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	4603      	mov	r3, r0
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4403      	add	r3, r0
 800112e:	3b1e      	subs	r3, #30
 8001130:	409a      	lsls	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	e022      	b.n	8001182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6919      	ldr	r1, [r3, #16]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	2207      	movs	r2, #7
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	400a      	ands	r2, r1
 800115e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6919      	ldr	r1, [r3, #16]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	4603      	mov	r3, r0
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4403      	add	r3, r0
 8001178:	409a      	lsls	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b06      	cmp	r3, #6
 8001188:	d824      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	3b05      	subs	r3, #5
 800119c:	221f      	movs	r2, #31
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	400a      	ands	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b05      	subs	r3, #5
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
 80011d2:	e04c      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d824      	bhi.n	8001226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b23      	subs	r3, #35	; 0x23
 80011ee:	221f      	movs	r2, #31
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b23      	subs	r3, #35	; 0x23
 8001218:	fa00 f203 	lsl.w	r2, r0, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
 8001224:	e023      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b41      	subs	r3, #65	; 0x41
 8001238:	221f      	movs	r2, #31
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b41      	subs	r3, #65	; 0x41
 8001262:	fa00 f203 	lsl.w	r2, r0, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <HAL_ADC_ConfigChannel+0x250>)
 8001270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a28      	ldr	r2, [pc, #160]	; (8001318 <HAL_ADC_ConfigChannel+0x254>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d10f      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1d8>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d10b      	bne.n	800129c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_ADC_ConfigChannel+0x254>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d12b      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x23a>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <HAL_ADC_ConfigChannel+0x258>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d003      	beq.n	80012b8 <HAL_ADC_ConfigChannel+0x1f4>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b11      	cmp	r3, #17
 80012b6:	d122      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_ADC_ConfigChannel+0x258>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d111      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_ADC_ConfigChannel+0x25c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_ADC_ConfigChannel+0x260>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0c9a      	lsrs	r2, r3, #18
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012f0:	e002      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f9      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40012300 	.word	0x40012300
 8001318:	40012000 	.word	0x40012000
 800131c:	10000012 	.word	0x10000012
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001330:	4b79      	ldr	r3, [pc, #484]	; (8001518 <ADC_Init+0x1f0>)
 8001332:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	021a      	lsls	r2, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	4a58      	ldr	r2, [pc, #352]	; (800151c <ADC_Init+0x1f4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d022      	beq.n	8001406 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6899      	ldr	r1, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	e00f      	b.n	8001426 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001424:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0202 	bic.w	r2, r2, #2
 8001434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	7e1b      	ldrb	r3, [r3, #24]
 8001440:	005a      	lsls	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01b      	beq.n	800148c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001462:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6859      	ldr	r1, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	3b01      	subs	r3, #1
 8001480:	035a      	lsls	r2, r3, #13
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	e007      	b.n	800149c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800149a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	051a      	lsls	r2, r3, #20
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014de:	025a      	lsls	r2, r3, #9
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	029a      	lsls	r2, r3, #10
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40012300 	.word	0x40012300
 800151c:	0f000001 	.word	0x0f000001

08001520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	; (8001564 <__NVIC_SetPriorityGrouping+0x44>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_GetPriorityGrouping+0x18>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 0307 	and.w	r3, r3, #7
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db0b      	blt.n	80015ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4907      	ldr	r1, [pc, #28]	; (80015bc <__NVIC_EnableIRQ+0x38>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e100 	.word	0xe000e100

080015c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	db0a      	blt.n	80015ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	490c      	ldr	r1, [pc, #48]	; (800160c <__NVIC_SetPriority+0x4c>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	0112      	lsls	r2, r2, #4
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	440b      	add	r3, r1
 80015e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e8:	e00a      	b.n	8001600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <__NVIC_SetPriority+0x50>)
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3b04      	subs	r3, #4
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	440b      	add	r3, r1
 80015fe:	761a      	strb	r2, [r3, #24]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	; 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f1c3 0307 	rsb	r3, r3, #7
 800162e:	2b04      	cmp	r3, #4
 8001630:	bf28      	it	cs
 8001632:	2304      	movcs	r3, #4
 8001634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3304      	adds	r3, #4
 800163a:	2b06      	cmp	r3, #6
 800163c:	d902      	bls.n	8001644 <NVIC_EncodePriority+0x30>
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3b03      	subs	r3, #3
 8001642:	e000      	b.n	8001646 <NVIC_EncodePriority+0x32>
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	43d9      	mvns	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	4313      	orrs	r3, r2
         );
}
 800166e:	4618      	mov	r0, r3
 8001670:	3724      	adds	r7, #36	; 0x24
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800168c:	d301      	bcc.n	8001692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168e:	2301      	movs	r3, #1
 8001690:	e00f      	b.n	80016b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <SysTick_Config+0x40>)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169a:	210f      	movs	r1, #15
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f7ff ff8e 	bl	80015c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SysTick_Config+0x40>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SysTick_Config+0x40>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	e000e010 	.word	0xe000e010

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff29 	bl	8001520 <__NVIC_SetPriorityGrouping>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff3e 	bl	8001568 <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff8e 	bl	8001614 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff31 	bl	8001584 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa2 	bl	800167c <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff fc44 	bl	8000fdc <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d008      	beq.n	8001774 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2280      	movs	r2, #128	; 0x80
 8001766:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e052      	b.n	800181a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0216 	bic.w	r2, r2, #22
 8001782:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001792:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	2b00      	cmp	r3, #0
 800179a:	d103      	bne.n	80017a4 <HAL_DMA_Abort+0x62>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0208 	bic.w	r2, r2, #8
 80017b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c4:	e013      	b.n	80017ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c6:	f7ff fc09 	bl	8000fdc <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b05      	cmp	r3, #5
 80017d2:	d90c      	bls.n	80017ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2203      	movs	r2, #3
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e015      	b.n	800181a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1e4      	bne.n	80017c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	223f      	movs	r2, #63	; 0x3f
 8001802:	409a      	lsls	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d004      	beq.n	8001840 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e00c      	b.n	800185a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2205      	movs	r2, #5
 8001844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e165      	b.n	8001b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	429a      	cmp	r2, r3
 800189e:	f040 8154 	bne.w	8001b4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d005      	beq.n	80018ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d130      	bne.n	800191c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 0201 	and.w	r2, r3, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b03      	cmp	r3, #3
 8001926:	d017      	beq.n	8001958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d123      	bne.n	80019ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	69b9      	ldr	r1, [r7, #24]
 80019a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0203 	and.w	r2, r3, #3
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80ae 	beq.w	8001b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b5d      	ldr	r3, [pc, #372]	; (8001b68 <HAL_GPIO_Init+0x300>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a5c      	ldr	r2, [pc, #368]	; (8001b68 <HAL_GPIO_Init+0x300>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <HAL_GPIO_Init+0x300>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0a:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_GPIO_Init+0x304>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <HAL_GPIO_Init+0x308>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d025      	beq.n	8001a82 <HAL_GPIO_Init+0x21a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4e      	ldr	r2, [pc, #312]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01f      	beq.n	8001a7e <HAL_GPIO_Init+0x216>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4d      	ldr	r2, [pc, #308]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4c      	ldr	r2, [pc, #304]	; (8001b7c <HAL_GPIO_Init+0x314>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x20e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4b      	ldr	r2, [pc, #300]	; (8001b80 <HAL_GPIO_Init+0x318>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x20a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4a      	ldr	r2, [pc, #296]	; (8001b84 <HAL_GPIO_Init+0x31c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x206>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a49      	ldr	r2, [pc, #292]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x202>
 8001a66:	2306      	movs	r3, #6
 8001a68:	e00c      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00a      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a6e:	2305      	movs	r3, #5
 8001a70:	e008      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a72:	2304      	movs	r3, #4
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e004      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x21c>
 8001a82:	2300      	movs	r3, #0
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f002 0203 	and.w	r2, r2, #3
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4093      	lsls	r3, r2
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a94:	4935      	ldr	r1, [pc, #212]	; (8001b6c <HAL_GPIO_Init+0x304>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac6:	4a31      	ldr	r2, [pc, #196]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b44:	4a11      	ldr	r2, [pc, #68]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	f67f ae96 	bls.w	8001884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021800 	.word	0x40021800
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	041a      	lsls	r2, r3, #16
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	400b      	ands	r3, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e12b      	b.n	8001e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe ff3e 	bl	8000ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c8c:	f001 fca0 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8001c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a81      	ldr	r2, [pc, #516]	; (8001e9c <HAL_I2C_Init+0x274>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d807      	bhi.n	8001cac <HAL_I2C_Init+0x84>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4a80      	ldr	r2, [pc, #512]	; (8001ea0 <HAL_I2C_Init+0x278>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	bf94      	ite	ls
 8001ca4:	2301      	movls	r3, #1
 8001ca6:	2300      	movhi	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	e006      	b.n	8001cba <HAL_I2C_Init+0x92>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4a7d      	ldr	r2, [pc, #500]	; (8001ea4 <HAL_I2C_Init+0x27c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	bf94      	ite	ls
 8001cb4:	2301      	movls	r3, #1
 8001cb6:	2300      	movhi	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0e7      	b.n	8001e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4a78      	ldr	r2, [pc, #480]	; (8001ea8 <HAL_I2C_Init+0x280>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9b      	lsrs	r3, r3, #18
 8001ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a6a      	ldr	r2, [pc, #424]	; (8001e9c <HAL_I2C_Init+0x274>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d802      	bhi.n	8001cfc <HAL_I2C_Init+0xd4>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	e009      	b.n	8001d10 <HAL_I2C_Init+0xe8>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	4a69      	ldr	r2, [pc, #420]	; (8001eac <HAL_I2C_Init+0x284>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	3301      	adds	r3, #1
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	495c      	ldr	r1, [pc, #368]	; (8001e9c <HAL_I2C_Init+0x274>)
 8001d2c:	428b      	cmp	r3, r1
 8001d2e:	d819      	bhi.n	8001d64 <HAL_I2C_Init+0x13c>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e59      	subs	r1, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d3e:	1c59      	adds	r1, r3, #1
 8001d40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d44:	400b      	ands	r3, r1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_I2C_Init+0x138>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1e59      	subs	r1, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5e:	e051      	b.n	8001e04 <HAL_I2C_Init+0x1dc>
 8001d60:	2304      	movs	r3, #4
 8001d62:	e04f      	b.n	8001e04 <HAL_I2C_Init+0x1dc>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d111      	bne.n	8001d90 <HAL_I2C_Init+0x168>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1e58      	subs	r0, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	440b      	add	r3, r1
 8001d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e012      	b.n	8001db6 <HAL_I2C_Init+0x18e>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e58      	subs	r0, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	0099      	lsls	r1, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Init+0x196>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e022      	b.n	8001e04 <HAL_I2C_Init+0x1dc>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10e      	bne.n	8001de4 <HAL_I2C_Init+0x1bc>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e58      	subs	r0, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	440b      	add	r3, r1
 8001dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de2:	e00f      	b.n	8001e04 <HAL_I2C_Init+0x1dc>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e58      	subs	r0, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	0099      	lsls	r1, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	6809      	ldr	r1, [r1, #0]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6911      	ldr	r1, [r2, #16]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68d2      	ldr	r2, [r2, #12]
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	000186a0 	.word	0x000186a0
 8001ea0:	001e847f 	.word	0x001e847f
 8001ea4:	003d08ff 	.word	0x003d08ff
 8001ea8:	431bde83 	.word	0x431bde83
 8001eac:	10624dd3 	.word	0x10624dd3

08001eb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e108      	b.n	80020d4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d106      	bne.n	8001ee2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f007 fc29 	bl	8009734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ef0:	d102      	bne.n	8001ef8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 fd28 	bl	8005952 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	7c1a      	ldrb	r2, [r3, #16]
 8001f0a:	f88d 2000 	strb.w	r2, [sp]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f12:	f003 fc07 	bl	8005724 <USB_CoreInit>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0d5      	b.n	80020d4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f003 fd20 	bl	8005974 <USB_SetCurrentMode>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0c6      	b.n	80020d4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e04a      	b.n	8001fe2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	3315      	adds	r3, #21
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3314      	adds	r3, #20
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	b298      	uxth	r0, r3
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	332e      	adds	r3, #46	; 0x2e
 8001f88:	4602      	mov	r2, r0
 8001f8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	331c      	adds	r3, #28
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3324      	adds	r3, #36	; 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	791b      	ldrb	r3, [r3, #4]
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d3af      	bcc.n	8001f4c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e044      	b.n	800207c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	3301      	adds	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	791b      	ldrb	r3, [r3, #4]
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	429a      	cmp	r2, r3
 8002084:	d3b5      	bcc.n	8001ff2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7c1a      	ldrb	r2, [r3, #16]
 800208e:	f88d 2000 	strb.w	r2, [sp]
 8002092:	3304      	adds	r3, #4
 8002094:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002096:	f003 fcb9 	bl	8005a0c <USB_DevInit>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e013      	b.n	80020d4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7b1b      	ldrb	r3, [r3, #12]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d102      	bne.n	80020c8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f001 f96e 	bl	80033a4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 fcf6 	bl	8006abe <USB_DevDisconnect>

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_PCD_Start+0x1c>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e022      	b.n	800213e <HAL_PCD_Start+0x62>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002110:	2b01      	cmp	r3, #1
 8002112:	d105      	bne.n	8002120 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fc03 	bl	8005930 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fca4 	bl	8006a7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002146:	b590      	push	{r4, r7, lr}
 8002148:	b08d      	sub	sp, #52	; 0x34
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f004 fd62 	bl	8006c26 <USB_GetMode>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 84b9 	bne.w	8002adc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fcc6 	bl	8006b00 <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 84af 	beq.w	8002ada <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f004 fcb3 	bl	8006b00 <USB_ReadInterrupts>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d107      	bne.n	80021b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f002 0202 	and.w	r2, r2, #2
 80021b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 fca1 	bl	8006b00 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b10      	cmp	r3, #16
 80021c6:	d161      	bne.n	800228c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0210 	bic.w	r2, r2, #16
 80021d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f003 020f 	and.w	r2, r3, #15
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	4413      	add	r3, r2
 80021f4:	3304      	adds	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	0c5b      	lsrs	r3, r3, #17
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	2b02      	cmp	r3, #2
 8002202:	d124      	bne.n	800224e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d035      	beq.n	800227c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800221a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800221e:	b29b      	uxth	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	6a38      	ldr	r0, [r7, #32]
 8002224:	f004 fad8 	bl	80067d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002234:	441a      	add	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002246:	441a      	add	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	615a      	str	r2, [r3, #20]
 800224c:	e016      	b.n	800227c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	0c5b      	lsrs	r3, r3, #17
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	2b06      	cmp	r3, #6
 8002258:	d110      	bne.n	800227c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002260:	2208      	movs	r2, #8
 8002262:	4619      	mov	r1, r3
 8002264:	6a38      	ldr	r0, [r7, #32]
 8002266:	f004 fab7 	bl	80067d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002276:	441a      	add	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0210 	orr.w	r2, r2, #16
 800228a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f004 fc35 	bl	8006b00 <USB_ReadInterrupts>
 8002296:	4603      	mov	r3, r0
 8002298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800229c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022a0:	f040 80a7 	bne.w	80023f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 fc3a 	bl	8006b26 <USB_ReadDevAllOutEpInterrupt>
 80022b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022b4:	e099      	b.n	80023ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 808e 	beq.w	80023de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 fc5e 	bl	8006b8e <USB_ReadDevOutEPInterrupt>
 80022d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00c      	beq.n	80022f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ea:	461a      	mov	r2, r3
 80022ec:	2301      	movs	r3, #1
 80022ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fed0 	bl	8003098 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00c      	beq.n	800231c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	015a      	lsls	r2, r3, #5
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230e:	461a      	mov	r2, r3
 8002310:	2308      	movs	r3, #8
 8002312:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 ffa6 	bl	8003268 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b00      	cmp	r3, #0
 8002324:	d008      	beq.n	8002338 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002332:	461a      	mov	r2, r3
 8002334:	2310      	movs	r3, #16
 8002336:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d030      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	2b80      	cmp	r3, #128	; 0x80
 800234c:	d109      	bne.n	8002362 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800235c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002360:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	3304      	adds	r3, #4
 8002376:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	78db      	ldrb	r3, [r3, #3]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d108      	bne.n	8002392 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2200      	movs	r2, #0
 8002384:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f007 faed 	bl	800996c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239e:	461a      	mov	r2, r3
 80023a0:	2302      	movs	r3, #2
 80023a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ba:	461a      	mov	r2, r3
 80023bc:	2320      	movs	r3, #32
 80023be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d6:	461a      	mov	r2, r3
 80023d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	3301      	adds	r3, #1
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f47f af62 	bne.w	80022b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 fb82 	bl	8006b00 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002402:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002406:	f040 80db 	bne.w	80025c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f004 fba3 	bl	8006b5a <USB_ReadDevAllInEpInterrupt>
 8002414:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800241a:	e0cd      	b.n	80025b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80c2 	beq.w	80025ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f004 fbc9 	bl	8006bca <USB_ReadDevInEPInterrupt>
 8002438:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d057      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	2201      	movs	r2, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43db      	mvns	r3, r3
 800245e:	69f9      	ldr	r1, [r7, #28]
 8002460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002464:	4013      	ands	r3, r2
 8002466:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002474:	461a      	mov	r2, r3
 8002476:	2301      	movs	r3, #1
 8002478:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	799b      	ldrb	r3, [r3, #6]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d132      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3320      	adds	r3, #32
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4403      	add	r3, r0
 80024a2:	331c      	adds	r3, #28
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4419      	add	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4403      	add	r3, r0
 80024b6:	3320      	adds	r3, #32
 80024b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d113      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x3a2>
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3324      	adds	r3, #36	; 0x24
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80024e0:	461a      	mov	r2, r3
 80024e2:	2101      	movs	r1, #1
 80024e4:	f004 fbd0 	bl	8006c88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f007 f9b7 	bl	8009862 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250a:	461a      	mov	r2, r3
 800250c:	2308      	movs	r3, #8
 800250e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002526:	461a      	mov	r2, r3
 8002528:	2310      	movs	r3, #16
 800252a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002542:	461a      	mov	r2, r3
 8002544:	2340      	movs	r3, #64	; 0x40
 8002546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d023      	beq.n	800259a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002554:	6a38      	ldr	r0, [r7, #32]
 8002556:	f003 fbb7 	bl	8005cc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	3310      	adds	r3, #16
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	3304      	adds	r3, #4
 800256c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	78db      	ldrb	r3, [r3, #3]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2200      	movs	r2, #0
 800257a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	b2db      	uxtb	r3, r3
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f007 fa04 	bl	8009990 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002594:	461a      	mov	r2, r3
 8002596:	2302      	movs	r3, #2
 8002598:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fcea 	bl	8002f80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	3301      	adds	r3, #1
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f47f af2e 	bne.w	800241c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f004 fa9b 	bl	8006b00 <USB_ReadInterrupts>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025d4:	d122      	bne.n	800261c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d108      	bne.n	8002606 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025fc:	2100      	movs	r1, #0
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f007 fb7e 	bl	8009d00 <HAL_PCDEx_LPM_Callback>
 8002604:	e002      	b.n	800260c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f007 f9a2 	bl	8009950 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800261a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f004 fa6d 	bl	8006b00 <USB_ReadInterrupts>
 8002626:	4603      	mov	r3, r0
 8002628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002630:	d112      	bne.n	8002658 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b01      	cmp	r3, #1
 8002640:	d102      	bne.n	8002648 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f007 f95e 	bl	8009904 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002656:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f004 fa4f 	bl	8006b00 <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266c:	d121      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800267c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002684:	2b00      	cmp	r3, #0
 8002686:	d111      	bne.n	80026ac <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	f003 020f 	and.w	r2, r3, #15
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80026a2:	2101      	movs	r1, #1
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f007 fb2b 	bl	8009d00 <HAL_PCDEx_LPM_Callback>
 80026aa:	e002      	b.n	80026b2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f007 f929 	bl	8009904 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fa22 	bl	8006b00 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c6:	f040 80b7 	bne.w	8002838 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2110      	movs	r1, #16
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 faef 	bl	8005cc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ee:	e046      	b.n	800277e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fc:	461a      	mov	r2, r3
 80026fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002702:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002714:	0151      	lsls	r1, r2, #5
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	440a      	add	r2, r1
 800271a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800271e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002722:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002730:	461a      	mov	r2, r3
 8002732:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002736:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002748:	0151      	lsls	r1, r2, #5
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	440a      	add	r2, r1
 800274e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002756:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	440a      	add	r2, r1
 800276e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002772:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002776:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	3301      	adds	r3, #1
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	791b      	ldrb	r3, [r3, #4]
 8002782:	461a      	mov	r2, r3
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	4293      	cmp	r3, r2
 8002788:	d3b2      	bcc.n	80026f0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002798:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800279c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7bdb      	ldrb	r3, [r3, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b6:	f043 030b 	orr.w	r3, r3, #11
 80027ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027cc:	f043 030b 	orr.w	r3, r3, #11
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	e015      	b.n	8002800 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027e6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027ea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fa:	f043 030b 	orr.w	r3, r3, #11
 80027fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800280e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002812:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002822:	461a      	mov	r2, r3
 8002824:	f004 fa30 	bl	8006c88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f004 f95f 	bl	8006b00 <USB_ReadInterrupts>
 8002842:	4603      	mov	r3, r0
 8002844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284c:	d123      	bne.n	8002896 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f004 f9f5 	bl	8006c42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f003 faac 	bl	8005dba <USB_GetDevSpeed>
 8002862:	4603      	mov	r3, r0
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681c      	ldr	r4, [r3, #0]
 800286e:	f000 fea3 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8002872:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002878:	461a      	mov	r2, r3
 800287a:	4620      	mov	r0, r4
 800287c:	f002 ffb6 	bl	80057ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f007 f816 	bl	80098b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002894:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f004 f930 	bl	8006b00 <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d10a      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f006 fff3 	bl	8009896 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f002 0208 	and.w	r2, r2, #8
 80028be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 f91b 	bl	8006b00 <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d123      	bne.n	800291c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e0:	2301      	movs	r3, #1
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
 80028e4:	e014      	b.n	8002910 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	f203 2357 	addw	r3, r3, #599	; 0x257
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fb0a 	bl	8002f1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	461a      	mov	r2, r3
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	4293      	cmp	r3, r2
 800291a:	d3e4      	bcc.n	80028e6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f004 f8ed 	bl	8006b00 <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002930:	d13c      	bne.n	80029ac <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002932:	2301      	movs	r3, #1
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	e02b      	b.n	8002990 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3318      	adds	r3, #24
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d115      	bne.n	800298a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800295e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002960:	2b00      	cmp	r3, #0
 8002962:	da12      	bge.n	800298a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3317      	adds	r3, #23
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002980:	b2db      	uxtb	r3, r3
 8002982:	4619      	mov	r1, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 faca 	bl	8002f1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	3301      	adds	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	791b      	ldrb	r3, [r3, #4]
 8002994:	461a      	mov	r2, r3
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	4293      	cmp	r3, r2
 800299a:	d3cd      	bcc.n	8002938 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 f8a5 	bl	8006b00 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c0:	d156      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c2:	2301      	movs	r3, #1
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	e045      	b.n	8002a54 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d12e      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	da2b      	bge.n	8002a4e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002a02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d121      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4a:	6053      	str	r3, [r2, #4]
            break;
 8002a4c:	e008      	b.n	8002a60 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	3301      	adds	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	791b      	ldrb	r3, [r3, #4]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d3b3      	bcc.n	80029c8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 f843 	bl	8006b00 <USB_ReadInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a84:	d10a      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f006 ff94 	bl	80099b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f004 f82d 	bl	8006b00 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d115      	bne.n	8002adc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f006 ff84 	bl	80099d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	e000      	b.n	8002adc <HAL_PCD_IRQHandler+0x996>
      return;
 8002ada:	bf00      	nop
    }
  }
}
 8002adc:	3734      	adds	r7, #52	; 0x34
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd90      	pop	{r4, r7, pc}

08002ae2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_PCD_SetAddress+0x1a>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e012      	b.n	8002b22 <HAL_PCD_SetAddress+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 ff8c 	bl	8006a30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	4608      	mov	r0, r1
 8002b34:	4611      	mov	r1, r2
 8002b36:	461a      	mov	r2, r3
 8002b38:	4603      	mov	r3, r0
 8002b3a:	70fb      	strb	r3, [r7, #3]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	803b      	strh	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da0f      	bge.n	8002b70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	3310      	adds	r3, #16
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	705a      	strb	r2, [r3, #1]
 8002b6e:	e00f      	b.n	8002b90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002b9c:	883b      	ldrh	r3, [r7, #0]
 8002b9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	78ba      	ldrb	r2, [r7, #2]
 8002baa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d004      	beq.n	8002bbe <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bbe:	78bb      	ldrb	r3, [r7, #2]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d102      	bne.n	8002bca <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_PCD_EP_Open+0xae>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e00e      	b.n	8002bf6 <HAL_PCD_EP_Open+0xcc>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68f9      	ldr	r1, [r7, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 f90c 	bl	8005e04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da0f      	bge.n	8002c32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	3310      	adds	r3, #16
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	705a      	strb	r2, [r3, #1]
 8002c30:	e00f      	b.n	8002c52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_PCD_EP_Close+0x6e>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e00e      	b.n	8002c8a <HAL_PCD_EP_Close+0x8c>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 f94a 	bl	8005f14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	f003 020f 	and.w	r2, r3, #15
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3304      	adds	r3, #4
 8002cba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd4:	7afb      	ldrb	r3, [r7, #11]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	799b      	ldrb	r3, [r3, #6]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d102      	bne.n	8002cee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	799b      	ldrb	r3, [r3, #6]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	6979      	ldr	r1, [r7, #20]
 8002cfa:	f003 f9e7 	bl	80060cc <USB_EPStartXfer>

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	f003 020f 	and.w	r2, r3, #15
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	460b      	mov	r3, r1
 8002d46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d48:	7afb      	ldrb	r3, [r7, #11]
 8002d4a:	f003 020f 	and.w	r2, r3, #15
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	3310      	adds	r3, #16
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2201      	movs	r2, #1
 8002d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	799b      	ldrb	r3, [r3, #6]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	799b      	ldrb	r3, [r3, #6]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6979      	ldr	r1, [r7, #20]
 8002d9e:	f003 f995 	bl	80060cc <USB_EPStartXfer>

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	7912      	ldrb	r2, [r2, #4]
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e04f      	b.n	8002e6a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da0f      	bge.n	8002df2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3310      	adds	r3, #16
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	3304      	adds	r3, #4
 8002de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	705a      	strb	r2, [r3, #1]
 8002df0:	e00d      	b.n	8002e0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3304      	adds	r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_PCD_EP_SetStall+0x82>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e01d      	b.n	8002e6a <HAL_PCD_EP_SetStall+0xbe>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f003 fd23 	bl	8006888 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7999      	ldrb	r1, [r3, #6]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f003 ff14 	bl	8006c88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	7912      	ldrb	r2, [r2, #4]
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e042      	b.n	8002f16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	da0f      	bge.n	8002eb8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	3304      	adds	r3, #4
 8002eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	705a      	strb	r2, [r3, #1]
 8002eb6:	e00f      	b.n	8002ed8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 020f 	and.w	r2, r3, #15
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	3304      	adds	r3, #4
 8002ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_PCD_EP_ClrStall+0x86>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e00e      	b.n	8002f16 <HAL_PCD_EP_ClrStall+0xa4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68f9      	ldr	r1, [r7, #12]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fd2c 	bl	8006964 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	da0c      	bge.n	8002f4c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 020f 	and.w	r2, r3, #15
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	3310      	adds	r3, #16
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	3304      	adds	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e00c      	b.n	8002f66 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	3304      	adds	r3, #4
 8002f64:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68f9      	ldr	r1, [r7, #12]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fb4b 	bl	8006608 <USB_EPStopXfer>
 8002f72:	4603      	mov	r3, r0
 8002f74:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f76:	7afb      	ldrb	r3, [r7, #11]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	3310      	adds	r3, #16
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d901      	bls.n	8002fb8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e06b      	b.n	8003090 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d902      	bls.n	8002fd4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3303      	adds	r3, #3
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fdc:	e02a      	b.n	8003034 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d902      	bls.n	8002ffa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3303      	adds	r3, #3
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	68d9      	ldr	r1, [r3, #12]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4603      	mov	r3, r0
 8003016:	6978      	ldr	r0, [r7, #20]
 8003018:	f003 fba0 	bl	800675c <USB_WritePacket>

    ep->xfer_buff  += len;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	441a      	add	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	695a      	ldr	r2, [r3, #20]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	441a      	add	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	429a      	cmp	r2, r3
 8003048:	d809      	bhi.n	800305e <PCD_WriteEmptyTxFifo+0xde>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003052:	429a      	cmp	r2, r3
 8003054:	d203      	bcs.n	800305e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1bf      	bne.n	8002fde <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	429a      	cmp	r2, r3
 8003068:	d811      	bhi.n	800308e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	2201      	movs	r2, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	43db      	mvns	r3, r3
 8003084:	6939      	ldr	r1, [r7, #16]
 8003086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800308a:	4013      	ands	r3, r2
 800308c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	333c      	adds	r3, #60	; 0x3c
 80030b0:	3304      	adds	r3, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	799b      	ldrb	r3, [r3, #6]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d17b      	bne.n	80031c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	4a61      	ldr	r2, [pc, #388]	; (8003260 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	f240 80b9 	bls.w	8003254 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80b3 	beq.w	8003254 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	461a      	mov	r2, r3
 80030fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003100:	6093      	str	r3, [r2, #8]
 8003102:	e0a7      	b.n	8003254 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311a:	461a      	mov	r2, r3
 800311c:	2320      	movs	r3, #32
 800311e:	6093      	str	r3, [r2, #8]
 8003120:	e098      	b.n	8003254 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 8093 	bne.w	8003254 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d90f      	bls.n	8003156 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314c:	461a      	mov	r2, r3
 800314e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003152:	6093      	str	r3, [r2, #8]
 8003154:	e07e      	b.n	8003254 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1a      	ldr	r2, [r3, #32]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	0159      	lsls	r1, r3, #5
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	440b      	add	r3, r1
 8003178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	1ad2      	subs	r2, r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d114      	bne.n	80031b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80031a0:	461a      	mov	r2, r3
 80031a2:	2101      	movs	r1, #1
 80031a4:	f003 fd70 	bl	8006c88 <USB_EP0_OutStart>
 80031a8:	e006      	b.n	80031b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	441a      	add	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f006 fb34 	bl	800982c <HAL_PCD_DataOutStageCallback>
 80031c4:	e046      	b.n	8003254 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	4a26      	ldr	r2, [pc, #152]	; (8003264 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d124      	bne.n	8003218 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e4:	461a      	mov	r2, r3
 80031e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ea:	6093      	str	r3, [r2, #8]
 80031ec:	e032      	b.n	8003254 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	461a      	mov	r2, r3
 8003206:	2320      	movs	r3, #32
 8003208:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	4619      	mov	r1, r3
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f006 fb0b 	bl	800982c <HAL_PCD_DataOutStageCallback>
 8003216:	e01d      	b.n	8003254 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d114      	bne.n	8003248 <PCD_EP_OutXfrComplete_int+0x1b0>
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d108      	bne.n	8003248 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003240:	461a      	mov	r2, r3
 8003242:	2100      	movs	r1, #0
 8003244:	f003 fd20 	bl	8006c88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f006 faec 	bl	800982c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	4f54300a 	.word	0x4f54300a
 8003264:	4f54310a 	.word	0x4f54310a

08003268 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	333c      	adds	r3, #60	; 0x3c
 8003280:	3304      	adds	r3, #4
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d90e      	bls.n	80032bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b4:	461a      	mov	r2, r3
 80032b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f006 faa3 	bl	8009808 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d90c      	bls.n	80032e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	799b      	ldrb	r3, [r3, #6]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d108      	bne.n	80032e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80032dc:	461a      	mov	r2, r3
 80032de:	2101      	movs	r1, #1
 80032e0:	f003 fcd2 	bl	8006c88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	4f54300a 	.word	0x4f54300a

080032f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
 8003300:	4613      	mov	r3, r2
 8003302:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d107      	bne.n	8003322 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003312:	883b      	ldrh	r3, [r7, #0]
 8003314:	0419      	lsls	r1, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	430a      	orrs	r2, r1
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
 8003320:	e028      	b.n	8003374 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	4413      	add	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	e00d      	b.n	8003352 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	3340      	adds	r3, #64	; 0x40
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	0c1b      	lsrs	r3, r3, #16
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4413      	add	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	3301      	adds	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	3b01      	subs	r3, #1
 8003358:	429a      	cmp	r2, r3
 800335a:	d3ec      	bcc.n	8003336 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800335c:	883b      	ldrh	r3, [r7, #0]
 800335e:	0418      	lsls	r0, r3, #16
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	3b01      	subs	r3, #1
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	4302      	orrs	r2, r0
 800336c:	3340      	adds	r3, #64	; 0x40
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	f043 0303 	orr.w	r3, r3, #3
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0cc      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8003400:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d90c      	bls.n	8003428 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8003416:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b8      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800344a:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003462:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	494d      	ldr	r1, [pc, #308]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d044      	beq.n	800350c <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d119      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d003      	beq.n	80034aa <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80034aa:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e06f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e067      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4934      	ldr	r1, [pc, #208]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 80034dc:	f7fd fd7e 	bl	8000fdc <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80034e4:	f7fd fd7a 	bl	8000fdc <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e04f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80034fa:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d1eb      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 800350c:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d20c      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e032      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4916      	ldr	r1, [pc, #88]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490e      	ldr	r1, [pc, #56]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8003572:	f000 fb7f 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003576:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	490a      	ldr	r1, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800358a:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fcde 	bl	8000f54 <HAL_InitTick>

	return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023c00 	.word	0x40023c00
 80035a8:	40023800 	.word	0x40023800
 80035ac:	0800aeb0 	.word	0x0800aeb0
 80035b0:	20000000 	.word	0x20000000
 80035b4:	20000004 	.word	0x20000004

080035b8 <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	0800aec0 	.word	0x0800aec0

080035f8 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	0800aec0 	.word	0x0800aec0

08003620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	; 0x30
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d010      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003658:	4b6f      	ldr	r3, [pc, #444]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800365a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	496c      	ldr	r1, [pc, #432]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003676:	2301      	movs	r3, #1
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d010      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003686:	4b64      	ldr	r3, [pc, #400]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003694:	4960      	ldr	r1, [pc, #384]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80036a4:	2301      	movs	r3, #1
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d017      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b4:	4b58      	ldr	r3, [pc, #352]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	4955      	ldr	r1, [pc, #340]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d2:	d101      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80036d4:	2301      	movs	r3, #1
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80036e0:	2301      	movs	r3, #1
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d017      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036f0:	4b49      	ldr	r3, [pc, #292]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	4946      	ldr	r1, [pc, #280]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800370e:	d101      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003710:	2301      	movs	r3, #1
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800371c:	2301      	movs	r3, #1
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 808a 	beq.w	8003842 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4a38      	ldr	r2, [pc, #224]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	; 0x40
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800374a:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a33      	ldr	r2, [pc, #204]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003756:	f7fd fc41 	bl	8000fdc <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fd fc3d 	bl	8000fdc <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e278      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003770:	4b2a      	ldr	r3, [pc, #168]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800377c:	4b26      	ldr	r3, [pc, #152]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003784:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	429a      	cmp	r2, r3
 8003798:	d028      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800379a:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a4:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037b0:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037b6:	4b18      	ldr	r3, [pc, #96]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d114      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fd fc0b 	bl	8000fdc <HAL_GetTick>
 80037c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fd fc07 	bl	8000fdc <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e240      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e0:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ee      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f8:	d114      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800380a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380e:	4902      	ldr	r1, [pc, #8]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]
 8003814:	e00c      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	40007000 	.word	0x40007000
 8003820:	42470e40 	.word	0x42470e40
 8003824:	4b4a      	ldr	r3, [pc, #296]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a49      	ldr	r2, [pc, #292]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800382a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800382e:	6093      	str	r3, [r2, #8]
 8003830:	4b47      	ldr	r3, [pc, #284]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383c:	4944      	ldr	r1, [pc, #272]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800383e:	4313      	orrs	r3, r2
 8003840:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003854:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003856:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003864:	4b3a      	ldr	r3, [pc, #232]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	4937      	ldr	r1, [pc, #220]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003886:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003894:	492e      	ldr	r1, [pc, #184]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d011      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038a8:	4b29      	ldr	r3, [pc, #164]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	4926      	ldr	r1, [pc, #152]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038c6:	d101      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80038c8:	2301      	movs	r3, #1
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	491a      	ldr	r1, [pc, #104]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d011      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003900:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003908:	4911      	ldr	r1, [pc, #68]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003918:	d101      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800391a:	2301      	movs	r3, #1
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d005      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800392c:	f040 80ff 	bne.w	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003936:	f7fd fb51 	bl	8000fdc <HAL_GetTick>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800393c:	e00e      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800393e:	f7fd fb4d 	bl	8000fdc <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d907      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e188      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003950:	40023800 	.word	0x40023800
 8003954:	424711e0 	.word	0x424711e0
 8003958:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800395c:	4b7e      	ldr	r3, [pc, #504]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ea      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003984:	2b00      	cmp	r3, #0
 8003986:	d028      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d124      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003990:	4b71      	ldr	r3, [pc, #452]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003996:	0c1b      	lsrs	r3, r3, #16
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	3301      	adds	r3, #1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039a2:	4b6d      	ldr	r3, [pc, #436]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a8:	0e1b      	lsrs	r3, r3, #24
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	431a      	orrs	r2, r3
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	431a      	orrs	r2, r3
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	071b      	lsls	r3, r3, #28
 80039d2:	4961      	ldr	r1, [pc, #388]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d035      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a04:	d130      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a06:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	3301      	adds	r3, #1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a18:	4b4f      	ldr	r3, [pc, #316]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1e:	0f1b      	lsrs	r3, r3, #28
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	019b      	lsls	r3, r3, #6
 8003a30:	431a      	orrs	r2, r3
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	3b01      	subs	r3, #1
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	061b      	lsls	r3, r3, #24
 8003a42:	431a      	orrs	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	071b      	lsls	r3, r3, #28
 8003a48:	4943      	ldr	r1, [pc, #268]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a50:	4b41      	ldr	r3, [pc, #260]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a56:	f023 021f 	bic.w	r2, r3, #31
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	493d      	ldr	r1, [pc, #244]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d029      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7c:	d124      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a7e:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a90:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a96:	0f1b      	lsrs	r3, r3, #28
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	019b      	lsls	r3, r3, #6
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	085b      	lsrs	r3, r3, #1
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	431a      	orrs	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	071b      	lsls	r3, r3, #28
 8003ac0:	4925      	ldr	r1, [pc, #148]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d016      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	071b      	lsls	r3, r3, #28
 8003afa:	4917      	ldr	r1, [pc, #92]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b08:	f7fd fa68 	bl	8000fdc <HAL_GetTick>
 8003b0c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b10:	f7fd fa64 	bl	8000fdc <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e09f      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b22:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	f040 8095 	bne.w	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fd fa4e 	bl	8000fdc <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b42:	e00f      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b44:	f7fd fa4a 	bl	8000fdc <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d908      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e085      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	42470068 	.word	0x42470068
 8003b60:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b64:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b70:	d0e8      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02b      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d127      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003b9a:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	019b      	lsls	r3, r3, #6
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	4928      	ldr	r1, [pc, #160]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bd0:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	3b01      	subs	r3, #1
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	4922      	ldr	r1, [pc, #136]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01d      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bfe:	d118      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	0e1b      	lsrs	r3, r3, #24
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	019b      	lsls	r3, r3, #6
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	3b01      	subs	r3, #1
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	4910      	ldr	r1, [pc, #64]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fd f9d0 	bl	8000fdc <HAL_GetTick>
 8003c3c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c40:	f7fd f9cc 	bl	8000fdc <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e007      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c52:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c5e:	d1ef      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3730      	adds	r7, #48	; 0x30
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	42470070 	.word	0x42470070

08003c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b0ae      	sub	sp, #184	; 0xb8
 8003c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c9a:	4bcb      	ldr	r3, [pc, #812]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	f200 8206 	bhi.w	80040b4 <HAL_RCC_GetSysClockFreq+0x440>
 8003ca8:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cae:	bf00      	nop
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	080040b5 	.word	0x080040b5
 8003cb8:	080040b5 	.word	0x080040b5
 8003cbc:	080040b5 	.word	0x080040b5
 8003cc0:	08003ced 	.word	0x08003ced
 8003cc4:	080040b5 	.word	0x080040b5
 8003cc8:	080040b5 	.word	0x080040b5
 8003ccc:	080040b5 	.word	0x080040b5
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	080040b5 	.word	0x080040b5
 8003cd8:	080040b5 	.word	0x080040b5
 8003cdc:	080040b5 	.word	0x080040b5
 8003ce0:	08003ee5 	.word	0x08003ee5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce4:	4bb9      	ldr	r3, [pc, #740]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x358>)
 8003ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cea:	e1e7      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cec:	4bb8      	ldr	r3, [pc, #736]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cf2:	e1e3      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf4:	4bb4      	ldr	r3, [pc, #720]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d00:	4bb1      	ldr	r3, [pc, #708]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d071      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0c:	4bae      	ldr	r3, [pc, #696]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d18:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d32:	4622      	mov	r2, r4
 8003d34:	462b      	mov	r3, r5
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	0159      	lsls	r1, r3, #5
 8003d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d44:	0150      	lsls	r0, r2, #5
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	1a51      	subs	r1, r2, r1
 8003d4e:	6439      	str	r1, [r7, #64]	; 0x40
 8003d50:	4629      	mov	r1, r5
 8003d52:	eb63 0301 	sbc.w	r3, r3, r1
 8003d56:	647b      	str	r3, [r7, #68]	; 0x44
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d64:	4649      	mov	r1, r9
 8003d66:	018b      	lsls	r3, r1, #6
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6e:	4641      	mov	r1, r8
 8003d70:	018a      	lsls	r2, r1, #6
 8003d72:	4641      	mov	r1, r8
 8003d74:	1a51      	subs	r1, r2, r1
 8003d76:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d78:	4649      	mov	r1, r9
 8003d7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	00cb      	lsls	r3, r1, #3
 8003d90:	4641      	mov	r1, r8
 8003d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d96:	4641      	mov	r1, r8
 8003d98:	00ca      	lsls	r2, r1, #3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4622      	mov	r2, r4
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
 8003da6:	462b      	mov	r3, r5
 8003da8:	460a      	mov	r2, r1
 8003daa:	eb42 0303 	adc.w	r3, r2, r3
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	024b      	lsls	r3, r1, #9
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	024a      	lsls	r2, r1, #9
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ddc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003de0:	f7fc fa7e 	bl	80002e0 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4613      	mov	r3, r2
 8003dea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dee:	e067      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df0:	4b75      	ldr	r3, [pc, #468]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	099b      	lsrs	r3, r3, #6
 8003df6:	2200      	movs	r2, #0
 8003df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dfc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003e12:	4622      	mov	r2, r4
 8003e14:	462b      	mov	r3, r5
 8003e16:	f04f 0000 	mov.w	r0, #0
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	0159      	lsls	r1, r3, #5
 8003e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e24:	0150      	lsls	r0, r2, #5
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	1a51      	subs	r1, r2, r1
 8003e2e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e30:	4629      	mov	r1, r5
 8003e32:	eb63 0301 	sbc.w	r3, r3, r1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003e44:	4649      	mov	r1, r9
 8003e46:	018b      	lsls	r3, r1, #6
 8003e48:	4641      	mov	r1, r8
 8003e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4e:	4641      	mov	r1, r8
 8003e50:	018a      	lsls	r2, r1, #6
 8003e52:	4641      	mov	r1, r8
 8003e54:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e58:	4649      	mov	r1, r9
 8003e5a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e72:	4692      	mov	sl, r2
 8003e74:	469b      	mov	fp, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	eb1a 0303 	adds.w	r3, sl, r3
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	462b      	mov	r3, r5
 8003e80:	eb4b 0303 	adc.w	r3, fp, r3
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e92:	4629      	mov	r1, r5
 8003e94:	028b      	lsls	r3, r1, #10
 8003e96:	4621      	mov	r1, r4
 8003e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	028a      	lsls	r2, r1, #10
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8003eac:	677a      	str	r2, [r7, #116]	; 0x74
 8003eae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003eb2:	f7fc fa15 	bl	80002e0 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4613      	mov	r3, r2
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ec0:	4b41      	ldr	r3, [pc, #260]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8003ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ee2:	e0eb      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ee4:	4b38      	ldr	r3, [pc, #224]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d06b      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efc:	4b32      	ldr	r3, [pc, #200]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	099b      	lsrs	r3, r3, #6
 8003f02:	2200      	movs	r2, #0
 8003f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f10:	2300      	movs	r3, #0
 8003f12:	667b      	str	r3, [r7, #100]	; 0x64
 8003f14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f18:	4622      	mov	r2, r4
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	f04f 0000 	mov.w	r0, #0
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	0159      	lsls	r1, r3, #5
 8003f26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f2a:	0150      	lsls	r0, r2, #5
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4621      	mov	r1, r4
 8003f32:	1a51      	subs	r1, r2, r1
 8003f34:	61b9      	str	r1, [r7, #24]
 8003f36:	4629      	mov	r1, r5
 8003f38:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f4a:	4659      	mov	r1, fp
 8003f4c:	018b      	lsls	r3, r1, #6
 8003f4e:	4651      	mov	r1, sl
 8003f50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f54:	4651      	mov	r1, sl
 8003f56:	018a      	lsls	r2, r1, #6
 8003f58:	4651      	mov	r1, sl
 8003f5a:	ebb2 0801 	subs.w	r8, r2, r1
 8003f5e:	4659      	mov	r1, fp
 8003f60:	eb63 0901 	sbc.w	r9, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f78:	4690      	mov	r8, r2
 8003f7a:	4699      	mov	r9, r3
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	eb18 0303 	adds.w	r3, r8, r3
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	462b      	mov	r3, r5
 8003f86:	eb49 0303 	adc.w	r3, r9, r3
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f98:	4629      	mov	r1, r5
 8003f9a:	024b      	lsls	r3, r1, #9
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	024a      	lsls	r2, r1, #9
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fae:	2200      	movs	r2, #0
 8003fb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fb2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003fb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fb8:	f7fc f992 	bl	80002e0 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc6:	e065      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x420>
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	; (80040cc <HAL_RCC_GetSysClockFreq+0x458>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	4611      	mov	r1, r2
 8003fe0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fe4:	653b      	str	r3, [r7, #80]	; 0x50
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	657b      	str	r3, [r7, #84]	; 0x54
 8003fea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003fee:	4642      	mov	r2, r8
 8003ff0:	464b      	mov	r3, r9
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	0159      	lsls	r1, r3, #5
 8003ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004000:	0150      	lsls	r0, r2, #5
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4641      	mov	r1, r8
 8004008:	1a51      	subs	r1, r2, r1
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	4649      	mov	r1, r9
 800400e:	eb63 0301 	sbc.w	r3, r3, r1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004020:	4659      	mov	r1, fp
 8004022:	018b      	lsls	r3, r1, #6
 8004024:	4651      	mov	r1, sl
 8004026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800402a:	4651      	mov	r1, sl
 800402c:	018a      	lsls	r2, r1, #6
 800402e:	4651      	mov	r1, sl
 8004030:	1a54      	subs	r4, r2, r1
 8004032:	4659      	mov	r1, fp
 8004034:	eb63 0501 	sbc.w	r5, r3, r1
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	00eb      	lsls	r3, r5, #3
 8004042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004046:	00e2      	lsls	r2, r4, #3
 8004048:	4614      	mov	r4, r2
 800404a:	461d      	mov	r5, r3
 800404c:	4643      	mov	r3, r8
 800404e:	18e3      	adds	r3, r4, r3
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	464b      	mov	r3, r9
 8004054:	eb45 0303 	adc.w	r3, r5, r3
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004066:	4629      	mov	r1, r5
 8004068:	028b      	lsls	r3, r1, #10
 800406a:	4621      	mov	r1, r4
 800406c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004070:	4621      	mov	r1, r4
 8004072:	028a      	lsls	r2, r1, #10
 8004074:	4610      	mov	r0, r2
 8004076:	4619      	mov	r1, r3
 8004078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800407c:	2200      	movs	r2, #0
 800407e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004080:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004082:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004086:	f7fc f92b 	bl	80002e0 <__aeabi_uldivmod>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4613      	mov	r3, r2
 8004090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004094:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <HAL_RCC_GetSysClockFreq+0x458>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	0f1b      	lsrs	r3, r3, #28
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 80040a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040b2:	e003      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80040b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80040ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	37b8      	adds	r7, #184	; 0xb8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	00f42400 	.word	0x00f42400

080040d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e28d      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8083 	beq.w	80041fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040f4:	4b94      	ldr	r3, [pc, #592]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d019      	beq.n	8004134 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004100:	4b91      	ldr	r3, [pc, #580]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
        || \
 8004108:	2b08      	cmp	r3, #8
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800410c:	4b8e      	ldr	r3, [pc, #568]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004118:	d00c      	beq.n	8004134 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411a:	4b8b      	ldr	r3, [pc, #556]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d112      	bne.n	800414c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004126:	4b88      	ldr	r3, [pc, #544]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004132:	d10b      	bne.n	800414c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	4b84      	ldr	r3, [pc, #528]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d05b      	beq.n	80041f8 <HAL_RCC_OscConfig+0x124>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d157      	bne.n	80041f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e25a      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004154:	d106      	bne.n	8004164 <HAL_RCC_OscConfig+0x90>
 8004156:	4b7c      	ldr	r3, [pc, #496]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a7b      	ldr	r2, [pc, #492]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e01d      	b.n	80041a0 <HAL_RCC_OscConfig+0xcc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0xb4>
 800416e:	4b76      	ldr	r3, [pc, #472]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a75      	ldr	r2, [pc, #468]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b73      	ldr	r3, [pc, #460]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a72      	ldr	r2, [pc, #456]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e00b      	b.n	80041a0 <HAL_RCC_OscConfig+0xcc>
 8004188:	4b6f      	ldr	r3, [pc, #444]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a6e      	ldr	r2, [pc, #440]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800418e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b6c      	ldr	r3, [pc, #432]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a6b      	ldr	r2, [pc, #428]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800419a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d013      	beq.n	80041d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fc ff18 	bl	8000fdc <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b0:	f7fc ff14 	bl	8000fdc <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e21f      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	4b61      	ldr	r3, [pc, #388]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0xdc>
 80041ce:	e014      	b.n	80041fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fc ff04 	bl	8000fdc <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d8:	f7fc ff00 	bl	8000fdc <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e20b      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	4b57      	ldr	r3, [pc, #348]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x104>
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d06f      	beq.n	80042e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004206:	4b50      	ldr	r3, [pc, #320]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b00      	cmp	r3, #0
 8004210:	d017      	beq.n	8004242 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004212:	4b4d      	ldr	r3, [pc, #308]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
        || \
 800421a:	2b08      	cmp	r3, #8
 800421c:	d105      	bne.n	800422a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800421e:	4b4a      	ldr	r3, [pc, #296]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800422a:	4b47      	ldr	r3, [pc, #284]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d11c      	bne.n	8004270 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004236:	4b44      	ldr	r3, [pc, #272]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d116      	bne.n	8004270 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_RCC_OscConfig+0x186>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e1d3      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b3b      	ldr	r3, [pc, #236]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4937      	ldr	r1, [pc, #220]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426e:	e03a      	b.n	80042e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004278:	4b34      	ldr	r3, [pc, #208]	; (800434c <HAL_RCC_OscConfig+0x278>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fc fead 	bl	8000fdc <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004286:	f7fc fea9 	bl	8000fdc <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e1b4      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	4b2b      	ldr	r3, [pc, #172]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b28      	ldr	r3, [pc, #160]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4925      	ldr	r1, [pc, #148]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ba:	4b24      	ldr	r3, [pc, #144]	; (800434c <HAL_RCC_OscConfig+0x278>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c0:	f7fc fe8c 	bl	8000fdc <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c8:	f7fc fe88 	bl	8000fdc <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e193      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d036      	beq.n	8004360 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fa:	4b15      	ldr	r3, [pc, #84]	; (8004350 <HAL_RCC_OscConfig+0x27c>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004300:	f7fc fe6c 	bl	8000fdc <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004308:	f7fc fe68 	bl	8000fdc <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e173      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_OscConfig+0x274>)
 800431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x234>
 8004326:	e01b      	b.n	8004360 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <HAL_RCC_OscConfig+0x27c>)
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432e:	f7fc fe55 	bl	8000fdc <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	e00e      	b.n	8004354 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004336:	f7fc fe51 	bl	8000fdc <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d907      	bls.n	8004354 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e15c      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
 8004348:	40023800 	.word	0x40023800
 800434c:	42470000 	.word	0x42470000
 8004350:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b8a      	ldr	r3, [pc, #552]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ea      	bne.n	8004336 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8097 	beq.w	800449c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004372:	4b83      	ldr	r3, [pc, #524]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b7f      	ldr	r3, [pc, #508]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a7e      	ldr	r2, [pc, #504]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
 800438e:	4b7c      	ldr	r3, [pc, #496]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439a:	2301      	movs	r3, #1
 800439c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	4b79      	ldr	r3, [pc, #484]	; (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d118      	bne.n	80043dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043aa:	4b76      	ldr	r3, [pc, #472]	; (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a75      	ldr	r2, [pc, #468]	; (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043b6:	f7fc fe11 	bl	8000fdc <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043be:	f7fc fe0d 	bl	8000fdc <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e118      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <HAL_RCC_OscConfig+0x4b0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x31e>
 80043e4:	4b66      	ldr	r3, [pc, #408]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	4a65      	ldr	r2, [pc, #404]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6713      	str	r3, [r2, #112]	; 0x70
 80043f0:	e01c      	b.n	800442c <HAL_RCC_OscConfig+0x358>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x340>
 80043fa:	4b61      	ldr	r3, [pc, #388]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a60      	ldr	r2, [pc, #384]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	; 0x70
 8004406:	4b5e      	ldr	r3, [pc, #376]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	4a5d      	ldr	r2, [pc, #372]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6713      	str	r3, [r2, #112]	; 0x70
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0x358>
 8004414:	4b5a      	ldr	r3, [pc, #360]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	4a59      	ldr	r2, [pc, #356]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6713      	str	r3, [r2, #112]	; 0x70
 8004420:	4b57      	ldr	r3, [pc, #348]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	4a56      	ldr	r2, [pc, #344]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004426:	f023 0304 	bic.w	r3, r3, #4
 800442a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fc fdd2 	bl	8000fdc <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	e00a      	b.n	8004452 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800443c:	f7fc fdce 	bl	8000fdc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f241 3288 	movw	r2, #5000	; 0x1388
 800444a:	4293      	cmp	r3, r2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0d7      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	4b4b      	ldr	r3, [pc, #300]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ee      	beq.n	800443c <HAL_RCC_OscConfig+0x368>
 800445e:	e014      	b.n	800448a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fc fdbc 	bl	8000fdc <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004466:	e00a      	b.n	800447e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fc fdb8 	bl	8000fdc <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f241 3288 	movw	r2, #5000	; 0x1388
 8004476:	4293      	cmp	r3, r2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e0c1      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447e:	4b40      	ldr	r3, [pc, #256]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1ee      	bne.n	8004468 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	4a3a      	ldr	r2, [pc, #232]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80ad 	beq.w	8004600 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d060      	beq.n	8004574 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d145      	bne.n	8004546 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b33      	ldr	r3, [pc, #204]	; (8004588 <HAL_RCC_OscConfig+0x4b4>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fc fd8c 	bl	8000fdc <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c8:	f7fc fd88 	bl	8000fdc <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e093      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	4b29      	ldr	r3, [pc, #164]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	3b01      	subs	r3, #1
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	071b      	lsls	r3, r3, #28
 8004512:	491b      	ldr	r1, [pc, #108]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004518:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCC_OscConfig+0x4b4>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fc fd5d 	bl	8000fdc <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004526:	f7fc fd59 	bl	8000fdc <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e064      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004538:	4b11      	ldr	r3, [pc, #68]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x452>
 8004544:	e05c      	b.n	8004600 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <HAL_RCC_OscConfig+0x4b4>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fc fd46 	bl	8000fdc <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004554:	f7fc fd42 	bl	8000fdc <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e04d      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCC_OscConfig+0x4ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x480>
 8004572:	e045      	b.n	8004600 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d107      	bne.n	800458c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e040      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
 8004580:	40023800 	.word	0x40023800
 8004584:	40007000 	.word	0x40007000
 8004588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800458c:	4b1f      	ldr	r3, [pc, #124]	; (800460c <HAL_RCC_OscConfig+0x538>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d030      	beq.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d129      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d122      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045bc:	4013      	ands	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d119      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	3b01      	subs	r3, #1
 80045d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d10f      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023800 	.word	0x40023800

08004610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07b      	b.n	800471a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004632:	d009      	beq.n	8004648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	61da      	str	r2, [r3, #28]
 800463a:	e005      	b.n	8004648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fc fa7c 	bl	8000b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	ea42 0103 	orr.w	r1, r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	f003 0104 	and.w	r1, r3, #4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f003 0210 	and.w	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004708:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e042      	b.n	80047ba <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d106      	bne.n	800474e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fc fa51 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2224      	movs	r2, #36	; 0x24
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004764:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fd68 	bl	800523c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800477a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800478a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800479a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b08a      	sub	sp, #40	; 0x28
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d175      	bne.n	80048ce <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_UART_Transmit+0x2c>
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e06e      	b.n	80048d0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2221      	movs	r2, #33	; 0x21
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004800:	f7fc fbec 	bl	8000fdc <HAL_GetTick>
 8004804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	88fa      	ldrh	r2, [r7, #6]
 800480a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481a:	d108      	bne.n	800482e <HAL_UART_Transmit+0x6c>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d104      	bne.n	800482e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	e003      	b.n	8004836 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004836:	e02e      	b.n	8004896 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2200      	movs	r2, #0
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fb04 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e03a      	b.n	80048d0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10b      	bne.n	8004878 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800486e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	3302      	adds	r3, #2
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	e007      	b.n	8004888 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	781a      	ldrb	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3301      	adds	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1cb      	bne.n	8004838 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2140      	movs	r1, #64	; 0x40
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 fad0 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e006      	b.n	80048d0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e000      	b.n	80048d0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
  }
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b0ba      	sub	sp, #232	; 0xe8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10f      	bne.n	800493e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <HAL_UART_IRQHandler+0x66>
 800492a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fbc2 	bl	80050c0 <UART_Receive_IT>
      return;
 800493c:	e25b      	b.n	8004df6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800493e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80de 	beq.w	8004b04 <HAL_UART_IRQHandler+0x22c>
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d106      	bne.n	8004962 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004958:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80d1 	beq.w	8004b04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_UART_IRQHandler+0xae>
 800496e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f043 0201 	orr.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_UART_IRQHandler+0xd2>
 8004992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d005      	beq.n	80049aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f043 0202 	orr.w	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <HAL_UART_IRQHandler+0xf6>
 80049b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	f043 0204 	orr.w	r2, r3, #4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d011      	beq.n	80049fe <HAL_UART_IRQHandler+0x126>
 80049da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d105      	bne.n	80049f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f043 0208 	orr.w	r2, r3, #8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 81f2 	beq.w	8004dec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_UART_IRQHandler+0x14e>
 8004a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fb4d 	bl	80050c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <HAL_UART_IRQHandler+0x17a>
 8004a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d04f      	beq.n	8004af2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa55 	bl	8004f02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d141      	bne.n	8004aea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3314      	adds	r3, #20
 8004a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1d9      	bne.n	8004a66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d013      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	4a7e      	ldr	r2, [pc, #504]	; (8004cb8 <HAL_UART_IRQHandler+0x3e0>)
 8004ac0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fc feab 	bl	8001822 <HAL_DMA_Abort_IT>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d016      	beq.n	8004b00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004adc:	4610      	mov	r0, r2
 8004ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e00e      	b.n	8004b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f99e 	bl	8004e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	e00a      	b.n	8004b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f99a 	bl	8004e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	e006      	b.n	8004b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f996 	bl	8004e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004afe:	e175      	b.n	8004dec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	bf00      	nop
    return;
 8004b02:	e173      	b.n	8004dec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	f040 814f 	bne.w	8004dac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8148 	beq.w	8004dac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8141 	beq.w	8004dac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	f040 80b6 	bne.w	8004cbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8145 	beq.w	8004df0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	f080 813e 	bcs.w	8004df0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b86:	f000 8088 	beq.w	8004c9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	330c      	adds	r3, #12
 8004b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1d9      	bne.n	8004b8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3314      	adds	r3, #20
 8004bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e1      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3314      	adds	r3, #20
 8004c18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3314      	adds	r3, #20
 8004c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1e3      	bne.n	8004c12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6a:	f023 0310 	bic.w	r3, r3, #16
 8004c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c84:	e841 2300 	strex	r3, r2, [r1]
 8004c88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e3      	bne.n	8004c58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fc fd54 	bl	8001742 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8c1 	bl	8004e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cb6:	e09b      	b.n	8004df0 <HAL_UART_IRQHandler+0x518>
 8004cb8:	08004fc9 	.word	0x08004fc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 808e 	beq.w	8004df4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8089 	beq.w	8004df4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d06:	647a      	str	r2, [r7, #68]	; 0x44
 8004d08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e3      	bne.n	8004ce2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3314      	adds	r3, #20
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	623b      	str	r3, [r7, #32]
   return(result);
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3314      	adds	r3, #20
 8004d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d3e:	633a      	str	r2, [r7, #48]	; 0x30
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e3      	bne.n	8004d1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 0310 	bic.w	r3, r3, #16
 8004d76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d84:	61fa      	str	r2, [r7, #28]
 8004d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	69b9      	ldr	r1, [r7, #24]
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	617b      	str	r3, [r7, #20]
   return(result);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e3      	bne.n	8004d60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f847 	bl	8004e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004daa:	e023      	b.n	8004df4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d009      	beq.n	8004dcc <HAL_UART_IRQHandler+0x4f4>
 8004db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f913 	bl	8004ff0 <UART_Transmit_IT>
    return;
 8004dca:	e014      	b.n	8004df6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00e      	beq.n	8004df6 <HAL_UART_IRQHandler+0x51e>
 8004dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f953 	bl	8005090 <UART_EndTransmit_IT>
    return;
 8004dea:	e004      	b.n	8004df6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004dec:	bf00      	nop
 8004dee:	e002      	b.n	8004df6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004df0:	bf00      	nop
 8004df2:	e000      	b.n	8004df6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004df4:	bf00      	nop
  }
}
 8004df6:	37e8      	adds	r7, #232	; 0xe8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e60:	e03b      	b.n	8004eda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d037      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fc f8b7 	bl	8000fdc <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e03a      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d023      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b80      	cmp	r3, #128	; 0x80
 8004e96:	d020      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b40      	cmp	r3, #64	; 0x40
 8004e9c:	d01d      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d116      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f81d 	bl	8004f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2208      	movs	r2, #8
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e00f      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d0b4      	beq.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b095      	sub	sp, #84	; 0x54
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f2a:	643a      	str	r2, [r7, #64]	; 0x40
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e5      	bne.n	8004f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e5      	bne.n	8004f3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d119      	bne.n	8004fae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	647b      	str	r3, [r7, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f9a:	61ba      	str	r2, [r7, #24]
 8004f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e5      	bne.n	8004f7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fbc:	bf00      	nop
 8004fbe:	3754      	adds	r7, #84	; 0x54
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7ff ff1e 	bl	8004e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe8:	bf00      	nop
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b21      	cmp	r3, #33	; 0x21
 8005002:	d13e      	bne.n	8005082 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500c:	d114      	bne.n	8005038 <UART_Transmit_IT+0x48>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d110      	bne.n	8005038 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800502a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	1c9a      	adds	r2, r3, #2
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]
 8005036:	e008      	b.n	800504a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	1c59      	adds	r1, r3, #1
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6211      	str	r1, [r2, #32]
 8005042:	781a      	ldrb	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29b      	uxth	r3, r3
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	4619      	mov	r1, r3
 8005058:	84d1      	strh	r1, [r2, #38]	; 0x26
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10f      	bne.n	800507e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800506c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800507c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	e000      	b.n	8005084 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005082:	2302      	movs	r3, #2
  }
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fea3 	bl	8004dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	; 0x30
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b22      	cmp	r3, #34	; 0x22
 80050d2:	f040 80ae 	bne.w	8005232 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050de:	d117      	bne.n	8005110 <UART_Receive_IT+0x50>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d113      	bne.n	8005110 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	1c9a      	adds	r2, r3, #2
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	629a      	str	r2, [r3, #40]	; 0x28
 800510e:	e026      	b.n	800515e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005122:	d007      	beq.n	8005134 <UART_Receive_IT+0x74>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <UART_Receive_IT+0x82>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b2da      	uxtb	r2, r3
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e008      	b.n	8005154 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800514e:	b2da      	uxtb	r2, r3
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29b      	uxth	r3, r3
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	4619      	mov	r1, r3
 800516c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800516e:	2b00      	cmp	r3, #0
 8005170:	d15d      	bne.n	800522e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0220 	bic.w	r2, r2, #32
 8005180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d135      	bne.n	8005224 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	613b      	str	r3, [r7, #16]
   return(result);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f023 0310 	bic.w	r3, r3, #16
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051de:	623a      	str	r2, [r7, #32]
 80051e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	69f9      	ldr	r1, [r7, #28]
 80051e4:	6a3a      	ldr	r2, [r7, #32]
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e5      	bne.n	80051be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d10a      	bne.n	8005216 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fe0b 	bl	8004e38 <HAL_UARTEx_RxEventCallback>
 8005222:	e002      	b.n	800522a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fdf3 	bl	8004e10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e002      	b.n	8005234 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	e000      	b.n	8005234 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005232:	2302      	movs	r3, #2
  }
}
 8005234:	4618      	mov	r0, r3
 8005236:	3730      	adds	r7, #48	; 0x30
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800523c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005240:	b0c0      	sub	sp, #256	; 0x100
 8005242:	af00      	add	r7, sp, #0
 8005244:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	68d9      	ldr	r1, [r3, #12]
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	ea40 0301 	orr.w	r3, r0, r1
 8005264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	431a      	orrs	r2, r3
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	431a      	orrs	r2, r3
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005294:	f021 010c 	bic.w	r1, r1, #12
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052a2:	430b      	orrs	r3, r1
 80052a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b6:	6999      	ldr	r1, [r3, #24]
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	ea40 0301 	orr.w	r3, r0, r1
 80052c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b8f      	ldr	r3, [pc, #572]	; (8005508 <UART_SetConfig+0x2cc>)
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d005      	beq.n	80052dc <UART_SetConfig+0xa0>
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b8d      	ldr	r3, [pc, #564]	; (800550c <UART_SetConfig+0x2d0>)
 80052d8:	429a      	cmp	r2, r3
 80052da:	d104      	bne.n	80052e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052dc:	f7fe f98c 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 80052e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052e4:	e003      	b.n	80052ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052e6:	f7fe f973 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80052ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f8:	f040 810c 	bne.w	8005514 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005300:	2200      	movs	r2, #0
 8005302:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005306:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800530a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800530e:	4622      	mov	r2, r4
 8005310:	462b      	mov	r3, r5
 8005312:	1891      	adds	r1, r2, r2
 8005314:	65b9      	str	r1, [r7, #88]	; 0x58
 8005316:	415b      	adcs	r3, r3
 8005318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800531a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800531e:	4621      	mov	r1, r4
 8005320:	eb12 0801 	adds.w	r8, r2, r1
 8005324:	4629      	mov	r1, r5
 8005326:	eb43 0901 	adc.w	r9, r3, r1
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800533a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800533e:	4690      	mov	r8, r2
 8005340:	4699      	mov	r9, r3
 8005342:	4623      	mov	r3, r4
 8005344:	eb18 0303 	adds.w	r3, r8, r3
 8005348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800534c:	462b      	mov	r3, r5
 800534e:	eb49 0303 	adc.w	r3, r9, r3
 8005352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005362:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800536a:	460b      	mov	r3, r1
 800536c:	18db      	adds	r3, r3, r3
 800536e:	653b      	str	r3, [r7, #80]	; 0x50
 8005370:	4613      	mov	r3, r2
 8005372:	eb42 0303 	adc.w	r3, r2, r3
 8005376:	657b      	str	r3, [r7, #84]	; 0x54
 8005378:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800537c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005380:	f7fa ffae 	bl	80002e0 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4b61      	ldr	r3, [pc, #388]	; (8005510 <UART_SetConfig+0x2d4>)
 800538a:	fba3 2302 	umull	r2, r3, r3, r2
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	011c      	lsls	r4, r3, #4
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005396:	2200      	movs	r2, #0
 8005398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800539c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	1891      	adds	r1, r2, r2
 80053aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80053ac:	415b      	adcs	r3, r3
 80053ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053b4:	4641      	mov	r1, r8
 80053b6:	eb12 0a01 	adds.w	sl, r2, r1
 80053ba:	4649      	mov	r1, r9
 80053bc:	eb43 0b01 	adc.w	fp, r3, r1
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053d4:	4692      	mov	sl, r2
 80053d6:	469b      	mov	fp, r3
 80053d8:	4643      	mov	r3, r8
 80053da:	eb1a 0303 	adds.w	r3, sl, r3
 80053de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053e2:	464b      	mov	r3, r9
 80053e4:	eb4b 0303 	adc.w	r3, fp, r3
 80053e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005400:	460b      	mov	r3, r1
 8005402:	18db      	adds	r3, r3, r3
 8005404:	643b      	str	r3, [r7, #64]	; 0x40
 8005406:	4613      	mov	r3, r2
 8005408:	eb42 0303 	adc.w	r3, r2, r3
 800540c:	647b      	str	r3, [r7, #68]	; 0x44
 800540e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005412:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005416:	f7fa ff63 	bl	80002e0 <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4611      	mov	r1, r2
 8005420:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <UART_SetConfig+0x2d4>)
 8005422:	fba3 2301 	umull	r2, r3, r3, r1
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2264      	movs	r2, #100	; 0x64
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	1acb      	subs	r3, r1, r3
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005436:	4b36      	ldr	r3, [pc, #216]	; (8005510 <UART_SetConfig+0x2d4>)
 8005438:	fba3 2302 	umull	r2, r3, r3, r2
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005444:	441c      	add	r4, r3
 8005446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800544a:	2200      	movs	r2, #0
 800544c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005450:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005454:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	1891      	adds	r1, r2, r2
 800545e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005460:	415b      	adcs	r3, r3
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005468:	4641      	mov	r1, r8
 800546a:	1851      	adds	r1, r2, r1
 800546c:	6339      	str	r1, [r7, #48]	; 0x30
 800546e:	4649      	mov	r1, r9
 8005470:	414b      	adcs	r3, r1
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005480:	4659      	mov	r1, fp
 8005482:	00cb      	lsls	r3, r1, #3
 8005484:	4651      	mov	r1, sl
 8005486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800548a:	4651      	mov	r1, sl
 800548c:	00ca      	lsls	r2, r1, #3
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	4603      	mov	r3, r0
 8005494:	4642      	mov	r2, r8
 8005496:	189b      	adds	r3, r3, r2
 8005498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800549c:	464b      	mov	r3, r9
 800549e:	460a      	mov	r2, r1
 80054a0:	eb42 0303 	adc.w	r3, r2, r3
 80054a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054bc:	460b      	mov	r3, r1
 80054be:	18db      	adds	r3, r3, r3
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c2:	4613      	mov	r3, r2
 80054c4:	eb42 0303 	adc.w	r3, r2, r3
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054d2:	f7fa ff05 	bl	80002e0 <__aeabi_uldivmod>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <UART_SetConfig+0x2d4>)
 80054dc:	fba3 1302 	umull	r1, r3, r3, r2
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	2164      	movs	r1, #100	; 0x64
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	3332      	adds	r3, #50	; 0x32
 80054ee:	4a08      	ldr	r2, [pc, #32]	; (8005510 <UART_SetConfig+0x2d4>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	f003 0207 	and.w	r2, r3, #7
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4422      	add	r2, r4
 8005502:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005504:	e106      	b.n	8005714 <UART_SetConfig+0x4d8>
 8005506:	bf00      	nop
 8005508:	40011000 	.word	0x40011000
 800550c:	40011400 	.word	0x40011400
 8005510:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005518:	2200      	movs	r2, #0
 800551a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800551e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005522:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005526:	4642      	mov	r2, r8
 8005528:	464b      	mov	r3, r9
 800552a:	1891      	adds	r1, r2, r2
 800552c:	6239      	str	r1, [r7, #32]
 800552e:	415b      	adcs	r3, r3
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
 8005532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005536:	4641      	mov	r1, r8
 8005538:	1854      	adds	r4, r2, r1
 800553a:	4649      	mov	r1, r9
 800553c:	eb43 0501 	adc.w	r5, r3, r1
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	00eb      	lsls	r3, r5, #3
 800554a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800554e:	00e2      	lsls	r2, r4, #3
 8005550:	4614      	mov	r4, r2
 8005552:	461d      	mov	r5, r3
 8005554:	4643      	mov	r3, r8
 8005556:	18e3      	adds	r3, r4, r3
 8005558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800555c:	464b      	mov	r3, r9
 800555e:	eb45 0303 	adc.w	r3, r5, r3
 8005562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005572:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005582:	4629      	mov	r1, r5
 8005584:	008b      	lsls	r3, r1, #2
 8005586:	4621      	mov	r1, r4
 8005588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800558c:	4621      	mov	r1, r4
 800558e:	008a      	lsls	r2, r1, #2
 8005590:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005594:	f7fa fea4 	bl	80002e0 <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4b60      	ldr	r3, [pc, #384]	; (8005720 <UART_SetConfig+0x4e4>)
 800559e:	fba3 2302 	umull	r2, r3, r3, r2
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	011c      	lsls	r4, r3, #4
 80055a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	1891      	adds	r1, r2, r2
 80055be:	61b9      	str	r1, [r7, #24]
 80055c0:	415b      	adcs	r3, r3
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c8:	4641      	mov	r1, r8
 80055ca:	1851      	adds	r1, r2, r1
 80055cc:	6139      	str	r1, [r7, #16]
 80055ce:	4649      	mov	r1, r9
 80055d0:	414b      	adcs	r3, r1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055e0:	4659      	mov	r1, fp
 80055e2:	00cb      	lsls	r3, r1, #3
 80055e4:	4651      	mov	r1, sl
 80055e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ea:	4651      	mov	r1, sl
 80055ec:	00ca      	lsls	r2, r1, #3
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	4642      	mov	r2, r8
 80055f6:	189b      	adds	r3, r3, r2
 80055f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055fc:	464b      	mov	r3, r9
 80055fe:	460a      	mov	r2, r1
 8005600:	eb42 0303 	adc.w	r3, r2, r3
 8005604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	67bb      	str	r3, [r7, #120]	; 0x78
 8005612:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005620:	4649      	mov	r1, r9
 8005622:	008b      	lsls	r3, r1, #2
 8005624:	4641      	mov	r1, r8
 8005626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800562a:	4641      	mov	r1, r8
 800562c:	008a      	lsls	r2, r1, #2
 800562e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005632:	f7fa fe55 	bl	80002e0 <__aeabi_uldivmod>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4611      	mov	r1, r2
 800563c:	4b38      	ldr	r3, [pc, #224]	; (8005720 <UART_SetConfig+0x4e4>)
 800563e:	fba3 2301 	umull	r2, r3, r3, r1
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	2264      	movs	r2, #100	; 0x64
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	1acb      	subs	r3, r1, r3
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	3332      	adds	r3, #50	; 0x32
 8005650:	4a33      	ldr	r2, [pc, #204]	; (8005720 <UART_SetConfig+0x4e4>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800565c:	441c      	add	r4, r3
 800565e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005662:	2200      	movs	r2, #0
 8005664:	673b      	str	r3, [r7, #112]	; 0x70
 8005666:	677a      	str	r2, [r7, #116]	; 0x74
 8005668:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800566c:	4642      	mov	r2, r8
 800566e:	464b      	mov	r3, r9
 8005670:	1891      	adds	r1, r2, r2
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	415b      	adcs	r3, r3
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800567c:	4641      	mov	r1, r8
 800567e:	1851      	adds	r1, r2, r1
 8005680:	6039      	str	r1, [r7, #0]
 8005682:	4649      	mov	r1, r9
 8005684:	414b      	adcs	r3, r1
 8005686:	607b      	str	r3, [r7, #4]
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	f04f 0300 	mov.w	r3, #0
 8005690:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005694:	4659      	mov	r1, fp
 8005696:	00cb      	lsls	r3, r1, #3
 8005698:	4651      	mov	r1, sl
 800569a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800569e:	4651      	mov	r1, sl
 80056a0:	00ca      	lsls	r2, r1, #3
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	4642      	mov	r2, r8
 80056aa:	189b      	adds	r3, r3, r2
 80056ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ae:	464b      	mov	r3, r9
 80056b0:	460a      	mov	r2, r1
 80056b2:	eb42 0303 	adc.w	r3, r2, r3
 80056b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	663b      	str	r3, [r7, #96]	; 0x60
 80056c2:	667a      	str	r2, [r7, #100]	; 0x64
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056d0:	4649      	mov	r1, r9
 80056d2:	008b      	lsls	r3, r1, #2
 80056d4:	4641      	mov	r1, r8
 80056d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056da:	4641      	mov	r1, r8
 80056dc:	008a      	lsls	r2, r1, #2
 80056de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056e2:	f7fa fdfd 	bl	80002e0 <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <UART_SetConfig+0x4e4>)
 80056ec:	fba3 1302 	umull	r1, r3, r3, r2
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	2164      	movs	r1, #100	; 0x64
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	3332      	adds	r3, #50	; 0x32
 80056fe:	4a08      	ldr	r2, [pc, #32]	; (8005720 <UART_SetConfig+0x4e4>)
 8005700:	fba2 2303 	umull	r2, r3, r2, r3
 8005704:	095b      	lsrs	r3, r3, #5
 8005706:	f003 020f 	and.w	r2, r3, #15
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4422      	add	r2, r4
 8005712:	609a      	str	r2, [r3, #8]
}
 8005714:	bf00      	nop
 8005716:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800571a:	46bd      	mov	sp, r7
 800571c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005720:	51eb851f 	.word	0x51eb851f

08005724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005724:	b084      	sub	sp, #16
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	f107 001c 	add.w	r0, r7, #28
 8005732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005736:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800573a:	2b01      	cmp	r3, #1
 800573c:	d123      	bne.n	8005786 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800576a:	2b01      	cmp	r3, #1
 800576c:	d105      	bne.n	800577a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fae2 	bl	8006d44 <USB_CoreReset>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]
 8005784:	e01b      	b.n	80057be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f001 fad6 	bl	8006d44 <USB_CoreReset>
 8005798:	4603      	mov	r3, r0
 800579a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800579c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
 80057b0:	e005      	b.n	80057be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057be:	7fbb      	ldrb	r3, [r7, #30]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10b      	bne.n	80057dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f043 0206 	orr.w	r2, r3, #6
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057e8:	b004      	add	sp, #16
 80057ea:	4770      	bx	lr

080057ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d165      	bne.n	80058cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4a41      	ldr	r2, [pc, #260]	; (8005908 <USB_SetTurnaroundTime+0x11c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d906      	bls.n	8005816 <USB_SetTurnaroundTime+0x2a>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4a40      	ldr	r2, [pc, #256]	; (800590c <USB_SetTurnaroundTime+0x120>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d202      	bcs.n	8005816 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005810:	230f      	movs	r3, #15
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e062      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4a3c      	ldr	r2, [pc, #240]	; (800590c <USB_SetTurnaroundTime+0x120>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d306      	bcc.n	800582c <USB_SetTurnaroundTime+0x40>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4a3b      	ldr	r2, [pc, #236]	; (8005910 <USB_SetTurnaroundTime+0x124>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d202      	bcs.n	800582c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005826:	230e      	movs	r3, #14
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e057      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4a38      	ldr	r2, [pc, #224]	; (8005910 <USB_SetTurnaroundTime+0x124>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d306      	bcc.n	8005842 <USB_SetTurnaroundTime+0x56>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4a37      	ldr	r2, [pc, #220]	; (8005914 <USB_SetTurnaroundTime+0x128>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d202      	bcs.n	8005842 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800583c:	230d      	movs	r3, #13
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	e04c      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4a33      	ldr	r2, [pc, #204]	; (8005914 <USB_SetTurnaroundTime+0x128>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d306      	bcc.n	8005858 <USB_SetTurnaroundTime+0x6c>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4a32      	ldr	r2, [pc, #200]	; (8005918 <USB_SetTurnaroundTime+0x12c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d802      	bhi.n	8005858 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005852:	230c      	movs	r3, #12
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e041      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4a2f      	ldr	r2, [pc, #188]	; (8005918 <USB_SetTurnaroundTime+0x12c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d906      	bls.n	800586e <USB_SetTurnaroundTime+0x82>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4a2e      	ldr	r2, [pc, #184]	; (800591c <USB_SetTurnaroundTime+0x130>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d802      	bhi.n	800586e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005868:	230b      	movs	r3, #11
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e036      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4a2a      	ldr	r2, [pc, #168]	; (800591c <USB_SetTurnaroundTime+0x130>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d906      	bls.n	8005884 <USB_SetTurnaroundTime+0x98>
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4a29      	ldr	r2, [pc, #164]	; (8005920 <USB_SetTurnaroundTime+0x134>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d802      	bhi.n	8005884 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800587e:	230a      	movs	r3, #10
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e02b      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4a26      	ldr	r2, [pc, #152]	; (8005920 <USB_SetTurnaroundTime+0x134>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d906      	bls.n	800589a <USB_SetTurnaroundTime+0xae>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4a25      	ldr	r2, [pc, #148]	; (8005924 <USB_SetTurnaroundTime+0x138>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d202      	bcs.n	800589a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005894:	2309      	movs	r3, #9
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e020      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4a21      	ldr	r2, [pc, #132]	; (8005924 <USB_SetTurnaroundTime+0x138>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d306      	bcc.n	80058b0 <USB_SetTurnaroundTime+0xc4>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4a20      	ldr	r2, [pc, #128]	; (8005928 <USB_SetTurnaroundTime+0x13c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d802      	bhi.n	80058b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80058aa:	2308      	movs	r3, #8
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e015      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <USB_SetTurnaroundTime+0x13c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d906      	bls.n	80058c6 <USB_SetTurnaroundTime+0xda>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4a1c      	ldr	r2, [pc, #112]	; (800592c <USB_SetTurnaroundTime+0x140>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d202      	bcs.n	80058c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058c0:	2307      	movs	r3, #7
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e00a      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058c6:	2306      	movs	r3, #6
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	e007      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d102      	bne.n	80058d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058d2:	2309      	movs	r3, #9
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e001      	b.n	80058dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058d8:	2309      	movs	r3, #9
 80058da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	029b      	lsls	r3, r3, #10
 80058f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058f4:	431a      	orrs	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	00d8acbf 	.word	0x00d8acbf
 800590c:	00e4e1c0 	.word	0x00e4e1c0
 8005910:	00f42400 	.word	0x00f42400
 8005914:	01067380 	.word	0x01067380
 8005918:	011a499f 	.word	0x011a499f
 800591c:	01312cff 	.word	0x01312cff
 8005920:	014ca43f 	.word	0x014ca43f
 8005924:	016e3600 	.word	0x016e3600
 8005928:	01a6ab1f 	.word	0x01a6ab1f
 800592c:	01e84800 	.word	0x01e84800

08005930 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f043 0201 	orr.w	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f023 0201 	bic.w	r2, r3, #1
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d115      	bne.n	80059c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059a2:	200a      	movs	r0, #10
 80059a4:	f7fb fb26 	bl	8000ff4 <HAL_Delay>
      ms += 10U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	330a      	adds	r3, #10
 80059ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 f939 	bl	8006c26 <USB_GetMode>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d01e      	beq.n	80059f8 <USB_SetCurrentMode+0x84>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2bc7      	cmp	r3, #199	; 0xc7
 80059be:	d9f0      	bls.n	80059a2 <USB_SetCurrentMode+0x2e>
 80059c0:	e01a      	b.n	80059f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d115      	bne.n	80059f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059d4:	200a      	movs	r0, #10
 80059d6:	f7fb fb0d 	bl	8000ff4 <HAL_Delay>
      ms += 10U;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	330a      	adds	r3, #10
 80059de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 f920 	bl	8006c26 <USB_GetMode>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <USB_SetCurrentMode+0x84>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2bc7      	cmp	r3, #199	; 0xc7
 80059f0:	d9f0      	bls.n	80059d4 <USB_SetCurrentMode+0x60>
 80059f2:	e001      	b.n	80059f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e005      	b.n	8005a04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2bc8      	cmp	r3, #200	; 0xc8
 80059fc:	d101      	bne.n	8005a02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b086      	sub	sp, #24
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e009      	b.n	8005a40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	3340      	adds	r3, #64	; 0x40
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	2200      	movs	r2, #0
 8005a38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b0e      	cmp	r3, #14
 8005a44:	d9f2      	bls.n	8005a2c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11c      	bne.n	8005a88 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	e005      	b.n	8005a94 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aa0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10d      	bne.n	8005ac4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f968 	bl	8005d88 <USB_SetDevSpeed>
 8005ab8:	e008      	b.n	8005acc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005aba:	2101      	movs	r1, #1
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f963 	bl	8005d88 <USB_SetDevSpeed>
 8005ac2:	e003      	b.n	8005acc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ac4:	2103      	movs	r1, #3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f95e 	bl	8005d88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005acc:	2110      	movs	r1, #16
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f8fa 	bl	8005cc8 <USB_FlushTxFifo>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f924 	bl	8005d2c <USB_FlushRxFifo>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	461a      	mov	r2, r3
 8005af6:	2300      	movs	r3, #0
 8005af8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b00:	461a      	mov	r2, r3
 8005b02:	2300      	movs	r3, #0
 8005b04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b12:	2300      	movs	r3, #0
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	e043      	b.n	8005ba0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b2e:	d118      	bne.n	8005b62 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	461a      	mov	r2, r3
 8005b44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e013      	b.n	8005b74 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	e008      	b.n	8005b74 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2300      	movs	r3, #0
 8005b72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	461a      	mov	r2, r3
 8005b82:	2300      	movs	r3, #0
 8005b84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	461a      	mov	r2, r3
 8005b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d3b5      	bcc.n	8005b18 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	e043      	b.n	8005c3a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bc8:	d118      	bne.n	8005bfc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	461a      	mov	r2, r3
 8005bde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	e013      	b.n	8005c0e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e008      	b.n	8005c0e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	3301      	adds	r3, #1
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c3e:	461a      	mov	r2, r3
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d3b5      	bcc.n	8005bb2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d105      	bne.n	8005c7c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f043 0210 	orr.w	r2, r3, #16
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <USB_DevInit+0x2b8>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f043 0208 	orr.w	r2, r3, #8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c9c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d107      	bne.n	8005cb4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cac:	f043 0304 	orr.w	r3, r3, #4
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cc0:	b004      	add	sp, #16
 8005cc2:	4770      	bx	lr
 8005cc4:	803c3800 	.word	0x803c3800

08005cc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ce2:	d901      	bls.n	8005ce8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e01b      	b.n	8005d20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	daf2      	bge.n	8005cd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	019b      	lsls	r3, r3, #6
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d0c:	d901      	bls.n	8005d12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e006      	b.n	8005d20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d0f0      	beq.n	8005d00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d44:	d901      	bls.n	8005d4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e018      	b.n	8005d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	daf2      	bge.n	8005d38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2210      	movs	r2, #16
 8005d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d68:	d901      	bls.n	8005d6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e006      	b.n	8005d7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d0f0      	beq.n	8005d5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da8:	4313      	orrs	r3, r2
 8005daa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b087      	sub	sp, #28
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0306 	and.w	r3, r3, #6
 8005dd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]
 8005dde:	e00a      	b.n	8005df6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d002      	beq.n	8005dec <USB_GetDevSpeed+0x32>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b06      	cmp	r3, #6
 8005dea:	d102      	bne.n	8005df2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005dec:	2302      	movs	r3, #2
 8005dee:	75fb      	strb	r3, [r7, #23]
 8005df0:	e001      	b.n	8005df6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005df2:	230f      	movs	r3, #15
 8005df4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d13a      	bne.n	8005e96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	2101      	movs	r1, #1
 8005e32:	fa01 f303 	lsl.w	r3, r1, r3
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	68f9      	ldr	r1, [r7, #12]
 8005e3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d155      	bne.n	8005f04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	791b      	ldrb	r3, [r3, #4]
 8005e72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	059b      	lsls	r3, r3, #22
 8005e7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	e036      	b.n	8005f04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d11a      	bne.n	8005f04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	791b      	ldrb	r3, [r3, #4]
 8005ee8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eea:	430b      	orrs	r3, r1
 8005eec:	4313      	orrs	r3, r2
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d161      	bne.n	8005ff4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f46:	d11f      	bne.n	8005f88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa8:	4013      	ands	r3, r2
 8005faa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fcc:	4013      	ands	r3, r2
 8005fce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	0159      	lsls	r1, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	440b      	add	r3, r1
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	4619      	mov	r1, r3
 8005fec:	4b35      	ldr	r3, [pc, #212]	; (80060c4 <USB_DeactivateEndpoint+0x1b0>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	600b      	str	r3, [r1, #0]
 8005ff2:	e060      	b.n	80060b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800600a:	d11f      	bne.n	800604c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	440a      	add	r2, r1
 8006022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006026:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800602a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006046:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800604a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	43db      	mvns	r3, r3
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800606c:	4013      	ands	r3, r2
 800606e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	2101      	movs	r1, #1
 8006082:	fa01 f303 	lsl.w	r3, r1, r3
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	43db      	mvns	r3, r3
 800608a:	68f9      	ldr	r1, [r7, #12]
 800608c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006090:	4013      	ands	r3, r2
 8006092:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	0159      	lsls	r1, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	440b      	add	r3, r1
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	4619      	mov	r1, r3
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <USB_DeactivateEndpoint+0x1b4>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	ec337800 	.word	0xec337800
 80060c8:	eff37800 	.word	0xeff37800

080060cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	f040 8180 	bne.w	80063ee <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d132      	bne.n	800615c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006110:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006114:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006118:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	440a      	add	r2, r1
 8006130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006138:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	440a      	add	r2, r1
 8006150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006154:	0cdb      	lsrs	r3, r3, #19
 8006156:	04db      	lsls	r3, r3, #19
 8006158:	6113      	str	r3, [r2, #16]
 800615a:	e098      	b.n	800628e <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006176:	0cdb      	lsrs	r3, r3, #19
 8006178:	04db      	lsls	r3, r3, #19
 800617a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006196:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800619a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800619e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d11a      	bne.n	80061dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d903      	bls.n	80061ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061d8:	6113      	str	r3, [r2, #16]
 80061da:	e045      	b.n	8006268 <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	4413      	add	r3, r2
 80061e6:	1e5a      	subs	r2, r3, #1
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	8afb      	ldrh	r3, [r7, #22]
 8006202:	04db      	lsls	r3, r3, #19
 8006204:	4619      	mov	r1, r3
 8006206:	4ba4      	ldr	r3, [pc, #656]	; (8006498 <USB_EPStartXfer+0x3cc>)
 8006208:	400b      	ands	r3, r1
 800620a:	69b9      	ldr	r1, [r7, #24]
 800620c:	0148      	lsls	r0, r1, #5
 800620e:	69f9      	ldr	r1, [r7, #28]
 8006210:	4401      	add	r1, r0
 8006212:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006216:	4313      	orrs	r3, r2
 8006218:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	791b      	ldrb	r3, [r3, #4]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d122      	bne.n	8006268 <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	440a      	add	r2, r1
 8006238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006240:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	8afb      	ldrh	r3, [r7, #22]
 8006252:	075b      	lsls	r3, r3, #29
 8006254:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006258:	69b9      	ldr	r1, [r7, #24]
 800625a:	0148      	lsls	r0, r1, #5
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	4401      	add	r1, r0
 8006260:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006264:	4313      	orrs	r3, r2
 8006266:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627e:	69b9      	ldr	r1, [r7, #24]
 8006280:	0148      	lsls	r0, r1, #5
 8006282:	69f9      	ldr	r1, [r7, #28]
 8006284:	4401      	add	r1, r0
 8006286:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800628a:	4313      	orrs	r3, r2
 800628c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d14b      	bne.n	800632c <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d009      	beq.n	80062b0 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	461a      	mov	r2, r3
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	791b      	ldrb	r3, [r3, #4]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d128      	bne.n	800630a <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d110      	bne.n	80062ea <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	e00f      	b.n	800630a <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	0151      	lsls	r1, r2, #5
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	440a      	add	r2, r1
 8006300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006308:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	0151      	lsls	r1, r2, #5
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	440a      	add	r2, r1
 8006320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006324:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	e165      	b.n	80065f8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006346:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800634a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	791b      	ldrb	r3, [r3, #4]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d015      	beq.n	8006380 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 814d 	beq.w	80065f8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	2101      	movs	r1, #1
 8006370:	fa01 f303 	lsl.w	r3, r1, r3
 8006374:	69f9      	ldr	r1, [r7, #28]
 8006376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800637a:	4313      	orrs	r3, r2
 800637c:	634b      	str	r3, [r1, #52]	; 0x34
 800637e:	e13b      	b.n	80065f8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d110      	bne.n	80063b2 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	e00f      	b.n	80063d2 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	68d9      	ldr	r1, [r3, #12]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	b298      	uxth	r0, r3
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	4603      	mov	r3, r0
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f9b8 	bl	800675c <USB_WritePacket>
 80063ec:	e104      	b.n	80065f8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006408:	0cdb      	lsrs	r3, r3, #19
 800640a:	04db      	lsls	r3, r3, #19
 800640c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800642c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006430:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d131      	bne.n	800649c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006466:	69b9      	ldr	r1, [r7, #24]
 8006468:	0148      	lsls	r0, r1, #5
 800646a:	69f9      	ldr	r1, [r7, #28]
 800646c:	4401      	add	r1, r0
 800646e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006472:	4313      	orrs	r3, r2
 8006474:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	440a      	add	r2, r1
 800648c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006494:	6113      	str	r3, [r2, #16]
 8006496:	e061      	b.n	800655c <USB_EPStartXfer+0x490>
 8006498:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d123      	bne.n	80064ec <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b0:	691a      	ldr	r2, [r3, #16]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ba:	69b9      	ldr	r1, [r7, #24]
 80064bc:	0148      	lsls	r0, r1, #5
 80064be:	69f9      	ldr	r1, [r7, #28]
 80064c0:	4401      	add	r1, r0
 80064c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064c6:	4313      	orrs	r3, r2
 80064c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	0151      	lsls	r1, r2, #5
 80064dc:	69fa      	ldr	r2, [r7, #28]
 80064de:	440a      	add	r2, r1
 80064e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064e8:	6113      	str	r3, [r2, #16]
 80064ea:	e037      	b.n	800655c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	4413      	add	r3, r2
 80064f6:	1e5a      	subs	r2, r3, #1
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006500:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	8afa      	ldrh	r2, [r7, #22]
 8006508:	fb03 f202 	mul.w	r2, r3, r2
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	8afb      	ldrh	r3, [r7, #22]
 8006520:	04d9      	lsls	r1, r3, #19
 8006522:	4b38      	ldr	r3, [pc, #224]	; (8006604 <USB_EPStartXfer+0x538>)
 8006524:	400b      	ands	r3, r1
 8006526:	69b9      	ldr	r1, [r7, #24]
 8006528:	0148      	lsls	r0, r1, #5
 800652a:	69f9      	ldr	r1, [r7, #28]
 800652c:	4401      	add	r1, r0
 800652e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006532:	4313      	orrs	r3, r2
 8006534:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800654c:	69b9      	ldr	r1, [r7, #24]
 800654e:	0148      	lsls	r0, r1, #5
 8006550:	69f9      	ldr	r1, [r7, #28]
 8006552:	4401      	add	r1, r0
 8006554:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006558:	4313      	orrs	r3, r2
 800655a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d10d      	bne.n	800657e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d009      	beq.n	800657e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	68d9      	ldr	r1, [r3, #12]
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	460a      	mov	r2, r1
 800657c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	791b      	ldrb	r3, [r3, #4]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d128      	bne.n	80065d8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006592:	2b00      	cmp	r3, #0
 8006594:	d110      	bne.n	80065b8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	e00f      	b.n	80065d8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3720      	adds	r7, #32
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	1ff80000 	.word	0x1ff80000

08006608 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d14a      	bne.n	80066bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800663a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800663e:	f040 8086 	bne.w	800674e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006660:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006664:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	7812      	ldrb	r2, [r2, #0]
 800667a:	0151      	lsls	r1, r2, #5
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	440a      	add	r2, r1
 8006680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006688:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f242 7210 	movw	r2, #10000	; 0x2710
 8006696:	4293      	cmp	r3, r2
 8006698:	d902      	bls.n	80066a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
          break;
 800669e:	e056      	b.n	800674e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b8:	d0e7      	beq.n	800668a <USB_EPStopXfer+0x82>
 80066ba:	e048      	b.n	800674e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066d4:	d13b      	bne.n	800674e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f242 7210 	movw	r2, #10000	; 0x2710
 800672a:	4293      	cmp	r3, r2
 800672c:	d902      	bls.n	8006734 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	75fb      	strb	r3, [r7, #23]
          break;
 8006732:	e00c      	b.n	800674e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800674c:	d0e7      	beq.n	800671e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800674e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006750:	4618      	mov	r0, r3
 8006752:	371c      	adds	r7, #28
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800675c:	b480      	push	{r7}
 800675e:	b089      	sub	sp, #36	; 0x24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4611      	mov	r1, r2
 8006768:	461a      	mov	r2, r3
 800676a:	460b      	mov	r3, r1
 800676c:	71fb      	strb	r3, [r7, #7]
 800676e:	4613      	mov	r3, r2
 8006770:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800677a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800677e:	2b00      	cmp	r3, #0
 8006780:	d123      	bne.n	80067ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006782:	88bb      	ldrh	r3, [r7, #4]
 8006784:	3303      	adds	r3, #3
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	e018      	b.n	80067c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	031a      	lsls	r2, r3, #12
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	4413      	add	r3, r2
 8006798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679c:	461a      	mov	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	3301      	adds	r3, #1
 80067a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	3301      	adds	r3, #1
 80067ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	3301      	adds	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	3301      	adds	r3, #1
 80067ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	3301      	adds	r3, #1
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d3e2      	bcc.n	8006790 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3724      	adds	r7, #36	; 0x24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067d8:	b480      	push	{r7}
 80067da:	b08b      	sub	sp, #44	; 0x2c
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	089b      	lsrs	r3, r3, #2
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067fe:	2300      	movs	r3, #0
 8006800:	623b      	str	r3, [r7, #32]
 8006802:	e014      	b.n	800682e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	3301      	adds	r3, #1
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	3301      	adds	r3, #1
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	3301      	adds	r3, #1
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	3301      	adds	r3, #1
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	3301      	adds	r3, #1
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	429a      	cmp	r2, r3
 8006834:	d3e6      	bcc.n	8006804 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006836:	8bfb      	ldrh	r3, [r7, #30]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01e      	beq.n	800687a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006846:	461a      	mov	r2, r3
 8006848:	f107 0310 	add.w	r3, r7, #16
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	fa22 f303 	lsr.w	r3, r2, r3
 800685c:	b2da      	uxtb	r2, r3
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	701a      	strb	r2, [r3, #0]
      i++;
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	3301      	adds	r3, #1
 8006866:	623b      	str	r3, [r7, #32]
      pDest++;
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	3301      	adds	r3, #1
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800686e:	8bfb      	ldrh	r3, [r7, #30]
 8006870:	3b01      	subs	r3, #1
 8006872:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006874:	8bfb      	ldrh	r3, [r7, #30]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1ea      	bne.n	8006850 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800687c:	4618      	mov	r0, r3
 800687e:	372c      	adds	r7, #44	; 0x2c
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d12c      	bne.n	80068fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	db12      	blt.n	80068dc <USB_EPSetStall+0x54>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00f      	beq.n	80068dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	e02b      	b.n	8006956 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	db12      	blt.n	8006936 <USB_EPSetStall+0xae>
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00f      	beq.n	8006936 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	440a      	add	r2, r1
 800692c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006930:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006934:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006950:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006954:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d128      	bne.n	80069d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	440a      	add	r2, r1
 8006996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800699e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	791b      	ldrb	r3, [r3, #4]
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d003      	beq.n	80069b0 <USB_EPClearStall+0x4c>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	791b      	ldrb	r3, [r3, #4]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d138      	bne.n	8006a22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	0151      	lsls	r1, r2, #5
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	440a      	add	r2, r1
 80069c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	e027      	b.n	8006a22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d003      	beq.n	8006a02 <USB_EPClearStall+0x9e>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	791b      	ldrb	r3, [r3, #4]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d10f      	bne.n	8006a22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	0151      	lsls	r1, r2, #5
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	440a      	add	r2, r1
 8006a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a64:	68f9      	ldr	r1, [r7, #12]
 8006a66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a96:	f023 0303 	bic.w	r3, r3, #3
 8006a9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aaa:	f023 0302 	bic.w	r3, r3, #2
 8006aae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ad8:	f023 0303 	bic.w	r3, r3, #3
 8006adc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aec:	f043 0302 	orr.w	r3, r3, #2
 8006af0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4013      	ands	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b18:	68fb      	ldr	r3, [r7, #12]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	4013      	ands	r3, r2
 8006b48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	0c1b      	lsrs	r3, r3, #16
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	b29b      	uxth	r3, r3
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b087      	sub	sp, #28
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfa:	01db      	lsls	r3, r3, #7
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4013      	ands	r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c18:	68bb      	ldr	r3, [r7, #8]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	f003 0301 	and.w	r3, r3, #1
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c60:	f023 0307 	bic.w	r3, r3, #7
 8006c64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	460b      	mov	r3, r1
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	333c      	adds	r3, #60	; 0x3c
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <USB_EP0_OutStart+0xb8>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d90a      	bls.n	8006cc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cbc:	d101      	bne.n	8006cc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e037      	b.n	8006d32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2300      	movs	r3, #0
 8006ccc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ce0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf0:	f043 0318 	orr.w	r3, r3, #24
 8006cf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d10f      	bne.n	8006d30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	4f54300a 	.word	0x4f54300a

08006d44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d5c:	d901      	bls.n	8006d62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e01b      	b.n	8006d9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	daf2      	bge.n	8006d50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f043 0201 	orr.w	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006d86:	d901      	bls.n	8006d8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e006      	b.n	8006d9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d0f0      	beq.n	8006d7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006db4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006db8:	f002 fff0 	bl	8009d9c <USBD_static_malloc>
 8006dbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d109      	bne.n	8006dd8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	32b0      	adds	r2, #176	; 0xb0
 8006dce:	2100      	movs	r1, #0
 8006dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e0d4      	b.n	8006f82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006dd8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006ddc:	2100      	movs	r1, #0
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f003 f955 	bl	800a08e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	32b0      	adds	r2, #176	; 0xb0
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32b0      	adds	r2, #176	; 0xb0
 8006dfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7c1b      	ldrb	r3, [r3, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d138      	bne.n	8006e82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e10:	4b5e      	ldr	r3, [pc, #376]	; (8006f8c <USBD_CDC_Init+0x1e4>)
 8006e12:	7819      	ldrb	r1, [r3, #0]
 8006e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e18:	2202      	movs	r2, #2
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f002 fe4d 	bl	8009aba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e20:	4b5a      	ldr	r3, [pc, #360]	; (8006f8c <USBD_CDC_Init+0x1e4>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 020f 	and.w	r2, r3, #15
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	440b      	add	r3, r1
 8006e34:	3324      	adds	r3, #36	; 0x24
 8006e36:	2201      	movs	r2, #1
 8006e38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e3a:	4b55      	ldr	r3, [pc, #340]	; (8006f90 <USBD_CDC_Init+0x1e8>)
 8006e3c:	7819      	ldrb	r1, [r3, #0]
 8006e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e42:	2202      	movs	r2, #2
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f002 fe38 	bl	8009aba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e4a:	4b51      	ldr	r3, [pc, #324]	; (8006f90 <USBD_CDC_Init+0x1e8>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	f003 020f 	and.w	r2, r3, #15
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e62:	2201      	movs	r2, #1
 8006e64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e66:	4b4b      	ldr	r3, [pc, #300]	; (8006f94 <USBD_CDC_Init+0x1ec>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	f003 020f 	and.w	r2, r3, #15
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	3326      	adds	r3, #38	; 0x26
 8006e7c:	2210      	movs	r2, #16
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e035      	b.n	8006eee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e82:	4b42      	ldr	r3, [pc, #264]	; (8006f8c <USBD_CDC_Init+0x1e4>)
 8006e84:	7819      	ldrb	r1, [r3, #0]
 8006e86:	2340      	movs	r3, #64	; 0x40
 8006e88:	2202      	movs	r2, #2
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f002 fe15 	bl	8009aba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e90:	4b3e      	ldr	r3, [pc, #248]	; (8006f8c <USBD_CDC_Init+0x1e4>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3324      	adds	r3, #36	; 0x24
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006eaa:	4b39      	ldr	r3, [pc, #228]	; (8006f90 <USBD_CDC_Init+0x1e8>)
 8006eac:	7819      	ldrb	r1, [r3, #0]
 8006eae:	2340      	movs	r3, #64	; 0x40
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f002 fe01 	bl	8009aba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006eb8:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <USBD_CDC_Init+0x1e8>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	f003 020f 	and.w	r2, r3, #15
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ed4:	4b2f      	ldr	r3, [pc, #188]	; (8006f94 <USBD_CDC_Init+0x1ec>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 020f 	and.w	r2, r3, #15
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3326      	adds	r3, #38	; 0x26
 8006eea:	2210      	movs	r2, #16
 8006eec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006eee:	4b29      	ldr	r3, [pc, #164]	; (8006f94 <USBD_CDC_Init+0x1ec>)
 8006ef0:	7819      	ldrb	r1, [r3, #0]
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f002 fddf 	bl	8009aba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006efc:	4b25      	ldr	r3, [pc, #148]	; (8006f94 <USBD_CDC_Init+0x1ec>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 020f 	and.w	r2, r3, #15
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	3324      	adds	r3, #36	; 0x24
 8006f12:	2201      	movs	r2, #1
 8006f14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	33b0      	adds	r3, #176	; 0xb0
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e018      	b.n	8006f82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7c1b      	ldrb	r3, [r3, #16]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10a      	bne.n	8006f6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f58:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <USBD_CDC_Init+0x1e8>)
 8006f5a:	7819      	ldrb	r1, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f002 fe96 	bl	8009c98 <USBD_LL_PrepareReceive>
 8006f6c:	e008      	b.n	8006f80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f6e:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <USBD_CDC_Init+0x1e8>)
 8006f70:	7819      	ldrb	r1, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f78:	2340      	movs	r3, #64	; 0x40
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f002 fe8c 	bl	8009c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000093 	.word	0x20000093
 8006f90:	20000094 	.word	0x20000094
 8006f94:	20000095 	.word	0x20000095

08006f98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006fa4:	4b3a      	ldr	r3, [pc, #232]	; (8007090 <USBD_CDC_DeInit+0xf8>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f002 fdab 	bl	8009b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006fb0:	4b37      	ldr	r3, [pc, #220]	; (8007090 <USBD_CDC_DeInit+0xf8>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 020f 	and.w	r2, r3, #15
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3324      	adds	r3, #36	; 0x24
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006fca:	4b32      	ldr	r3, [pc, #200]	; (8007094 <USBD_CDC_DeInit+0xfc>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f002 fd98 	bl	8009b06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006fd6:	4b2f      	ldr	r3, [pc, #188]	; (8007094 <USBD_CDC_DeInit+0xfc>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	f003 020f 	and.w	r2, r3, #15
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fee:	2200      	movs	r2, #0
 8006ff0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006ff2:	4b29      	ldr	r3, [pc, #164]	; (8007098 <USBD_CDC_DeInit+0x100>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f002 fd84 	bl	8009b06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ffe:	4b26      	ldr	r3, [pc, #152]	; (8007098 <USBD_CDC_DeInit+0x100>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	f003 020f 	and.w	r2, r3, #15
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	3324      	adds	r3, #36	; 0x24
 8007014:	2200      	movs	r2, #0
 8007016:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007018:	4b1f      	ldr	r3, [pc, #124]	; (8007098 <USBD_CDC_DeInit+0x100>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f003 020f 	and.w	r2, r3, #15
 8007020:	6879      	ldr	r1, [r7, #4]
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	440b      	add	r3, r1
 800702c:	3326      	adds	r3, #38	; 0x26
 800702e:	2200      	movs	r2, #0
 8007030:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	32b0      	adds	r2, #176	; 0xb0
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01f      	beq.n	8007084 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	33b0      	adds	r3, #176	; 0xb0
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32b0      	adds	r2, #176	; 0xb0
 8007062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007066:	4618      	mov	r0, r3
 8007068:	f002 fea6 	bl	8009db8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	32b0      	adds	r2, #176	; 0xb0
 8007076:	2100      	movs	r1, #0
 8007078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000093 	.word	0x20000093
 8007094:	20000094 	.word	0x20000094
 8007098:	20000095 	.word	0x20000095

0800709c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	32b0      	adds	r2, #176	; 0xb0
 80070b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e0bf      	b.n	800724c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d050      	beq.n	800717a <USBD_CDC_Setup+0xde>
 80070d8:	2b20      	cmp	r3, #32
 80070da:	f040 80af 	bne.w	800723c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d03a      	beq.n	800715c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	b25b      	sxtb	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	da1b      	bge.n	8007128 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	33b0      	adds	r3, #176	; 0xb0
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007106:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	88d2      	ldrh	r2, [r2, #6]
 800710c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	88db      	ldrh	r3, [r3, #6]
 8007112:	2b07      	cmp	r3, #7
 8007114:	bf28      	it	cs
 8007116:	2307      	movcs	r3, #7
 8007118:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	89fa      	ldrh	r2, [r7, #14]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 fdbf 	bl	8008ca4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007126:	e090      	b.n	800724a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	785a      	ldrb	r2, [r3, #1]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	88db      	ldrh	r3, [r3, #6]
 8007136:	2b3f      	cmp	r3, #63	; 0x3f
 8007138:	d803      	bhi.n	8007142 <USBD_CDC_Setup+0xa6>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	88db      	ldrh	r3, [r3, #6]
 800713e:	b2da      	uxtb	r2, r3
 8007140:	e000      	b.n	8007144 <USBD_CDC_Setup+0xa8>
 8007142:	2240      	movs	r2, #64	; 0x40
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800714a:	6939      	ldr	r1, [r7, #16]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007152:	461a      	mov	r2, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fdd1 	bl	8008cfc <USBD_CtlPrepareRx>
      break;
 800715a:	e076      	b.n	800724a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	33b0      	adds	r3, #176	; 0xb0
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	7850      	ldrb	r0, [r2, #1]
 8007172:	2200      	movs	r2, #0
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	4798      	blx	r3
      break;
 8007178:	e067      	b.n	800724a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	785b      	ldrb	r3, [r3, #1]
 800717e:	2b0b      	cmp	r3, #11
 8007180:	d851      	bhi.n	8007226 <USBD_CDC_Setup+0x18a>
 8007182:	a201      	add	r2, pc, #4	; (adr r2, 8007188 <USBD_CDC_Setup+0xec>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071b9 	.word	0x080071b9
 800718c:	08007235 	.word	0x08007235
 8007190:	08007227 	.word	0x08007227
 8007194:	08007227 	.word	0x08007227
 8007198:	08007227 	.word	0x08007227
 800719c:	08007227 	.word	0x08007227
 80071a0:	08007227 	.word	0x08007227
 80071a4:	08007227 	.word	0x08007227
 80071a8:	08007227 	.word	0x08007227
 80071ac:	08007227 	.word	0x08007227
 80071b0:	080071e3 	.word	0x080071e3
 80071b4:	0800720d 	.word	0x0800720d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d107      	bne.n	80071d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071c4:	f107 030a 	add.w	r3, r7, #10
 80071c8:	2202      	movs	r2, #2
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 fd69 	bl	8008ca4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071d2:	e032      	b.n	800723a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fce7 	bl	8008baa <USBD_CtlError>
            ret = USBD_FAIL;
 80071dc:	2303      	movs	r3, #3
 80071de:	75fb      	strb	r3, [r7, #23]
          break;
 80071e0:	e02b      	b.n	800723a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d107      	bne.n	80071fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071ee:	f107 030d 	add.w	r3, r7, #13
 80071f2:	2201      	movs	r2, #1
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fd54 	bl	8008ca4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071fc:	e01d      	b.n	800723a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071fe:	6839      	ldr	r1, [r7, #0]
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 fcd2 	bl	8008baa <USBD_CtlError>
            ret = USBD_FAIL;
 8007206:	2303      	movs	r3, #3
 8007208:	75fb      	strb	r3, [r7, #23]
          break;
 800720a:	e016      	b.n	800723a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b03      	cmp	r3, #3
 8007216:	d00f      	beq.n	8007238 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fcc5 	bl	8008baa <USBD_CtlError>
            ret = USBD_FAIL;
 8007220:	2303      	movs	r3, #3
 8007222:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007224:	e008      	b.n	8007238 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fcbe 	bl	8008baa <USBD_CtlError>
          ret = USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	75fb      	strb	r3, [r7, #23]
          break;
 8007232:	e002      	b.n	800723a <USBD_CDC_Setup+0x19e>
          break;
 8007234:	bf00      	nop
 8007236:	e008      	b.n	800724a <USBD_CDC_Setup+0x1ae>
          break;
 8007238:	bf00      	nop
      }
      break;
 800723a:	e006      	b.n	800724a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fcb3 	bl	8008baa <USBD_CtlError>
      ret = USBD_FAIL;
 8007244:	2303      	movs	r3, #3
 8007246:	75fb      	strb	r3, [r7, #23]
      break;
 8007248:	bf00      	nop
  }

  return (uint8_t)ret;
 800724a:	7dfb      	ldrb	r3, [r7, #23]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007266:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	32b0      	adds	r2, #176	; 0xb0
 8007272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800727a:	2303      	movs	r3, #3
 800727c:	e065      	b.n	800734a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	32b0      	adds	r2, #176	; 0xb0
 8007288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	f003 020f 	and.w	r2, r3, #15
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	3318      	adds	r3, #24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d02f      	beq.n	8007308 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	f003 020f 	and.w	r2, r3, #15
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	3318      	adds	r3, #24
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	f003 010f 	and.w	r1, r3, #15
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	460b      	mov	r3, r1
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	440b      	add	r3, r1
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4403      	add	r3, r0
 80072d0:	331c      	adds	r3, #28
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d112      	bne.n	8007308 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	f003 020f 	and.w	r2, r3, #15
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	3318      	adds	r3, #24
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072fa:	78f9      	ldrb	r1, [r7, #3]
 80072fc:	2300      	movs	r3, #0
 80072fe:	2200      	movs	r2, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f002 fca8 	bl	8009c56 <USBD_LL_Transmit>
 8007306:	e01f      	b.n	8007348 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	33b0      	adds	r3, #176	; 0xb0
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d010      	beq.n	8007348 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	33b0      	adds	r3, #176	; 0xb0
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	460b      	mov	r3, r1
 800735c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	32b0      	adds	r2, #176	; 0xb0
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	32b0      	adds	r2, #176	; 0xb0
 8007378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	e01a      	b.n	80073ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f002 fca6 	bl	8009cda <USBD_LL_GetRxDataSize>
 800738e:	4602      	mov	r2, r0
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	33b0      	adds	r3, #176	; 0xb0
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073b4:	4611      	mov	r1, r2
 80073b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	32b0      	adds	r2, #176	; 0xb0
 80073d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e025      	b.n	8007430 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	33b0      	adds	r3, #176	; 0xb0
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01a      	beq.n	800742e <USBD_CDC_EP0_RxReady+0x6c>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073fe:	2bff      	cmp	r3, #255	; 0xff
 8007400:	d015      	beq.n	800742e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	33b0      	adds	r3, #176	; 0xb0
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800741a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007422:	b292      	uxth	r2, r2
 8007424:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	22ff      	movs	r2, #255	; 0xff
 800742a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007440:	2182      	movs	r1, #130	; 0x82
 8007442:	4818      	ldr	r0, [pc, #96]	; (80074a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007444:	f000 fd4f 	bl	8007ee6 <USBD_GetEpDesc>
 8007448:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800744a:	2101      	movs	r1, #1
 800744c:	4815      	ldr	r0, [pc, #84]	; (80074a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800744e:	f000 fd4a 	bl	8007ee6 <USBD_GetEpDesc>
 8007452:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007454:	2181      	movs	r1, #129	; 0x81
 8007456:	4813      	ldr	r0, [pc, #76]	; (80074a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007458:	f000 fd45 	bl	8007ee6 <USBD_GetEpDesc>
 800745c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2210      	movs	r2, #16
 8007468:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d006      	beq.n	800747e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	2200      	movs	r2, #0
 8007474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007478:	711a      	strb	r2, [r3, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d006      	beq.n	8007492 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800748c:	711a      	strb	r2, [r3, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2243      	movs	r2, #67	; 0x43
 8007496:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007498:	4b02      	ldr	r3, [pc, #8]	; (80074a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000050 	.word	0x20000050

080074a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074b0:	2182      	movs	r1, #130	; 0x82
 80074b2:	4818      	ldr	r0, [pc, #96]	; (8007514 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074b4:	f000 fd17 	bl	8007ee6 <USBD_GetEpDesc>
 80074b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074ba:	2101      	movs	r1, #1
 80074bc:	4815      	ldr	r0, [pc, #84]	; (8007514 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074be:	f000 fd12 	bl	8007ee6 <USBD_GetEpDesc>
 80074c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074c4:	2181      	movs	r1, #129	; 0x81
 80074c6:	4813      	ldr	r0, [pc, #76]	; (8007514 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074c8:	f000 fd0d 	bl	8007ee6 <USBD_GetEpDesc>
 80074cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2210      	movs	r2, #16
 80074d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d006      	beq.n	80074ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2200      	movs	r2, #0
 80074e4:	711a      	strb	r2, [r3, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f042 0202 	orr.w	r2, r2, #2
 80074ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d006      	beq.n	8007502 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	711a      	strb	r2, [r3, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f042 0202 	orr.w	r2, r2, #2
 8007500:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2243      	movs	r2, #67	; 0x43
 8007506:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007508:	4b02      	ldr	r3, [pc, #8]	; (8007514 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000050 	.word	0x20000050

08007518 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007520:	2182      	movs	r1, #130	; 0x82
 8007522:	4818      	ldr	r0, [pc, #96]	; (8007584 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007524:	f000 fcdf 	bl	8007ee6 <USBD_GetEpDesc>
 8007528:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800752a:	2101      	movs	r1, #1
 800752c:	4815      	ldr	r0, [pc, #84]	; (8007584 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800752e:	f000 fcda 	bl	8007ee6 <USBD_GetEpDesc>
 8007532:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007534:	2181      	movs	r1, #129	; 0x81
 8007536:	4813      	ldr	r0, [pc, #76]	; (8007584 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007538:	f000 fcd5 	bl	8007ee6 <USBD_GetEpDesc>
 800753c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2210      	movs	r2, #16
 8007548:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	2200      	movs	r2, #0
 8007554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007558:	711a      	strb	r2, [r3, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d006      	beq.n	8007572 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800756c:	711a      	strb	r2, [r3, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2243      	movs	r2, #67	; 0x43
 8007576:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007578:	4b02      	ldr	r3, [pc, #8]	; (8007584 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20000050 	.word	0x20000050

08007588 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	220a      	movs	r2, #10
 8007594:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007596:	4b03      	ldr	r3, [pc, #12]	; (80075a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	2000000c 	.word	0x2000000c

080075a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e009      	b.n	80075d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	33b0      	adds	r3, #176	; 0xb0
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	32b0      	adds	r2, #176	; 0xb0
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075fe:	2303      	movs	r3, #3
 8007600:	e008      	b.n	8007614 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	371c      	adds	r7, #28
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	32b0      	adds	r2, #176	; 0xb0
 8007634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007638:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	e004      	b.n	800764e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
	...

0800765c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	32b0      	adds	r2, #176	; 0xb0
 800766e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007672:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800767e:	2303      	movs	r3, #3
 8007680:	e025      	b.n	80076ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11f      	bne.n	80076cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2201      	movs	r2, #1
 8007690:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007694:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <USBD_CDC_TransmitPacket+0x7c>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	f003 020f 	and.w	r2, r3, #15
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4403      	add	r3, r0
 80076ae:	3318      	adds	r3, #24
 80076b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80076b2:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <USBD_CDC_TransmitPacket+0x7c>)
 80076b4:	7819      	ldrb	r1, [r3, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f002 fac7 	bl	8009c56 <USBD_LL_Transmit>

    ret = USBD_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000093 	.word	0x20000093

080076dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32b0      	adds	r2, #176	; 0xb0
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	32b0      	adds	r2, #176	; 0xb0
 80076fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007706:	2303      	movs	r3, #3
 8007708:	e018      	b.n	800773c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7c1b      	ldrb	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007712:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <USBD_CDC_ReceivePacket+0x68>)
 8007714:	7819      	ldrb	r1, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800771c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f002 fab9 	bl	8009c98 <USBD_LL_PrepareReceive>
 8007726:	e008      	b.n	800773a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007728:	4b06      	ldr	r3, [pc, #24]	; (8007744 <USBD_CDC_ReceivePacket+0x68>)
 800772a:	7819      	ldrb	r1, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007732:	2340      	movs	r3, #64	; 0x40
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f002 faaf 	bl	8009c98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000094 	.word	0x20000094

08007748 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	e01f      	b.n	80077a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	79fa      	ldrb	r2, [r7, #7]
 8007792:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f002 f929 	bl	80099ec <USBD_LL_Init>
 800779a:	4603      	mov	r3, r0
 800779c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	e025      	b.n	800780c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32ae      	adds	r2, #174	; 0xae
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00f      	beq.n	80077fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	32ae      	adds	r2, #174	; 0xae
 80077e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	f107 020e 	add.w	r2, r7, #14
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	4602      	mov	r2, r0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f002 f931 	bl	8009a84 <USBD_LL_Start>
 8007822:	4603      	mov	r3, r0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007836:	4618      	mov	r0, r3
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	2b00      	cmp	r3, #0
 800785a:	d009      	beq.n	8007870 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	78fa      	ldrb	r2, [r7, #3]
 8007866:	4611      	mov	r1, r2
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	78fa      	ldrb	r2, [r7, #3]
 8007894:	4611      	mov	r1, r2
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078a0:	2303      	movs	r3, #3
 80078a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 f938 	bl	8008b36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078d4:	461a      	mov	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078e2:	f003 031f 	and.w	r3, r3, #31
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d01a      	beq.n	8007920 <USBD_LL_SetupStage+0x72>
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d822      	bhi.n	8007934 <USBD_LL_SetupStage+0x86>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <USBD_LL_SetupStage+0x4a>
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d00a      	beq.n	800790c <USBD_LL_SetupStage+0x5e>
 80078f6:	e01d      	b.n	8007934 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fb65 	bl	8007fd0 <USBD_StdDevReq>
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]
      break;
 800790a:	e020      	b.n	800794e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fbcd 	bl	80080b4 <USBD_StdItfReq>
 800791a:	4603      	mov	r3, r0
 800791c:	73fb      	strb	r3, [r7, #15]
      break;
 800791e:	e016      	b.n	800794e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fc2f 	bl	800818c <USBD_StdEPReq>
 800792e:	4603      	mov	r3, r0
 8007930:	73fb      	strb	r3, [r7, #15]
      break;
 8007932:	e00c      	b.n	800794e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800793a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800793e:	b2db      	uxtb	r3, r3
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f002 f8fe 	bl	8009b44 <USBD_LL_StallEP>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
      break;
 800794c:	bf00      	nop
  }

  return ret;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	460b      	mov	r3, r1
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800796a:	7afb      	ldrb	r3, [r7, #11]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d16e      	bne.n	8007a4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007976:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800797e:	2b03      	cmp	r3, #3
 8007980:	f040 8098 	bne.w	8007ab4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d913      	bls.n	80079b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	1ad2      	subs	r2, r2, r3
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	4293      	cmp	r3, r2
 80079a8:	bf28      	it	cs
 80079aa:	4613      	movcs	r3, r2
 80079ac:	461a      	mov	r2, r3
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f001 f9c0 	bl	8008d36 <USBD_CtlContinueRx>
 80079b6:	e07d      	b.n	8007ab4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d014      	beq.n	80079f0 <USBD_LL_DataOutStage+0x98>
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d81d      	bhi.n	8007a06 <USBD_LL_DataOutStage+0xae>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <USBD_LL_DataOutStage+0x7c>
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d003      	beq.n	80079da <USBD_LL_DataOutStage+0x82>
 80079d2:	e018      	b.n	8007a06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	75bb      	strb	r3, [r7, #22]
            break;
 80079d8:	e018      	b.n	8007a0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 fa64 	bl	8007eb2 <USBD_CoreFindIF>
 80079ea:	4603      	mov	r3, r0
 80079ec:	75bb      	strb	r3, [r7, #22]
            break;
 80079ee:	e00d      	b.n	8007a0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	4619      	mov	r1, r3
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f000 fa66 	bl	8007ecc <USBD_CoreFindEP>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75bb      	strb	r3, [r7, #22]
            break;
 8007a04:	e002      	b.n	8007a0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	75bb      	strb	r3, [r7, #22]
            break;
 8007a0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a0c:	7dbb      	ldrb	r3, [r7, #22]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d119      	bne.n	8007a46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d113      	bne.n	8007a46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a1e:	7dba      	ldrb	r2, [r7, #22]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	32ae      	adds	r2, #174	; 0xae
 8007a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a2e:	7dba      	ldrb	r2, [r7, #22]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a36:	7dba      	ldrb	r2, [r7, #22]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	32ae      	adds	r2, #174	; 0xae
 8007a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f001 f986 	bl	8008d58 <USBD_CtlSendStatus>
 8007a4c:	e032      	b.n	8007ab4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a4e:	7afb      	ldrb	r3, [r7, #11]
 8007a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 fa37 	bl	8007ecc <USBD_CoreFindEP>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a62:	7dbb      	ldrb	r3, [r7, #22]
 8007a64:	2bff      	cmp	r3, #255	; 0xff
 8007a66:	d025      	beq.n	8007ab4 <USBD_LL_DataOutStage+0x15c>
 8007a68:	7dbb      	ldrb	r3, [r7, #22]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d122      	bne.n	8007ab4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d117      	bne.n	8007aaa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a7a:	7dba      	ldrb	r2, [r7, #22]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	32ae      	adds	r2, #174	; 0xae
 8007a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00f      	beq.n	8007aaa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a8a:	7dba      	ldrb	r2, [r7, #22]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a92:	7dba      	ldrb	r2, [r7, #22]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	32ae      	adds	r2, #174	; 0xae
 8007a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	7afa      	ldrb	r2, [r7, #11]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	4798      	blx	r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	e000      	b.n	8007ab6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b086      	sub	sp, #24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d16f      	bne.n	8007bb2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3314      	adds	r3, #20
 8007ad6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d15a      	bne.n	8007b98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d914      	bls.n	8007b18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	1ad2      	subs	r2, r2, r3
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f001 f8e8 	bl	8008cda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2100      	movs	r1, #0
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f002 f8c1 	bl	8009c98 <USBD_LL_PrepareReceive>
 8007b16:	e03f      	b.n	8007b98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d11c      	bne.n	8007b5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d316      	bcc.n	8007b5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d20f      	bcs.n	8007b5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f001 f8c9 	bl	8008cda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b50:	2300      	movs	r3, #0
 8007b52:	2200      	movs	r2, #0
 8007b54:	2100      	movs	r1, #0
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f002 f89e 	bl	8009c98 <USBD_LL_PrepareReceive>
 8007b5c:	e01c      	b.n	8007b98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d10f      	bne.n	8007b8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b8a:	2180      	movs	r1, #128	; 0x80
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f001 ffd9 	bl	8009b44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f001 f8f3 	bl	8008d7e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d03a      	beq.n	8007c18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f7ff fe42 	bl	800782c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bb0:	e032      	b.n	8007c18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bb2:	7afb      	ldrb	r3, [r7, #11]
 8007bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f985 	bl	8007ecc <USBD_CoreFindEP>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2bff      	cmp	r3, #255	; 0xff
 8007bca:	d025      	beq.n	8007c18 <USBD_LL_DataInStage+0x15a>
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d122      	bne.n	8007c18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d11c      	bne.n	8007c18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bde:	7dfa      	ldrb	r2, [r7, #23]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	32ae      	adds	r2, #174	; 0xae
 8007be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d014      	beq.n	8007c18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007bee:	7dfa      	ldrb	r2, [r7, #23]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bf6:	7dfa      	ldrb	r2, [r7, #23]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	32ae      	adds	r2, #174	; 0xae
 8007bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	7afa      	ldrb	r2, [r7, #11]
 8007c04:	4611      	mov	r1, r2
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c0e:	7dbb      	ldrb	r3, [r7, #22]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c14:	7dbb      	ldrb	r3, [r7, #22]
 8007c16:	e000      	b.n	8007c1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d014      	beq.n	8007c88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00e      	beq.n	8007c88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6852      	ldr	r2, [r2, #4]
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	4611      	mov	r1, r2
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	4798      	blx	r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c84:	2303      	movs	r3, #3
 8007c86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c88:	2340      	movs	r3, #64	; 0x40
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 ff13 	bl	8009aba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2240      	movs	r2, #64	; 0x40
 8007ca0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ca4:	2340      	movs	r3, #64	; 0x40
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2180      	movs	r1, #128	; 0x80
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 ff05 	bl	8009aba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2240      	movs	r2, #64	; 0x40
 8007cba:	621a      	str	r2, [r3, #32]

  return ret;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	78fa      	ldrb	r2, [r7, #3]
 8007cd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d006      	beq.n	8007d08 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d106      	bne.n	8007d40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d110      	bne.n	8007d84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	460b      	mov	r3, r1
 8007d98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	32ae      	adds	r2, #174	; 0xae
 8007da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e01c      	b.n	8007dea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d115      	bne.n	8007de8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	32ae      	adds	r2, #174	; 0xae
 8007dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	32ae      	adds	r2, #174	; 0xae
 8007dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	78fa      	ldrb	r2, [r7, #3]
 8007de2:	4611      	mov	r1, r2
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	32ae      	adds	r2, #174	; 0xae
 8007e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e01c      	b.n	8007e4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d115      	bne.n	8007e4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	32ae      	adds	r2, #174	; 0xae
 8007e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	32ae      	adds	r2, #174	; 0xae
 8007e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	78fa      	ldrb	r2, [r7, #3]
 8007e46:	4611      	mov	r1, r2
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00e      	beq.n	8007ea8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6852      	ldr	r2, [r2, #4]
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	4611      	mov	r1, r2
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ebe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ed8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b086      	sub	sp, #24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d920      	bls.n	8007f50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f16:	e013      	b.n	8007f40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f18:	f107 030a 	add.w	r3, r7, #10
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6978      	ldr	r0, [r7, #20]
 8007f20:	f000 f81b 	bl	8007f5a <USBD_GetNextDesc>
 8007f24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	785b      	ldrb	r3, [r3, #1]
 8007f2a:	2b05      	cmp	r3, #5
 8007f2c:	d108      	bne.n	8007f40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	789b      	ldrb	r3, [r3, #2]
 8007f36:	78fa      	ldrb	r2, [r7, #3]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d008      	beq.n	8007f4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	885b      	ldrh	r3, [r3, #2]
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	897b      	ldrh	r3, [r7, #10]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d8e5      	bhi.n	8007f18 <USBD_GetEpDesc+0x32>
 8007f4c:	e000      	b.n	8007f50 <USBD_GetEpDesc+0x6a>
          break;
 8007f4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f50:	693b      	ldr	r3, [r7, #16]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b085      	sub	sp, #20
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	881a      	ldrh	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	4413      	add	r3, r2
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4413      	add	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f86:	68fb      	ldr	r3, [r7, #12]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fb2:	8a3b      	ldrh	r3, [r7, #16]
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	b21a      	sxth	r2, r3
 8007fb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	b21b      	sxth	r3, r3
 8007fc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fc2:	89fb      	ldrh	r3, [r7, #14]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fe6:	2b40      	cmp	r3, #64	; 0x40
 8007fe8:	d005      	beq.n	8007ff6 <USBD_StdDevReq+0x26>
 8007fea:	2b40      	cmp	r3, #64	; 0x40
 8007fec:	d857      	bhi.n	800809e <USBD_StdDevReq+0xce>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00f      	beq.n	8008012 <USBD_StdDevReq+0x42>
 8007ff2:	2b20      	cmp	r3, #32
 8007ff4:	d153      	bne.n	800809e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	32ae      	adds	r2, #174	; 0xae
 8008000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	4798      	blx	r3
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]
      break;
 8008010:	e04a      	b.n	80080a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	785b      	ldrb	r3, [r3, #1]
 8008016:	2b09      	cmp	r3, #9
 8008018:	d83b      	bhi.n	8008092 <USBD_StdDevReq+0xc2>
 800801a:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <USBD_StdDevReq+0x50>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	08008075 	.word	0x08008075
 8008024:	08008089 	.word	0x08008089
 8008028:	08008093 	.word	0x08008093
 800802c:	0800807f 	.word	0x0800807f
 8008030:	08008093 	.word	0x08008093
 8008034:	08008053 	.word	0x08008053
 8008038:	08008049 	.word	0x08008049
 800803c:	08008093 	.word	0x08008093
 8008040:	0800806b 	.word	0x0800806b
 8008044:	0800805d 	.word	0x0800805d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa3c 	bl	80084c8 <USBD_GetDescriptor>
          break;
 8008050:	e024      	b.n	800809c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fbcb 	bl	80087f0 <USBD_SetAddress>
          break;
 800805a:	e01f      	b.n	800809c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fc0a 	bl	8008878 <USBD_SetConfig>
 8008064:	4603      	mov	r3, r0
 8008066:	73fb      	strb	r3, [r7, #15]
          break;
 8008068:	e018      	b.n	800809c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fcad 	bl	80089cc <USBD_GetConfig>
          break;
 8008072:	e013      	b.n	800809c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fcde 	bl	8008a38 <USBD_GetStatus>
          break;
 800807c:	e00e      	b.n	800809c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fd0d 	bl	8008aa0 <USBD_SetFeature>
          break;
 8008086:	e009      	b.n	800809c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fd31 	bl	8008af2 <USBD_ClrFeature>
          break;
 8008090:	e004      	b.n	800809c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fd88 	bl	8008baa <USBD_CtlError>
          break;
 800809a:	bf00      	nop
      }
      break;
 800809c:	e004      	b.n	80080a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fd82 	bl	8008baa <USBD_CtlError>
      break;
 80080a6:	bf00      	nop
  }

  return ret;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop

080080b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ca:	2b40      	cmp	r3, #64	; 0x40
 80080cc:	d005      	beq.n	80080da <USBD_StdItfReq+0x26>
 80080ce:	2b40      	cmp	r3, #64	; 0x40
 80080d0:	d852      	bhi.n	8008178 <USBD_StdItfReq+0xc4>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <USBD_StdItfReq+0x26>
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d14e      	bne.n	8008178 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d840      	bhi.n	800816a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	889b      	ldrh	r3, [r3, #4]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d836      	bhi.n	8008160 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	889b      	ldrh	r3, [r3, #4]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff fed9 	bl	8007eb2 <USBD_CoreFindIF>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	2bff      	cmp	r3, #255	; 0xff
 8008108:	d01d      	beq.n	8008146 <USBD_StdItfReq+0x92>
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d11a      	bne.n	8008146 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008110:	7bba      	ldrb	r2, [r7, #14]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	32ae      	adds	r2, #174	; 0xae
 8008116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00f      	beq.n	8008140 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008120:	7bba      	ldrb	r2, [r7, #14]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008128:	7bba      	ldrb	r2, [r7, #14]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	32ae      	adds	r2, #174	; 0xae
 800812e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800813e:	e004      	b.n	800814a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008144:	e001      	b.n	800814a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008146:	2303      	movs	r3, #3
 8008148:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	88db      	ldrh	r3, [r3, #6]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d110      	bne.n	8008174 <USBD_StdItfReq+0xc0>
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10d      	bne.n	8008174 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fdfd 	bl	8008d58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800815e:	e009      	b.n	8008174 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fd21 	bl	8008baa <USBD_CtlError>
          break;
 8008168:	e004      	b.n	8008174 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fd1c 	bl	8008baa <USBD_CtlError>
          break;
 8008172:	e000      	b.n	8008176 <USBD_StdItfReq+0xc2>
          break;
 8008174:	bf00      	nop
      }
      break;
 8008176:	e004      	b.n	8008182 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fd15 	bl	8008baa <USBD_CtlError>
      break;
 8008180:	bf00      	nop
  }

  return ret;
 8008182:	7bfb      	ldrb	r3, [r7, #15]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	889b      	ldrh	r3, [r3, #4]
 800819e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081a8:	2b40      	cmp	r3, #64	; 0x40
 80081aa:	d007      	beq.n	80081bc <USBD_StdEPReq+0x30>
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	f200 817f 	bhi.w	80084b0 <USBD_StdEPReq+0x324>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d02a      	beq.n	800820c <USBD_StdEPReq+0x80>
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	f040 817a 	bne.w	80084b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff fe83 	bl	8007ecc <USBD_CoreFindEP>
 80081c6:	4603      	mov	r3, r0
 80081c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ca:	7b7b      	ldrb	r3, [r7, #13]
 80081cc:	2bff      	cmp	r3, #255	; 0xff
 80081ce:	f000 8174 	beq.w	80084ba <USBD_StdEPReq+0x32e>
 80081d2:	7b7b      	ldrb	r3, [r7, #13]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f040 8170 	bne.w	80084ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081da:	7b7a      	ldrb	r2, [r7, #13]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081e2:	7b7a      	ldrb	r2, [r7, #13]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	32ae      	adds	r2, #174	; 0xae
 80081e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 8163 	beq.w	80084ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081f4:	7b7a      	ldrb	r2, [r7, #13]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	32ae      	adds	r2, #174	; 0xae
 80081fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	4798      	blx	r3
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800820a:	e156      	b.n	80084ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b03      	cmp	r3, #3
 8008212:	d008      	beq.n	8008226 <USBD_StdEPReq+0x9a>
 8008214:	2b03      	cmp	r3, #3
 8008216:	f300 8145 	bgt.w	80084a4 <USBD_StdEPReq+0x318>
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 809b 	beq.w	8008356 <USBD_StdEPReq+0x1ca>
 8008220:	2b01      	cmp	r3, #1
 8008222:	d03c      	beq.n	800829e <USBD_StdEPReq+0x112>
 8008224:	e13e      	b.n	80084a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d002      	beq.n	8008238 <USBD_StdEPReq+0xac>
 8008232:	2b03      	cmp	r3, #3
 8008234:	d016      	beq.n	8008264 <USBD_StdEPReq+0xd8>
 8008236:	e02c      	b.n	8008292 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00d      	beq.n	800825a <USBD_StdEPReq+0xce>
 800823e:	7bbb      	ldrb	r3, [r7, #14]
 8008240:	2b80      	cmp	r3, #128	; 0x80
 8008242:	d00a      	beq.n	800825a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 fc7b 	bl	8009b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800824e:	2180      	movs	r1, #128	; 0x80
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 fc77 	bl	8009b44 <USBD_LL_StallEP>
 8008256:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008258:	e020      	b.n	800829c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fca4 	bl	8008baa <USBD_CtlError>
              break;
 8008262:	e01b      	b.n	800829c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	885b      	ldrh	r3, [r3, #2]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10e      	bne.n	800828a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00b      	beq.n	800828a <USBD_StdEPReq+0xfe>
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b80      	cmp	r3, #128	; 0x80
 8008276:	d008      	beq.n	800828a <USBD_StdEPReq+0xfe>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	88db      	ldrh	r3, [r3, #6]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d104      	bne.n	800828a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 fc5d 	bl	8009b44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fd64 	bl	8008d58 <USBD_CtlSendStatus>

              break;
 8008290:	e004      	b.n	800829c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fc88 	bl	8008baa <USBD_CtlError>
              break;
 800829a:	bf00      	nop
          }
          break;
 800829c:	e107      	b.n	80084ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d002      	beq.n	80082b0 <USBD_StdEPReq+0x124>
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d016      	beq.n	80082dc <USBD_StdEPReq+0x150>
 80082ae:	e04b      	b.n	8008348 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00d      	beq.n	80082d2 <USBD_StdEPReq+0x146>
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b80      	cmp	r3, #128	; 0x80
 80082ba:	d00a      	beq.n	80082d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	4619      	mov	r1, r3
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 fc3f 	bl	8009b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082c6:	2180      	movs	r1, #128	; 0x80
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 fc3b 	bl	8009b44 <USBD_LL_StallEP>
 80082ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082d0:	e040      	b.n	8008354 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fc68 	bl	8008baa <USBD_CtlError>
              break;
 80082da:	e03b      	b.n	8008354 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	885b      	ldrh	r3, [r3, #2]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d136      	bne.n	8008352 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fc45 	bl	8009b82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fd2d 	bl	8008d58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff fde2 	bl	8007ecc <USBD_CoreFindEP>
 8008308:	4603      	mov	r3, r0
 800830a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800830c:	7b7b      	ldrb	r3, [r7, #13]
 800830e:	2bff      	cmp	r3, #255	; 0xff
 8008310:	d01f      	beq.n	8008352 <USBD_StdEPReq+0x1c6>
 8008312:	7b7b      	ldrb	r3, [r7, #13]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d11c      	bne.n	8008352 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008318:	7b7a      	ldrb	r2, [r7, #13]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008320:	7b7a      	ldrb	r2, [r7, #13]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	32ae      	adds	r2, #174	; 0xae
 8008326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d010      	beq.n	8008352 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008330:	7b7a      	ldrb	r2, [r7, #13]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	32ae      	adds	r2, #174	; 0xae
 8008336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
 8008342:	4603      	mov	r3, r0
 8008344:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008346:	e004      	b.n	8008352 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fc2d 	bl	8008baa <USBD_CtlError>
              break;
 8008350:	e000      	b.n	8008354 <USBD_StdEPReq+0x1c8>
              break;
 8008352:	bf00      	nop
          }
          break;
 8008354:	e0ab      	b.n	80084ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d002      	beq.n	8008368 <USBD_StdEPReq+0x1dc>
 8008362:	2b03      	cmp	r3, #3
 8008364:	d032      	beq.n	80083cc <USBD_StdEPReq+0x240>
 8008366:	e097      	b.n	8008498 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008368:	7bbb      	ldrb	r3, [r7, #14]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <USBD_StdEPReq+0x1f2>
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b80      	cmp	r3, #128	; 0x80
 8008372:	d004      	beq.n	800837e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008374:	6839      	ldr	r1, [r7, #0]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fc17 	bl	8008baa <USBD_CtlError>
                break;
 800837c:	e091      	b.n	80084a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800837e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008382:	2b00      	cmp	r3, #0
 8008384:	da0b      	bge.n	800839e <USBD_StdEPReq+0x212>
 8008386:	7bbb      	ldrb	r3, [r7, #14]
 8008388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	3310      	adds	r3, #16
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	4413      	add	r3, r2
 800839a:	3304      	adds	r3, #4
 800839c:	e00b      	b.n	80083b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083a4:	4613      	mov	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	4413      	add	r3, r2
 80083b4:	3304      	adds	r3, #4
 80083b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2202      	movs	r2, #2
 80083c2:	4619      	mov	r1, r3
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fc6d 	bl	8008ca4 <USBD_CtlSendData>
              break;
 80083ca:	e06a      	b.n	80084a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	da11      	bge.n	80083f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	f003 020f 	and.w	r2, r3, #15
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	3324      	adds	r3, #36	; 0x24
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d117      	bne.n	800841e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fbda 	bl	8008baa <USBD_CtlError>
                  break;
 80083f6:	e054      	b.n	80084a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	f003 020f 	and.w	r2, r3, #15
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d104      	bne.n	800841e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fbc7 	bl	8008baa <USBD_CtlError>
                  break;
 800841c:	e041      	b.n	80084a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800841e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008422:	2b00      	cmp	r3, #0
 8008424:	da0b      	bge.n	800843e <USBD_StdEPReq+0x2b2>
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	3310      	adds	r3, #16
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	4413      	add	r3, r2
 800843a:	3304      	adds	r3, #4
 800843c:	e00b      	b.n	8008456 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008444:	4613      	mov	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	4413      	add	r3, r2
 8008454:	3304      	adds	r3, #4
 8008456:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <USBD_StdEPReq+0x2d8>
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b80      	cmp	r3, #128	; 0x80
 8008462:	d103      	bne.n	800846c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	e00e      	b.n	800848a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fba5 	bl	8009bc0 <USBD_LL_IsStallEP>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2201      	movs	r2, #1
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	e002      	b.n	800848a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2202      	movs	r2, #2
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fc07 	bl	8008ca4 <USBD_CtlSendData>
              break;
 8008496:	e004      	b.n	80084a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fb85 	bl	8008baa <USBD_CtlError>
              break;
 80084a0:	bf00      	nop
          }
          break;
 80084a2:	e004      	b.n	80084ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fb7f 	bl	8008baa <USBD_CtlError>
          break;
 80084ac:	bf00      	nop
      }
      break;
 80084ae:	e005      	b.n	80084bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fb79 	bl	8008baa <USBD_CtlError>
      break;
 80084b8:	e000      	b.n	80084bc <USBD_StdEPReq+0x330>
      break;
 80084ba:	bf00      	nop
  }

  return ret;
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084da:	2300      	movs	r3, #0
 80084dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	885b      	ldrh	r3, [r3, #2]
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	2b0e      	cmp	r3, #14
 80084ea:	f200 8152 	bhi.w	8008792 <USBD_GetDescriptor+0x2ca>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <USBD_GetDescriptor+0x2c>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008565 	.word	0x08008565
 80084f8:	0800857d 	.word	0x0800857d
 80084fc:	080085bd 	.word	0x080085bd
 8008500:	08008793 	.word	0x08008793
 8008504:	08008793 	.word	0x08008793
 8008508:	08008733 	.word	0x08008733
 800850c:	0800875f 	.word	0x0800875f
 8008510:	08008793 	.word	0x08008793
 8008514:	08008793 	.word	0x08008793
 8008518:	08008793 	.word	0x08008793
 800851c:	08008793 	.word	0x08008793
 8008520:	08008793 	.word	0x08008793
 8008524:	08008793 	.word	0x08008793
 8008528:	08008793 	.word	0x08008793
 800852c:	08008531 	.word	0x08008531
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008552:	e126      	b.n	80087a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fb27 	bl	8008baa <USBD_CtlError>
        err++;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	3301      	adds	r3, #1
 8008560:	72fb      	strb	r3, [r7, #11]
      break;
 8008562:	e11e      	b.n	80087a2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	7c12      	ldrb	r2, [r2, #16]
 8008570:	f107 0108 	add.w	r1, r7, #8
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	60f8      	str	r0, [r7, #12]
      break;
 800857a:	e112      	b.n	80087a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7c1b      	ldrb	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10d      	bne.n	80085a0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858c:	f107 0208 	add.w	r2, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	2202      	movs	r2, #2
 800859c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800859e:	e100      	b.n	80087a2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	f107 0208 	add.w	r2, r7, #8
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	2202      	movs	r2, #2
 80085b8:	701a      	strb	r2, [r3, #0]
      break;
 80085ba:	e0f2      	b.n	80087a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	885b      	ldrh	r3, [r3, #2]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b05      	cmp	r3, #5
 80085c4:	f200 80ac 	bhi.w	8008720 <USBD_GetDescriptor+0x258>
 80085c8:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <USBD_GetDescriptor+0x108>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	080085e9 	.word	0x080085e9
 80085d4:	0800861d 	.word	0x0800861d
 80085d8:	08008651 	.word	0x08008651
 80085dc:	08008685 	.word	0x08008685
 80085e0:	080086b9 	.word	0x080086b9
 80085e4:	080086ed 	.word	0x080086ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	7c12      	ldrb	r2, [r2, #16]
 8008600:	f107 0108 	add.w	r1, r7, #8
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860a:	e091      	b.n	8008730 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 facb 	bl	8008baa <USBD_CtlError>
            err++;
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	3301      	adds	r3, #1
 8008618:	72fb      	strb	r3, [r7, #11]
          break;
 800861a:	e089      	b.n	8008730 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	7c12      	ldrb	r2, [r2, #16]
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
 800863c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863e:	e077      	b.n	8008730 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fab1 	bl	8008baa <USBD_CtlError>
            err++;
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	3301      	adds	r3, #1
 800864c:	72fb      	strb	r3, [r7, #11]
          break;
 800864e:	e06f      	b.n	8008730 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	7c12      	ldrb	r2, [r2, #16]
 8008668:	f107 0108 	add.w	r1, r7, #8
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008672:	e05d      	b.n	8008730 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa97 	bl	8008baa <USBD_CtlError>
            err++;
 800867c:	7afb      	ldrb	r3, [r7, #11]
 800867e:	3301      	adds	r3, #1
 8008680:	72fb      	strb	r3, [r7, #11]
          break;
 8008682:	e055      	b.n	8008730 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	7c12      	ldrb	r2, [r2, #16]
 800869c:	f107 0108 	add.w	r1, r7, #8
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
 80086a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a6:	e043      	b.n	8008730 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa7d 	bl	8008baa <USBD_CtlError>
            err++;
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	3301      	adds	r3, #1
 80086b4:	72fb      	strb	r3, [r7, #11]
          break;
 80086b6:	e03b      	b.n	8008730 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7c12      	ldrb	r2, [r2, #16]
 80086d0:	f107 0108 	add.w	r1, r7, #8
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086da:	e029      	b.n	8008730 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa63 	bl	8008baa <USBD_CtlError>
            err++;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	3301      	adds	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ea:	e021      	b.n	8008730 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	7c12      	ldrb	r2, [r2, #16]
 8008704:	f107 0108 	add.w	r1, r7, #8
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
 800870c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870e:	e00f      	b.n	8008730 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa49 	bl	8008baa <USBD_CtlError>
            err++;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	3301      	adds	r3, #1
 800871c:	72fb      	strb	r3, [r7, #11]
          break;
 800871e:	e007      	b.n	8008730 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fa41 	bl	8008baa <USBD_CtlError>
          err++;
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	3301      	adds	r3, #1
 800872c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800872e:	bf00      	nop
      }
      break;
 8008730:	e037      	b.n	80087a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	7c1b      	ldrb	r3, [r3, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008742:	f107 0208 	add.w	r2, r7, #8
 8008746:	4610      	mov	r0, r2
 8008748:	4798      	blx	r3
 800874a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800874c:	e029      	b.n	80087a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa2a 	bl	8008baa <USBD_CtlError>
        err++;
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	3301      	adds	r3, #1
 800875a:	72fb      	strb	r3, [r7, #11]
      break;
 800875c:	e021      	b.n	80087a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7c1b      	ldrb	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10d      	bne.n	8008782 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	f107 0208 	add.w	r2, r7, #8
 8008772:	4610      	mov	r0, r2
 8008774:	4798      	blx	r3
 8008776:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	2207      	movs	r2, #7
 800877e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008780:	e00f      	b.n	80087a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fa10 	bl	8008baa <USBD_CtlError>
        err++;
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	3301      	adds	r3, #1
 800878e:	72fb      	strb	r3, [r7, #11]
      break;
 8008790:	e007      	b.n	80087a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fa08 	bl	8008baa <USBD_CtlError>
      err++;
 800879a:	7afb      	ldrb	r3, [r7, #11]
 800879c:	3301      	adds	r3, #1
 800879e:	72fb      	strb	r3, [r7, #11]
      break;
 80087a0:	bf00      	nop
  }

  if (err != 0U)
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d11e      	bne.n	80087e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	88db      	ldrh	r3, [r3, #6]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d016      	beq.n	80087de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80087b0:	893b      	ldrh	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00e      	beq.n	80087d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	88da      	ldrh	r2, [r3, #6]
 80087ba:	893b      	ldrh	r3, [r7, #8]
 80087bc:	4293      	cmp	r3, r2
 80087be:	bf28      	it	cs
 80087c0:	4613      	movcs	r3, r2
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087c6:	893b      	ldrh	r3, [r7, #8]
 80087c8:	461a      	mov	r2, r3
 80087ca:	68f9      	ldr	r1, [r7, #12]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fa69 	bl	8008ca4 <USBD_CtlSendData>
 80087d2:	e009      	b.n	80087e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f9e7 	bl	8008baa <USBD_CtlError>
 80087dc:	e004      	b.n	80087e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 faba 	bl	8008d58 <USBD_CtlSendStatus>
 80087e4:	e000      	b.n	80087e8 <USBD_GetDescriptor+0x320>
    return;
 80087e6:	bf00      	nop
  }
}
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop

080087f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	889b      	ldrh	r3, [r3, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d131      	bne.n	8008866 <USBD_SetAddress+0x76>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	88db      	ldrh	r3, [r3, #6]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d12d      	bne.n	8008866 <USBD_SetAddress+0x76>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	885b      	ldrh	r3, [r3, #2]
 800880e:	2b7f      	cmp	r3, #127	; 0x7f
 8008810:	d829      	bhi.n	8008866 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	885b      	ldrh	r3, [r3, #2]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800881c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b03      	cmp	r3, #3
 8008828:	d104      	bne.n	8008834 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f9bc 	bl	8008baa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008832:	e01d      	b.n	8008870 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7bfa      	ldrb	r2, [r7, #15]
 8008838:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 f9e9 	bl	8009c18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa86 	bl	8008d58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d004      	beq.n	800885c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	e009      	b.n	8008870 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008864:	e004      	b.n	8008870 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f99e 	bl	8008baa <USBD_CtlError>
  }
}
 800886e:	bf00      	nop
 8008870:	bf00      	nop
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	b2da      	uxtb	r2, r3
 800888c:	4b4e      	ldr	r3, [pc, #312]	; (80089c8 <USBD_SetConfig+0x150>)
 800888e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008890:	4b4d      	ldr	r3, [pc, #308]	; (80089c8 <USBD_SetConfig+0x150>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d905      	bls.n	80088a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f985 	bl	8008baa <USBD_CtlError>
    return USBD_FAIL;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e08c      	b.n	80089be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d002      	beq.n	80088b6 <USBD_SetConfig+0x3e>
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d029      	beq.n	8008908 <USBD_SetConfig+0x90>
 80088b4:	e075      	b.n	80089a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088b6:	4b44      	ldr	r3, [pc, #272]	; (80089c8 <USBD_SetConfig+0x150>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d020      	beq.n	8008900 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80088be:	4b42      	ldr	r3, [pc, #264]	; (80089c8 <USBD_SetConfig+0x150>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088c8:	4b3f      	ldr	r3, [pc, #252]	; (80089c8 <USBD_SetConfig+0x150>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fe ffb7 	bl	8007842 <USBD_SetClassConfig>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d008      	beq.n	80088f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f962 	bl	8008baa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2202      	movs	r2, #2
 80088ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088ee:	e065      	b.n	80089bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fa31 	bl	8008d58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2203      	movs	r2, #3
 80088fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088fe:	e05d      	b.n	80089bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fa29 	bl	8008d58 <USBD_CtlSendStatus>
      break;
 8008906:	e059      	b.n	80089bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008908:	4b2f      	ldr	r3, [pc, #188]	; (80089c8 <USBD_SetConfig+0x150>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d112      	bne.n	8008936 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008918:	4b2b      	ldr	r3, [pc, #172]	; (80089c8 <USBD_SetConfig+0x150>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008922:	4b29      	ldr	r3, [pc, #164]	; (80089c8 <USBD_SetConfig+0x150>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fe ffa6 	bl	800787a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fa12 	bl	8008d58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008934:	e042      	b.n	80089bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008936:	4b24      	ldr	r3, [pc, #144]	; (80089c8 <USBD_SetConfig+0x150>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d02a      	beq.n	800899a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe ff94 	bl	800787a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008952:	4b1d      	ldr	r3, [pc, #116]	; (80089c8 <USBD_SetConfig+0x150>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800895c:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <USBD_SetConfig+0x150>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fe ff6d 	bl	8007842 <USBD_SetClassConfig>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00f      	beq.n	8008992 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f918 	bl	8008baa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	b2db      	uxtb	r3, r3
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7fe ff79 	bl	800787a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008990:	e014      	b.n	80089bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f9e0 	bl	8008d58 <USBD_CtlSendStatus>
      break;
 8008998:	e010      	b.n	80089bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9dc 	bl	8008d58 <USBD_CtlSendStatus>
      break;
 80089a0:	e00c      	b.n	80089bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f900 	bl	8008baa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089aa:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <USBD_SetConfig+0x150>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7fe ff62 	bl	800787a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089b6:	2303      	movs	r3, #3
 80089b8:	73fb      	strb	r3, [r7, #15]
      break;
 80089ba:	bf00      	nop
  }

  return ret;
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	200002c8 	.word	0x200002c8

080089cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	88db      	ldrh	r3, [r3, #6]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d004      	beq.n	80089e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f8e2 	bl	8008baa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089e6:	e023      	b.n	8008a30 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	dc02      	bgt.n	80089fa <USBD_GetConfig+0x2e>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dc03      	bgt.n	8008a00 <USBD_GetConfig+0x34>
 80089f8:	e015      	b.n	8008a26 <USBD_GetConfig+0x5a>
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d00b      	beq.n	8008a16 <USBD_GetConfig+0x4a>
 80089fe:	e012      	b.n	8008a26 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f948 	bl	8008ca4 <USBD_CtlSendData>
        break;
 8008a14:	e00c      	b.n	8008a30 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f940 	bl	8008ca4 <USBD_CtlSendData>
        break;
 8008a24:	e004      	b.n	8008a30 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f8be 	bl	8008baa <USBD_CtlError>
        break;
 8008a2e:	bf00      	nop
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d81e      	bhi.n	8008a8e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	88db      	ldrh	r3, [r3, #6]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d004      	beq.n	8008a62 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f8a5 	bl	8008baa <USBD_CtlError>
        break;
 8008a60:	e01a      	b.n	8008a98 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f043 0202 	orr.w	r2, r3, #2
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	330c      	adds	r3, #12
 8008a82:	2202      	movs	r2, #2
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f90c 	bl	8008ca4 <USBD_CtlSendData>
      break;
 8008a8c:	e004      	b.n	8008a98 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f88a 	bl	8008baa <USBD_CtlError>
      break;
 8008a96:	bf00      	nop
  }
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	885b      	ldrh	r3, [r3, #2]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d107      	bne.n	8008ac2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f94c 	bl	8008d58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ac0:	e013      	b.n	8008aea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	885b      	ldrh	r3, [r3, #2]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d10b      	bne.n	8008ae2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	889b      	ldrh	r3, [r3, #4]
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f93c 	bl	8008d58 <USBD_CtlSendStatus>
}
 8008ae0:	e003      	b.n	8008aea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f860 	bl	8008baa <USBD_CtlError>
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	3b01      	subs	r3, #1
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d80b      	bhi.n	8008b22 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d10c      	bne.n	8008b2c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f91c 	bl	8008d58 <USBD_CtlSendStatus>
      }
      break;
 8008b20:	e004      	b.n	8008b2c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f840 	bl	8008baa <USBD_CtlError>
      break;
 8008b2a:	e000      	b.n	8008b2e <USBD_ClrFeature+0x3c>
      break;
 8008b2c:	bf00      	nop
  }
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	781a      	ldrb	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	781a      	ldrb	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff fa17 	bl	8007f94 <SWAPBYTE>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3301      	adds	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff fa0a 	bl	8007f94 <SWAPBYTE>
 8008b80:	4603      	mov	r3, r0
 8008b82:	461a      	mov	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff f9fd 	bl	8007f94 <SWAPBYTE>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	80da      	strh	r2, [r3, #6]
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bb4:	2180      	movs	r1, #128	; 0x80
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 ffc4 	bl	8009b44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 ffc0 	bl	8009b44 <USBD_LL_StallEP>
}
 8008bc4:	bf00      	nop
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d042      	beq.n	8008c68 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008be6:	6938      	ldr	r0, [r7, #16]
 8008be8:	f000 f842 	bl	8008c70 <USBD_GetLen>
 8008bec:	4603      	mov	r3, r0
 8008bee:	3301      	adds	r3, #1
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf6:	d808      	bhi.n	8008c0a <USBD_GetString+0x3e>
 8008bf8:	6938      	ldr	r0, [r7, #16]
 8008bfa:	f000 f839 	bl	8008c70 <USBD_GetLen>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	3301      	adds	r3, #1
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	e001      	b.n	8008c0e <USBD_GetString+0x42>
 8008c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	4413      	add	r3, r2
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	7812      	ldrb	r2, [r2, #0]
 8008c1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	3301      	adds	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	4413      	add	r3, r2
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	3301      	adds	r3, #1
 8008c32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c34:	e013      	b.n	8008c5e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	3301      	adds	r3, #1
 8008c46:	613b      	str	r3, [r7, #16]
    idx++;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	4413      	add	r3, r2
 8008c54:	2200      	movs	r2, #0
 8008c56:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e7      	bne.n	8008c36 <USBD_GetString+0x6a>
 8008c66:	e000      	b.n	8008c6a <USBD_GetString+0x9e>
    return;
 8008c68:	bf00      	nop
  }
}
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c80:	e005      	b.n	8008c8e <USBD_GetLen+0x1e>
  {
    len++;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	3301      	adds	r3, #1
 8008c86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f5      	bne.n	8008c82 <USBD_GetLen+0x12>
  }

  return len;
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	2100      	movs	r1, #0
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 ffc3 	bl	8009c56 <USBD_LL_Transmit>

  return USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	2100      	movs	r1, #0
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 ffb2 	bl	8009c56 <USBD_LL_Transmit>

  return USBD_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	2100      	movs	r1, #0
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f000 ffb6 	bl	8009c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	60b9      	str	r1, [r7, #8]
 8008d40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	2100      	movs	r1, #0
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 ffa5 	bl	8009c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2204      	movs	r2, #4
 8008d64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d68:	2300      	movs	r3, #0
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 ff71 	bl	8009c56 <USBD_LL_Transmit>

  return USBD_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2205      	movs	r2, #5
 8008d8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d8e:	2300      	movs	r3, #0
 8008d90:	2200      	movs	r2, #0
 8008d92:	2100      	movs	r1, #0
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 ff7f 	bl	8009c98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <delayInit>:
#include <API_delay.h>
#include <stm32f4xx_hal.h>

void delayInit(delay_t* delay, tick_t duration){
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	assert(delay);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d105      	bne.n	8008dc0 <delayInit+0x1c>
 8008db4:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <delayInit+0x3c>)
 8008db6:	4a0b      	ldr	r2, [pc, #44]	; (8008de4 <delayInit+0x40>)
 8008db8:	2105      	movs	r1, #5
 8008dba:	480b      	ldr	r0, [pc, #44]	; (8008de8 <delayInit+0x44>)
 8008dbc:	f001 f832 	bl	8009e24 <__assert_func>

	delay->startTime = HAL_GetTick();
 8008dc0:	f7f8 f90c 	bl	8000fdc <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	609a      	str	r2, [r3, #8]
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	0800ad98 	.word	0x0800ad98
 8008de4:	0800aec8 	.word	0x0800aec8
 8008de8:	0800ada0 	.word	0x0800ada0

08008dec <delayRead>:

bool_t delayRead(delay_t* delay){
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	assert(delay);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d105      	bne.n	8008e06 <delayRead+0x1a>
 8008dfa:	4b16      	ldr	r3, [pc, #88]	; (8008e54 <delayRead+0x68>)
 8008dfc:	4a16      	ldr	r2, [pc, #88]	; (8008e58 <delayRead+0x6c>)
 8008dfe:	210d      	movs	r1, #13
 8008e00:	4816      	ldr	r0, [pc, #88]	; (8008e5c <delayRead+0x70>)
 8008e02:	f001 f80f 	bl	8009e24 <__assert_func>

	tick_t Current_time = HAL_GetTick();
 8008e06:	f7f8 f8e9 	bl	8000fdc <HAL_GetTick>
 8008e0a:	60b8      	str	r0, [r7, #8]
	bool_t Done = false;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]

	if(!delay->running){
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d106      	bne.n	8008e26 <delayRead+0x3a>
		delay->startTime = Current_time;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	609a      	str	r2, [r3, #8]
 8008e24:	e011      	b.n	8008e4a <delayRead+0x5e>
	}else{
		// Done is TRUE when the duration has elapsed
		// Done is FALSE when theres time remaining
		Done = (Current_time - delay->startTime) >= delay->duration;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	1ad2      	subs	r2, r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	bf2c      	ite	cs
 8008e36:	2301      	movcs	r3, #1
 8008e38:	2300      	movcc	r3, #0
 8008e3a:	73fb      	strb	r3, [r7, #15]
		// If it's done, it should stop running
		delay->running = !Done;
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	f083 0301 	eor.w	r3, r3, #1
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	609a      	str	r2, [r3, #8]
	}
	return Done;
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	0800ad98 	.word	0x0800ad98
 8008e58:	0800aed4 	.word	0x0800aed4
 8008e5c:	0800ada0 	.word	0x0800ada0

08008e60 <app_entry_point>:
 * @brief Entry point for the application.
 *
 * This function implements the main loop of the state machine.
 */
void app_entry_point(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
    application_state = INITIALIZING;
 8008e64:	4b13      	ldr	r3, [pc, #76]	; (8008eb4 <app_entry_point+0x54>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (application_state) {
 8008e6a:	4b12      	ldr	r3, [pc, #72]	; (8008eb4 <app_entry_point+0x54>)
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d81b      	bhi.n	8008eaa <app_entry_point+0x4a>
 8008e72:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <app_entry_point+0x18>)
 8008e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e78:	08008e8d 	.word	0x08008e8d
 8008e7c:	08008e93 	.word	0x08008e93
 8008e80:	08008e99 	.word	0x08008e99
 8008e84:	08008e9f 	.word	0x08008e9f
 8008e88:	08008ea5 	.word	0x08008ea5
            case INITIALIZING:
                on_initializing();
 8008e8c:	f000 f814 	bl	8008eb8 <on_initializing>
                break;
 8008e90:	e00e      	b.n	8008eb0 <app_entry_point+0x50>
            case IDLE:
                on_idle();
 8008e92:	f000 f825 	bl	8008ee0 <on_idle>
                break;
 8008e96:	e00b      	b.n	8008eb0 <app_entry_point+0x50>
            case RECORDING:
                on_recording();
 8008e98:	f000 f842 	bl	8008f20 <on_recording>
                break;
 8008e9c:	e008      	b.n	8008eb0 <app_entry_point+0x50>
            case PROCESSING:
                on_processing();
 8008e9e:	f000 f84b 	bl	8008f38 <on_processing>
                break;
 8008ea2:	e005      	b.n	8008eb0 <app_entry_point+0x50>
            case USB_COMMAND:
                on_usb_command();
 8008ea4:	f000 f854 	bl	8008f50 <on_usb_command>
                break;
 8008ea8:	e002      	b.n	8008eb0 <app_entry_point+0x50>
            case APP_ERROR:
            default:
                on_app_error();
 8008eaa:	f000 f897 	bl	8008fdc <on_app_error>
                break;
 8008eae:	bf00      	nop
        switch (application_state) {
 8008eb0:	e7db      	b.n	8008e6a <app_entry_point+0xa>
 8008eb2:	bf00      	nop
 8008eb4:	200002c9 	.word	0x200002c9

08008eb8 <on_initializing>:
 *
 * Initializes all necessary modules and peripherals (e.g., button, mic, OLED, SD, USB).
 * After the initialization completes, transitions to IDLE state.
 */
static void on_initializing(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
    // Initialize the button driver (debouncing state machine and HAL interface)
    button_init();
 8008ebc:	f000 f892 	bl	8008fe4 <button_init>
    //oled_init();        // This calls port_oled_init() and clears the display
    //oled_clear();
    //oled_set_cursor(0, 0);
    //oled_print("App initialized");

    usb_cdc_init();
 8008ec0:	f000 f97c 	bl	80091bc <usb_cdc_init>

    debug_uart_init();
 8008ec4:	f000 f92a 	bl	800911c <debug_uart_init>
    debug_uart_print("App initialized\r\n");
 8008ec8:	4803      	ldr	r0, [pc, #12]	; (8008ed8 <on_initializing+0x20>)
 8008eca:	f000 f92f 	bl	800912c <debug_uart_print>
    // TODO: Initialize other drivers (mic, oled, SD, USB, etc.)

    // Once all peripheral initialization is completed, transition to IDLE.
    application_state = IDLE;
 8008ece:	4b03      	ldr	r3, [pc, #12]	; (8008edc <on_initializing+0x24>)
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	701a      	strb	r2, [r3, #0]
}
 8008ed4:	bf00      	nop
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	0800adc0 	.word	0x0800adc0
 8008edc:	200002c9 	.word	0x200002c9

08008ee0 <on_idle>:
 * In the IDLE state, the system polls the button and listens for USB commands.
 * When a complete button press (press-release) is detected, the state transitions
 * to RECORDING.
 */
static void on_idle(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
    // Update the button's debounce logic
    button_update();
 8008ee4:	f000 f89e 	bl	8009024 <button_update>

    // Process any button event as needed (e.g., button press triggers recording)
    if (button_was_pressed()) {
 8008ee8:	f000 f904 	bl	80090f4 <button_was_pressed>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <on_idle+0x1a>
        // For demonstration, toggle LED to indicate button event.
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8008ef2:	2120      	movs	r1, #32
 8008ef4:	4807      	ldr	r0, [pc, #28]	; (8008f14 <on_idle+0x34>)
 8008ef6:	f7f8 fe7c 	bl	8001bf2 <HAL_GPIO_TogglePin>
        // Optionally, transition to another state:
        // application_state = RECORDING;
    }

    // Poll USB CDC for a complete command
    if (usb_cdc_isCommandPending()) {
 8008efa:	f000 f9b9 	bl	8009270 <usb_cdc_isCommandPending>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d005      	beq.n	8008f10 <on_idle+0x30>
    	debug_uart_print("COMMAND PENDING\r\n");
 8008f04:	4804      	ldr	r0, [pc, #16]	; (8008f18 <on_idle+0x38>)
 8008f06:	f000 f911 	bl	800912c <debug_uart_print>
        // Transition to the USB_COMMAND state for processing the command.
        application_state = USB_COMMAND;
 8008f0a:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <on_idle+0x3c>)
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	701a      	strb	r2, [r3, #0]
    }
}
 8008f10:	bf00      	nop
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	40020000 	.word	0x40020000
 8008f18:	0800add4 	.word	0x0800add4
 8008f1c:	200002c9 	.word	0x200002c9

08008f20 <on_recording>:
 *
 * After the recording is stopped (either by fixed duration or button press),
 * the state transitions to PROCESSING.
 */
static void on_recording(void)
{
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
    // TODO: Start ADC conversion with DMA.
    // Record audio into a RAM buffer.

    // For demonstration, simulate recording done by transitioning immediately.
    application_state = PROCESSING;
 8008f24:	4b03      	ldr	r3, [pc, #12]	; (8008f34 <on_recording+0x14>)
 8008f26:	2203      	movs	r2, #3
 8008f28:	701a      	strb	r2, [r3, #0]
}
 8008f2a:	bf00      	nop
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr
 8008f34:	200002c9 	.word	0x200002c9

08008f38 <on_processing>:
 *
 * In this state, the recorded audio data (from RAM) is saved to the SD card using SPI + FatFs.
 * Once the data is saved, the system transitions back to the IDLE state.
 */
static void on_processing(void)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	af00      	add	r7, sp, #0
    // TODO: Implement saving of audio data to the SD card.

    // After processing, return to the IDLE state.
    application_state = IDLE;
 8008f3c:	4b03      	ldr	r3, [pc, #12]	; (8008f4c <on_processing+0x14>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	701a      	strb	r2, [r3, #0]
}
 8008f42:	bf00      	nop
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	200002c9 	.word	0x200002c9

08008f50 <on_usb_command>:
 *
 * Processes USB CDC commands (e.g., list files, send file, delete file).
 * After executing a command, the state transitions back to the IDLE state.
 */
static void on_usb_command(void)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0

    const char* cmd = usb_cdc_getCommand();
 8008f56:	f000 f997 	bl	8009288 <usb_cdc_getCommand>
 8008f5a:	6078      	str	r0, [r7, #4]
    debug_uart_print("COMMAND PROCESSING\r\n");
 8008f5c:	4817      	ldr	r0, [pc, #92]	; (8008fbc <on_usb_command+0x6c>)
 8008f5e:	f000 f8e5 	bl	800912c <debug_uart_print>

    if (strcmp(cmd, USB_CMD_LED_ON) == 0)
 8008f62:	4917      	ldr	r1, [pc, #92]	; (8008fc0 <on_usb_command+0x70>)
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7f7 f953 	bl	8000210 <strcmp>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d108      	bne.n	8008f82 <on_usb_command+0x32>
    {
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8008f70:	2201      	movs	r2, #1
 8008f72:	2120      	movs	r1, #32
 8008f74:	4813      	ldr	r0, [pc, #76]	; (8008fc4 <on_usb_command+0x74>)
 8008f76:	f7f8 fe23 	bl	8001bc0 <HAL_GPIO_WritePin>
        usb_cdc_sendString("LED turned on\r\n");
 8008f7a:	4813      	ldr	r0, [pc, #76]	; (8008fc8 <on_usb_command+0x78>)
 8008f7c:	f000 f99e 	bl	80092bc <usb_cdc_sendString>
 8008f80:	e012      	b.n	8008fa8 <on_usb_command+0x58>
    }
    else if (strcmp(cmd, USB_CMD_LED_OFF) == 0)
 8008f82:	4912      	ldr	r1, [pc, #72]	; (8008fcc <on_usb_command+0x7c>)
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7f7 f943 	bl	8000210 <strcmp>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d108      	bne.n	8008fa2 <on_usb_command+0x52>
    {
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008f90:	2200      	movs	r2, #0
 8008f92:	2120      	movs	r1, #32
 8008f94:	480b      	ldr	r0, [pc, #44]	; (8008fc4 <on_usb_command+0x74>)
 8008f96:	f7f8 fe13 	bl	8001bc0 <HAL_GPIO_WritePin>
        usb_cdc_sendString("LED turned off\r\n");
 8008f9a:	480d      	ldr	r0, [pc, #52]	; (8008fd0 <on_usb_command+0x80>)
 8008f9c:	f000 f98e 	bl	80092bc <usb_cdc_sendString>
 8008fa0:	e002      	b.n	8008fa8 <on_usb_command+0x58>
    }
    else
    {
        usb_cdc_sendString("Unknown command\r\n");
 8008fa2:	480c      	ldr	r0, [pc, #48]	; (8008fd4 <on_usb_command+0x84>)
 8008fa4:	f000 f98a 	bl	80092bc <usb_cdc_sendString>
    }

    // Clear the command so that the flag is reset.
    usb_cdc_clearCommand();
 8008fa8:	f000 f978 	bl	800929c <usb_cdc_clearCommand>

    // Once command processing is completed, transition back to IDLE.
    application_state = IDLE;
 8008fac:	4b0a      	ldr	r3, [pc, #40]	; (8008fd8 <on_usb_command+0x88>)
 8008fae:	2201      	movs	r2, #1
 8008fb0:	701a      	strb	r2, [r3, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	0800ade8 	.word	0x0800ade8
 8008fc0:	0800ae00 	.word	0x0800ae00
 8008fc4:	40020000 	.word	0x40020000
 8008fc8:	0800ae08 	.word	0x0800ae08
 8008fcc:	0800ae18 	.word	0x0800ae18
 8008fd0:	0800ae20 	.word	0x0800ae20
 8008fd4:	0800ae34 	.word	0x0800ae34
 8008fd8:	200002c9 	.word	0x200002c9

08008fdc <on_app_error>:
 *
 * In case of errors (e.g., SD initialization failure, DMA error), the system enters
 * the ERROR state and can provide visual or debugging cues.
 */
static void on_app_error(void)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0
    // TODO: Implement error handling (e.g., blink an LED to indicate error).
    while (1) {
 8008fe0:	e7fe      	b.n	8008fe0 <on_app_error+0x4>
	...

08008fe4 <button_init>:
static bool_t button_flag;  ///< Flag set when a complete press-release is detected

/**
 * @brief Initializes the button state machine.
 */
void button_init(void) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
    current_state = BUTTON_UP;
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <button_init+0x1c>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	701a      	strb	r2, [r3, #0]
    delayInit(&delay_debounce, DEBOUNCE_PERIOD_MS);
 8008fee:	2128      	movs	r1, #40	; 0x28
 8008ff0:	4804      	ldr	r0, [pc, #16]	; (8009004 <button_init+0x20>)
 8008ff2:	f7ff fed7 	bl	8008da4 <delayInit>
    button_flag = false;
 8008ff6:	4b04      	ldr	r3, [pc, #16]	; (8009008 <button_init+0x24>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	701a      	strb	r2, [r3, #0]
}
 8008ffc:	bf00      	nop
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	200002ca 	.word	0x200002ca
 8009004:	200002cc 	.word	0x200002cc
 8009008:	200002d8 	.word	0x200002d8

0800900c <on_button_released>:

/**
 * @brief Internal function called when a valid button release is confirmed.
 */
static void on_button_released(void) {
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
    button_flag = true;
 8009010:	4b03      	ldr	r3, [pc, #12]	; (8009020 <on_button_released+0x14>)
 8009012:	2201      	movs	r2, #1
 8009014:	701a      	strb	r2, [r3, #0]
}
 8009016:	bf00      	nop
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	200002d8 	.word	0x200002d8

08009024 <button_update>:
 * @brief Updates the debouncing state machine.
 *
 * This function reads the button status using port_button_read() and updates the
 * state machine. It should be called in the main loop periodically.
 */
void button_update(void) {
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
    bool_t button_status = port_button_read();  // true = pressed; false = released
 800902a:	f000 f8a1 	bl	8009170 <port_button_read>
 800902e:	4603      	mov	r3, r0
 8009030:	71fb      	strb	r3, [r7, #7]
    switch (current_state) {
 8009032:	4b2e      	ldr	r3, [pc, #184]	; (80090ec <button_update+0xc8>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b03      	cmp	r3, #3
 8009038:	d84a      	bhi.n	80090d0 <button_update+0xac>
 800903a:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <button_update+0x1c>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	08009051 	.word	0x08009051
 8009044:	08009067 	.word	0x08009067
 8009048:	08009089 	.word	0x08009089
 800904c:	080090a5 	.word	0x080090a5
        case BUTTON_UP:
            if (button_status == true) {
 8009050:	79fb      	ldrb	r3, [r7, #7]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d03f      	beq.n	80090d6 <button_update+0xb2>
                current_state = BUTTON_FALLING;
 8009056:	4b25      	ldr	r3, [pc, #148]	; (80090ec <button_update+0xc8>)
 8009058:	2201      	movs	r2, #1
 800905a:	701a      	strb	r2, [r3, #0]
                delayInit(&delay_debounce, DEBOUNCE_PERIOD_MS);
 800905c:	2128      	movs	r1, #40	; 0x28
 800905e:	4824      	ldr	r0, [pc, #144]	; (80090f0 <button_update+0xcc>)
 8009060:	f7ff fea0 	bl	8008da4 <delayInit>
            }
            break;
 8009064:	e037      	b.n	80090d6 <button_update+0xb2>
        case BUTTON_FALLING:
            if (delayRead(&delay_debounce)) {
 8009066:	4822      	ldr	r0, [pc, #136]	; (80090f0 <button_update+0xcc>)
 8009068:	f7ff fec0 	bl	8008dec <delayRead>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d033      	beq.n	80090da <button_update+0xb6>
                if (button_status == true) {
 8009072:	79fb      	ldrb	r3, [r7, #7]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <button_update+0x5c>
                    current_state = BUTTON_DOWN;
 8009078:	4b1c      	ldr	r3, [pc, #112]	; (80090ec <button_update+0xc8>)
 800907a:	2202      	movs	r2, #2
 800907c:	701a      	strb	r2, [r3, #0]
                } else {
                    current_state = BUTTON_UP;
                }
            }
            break;
 800907e:	e02c      	b.n	80090da <button_update+0xb6>
                    current_state = BUTTON_UP;
 8009080:	4b1a      	ldr	r3, [pc, #104]	; (80090ec <button_update+0xc8>)
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
            break;
 8009086:	e028      	b.n	80090da <button_update+0xb6>
        case BUTTON_DOWN:
            if (button_status == false) {
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	f083 0301 	eor.w	r3, r3, #1
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	d024      	beq.n	80090de <button_update+0xba>
                current_state = BUTTON_RAISING;
 8009094:	4b15      	ldr	r3, [pc, #84]	; (80090ec <button_update+0xc8>)
 8009096:	2203      	movs	r2, #3
 8009098:	701a      	strb	r2, [r3, #0]
                delayInit(&delay_debounce, DEBOUNCE_PERIOD_MS);
 800909a:	2128      	movs	r1, #40	; 0x28
 800909c:	4814      	ldr	r0, [pc, #80]	; (80090f0 <button_update+0xcc>)
 800909e:	f7ff fe81 	bl	8008da4 <delayInit>
            }
            break;
 80090a2:	e01c      	b.n	80090de <button_update+0xba>
        case BUTTON_RAISING:
            if (delayRead(&delay_debounce)) {
 80090a4:	4812      	ldr	r0, [pc, #72]	; (80090f0 <button_update+0xcc>)
 80090a6:	f7ff fea1 	bl	8008dec <delayRead>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d018      	beq.n	80090e2 <button_update+0xbe>
                if (button_status == false) {
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	f083 0301 	eor.w	r3, r3, #1
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <button_update+0xa4>
                    on_button_released();
 80090bc:	f7ff ffa6 	bl	800900c <on_button_released>
                    current_state = BUTTON_UP;
 80090c0:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <button_update+0xc8>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
                } else {
                    current_state = BUTTON_DOWN;
                }
            }
            break;
 80090c6:	e00c      	b.n	80090e2 <button_update+0xbe>
                    current_state = BUTTON_DOWN;
 80090c8:	4b08      	ldr	r3, [pc, #32]	; (80090ec <button_update+0xc8>)
 80090ca:	2202      	movs	r2, #2
 80090cc:	701a      	strb	r2, [r3, #0]
            break;
 80090ce:	e008      	b.n	80090e2 <button_update+0xbe>
        default:
            button_init();
 80090d0:	f7ff ff88 	bl	8008fe4 <button_init>
            break;
 80090d4:	e006      	b.n	80090e4 <button_update+0xc0>
            break;
 80090d6:	bf00      	nop
 80090d8:	e004      	b.n	80090e4 <button_update+0xc0>
            break;
 80090da:	bf00      	nop
 80090dc:	e002      	b.n	80090e4 <button_update+0xc0>
            break;
 80090de:	bf00      	nop
 80090e0:	e000      	b.n	80090e4 <button_update+0xc0>
            break;
 80090e2:	bf00      	nop
    }
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	200002ca 	.word	0x200002ca
 80090f0:	200002cc 	.word	0x200002cc

080090f4 <button_was_pressed>:
 *
 * Returns true once per complete cycle (press and release) and resets the flag.
 *
 * @return true if an event is detected; false otherwise.
 */
bool_t button_was_pressed(void) {
 80090f4:	b480      	push	{r7}
 80090f6:	af00      	add	r7, sp, #0
    if (button_flag) {
 80090f8:	4b07      	ldr	r3, [pc, #28]	; (8009118 <button_was_pressed+0x24>)
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d004      	beq.n	800910a <button_was_pressed+0x16>
        button_flag = false;
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <button_was_pressed+0x24>)
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]
        return true;
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <button_was_pressed+0x18>
    }
    return false;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	200002d8 	.word	0x200002d8

0800911c <debug_uart_init>:

// External declaration of the UART handle (defined in main.c or generated by CubeMX)
extern UART_HandleTypeDef huart2;

void debug_uart_init(void)
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
    // In most cases, initialization for UART2 is handled by CubeMX.
    // This function exists for logical consistency.
}
 8009120:	bf00      	nop
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
	...

0800912c <debug_uart_print>:

int debug_uart_print(const char* msg)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
    if (msg == 0) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d102      	bne.n	8009140 <debug_uart_print+0x14>
        return -1;
 800913a:	f04f 33ff 	mov.w	r3, #4294967295
 800913e:	e011      	b.n	8009164 <debug_uart_print+0x38>
    }

    uint16_t len = (uint16_t)strlen(msg);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7f7 f86f 	bl	8000224 <strlen>
 8009146:	4603      	mov	r3, r0
 8009148:	81fb      	strh	r3, [r7, #14]
    // Transmit the string over UART2 with a timeout of 100 ms.
    if (HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100) == HAL_OK)
 800914a:	89fa      	ldrh	r2, [r7, #14]
 800914c:	2364      	movs	r3, #100	; 0x64
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	4806      	ldr	r0, [pc, #24]	; (800916c <debug_uart_print+0x40>)
 8009152:	f7fb fb36 	bl	80047c2 <HAL_UART_Transmit>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <debug_uart_print+0x34>
    {
        return 0;
 800915c:	2300      	movs	r3, #0
 800915e:	e001      	b.n	8009164 <debug_uart_print+0x38>
    }
    return -1;
 8009160:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000278 	.word	0x20000278

08009170 <port_button_read>:
 * Uses HAL_GPIO_ReadPin to retrieve the button state. If the button is active-low,
 * the logic is inverted so that the function returns true when the button is pressed.
 *
 * @return true if the button is pressed, false if released.
 */
bool_t port_button_read(void) {
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 8009176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800917a:	4807      	ldr	r0, [pc, #28]	; (8009198 <port_button_read+0x28>)
 800917c:	f7f8 fd08 	bl	8001b90 <HAL_GPIO_ReadPin>
 8009180:	4603      	mov	r3, r0
 8009182:	71fb      	strb	r3, [r7, #7]
    return BUTTON_PULL_LOW ? (pin_state == GPIO_PIN_RESET) : (pin_state == GPIO_PIN_SET);
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	2b00      	cmp	r3, #0
 8009188:	bf0c      	ite	eq
 800918a:	2301      	moveq	r3, #1
 800918c:	2300      	movne	r3, #0
 800918e:	b2db      	uxtb	r3, r3
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	40020800 	.word	0x40020800

0800919c <port_usb_cdc_transmit>:
 * @brief Transmits data over USB CDC.
 *
 * Calls the HAL function CDC_Transmit_FS to send data.
 */
int port_usb_cdc_transmit(const uint8_t *buf, uint16_t len)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	807b      	strh	r3, [r7, #2]
    return CDC_Transmit_FS((uint8_t*)buf, len);
 80091a8:	887b      	ldrh	r3, [r7, #2]
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f967 	bl	8009480 <CDC_Transmit_FS>
 80091b2:	4603      	mov	r3, r0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <usb_cdc_init>:
static char usb_cmd_buffer[USB_CMD_BUFFER_SIZE] = { 0 };

/**
 * @brief Initializes the USB CDC driver.
 */
void usb_cdc_init(void) {
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
	command_pending = false;
 80091c0:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <usb_cdc_init+0x18>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
	memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 80091c6:	2280      	movs	r2, #128	; 0x80
 80091c8:	2100      	movs	r1, #0
 80091ca:	4803      	ldr	r0, [pc, #12]	; (80091d8 <usb_cdc_init+0x1c>)
 80091cc:	f000 ff5f 	bl	800a08e <memset>
}
 80091d0:	bf00      	nop
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	200002d9 	.word	0x200002d9
 80091d8:	200002dc 	.word	0x200002dc

080091dc <usb_cdc_receiveCallback>:
 * It copies data into the command buffer and marks a command as pending.
 *
 * @param Buf Pointer to the received data buffer.
 * @param Len Number of bytes received.
 */
void usb_cdc_receiveCallback(uint8_t *Buf, uint32_t Len) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	debug_uart_print("usb_cdc_receiveCallback()\r\n");
 80091e6:	481e      	ldr	r0, [pc, #120]	; (8009260 <usb_cdc_receiveCallback+0x84>)
 80091e8:	f7ff ffa0 	bl	800912c <debug_uart_print>
	debug_uart_print((char*) Buf);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff ff9d 	bl	800912c <debug_uart_print>
	debug_uart_print("\r\n");
 80091f2:	481c      	ldr	r0, [pc, #112]	; (8009264 <usb_cdc_receiveCallback+0x88>)
 80091f4:	f7ff ff9a 	bl	800912c <debug_uart_print>
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 80091f8:	e002      	b.n	8009200 <usb_cdc_receiveCallback+0x24>
		Len--;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	603b      	str	r3, [r7, #0]
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00d      	beq.n	8009222 <usb_cdc_receiveCallback+0x46>
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	3b01      	subs	r3, #1
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	4413      	add	r3, r2
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b0d      	cmp	r3, #13
 8009212:	d0f2      	beq.n	80091fa <usb_cdc_receiveCallback+0x1e>
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	3b01      	subs	r3, #1
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	4413      	add	r3, r2
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b0a      	cmp	r3, #10
 8009220:	d0eb      	beq.n	80091fa <usb_cdc_receiveCallback+0x1e>
	}
	if (!command_pending && Len < USB_CMD_BUFFER_SIZE) {
 8009222:	4b11      	ldr	r3, [pc, #68]	; (8009268 <usb_cdc_receiveCallback+0x8c>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	b2db      	uxtb	r3, r3
 8009228:	f083 0301 	eor.w	r3, r3, #1
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d011      	beq.n	8009256 <usb_cdc_receiveCallback+0x7a>
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2b7f      	cmp	r3, #127	; 0x7f
 8009236:	d80e      	bhi.n	8009256 <usb_cdc_receiveCallback+0x7a>
		memcpy(usb_cmd_buffer, Buf, Len);
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	480b      	ldr	r0, [pc, #44]	; (800926c <usb_cdc_receiveCallback+0x90>)
 800923e:	f000 ffa2 	bl	800a186 <memcpy>
		// Null-terminate the string safely.
		usb_cmd_buffer[Len < USB_CMD_BUFFER_SIZE ? Len : USB_CMD_BUFFER_SIZE - 1] =
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b7f      	cmp	r3, #127	; 0x7f
 8009246:	bf28      	it	cs
 8009248:	237f      	movcs	r3, #127	; 0x7f
 800924a:	4a08      	ldr	r2, [pc, #32]	; (800926c <usb_cdc_receiveCallback+0x90>)
 800924c:	2100      	movs	r1, #0
 800924e:	54d1      	strb	r1, [r2, r3]
				'\0';
		command_pending = true;
 8009250:	4b05      	ldr	r3, [pc, #20]	; (8009268 <usb_cdc_receiveCallback+0x8c>)
 8009252:	2201      	movs	r2, #1
 8009254:	701a      	strb	r2, [r3, #0]
	}
	// If a command is already pending, new data is discarded.
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	0800ae48 	.word	0x0800ae48
 8009264:	0800ae64 	.word	0x0800ae64
 8009268:	200002d9 	.word	0x200002d9
 800926c:	200002dc 	.word	0x200002dc

08009270 <usb_cdc_isCommandPending>:
/**
 * @brief Checks if there is a pending USB CDC command.
 *
 * @return true if there is a pending command, false otherwise.
 */
bool usb_cdc_isCommandPending(void) {
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
	return command_pending;
 8009274:	4b03      	ldr	r3, [pc, #12]	; (8009284 <usb_cdc_isCommandPending+0x14>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	b2db      	uxtb	r3, r3
}
 800927a:	4618      	mov	r0, r3
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	200002d9 	.word	0x200002d9

08009288 <usb_cdc_getCommand>:
/**
 * @brief Retrieves the buffered USB CDC command.
 *
 * @return Pointer to the null-terminated command string.
 */
const char* usb_cdc_getCommand(void) {
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
	return usb_cmd_buffer;
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <usb_cdc_getCommand+0x10>)
}
 800928e:	4618      	mov	r0, r3
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	200002dc 	.word	0x200002dc

0800929c <usb_cdc_clearCommand>:

/**
 * @brief Clears the current USB CDC command.
 */
void usb_cdc_clearCommand(void) {
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
	command_pending = false;
 80092a0:	4b04      	ldr	r3, [pc, #16]	; (80092b4 <usb_cdc_clearCommand+0x18>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	701a      	strb	r2, [r3, #0]
	memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 80092a6:	2280      	movs	r2, #128	; 0x80
 80092a8:	2100      	movs	r1, #0
 80092aa:	4803      	ldr	r0, [pc, #12]	; (80092b8 <usb_cdc_clearCommand+0x1c>)
 80092ac:	f000 feef 	bl	800a08e <memset>
}
 80092b0:	bf00      	nop
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	200002d9 	.word	0x200002d9
 80092b8:	200002dc 	.word	0x200002dc

080092bc <usb_cdc_sendString>:
 * This function calls the port layer function to actually transmit the data.
 *
 * @param str The null-terminated string to send.
 * @return 0 on success, non-zero on error.
 */
int usb_cdc_sendString(const char *str) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t) strlen(str);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7f6 ffad 	bl	8000224 <strlen>
 80092ca:	4603      	mov	r3, r0
 80092cc:	81fb      	strh	r3, [r7, #14]
	return port_usb_cdc_transmit((const uint8_t*) str, len);
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7ff ff62 	bl	800919c <port_usb_cdc_transmit>
 80092d8:	4603      	mov	r3, r0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <project_main>:
// === Public variable definitions ================================================================================= //
// === Private variable definitions ================================================================================ //
// === Private function implementation ============================================================================= //
// === Public function implementation ============================================================================== //

void project_main() { app_entry_point(); }
 80092e2:	b580      	push	{r7, lr}
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	f7ff fdbb 	bl	8008e60 <app_entry_point>
 80092ea:	bf00      	nop
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80092f4:	2200      	movs	r2, #0
 80092f6:	4912      	ldr	r1, [pc, #72]	; (8009340 <MX_USB_DEVICE_Init+0x50>)
 80092f8:	4812      	ldr	r0, [pc, #72]	; (8009344 <MX_USB_DEVICE_Init+0x54>)
 80092fa:	f7fe fa25 	bl	8007748 <USBD_Init>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009304:	f7f7 fb72 	bl	80009ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009308:	490f      	ldr	r1, [pc, #60]	; (8009348 <MX_USB_DEVICE_Init+0x58>)
 800930a:	480e      	ldr	r0, [pc, #56]	; (8009344 <MX_USB_DEVICE_Init+0x54>)
 800930c:	f7fe fa4c 	bl	80077a8 <USBD_RegisterClass>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009316:	f7f7 fb69 	bl	80009ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800931a:	490c      	ldr	r1, [pc, #48]	; (800934c <MX_USB_DEVICE_Init+0x5c>)
 800931c:	4809      	ldr	r0, [pc, #36]	; (8009344 <MX_USB_DEVICE_Init+0x54>)
 800931e:	f7fe f943 	bl	80075a8 <USBD_CDC_RegisterInterface>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009328:	f7f7 fb60 	bl	80009ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800932c:	4805      	ldr	r0, [pc, #20]	; (8009344 <MX_USB_DEVICE_Init+0x54>)
 800932e:	f7fe fa71 	bl	8007814 <USBD_Start>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009338:	f7f7 fb58 	bl	80009ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800933c:	bf00      	nop
 800933e:	bd80      	pop	{r7, pc}
 8009340:	200000ac 	.word	0x200000ac
 8009344:	2000035c 	.word	0x2000035c
 8009348:	20000018 	.word	0x20000018
 800934c:	20000098 	.word	0x20000098

08009350 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009354:	2200      	movs	r2, #0
 8009356:	4905      	ldr	r1, [pc, #20]	; (800936c <CDC_Init_FS+0x1c>)
 8009358:	4805      	ldr	r0, [pc, #20]	; (8009370 <CDC_Init_FS+0x20>)
 800935a:	f7fe f93f 	bl	80075dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800935e:	4905      	ldr	r1, [pc, #20]	; (8009374 <CDC_Init_FS+0x24>)
 8009360:	4803      	ldr	r0, [pc, #12]	; (8009370 <CDC_Init_FS+0x20>)
 8009362:	f7fe f95d 	bl	8007620 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009366:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009368:	4618      	mov	r0, r3
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20000e38 	.word	0x20000e38
 8009370:	2000035c 	.word	0x2000035c
 8009374:	20000638 	.word	0x20000638

08009378 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800937c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800937e:	4618      	mov	r0, r3
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
 8009394:	4613      	mov	r3, r2
 8009396:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	2b23      	cmp	r3, #35	; 0x23
 800939c:	d84a      	bhi.n	8009434 <CDC_Control_FS+0xac>
 800939e:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <CDC_Control_FS+0x1c>)
 80093a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a4:	08009435 	.word	0x08009435
 80093a8:	08009435 	.word	0x08009435
 80093ac:	08009435 	.word	0x08009435
 80093b0:	08009435 	.word	0x08009435
 80093b4:	08009435 	.word	0x08009435
 80093b8:	08009435 	.word	0x08009435
 80093bc:	08009435 	.word	0x08009435
 80093c0:	08009435 	.word	0x08009435
 80093c4:	08009435 	.word	0x08009435
 80093c8:	08009435 	.word	0x08009435
 80093cc:	08009435 	.word	0x08009435
 80093d0:	08009435 	.word	0x08009435
 80093d4:	08009435 	.word	0x08009435
 80093d8:	08009435 	.word	0x08009435
 80093dc:	08009435 	.word	0x08009435
 80093e0:	08009435 	.word	0x08009435
 80093e4:	08009435 	.word	0x08009435
 80093e8:	08009435 	.word	0x08009435
 80093ec:	08009435 	.word	0x08009435
 80093f0:	08009435 	.word	0x08009435
 80093f4:	08009435 	.word	0x08009435
 80093f8:	08009435 	.word	0x08009435
 80093fc:	08009435 	.word	0x08009435
 8009400:	08009435 	.word	0x08009435
 8009404:	08009435 	.word	0x08009435
 8009408:	08009435 	.word	0x08009435
 800940c:	08009435 	.word	0x08009435
 8009410:	08009435 	.word	0x08009435
 8009414:	08009435 	.word	0x08009435
 8009418:	08009435 	.word	0x08009435
 800941c:	08009435 	.word	0x08009435
 8009420:	08009435 	.word	0x08009435
 8009424:	08009435 	.word	0x08009435
 8009428:	08009435 	.word	0x08009435
 800942c:	08009435 	.word	0x08009435
 8009430:	08009435 	.word	0x08009435
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009434:	bf00      	nop
  }

  return (USBD_OK);
 8009436:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > 0) {
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d005      	beq.n	8009462 <CDC_Receive_FS+0x1e>
	    usb_cdc_receiveCallback(Buf, *Len);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff febd 	bl	80091dc <usb_cdc_receiveCallback>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	4805      	ldr	r0, [pc, #20]	; (800947c <CDC_Receive_FS+0x38>)
 8009466:	f7fe f8db 	bl	8007620 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800946a:	4804      	ldr	r0, [pc, #16]	; (800947c <CDC_Receive_FS+0x38>)
 800946c:	f7fe f936 	bl	80076dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009470:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	2000035c 	.word	0x2000035c

08009480 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009490:	4b0d      	ldr	r3, [pc, #52]	; (80094c8 <CDC_Transmit_FS+0x48>)
 8009492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009496:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e00b      	b.n	80094be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094a6:	887b      	ldrh	r3, [r7, #2]
 80094a8:	461a      	mov	r2, r3
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	4806      	ldr	r0, [pc, #24]	; (80094c8 <CDC_Transmit_FS+0x48>)
 80094ae:	f7fe f895 	bl	80075dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094b2:	4805      	ldr	r0, [pc, #20]	; (80094c8 <CDC_Transmit_FS+0x48>)
 80094b4:	f7fe f8d2 	bl	800765c <USBD_CDC_TransmitPacket>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	2000035c 	.word	0x2000035c

080094cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b087      	sub	sp, #28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	4613      	mov	r3, r2
 80094d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80094de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	371c      	adds	r7, #28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
	...

080094f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2212      	movs	r2, #18
 8009500:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009502:	4b03      	ldr	r3, [pc, #12]	; (8009510 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	200000cc 	.word	0x200000cc

08009514 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2204      	movs	r2, #4
 8009524:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009526:	4b03      	ldr	r3, [pc, #12]	; (8009534 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009528:	4618      	mov	r0, r3
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	200000ec 	.word	0x200000ec

08009538 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	6039      	str	r1, [r7, #0]
 8009542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009544:	79fb      	ldrb	r3, [r7, #7]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d105      	bne.n	8009556 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4907      	ldr	r1, [pc, #28]	; (800956c <USBD_FS_ProductStrDescriptor+0x34>)
 800954e:	4808      	ldr	r0, [pc, #32]	; (8009570 <USBD_FS_ProductStrDescriptor+0x38>)
 8009550:	f7ff fb3c 	bl	8008bcc <USBD_GetString>
 8009554:	e004      	b.n	8009560 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	4904      	ldr	r1, [pc, #16]	; (800956c <USBD_FS_ProductStrDescriptor+0x34>)
 800955a:	4805      	ldr	r0, [pc, #20]	; (8009570 <USBD_FS_ProductStrDescriptor+0x38>)
 800955c:	f7ff fb36 	bl	8008bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009560:	4b02      	ldr	r3, [pc, #8]	; (800956c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009562:	4618      	mov	r0, r3
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20001638 	.word	0x20001638
 8009570:	0800ae68 	.word	0x0800ae68

08009574 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	6039      	str	r1, [r7, #0]
 800957e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	4904      	ldr	r1, [pc, #16]	; (8009594 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009584:	4804      	ldr	r0, [pc, #16]	; (8009598 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009586:	f7ff fb21 	bl	8008bcc <USBD_GetString>
  return USBD_StrDesc;
 800958a:	4b02      	ldr	r3, [pc, #8]	; (8009594 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20001638 	.word	0x20001638
 8009598:	0800ae80 	.word	0x0800ae80

0800959c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	221a      	movs	r2, #26
 80095ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095ae:	f000 f855 	bl	800965c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095b2:	4b02      	ldr	r3, [pc, #8]	; (80095bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	200000f0 	.word	0x200000f0

080095c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	6039      	str	r1, [r7, #0]
 80095ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d105      	bne.n	80095de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	4907      	ldr	r1, [pc, #28]	; (80095f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095d6:	4808      	ldr	r0, [pc, #32]	; (80095f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095d8:	f7ff faf8 	bl	8008bcc <USBD_GetString>
 80095dc:	e004      	b.n	80095e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	4904      	ldr	r1, [pc, #16]	; (80095f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095e2:	4805      	ldr	r0, [pc, #20]	; (80095f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095e4:	f7ff faf2 	bl	8008bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 80095e8:	4b02      	ldr	r3, [pc, #8]	; (80095f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20001638 	.word	0x20001638
 80095f8:	0800ae94 	.word	0x0800ae94

080095fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	6039      	str	r1, [r7, #0]
 8009606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d105      	bne.n	800961a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	4907      	ldr	r1, [pc, #28]	; (8009630 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009612:	4808      	ldr	r0, [pc, #32]	; (8009634 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009614:	f7ff fada 	bl	8008bcc <USBD_GetString>
 8009618:	e004      	b.n	8009624 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800961a:	683a      	ldr	r2, [r7, #0]
 800961c:	4904      	ldr	r1, [pc, #16]	; (8009630 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800961e:	4805      	ldr	r0, [pc, #20]	; (8009634 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009620:	f7ff fad4 	bl	8008bcc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009624:	4b02      	ldr	r3, [pc, #8]	; (8009630 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20001638 	.word	0x20001638
 8009634:	0800aea0 	.word	0x0800aea0

08009638 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	6039      	str	r1, [r7, #0]
 8009642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	220c      	movs	r2, #12
 8009648:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800964a:	4b03      	ldr	r3, [pc, #12]	; (8009658 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	200000e0 	.word	0x200000e0

0800965c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009662:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <Get_SerialNum+0x44>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009668:	4b0e      	ldr	r3, [pc, #56]	; (80096a4 <Get_SerialNum+0x48>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800966e:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <Get_SerialNum+0x4c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4413      	add	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009682:	2208      	movs	r2, #8
 8009684:	4909      	ldr	r1, [pc, #36]	; (80096ac <Get_SerialNum+0x50>)
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 f814 	bl	80096b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800968c:	2204      	movs	r2, #4
 800968e:	4908      	ldr	r1, [pc, #32]	; (80096b0 <Get_SerialNum+0x54>)
 8009690:	68b8      	ldr	r0, [r7, #8]
 8009692:	f000 f80f 	bl	80096b4 <IntToUnicode>
  }
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	1fff7a10 	.word	0x1fff7a10
 80096a4:	1fff7a14 	.word	0x1fff7a14
 80096a8:	1fff7a18 	.word	0x1fff7a18
 80096ac:	200000f2 	.word	0x200000f2
 80096b0:	20000102 	.word	0x20000102

080096b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	4613      	mov	r3, r2
 80096c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]
 80096ca:	e027      	b.n	800971c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	0f1b      	lsrs	r3, r3, #28
 80096d0:	2b09      	cmp	r3, #9
 80096d2:	d80b      	bhi.n	80096ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	0f1b      	lsrs	r3, r3, #28
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	4619      	mov	r1, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	440b      	add	r3, r1
 80096e4:	3230      	adds	r2, #48	; 0x30
 80096e6:	b2d2      	uxtb	r2, r2
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	e00a      	b.n	8009702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	0f1b      	lsrs	r3, r3, #28
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	005b      	lsls	r3, r3, #1
 80096f6:	4619      	mov	r1, r3
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	440b      	add	r3, r1
 80096fc:	3237      	adds	r2, #55	; 0x37
 80096fe:	b2d2      	uxtb	r2, r2
 8009700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	011b      	lsls	r3, r3, #4
 8009706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	3301      	adds	r3, #1
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	4413      	add	r3, r2
 8009712:	2200      	movs	r2, #0
 8009714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	3301      	adds	r3, #1
 800971a:	75fb      	strb	r3, [r7, #23]
 800971c:	7dfa      	ldrb	r2, [r7, #23]
 800971e:	79fb      	ldrb	r3, [r7, #7]
 8009720:	429a      	cmp	r2, r3
 8009722:	d3d3      	bcc.n	80096cc <IntToUnicode+0x18>
  }
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	371c      	adds	r7, #28
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
	...

08009734 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b0a0      	sub	sp, #128	; 0x80
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800973c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	605a      	str	r2, [r3, #4]
 8009746:	609a      	str	r2, [r3, #8]
 8009748:	60da      	str	r2, [r3, #12]
 800974a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800974c:	f107 0310 	add.w	r3, r7, #16
 8009750:	225c      	movs	r2, #92	; 0x5c
 8009752:	2100      	movs	r1, #0
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fc9a 	bl	800a08e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009762:	d149      	bne.n	80097f8 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009768:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800976a:	2300      	movs	r3, #0
 800976c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800976e:	f107 0310 	add.w	r3, r7, #16
 8009772:	4618      	mov	r0, r3
 8009774:	f7f9 ff54 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800977e:	f7f7 f935 	bl	80009ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	4b1e      	ldr	r3, [pc, #120]	; (8009800 <HAL_PCD_MspInit+0xcc>)
 8009788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978a:	4a1d      	ldr	r2, [pc, #116]	; (8009800 <HAL_PCD_MspInit+0xcc>)
 800978c:	f043 0301 	orr.w	r3, r3, #1
 8009790:	6313      	str	r3, [r2, #48]	; 0x30
 8009792:	4b1b      	ldr	r3, [pc, #108]	; (8009800 <HAL_PCD_MspInit+0xcc>)
 8009794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800979e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80097a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097a4:	2302      	movs	r3, #2
 80097a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a8:	2300      	movs	r3, #0
 80097aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097ac:	2303      	movs	r3, #3
 80097ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80097b0:	230a      	movs	r3, #10
 80097b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80097b8:	4619      	mov	r1, r3
 80097ba:	4812      	ldr	r0, [pc, #72]	; (8009804 <HAL_PCD_MspInit+0xd0>)
 80097bc:	f7f8 f854 	bl	8001868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80097c0:	4b0f      	ldr	r3, [pc, #60]	; (8009800 <HAL_PCD_MspInit+0xcc>)
 80097c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c4:	4a0e      	ldr	r2, [pc, #56]	; (8009800 <HAL_PCD_MspInit+0xcc>)
 80097c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ca:	6353      	str	r3, [r2, #52]	; 0x34
 80097cc:	2300      	movs	r3, #0
 80097ce:	60bb      	str	r3, [r7, #8]
 80097d0:	4b0b      	ldr	r3, [pc, #44]	; (8009800 <HAL_PCD_MspInit+0xcc>)
 80097d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d4:	4a0a      	ldr	r2, [pc, #40]	; (8009800 <HAL_PCD_MspInit+0xcc>)
 80097d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097da:	6453      	str	r3, [r2, #68]	; 0x44
 80097dc:	4b08      	ldr	r3, [pc, #32]	; (8009800 <HAL_PCD_MspInit+0xcc>)
 80097de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097e4:	60bb      	str	r3, [r7, #8]
 80097e6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097e8:	2200      	movs	r2, #0
 80097ea:	2100      	movs	r1, #0
 80097ec:	2043      	movs	r0, #67	; 0x43
 80097ee:	f7f7 ff72 	bl	80016d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097f2:	2043      	movs	r0, #67	; 0x43
 80097f4:	f7f7 ff8b 	bl	800170e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097f8:	bf00      	nop
 80097fa:	3780      	adds	r7, #128	; 0x80
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	40023800 	.word	0x40023800
 8009804:	40020000 	.word	0x40020000

08009808 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7fe f845 	bl	80078ae <USBD_LL_SetupStage>
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800983e:	78fa      	ldrb	r2, [r7, #3]
 8009840:	6879      	ldr	r1, [r7, #4]
 8009842:	4613      	mov	r3, r2
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	4413      	add	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	440b      	add	r3, r1
 800984c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	4619      	mov	r1, r3
 8009856:	f7fe f87f 	bl	8007958 <USBD_LL_DataOutStage>
}
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	460b      	mov	r3, r1
 800986c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	6879      	ldr	r1, [r7, #4]
 8009878:	4613      	mov	r3, r2
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	4413      	add	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	440b      	add	r3, r1
 8009882:	3320      	adds	r3, #32
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	78fb      	ldrb	r3, [r7, #3]
 8009888:	4619      	mov	r1, r3
 800988a:	f7fe f918 	bl	8007abe <USBD_LL_DataInStage>
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fa52 	bl	8007d4e <USBD_LL_SOF>
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098ba:	2301      	movs	r3, #1
 80098bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	79db      	ldrb	r3, [r3, #7]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d102      	bne.n	80098cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
 80098ca:	e008      	b.n	80098de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	79db      	ldrb	r3, [r3, #7]
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d102      	bne.n	80098da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80098d4:	2301      	movs	r3, #1
 80098d6:	73fb      	strb	r3, [r7, #15]
 80098d8:	e001      	b.n	80098de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80098da:	f7f7 f887 	bl	80009ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80098e4:	7bfa      	ldrb	r2, [r7, #15]
 80098e6:	4611      	mov	r1, r2
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe f9ec 	bl	8007cc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe f994 	bl	8007c22 <USBD_LL_Reset>
}
 80098fa:	bf00      	nop
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe f9e7 	bl	8007ce6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6812      	ldr	r2, [r2, #0]
 8009926:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	7adb      	ldrb	r3, [r3, #11]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d005      	beq.n	8009944 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009938:	4b04      	ldr	r3, [pc, #16]	; (800994c <HAL_PCD_SuspendCallback+0x48>)
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	4a03      	ldr	r2, [pc, #12]	; (800994c <HAL_PCD_SuspendCallback+0x48>)
 800993e:	f043 0306 	orr.w	r3, r3, #6
 8009942:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009944:	bf00      	nop
 8009946:	3708      	adds	r7, #8
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	e000ed00 	.word	0xe000ed00

08009950 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800995e:	4618      	mov	r0, r3
 8009960:	f7fe f9dd 	bl	8007d1e <USBD_LL_Resume>
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800997e:	78fa      	ldrb	r2, [r7, #3]
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe fa35 	bl	8007df2 <USBD_LL_IsoOUTIncomplete>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	4611      	mov	r1, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe f9f1 	bl	8007d8e <USBD_LL_IsoINIncomplete>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fa47 	bl	8007e56 <USBD_LL_DevConnected>
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fa44 	bl	8007e6c <USBD_LL_DevDisconnected>
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d13c      	bne.n	8009a76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80099fc:	4a20      	ldr	r2, [pc, #128]	; (8009a80 <USBD_LL_Init+0x94>)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a1e      	ldr	r2, [pc, #120]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a0c:	4b1c      	ldr	r3, [pc, #112]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009a14:	4b1a      	ldr	r3, [pc, #104]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a16:	2206      	movs	r2, #6
 8009a18:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a1a:	4b19      	ldr	r3, [pc, #100]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a20:	4b17      	ldr	r3, [pc, #92]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a26:	4b16      	ldr	r3, [pc, #88]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a28:	2202      	movs	r2, #2
 8009a2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a2c:	4b14      	ldr	r3, [pc, #80]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a32:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a38:	4b11      	ldr	r3, [pc, #68]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a3e:	4b10      	ldr	r3, [pc, #64]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a44:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a4a:	480d      	ldr	r0, [pc, #52]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a4c:	f7f8 fa30 	bl	8001eb0 <HAL_PCD_Init>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009a56:	f7f6 ffc9 	bl	80009ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a5a:	2180      	movs	r1, #128	; 0x80
 8009a5c:	4808      	ldr	r0, [pc, #32]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a5e:	f7f9 fc90 	bl	8003382 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a62:	2240      	movs	r2, #64	; 0x40
 8009a64:	2100      	movs	r1, #0
 8009a66:	4806      	ldr	r0, [pc, #24]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a68:	f7f9 fc44 	bl	80032f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a6c:	2280      	movs	r2, #128	; 0x80
 8009a6e:	2101      	movs	r1, #1
 8009a70:	4803      	ldr	r0, [pc, #12]	; (8009a80 <USBD_LL_Init+0x94>)
 8009a72:	f7f9 fc3f 	bl	80032f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	20001838 	.word	0x20001838

08009a84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f8 fb1e 	bl	80020dc <HAL_PCD_Start>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 f990 	bl	8009dcc <USBD_Get_USB_Status>
 8009aac:	4603      	mov	r3, r0
 8009aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	4608      	mov	r0, r1
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4603      	mov	r3, r0
 8009aca:	70fb      	strb	r3, [r7, #3]
 8009acc:	460b      	mov	r3, r1
 8009ace:	70bb      	strb	r3, [r7, #2]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ae2:	78bb      	ldrb	r3, [r7, #2]
 8009ae4:	883a      	ldrh	r2, [r7, #0]
 8009ae6:	78f9      	ldrb	r1, [r7, #3]
 8009ae8:	f7f9 f81f 	bl	8002b2a <HAL_PCD_EP_Open>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 f96a 	bl	8009dcc <USBD_Get_USB_Status>
 8009af8:	4603      	mov	r3, r0
 8009afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b20:	78fa      	ldrb	r2, [r7, #3]
 8009b22:	4611      	mov	r1, r2
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7f9 f86a 	bl	8002bfe <HAL_PCD_EP_Close>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 f94b 	bl	8009dcc <USBD_Get_USB_Status>
 8009b36:	4603      	mov	r3, r0
 8009b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	4611      	mov	r1, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7f9 f922 	bl	8002dac <HAL_PCD_EP_SetStall>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 f92c 	bl	8009dcc <USBD_Get_USB_Status>
 8009b74:	4603      	mov	r3, r0
 8009b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b9c:	78fa      	ldrb	r2, [r7, #3]
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7f9 f966 	bl	8002e72 <HAL_PCD_EP_ClrStall>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 f90d 	bl	8009dcc <USBD_Get_USB_Status>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	da0b      	bge.n	8009bf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009bdc:	78fb      	ldrb	r3, [r7, #3]
 8009bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009be2:	68f9      	ldr	r1, [r7, #12]
 8009be4:	4613      	mov	r3, r2
 8009be6:	00db      	lsls	r3, r3, #3
 8009be8:	4413      	add	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	440b      	add	r3, r1
 8009bee:	3316      	adds	r3, #22
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	e00b      	b.n	8009c0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009bfa:	68f9      	ldr	r1, [r7, #12]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	440b      	add	r3, r1
 8009c06:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009c0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3714      	adds	r7, #20
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f8 ff53 	bl	8002ae2 <HAL_PCD_SetAddress>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f8c2 	bl	8009dcc <USBD_Get_USB_Status>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b086      	sub	sp, #24
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	60f8      	str	r0, [r7, #12]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
 8009c62:	460b      	mov	r3, r1
 8009c64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c74:	7af9      	ldrb	r1, [r7, #11]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	f7f9 f85d 	bl	8002d38 <HAL_PCD_EP_Transmit>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 f8a1 	bl	8009dcc <USBD_Get_USB_Status>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3718      	adds	r7, #24
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b086      	sub	sp, #24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	607a      	str	r2, [r7, #4]
 8009ca2:	603b      	str	r3, [r7, #0]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cac:	2300      	movs	r3, #0
 8009cae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009cb6:	7af9      	ldrb	r1, [r7, #11]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	f7f8 ffe9 	bl	8002c92 <HAL_PCD_EP_Receive>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cc4:	7dfb      	ldrb	r3, [r7, #23]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 f880 	bl	8009dcc <USBD_Get_USB_Status>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cd0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	4611      	mov	r1, r2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7f9 f809 	bl	8002d08 <HAL_PCD_EP_GetRxCount>
 8009cf6:	4603      	mov	r3, r0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009d0c:	78fb      	ldrb	r3, [r7, #3]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <HAL_PCDEx_LPM_Callback+0x18>
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d01f      	beq.n	8009d56 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009d16:	e03b      	b.n	8009d90 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	7adb      	ldrb	r3, [r3, #11]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d007      	beq.n	8009d30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009d20:	f7f6 fc72 	bl	8000608 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d24:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <HAL_PCDEx_LPM_Callback+0x98>)
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	4a1b      	ldr	r2, [pc, #108]	; (8009d98 <HAL_PCDEx_LPM_Callback+0x98>)
 8009d2a:	f023 0306 	bic.w	r3, r3, #6
 8009d2e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	6812      	ldr	r2, [r2, #0]
 8009d3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d42:	f023 0301 	bic.w	r3, r3, #1
 8009d46:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7fd ffe5 	bl	8007d1e <USBD_LL_Resume>
    break;
 8009d54:	e01c      	b.n	8009d90 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	6812      	ldr	r2, [r2, #0]
 8009d64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d68:	f043 0301 	orr.w	r3, r3, #1
 8009d6c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fd ffb6 	bl	8007ce6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7adb      	ldrb	r3, [r3, #11]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d005      	beq.n	8009d8e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <HAL_PCDEx_LPM_Callback+0x98>)
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	4a04      	ldr	r2, [pc, #16]	; (8009d98 <HAL_PCDEx_LPM_Callback+0x98>)
 8009d88:	f043 0306 	orr.w	r3, r3, #6
 8009d8c:	6113      	str	r3, [r2, #16]
    break;
 8009d8e:	bf00      	nop
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	e000ed00 	.word	0xe000ed00

08009d9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009da4:	4b03      	ldr	r3, [pc, #12]	; (8009db4 <USBD_static_malloc+0x18>)
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	20001d1c 	.word	0x20001d1c

08009db8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]

}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009dda:	79fb      	ldrb	r3, [r7, #7]
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d817      	bhi.n	8009e10 <USBD_Get_USB_Status+0x44>
 8009de0:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <USBD_Get_USB_Status+0x1c>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009df9 	.word	0x08009df9
 8009dec:	08009dff 	.word	0x08009dff
 8009df0:	08009e05 	.word	0x08009e05
 8009df4:	08009e0b 	.word	0x08009e0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009dfc:	e00b      	b.n	8009e16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	73fb      	strb	r3, [r7, #15]
    break;
 8009e02:	e008      	b.n	8009e16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e04:	2301      	movs	r3, #1
 8009e06:	73fb      	strb	r3, [r7, #15]
    break;
 8009e08:	e005      	b.n	8009e16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0e:	e002      	b.n	8009e16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e10:	2303      	movs	r3, #3
 8009e12:	73fb      	strb	r3, [r7, #15]
    break;
 8009e14:	bf00      	nop
  }
  return usb_status;
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <__assert_func>:
 8009e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e26:	4614      	mov	r4, r2
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <__assert_func+0x2c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4605      	mov	r5, r0
 8009e30:	68d8      	ldr	r0, [r3, #12]
 8009e32:	b14c      	cbz	r4, 8009e48 <__assert_func+0x24>
 8009e34:	4b07      	ldr	r3, [pc, #28]	; (8009e54 <__assert_func+0x30>)
 8009e36:	9100      	str	r1, [sp, #0]
 8009e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e3c:	4906      	ldr	r1, [pc, #24]	; (8009e58 <__assert_func+0x34>)
 8009e3e:	462b      	mov	r3, r5
 8009e40:	f000 f8b2 	bl	8009fa8 <fiprintf>
 8009e44:	f000 f9ad 	bl	800a1a2 <abort>
 8009e48:	4b04      	ldr	r3, [pc, #16]	; (8009e5c <__assert_func+0x38>)
 8009e4a:	461c      	mov	r4, r3
 8009e4c:	e7f3      	b.n	8009e36 <__assert_func+0x12>
 8009e4e:	bf00      	nop
 8009e50:	20000164 	.word	0x20000164
 8009e54:	0800aede 	.word	0x0800aede
 8009e58:	0800aeeb 	.word	0x0800aeeb
 8009e5c:	0800af19 	.word	0x0800af19

08009e60 <std>:
 8009e60:	2300      	movs	r3, #0
 8009e62:	b510      	push	{r4, lr}
 8009e64:	4604      	mov	r4, r0
 8009e66:	e9c0 3300 	strd	r3, r3, [r0]
 8009e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e6e:	6083      	str	r3, [r0, #8]
 8009e70:	8181      	strh	r1, [r0, #12]
 8009e72:	6643      	str	r3, [r0, #100]	; 0x64
 8009e74:	81c2      	strh	r2, [r0, #14]
 8009e76:	6183      	str	r3, [r0, #24]
 8009e78:	4619      	mov	r1, r3
 8009e7a:	2208      	movs	r2, #8
 8009e7c:	305c      	adds	r0, #92	; 0x5c
 8009e7e:	f000 f906 	bl	800a08e <memset>
 8009e82:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <std+0x58>)
 8009e84:	6263      	str	r3, [r4, #36]	; 0x24
 8009e86:	4b0d      	ldr	r3, [pc, #52]	; (8009ebc <std+0x5c>)
 8009e88:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <std+0x60>)
 8009e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <std+0x64>)
 8009e90:	6323      	str	r3, [r4, #48]	; 0x30
 8009e92:	4b0d      	ldr	r3, [pc, #52]	; (8009ec8 <std+0x68>)
 8009e94:	6224      	str	r4, [r4, #32]
 8009e96:	429c      	cmp	r4, r3
 8009e98:	d006      	beq.n	8009ea8 <std+0x48>
 8009e9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009e9e:	4294      	cmp	r4, r2
 8009ea0:	d002      	beq.n	8009ea8 <std+0x48>
 8009ea2:	33d0      	adds	r3, #208	; 0xd0
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	d105      	bne.n	8009eb4 <std+0x54>
 8009ea8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eb0:	f000 b966 	b.w	800a180 <__retarget_lock_init_recursive>
 8009eb4:	bd10      	pop	{r4, pc}
 8009eb6:	bf00      	nop
 8009eb8:	0800a009 	.word	0x0800a009
 8009ebc:	0800a02b 	.word	0x0800a02b
 8009ec0:	0800a063 	.word	0x0800a063
 8009ec4:	0800a087 	.word	0x0800a087
 8009ec8:	20001f3c 	.word	0x20001f3c

08009ecc <stdio_exit_handler>:
 8009ecc:	4a02      	ldr	r2, [pc, #8]	; (8009ed8 <stdio_exit_handler+0xc>)
 8009ece:	4903      	ldr	r1, [pc, #12]	; (8009edc <stdio_exit_handler+0x10>)
 8009ed0:	4803      	ldr	r0, [pc, #12]	; (8009ee0 <stdio_exit_handler+0x14>)
 8009ed2:	f000 b87b 	b.w	8009fcc <_fwalk_sglue>
 8009ed6:	bf00      	nop
 8009ed8:	2000010c 	.word	0x2000010c
 8009edc:	0800aa55 	.word	0x0800aa55
 8009ee0:	20000118 	.word	0x20000118

08009ee4 <cleanup_stdio>:
 8009ee4:	6841      	ldr	r1, [r0, #4]
 8009ee6:	4b0c      	ldr	r3, [pc, #48]	; (8009f18 <cleanup_stdio+0x34>)
 8009ee8:	4299      	cmp	r1, r3
 8009eea:	b510      	push	{r4, lr}
 8009eec:	4604      	mov	r4, r0
 8009eee:	d001      	beq.n	8009ef4 <cleanup_stdio+0x10>
 8009ef0:	f000 fdb0 	bl	800aa54 <_fflush_r>
 8009ef4:	68a1      	ldr	r1, [r4, #8]
 8009ef6:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <cleanup_stdio+0x38>)
 8009ef8:	4299      	cmp	r1, r3
 8009efa:	d002      	beq.n	8009f02 <cleanup_stdio+0x1e>
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 fda9 	bl	800aa54 <_fflush_r>
 8009f02:	68e1      	ldr	r1, [r4, #12]
 8009f04:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <cleanup_stdio+0x3c>)
 8009f06:	4299      	cmp	r1, r3
 8009f08:	d004      	beq.n	8009f14 <cleanup_stdio+0x30>
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f10:	f000 bda0 	b.w	800aa54 <_fflush_r>
 8009f14:	bd10      	pop	{r4, pc}
 8009f16:	bf00      	nop
 8009f18:	20001f3c 	.word	0x20001f3c
 8009f1c:	20001fa4 	.word	0x20001fa4
 8009f20:	2000200c 	.word	0x2000200c

08009f24 <global_stdio_init.part.0>:
 8009f24:	b510      	push	{r4, lr}
 8009f26:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <global_stdio_init.part.0+0x30>)
 8009f28:	4c0b      	ldr	r4, [pc, #44]	; (8009f58 <global_stdio_init.part.0+0x34>)
 8009f2a:	4a0c      	ldr	r2, [pc, #48]	; (8009f5c <global_stdio_init.part.0+0x38>)
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	4620      	mov	r0, r4
 8009f30:	2200      	movs	r2, #0
 8009f32:	2104      	movs	r1, #4
 8009f34:	f7ff ff94 	bl	8009e60 <std>
 8009f38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	2109      	movs	r1, #9
 8009f40:	f7ff ff8e 	bl	8009e60 <std>
 8009f44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009f48:	2202      	movs	r2, #2
 8009f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f4e:	2112      	movs	r1, #18
 8009f50:	f7ff bf86 	b.w	8009e60 <std>
 8009f54:	20002074 	.word	0x20002074
 8009f58:	20001f3c 	.word	0x20001f3c
 8009f5c:	08009ecd 	.word	0x08009ecd

08009f60 <__sfp_lock_acquire>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__sfp_lock_acquire+0x8>)
 8009f62:	f000 b90e 	b.w	800a182 <__retarget_lock_acquire_recursive>
 8009f66:	bf00      	nop
 8009f68:	2000207d 	.word	0x2000207d

08009f6c <__sfp_lock_release>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	; (8009f74 <__sfp_lock_release+0x8>)
 8009f6e:	f000 b909 	b.w	800a184 <__retarget_lock_release_recursive>
 8009f72:	bf00      	nop
 8009f74:	2000207d 	.word	0x2000207d

08009f78 <__sinit>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	f7ff fff0 	bl	8009f60 <__sfp_lock_acquire>
 8009f80:	6a23      	ldr	r3, [r4, #32]
 8009f82:	b11b      	cbz	r3, 8009f8c <__sinit+0x14>
 8009f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f88:	f7ff bff0 	b.w	8009f6c <__sfp_lock_release>
 8009f8c:	4b04      	ldr	r3, [pc, #16]	; (8009fa0 <__sinit+0x28>)
 8009f8e:	6223      	str	r3, [r4, #32]
 8009f90:	4b04      	ldr	r3, [pc, #16]	; (8009fa4 <__sinit+0x2c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1f5      	bne.n	8009f84 <__sinit+0xc>
 8009f98:	f7ff ffc4 	bl	8009f24 <global_stdio_init.part.0>
 8009f9c:	e7f2      	b.n	8009f84 <__sinit+0xc>
 8009f9e:	bf00      	nop
 8009fa0:	08009ee5 	.word	0x08009ee5
 8009fa4:	20002074 	.word	0x20002074

08009fa8 <fiprintf>:
 8009fa8:	b40e      	push	{r1, r2, r3}
 8009faa:	b503      	push	{r0, r1, lr}
 8009fac:	4601      	mov	r1, r0
 8009fae:	ab03      	add	r3, sp, #12
 8009fb0:	4805      	ldr	r0, [pc, #20]	; (8009fc8 <fiprintf+0x20>)
 8009fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb6:	6800      	ldr	r0, [r0, #0]
 8009fb8:	9301      	str	r3, [sp, #4]
 8009fba:	f000 fa1b 	bl	800a3f4 <_vfiprintf_r>
 8009fbe:	b002      	add	sp, #8
 8009fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fc4:	b003      	add	sp, #12
 8009fc6:	4770      	bx	lr
 8009fc8:	20000164 	.word	0x20000164

08009fcc <_fwalk_sglue>:
 8009fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd0:	4607      	mov	r7, r0
 8009fd2:	4688      	mov	r8, r1
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	2600      	movs	r6, #0
 8009fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8009fe0:	d505      	bpl.n	8009fee <_fwalk_sglue+0x22>
 8009fe2:	6824      	ldr	r4, [r4, #0]
 8009fe4:	2c00      	cmp	r4, #0
 8009fe6:	d1f7      	bne.n	8009fd8 <_fwalk_sglue+0xc>
 8009fe8:	4630      	mov	r0, r6
 8009fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fee:	89ab      	ldrh	r3, [r5, #12]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d907      	bls.n	800a004 <_fwalk_sglue+0x38>
 8009ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	d003      	beq.n	800a004 <_fwalk_sglue+0x38>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4638      	mov	r0, r7
 800a000:	47c0      	blx	r8
 800a002:	4306      	orrs	r6, r0
 800a004:	3568      	adds	r5, #104	; 0x68
 800a006:	e7e9      	b.n	8009fdc <_fwalk_sglue+0x10>

0800a008 <__sread>:
 800a008:	b510      	push	{r4, lr}
 800a00a:	460c      	mov	r4, r1
 800a00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a010:	f000 f868 	bl	800a0e4 <_read_r>
 800a014:	2800      	cmp	r0, #0
 800a016:	bfab      	itete	ge
 800a018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a01a:	89a3      	ldrhlt	r3, [r4, #12]
 800a01c:	181b      	addge	r3, r3, r0
 800a01e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a022:	bfac      	ite	ge
 800a024:	6563      	strge	r3, [r4, #84]	; 0x54
 800a026:	81a3      	strhlt	r3, [r4, #12]
 800a028:	bd10      	pop	{r4, pc}

0800a02a <__swrite>:
 800a02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02e:	461f      	mov	r7, r3
 800a030:	898b      	ldrh	r3, [r1, #12]
 800a032:	05db      	lsls	r3, r3, #23
 800a034:	4605      	mov	r5, r0
 800a036:	460c      	mov	r4, r1
 800a038:	4616      	mov	r6, r2
 800a03a:	d505      	bpl.n	800a048 <__swrite+0x1e>
 800a03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a040:	2302      	movs	r3, #2
 800a042:	2200      	movs	r2, #0
 800a044:	f000 f83c 	bl	800a0c0 <_lseek_r>
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a04e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	4632      	mov	r2, r6
 800a056:	463b      	mov	r3, r7
 800a058:	4628      	mov	r0, r5
 800a05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a05e:	f000 b853 	b.w	800a108 <_write_r>

0800a062 <__sseek>:
 800a062:	b510      	push	{r4, lr}
 800a064:	460c      	mov	r4, r1
 800a066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06a:	f000 f829 	bl	800a0c0 <_lseek_r>
 800a06e:	1c43      	adds	r3, r0, #1
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	bf15      	itete	ne
 800a074:	6560      	strne	r0, [r4, #84]	; 0x54
 800a076:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a07a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a07e:	81a3      	strheq	r3, [r4, #12]
 800a080:	bf18      	it	ne
 800a082:	81a3      	strhne	r3, [r4, #12]
 800a084:	bd10      	pop	{r4, pc}

0800a086 <__sclose>:
 800a086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a08a:	f000 b809 	b.w	800a0a0 <_close_r>

0800a08e <memset>:
 800a08e:	4402      	add	r2, r0
 800a090:	4603      	mov	r3, r0
 800a092:	4293      	cmp	r3, r2
 800a094:	d100      	bne.n	800a098 <memset+0xa>
 800a096:	4770      	bx	lr
 800a098:	f803 1b01 	strb.w	r1, [r3], #1
 800a09c:	e7f9      	b.n	800a092 <memset+0x4>
	...

0800a0a0 <_close_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d06      	ldr	r5, [pc, #24]	; (800a0bc <_close_r+0x1c>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	602b      	str	r3, [r5, #0]
 800a0ac:	f7f6 fe89 	bl	8000dc2 <_close>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_close_r+0x1a>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_close_r+0x1a>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20002078 	.word	0x20002078

0800a0c0 <_lseek_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d07      	ldr	r5, [pc, #28]	; (800a0e0 <_lseek_r+0x20>)
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	602a      	str	r2, [r5, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f7f6 fe9e 	bl	8000e10 <_lseek>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	d102      	bne.n	800a0de <_lseek_r+0x1e>
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	b103      	cbz	r3, 800a0de <_lseek_r+0x1e>
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	20002078 	.word	0x20002078

0800a0e4 <_read_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d07      	ldr	r5, [pc, #28]	; (800a104 <_read_r+0x20>)
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	4608      	mov	r0, r1
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	602a      	str	r2, [r5, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f7f6 fe2c 	bl	8000d50 <_read>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_read_r+0x1e>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_read_r+0x1e>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20002078 	.word	0x20002078

0800a108 <_write_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d07      	ldr	r5, [pc, #28]	; (800a128 <_write_r+0x20>)
 800a10c:	4604      	mov	r4, r0
 800a10e:	4608      	mov	r0, r1
 800a110:	4611      	mov	r1, r2
 800a112:	2200      	movs	r2, #0
 800a114:	602a      	str	r2, [r5, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	f7f6 fe37 	bl	8000d8a <_write>
 800a11c:	1c43      	adds	r3, r0, #1
 800a11e:	d102      	bne.n	800a126 <_write_r+0x1e>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	b103      	cbz	r3, 800a126 <_write_r+0x1e>
 800a124:	6023      	str	r3, [r4, #0]
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	20002078 	.word	0x20002078

0800a12c <__errno>:
 800a12c:	4b01      	ldr	r3, [pc, #4]	; (800a134 <__errno+0x8>)
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20000164 	.word	0x20000164

0800a138 <__libc_init_array>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	4d0d      	ldr	r5, [pc, #52]	; (800a170 <__libc_init_array+0x38>)
 800a13c:	4c0d      	ldr	r4, [pc, #52]	; (800a174 <__libc_init_array+0x3c>)
 800a13e:	1b64      	subs	r4, r4, r5
 800a140:	10a4      	asrs	r4, r4, #2
 800a142:	2600      	movs	r6, #0
 800a144:	42a6      	cmp	r6, r4
 800a146:	d109      	bne.n	800a15c <__libc_init_array+0x24>
 800a148:	4d0b      	ldr	r5, [pc, #44]	; (800a178 <__libc_init_array+0x40>)
 800a14a:	4c0c      	ldr	r4, [pc, #48]	; (800a17c <__libc_init_array+0x44>)
 800a14c:	f000 fe18 	bl	800ad80 <_init>
 800a150:	1b64      	subs	r4, r4, r5
 800a152:	10a4      	asrs	r4, r4, #2
 800a154:	2600      	movs	r6, #0
 800a156:	42a6      	cmp	r6, r4
 800a158:	d105      	bne.n	800a166 <__libc_init_array+0x2e>
 800a15a:	bd70      	pop	{r4, r5, r6, pc}
 800a15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a160:	4798      	blx	r3
 800a162:	3601      	adds	r6, #1
 800a164:	e7ee      	b.n	800a144 <__libc_init_array+0xc>
 800a166:	f855 3b04 	ldr.w	r3, [r5], #4
 800a16a:	4798      	blx	r3
 800a16c:	3601      	adds	r6, #1
 800a16e:	e7f2      	b.n	800a156 <__libc_init_array+0x1e>
 800a170:	0800af58 	.word	0x0800af58
 800a174:	0800af58 	.word	0x0800af58
 800a178:	0800af58 	.word	0x0800af58
 800a17c:	0800af5c 	.word	0x0800af5c

0800a180 <__retarget_lock_init_recursive>:
 800a180:	4770      	bx	lr

0800a182 <__retarget_lock_acquire_recursive>:
 800a182:	4770      	bx	lr

0800a184 <__retarget_lock_release_recursive>:
 800a184:	4770      	bx	lr

0800a186 <memcpy>:
 800a186:	440a      	add	r2, r1
 800a188:	4291      	cmp	r1, r2
 800a18a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a18e:	d100      	bne.n	800a192 <memcpy+0xc>
 800a190:	4770      	bx	lr
 800a192:	b510      	push	{r4, lr}
 800a194:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a19c:	4291      	cmp	r1, r2
 800a19e:	d1f9      	bne.n	800a194 <memcpy+0xe>
 800a1a0:	bd10      	pop	{r4, pc}

0800a1a2 <abort>:
 800a1a2:	b508      	push	{r3, lr}
 800a1a4:	2006      	movs	r0, #6
 800a1a6:	f000 fd3b 	bl	800ac20 <raise>
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	f7f6 fdc6 	bl	8000d3c <_exit>

0800a1b0 <_free_r>:
 800a1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1b2:	2900      	cmp	r1, #0
 800a1b4:	d044      	beq.n	800a240 <_free_r+0x90>
 800a1b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ba:	9001      	str	r0, [sp, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f1a1 0404 	sub.w	r4, r1, #4
 800a1c2:	bfb8      	it	lt
 800a1c4:	18e4      	addlt	r4, r4, r3
 800a1c6:	f000 f8df 	bl	800a388 <__malloc_lock>
 800a1ca:	4a1e      	ldr	r2, [pc, #120]	; (800a244 <_free_r+0x94>)
 800a1cc:	9801      	ldr	r0, [sp, #4]
 800a1ce:	6813      	ldr	r3, [r2, #0]
 800a1d0:	b933      	cbnz	r3, 800a1e0 <_free_r+0x30>
 800a1d2:	6063      	str	r3, [r4, #4]
 800a1d4:	6014      	str	r4, [r2, #0]
 800a1d6:	b003      	add	sp, #12
 800a1d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1dc:	f000 b8da 	b.w	800a394 <__malloc_unlock>
 800a1e0:	42a3      	cmp	r3, r4
 800a1e2:	d908      	bls.n	800a1f6 <_free_r+0x46>
 800a1e4:	6825      	ldr	r5, [r4, #0]
 800a1e6:	1961      	adds	r1, r4, r5
 800a1e8:	428b      	cmp	r3, r1
 800a1ea:	bf01      	itttt	eq
 800a1ec:	6819      	ldreq	r1, [r3, #0]
 800a1ee:	685b      	ldreq	r3, [r3, #4]
 800a1f0:	1949      	addeq	r1, r1, r5
 800a1f2:	6021      	streq	r1, [r4, #0]
 800a1f4:	e7ed      	b.n	800a1d2 <_free_r+0x22>
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	b10b      	cbz	r3, 800a200 <_free_r+0x50>
 800a1fc:	42a3      	cmp	r3, r4
 800a1fe:	d9fa      	bls.n	800a1f6 <_free_r+0x46>
 800a200:	6811      	ldr	r1, [r2, #0]
 800a202:	1855      	adds	r5, r2, r1
 800a204:	42a5      	cmp	r5, r4
 800a206:	d10b      	bne.n	800a220 <_free_r+0x70>
 800a208:	6824      	ldr	r4, [r4, #0]
 800a20a:	4421      	add	r1, r4
 800a20c:	1854      	adds	r4, r2, r1
 800a20e:	42a3      	cmp	r3, r4
 800a210:	6011      	str	r1, [r2, #0]
 800a212:	d1e0      	bne.n	800a1d6 <_free_r+0x26>
 800a214:	681c      	ldr	r4, [r3, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	6053      	str	r3, [r2, #4]
 800a21a:	440c      	add	r4, r1
 800a21c:	6014      	str	r4, [r2, #0]
 800a21e:	e7da      	b.n	800a1d6 <_free_r+0x26>
 800a220:	d902      	bls.n	800a228 <_free_r+0x78>
 800a222:	230c      	movs	r3, #12
 800a224:	6003      	str	r3, [r0, #0]
 800a226:	e7d6      	b.n	800a1d6 <_free_r+0x26>
 800a228:	6825      	ldr	r5, [r4, #0]
 800a22a:	1961      	adds	r1, r4, r5
 800a22c:	428b      	cmp	r3, r1
 800a22e:	bf04      	itt	eq
 800a230:	6819      	ldreq	r1, [r3, #0]
 800a232:	685b      	ldreq	r3, [r3, #4]
 800a234:	6063      	str	r3, [r4, #4]
 800a236:	bf04      	itt	eq
 800a238:	1949      	addeq	r1, r1, r5
 800a23a:	6021      	streq	r1, [r4, #0]
 800a23c:	6054      	str	r4, [r2, #4]
 800a23e:	e7ca      	b.n	800a1d6 <_free_r+0x26>
 800a240:	b003      	add	sp, #12
 800a242:	bd30      	pop	{r4, r5, pc}
 800a244:	20002080 	.word	0x20002080

0800a248 <sbrk_aligned>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	4e0e      	ldr	r6, [pc, #56]	; (800a284 <sbrk_aligned+0x3c>)
 800a24c:	460c      	mov	r4, r1
 800a24e:	6831      	ldr	r1, [r6, #0]
 800a250:	4605      	mov	r5, r0
 800a252:	b911      	cbnz	r1, 800a25a <sbrk_aligned+0x12>
 800a254:	f000 fd00 	bl	800ac58 <_sbrk_r>
 800a258:	6030      	str	r0, [r6, #0]
 800a25a:	4621      	mov	r1, r4
 800a25c:	4628      	mov	r0, r5
 800a25e:	f000 fcfb 	bl	800ac58 <_sbrk_r>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	d00a      	beq.n	800a27c <sbrk_aligned+0x34>
 800a266:	1cc4      	adds	r4, r0, #3
 800a268:	f024 0403 	bic.w	r4, r4, #3
 800a26c:	42a0      	cmp	r0, r4
 800a26e:	d007      	beq.n	800a280 <sbrk_aligned+0x38>
 800a270:	1a21      	subs	r1, r4, r0
 800a272:	4628      	mov	r0, r5
 800a274:	f000 fcf0 	bl	800ac58 <_sbrk_r>
 800a278:	3001      	adds	r0, #1
 800a27a:	d101      	bne.n	800a280 <sbrk_aligned+0x38>
 800a27c:	f04f 34ff 	mov.w	r4, #4294967295
 800a280:	4620      	mov	r0, r4
 800a282:	bd70      	pop	{r4, r5, r6, pc}
 800a284:	20002084 	.word	0x20002084

0800a288 <_malloc_r>:
 800a288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a28c:	1ccd      	adds	r5, r1, #3
 800a28e:	f025 0503 	bic.w	r5, r5, #3
 800a292:	3508      	adds	r5, #8
 800a294:	2d0c      	cmp	r5, #12
 800a296:	bf38      	it	cc
 800a298:	250c      	movcc	r5, #12
 800a29a:	2d00      	cmp	r5, #0
 800a29c:	4607      	mov	r7, r0
 800a29e:	db01      	blt.n	800a2a4 <_malloc_r+0x1c>
 800a2a0:	42a9      	cmp	r1, r5
 800a2a2:	d905      	bls.n	800a2b0 <_malloc_r+0x28>
 800a2a4:	230c      	movs	r3, #12
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	2600      	movs	r6, #0
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a384 <_malloc_r+0xfc>
 800a2b4:	f000 f868 	bl	800a388 <__malloc_lock>
 800a2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2bc:	461c      	mov	r4, r3
 800a2be:	bb5c      	cbnz	r4, 800a318 <_malloc_r+0x90>
 800a2c0:	4629      	mov	r1, r5
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	f7ff ffc0 	bl	800a248 <sbrk_aligned>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	d155      	bne.n	800a37a <_malloc_r+0xf2>
 800a2ce:	f8d8 4000 	ldr.w	r4, [r8]
 800a2d2:	4626      	mov	r6, r4
 800a2d4:	2e00      	cmp	r6, #0
 800a2d6:	d145      	bne.n	800a364 <_malloc_r+0xdc>
 800a2d8:	2c00      	cmp	r4, #0
 800a2da:	d048      	beq.n	800a36e <_malloc_r+0xe6>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	4631      	mov	r1, r6
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	eb04 0903 	add.w	r9, r4, r3
 800a2e6:	f000 fcb7 	bl	800ac58 <_sbrk_r>
 800a2ea:	4581      	cmp	r9, r0
 800a2ec:	d13f      	bne.n	800a36e <_malloc_r+0xe6>
 800a2ee:	6821      	ldr	r1, [r4, #0]
 800a2f0:	1a6d      	subs	r5, r5, r1
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	f7ff ffa7 	bl	800a248 <sbrk_aligned>
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	d037      	beq.n	800a36e <_malloc_r+0xe6>
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	442b      	add	r3, r5
 800a302:	6023      	str	r3, [r4, #0]
 800a304:	f8d8 3000 	ldr.w	r3, [r8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d038      	beq.n	800a37e <_malloc_r+0xf6>
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	42a2      	cmp	r2, r4
 800a310:	d12b      	bne.n	800a36a <_malloc_r+0xe2>
 800a312:	2200      	movs	r2, #0
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	e00f      	b.n	800a338 <_malloc_r+0xb0>
 800a318:	6822      	ldr	r2, [r4, #0]
 800a31a:	1b52      	subs	r2, r2, r5
 800a31c:	d41f      	bmi.n	800a35e <_malloc_r+0xd6>
 800a31e:	2a0b      	cmp	r2, #11
 800a320:	d917      	bls.n	800a352 <_malloc_r+0xca>
 800a322:	1961      	adds	r1, r4, r5
 800a324:	42a3      	cmp	r3, r4
 800a326:	6025      	str	r5, [r4, #0]
 800a328:	bf18      	it	ne
 800a32a:	6059      	strne	r1, [r3, #4]
 800a32c:	6863      	ldr	r3, [r4, #4]
 800a32e:	bf08      	it	eq
 800a330:	f8c8 1000 	streq.w	r1, [r8]
 800a334:	5162      	str	r2, [r4, r5]
 800a336:	604b      	str	r3, [r1, #4]
 800a338:	4638      	mov	r0, r7
 800a33a:	f104 060b 	add.w	r6, r4, #11
 800a33e:	f000 f829 	bl	800a394 <__malloc_unlock>
 800a342:	f026 0607 	bic.w	r6, r6, #7
 800a346:	1d23      	adds	r3, r4, #4
 800a348:	1af2      	subs	r2, r6, r3
 800a34a:	d0ae      	beq.n	800a2aa <_malloc_r+0x22>
 800a34c:	1b9b      	subs	r3, r3, r6
 800a34e:	50a3      	str	r3, [r4, r2]
 800a350:	e7ab      	b.n	800a2aa <_malloc_r+0x22>
 800a352:	42a3      	cmp	r3, r4
 800a354:	6862      	ldr	r2, [r4, #4]
 800a356:	d1dd      	bne.n	800a314 <_malloc_r+0x8c>
 800a358:	f8c8 2000 	str.w	r2, [r8]
 800a35c:	e7ec      	b.n	800a338 <_malloc_r+0xb0>
 800a35e:	4623      	mov	r3, r4
 800a360:	6864      	ldr	r4, [r4, #4]
 800a362:	e7ac      	b.n	800a2be <_malloc_r+0x36>
 800a364:	4634      	mov	r4, r6
 800a366:	6876      	ldr	r6, [r6, #4]
 800a368:	e7b4      	b.n	800a2d4 <_malloc_r+0x4c>
 800a36a:	4613      	mov	r3, r2
 800a36c:	e7cc      	b.n	800a308 <_malloc_r+0x80>
 800a36e:	230c      	movs	r3, #12
 800a370:	603b      	str	r3, [r7, #0]
 800a372:	4638      	mov	r0, r7
 800a374:	f000 f80e 	bl	800a394 <__malloc_unlock>
 800a378:	e797      	b.n	800a2aa <_malloc_r+0x22>
 800a37a:	6025      	str	r5, [r4, #0]
 800a37c:	e7dc      	b.n	800a338 <_malloc_r+0xb0>
 800a37e:	605b      	str	r3, [r3, #4]
 800a380:	deff      	udf	#255	; 0xff
 800a382:	bf00      	nop
 800a384:	20002080 	.word	0x20002080

0800a388 <__malloc_lock>:
 800a388:	4801      	ldr	r0, [pc, #4]	; (800a390 <__malloc_lock+0x8>)
 800a38a:	f7ff befa 	b.w	800a182 <__retarget_lock_acquire_recursive>
 800a38e:	bf00      	nop
 800a390:	2000207c 	.word	0x2000207c

0800a394 <__malloc_unlock>:
 800a394:	4801      	ldr	r0, [pc, #4]	; (800a39c <__malloc_unlock+0x8>)
 800a396:	f7ff bef5 	b.w	800a184 <__retarget_lock_release_recursive>
 800a39a:	bf00      	nop
 800a39c:	2000207c 	.word	0x2000207c

0800a3a0 <__sfputc_r>:
 800a3a0:	6893      	ldr	r3, [r2, #8]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	b410      	push	{r4}
 800a3a8:	6093      	str	r3, [r2, #8]
 800a3aa:	da08      	bge.n	800a3be <__sfputc_r+0x1e>
 800a3ac:	6994      	ldr	r4, [r2, #24]
 800a3ae:	42a3      	cmp	r3, r4
 800a3b0:	db01      	blt.n	800a3b6 <__sfputc_r+0x16>
 800a3b2:	290a      	cmp	r1, #10
 800a3b4:	d103      	bne.n	800a3be <__sfputc_r+0x1e>
 800a3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ba:	f000 bb73 	b.w	800aaa4 <__swbuf_r>
 800a3be:	6813      	ldr	r3, [r2, #0]
 800a3c0:	1c58      	adds	r0, r3, #1
 800a3c2:	6010      	str	r0, [r2, #0]
 800a3c4:	7019      	strb	r1, [r3, #0]
 800a3c6:	4608      	mov	r0, r1
 800a3c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <__sfputs_r>:
 800a3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	460f      	mov	r7, r1
 800a3d4:	4614      	mov	r4, r2
 800a3d6:	18d5      	adds	r5, r2, r3
 800a3d8:	42ac      	cmp	r4, r5
 800a3da:	d101      	bne.n	800a3e0 <__sfputs_r+0x12>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e007      	b.n	800a3f0 <__sfputs_r+0x22>
 800a3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e4:	463a      	mov	r2, r7
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f7ff ffda 	bl	800a3a0 <__sfputc_r>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d1f3      	bne.n	800a3d8 <__sfputs_r+0xa>
 800a3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3f4 <_vfiprintf_r>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	b09d      	sub	sp, #116	; 0x74
 800a3fc:	4614      	mov	r4, r2
 800a3fe:	4698      	mov	r8, r3
 800a400:	4606      	mov	r6, r0
 800a402:	b118      	cbz	r0, 800a40c <_vfiprintf_r+0x18>
 800a404:	6a03      	ldr	r3, [r0, #32]
 800a406:	b90b      	cbnz	r3, 800a40c <_vfiprintf_r+0x18>
 800a408:	f7ff fdb6 	bl	8009f78 <__sinit>
 800a40c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a40e:	07d9      	lsls	r1, r3, #31
 800a410:	d405      	bmi.n	800a41e <_vfiprintf_r+0x2a>
 800a412:	89ab      	ldrh	r3, [r5, #12]
 800a414:	059a      	lsls	r2, r3, #22
 800a416:	d402      	bmi.n	800a41e <_vfiprintf_r+0x2a>
 800a418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a41a:	f7ff feb2 	bl	800a182 <__retarget_lock_acquire_recursive>
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	071b      	lsls	r3, r3, #28
 800a422:	d501      	bpl.n	800a428 <_vfiprintf_r+0x34>
 800a424:	692b      	ldr	r3, [r5, #16]
 800a426:	b99b      	cbnz	r3, 800a450 <_vfiprintf_r+0x5c>
 800a428:	4629      	mov	r1, r5
 800a42a:	4630      	mov	r0, r6
 800a42c:	f000 fb78 	bl	800ab20 <__swsetup_r>
 800a430:	b170      	cbz	r0, 800a450 <_vfiprintf_r+0x5c>
 800a432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a434:	07dc      	lsls	r4, r3, #31
 800a436:	d504      	bpl.n	800a442 <_vfiprintf_r+0x4e>
 800a438:	f04f 30ff 	mov.w	r0, #4294967295
 800a43c:	b01d      	add	sp, #116	; 0x74
 800a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a442:	89ab      	ldrh	r3, [r5, #12]
 800a444:	0598      	lsls	r0, r3, #22
 800a446:	d4f7      	bmi.n	800a438 <_vfiprintf_r+0x44>
 800a448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a44a:	f7ff fe9b 	bl	800a184 <__retarget_lock_release_recursive>
 800a44e:	e7f3      	b.n	800a438 <_vfiprintf_r+0x44>
 800a450:	2300      	movs	r3, #0
 800a452:	9309      	str	r3, [sp, #36]	; 0x24
 800a454:	2320      	movs	r3, #32
 800a456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a45e:	2330      	movs	r3, #48	; 0x30
 800a460:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a614 <_vfiprintf_r+0x220>
 800a464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a468:	f04f 0901 	mov.w	r9, #1
 800a46c:	4623      	mov	r3, r4
 800a46e:	469a      	mov	sl, r3
 800a470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a474:	b10a      	cbz	r2, 800a47a <_vfiprintf_r+0x86>
 800a476:	2a25      	cmp	r2, #37	; 0x25
 800a478:	d1f9      	bne.n	800a46e <_vfiprintf_r+0x7a>
 800a47a:	ebba 0b04 	subs.w	fp, sl, r4
 800a47e:	d00b      	beq.n	800a498 <_vfiprintf_r+0xa4>
 800a480:	465b      	mov	r3, fp
 800a482:	4622      	mov	r2, r4
 800a484:	4629      	mov	r1, r5
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ffa1 	bl	800a3ce <__sfputs_r>
 800a48c:	3001      	adds	r0, #1
 800a48e:	f000 80a9 	beq.w	800a5e4 <_vfiprintf_r+0x1f0>
 800a492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a494:	445a      	add	r2, fp
 800a496:	9209      	str	r2, [sp, #36]	; 0x24
 800a498:	f89a 3000 	ldrb.w	r3, [sl]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 80a1 	beq.w	800a5e4 <_vfiprintf_r+0x1f0>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ac:	f10a 0a01 	add.w	sl, sl, #1
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	9307      	str	r3, [sp, #28]
 800a4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ba:	4654      	mov	r4, sl
 800a4bc:	2205      	movs	r2, #5
 800a4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c2:	4854      	ldr	r0, [pc, #336]	; (800a614 <_vfiprintf_r+0x220>)
 800a4c4:	f7f5 febc 	bl	8000240 <memchr>
 800a4c8:	9a04      	ldr	r2, [sp, #16]
 800a4ca:	b9d8      	cbnz	r0, 800a504 <_vfiprintf_r+0x110>
 800a4cc:	06d1      	lsls	r1, r2, #27
 800a4ce:	bf44      	itt	mi
 800a4d0:	2320      	movmi	r3, #32
 800a4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d6:	0713      	lsls	r3, r2, #28
 800a4d8:	bf44      	itt	mi
 800a4da:	232b      	movmi	r3, #43	; 0x2b
 800a4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e6:	d015      	beq.n	800a514 <_vfiprintf_r+0x120>
 800a4e8:	9a07      	ldr	r2, [sp, #28]
 800a4ea:	4654      	mov	r4, sl
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f04f 0c0a 	mov.w	ip, #10
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f8:	3b30      	subs	r3, #48	; 0x30
 800a4fa:	2b09      	cmp	r3, #9
 800a4fc:	d94d      	bls.n	800a59a <_vfiprintf_r+0x1a6>
 800a4fe:	b1b0      	cbz	r0, 800a52e <_vfiprintf_r+0x13a>
 800a500:	9207      	str	r2, [sp, #28]
 800a502:	e014      	b.n	800a52e <_vfiprintf_r+0x13a>
 800a504:	eba0 0308 	sub.w	r3, r0, r8
 800a508:	fa09 f303 	lsl.w	r3, r9, r3
 800a50c:	4313      	orrs	r3, r2
 800a50e:	9304      	str	r3, [sp, #16]
 800a510:	46a2      	mov	sl, r4
 800a512:	e7d2      	b.n	800a4ba <_vfiprintf_r+0xc6>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	1d19      	adds	r1, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9103      	str	r1, [sp, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfbb      	ittet	lt
 800a520:	425b      	neglt	r3, r3
 800a522:	f042 0202 	orrlt.w	r2, r2, #2
 800a526:	9307      	strge	r3, [sp, #28]
 800a528:	9307      	strlt	r3, [sp, #28]
 800a52a:	bfb8      	it	lt
 800a52c:	9204      	strlt	r2, [sp, #16]
 800a52e:	7823      	ldrb	r3, [r4, #0]
 800a530:	2b2e      	cmp	r3, #46	; 0x2e
 800a532:	d10c      	bne.n	800a54e <_vfiprintf_r+0x15a>
 800a534:	7863      	ldrb	r3, [r4, #1]
 800a536:	2b2a      	cmp	r3, #42	; 0x2a
 800a538:	d134      	bne.n	800a5a4 <_vfiprintf_r+0x1b0>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	1d1a      	adds	r2, r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	9203      	str	r2, [sp, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfb8      	it	lt
 800a546:	f04f 33ff 	movlt.w	r3, #4294967295
 800a54a:	3402      	adds	r4, #2
 800a54c:	9305      	str	r3, [sp, #20]
 800a54e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a624 <_vfiprintf_r+0x230>
 800a552:	7821      	ldrb	r1, [r4, #0]
 800a554:	2203      	movs	r2, #3
 800a556:	4650      	mov	r0, sl
 800a558:	f7f5 fe72 	bl	8000240 <memchr>
 800a55c:	b138      	cbz	r0, 800a56e <_vfiprintf_r+0x17a>
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	eba0 000a 	sub.w	r0, r0, sl
 800a564:	2240      	movs	r2, #64	; 0x40
 800a566:	4082      	lsls	r2, r0
 800a568:	4313      	orrs	r3, r2
 800a56a:	3401      	adds	r4, #1
 800a56c:	9304      	str	r3, [sp, #16]
 800a56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a572:	4829      	ldr	r0, [pc, #164]	; (800a618 <_vfiprintf_r+0x224>)
 800a574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a578:	2206      	movs	r2, #6
 800a57a:	f7f5 fe61 	bl	8000240 <memchr>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d03f      	beq.n	800a602 <_vfiprintf_r+0x20e>
 800a582:	4b26      	ldr	r3, [pc, #152]	; (800a61c <_vfiprintf_r+0x228>)
 800a584:	bb1b      	cbnz	r3, 800a5ce <_vfiprintf_r+0x1da>
 800a586:	9b03      	ldr	r3, [sp, #12]
 800a588:	3307      	adds	r3, #7
 800a58a:	f023 0307 	bic.w	r3, r3, #7
 800a58e:	3308      	adds	r3, #8
 800a590:	9303      	str	r3, [sp, #12]
 800a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a594:	443b      	add	r3, r7
 800a596:	9309      	str	r3, [sp, #36]	; 0x24
 800a598:	e768      	b.n	800a46c <_vfiprintf_r+0x78>
 800a59a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a59e:	460c      	mov	r4, r1
 800a5a0:	2001      	movs	r0, #1
 800a5a2:	e7a6      	b.n	800a4f2 <_vfiprintf_r+0xfe>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	3401      	adds	r4, #1
 800a5a8:	9305      	str	r3, [sp, #20]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	f04f 0c0a 	mov.w	ip, #10
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b6:	3a30      	subs	r2, #48	; 0x30
 800a5b8:	2a09      	cmp	r2, #9
 800a5ba:	d903      	bls.n	800a5c4 <_vfiprintf_r+0x1d0>
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0c6      	beq.n	800a54e <_vfiprintf_r+0x15a>
 800a5c0:	9105      	str	r1, [sp, #20]
 800a5c2:	e7c4      	b.n	800a54e <_vfiprintf_r+0x15a>
 800a5c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e7f0      	b.n	800a5b0 <_vfiprintf_r+0x1bc>
 800a5ce:	ab03      	add	r3, sp, #12
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	462a      	mov	r2, r5
 800a5d4:	4b12      	ldr	r3, [pc, #72]	; (800a620 <_vfiprintf_r+0x22c>)
 800a5d6:	a904      	add	r1, sp, #16
 800a5d8:	4630      	mov	r0, r6
 800a5da:	f3af 8000 	nop.w
 800a5de:	4607      	mov	r7, r0
 800a5e0:	1c78      	adds	r0, r7, #1
 800a5e2:	d1d6      	bne.n	800a592 <_vfiprintf_r+0x19e>
 800a5e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5e6:	07d9      	lsls	r1, r3, #31
 800a5e8:	d405      	bmi.n	800a5f6 <_vfiprintf_r+0x202>
 800a5ea:	89ab      	ldrh	r3, [r5, #12]
 800a5ec:	059a      	lsls	r2, r3, #22
 800a5ee:	d402      	bmi.n	800a5f6 <_vfiprintf_r+0x202>
 800a5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f2:	f7ff fdc7 	bl	800a184 <__retarget_lock_release_recursive>
 800a5f6:	89ab      	ldrh	r3, [r5, #12]
 800a5f8:	065b      	lsls	r3, r3, #25
 800a5fa:	f53f af1d 	bmi.w	800a438 <_vfiprintf_r+0x44>
 800a5fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a600:	e71c      	b.n	800a43c <_vfiprintf_r+0x48>
 800a602:	ab03      	add	r3, sp, #12
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	462a      	mov	r2, r5
 800a608:	4b05      	ldr	r3, [pc, #20]	; (800a620 <_vfiprintf_r+0x22c>)
 800a60a:	a904      	add	r1, sp, #16
 800a60c:	4630      	mov	r0, r6
 800a60e:	f000 f879 	bl	800a704 <_printf_i>
 800a612:	e7e4      	b.n	800a5de <_vfiprintf_r+0x1ea>
 800a614:	0800af1a 	.word	0x0800af1a
 800a618:	0800af24 	.word	0x0800af24
 800a61c:	00000000 	.word	0x00000000
 800a620:	0800a3cf 	.word	0x0800a3cf
 800a624:	0800af20 	.word	0x0800af20

0800a628 <_printf_common>:
 800a628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a62c:	4616      	mov	r6, r2
 800a62e:	4699      	mov	r9, r3
 800a630:	688a      	ldr	r2, [r1, #8]
 800a632:	690b      	ldr	r3, [r1, #16]
 800a634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a638:	4293      	cmp	r3, r2
 800a63a:	bfb8      	it	lt
 800a63c:	4613      	movlt	r3, r2
 800a63e:	6033      	str	r3, [r6, #0]
 800a640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a644:	4607      	mov	r7, r0
 800a646:	460c      	mov	r4, r1
 800a648:	b10a      	cbz	r2, 800a64e <_printf_common+0x26>
 800a64a:	3301      	adds	r3, #1
 800a64c:	6033      	str	r3, [r6, #0]
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	0699      	lsls	r1, r3, #26
 800a652:	bf42      	ittt	mi
 800a654:	6833      	ldrmi	r3, [r6, #0]
 800a656:	3302      	addmi	r3, #2
 800a658:	6033      	strmi	r3, [r6, #0]
 800a65a:	6825      	ldr	r5, [r4, #0]
 800a65c:	f015 0506 	ands.w	r5, r5, #6
 800a660:	d106      	bne.n	800a670 <_printf_common+0x48>
 800a662:	f104 0a19 	add.w	sl, r4, #25
 800a666:	68e3      	ldr	r3, [r4, #12]
 800a668:	6832      	ldr	r2, [r6, #0]
 800a66a:	1a9b      	subs	r3, r3, r2
 800a66c:	42ab      	cmp	r3, r5
 800a66e:	dc26      	bgt.n	800a6be <_printf_common+0x96>
 800a670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a674:	1e13      	subs	r3, r2, #0
 800a676:	6822      	ldr	r2, [r4, #0]
 800a678:	bf18      	it	ne
 800a67a:	2301      	movne	r3, #1
 800a67c:	0692      	lsls	r2, r2, #26
 800a67e:	d42b      	bmi.n	800a6d8 <_printf_common+0xb0>
 800a680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a684:	4649      	mov	r1, r9
 800a686:	4638      	mov	r0, r7
 800a688:	47c0      	blx	r8
 800a68a:	3001      	adds	r0, #1
 800a68c:	d01e      	beq.n	800a6cc <_printf_common+0xa4>
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	6922      	ldr	r2, [r4, #16]
 800a692:	f003 0306 	and.w	r3, r3, #6
 800a696:	2b04      	cmp	r3, #4
 800a698:	bf02      	ittt	eq
 800a69a:	68e5      	ldreq	r5, [r4, #12]
 800a69c:	6833      	ldreq	r3, [r6, #0]
 800a69e:	1aed      	subeq	r5, r5, r3
 800a6a0:	68a3      	ldr	r3, [r4, #8]
 800a6a2:	bf0c      	ite	eq
 800a6a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6a8:	2500      	movne	r5, #0
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	bfc4      	itt	gt
 800a6ae:	1a9b      	subgt	r3, r3, r2
 800a6b0:	18ed      	addgt	r5, r5, r3
 800a6b2:	2600      	movs	r6, #0
 800a6b4:	341a      	adds	r4, #26
 800a6b6:	42b5      	cmp	r5, r6
 800a6b8:	d11a      	bne.n	800a6f0 <_printf_common+0xc8>
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	e008      	b.n	800a6d0 <_printf_common+0xa8>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	4652      	mov	r2, sl
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	4638      	mov	r0, r7
 800a6c6:	47c0      	blx	r8
 800a6c8:	3001      	adds	r0, #1
 800a6ca:	d103      	bne.n	800a6d4 <_printf_common+0xac>
 800a6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d4:	3501      	adds	r5, #1
 800a6d6:	e7c6      	b.n	800a666 <_printf_common+0x3e>
 800a6d8:	18e1      	adds	r1, r4, r3
 800a6da:	1c5a      	adds	r2, r3, #1
 800a6dc:	2030      	movs	r0, #48	; 0x30
 800a6de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6e2:	4422      	add	r2, r4
 800a6e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6ec:	3302      	adds	r3, #2
 800a6ee:	e7c7      	b.n	800a680 <_printf_common+0x58>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	4622      	mov	r2, r4
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	47c0      	blx	r8
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	d0e6      	beq.n	800a6cc <_printf_common+0xa4>
 800a6fe:	3601      	adds	r6, #1
 800a700:	e7d9      	b.n	800a6b6 <_printf_common+0x8e>
	...

0800a704 <_printf_i>:
 800a704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a708:	7e0f      	ldrb	r7, [r1, #24]
 800a70a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a70c:	2f78      	cmp	r7, #120	; 0x78
 800a70e:	4691      	mov	r9, r2
 800a710:	4680      	mov	r8, r0
 800a712:	460c      	mov	r4, r1
 800a714:	469a      	mov	sl, r3
 800a716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a71a:	d807      	bhi.n	800a72c <_printf_i+0x28>
 800a71c:	2f62      	cmp	r7, #98	; 0x62
 800a71e:	d80a      	bhi.n	800a736 <_printf_i+0x32>
 800a720:	2f00      	cmp	r7, #0
 800a722:	f000 80d4 	beq.w	800a8ce <_printf_i+0x1ca>
 800a726:	2f58      	cmp	r7, #88	; 0x58
 800a728:	f000 80c0 	beq.w	800a8ac <_printf_i+0x1a8>
 800a72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a734:	e03a      	b.n	800a7ac <_printf_i+0xa8>
 800a736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a73a:	2b15      	cmp	r3, #21
 800a73c:	d8f6      	bhi.n	800a72c <_printf_i+0x28>
 800a73e:	a101      	add	r1, pc, #4	; (adr r1, 800a744 <_printf_i+0x40>)
 800a740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a744:	0800a79d 	.word	0x0800a79d
 800a748:	0800a7b1 	.word	0x0800a7b1
 800a74c:	0800a72d 	.word	0x0800a72d
 800a750:	0800a72d 	.word	0x0800a72d
 800a754:	0800a72d 	.word	0x0800a72d
 800a758:	0800a72d 	.word	0x0800a72d
 800a75c:	0800a7b1 	.word	0x0800a7b1
 800a760:	0800a72d 	.word	0x0800a72d
 800a764:	0800a72d 	.word	0x0800a72d
 800a768:	0800a72d 	.word	0x0800a72d
 800a76c:	0800a72d 	.word	0x0800a72d
 800a770:	0800a8b5 	.word	0x0800a8b5
 800a774:	0800a7dd 	.word	0x0800a7dd
 800a778:	0800a86f 	.word	0x0800a86f
 800a77c:	0800a72d 	.word	0x0800a72d
 800a780:	0800a72d 	.word	0x0800a72d
 800a784:	0800a8d7 	.word	0x0800a8d7
 800a788:	0800a72d 	.word	0x0800a72d
 800a78c:	0800a7dd 	.word	0x0800a7dd
 800a790:	0800a72d 	.word	0x0800a72d
 800a794:	0800a72d 	.word	0x0800a72d
 800a798:	0800a877 	.word	0x0800a877
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	1d1a      	adds	r2, r3, #4
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	602a      	str	r2, [r5, #0]
 800a7a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e09f      	b.n	800a8f0 <_printf_i+0x1ec>
 800a7b0:	6820      	ldr	r0, [r4, #0]
 800a7b2:	682b      	ldr	r3, [r5, #0]
 800a7b4:	0607      	lsls	r7, r0, #24
 800a7b6:	f103 0104 	add.w	r1, r3, #4
 800a7ba:	6029      	str	r1, [r5, #0]
 800a7bc:	d501      	bpl.n	800a7c2 <_printf_i+0xbe>
 800a7be:	681e      	ldr	r6, [r3, #0]
 800a7c0:	e003      	b.n	800a7ca <_printf_i+0xc6>
 800a7c2:	0646      	lsls	r6, r0, #25
 800a7c4:	d5fb      	bpl.n	800a7be <_printf_i+0xba>
 800a7c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	da03      	bge.n	800a7d6 <_printf_i+0xd2>
 800a7ce:	232d      	movs	r3, #45	; 0x2d
 800a7d0:	4276      	negs	r6, r6
 800a7d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7d6:	485a      	ldr	r0, [pc, #360]	; (800a940 <_printf_i+0x23c>)
 800a7d8:	230a      	movs	r3, #10
 800a7da:	e012      	b.n	800a802 <_printf_i+0xfe>
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	6820      	ldr	r0, [r4, #0]
 800a7e0:	1d19      	adds	r1, r3, #4
 800a7e2:	6029      	str	r1, [r5, #0]
 800a7e4:	0605      	lsls	r5, r0, #24
 800a7e6:	d501      	bpl.n	800a7ec <_printf_i+0xe8>
 800a7e8:	681e      	ldr	r6, [r3, #0]
 800a7ea:	e002      	b.n	800a7f2 <_printf_i+0xee>
 800a7ec:	0641      	lsls	r1, r0, #25
 800a7ee:	d5fb      	bpl.n	800a7e8 <_printf_i+0xe4>
 800a7f0:	881e      	ldrh	r6, [r3, #0]
 800a7f2:	4853      	ldr	r0, [pc, #332]	; (800a940 <_printf_i+0x23c>)
 800a7f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a7f6:	bf0c      	ite	eq
 800a7f8:	2308      	moveq	r3, #8
 800a7fa:	230a      	movne	r3, #10
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a802:	6865      	ldr	r5, [r4, #4]
 800a804:	60a5      	str	r5, [r4, #8]
 800a806:	2d00      	cmp	r5, #0
 800a808:	bfa2      	ittt	ge
 800a80a:	6821      	ldrge	r1, [r4, #0]
 800a80c:	f021 0104 	bicge.w	r1, r1, #4
 800a810:	6021      	strge	r1, [r4, #0]
 800a812:	b90e      	cbnz	r6, 800a818 <_printf_i+0x114>
 800a814:	2d00      	cmp	r5, #0
 800a816:	d04b      	beq.n	800a8b0 <_printf_i+0x1ac>
 800a818:	4615      	mov	r5, r2
 800a81a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a81e:	fb03 6711 	mls	r7, r3, r1, r6
 800a822:	5dc7      	ldrb	r7, [r0, r7]
 800a824:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a828:	4637      	mov	r7, r6
 800a82a:	42bb      	cmp	r3, r7
 800a82c:	460e      	mov	r6, r1
 800a82e:	d9f4      	bls.n	800a81a <_printf_i+0x116>
 800a830:	2b08      	cmp	r3, #8
 800a832:	d10b      	bne.n	800a84c <_printf_i+0x148>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	07de      	lsls	r6, r3, #31
 800a838:	d508      	bpl.n	800a84c <_printf_i+0x148>
 800a83a:	6923      	ldr	r3, [r4, #16]
 800a83c:	6861      	ldr	r1, [r4, #4]
 800a83e:	4299      	cmp	r1, r3
 800a840:	bfde      	ittt	le
 800a842:	2330      	movle	r3, #48	; 0x30
 800a844:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a848:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a84c:	1b52      	subs	r2, r2, r5
 800a84e:	6122      	str	r2, [r4, #16]
 800a850:	f8cd a000 	str.w	sl, [sp]
 800a854:	464b      	mov	r3, r9
 800a856:	aa03      	add	r2, sp, #12
 800a858:	4621      	mov	r1, r4
 800a85a:	4640      	mov	r0, r8
 800a85c:	f7ff fee4 	bl	800a628 <_printf_common>
 800a860:	3001      	adds	r0, #1
 800a862:	d14a      	bne.n	800a8fa <_printf_i+0x1f6>
 800a864:	f04f 30ff 	mov.w	r0, #4294967295
 800a868:	b004      	add	sp, #16
 800a86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	f043 0320 	orr.w	r3, r3, #32
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	4833      	ldr	r0, [pc, #204]	; (800a944 <_printf_i+0x240>)
 800a878:	2778      	movs	r7, #120	; 0x78
 800a87a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	6829      	ldr	r1, [r5, #0]
 800a882:	061f      	lsls	r7, r3, #24
 800a884:	f851 6b04 	ldr.w	r6, [r1], #4
 800a888:	d402      	bmi.n	800a890 <_printf_i+0x18c>
 800a88a:	065f      	lsls	r7, r3, #25
 800a88c:	bf48      	it	mi
 800a88e:	b2b6      	uxthmi	r6, r6
 800a890:	07df      	lsls	r7, r3, #31
 800a892:	bf48      	it	mi
 800a894:	f043 0320 	orrmi.w	r3, r3, #32
 800a898:	6029      	str	r1, [r5, #0]
 800a89a:	bf48      	it	mi
 800a89c:	6023      	strmi	r3, [r4, #0]
 800a89e:	b91e      	cbnz	r6, 800a8a8 <_printf_i+0x1a4>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	f023 0320 	bic.w	r3, r3, #32
 800a8a6:	6023      	str	r3, [r4, #0]
 800a8a8:	2310      	movs	r3, #16
 800a8aa:	e7a7      	b.n	800a7fc <_printf_i+0xf8>
 800a8ac:	4824      	ldr	r0, [pc, #144]	; (800a940 <_printf_i+0x23c>)
 800a8ae:	e7e4      	b.n	800a87a <_printf_i+0x176>
 800a8b0:	4615      	mov	r5, r2
 800a8b2:	e7bd      	b.n	800a830 <_printf_i+0x12c>
 800a8b4:	682b      	ldr	r3, [r5, #0]
 800a8b6:	6826      	ldr	r6, [r4, #0]
 800a8b8:	6961      	ldr	r1, [r4, #20]
 800a8ba:	1d18      	adds	r0, r3, #4
 800a8bc:	6028      	str	r0, [r5, #0]
 800a8be:	0635      	lsls	r5, r6, #24
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	d501      	bpl.n	800a8c8 <_printf_i+0x1c4>
 800a8c4:	6019      	str	r1, [r3, #0]
 800a8c6:	e002      	b.n	800a8ce <_printf_i+0x1ca>
 800a8c8:	0670      	lsls	r0, r6, #25
 800a8ca:	d5fb      	bpl.n	800a8c4 <_printf_i+0x1c0>
 800a8cc:	8019      	strh	r1, [r3, #0]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6123      	str	r3, [r4, #16]
 800a8d2:	4615      	mov	r5, r2
 800a8d4:	e7bc      	b.n	800a850 <_printf_i+0x14c>
 800a8d6:	682b      	ldr	r3, [r5, #0]
 800a8d8:	1d1a      	adds	r2, r3, #4
 800a8da:	602a      	str	r2, [r5, #0]
 800a8dc:	681d      	ldr	r5, [r3, #0]
 800a8de:	6862      	ldr	r2, [r4, #4]
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f7f5 fcac 	bl	8000240 <memchr>
 800a8e8:	b108      	cbz	r0, 800a8ee <_printf_i+0x1ea>
 800a8ea:	1b40      	subs	r0, r0, r5
 800a8ec:	6060      	str	r0, [r4, #4]
 800a8ee:	6863      	ldr	r3, [r4, #4]
 800a8f0:	6123      	str	r3, [r4, #16]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8f8:	e7aa      	b.n	800a850 <_printf_i+0x14c>
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4649      	mov	r1, r9
 800a900:	4640      	mov	r0, r8
 800a902:	47d0      	blx	sl
 800a904:	3001      	adds	r0, #1
 800a906:	d0ad      	beq.n	800a864 <_printf_i+0x160>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	079b      	lsls	r3, r3, #30
 800a90c:	d413      	bmi.n	800a936 <_printf_i+0x232>
 800a90e:	68e0      	ldr	r0, [r4, #12]
 800a910:	9b03      	ldr	r3, [sp, #12]
 800a912:	4298      	cmp	r0, r3
 800a914:	bfb8      	it	lt
 800a916:	4618      	movlt	r0, r3
 800a918:	e7a6      	b.n	800a868 <_printf_i+0x164>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4632      	mov	r2, r6
 800a91e:	4649      	mov	r1, r9
 800a920:	4640      	mov	r0, r8
 800a922:	47d0      	blx	sl
 800a924:	3001      	adds	r0, #1
 800a926:	d09d      	beq.n	800a864 <_printf_i+0x160>
 800a928:	3501      	adds	r5, #1
 800a92a:	68e3      	ldr	r3, [r4, #12]
 800a92c:	9903      	ldr	r1, [sp, #12]
 800a92e:	1a5b      	subs	r3, r3, r1
 800a930:	42ab      	cmp	r3, r5
 800a932:	dcf2      	bgt.n	800a91a <_printf_i+0x216>
 800a934:	e7eb      	b.n	800a90e <_printf_i+0x20a>
 800a936:	2500      	movs	r5, #0
 800a938:	f104 0619 	add.w	r6, r4, #25
 800a93c:	e7f5      	b.n	800a92a <_printf_i+0x226>
 800a93e:	bf00      	nop
 800a940:	0800af2b 	.word	0x0800af2b
 800a944:	0800af3c 	.word	0x0800af3c

0800a948 <__sflush_r>:
 800a948:	898a      	ldrh	r2, [r1, #12]
 800a94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a94e:	4605      	mov	r5, r0
 800a950:	0710      	lsls	r0, r2, #28
 800a952:	460c      	mov	r4, r1
 800a954:	d458      	bmi.n	800aa08 <__sflush_r+0xc0>
 800a956:	684b      	ldr	r3, [r1, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	dc05      	bgt.n	800a968 <__sflush_r+0x20>
 800a95c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a95e:	2b00      	cmp	r3, #0
 800a960:	dc02      	bgt.n	800a968 <__sflush_r+0x20>
 800a962:	2000      	movs	r0, #0
 800a964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a96a:	2e00      	cmp	r6, #0
 800a96c:	d0f9      	beq.n	800a962 <__sflush_r+0x1a>
 800a96e:	2300      	movs	r3, #0
 800a970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a974:	682f      	ldr	r7, [r5, #0]
 800a976:	6a21      	ldr	r1, [r4, #32]
 800a978:	602b      	str	r3, [r5, #0]
 800a97a:	d032      	beq.n	800a9e2 <__sflush_r+0x9a>
 800a97c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	075a      	lsls	r2, r3, #29
 800a982:	d505      	bpl.n	800a990 <__sflush_r+0x48>
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	1ac0      	subs	r0, r0, r3
 800a988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a98a:	b10b      	cbz	r3, 800a990 <__sflush_r+0x48>
 800a98c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a98e:	1ac0      	subs	r0, r0, r3
 800a990:	2300      	movs	r3, #0
 800a992:	4602      	mov	r2, r0
 800a994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a996:	6a21      	ldr	r1, [r4, #32]
 800a998:	4628      	mov	r0, r5
 800a99a:	47b0      	blx	r6
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	d106      	bne.n	800a9b0 <__sflush_r+0x68>
 800a9a2:	6829      	ldr	r1, [r5, #0]
 800a9a4:	291d      	cmp	r1, #29
 800a9a6:	d82b      	bhi.n	800aa00 <__sflush_r+0xb8>
 800a9a8:	4a29      	ldr	r2, [pc, #164]	; (800aa50 <__sflush_r+0x108>)
 800a9aa:	410a      	asrs	r2, r1
 800a9ac:	07d6      	lsls	r6, r2, #31
 800a9ae:	d427      	bmi.n	800aa00 <__sflush_r+0xb8>
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	6062      	str	r2, [r4, #4]
 800a9b4:	04d9      	lsls	r1, r3, #19
 800a9b6:	6922      	ldr	r2, [r4, #16]
 800a9b8:	6022      	str	r2, [r4, #0]
 800a9ba:	d504      	bpl.n	800a9c6 <__sflush_r+0x7e>
 800a9bc:	1c42      	adds	r2, r0, #1
 800a9be:	d101      	bne.n	800a9c4 <__sflush_r+0x7c>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b903      	cbnz	r3, 800a9c6 <__sflush_r+0x7e>
 800a9c4:	6560      	str	r0, [r4, #84]	; 0x54
 800a9c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9c8:	602f      	str	r7, [r5, #0]
 800a9ca:	2900      	cmp	r1, #0
 800a9cc:	d0c9      	beq.n	800a962 <__sflush_r+0x1a>
 800a9ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9d2:	4299      	cmp	r1, r3
 800a9d4:	d002      	beq.n	800a9dc <__sflush_r+0x94>
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f7ff fbea 	bl	800a1b0 <_free_r>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	6360      	str	r0, [r4, #52]	; 0x34
 800a9e0:	e7c0      	b.n	800a964 <__sflush_r+0x1c>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	47b0      	blx	r6
 800a9e8:	1c41      	adds	r1, r0, #1
 800a9ea:	d1c8      	bne.n	800a97e <__sflush_r+0x36>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d0c5      	beq.n	800a97e <__sflush_r+0x36>
 800a9f2:	2b1d      	cmp	r3, #29
 800a9f4:	d001      	beq.n	800a9fa <__sflush_r+0xb2>
 800a9f6:	2b16      	cmp	r3, #22
 800a9f8:	d101      	bne.n	800a9fe <__sflush_r+0xb6>
 800a9fa:	602f      	str	r7, [r5, #0]
 800a9fc:	e7b1      	b.n	800a962 <__sflush_r+0x1a>
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa04:	81a3      	strh	r3, [r4, #12]
 800aa06:	e7ad      	b.n	800a964 <__sflush_r+0x1c>
 800aa08:	690f      	ldr	r7, [r1, #16]
 800aa0a:	2f00      	cmp	r7, #0
 800aa0c:	d0a9      	beq.n	800a962 <__sflush_r+0x1a>
 800aa0e:	0793      	lsls	r3, r2, #30
 800aa10:	680e      	ldr	r6, [r1, #0]
 800aa12:	bf08      	it	eq
 800aa14:	694b      	ldreq	r3, [r1, #20]
 800aa16:	600f      	str	r7, [r1, #0]
 800aa18:	bf18      	it	ne
 800aa1a:	2300      	movne	r3, #0
 800aa1c:	eba6 0807 	sub.w	r8, r6, r7
 800aa20:	608b      	str	r3, [r1, #8]
 800aa22:	f1b8 0f00 	cmp.w	r8, #0
 800aa26:	dd9c      	ble.n	800a962 <__sflush_r+0x1a>
 800aa28:	6a21      	ldr	r1, [r4, #32]
 800aa2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa2c:	4643      	mov	r3, r8
 800aa2e:	463a      	mov	r2, r7
 800aa30:	4628      	mov	r0, r5
 800aa32:	47b0      	blx	r6
 800aa34:	2800      	cmp	r0, #0
 800aa36:	dc06      	bgt.n	800aa46 <__sflush_r+0xfe>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	f04f 30ff 	mov.w	r0, #4294967295
 800aa44:	e78e      	b.n	800a964 <__sflush_r+0x1c>
 800aa46:	4407      	add	r7, r0
 800aa48:	eba8 0800 	sub.w	r8, r8, r0
 800aa4c:	e7e9      	b.n	800aa22 <__sflush_r+0xda>
 800aa4e:	bf00      	nop
 800aa50:	dfbffffe 	.word	0xdfbffffe

0800aa54 <_fflush_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	690b      	ldr	r3, [r1, #16]
 800aa58:	4605      	mov	r5, r0
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	b913      	cbnz	r3, 800aa64 <_fflush_r+0x10>
 800aa5e:	2500      	movs	r5, #0
 800aa60:	4628      	mov	r0, r5
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	b118      	cbz	r0, 800aa6e <_fflush_r+0x1a>
 800aa66:	6a03      	ldr	r3, [r0, #32]
 800aa68:	b90b      	cbnz	r3, 800aa6e <_fflush_r+0x1a>
 800aa6a:	f7ff fa85 	bl	8009f78 <__sinit>
 800aa6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d0f3      	beq.n	800aa5e <_fflush_r+0xa>
 800aa76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa78:	07d0      	lsls	r0, r2, #31
 800aa7a:	d404      	bmi.n	800aa86 <_fflush_r+0x32>
 800aa7c:	0599      	lsls	r1, r3, #22
 800aa7e:	d402      	bmi.n	800aa86 <_fflush_r+0x32>
 800aa80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa82:	f7ff fb7e 	bl	800a182 <__retarget_lock_acquire_recursive>
 800aa86:	4628      	mov	r0, r5
 800aa88:	4621      	mov	r1, r4
 800aa8a:	f7ff ff5d 	bl	800a948 <__sflush_r>
 800aa8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa90:	07da      	lsls	r2, r3, #31
 800aa92:	4605      	mov	r5, r0
 800aa94:	d4e4      	bmi.n	800aa60 <_fflush_r+0xc>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	059b      	lsls	r3, r3, #22
 800aa9a:	d4e1      	bmi.n	800aa60 <_fflush_r+0xc>
 800aa9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa9e:	f7ff fb71 	bl	800a184 <__retarget_lock_release_recursive>
 800aaa2:	e7dd      	b.n	800aa60 <_fflush_r+0xc>

0800aaa4 <__swbuf_r>:
 800aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa6:	460e      	mov	r6, r1
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	4605      	mov	r5, r0
 800aaac:	b118      	cbz	r0, 800aab6 <__swbuf_r+0x12>
 800aaae:	6a03      	ldr	r3, [r0, #32]
 800aab0:	b90b      	cbnz	r3, 800aab6 <__swbuf_r+0x12>
 800aab2:	f7ff fa61 	bl	8009f78 <__sinit>
 800aab6:	69a3      	ldr	r3, [r4, #24]
 800aab8:	60a3      	str	r3, [r4, #8]
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	071a      	lsls	r2, r3, #28
 800aabe:	d525      	bpl.n	800ab0c <__swbuf_r+0x68>
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	b31b      	cbz	r3, 800ab0c <__swbuf_r+0x68>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	6922      	ldr	r2, [r4, #16]
 800aac8:	1a98      	subs	r0, r3, r2
 800aaca:	6963      	ldr	r3, [r4, #20]
 800aacc:	b2f6      	uxtb	r6, r6
 800aace:	4283      	cmp	r3, r0
 800aad0:	4637      	mov	r7, r6
 800aad2:	dc04      	bgt.n	800aade <__swbuf_r+0x3a>
 800aad4:	4621      	mov	r1, r4
 800aad6:	4628      	mov	r0, r5
 800aad8:	f7ff ffbc 	bl	800aa54 <_fflush_r>
 800aadc:	b9e0      	cbnz	r0, 800ab18 <__swbuf_r+0x74>
 800aade:	68a3      	ldr	r3, [r4, #8]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	60a3      	str	r3, [r4, #8]
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	6022      	str	r2, [r4, #0]
 800aaea:	701e      	strb	r6, [r3, #0]
 800aaec:	6962      	ldr	r2, [r4, #20]
 800aaee:	1c43      	adds	r3, r0, #1
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d004      	beq.n	800aafe <__swbuf_r+0x5a>
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	07db      	lsls	r3, r3, #31
 800aaf8:	d506      	bpl.n	800ab08 <__swbuf_r+0x64>
 800aafa:	2e0a      	cmp	r6, #10
 800aafc:	d104      	bne.n	800ab08 <__swbuf_r+0x64>
 800aafe:	4621      	mov	r1, r4
 800ab00:	4628      	mov	r0, r5
 800ab02:	f7ff ffa7 	bl	800aa54 <_fflush_r>
 800ab06:	b938      	cbnz	r0, 800ab18 <__swbuf_r+0x74>
 800ab08:	4638      	mov	r0, r7
 800ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f000 f806 	bl	800ab20 <__swsetup_r>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d0d5      	beq.n	800aac4 <__swbuf_r+0x20>
 800ab18:	f04f 37ff 	mov.w	r7, #4294967295
 800ab1c:	e7f4      	b.n	800ab08 <__swbuf_r+0x64>
	...

0800ab20 <__swsetup_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4b2a      	ldr	r3, [pc, #168]	; (800abcc <__swsetup_r+0xac>)
 800ab24:	4605      	mov	r5, r0
 800ab26:	6818      	ldr	r0, [r3, #0]
 800ab28:	460c      	mov	r4, r1
 800ab2a:	b118      	cbz	r0, 800ab34 <__swsetup_r+0x14>
 800ab2c:	6a03      	ldr	r3, [r0, #32]
 800ab2e:	b90b      	cbnz	r3, 800ab34 <__swsetup_r+0x14>
 800ab30:	f7ff fa22 	bl	8009f78 <__sinit>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab3a:	0718      	lsls	r0, r3, #28
 800ab3c:	d422      	bmi.n	800ab84 <__swsetup_r+0x64>
 800ab3e:	06d9      	lsls	r1, r3, #27
 800ab40:	d407      	bmi.n	800ab52 <__swsetup_r+0x32>
 800ab42:	2309      	movs	r3, #9
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab4a:	81a3      	strh	r3, [r4, #12]
 800ab4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab50:	e034      	b.n	800abbc <__swsetup_r+0x9c>
 800ab52:	0758      	lsls	r0, r3, #29
 800ab54:	d512      	bpl.n	800ab7c <__swsetup_r+0x5c>
 800ab56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab58:	b141      	cbz	r1, 800ab6c <__swsetup_r+0x4c>
 800ab5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab5e:	4299      	cmp	r1, r3
 800ab60:	d002      	beq.n	800ab68 <__swsetup_r+0x48>
 800ab62:	4628      	mov	r0, r5
 800ab64:	f7ff fb24 	bl	800a1b0 <_free_r>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	6363      	str	r3, [r4, #52]	; 0x34
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab72:	81a3      	strh	r3, [r4, #12]
 800ab74:	2300      	movs	r3, #0
 800ab76:	6063      	str	r3, [r4, #4]
 800ab78:	6923      	ldr	r3, [r4, #16]
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	f043 0308 	orr.w	r3, r3, #8
 800ab82:	81a3      	strh	r3, [r4, #12]
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	b94b      	cbnz	r3, 800ab9c <__swsetup_r+0x7c>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab92:	d003      	beq.n	800ab9c <__swsetup_r+0x7c>
 800ab94:	4621      	mov	r1, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 f894 	bl	800acc4 <__smakebuf_r>
 800ab9c:	89a0      	ldrh	r0, [r4, #12]
 800ab9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aba2:	f010 0301 	ands.w	r3, r0, #1
 800aba6:	d00a      	beq.n	800abbe <__swsetup_r+0x9e>
 800aba8:	2300      	movs	r3, #0
 800abaa:	60a3      	str	r3, [r4, #8]
 800abac:	6963      	ldr	r3, [r4, #20]
 800abae:	425b      	negs	r3, r3
 800abb0:	61a3      	str	r3, [r4, #24]
 800abb2:	6923      	ldr	r3, [r4, #16]
 800abb4:	b943      	cbnz	r3, 800abc8 <__swsetup_r+0xa8>
 800abb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abba:	d1c4      	bne.n	800ab46 <__swsetup_r+0x26>
 800abbc:	bd38      	pop	{r3, r4, r5, pc}
 800abbe:	0781      	lsls	r1, r0, #30
 800abc0:	bf58      	it	pl
 800abc2:	6963      	ldrpl	r3, [r4, #20]
 800abc4:	60a3      	str	r3, [r4, #8]
 800abc6:	e7f4      	b.n	800abb2 <__swsetup_r+0x92>
 800abc8:	2000      	movs	r0, #0
 800abca:	e7f7      	b.n	800abbc <__swsetup_r+0x9c>
 800abcc:	20000164 	.word	0x20000164

0800abd0 <_raise_r>:
 800abd0:	291f      	cmp	r1, #31
 800abd2:	b538      	push	{r3, r4, r5, lr}
 800abd4:	4604      	mov	r4, r0
 800abd6:	460d      	mov	r5, r1
 800abd8:	d904      	bls.n	800abe4 <_raise_r+0x14>
 800abda:	2316      	movs	r3, #22
 800abdc:	6003      	str	r3, [r0, #0]
 800abde:	f04f 30ff 	mov.w	r0, #4294967295
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800abe6:	b112      	cbz	r2, 800abee <_raise_r+0x1e>
 800abe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abec:	b94b      	cbnz	r3, 800ac02 <_raise_r+0x32>
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 f830 	bl	800ac54 <_getpid_r>
 800abf4:	462a      	mov	r2, r5
 800abf6:	4601      	mov	r1, r0
 800abf8:	4620      	mov	r0, r4
 800abfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abfe:	f000 b817 	b.w	800ac30 <_kill_r>
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d00a      	beq.n	800ac1c <_raise_r+0x4c>
 800ac06:	1c59      	adds	r1, r3, #1
 800ac08:	d103      	bne.n	800ac12 <_raise_r+0x42>
 800ac0a:	2316      	movs	r3, #22
 800ac0c:	6003      	str	r3, [r0, #0]
 800ac0e:	2001      	movs	r0, #1
 800ac10:	e7e7      	b.n	800abe2 <_raise_r+0x12>
 800ac12:	2400      	movs	r4, #0
 800ac14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac18:	4628      	mov	r0, r5
 800ac1a:	4798      	blx	r3
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e7e0      	b.n	800abe2 <_raise_r+0x12>

0800ac20 <raise>:
 800ac20:	4b02      	ldr	r3, [pc, #8]	; (800ac2c <raise+0xc>)
 800ac22:	4601      	mov	r1, r0
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	f7ff bfd3 	b.w	800abd0 <_raise_r>
 800ac2a:	bf00      	nop
 800ac2c:	20000164 	.word	0x20000164

0800ac30 <_kill_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d07      	ldr	r5, [pc, #28]	; (800ac50 <_kill_r+0x20>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	602b      	str	r3, [r5, #0]
 800ac3e:	f7f6 f86d 	bl	8000d1c <_kill>
 800ac42:	1c43      	adds	r3, r0, #1
 800ac44:	d102      	bne.n	800ac4c <_kill_r+0x1c>
 800ac46:	682b      	ldr	r3, [r5, #0]
 800ac48:	b103      	cbz	r3, 800ac4c <_kill_r+0x1c>
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	bd38      	pop	{r3, r4, r5, pc}
 800ac4e:	bf00      	nop
 800ac50:	20002078 	.word	0x20002078

0800ac54 <_getpid_r>:
 800ac54:	f7f6 b85a 	b.w	8000d0c <_getpid>

0800ac58 <_sbrk_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4d06      	ldr	r5, [pc, #24]	; (800ac74 <_sbrk_r+0x1c>)
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4604      	mov	r4, r0
 800ac60:	4608      	mov	r0, r1
 800ac62:	602b      	str	r3, [r5, #0]
 800ac64:	f7f6 f8e2 	bl	8000e2c <_sbrk>
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	d102      	bne.n	800ac72 <_sbrk_r+0x1a>
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	b103      	cbz	r3, 800ac72 <_sbrk_r+0x1a>
 800ac70:	6023      	str	r3, [r4, #0]
 800ac72:	bd38      	pop	{r3, r4, r5, pc}
 800ac74:	20002078 	.word	0x20002078

0800ac78 <__swhatbuf_r>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac80:	2900      	cmp	r1, #0
 800ac82:	b096      	sub	sp, #88	; 0x58
 800ac84:	4615      	mov	r5, r2
 800ac86:	461e      	mov	r6, r3
 800ac88:	da0d      	bge.n	800aca6 <__swhatbuf_r+0x2e>
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ac90:	f04f 0100 	mov.w	r1, #0
 800ac94:	bf0c      	ite	eq
 800ac96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ac9a:	2340      	movne	r3, #64	; 0x40
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	6031      	str	r1, [r6, #0]
 800aca0:	602b      	str	r3, [r5, #0]
 800aca2:	b016      	add	sp, #88	; 0x58
 800aca4:	bd70      	pop	{r4, r5, r6, pc}
 800aca6:	466a      	mov	r2, sp
 800aca8:	f000 f848 	bl	800ad3c <_fstat_r>
 800acac:	2800      	cmp	r0, #0
 800acae:	dbec      	blt.n	800ac8a <__swhatbuf_r+0x12>
 800acb0:	9901      	ldr	r1, [sp, #4]
 800acb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800acb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800acba:	4259      	negs	r1, r3
 800acbc:	4159      	adcs	r1, r3
 800acbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acc2:	e7eb      	b.n	800ac9c <__swhatbuf_r+0x24>

0800acc4 <__smakebuf_r>:
 800acc4:	898b      	ldrh	r3, [r1, #12]
 800acc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acc8:	079d      	lsls	r5, r3, #30
 800acca:	4606      	mov	r6, r0
 800accc:	460c      	mov	r4, r1
 800acce:	d507      	bpl.n	800ace0 <__smakebuf_r+0x1c>
 800acd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	6123      	str	r3, [r4, #16]
 800acd8:	2301      	movs	r3, #1
 800acda:	6163      	str	r3, [r4, #20]
 800acdc:	b002      	add	sp, #8
 800acde:	bd70      	pop	{r4, r5, r6, pc}
 800ace0:	ab01      	add	r3, sp, #4
 800ace2:	466a      	mov	r2, sp
 800ace4:	f7ff ffc8 	bl	800ac78 <__swhatbuf_r>
 800ace8:	9900      	ldr	r1, [sp, #0]
 800acea:	4605      	mov	r5, r0
 800acec:	4630      	mov	r0, r6
 800acee:	f7ff facb 	bl	800a288 <_malloc_r>
 800acf2:	b948      	cbnz	r0, 800ad08 <__smakebuf_r+0x44>
 800acf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf8:	059a      	lsls	r2, r3, #22
 800acfa:	d4ef      	bmi.n	800acdc <__smakebuf_r+0x18>
 800acfc:	f023 0303 	bic.w	r3, r3, #3
 800ad00:	f043 0302 	orr.w	r3, r3, #2
 800ad04:	81a3      	strh	r3, [r4, #12]
 800ad06:	e7e3      	b.n	800acd0 <__smakebuf_r+0xc>
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	6020      	str	r0, [r4, #0]
 800ad0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad10:	81a3      	strh	r3, [r4, #12]
 800ad12:	9b00      	ldr	r3, [sp, #0]
 800ad14:	6163      	str	r3, [r4, #20]
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	6120      	str	r0, [r4, #16]
 800ad1a:	b15b      	cbz	r3, 800ad34 <__smakebuf_r+0x70>
 800ad1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad20:	4630      	mov	r0, r6
 800ad22:	f000 f81d 	bl	800ad60 <_isatty_r>
 800ad26:	b128      	cbz	r0, 800ad34 <__smakebuf_r+0x70>
 800ad28:	89a3      	ldrh	r3, [r4, #12]
 800ad2a:	f023 0303 	bic.w	r3, r3, #3
 800ad2e:	f043 0301 	orr.w	r3, r3, #1
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	431d      	orrs	r5, r3
 800ad38:	81a5      	strh	r5, [r4, #12]
 800ad3a:	e7cf      	b.n	800acdc <__smakebuf_r+0x18>

0800ad3c <_fstat_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_fstat_r+0x20>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	4611      	mov	r1, r2
 800ad48:	602b      	str	r3, [r5, #0]
 800ad4a:	f7f6 f846 	bl	8000dda <_fstat>
 800ad4e:	1c43      	adds	r3, r0, #1
 800ad50:	d102      	bne.n	800ad58 <_fstat_r+0x1c>
 800ad52:	682b      	ldr	r3, [r5, #0]
 800ad54:	b103      	cbz	r3, 800ad58 <_fstat_r+0x1c>
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	bd38      	pop	{r3, r4, r5, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20002078 	.word	0x20002078

0800ad60 <_isatty_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d06      	ldr	r5, [pc, #24]	; (800ad7c <_isatty_r+0x1c>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	f7f6 f845 	bl	8000dfa <_isatty>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_isatty_r+0x1a>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_isatty_r+0x1a>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	20002078 	.word	0x20002078

0800ad80 <_init>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	bf00      	nop
 800ad84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad86:	bc08      	pop	{r3}
 800ad88:	469e      	mov	lr, r3
 800ad8a:	4770      	bx	lr

0800ad8c <_fini>:
 800ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8e:	bf00      	nop
 800ad90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad92:	bc08      	pop	{r3}
 800ad94:	469e      	mov	lr, r3
 800ad96:	4770      	bx	lr
