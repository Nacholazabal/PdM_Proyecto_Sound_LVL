
PdM_Proyecto_Sound_LVL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e014  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800e1e4  0800e1e4  0001e1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6d0  0800e6d0  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6d0  0800e6d0  0001e6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6d8  0800e6d8  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6d8  0800e6d8  0001e6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6dc  0800e6dc  0001e6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800e6e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  20000168  0800e848  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20002344  0800e848  00022344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021260  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052a6  00000000  00000000  0004143b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd0  00000000  00000000  000466e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000162e  00000000  00000000  000483b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000295db  00000000  00000000  000499e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002801a  00000000  00000000  00072fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e84eb  00000000  00000000  0009afdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000084b8  00000000  00000000  001834c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0018b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e1cc 	.word	0x0800e1cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	0800e1cc 	.word	0x0800e1cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd64 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f814 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9ca 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f9a8 	bl	8000940 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 f97c 	bl	80008ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005f4:	f000 f878 	bl	80006e8 <MX_ADC1_Init>
  MX_SPI3_Init();
 80005f8:	f000 f8f6 	bl	80007e8 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80005fc:	f00b fa42 	bl	800ba84 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000600:	f000 f8c4 	bl	800078c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000604:	f000 f926 	bl	8000854 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  project_main();
 8000608:	f00b fa36 	bl	800ba78 <project_main>
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x30>
	...

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00c f941 	bl	800c8a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <SystemClock_Config+0xd0>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd4>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000688:	2348      	movs	r3, #72	; 0x48
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f005 f9ab 	bl	80059f8 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a8:	f000 fa10 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fb21 	bl	8004d10 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006d4:	f000 f9fa 	bl	8000acc <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC1_Init+0x9c>)
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <MX_ADC1_Init+0xa0>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC1_Init+0x9c>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC1_Init+0x9c>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC1_Init+0x9c>)
 800072a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000738:	2201      	movs	r2, #1
 800073a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ADC1_Init+0x9c>)
 800073e:	2201      	movs	r2, #1
 8000740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <MX_ADC1_Init+0x9c>)
 800074c:	f000 fd44 	bl	80011d8 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000756:	f000 f9b9 	bl	8000acc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075a:	2301      	movs	r3, #1
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_ADC1_Init+0x9c>)
 800076c:	f000 fe9c 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000776:	f000 f9a9 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000184 	.word	0x20000184
 8000788:	40012000 	.word	0x40012000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f001 ffdf 	bl	800278c <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f97a 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000022c 	.word	0x2000022c
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_SPI3_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <MX_SPI3_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI3_Init+0x64>)
 80007f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI3_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_SPI3_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI3_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI3_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI3_Init+0x64>)
 8000814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000818:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI3_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_SPI3_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI3_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_SPI3_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI3_Init+0x64>)
 8000834:	220a      	movs	r2, #10
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_SPI3_Init+0x64>)
 800083a:	f005 fb7b 	bl	8005f34 <HAL_SPI_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000844:	f000 f942 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000280 	.word	0x20000280
 8000850:	40003c00 	.word	0x40003c00

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_TIM2_Init+0x94>)
 800087a:	2253      	movs	r2, #83	; 0x53
 800087c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000886:	f240 32e7 	movw	r2, #999	; 0x3e7
 800088a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_TIM2_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <MX_TIM2_Init+0x94>)
 800089a:	f005 fbd4 	bl	8006046 <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008a4:	f000 f912 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_TIM2_Init+0x94>)
 80008b6:	f005 fc7d 	bl	80061b4 <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 f904 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008c4:	2320      	movs	r3, #32
 80008c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_TIM2_Init+0x94>)
 80008d2:	f005 fe7d 	bl	80065d0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f8f6 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200002d8 	.word	0x200002d8

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f005 fed0 	bl	80066c8 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f8cd 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000320 	.word	0x20000320
 800093c:	40004400 	.word	0x40004400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <MX_DMA_Init+0x3c>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2038      	movs	r0, #56	; 0x38
 8000968:	f001 f929 	bl	8001bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800096c:	2038      	movs	r0, #56	; 0x38
 800096e:	f001 f942 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b48      	ldr	r3, [pc, #288]	; (8000abc <MX_GPIO_Init+0x13c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a47      	ldr	r2, [pc, #284]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b45      	ldr	r3, [pc, #276]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a40      	ldr	r2, [pc, #256]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a39      	ldr	r2, [pc, #228]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b33      	ldr	r3, [pc, #204]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a32      	ldr	r2, [pc, #200]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <MX_GPIO_Init+0x13c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <MX_GPIO_Init+0x13c>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <MX_GPIO_Init+0x13c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <MX_GPIO_Init+0x140>)
 8000a28:	f001 fe96 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a32:	4824      	ldr	r0, [pc, #144]	; (8000ac4 <MX_GPIO_Init+0x144>)
 8000a34:	f001 fe90 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x148>)
 8000a3e:	f001 fe8b 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a48:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <MX_GPIO_Init+0x144>)
 8000a5a:	f001 fce9 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0x140>)
 8000a76:	f001 fcdb 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <MX_GPIO_Init+0x144>)
 8000a94:	f001 fccc 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_GPIO_Init+0x148>)
 8000ab0:	f001 fcbe 	bl	8002430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020c00 	.word	0x40020c00

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b16:	2007      	movs	r0, #7
 8000b18:	f001 f846 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a2f      	ldr	r2, [pc, #188]	; (8000c04 <HAL_ADC_MspInit+0xdc>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d157      	bne.n	8000bfa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a2d      	ldr	r2, [pc, #180]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b86:	2303      	movs	r3, #3
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	481d      	ldr	r0, [pc, #116]	; (8000c0c <HAL_ADC_MspInit+0xe4>)
 8000b96:	f001 fc4b 	bl	8002430 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <HAL_ADC_MspInit+0xec>)
 8000b9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000be0:	f001 f824 	bl	8001c2c <HAL_DMA_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000bea:	f7ff ff6f 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40012000 	.word	0x40012000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	200001cc 	.word	0x200001cc
 8000c14:	40026410 	.word	0x40026410

08000c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12c      	bne.n	8000c94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <HAL_I2C_MspInit+0x8c>)
 8000c74:	f001 fbdc 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_SPI_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12c      	bne.n	8000d24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d14:	2306      	movs	r3, #6
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_SPI_MspInit+0x8c>)
 8000d20:	f001 fb86 	bl	8002430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40003c00 	.word	0x40003c00
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800

08000d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d48:	d10d      	bne.n	8000d66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_TIM_Base_MspInit+0x3c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_TIM_Base_MspInit+0x3c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_TIM_Base_MspInit+0x3c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_UART_MspInit+0x94>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d133      	bne.n	8000e02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de2:	2307      	movs	r3, #7
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <HAL_UART_MspInit+0x9c>)
 8000dee:	f001 fb1f 	bl	8002430 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2026      	movs	r0, #38	; 0x26
 8000df8:	f000 fee1 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dfc:	2026      	movs	r0, #38	; 0x26
 8000dfe:	f000 fefa 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f974 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <USART2_IRQHandler+0x10>)
 8000e72:	f005 fd05 	bl	8006880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000320 	.word	0x20000320

08000e80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA2_Stream0_IRQHandler+0x10>)
 8000e86:	f001 f869 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001cc 	.word	0x200001cc

08000e94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <OTG_FS_IRQHandler+0x10>)
 8000e9a:	f002 fde6 	bl	8003a6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20001af4 	.word	0x20001af4

08000ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return 1;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_kill>:

int _kill(int pid, int sig)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ec2:	f00b fd3f 	bl	800c944 <__errno>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2216      	movs	r2, #22
 8000eca:	601a      	str	r2, [r3, #0]
  return -1;
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_exit>:

void _exit (int status)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ffe7 	bl	8000eb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eea:	e7fe      	b.n	8000eea <_exit+0x12>

08000eec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e00a      	b.n	8000f14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000efe:	f3af 8000 	nop.w
 8000f02:	4601      	mov	r1, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	b2ca      	uxtb	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf0      	blt.n	8000efe <_read+0x12>
  }

  return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e009      	b.n	8000f4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf1      	blt.n	8000f38 <_write+0x12>
  }
  return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_close>:

int _close(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f86:	605a      	str	r2, [r3, #4]
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_isatty>:

int _isatty(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f00b fca4 	bl	800c944 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20020000 	.word	0x20020000
 8001028:	00000400 	.word	0x00000400
 800102c:	20000368 	.word	0x20000368
 8001030:	20002348 	.word	0x20002348

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800105c:	f7ff ffea 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	; (80010a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001086:	f00b fc63 	bl	800c950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff faa7 	bl	80005dc <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800109c:	0800e6e0 	.word	0x0800e6e0
  ldr r2, =_sbss
 80010a0:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80010a4:	20002344 	.word	0x20002344

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 fd67 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fcfa 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fd7f 	bl	8001c12 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 fd47 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	2000036c 	.word	0x2000036c

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000036c 	.word	0x2000036c

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008

080011d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e033      	b.n	8001256 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d109      	bne.n	800120a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fc96 	bl	8000b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	d118      	bne.n	8001248 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800121e:	f023 0302 	bic.w	r3, r3, #2
 8001222:	f043 0202 	orr.w	r2, r3, #2
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fa6e 	bl	800170c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f023 0303 	bic.w	r3, r3, #3
 800123e:	f043 0201 	orr.w	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
 8001246:	e001      	b.n	800124c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_ADC_Start_DMA+0x1e>
 800127a:	2302      	movs	r3, #2
 800127c:	e0e9      	b.n	8001452 <HAL_ADC_Start_DMA+0x1f2>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b01      	cmp	r3, #1
 8001292:	d018      	beq.n	80012c6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0201 	orr.w	r2, r2, #1
 80012a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012a4:	4b6d      	ldr	r3, [pc, #436]	; (800145c <HAL_ADC_Start_DMA+0x1fc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a6d      	ldr	r2, [pc, #436]	; (8001460 <HAL_ADC_Start_DMA+0x200>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0c9a      	lsrs	r2, r3, #18
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	3b01      	subs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d4:	d107      	bne.n	80012e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012e4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	f040 80a1 	bne.w	8001438 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001320:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001334:	d106      	bne.n	8001344 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f023 0206 	bic.w	r2, r3, #6
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
 8001342:	e002      	b.n	800134a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_ADC_Start_DMA+0x204>)
 8001354:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	4a43      	ldr	r2, [pc, #268]	; (8001468 <HAL_ADC_Start_DMA+0x208>)
 800135c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	4a42      	ldr	r2, [pc, #264]	; (800146c <HAL_ADC_Start_DMA+0x20c>)
 8001364:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	4a41      	ldr	r2, [pc, #260]	; (8001470 <HAL_ADC_Start_DMA+0x210>)
 800136c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001376:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001386:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001396:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	334c      	adds	r3, #76	; 0x4c
 80013a2:	4619      	mov	r1, r3
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f000 fcee 	bl	8001d88 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d12a      	bne.n	800140e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2d      	ldr	r2, [pc, #180]	; (8001474 <HAL_ADC_Start_DMA+0x214>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d015      	beq.n	80013ee <HAL_ADC_Start_DMA+0x18e>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <HAL_ADC_Start_DMA+0x218>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d105      	bne.n	80013d8 <HAL_ADC_Start_DMA+0x178>
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_ADC_Start_DMA+0x204>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00a      	beq.n	80013ee <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_ADC_Start_DMA+0x21c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d136      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <HAL_ADC_Start_DMA+0x204>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d130      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d129      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e020      	b.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_ADC_Start_DMA+0x214>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d11b      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d114      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	e00b      	b.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f043 0210 	orr.w	r2, r3, #16
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000000 	.word	0x20000000
 8001460:	431bde83 	.word	0x431bde83
 8001464:	40012300 	.word	0x40012300
 8001468:	08001905 	.word	0x08001905
 800146c:	080019bf 	.word	0x080019bf
 8001470:	080019db 	.word	0x080019db
 8001474:	40012000 	.word	0x40012000
 8001478:	40012100 	.word	0x40012100
 800147c:	40012200 	.word	0x40012200

08001480 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e113      	b.n	80016ec <HAL_ADC_ConfigChannel+0x244>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d925      	bls.n	8001520 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68d9      	ldr	r1, [r3, #12]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	3b1e      	subs	r3, #30
 80014ea:	2207      	movs	r2, #7
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43da      	mvns	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	400a      	ands	r2, r1
 80014f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68d9      	ldr	r1, [r3, #12]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	4603      	mov	r3, r0
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4403      	add	r3, r0
 8001512:	3b1e      	subs	r3, #30
 8001514:	409a      	lsls	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	e022      	b.n	8001566 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6919      	ldr	r1, [r3, #16]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	2207      	movs	r2, #7
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	4603      	mov	r3, r0
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4403      	add	r3, r0
 800155c:	409a      	lsls	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b06      	cmp	r3, #6
 800156c:	d824      	bhi.n	80015b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b05      	subs	r3, #5
 8001580:	221f      	movs	r2, #31
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	400a      	ands	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b05      	subs	r3, #5
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
 80015b6:	e04c      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d824      	bhi.n	800160a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	3b23      	subs	r3, #35	; 0x23
 80015d2:	221f      	movs	r2, #31
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43da      	mvns	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	400a      	ands	r2, r1
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b23      	subs	r3, #35	; 0x23
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
 8001608:	e023      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	3b41      	subs	r3, #65	; 0x41
 800161c:	221f      	movs	r2, #31
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	400a      	ands	r2, r1
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b41      	subs	r3, #65	; 0x41
 8001646:	fa00 f203 	lsl.w	r2, r0, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_ADC_ConfigChannel+0x250>)
 8001654:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a28      	ldr	r2, [pc, #160]	; (80016fc <HAL_ADC_ConfigChannel+0x254>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d10f      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1d8>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b12      	cmp	r3, #18
 8001666:	d10b      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_ADC_ConfigChannel+0x254>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12b      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x23a>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_ADC_ConfigChannel+0x258>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d003      	beq.n	800169c <HAL_ADC_ConfigChannel+0x1f4>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b11      	cmp	r3, #17
 800169a:	d122      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_ADC_ConfigChannel+0x258>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d111      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_ADC_ConfigChannel+0x25c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_ADC_ConfigChannel+0x260>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	0c9a      	lsrs	r2, r3, #18
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016d4:	e002      	b.n	80016dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40012300 	.word	0x40012300
 80016fc:	40012000 	.word	0x40012000
 8001700:	10000012 	.word	0x10000012
 8001704:	20000000 	.word	0x20000000
 8001708:	431bde83 	.word	0x431bde83

0800170c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <ADC_Init+0x1f0>)
 8001716:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	431a      	orrs	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	021a      	lsls	r2, r3, #8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	4a58      	ldr	r2, [pc, #352]	; (8001900 <ADC_Init+0x1f4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d022      	beq.n	80017ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6899      	ldr	r1, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6899      	ldr	r1, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	e00f      	b.n	800180a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001808:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0202 	bic.w	r2, r2, #2
 8001818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7e1b      	ldrb	r3, [r3, #24]
 8001824:	005a      	lsls	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01b      	beq.n	8001870 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001846:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001856:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6859      	ldr	r1, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	3b01      	subs	r3, #1
 8001864:	035a      	lsls	r2, r3, #13
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	e007      	b.n	8001880 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800187e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	3b01      	subs	r3, #1
 800189c:	051a      	lsls	r2, r3, #20
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018c2:	025a      	lsls	r2, r3, #9
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6899      	ldr	r1, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	029a      	lsls	r2, r3, #10
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	609a      	str	r2, [r3, #8]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40012300 	.word	0x40012300
 8001900:	0f000001 	.word	0x0f000001

08001904 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800191a:	2b00      	cmp	r3, #0
 800191c:	d13c      	bne.n	8001998 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d12b      	bne.n	8001990 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	d127      	bne.n	8001990 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001958:	2b00      	cmp	r3, #0
 800195a:	d119      	bne.n	8001990 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0220 	bic.w	r2, r2, #32
 800196a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f009 fbe7 	bl	800b164 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001996:	e00e      	b.n	80019b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fd75 	bl	8001494 <HAL_ADC_ErrorCallback>
}
 80019aa:	e004      	b.n	80019b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	4798      	blx	r3
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff fd57 	bl	8001480 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f043 0204 	orr.w	r2, r3, #4
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fd4a 	bl	8001494 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <__NVIC_EnableIRQ+0x38>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff29 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff3e 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff31 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa2 	bl	8001b64 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff fa9e 	bl	8001178 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e099      	b.n	8001d7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c68:	e00f      	b.n	8001c8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c6a:	f7ff fa85 	bl	8001178 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d908      	bls.n	8001c8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e078      	b.n	8001d7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e8      	bne.n	8001c6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_DMA_Init+0x158>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d107      	bne.n	8001cf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	4313      	orrs	r3, r2
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f023 0307 	bic.w	r3, r3, #7
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d117      	bne.n	8001d4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00e      	beq.n	8001d4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fb01 	bl	8002338 <DMA_CheckFifoParam>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e016      	b.n	8001d7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fab8 	bl	80022cc <DMA_CalcBaseAndBitshift>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	223f      	movs	r2, #63	; 0x3f
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	f010803f 	.word	0xf010803f

08001d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_DMA_Start_IT+0x26>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e040      	b.n	8001e30 <HAL_DMA_Start_IT+0xa8>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d12f      	bne.n	8001e22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fa4a 	bl	8002270 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	223f      	movs	r2, #63	; 0x3f
 8001de2:	409a      	lsls	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0216 	orr.w	r2, r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0208 	orr.w	r2, r2, #8
 8001e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e005      	b.n	8001e2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e46:	f7ff f997 	bl	8001178 <HAL_GetTick>
 8001e4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d008      	beq.n	8001e6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e052      	b.n	8001f10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0216 	bic.w	r2, r2, #22
 8001e78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d103      	bne.n	8001e9a <HAL_DMA_Abort+0x62>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0208 	bic.w	r2, r2, #8
 8001ea8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eba:	e013      	b.n	8001ee4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ebc:	f7ff f95c 	bl	8001178 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d90c      	bls.n	8001ee4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e015      	b.n	8001f10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1e4      	bne.n	8001ebc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	223f      	movs	r2, #63	; 0x3f
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d004      	beq.n	8001f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00c      	b.n	8001f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2205      	movs	r2, #5
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f68:	4b8e      	ldr	r3, [pc, #568]	; (80021a4 <HAL_DMA_IRQHandler+0x248>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a8e      	ldr	r2, [pc, #568]	; (80021a8 <HAL_DMA_IRQHandler+0x24c>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	2208      	movs	r2, #8
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01a      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0204 	bic.w	r2, r2, #4
 8001fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	2201      	movs	r2, #1
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d012      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2201      	movs	r2, #1
 8001fec:	409a      	lsls	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0202 	orr.w	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2204      	movs	r2, #4
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2204      	movs	r2, #4
 8002022:	409a      	lsls	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f043 0204 	orr.w	r2, r3, #4
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2210      	movs	r2, #16
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d043      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03c      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	2210      	movs	r2, #16
 8002058:	409a      	lsls	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d018      	beq.n	800209e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d024      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
 800208a:	e01f      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
 800209c:	e016      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0208 	bic.w	r2, r2, #8
 80020ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2220      	movs	r2, #32
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 808f 	beq.w	80021fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8087 	beq.w	80021fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2220      	movs	r2, #32
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b05      	cmp	r3, #5
 8002104:	d136      	bne.n	8002174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0216 	bic.w	r2, r2, #22
 8002114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <HAL_DMA_IRQHandler+0x1da>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0208 	bic.w	r2, r2, #8
 8002144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214a:	223f      	movs	r2, #63	; 0x3f
 800214c:	409a      	lsls	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002166:	2b00      	cmp	r3, #0
 8002168:	d07e      	beq.n	8002268 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
        }
        return;
 8002172:	e079      	b.n	8002268 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01d      	beq.n	80021be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10d      	bne.n	80021ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	2b00      	cmp	r3, #0
 8002196:	d031      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e02c      	b.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000
 80021a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
 80021bc:	e01e      	b.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10f      	bne.n	80021ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0210 	bic.w	r2, r2, #16
 80021da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	2b00      	cmp	r3, #0
 8002202:	d032      	beq.n	800226a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d022      	beq.n	8002256 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2205      	movs	r2, #5
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3301      	adds	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	d307      	bcc.n	8002244 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f2      	bne.n	8002228 <HAL_DMA_IRQHandler+0x2cc>
 8002242:	e000      	b.n	8002246 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002244:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
 8002266:	e000      	b.n	800226a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002268:	bf00      	nop
    }
  }
}
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800228c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d108      	bne.n	80022b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ae:	e007      	b.n	80022c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b10      	subs	r3, #16
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <DMA_CalcBaseAndBitshift+0x64>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <DMA_CalcBaseAndBitshift+0x68>)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d909      	bls.n	800230e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	; 0x58
 800230c:	e007      	b.n	800231e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	aaaaaaab 	.word	0xaaaaaaab
 8002334:	0800e518 	.word	0x0800e518

08002338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11f      	bne.n	8002392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d856      	bhi.n	8002406 <DMA_CheckFifoParam+0xce>
 8002358:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <DMA_CheckFifoParam+0x28>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002371 	.word	0x08002371
 8002364:	08002383 	.word	0x08002383
 8002368:	08002371 	.word	0x08002371
 800236c:	08002407 	.word	0x08002407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d046      	beq.n	800240a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002380:	e043      	b.n	800240a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800238a:	d140      	bne.n	800240e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e03d      	b.n	800240e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239a:	d121      	bne.n	80023e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d837      	bhi.n	8002412 <DMA_CheckFifoParam+0xda>
 80023a2:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <DMA_CheckFifoParam+0x70>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023bf 	.word	0x080023bf
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	080023d1 	.word	0x080023d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e030      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d025      	beq.n	8002416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e022      	b.n	8002416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023de:	e01c      	b.n	800241a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d903      	bls.n	80023ee <DMA_CheckFifoParam+0xb6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ec:	e018      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      break;
 80023f2:	e015      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      break;
 8002404:	e00b      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 8002406:	bf00      	nop
 8002408:	e00a      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e008      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e006      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e004      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;   
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
    }
  } 
  
  return status; 
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e165      	b.n	8002718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	f040 8154 	bne.w	8002712 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d005      	beq.n	8002482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	2b02      	cmp	r3, #2
 8002480:	d130      	bne.n	80024e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 0201 	and.w	r2, r3, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d017      	beq.n	8002520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d123      	bne.n	8002574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	08da      	lsrs	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3208      	adds	r2, #8
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80ae 	beq.w	8002712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_GPIO_Init+0x300>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a5c      	ldr	r2, [pc, #368]	; (8002730 <HAL_GPIO_Init+0x300>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b5a      	ldr	r3, [pc, #360]	; (8002730 <HAL_GPIO_Init+0x300>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d2:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_GPIO_Init+0x304>)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	3302      	adds	r3, #2
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4f      	ldr	r2, [pc, #316]	; (8002738 <HAL_GPIO_Init+0x308>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d025      	beq.n	800264a <HAL_GPIO_Init+0x21a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4e      	ldr	r2, [pc, #312]	; (800273c <HAL_GPIO_Init+0x30c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <HAL_GPIO_Init+0x216>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4d      	ldr	r2, [pc, #308]	; (8002740 <HAL_GPIO_Init+0x310>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x212>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4c      	ldr	r2, [pc, #304]	; (8002744 <HAL_GPIO_Init+0x314>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x20e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4b      	ldr	r2, [pc, #300]	; (8002748 <HAL_GPIO_Init+0x318>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x20a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4a      	ldr	r2, [pc, #296]	; (800274c <HAL_GPIO_Init+0x31c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x206>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a49      	ldr	r2, [pc, #292]	; (8002750 <HAL_GPIO_Init+0x320>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x202>
 800262e:	2306      	movs	r3, #6
 8002630:	e00c      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002632:	2307      	movs	r3, #7
 8002634:	e00a      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x21c>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x21c>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x21c>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_GPIO_Init+0x304>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266a:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <HAL_GPIO_Init+0x324>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268e:	4a31      	ldr	r2, [pc, #196]	; (8002754 <HAL_GPIO_Init+0x324>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_GPIO_Init+0x324>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b8:	4a26      	ldr	r2, [pc, #152]	; (8002754 <HAL_GPIO_Init+0x324>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_GPIO_Init+0x324>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e2:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_GPIO_Init+0x324>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_GPIO_Init+0x324>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270c:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_GPIO_Init+0x324>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f ae96 	bls.w	800244c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40021400 	.word	0x40021400
 8002750:	40021800 	.word	0x40021800
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
 8002764:	4613      	mov	r3, r2
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002774:	e003      	b.n	800277e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e12b      	b.n	80029f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe fa30 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	; 0x24
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027f0:	f002 fb80 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 80027f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a81      	ldr	r2, [pc, #516]	; (8002a00 <HAL_I2C_Init+0x274>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d807      	bhi.n	8002810 <HAL_I2C_Init+0x84>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a80      	ldr	r2, [pc, #512]	; (8002a04 <HAL_I2C_Init+0x278>)
 8002804:	4293      	cmp	r3, r2
 8002806:	bf94      	ite	ls
 8002808:	2301      	movls	r3, #1
 800280a:	2300      	movhi	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e006      	b.n	800281e <HAL_I2C_Init+0x92>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a7d      	ldr	r2, [pc, #500]	; (8002a08 <HAL_I2C_Init+0x27c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	bf94      	ite	ls
 8002818:	2301      	movls	r3, #1
 800281a:	2300      	movhi	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0e7      	b.n	80029f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a78      	ldr	r2, [pc, #480]	; (8002a0c <HAL_I2C_Init+0x280>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0c9b      	lsrs	r3, r3, #18
 8002830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a6a      	ldr	r2, [pc, #424]	; (8002a00 <HAL_I2C_Init+0x274>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d802      	bhi.n	8002860 <HAL_I2C_Init+0xd4>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3301      	adds	r3, #1
 800285e:	e009      	b.n	8002874 <HAL_I2C_Init+0xe8>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	4a69      	ldr	r2, [pc, #420]	; (8002a10 <HAL_I2C_Init+0x284>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	3301      	adds	r3, #1
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	430b      	orrs	r3, r1
 800287a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	495c      	ldr	r1, [pc, #368]	; (8002a00 <HAL_I2C_Init+0x274>)
 8002890:	428b      	cmp	r3, r1
 8002892:	d819      	bhi.n	80028c8 <HAL_I2C_Init+0x13c>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e59      	subs	r1, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a2:	1c59      	adds	r1, r3, #1
 80028a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028a8:	400b      	ands	r3, r1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_I2C_Init+0x138>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1e59      	subs	r1, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c2:	e051      	b.n	8002968 <HAL_I2C_Init+0x1dc>
 80028c4:	2304      	movs	r3, #4
 80028c6:	e04f      	b.n	8002968 <HAL_I2C_Init+0x1dc>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d111      	bne.n	80028f4 <HAL_I2C_Init+0x168>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1e58      	subs	r0, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	440b      	add	r3, r1
 80028de:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e012      	b.n	800291a <HAL_I2C_Init+0x18e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1e58      	subs	r0, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	0099      	lsls	r1, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	fbb0 f3f3 	udiv	r3, r0, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Init+0x196>
 800291e:	2301      	movs	r3, #1
 8002920:	e022      	b.n	8002968 <HAL_I2C_Init+0x1dc>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10e      	bne.n	8002948 <HAL_I2C_Init+0x1bc>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1e58      	subs	r0, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6859      	ldr	r1, [r3, #4]
 8002932:	460b      	mov	r3, r1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	440b      	add	r3, r1
 8002938:	fbb0 f3f3 	udiv	r3, r0, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002946:	e00f      	b.n	8002968 <HAL_I2C_Init+0x1dc>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	0099      	lsls	r1, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	fbb0 f3f3 	udiv	r3, r0, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	6809      	ldr	r1, [r1, #0]
 800296c:	4313      	orrs	r3, r2
 800296e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002996:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6911      	ldr	r1, [r2, #16]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68d2      	ldr	r2, [r2, #12]
 80029a2:	4311      	orrs	r1, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	000186a0 	.word	0x000186a0
 8002a04:	001e847f 	.word	0x001e847f
 8002a08:	003d08ff 	.word	0x003d08ff
 8002a0c:	431bde83 	.word	0x431bde83
 8002a10:	10624dd3 	.word	0x10624dd3

08002a14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	461a      	mov	r2, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	817b      	strh	r3, [r7, #10]
 8002a26:	460b      	mov	r3, r1
 8002a28:	813b      	strh	r3, [r7, #8]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a2e:	f7fe fba3 	bl	8001178 <HAL_GetTick>
 8002a32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	f040 80d9 	bne.w	8002bf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2319      	movs	r3, #25
 8002a48:	2201      	movs	r2, #1
 8002a4a:	496d      	ldr	r1, [pc, #436]	; (8002c00 <HAL_I2C_Mem_Write+0x1ec>)
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fc8b 	bl	8003368 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e0cc      	b.n	8002bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_I2C_Mem_Write+0x56>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e0c5      	b.n	8002bf6 <HAL_I2C_Mem_Write+0x1e2>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d007      	beq.n	8002a90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2221      	movs	r2, #33	; 0x21
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2240      	movs	r2, #64	; 0x40
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a4d      	ldr	r2, [pc, #308]	; (8002c04 <HAL_I2C_Mem_Write+0x1f0>)
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ad2:	88f8      	ldrh	r0, [r7, #6]
 8002ad4:	893a      	ldrh	r2, [r7, #8]
 8002ad6:	8979      	ldrh	r1, [r7, #10]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 fac2 	bl	800306c <I2C_RequestMemoryWrite>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d052      	beq.n	8002b94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e081      	b.n	8002bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fd50 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d107      	bne.n	8002b1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06b      	b.n	8002bf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d11b      	bne.n	8002b94 <HAL_I2C_Mem_Write+0x180>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d017      	beq.n	8002b94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1aa      	bne.n	8002af2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fd43 	bl	800362c <I2C_WaitOnBTFFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d107      	bne.n	8002bc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e016      	b.n	8002bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	00100002 	.word	0x00100002
 8002c04:	ffff0000 	.word	0xffff0000

08002c08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08c      	sub	sp, #48	; 0x30
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c22:	f7fe faa9 	bl	8001178 <HAL_GetTick>
 8002c26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	f040 8214 	bne.w	800305e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2319      	movs	r3, #25
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	497b      	ldr	r1, [pc, #492]	; (8002e2c <HAL_I2C_Mem_Read+0x224>)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 fb91 	bl	8003368 <I2C_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e207      	b.n	8003060 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Mem_Read+0x56>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e200      	b.n	8003060 <HAL_I2C_Mem_Read+0x458>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d007      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2222      	movs	r2, #34	; 0x22
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a5b      	ldr	r2, [pc, #364]	; (8002e30 <HAL_I2C_Mem_Read+0x228>)
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cc6:	88f8      	ldrh	r0, [r7, #6]
 8002cc8:	893a      	ldrh	r2, [r7, #8]
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fa5e 	bl	8003198 <I2C_RequestMemoryRead>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e1bc      	b.n	8003060 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d113      	bne.n	8002d16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	623b      	str	r3, [r7, #32]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	623b      	str	r3, [r7, #32]
 8002d02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e190      	b.n	8003038 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d11b      	bne.n	8002d56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	e170      	b.n	8003038 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d11b      	bne.n	8002d96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	e150      	b.n	8003038 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002dac:	e144      	b.n	8003038 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	f200 80f1 	bhi.w	8002f9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d123      	bne.n	8002e08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fc79 	bl	80036bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e145      	b.n	8003060 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e06:	e117      	b.n	8003038 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d14e      	bne.n	8002eae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	2200      	movs	r2, #0
 8002e18:	4906      	ldr	r1, [pc, #24]	; (8002e34 <HAL_I2C_Mem_Read+0x22c>)
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 faa4 	bl	8003368 <I2C_WaitOnFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e11a      	b.n	8003060 <HAL_I2C_Mem_Read+0x458>
 8002e2a:	bf00      	nop
 8002e2c:	00100002 	.word	0x00100002
 8002e30:	ffff0000 	.word	0xffff0000
 8002e34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eac:	e0c4      	b.n	8003038 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	496c      	ldr	r1, [pc, #432]	; (8003068 <HAL_I2C_Mem_Read+0x460>)
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fa55 	bl	8003368 <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cb      	b.n	8003060 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	2200      	movs	r2, #0
 8002f12:	4955      	ldr	r1, [pc, #340]	; (8003068 <HAL_I2C_Mem_Read+0x460>)
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fa27 	bl	8003368 <I2C_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e09d      	b.n	8003060 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f98:	e04e      	b.n	8003038 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fb8c 	bl	80036bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e058      	b.n	8003060 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d124      	bne.n	8003038 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d107      	bne.n	8003006 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003004:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	2b00      	cmp	r3, #0
 800303e:	f47f aeb6 	bne.w	8002dae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e000      	b.n	8003060 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
  }
}
 8003060:	4618      	mov	r0, r3
 8003062:	3728      	adds	r7, #40	; 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	00010004 	.word	0x00010004

0800306c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	817b      	strh	r3, [r7, #10]
 800307e:	460b      	mov	r3, r1
 8003080:	813b      	strh	r3, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	2200      	movs	r2, #0
 800309e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f960 	bl	8003368 <I2C_WaitOnFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030bc:	d103      	bne.n	80030c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e05f      	b.n	800318a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ca:	897b      	ldrh	r3, [r7, #10]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	6a3a      	ldr	r2, [r7, #32]
 80030de:	492d      	ldr	r1, [pc, #180]	; (8003194 <I2C_RequestMemoryWrite+0x128>)
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f9bb 	bl	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e04c      	b.n	800318a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fa46 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00d      	beq.n	8003132 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2b04      	cmp	r3, #4
 800311c:	d107      	bne.n	800312e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800312c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e02b      	b.n	800318a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d105      	bne.n	8003144 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003138:	893b      	ldrh	r3, [r7, #8]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	611a      	str	r2, [r3, #16]
 8003142:	e021      	b.n	8003188 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003144:	893b      	ldrh	r3, [r7, #8]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	b29b      	uxth	r3, r3
 800314a:	b2da      	uxtb	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003154:	6a39      	ldr	r1, [r7, #32]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fa20 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b04      	cmp	r3, #4
 8003168:	d107      	bne.n	800317a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e005      	b.n	800318a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800317e:	893b      	ldrh	r3, [r7, #8]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	00010002 	.word	0x00010002

08003198 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	4608      	mov	r0, r1
 80031a2:	4611      	mov	r1, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	4603      	mov	r3, r0
 80031a8:	817b      	strh	r3, [r7, #10]
 80031aa:	460b      	mov	r3, r1
 80031ac:	813b      	strh	r3, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	2200      	movs	r2, #0
 80031da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f8c2 	bl	8003368 <I2C_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00d      	beq.n	8003206 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f8:	d103      	bne.n	8003202 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0aa      	b.n	800335c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003206:	897b      	ldrh	r3, [r7, #10]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003214:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	6a3a      	ldr	r2, [r7, #32]
 800321a:	4952      	ldr	r1, [pc, #328]	; (8003364 <I2C_RequestMemoryRead+0x1cc>)
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f91d 	bl	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e097      	b.n	800335c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003244:	6a39      	ldr	r1, [r7, #32]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f9a8 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b04      	cmp	r3, #4
 8003258:	d107      	bne.n	800326a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003268:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e076      	b.n	800335c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d105      	bne.n	8003280 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003274:	893b      	ldrh	r3, [r7, #8]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	611a      	str	r2, [r3, #16]
 800327e:	e021      	b.n	80032c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003280:	893b      	ldrh	r3, [r7, #8]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	b29b      	uxth	r3, r3
 8003286:	b2da      	uxtb	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	6a39      	ldr	r1, [r7, #32]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f982 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d107      	bne.n	80032b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e050      	b.n	800335c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ba:	893b      	ldrh	r3, [r7, #8]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c6:	6a39      	ldr	r1, [r7, #32]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f967 	bl	800359c <I2C_WaitOnTXEFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d107      	bne.n	80032ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e035      	b.n	800335c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2200      	movs	r2, #0
 8003308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f82b 	bl	8003368 <I2C_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003326:	d103      	bne.n	8003330 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e013      	b.n	800335c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003334:	897b      	ldrh	r3, [r7, #10]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	4906      	ldr	r1, [pc, #24]	; (8003364 <I2C_RequestMemoryRead+0x1cc>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f886 	bl	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	00010002 	.word	0x00010002

08003368 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003378:	e048      	b.n	800340c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d044      	beq.n	800340c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003382:	f7fd fef9 	bl	8001178 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d139      	bne.n	800340c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10d      	bne.n	80033be <I2C_WaitOnFlagUntilTimeout+0x56>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	43da      	mvns	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	e00c      	b.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d116      	bne.n	800340c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f043 0220 	orr.w	r2, r3, #32
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e023      	b.n	8003454 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d10d      	bne.n	8003432 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	43da      	mvns	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	e00c      	b.n	800344c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	429a      	cmp	r2, r3
 8003450:	d093      	beq.n	800337a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800346a:	e071      	b.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347a:	d123      	bne.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003494:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e067      	b.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ca:	d041      	beq.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034cc:	f7fd fe54 	bl	8001178 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d302      	bcc.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d136      	bne.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d10c      	bne.n	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf14      	ite	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	2300      	moveq	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	e00b      	b.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e021      	b.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10c      	bne.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e00b      	b.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf14      	ite	ne
 8003586:	2301      	movne	r3, #1
 8003588:	2300      	moveq	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	f47f af6d 	bne.w	800346c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a8:	e034      	b.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f8e3 	bl	8003776 <I2C_IsAcknowledgeFailed>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e034      	b.n	8003624 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d028      	beq.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c2:	f7fd fdd9 	bl	8001178 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d302      	bcc.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11d      	bne.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d016      	beq.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e007      	b.n	8003624 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b80      	cmp	r3, #128	; 0x80
 8003620:	d1c3      	bne.n	80035aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003638:	e034      	b.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f89b 	bl	8003776 <I2C_IsAcknowledgeFailed>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e034      	b.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d028      	beq.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	f7fd fd91 	bl	8001178 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d302      	bcc.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11d      	bne.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d016      	beq.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f043 0220 	orr.w	r2, r3, #32
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e007      	b.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d1c3      	bne.n	800363a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036c8:	e049      	b.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d119      	bne.n	800370c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0210 	mvn.w	r2, #16
 80036e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e030      	b.n	800376e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370c:	f7fd fd34 	bl	8001178 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	429a      	cmp	r2, r3
 800371a:	d302      	bcc.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11d      	bne.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d016      	beq.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e007      	b.n	800376e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d1ae      	bne.n	80036ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	d11b      	bne.n	80037c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003796:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f043 0204 	orr.w	r2, r3, #4
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af02      	add	r7, sp, #8
 80037da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e108      	b.n	80039f8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f008 fb3b 	bl	800be7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2203      	movs	r2, #3
 800380a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003814:	d102      	bne.n	800381c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f004 f86a 	bl	80078fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7c1a      	ldrb	r2, [r3, #16]
 800382e:	f88d 2000 	strb.w	r2, [sp]
 8003832:	3304      	adds	r3, #4
 8003834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003836:	f003 ff49 	bl	80076cc <USB_CoreInit>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d5      	b.n	80039f8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f004 f862 	bl	800791c <USB_SetCurrentMode>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d005      	beq.n	800386a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e0c6      	b.n	80039f8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e04a      	b.n	8003906 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	3315      	adds	r3, #21
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3314      	adds	r3, #20
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	b298      	uxth	r0, r3
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	332e      	adds	r3, #46	; 0x2e
 80038ac:	4602      	mov	r2, r0
 80038ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3318      	adds	r3, #24
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	331c      	adds	r3, #28
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3320      	adds	r3, #32
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3324      	adds	r3, #36	; 0x24
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	3301      	adds	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	429a      	cmp	r2, r3
 800390e:	d3af      	bcc.n	8003870 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	e044      	b.n	80039a0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800393e:	7bfa      	ldrb	r2, [r7, #15]
 8003940:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003958:	7bfa      	ldrb	r2, [r7, #15]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800396e:	7bfa      	ldrb	r2, [r7, #15]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	3301      	adds	r3, #1
 800399e:	73fb      	strb	r3, [r7, #15]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	791b      	ldrb	r3, [r3, #4]
 80039a4:	7bfa      	ldrb	r2, [r7, #15]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d3b5      	bcc.n	8003916 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7c1a      	ldrb	r2, [r3, #16]
 80039b2:	f88d 2000 	strb.w	r2, [sp]
 80039b6:	3304      	adds	r3, #4
 80039b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ba:	f003 fffb 	bl	80079b4 <USB_DevInit>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e013      	b.n	80039f8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7b1b      	ldrb	r3, [r3, #12]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d102      	bne.n	80039ec <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f001 f96e 	bl	8004cc8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f005 f838 	bl	8008a66 <USB_DevDisconnect>

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_PCD_Start+0x1c>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e022      	b.n	8003a62 <HAL_PCD_Start+0x62>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 ff45 	bl	80078d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 ffe6 	bl	8008a24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a6a:	b590      	push	{r4, r7, lr}
 8003a6c:	b08d      	sub	sp, #52	; 0x34
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f005 f8a4 	bl	8008bce <USB_GetMode>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f040 84b9 	bne.w	8004400 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f005 f808 	bl	8008aa8 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 84af 	beq.w	80043fe <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f004 fff5 	bl	8008aa8 <USB_ReadInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d107      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f002 0202 	and.w	r2, r2, #2
 8003ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f004 ffe3 	bl	8008aa8 <USB_ReadInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d161      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0210 	bic.w	r2, r2, #16
 8003afa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f003 020f 	and.w	r2, r3, #15
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	3304      	adds	r3, #4
 8003b1a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	0c5b      	lsrs	r3, r3, #17
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d124      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d035      	beq.n	8003ba0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	6a38      	ldr	r0, [r7, #32]
 8003b48:	f004 fe1a 	bl	8008780 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b58:	441a      	add	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b6a:	441a      	add	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	615a      	str	r2, [r3, #20]
 8003b70:	e016      	b.n	8003ba0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	0c5b      	lsrs	r3, r3, #17
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	2b06      	cmp	r3, #6
 8003b7c:	d110      	bne.n	8003ba0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003b84:	2208      	movs	r2, #8
 8003b86:	4619      	mov	r1, r3
 8003b88:	6a38      	ldr	r0, [r7, #32]
 8003b8a:	f004 fdf9 	bl	8008780 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b9a:	441a      	add	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699a      	ldr	r2, [r3, #24]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0210 	orr.w	r2, r2, #16
 8003bae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f004 ff77 	bl	8008aa8 <USB_ReadInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bc4:	f040 80a7 	bne.w	8003d16 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f004 ff7c 	bl	8008ace <USB_ReadDevAllOutEpInterrupt>
 8003bd6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003bd8:	e099      	b.n	8003d0e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 808e 	beq.w	8003d02 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f004 ffa0 	bl	8008b36 <USB_ReadDevOutEPInterrupt>
 8003bf6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2301      	movs	r3, #1
 8003c12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fed0 	bl	80049bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c32:	461a      	mov	r2, r3
 8003c34:	2308      	movs	r3, #8
 8003c36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 ffa6 	bl	8004b8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	461a      	mov	r2, r3
 8003c58:	2310      	movs	r3, #16
 8003c5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d030      	beq.n	8003cc8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b80      	cmp	r3, #128	; 0x80
 8003c70:	d109      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c84:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	78db      	ldrb	r3, [r3, #3]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d108      	bne.n	8003cb6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f008 f9ff 	bl	800c0b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d009      	beq.n	8003d02 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d00:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	3301      	adds	r3, #1
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f47f af62 	bne.w	8003bda <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 fec4 	bl	8008aa8 <USB_ReadInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d2a:	f040 80db 	bne.w	8003ee4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f004 fee5 	bl	8008b02 <USB_ReadDevAllInEpInterrupt>
 8003d38:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d3e:	e0cd      	b.n	8003edc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80c2 	beq.w	8003ed0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 ff0b 	bl	8008b72 <USB_ReadDevInEPInterrupt>
 8003d5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d057      	beq.n	8003e18 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	2201      	movs	r2, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69f9      	ldr	r1, [r7, #28]
 8003d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d88:	4013      	ands	r3, r2
 8003d8a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	799b      	ldrb	r3, [r3, #6]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d132      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	3320      	adds	r3, #32
 8003db6:	6819      	ldr	r1, [r3, #0]
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4403      	add	r3, r0
 8003dc6:	331c      	adds	r3, #28
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4419      	add	r1, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4403      	add	r3, r0
 8003dda:	3320      	adds	r3, #32
 8003ddc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d113      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x3a2>
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3324      	adds	r3, #36	; 0x24
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e04:	461a      	mov	r2, r3
 8003e06:	2101      	movs	r1, #1
 8003e08:	f004 ff12 	bl	8008c30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f008 f8c9 	bl	800bfaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2308      	movs	r3, #8
 8003e32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d008      	beq.n	8003e50 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e66:	461a      	mov	r2, r3
 8003e68:	2340      	movs	r3, #64	; 0x40
 8003e6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d023      	beq.n	8003ebe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e78:	6a38      	ldr	r0, [r7, #32]
 8003e7a:	f003 fef9 	bl	8007c70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e80:	4613      	mov	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	3310      	adds	r3, #16
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3304      	adds	r3, #4
 8003e90:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	78db      	ldrb	r3, [r3, #3]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f008 f916 	bl	800c0d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2302      	movs	r3, #2
 8003ebc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fcea 	bl	80048a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f47f af2e 	bne.w	8003d40 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f004 fddd 	bl	8008aa8 <USB_ReadInterrupts>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef8:	d122      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d108      	bne.n	8003f2a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f20:	2100      	movs	r1, #0
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f008 fa90 	bl	800c448 <HAL_PCDEx_LPM_Callback>
 8003f28:	e002      	b.n	8003f30 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f008 f8b4 	bl	800c098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f004 fdaf 	bl	8008aa8 <USB_ReadInterrupts>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f54:	d112      	bne.n	8003f7c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f008 f870 	bl	800c04c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f7a:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fd91 	bl	8008aa8 <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f90:	d121      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695a      	ldr	r2, [r3, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003fa0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d111      	bne.n	8003fd0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f008 fa3d 	bl	800c448 <HAL_PCDEx_LPM_Callback>
 8003fce:	e002      	b.n	8003fd6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f008 f83b 	bl	800c04c <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f004 fd64 	bl	8008aa8 <USB_ReadInterrupts>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fea:	f040 80b7 	bne.w	800415c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2110      	movs	r1, #16
 8004008:	4618      	mov	r0, r3
 800400a:	f003 fe31 	bl	8007c70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004012:	e046      	b.n	80040a2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004020:	461a      	mov	r2, r3
 8004022:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004026:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004042:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004046:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	461a      	mov	r2, r3
 8004056:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800405a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	440a      	add	r2, r1
 8004072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800407a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004096:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800409a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409e:	3301      	adds	r3, #1
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	791b      	ldrb	r3, [r3, #4]
 80040a6:	461a      	mov	r2, r3
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d3b2      	bcc.n	8004014 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7bdb      	ldrb	r3, [r3, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040da:	f043 030b 	orr.w	r3, r3, #11
 80040de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040f0:	f043 030b 	orr.w	r3, r3, #11
 80040f4:	6453      	str	r3, [r2, #68]	; 0x44
 80040f6:	e015      	b.n	8004124 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004106:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800410a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800410e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800411e:	f043 030b 	orr.w	r3, r3, #11
 8004122:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69fa      	ldr	r2, [r7, #28]
 800412e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004132:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004136:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004146:	461a      	mov	r2, r3
 8004148:	f004 fd72 	bl	8008c30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800415a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f004 fca1 	bl	8008aa8 <USB_ReadInterrupts>
 8004166:	4603      	mov	r3, r0
 8004168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004170:	d123      	bne.n	80041ba <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f004 fd37 	bl	8008bea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f003 fdee 	bl	8007d62 <USB_GetDevSpeed>
 8004186:	4603      	mov	r3, r0
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681c      	ldr	r4, [r3, #0]
 8004192:	f000 fea3 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004196:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800419c:	461a      	mov	r2, r3
 800419e:	4620      	mov	r0, r4
 80041a0:	f003 faf8 	bl	8007794 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f007 ff28 	bl	800bffa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f004 fc72 	bl	8008aa8 <USB_ReadInterrupts>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d10a      	bne.n	80041e4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f007 ff05 	bl	800bfde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f002 0208 	and.w	r2, r2, #8
 80041e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 fc5d 	bl	8008aa8 <USB_ReadInterrupts>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b80      	cmp	r3, #128	; 0x80
 80041f6:	d123      	bne.n	8004240 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004204:	2301      	movs	r3, #1
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	e014      	b.n	8004234 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	f203 2357 	addw	r3, r3, #599	; 0x257
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d105      	bne.n	800422e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	b2db      	uxtb	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fb0a 	bl	8004842 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	3301      	adds	r3, #1
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	791b      	ldrb	r3, [r3, #4]
 8004238:	461a      	mov	r2, r3
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	4293      	cmp	r3, r2
 800423e:	d3e4      	bcc.n	800420a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f004 fc2f 	bl	8008aa8 <USB_ReadInterrupts>
 800424a:	4603      	mov	r3, r0
 800424c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004254:	d13c      	bne.n	80042d0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004256:	2301      	movs	r3, #1
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
 800425a:	e02b      	b.n	80042b4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	3318      	adds	r3, #24
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d115      	bne.n	80042ae <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004282:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004284:	2b00      	cmp	r3, #0
 8004286:	da12      	bge.n	80042ae <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3317      	adds	r3, #23
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	4619      	mov	r1, r3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 faca 	bl	8004842 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	3301      	adds	r3, #1
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	791b      	ldrb	r3, [r3, #4]
 80042b8:	461a      	mov	r2, r3
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	4293      	cmp	r3, r2
 80042be:	d3cd      	bcc.n	800425c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80042ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 fbe7 	bl	8008aa8 <USB_ReadInterrupts>
 80042da:	4603      	mov	r3, r0
 80042dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e4:	d156      	bne.n	8004394 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042e6:	2301      	movs	r3, #1
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ea:	e045      	b.n	8004378 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d12e      	bne.n	8004372 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004314:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004316:	2b00      	cmp	r3, #0
 8004318:	da2b      	bge.n	8004372 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8004326:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800432a:	429a      	cmp	r2, r3
 800432c:	d121      	bne.n	8004372 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800436a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436e:	6053      	str	r3, [r2, #4]
            break;
 8004370:	e008      	b.n	8004384 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	3301      	adds	r3, #1
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	791b      	ldrb	r3, [r3, #4]
 800437c:	461a      	mov	r2, r3
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	4293      	cmp	r3, r2
 8004382:	d3b3      	bcc.n	80042ec <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f004 fb85 	bl	8008aa8 <USB_ReadInterrupts>
 800439e:	4603      	mov	r3, r0
 80043a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d10a      	bne.n	80043c0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f007 fea6 	bl	800c0fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80043be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f004 fb6f 	bl	8008aa8 <USB_ReadInterrupts>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d115      	bne.n	8004400 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f007 fe96 	bl	800c118 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	605a      	str	r2, [r3, #4]
 80043fc:	e000      	b.n	8004400 <HAL_PCD_IRQHandler+0x996>
      return;
 80043fe:	bf00      	nop
    }
  }
}
 8004400:	3734      	adds	r7, #52	; 0x34
 8004402:	46bd      	mov	sp, r7
 8004404:	bd90      	pop	{r4, r7, pc}

08004406 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_PCD_SetAddress+0x1a>
 800441c:	2302      	movs	r3, #2
 800441e:	e012      	b.n	8004446 <HAL_PCD_SetAddress+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	4611      	mov	r1, r2
 8004436:	4618      	mov	r0, r3
 8004438:	f004 face 	bl	80089d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	4608      	mov	r0, r1
 8004458:	4611      	mov	r1, r2
 800445a:	461a      	mov	r2, r3
 800445c:	4603      	mov	r3, r0
 800445e:	70fb      	strb	r3, [r7, #3]
 8004460:	460b      	mov	r3, r1
 8004462:	803b      	strh	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800446c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004470:	2b00      	cmp	r3, #0
 8004472:	da0f      	bge.n	8004494 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	4613      	mov	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	3310      	adds	r3, #16
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4413      	add	r3, r2
 8004488:	3304      	adds	r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	705a      	strb	r2, [r3, #1]
 8004492:	e00f      	b.n	80044b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	f003 020f 	and.w	r2, r3, #15
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4413      	add	r3, r2
 80044aa:	3304      	adds	r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80044c0:	883b      	ldrh	r3, [r7, #0]
 80044c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	78ba      	ldrb	r2, [r7, #2]
 80044ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d004      	beq.n	80044e2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044e2:	78bb      	ldrb	r3, [r7, #2]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d102      	bne.n	80044ee <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_PCD_EP_Open+0xae>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e00e      	b.n	800451a <HAL_PCD_EP_Open+0xcc>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	4618      	mov	r0, r3
 800450c:	f003 fc4e 	bl	8007dac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004518:	7afb      	ldrb	r3, [r7, #11]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800452e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004532:	2b00      	cmp	r3, #0
 8004534:	da0f      	bge.n	8004556 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 020f 	and.w	r2, r3, #15
 800453c:	4613      	mov	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	3310      	adds	r3, #16
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	3304      	adds	r3, #4
 800454c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	705a      	strb	r2, [r3, #1]
 8004554:	e00f      	b.n	8004576 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	f003 020f 	and.w	r2, r3, #15
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_PCD_EP_Close+0x6e>
 800458c:	2302      	movs	r3, #2
 800458e:	e00e      	b.n	80045ae <HAL_PCD_EP_Close+0x8c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	4618      	mov	r0, r3
 80045a0:	f003 fc8c 	bl	8007ebc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	460b      	mov	r3, r1
 80045c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045c6:	7afb      	ldrb	r3, [r7, #11]
 80045c8:	f003 020f 	and.w	r2, r3, #15
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	3304      	adds	r3, #4
 80045de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2200      	movs	r2, #0
 80045f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f8:	7afb      	ldrb	r3, [r7, #11]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	799b      	ldrb	r3, [r3, #6]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d102      	bne.n	8004612 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	799b      	ldrb	r3, [r3, #6]
 800461a:	461a      	mov	r2, r3
 800461c:	6979      	ldr	r1, [r7, #20]
 800461e:	f003 fd29 	bl	8008074 <USB_EPStartXfer>

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 020f 	and.w	r2, r3, #15
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	460b      	mov	r3, r1
 800466a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800466c:	7afb      	ldrb	r3, [r7, #11]
 800466e:	f003 020f 	and.w	r2, r3, #15
 8004672:	4613      	mov	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	3310      	adds	r3, #16
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	3304      	adds	r3, #4
 8004682:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2200      	movs	r2, #0
 8004694:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2201      	movs	r2, #1
 800469a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800469c:	7afb      	ldrb	r3, [r7, #11]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	799b      	ldrb	r3, [r3, #6]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d102      	bne.n	80046b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	799b      	ldrb	r3, [r3, #6]
 80046be:	461a      	mov	r2, r3
 80046c0:	6979      	ldr	r1, [r7, #20]
 80046c2:	f003 fcd7 	bl	8008074 <USB_EPStartXfer>

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	7912      	ldrb	r2, [r2, #4]
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d901      	bls.n	80046ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e04f      	b.n	800478e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da0f      	bge.n	8004716 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 020f 	and.w	r2, r3, #15
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	3310      	adds	r3, #16
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	3304      	adds	r3, #4
 800470c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	705a      	strb	r2, [r3, #1]
 8004714:	e00d      	b.n	8004732 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	3304      	adds	r3, #4
 800472a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	b2da      	uxtb	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_PCD_EP_SetStall+0x82>
 800474e:	2302      	movs	r3, #2
 8004750:	e01d      	b.n	800478e <HAL_PCD_EP_SetStall+0xbe>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	4618      	mov	r0, r3
 8004762:	f004 f865 	bl	8008830 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7999      	ldrb	r1, [r3, #6]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800477e:	461a      	mov	r2, r3
 8004780:	f004 fa56 	bl	8008c30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	460b      	mov	r3, r1
 80047a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	7912      	ldrb	r2, [r2, #4]
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e042      	b.n	800483a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	da0f      	bge.n	80047dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	f003 020f 	and.w	r2, r3, #15
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	3310      	adds	r3, #16
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4413      	add	r3, r2
 80047d0:	3304      	adds	r3, #4
 80047d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	705a      	strb	r2, [r3, #1]
 80047da:	e00f      	b.n	80047fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	f003 020f 	and.w	r2, r3, #15
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	3304      	adds	r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_PCD_EP_ClrStall+0x86>
 8004818:	2302      	movs	r3, #2
 800481a:	e00e      	b.n	800483a <HAL_PCD_EP_ClrStall+0xa4>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68f9      	ldr	r1, [r7, #12]
 800482a:	4618      	mov	r0, r3
 800482c:	f004 f86e 	bl	800890c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800484e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	da0c      	bge.n	8004870 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	3310      	adds	r3, #16
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	3304      	adds	r3, #4
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e00c      	b.n	800488a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	f003 020f 	and.w	r2, r3, #15
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	3304      	adds	r3, #4
 8004888:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	4618      	mov	r0, r3
 8004892:	f003 fe8d 	bl	80085b0 <USB_EPStopXfer>
 8004896:	4603      	mov	r3, r0
 8004898:	72fb      	strb	r3, [r7, #11]

  return ret;
 800489a:	7afb      	ldrb	r3, [r7, #11]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	3310      	adds	r3, #16
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d901      	bls.n	80048dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e06b      	b.n	80049b4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d902      	bls.n	80048f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	3303      	adds	r3, #3
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004900:	e02a      	b.n	8004958 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	429a      	cmp	r2, r3
 8004916:	d902      	bls.n	800491e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3303      	adds	r3, #3
 8004922:	089b      	lsrs	r3, r3, #2
 8004924:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68d9      	ldr	r1, [r3, #12]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	4603      	mov	r3, r0
 800493a:	6978      	ldr	r0, [r7, #20]
 800493c:	f003 fee2 	bl	8008704 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	441a      	add	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	441a      	add	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	429a      	cmp	r2, r3
 800496c:	d809      	bhi.n	8004982 <PCD_WriteEmptyTxFifo+0xde>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004976:	429a      	cmp	r2, r3
 8004978:	d203      	bcs.n	8004982 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1bf      	bne.n	8004902 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	429a      	cmp	r2, r3
 800498c:	d811      	bhi.n	80049b2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	2201      	movs	r2, #1
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	6939      	ldr	r1, [r7, #16]
 80049aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ae:	4013      	ands	r3, r2
 80049b0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3720      	adds	r7, #32
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	333c      	adds	r3, #60	; 0x3c
 80049d4:	3304      	adds	r3, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	799b      	ldrb	r3, [r3, #6]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d17b      	bne.n	8004aea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d015      	beq.n	8004a28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	4a61      	ldr	r2, [pc, #388]	; (8004b84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	f240 80b9 	bls.w	8004b78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80b3 	beq.w	8004b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a24:	6093      	str	r3, [r2, #8]
 8004a26:	e0a7      	b.n	8004b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	461a      	mov	r2, r3
 8004a40:	2320      	movs	r3, #32
 8004a42:	6093      	str	r3, [r2, #8]
 8004a44:	e098      	b.n	8004b78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 8093 	bne.w	8004b78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	4a4b      	ldr	r2, [pc, #300]	; (8004b84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d90f      	bls.n	8004a7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a70:	461a      	mov	r2, r3
 8004a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a76:	6093      	str	r3, [r2, #8]
 8004a78:	e07e      	b.n	8004b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1a      	ldr	r2, [r3, #32]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	0159      	lsls	r1, r3, #5
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d114      	bne.n	8004adc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	f004 f8b2 	bl	8008c30 <USB_EP0_OutStart>
 8004acc:	e006      	b.n	8004adc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	441a      	add	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f007 fa46 	bl	800bf74 <HAL_PCD_DataOutStageCallback>
 8004ae8:	e046      	b.n	8004b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d124      	bne.n	8004b3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0e:	6093      	str	r3, [r2, #8]
 8004b10:	e032      	b.n	8004b78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2320      	movs	r3, #32
 8004b2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f007 fa1d 	bl	800bf74 <HAL_PCD_DataOutStageCallback>
 8004b3a:	e01d      	b.n	8004b78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d114      	bne.n	8004b6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d108      	bne.n	8004b6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004b64:	461a      	mov	r2, r3
 8004b66:	2100      	movs	r1, #0
 8004b68:	f004 f862 	bl	8008c30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	4619      	mov	r1, r3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f007 f9fe 	bl	800bf74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	4f54300a 	.word	0x4f54300a
 8004b88:	4f54310a 	.word	0x4f54310a

08004b8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	333c      	adds	r3, #60	; 0x3c
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <PCD_EP_OutSetupPacket_int+0x88>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d90e      	bls.n	8004be0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bde:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f007 f9b5 	bl	800bf50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <PCD_EP_OutSetupPacket_int+0x88>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d90c      	bls.n	8004c08 <PCD_EP_OutSetupPacket_int+0x7c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	799b      	ldrb	r3, [r3, #6]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d108      	bne.n	8004c08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004c00:	461a      	mov	r2, r3
 8004c02:	2101      	movs	r1, #1
 8004c04:	f004 f814 	bl	8008c30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	4f54300a 	.word	0x4f54300a

08004c18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
 8004c24:	4613      	mov	r3, r2
 8004c26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d107      	bne.n	8004c46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c36:	883b      	ldrh	r3, [r7, #0]
 8004c38:	0419      	lsls	r1, r3, #16
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
 8004c44:	e028      	b.n	8004c98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4413      	add	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]
 8004c58:	e00d      	b.n	8004c76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	3340      	adds	r3, #64	; 0x40
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	3301      	adds	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
 8004c76:	7bfa      	ldrb	r2, [r7, #15]
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d3ec      	bcc.n	8004c5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c80:	883b      	ldrh	r3, [r7, #0]
 8004c82:	0418      	lsls	r0, r3, #16
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6819      	ldr	r1, [r3, #0]
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	4302      	orrs	r2, r0
 8004c90:	3340      	adds	r3, #64	; 0x40
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	f043 0303 	orr.w	r3, r3, #3
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0cc      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d24:	4b68      	ldr	r3, [pc, #416]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d90c      	bls.n	8004d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b65      	ldr	r3, [pc, #404]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3a:	4b63      	ldr	r3, [pc, #396]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0b8      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d64:	4b59      	ldr	r3, [pc, #356]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a58      	ldr	r2, [pc, #352]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d7c:	4b53      	ldr	r3, [pc, #332]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a52      	ldr	r2, [pc, #328]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d88:	4b50      	ldr	r3, [pc, #320]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	494d      	ldr	r1, [pc, #308]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d044      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d107      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	4b47      	ldr	r3, [pc, #284]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d119      	bne.n	8004dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e07f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d003      	beq.n	8004dce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d107      	bne.n	8004dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dce:	4b3f      	ldr	r3, [pc, #252]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e06f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dde:	4b3b      	ldr	r3, [pc, #236]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e067      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dee:	4b37      	ldr	r3, [pc, #220]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 0203 	bic.w	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4934      	ldr	r1, [pc, #208]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e00:	f7fc f9ba 	bl	8001178 <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e08:	f7fc f9b6 	bl	8001178 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e04f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 020c 	and.w	r2, r3, #12
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d1eb      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e30:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d20c      	bcs.n	8004e58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e032      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e64:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4916      	ldr	r1, [pc, #88]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e82:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	490e      	ldr	r1, [pc, #56]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e96:	f000 fb7f 	bl	8005598 <HAL_RCC_GetSysClockFreq>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	490a      	ldr	r1, [pc, #40]	; (8004ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ea8:	5ccb      	ldrb	r3, [r1, r3]
 8004eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004eae:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fc f91a 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023c00 	.word	0x40023c00
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	0800e500 	.word	0x0800e500
 8004ed4:	20000000 	.word	0x20000000
 8004ed8:	20000004 	.word	0x20000004

08004edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee0:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20000000 	.word	0x20000000

08004ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ef8:	f7ff fff0 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004efc:	4602      	mov	r2, r0
 8004efe:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	0a9b      	lsrs	r3, r3, #10
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4903      	ldr	r1, [pc, #12]	; (8004f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f0a:	5ccb      	ldrb	r3, [r1, r3]
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40023800 	.word	0x40023800
 8004f18:	0800e510 	.word	0x0800e510

08004f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f20:	f7ff ffdc 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	0b5b      	lsrs	r3, r3, #13
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4903      	ldr	r1, [pc, #12]	; (8004f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	0800e510 	.word	0x0800e510

08004f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08c      	sub	sp, #48	; 0x30
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d010      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004f7c:	4b6f      	ldr	r3, [pc, #444]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f82:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	496c      	ldr	r1, [pc, #432]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d010      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004faa:	4b64      	ldr	r3, [pc, #400]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb8:	4960      	ldr	r1, [pc, #384]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d017      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd8:	4b58      	ldr	r3, [pc, #352]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	4955      	ldr	r1, [pc, #340]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005004:	2301      	movs	r3, #1
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d017      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005014:	4b49      	ldr	r3, [pc, #292]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800501a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	4946      	ldr	r1, [pc, #280]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005032:	d101      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005034:	2301      	movs	r3, #1
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005040:	2301      	movs	r3, #1
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 808a 	beq.w	8005166 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	4a38      	ldr	r2, [pc, #224]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800505c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005060:	6413      	str	r3, [r2, #64]	; 0x40
 8005062:	4b36      	ldr	r3, [pc, #216]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800506e:	4b34      	ldr	r3, [pc, #208]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a33      	ldr	r2, [pc, #204]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005078:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800507a:	f7fc f87d 	bl	8001178 <HAL_GetTick>
 800507e:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005082:	f7fc f879 	bl	8001178 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e278      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005094:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050a0:	4b26      	ldr	r3, [pc, #152]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02f      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d028      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050be:	4b1f      	ldr	r3, [pc, #124]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c8:	4b1e      	ldr	r3, [pc, #120]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050d4:	4a19      	ldr	r2, [pc, #100]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050da:	4b18      	ldr	r3, [pc, #96]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d114      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050e6:	f7fc f847 	bl	8001178 <HAL_GetTick>
 80050ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ec:	e00a      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fc f843 	bl	8001178 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d901      	bls.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e240      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005104:	4b0d      	ldr	r3, [pc, #52]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0ee      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800511c:	d114      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800511e:	4b07      	ldr	r3, [pc, #28]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	4902      	ldr	r1, [pc, #8]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005134:	4313      	orrs	r3, r2
 8005136:	608b      	str	r3, [r1, #8]
 8005138:	e00c      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800
 8005140:	40007000 	.word	0x40007000
 8005144:	42470e40 	.word	0x42470e40
 8005148:	4b4a      	ldr	r3, [pc, #296]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a49      	ldr	r2, [pc, #292]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800514e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005152:	6093      	str	r3, [r2, #8]
 8005154:	4b47      	ldr	r3, [pc, #284]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005160:	4944      	ldr	r1, [pc, #272]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005162:	4313      	orrs	r3, r2
 8005164:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005178:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800517a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005188:	4b3a      	ldr	r3, [pc, #232]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800518a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800518e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005196:	4937      	ldr	r1, [pc, #220]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051aa:	4b32      	ldr	r3, [pc, #200]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b8:	492e      	ldr	r1, [pc, #184]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d011      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051cc:	4b29      	ldr	r3, [pc, #164]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	4926      	ldr	r1, [pc, #152]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ea:	d101      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80051ec:	2301      	movs	r3, #1
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80051fc:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005202:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520a:	491a      	ldr	r1, [pc, #104]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521a:	2b00      	cmp	r3, #0
 800521c:	d011      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800521e:	4b15      	ldr	r3, [pc, #84]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005224:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522c:	4911      	ldr	r1, [pc, #68]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800523c:	d101      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800523e:	2301      	movs	r3, #1
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d005      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005250:	f040 80ff 	bne.w	8005452 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800525a:	f7fb ff8d 	bl	8001178 <HAL_GetTick>
 800525e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005260:	e00e      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005262:	f7fb ff89 	bl	8001178 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d907      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e188      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005274:	40023800 	.word	0x40023800
 8005278:	424711e0 	.word	0x424711e0
 800527c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005280:	4b7e      	ldr	r3, [pc, #504]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ea      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d028      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d124      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80052b4:	4b71      	ldr	r3, [pc, #452]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	0c1b      	lsrs	r3, r3, #16
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	3301      	adds	r3, #1
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052c6:	4b6d      	ldr	r3, [pc, #436]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052cc:	0e1b      	lsrs	r3, r3, #24
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	019b      	lsls	r3, r3, #6
 80052de:	431a      	orrs	r2, r3
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	3b01      	subs	r3, #1
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	431a      	orrs	r2, r3
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	061b      	lsls	r3, r3, #24
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	071b      	lsls	r3, r3, #28
 80052f6:	4961      	ldr	r1, [pc, #388]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005312:	d00a      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800531c:	2b00      	cmp	r3, #0
 800531e:	d035      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005328:	d130      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800532a:	4b54      	ldr	r3, [pc, #336]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800532c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	3301      	adds	r3, #1
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800533c:	4b4f      	ldr	r3, [pc, #316]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005342:	0f1b      	lsrs	r3, r3, #28
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	019b      	lsls	r3, r3, #6
 8005354:	431a      	orrs	r2, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	085b      	lsrs	r3, r3, #1
 800535a:	3b01      	subs	r3, #1
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	061b      	lsls	r3, r3, #24
 8005366:	431a      	orrs	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	071b      	lsls	r3, r3, #28
 800536c:	4943      	ldr	r1, [pc, #268]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005374:	4b41      	ldr	r3, [pc, #260]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537a:	f023 021f 	bic.w	r2, r3, #31
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	493d      	ldr	r1, [pc, #244]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d029      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a0:	d124      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80053a2:	4b36      	ldr	r3, [pc, #216]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	3301      	adds	r3, #1
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053b4:	4b31      	ldr	r3, [pc, #196]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ba:	0f1b      	lsrs	r3, r3, #28
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	019b      	lsls	r3, r3, #6
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	3b01      	subs	r3, #1
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	061b      	lsls	r3, r3, #24
 80053de:	431a      	orrs	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	071b      	lsls	r3, r3, #28
 80053e4:	4925      	ldr	r1, [pc, #148]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d016      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	085b      	lsrs	r3, r3, #1
 800540a:	3b01      	subs	r3, #1
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	071b      	lsls	r3, r3, #28
 800541e:	4917      	ldr	r1, [pc, #92]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005426:	4b16      	ldr	r3, [pc, #88]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800542c:	f7fb fea4 	bl	8001178 <HAL_GetTick>
 8005430:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005432:	e008      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005434:	f7fb fea0 	bl	8001178 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e09f      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	2b01      	cmp	r3, #1
 8005456:	f040 8095 	bne.w	8005584 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800545a:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005460:	f7fb fe8a 	bl	8001178 <HAL_GetTick>
 8005464:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005466:	e00f      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005468:	f7fb fe86 	bl	8001178 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d908      	bls.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e085      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800547a:	bf00      	nop
 800547c:	40023800 	.word	0x40023800
 8005480:	42470068 	.word	0x42470068
 8005484:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005488:	4b41      	ldr	r3, [pc, #260]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005494:	d0e8      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d02b      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d127      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80054be:	4b34      	ldr	r3, [pc, #208]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c4:	0c1b      	lsrs	r3, r3, #16
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	3301      	adds	r3, #1
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	431a      	orrs	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	3b01      	subs	r3, #1
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	061b      	lsls	r3, r3, #24
 80054ec:	4928      	ldr	r1, [pc, #160]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054f4:	4b26      	ldr	r3, [pc, #152]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	3b01      	subs	r3, #1
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	4922      	ldr	r1, [pc, #136]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01d      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005522:	d118      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	0e1b      	lsrs	r3, r3, #24
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699a      	ldr	r2, [r3, #24]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	019b      	lsls	r3, r3, #6
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	3b01      	subs	r3, #1
 8005546:	041b      	lsls	r3, r3, #16
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	061b      	lsls	r3, r3, #24
 800554e:	4910      	ldr	r1, [pc, #64]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800555c:	f7fb fe0c 	bl	8001178 <HAL_GetTick>
 8005560:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005564:	f7fb fe08 	bl	8001178 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e007      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800557e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005582:	d1ef      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3730      	adds	r7, #48	; 0x30
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40023800 	.word	0x40023800
 8005594:	42470070 	.word	0x42470070

08005598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800559c:	b0ae      	sub	sp, #184	; 0xb8
 800559e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055be:	4bcb      	ldr	r3, [pc, #812]	; (80058ec <HAL_RCC_GetSysClockFreq+0x354>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 030c 	and.w	r3, r3, #12
 80055c6:	2b0c      	cmp	r3, #12
 80055c8:	f200 8206 	bhi.w	80059d8 <HAL_RCC_GetSysClockFreq+0x440>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005609 	.word	0x08005609
 80055d8:	080059d9 	.word	0x080059d9
 80055dc:	080059d9 	.word	0x080059d9
 80055e0:	080059d9 	.word	0x080059d9
 80055e4:	08005611 	.word	0x08005611
 80055e8:	080059d9 	.word	0x080059d9
 80055ec:	080059d9 	.word	0x080059d9
 80055f0:	080059d9 	.word	0x080059d9
 80055f4:	08005619 	.word	0x08005619
 80055f8:	080059d9 	.word	0x080059d9
 80055fc:	080059d9 	.word	0x080059d9
 8005600:	080059d9 	.word	0x080059d9
 8005604:	08005809 	.word	0x08005809
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005608:	4bb9      	ldr	r3, [pc, #740]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800560a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800560e:	e1e7      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005610:	4bb8      	ldr	r3, [pc, #736]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005616:	e1e3      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005618:	4bb4      	ldr	r3, [pc, #720]	; (80058ec <HAL_RCC_GetSysClockFreq+0x354>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005624:	4bb1      	ldr	r3, [pc, #708]	; (80058ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d071      	beq.n	8005714 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005630:	4bae      	ldr	r3, [pc, #696]	; (80058ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	099b      	lsrs	r3, r3, #6
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800563c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800564c:	2300      	movs	r3, #0
 800564e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005656:	4622      	mov	r2, r4
 8005658:	462b      	mov	r3, r5
 800565a:	f04f 0000 	mov.w	r0, #0
 800565e:	f04f 0100 	mov.w	r1, #0
 8005662:	0159      	lsls	r1, r3, #5
 8005664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005668:	0150      	lsls	r0, r2, #5
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4621      	mov	r1, r4
 8005670:	1a51      	subs	r1, r2, r1
 8005672:	6439      	str	r1, [r7, #64]	; 0x40
 8005674:	4629      	mov	r1, r5
 8005676:	eb63 0301 	sbc.w	r3, r3, r1
 800567a:	647b      	str	r3, [r7, #68]	; 0x44
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005688:	4649      	mov	r1, r9
 800568a:	018b      	lsls	r3, r1, #6
 800568c:	4641      	mov	r1, r8
 800568e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005692:	4641      	mov	r1, r8
 8005694:	018a      	lsls	r2, r1, #6
 8005696:	4641      	mov	r1, r8
 8005698:	1a51      	subs	r1, r2, r1
 800569a:	63b9      	str	r1, [r7, #56]	; 0x38
 800569c:	4649      	mov	r1, r9
 800569e:	eb63 0301 	sbc.w	r3, r3, r1
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80056b0:	4649      	mov	r1, r9
 80056b2:	00cb      	lsls	r3, r1, #3
 80056b4:	4641      	mov	r1, r8
 80056b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ba:	4641      	mov	r1, r8
 80056bc:	00ca      	lsls	r2, r1, #3
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	4622      	mov	r2, r4
 80056c6:	189b      	adds	r3, r3, r2
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ca:	462b      	mov	r3, r5
 80056cc:	460a      	mov	r2, r1
 80056ce:	eb42 0303 	adc.w	r3, r2, r3
 80056d2:	637b      	str	r3, [r7, #52]	; 0x34
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056e0:	4629      	mov	r1, r5
 80056e2:	024b      	lsls	r3, r1, #9
 80056e4:	4621      	mov	r1, r4
 80056e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056ea:	4621      	mov	r1, r4
 80056ec:	024a      	lsls	r2, r1, #9
 80056ee:	4610      	mov	r0, r2
 80056f0:	4619      	mov	r1, r3
 80056f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005700:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005704:	f7fa fdec 	bl	80002e0 <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4613      	mov	r3, r2
 800570e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005712:	e067      	b.n	80057e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005714:	4b75      	ldr	r3, [pc, #468]	; (80058ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	099b      	lsrs	r3, r3, #6
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005720:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005724:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572c:	67bb      	str	r3, [r7, #120]	; 0x78
 800572e:	2300      	movs	r3, #0
 8005730:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005732:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005736:	4622      	mov	r2, r4
 8005738:	462b      	mov	r3, r5
 800573a:	f04f 0000 	mov.w	r0, #0
 800573e:	f04f 0100 	mov.w	r1, #0
 8005742:	0159      	lsls	r1, r3, #5
 8005744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005748:	0150      	lsls	r0, r2, #5
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4621      	mov	r1, r4
 8005750:	1a51      	subs	r1, r2, r1
 8005752:	62b9      	str	r1, [r7, #40]	; 0x28
 8005754:	4629      	mov	r1, r5
 8005756:	eb63 0301 	sbc.w	r3, r3, r1
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005768:	4649      	mov	r1, r9
 800576a:	018b      	lsls	r3, r1, #6
 800576c:	4641      	mov	r1, r8
 800576e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005772:	4641      	mov	r1, r8
 8005774:	018a      	lsls	r2, r1, #6
 8005776:	4641      	mov	r1, r8
 8005778:	ebb2 0a01 	subs.w	sl, r2, r1
 800577c:	4649      	mov	r1, r9
 800577e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800578e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005796:	4692      	mov	sl, r2
 8005798:	469b      	mov	fp, r3
 800579a:	4623      	mov	r3, r4
 800579c:	eb1a 0303 	adds.w	r3, sl, r3
 80057a0:	623b      	str	r3, [r7, #32]
 80057a2:	462b      	mov	r3, r5
 80057a4:	eb4b 0303 	adc.w	r3, fp, r3
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80057b6:	4629      	mov	r1, r5
 80057b8:	028b      	lsls	r3, r1, #10
 80057ba:	4621      	mov	r1, r4
 80057bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057c0:	4621      	mov	r1, r4
 80057c2:	028a      	lsls	r2, r1, #10
 80057c4:	4610      	mov	r0, r2
 80057c6:	4619      	mov	r1, r3
 80057c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057cc:	2200      	movs	r2, #0
 80057ce:	673b      	str	r3, [r7, #112]	; 0x70
 80057d0:	677a      	str	r2, [r7, #116]	; 0x74
 80057d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80057d6:	f7fa fd83 	bl	80002e0 <__aeabi_uldivmod>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4613      	mov	r3, r2
 80057e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057e4:	4b41      	ldr	r3, [pc, #260]	; (80058ec <HAL_RCC_GetSysClockFreq+0x354>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	0c1b      	lsrs	r3, r3, #16
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	3301      	adds	r3, #1
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 80057f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005806:	e0eb      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005808:	4b38      	ldr	r3, [pc, #224]	; (80058ec <HAL_RCC_GetSysClockFreq+0x354>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005814:	4b35      	ldr	r3, [pc, #212]	; (80058ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d06b      	beq.n	80058f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005820:	4b32      	ldr	r3, [pc, #200]	; (80058ec <HAL_RCC_GetSysClockFreq+0x354>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	099b      	lsrs	r3, r3, #6
 8005826:	2200      	movs	r2, #0
 8005828:	66bb      	str	r3, [r7, #104]	; 0x68
 800582a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800582c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800582e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005832:	663b      	str	r3, [r7, #96]	; 0x60
 8005834:	2300      	movs	r3, #0
 8005836:	667b      	str	r3, [r7, #100]	; 0x64
 8005838:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800583c:	4622      	mov	r2, r4
 800583e:	462b      	mov	r3, r5
 8005840:	f04f 0000 	mov.w	r0, #0
 8005844:	f04f 0100 	mov.w	r1, #0
 8005848:	0159      	lsls	r1, r3, #5
 800584a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800584e:	0150      	lsls	r0, r2, #5
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4621      	mov	r1, r4
 8005856:	1a51      	subs	r1, r2, r1
 8005858:	61b9      	str	r1, [r7, #24]
 800585a:	4629      	mov	r1, r5
 800585c:	eb63 0301 	sbc.w	r3, r3, r1
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800586e:	4659      	mov	r1, fp
 8005870:	018b      	lsls	r3, r1, #6
 8005872:	4651      	mov	r1, sl
 8005874:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005878:	4651      	mov	r1, sl
 800587a:	018a      	lsls	r2, r1, #6
 800587c:	4651      	mov	r1, sl
 800587e:	ebb2 0801 	subs.w	r8, r2, r1
 8005882:	4659      	mov	r1, fp
 8005884:	eb63 0901 	sbc.w	r9, r3, r1
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005894:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005898:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589c:	4690      	mov	r8, r2
 800589e:	4699      	mov	r9, r3
 80058a0:	4623      	mov	r3, r4
 80058a2:	eb18 0303 	adds.w	r3, r8, r3
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	462b      	mov	r3, r5
 80058aa:	eb49 0303 	adc.w	r3, r9, r3
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80058bc:	4629      	mov	r1, r5
 80058be:	024b      	lsls	r3, r1, #9
 80058c0:	4621      	mov	r1, r4
 80058c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058c6:	4621      	mov	r1, r4
 80058c8:	024a      	lsls	r2, r1, #9
 80058ca:	4610      	mov	r0, r2
 80058cc:	4619      	mov	r1, r3
 80058ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058d2:	2200      	movs	r2, #0
 80058d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80058d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80058d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058dc:	f7fa fd00 	bl	80002e0 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4613      	mov	r3, r2
 80058e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058ea:	e065      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x420>
 80058ec:	40023800 	.word	0x40023800
 80058f0:	00f42400 	.word	0x00f42400
 80058f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f8:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	099b      	lsrs	r3, r3, #6
 80058fe:	2200      	movs	r2, #0
 8005900:	4618      	mov	r0, r3
 8005902:	4611      	mov	r1, r2
 8005904:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005908:	653b      	str	r3, [r7, #80]	; 0x50
 800590a:	2300      	movs	r3, #0
 800590c:	657b      	str	r3, [r7, #84]	; 0x54
 800590e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005912:	4642      	mov	r2, r8
 8005914:	464b      	mov	r3, r9
 8005916:	f04f 0000 	mov.w	r0, #0
 800591a:	f04f 0100 	mov.w	r1, #0
 800591e:	0159      	lsls	r1, r3, #5
 8005920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005924:	0150      	lsls	r0, r2, #5
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4641      	mov	r1, r8
 800592c:	1a51      	subs	r1, r2, r1
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	4649      	mov	r1, r9
 8005932:	eb63 0301 	sbc.w	r3, r3, r1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005944:	4659      	mov	r1, fp
 8005946:	018b      	lsls	r3, r1, #6
 8005948:	4651      	mov	r1, sl
 800594a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800594e:	4651      	mov	r1, sl
 8005950:	018a      	lsls	r2, r1, #6
 8005952:	4651      	mov	r1, sl
 8005954:	1a54      	subs	r4, r2, r1
 8005956:	4659      	mov	r1, fp
 8005958:	eb63 0501 	sbc.w	r5, r3, r1
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	00eb      	lsls	r3, r5, #3
 8005966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800596a:	00e2      	lsls	r2, r4, #3
 800596c:	4614      	mov	r4, r2
 800596e:	461d      	mov	r5, r3
 8005970:	4643      	mov	r3, r8
 8005972:	18e3      	adds	r3, r4, r3
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	464b      	mov	r3, r9
 8005978:	eb45 0303 	adc.w	r3, r5, r3
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800598a:	4629      	mov	r1, r5
 800598c:	028b      	lsls	r3, r1, #10
 800598e:	4621      	mov	r1, r4
 8005990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005994:	4621      	mov	r1, r4
 8005996:	028a      	lsls	r2, r1, #10
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059a0:	2200      	movs	r2, #0
 80059a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80059a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059aa:	f7fa fc99 	bl	80002e0 <__aeabi_uldivmod>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	4613      	mov	r3, r2
 80059b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80059b8:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	0f1b      	lsrs	r3, r3, #28
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 80059c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059d6:	e003      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80059da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	37b8      	adds	r7, #184	; 0xb8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800
 80059f4:	00f42400 	.word	0x00f42400

080059f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e28d      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 8083 	beq.w	8005b1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a18:	4b94      	ldr	r3, [pc, #592]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 030c 	and.w	r3, r3, #12
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d019      	beq.n	8005a58 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005a24:	4b91      	ldr	r3, [pc, #580]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 030c 	and.w	r3, r3, #12
        || \
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d106      	bne.n	8005a3e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005a30:	4b8e      	ldr	r3, [pc, #568]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a3c:	d00c      	beq.n	8005a58 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a3e:	4b8b      	ldr	r3, [pc, #556]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005a46:	2b0c      	cmp	r3, #12
 8005a48:	d112      	bne.n	8005a70 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a4a:	4b88      	ldr	r3, [pc, #544]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a56:	d10b      	bne.n	8005a70 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a58:	4b84      	ldr	r3, [pc, #528]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d05b      	beq.n	8005b1c <HAL_RCC_OscConfig+0x124>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d157      	bne.n	8005b1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e25a      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a78:	d106      	bne.n	8005a88 <HAL_RCC_OscConfig+0x90>
 8005a7a:	4b7c      	ldr	r3, [pc, #496]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a7b      	ldr	r2, [pc, #492]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	e01d      	b.n	8005ac4 <HAL_RCC_OscConfig+0xcc>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a90:	d10c      	bne.n	8005aac <HAL_RCC_OscConfig+0xb4>
 8005a92:	4b76      	ldr	r3, [pc, #472]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a75      	ldr	r2, [pc, #468]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	4b73      	ldr	r3, [pc, #460]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a72      	ldr	r2, [pc, #456]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e00b      	b.n	8005ac4 <HAL_RCC_OscConfig+0xcc>
 8005aac:	4b6f      	ldr	r3, [pc, #444]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a6e      	ldr	r2, [pc, #440]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	4b6c      	ldr	r3, [pc, #432]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a6b      	ldr	r2, [pc, #428]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d013      	beq.n	8005af4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005acc:	f7fb fb54 	bl	8001178 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad4:	f7fb fb50 	bl	8001178 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b64      	cmp	r3, #100	; 0x64
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e21f      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	4b61      	ldr	r3, [pc, #388]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d0f0      	beq.n	8005ad4 <HAL_RCC_OscConfig+0xdc>
 8005af2:	e014      	b.n	8005b1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af4:	f7fb fb40 	bl	8001178 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005afc:	f7fb fb3c 	bl	8001178 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b64      	cmp	r3, #100	; 0x64
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e20b      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0e:	4b57      	ldr	r3, [pc, #348]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f0      	bne.n	8005afc <HAL_RCC_OscConfig+0x104>
 8005b1a:	e000      	b.n	8005b1e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d06f      	beq.n	8005c0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b2a:	4b50      	ldr	r3, [pc, #320]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d017      	beq.n	8005b66 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b36:	4b4d      	ldr	r3, [pc, #308]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d105      	bne.n	8005b4e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b42:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4e:	4b47      	ldr	r3, [pc, #284]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	d11c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5a:	4b44      	ldr	r3, [pc, #272]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d116      	bne.n	8005b94 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b66:	4b41      	ldr	r3, [pc, #260]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x186>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e1d3      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7e:	4b3b      	ldr	r3, [pc, #236]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4937      	ldr	r1, [pc, #220]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	e03a      	b.n	8005c0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b9c:	4b34      	ldr	r3, [pc, #208]	; (8005c70 <HAL_RCC_OscConfig+0x278>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba2:	f7fb fae9 	bl	8001178 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005baa:	f7fb fae5 	bl	8001178 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e1b4      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbc:	4b2b      	ldr	r3, [pc, #172]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc8:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4925      	ldr	r1, [pc, #148]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
 8005bdc:	e015      	b.n	8005c0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <HAL_RCC_OscConfig+0x278>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fb fac8 	bl	8001178 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bec:	f7fb fac4 	bl	8001178 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e193      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfe:	4b1b      	ldr	r3, [pc, #108]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d036      	beq.n	8005c84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <HAL_RCC_OscConfig+0x27c>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fb faa8 	bl	8001178 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c2c:	f7fb faa4 	bl	8001178 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e173      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <HAL_RCC_OscConfig+0x274>)
 8005c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0x234>
 8005c4a:	e01b      	b.n	8005c84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <HAL_RCC_OscConfig+0x27c>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fb fa91 	bl	8001178 <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c58:	e00e      	b.n	8005c78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c5a:	f7fb fa8d 	bl	8001178 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d907      	bls.n	8005c78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e15c      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	42470000 	.word	0x42470000
 8005c74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c78:	4b8a      	ldr	r3, [pc, #552]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ea      	bne.n	8005c5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8097 	beq.w	8005dc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c96:	4b83      	ldr	r3, [pc, #524]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10f      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	4b7f      	ldr	r3, [pc, #508]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	4a7e      	ldr	r2, [pc, #504]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb2:	4b7c      	ldr	r3, [pc, #496]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc2:	4b79      	ldr	r3, [pc, #484]	; (8005ea8 <HAL_RCC_OscConfig+0x4b0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d118      	bne.n	8005d00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cce:	4b76      	ldr	r3, [pc, #472]	; (8005ea8 <HAL_RCC_OscConfig+0x4b0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a75      	ldr	r2, [pc, #468]	; (8005ea8 <HAL_RCC_OscConfig+0x4b0>)
 8005cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cda:	f7fb fa4d 	bl	8001178 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce0:	e008      	b.n	8005cf4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce2:	f7fb fa49 	bl	8001178 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e118      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf4:	4b6c      	ldr	r3, [pc, #432]	; (8005ea8 <HAL_RCC_OscConfig+0x4b0>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d0f0      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d106      	bne.n	8005d16 <HAL_RCC_OscConfig+0x31e>
 8005d08:	4b66      	ldr	r3, [pc, #408]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0c:	4a65      	ldr	r2, [pc, #404]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6713      	str	r3, [r2, #112]	; 0x70
 8005d14:	e01c      	b.n	8005d50 <HAL_RCC_OscConfig+0x358>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b05      	cmp	r3, #5
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCC_OscConfig+0x340>
 8005d1e:	4b61      	ldr	r3, [pc, #388]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	4a60      	ldr	r2, [pc, #384]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d24:	f043 0304 	orr.w	r3, r3, #4
 8005d28:	6713      	str	r3, [r2, #112]	; 0x70
 8005d2a:	4b5e      	ldr	r3, [pc, #376]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4a5d      	ldr	r2, [pc, #372]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	6713      	str	r3, [r2, #112]	; 0x70
 8005d36:	e00b      	b.n	8005d50 <HAL_RCC_OscConfig+0x358>
 8005d38:	4b5a      	ldr	r3, [pc, #360]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	4a59      	ldr	r2, [pc, #356]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	6713      	str	r3, [r2, #112]	; 0x70
 8005d44:	4b57      	ldr	r3, [pc, #348]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	4a56      	ldr	r2, [pc, #344]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d4a:	f023 0304 	bic.w	r3, r3, #4
 8005d4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d015      	beq.n	8005d84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d58:	f7fb fa0e 	bl	8001178 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d60:	f7fb fa0a 	bl	8001178 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e0d7      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d76:	4b4b      	ldr	r3, [pc, #300]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0ee      	beq.n	8005d60 <HAL_RCC_OscConfig+0x368>
 8005d82:	e014      	b.n	8005dae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d84:	f7fb f9f8 	bl	8001178 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d8c:	f7fb f9f4 	bl	8001178 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e0c1      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da2:	4b40      	ldr	r3, [pc, #256]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1ee      	bne.n	8005d8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d105      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005db4:	4b3b      	ldr	r3, [pc, #236]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	4a3a      	ldr	r2, [pc, #232]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80ad 	beq.w	8005f24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dca:	4b36      	ldr	r3, [pc, #216]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d060      	beq.n	8005e98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d145      	bne.n	8005e6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dde:	4b33      	ldr	r3, [pc, #204]	; (8005eac <HAL_RCC_OscConfig+0x4b4>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de4:	f7fb f9c8 	bl	8001178 <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dec:	f7fb f9c4 	bl	8001178 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e093      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfe:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f0      	bne.n	8005dec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69da      	ldr	r2, [r3, #28]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	3b01      	subs	r3, #1
 8005e24:	041b      	lsls	r3, r3, #16
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	061b      	lsls	r3, r3, #24
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	071b      	lsls	r3, r3, #28
 8005e36:	491b      	ldr	r1, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <HAL_RCC_OscConfig+0x4b4>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fb f999 	bl	8001178 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e4a:	f7fb f995 	bl	8001178 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e064      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5c:	4b11      	ldr	r3, [pc, #68]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <HAL_RCC_OscConfig+0x452>
 8005e68:	e05c      	b.n	8005f24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6a:	4b10      	ldr	r3, [pc, #64]	; (8005eac <HAL_RCC_OscConfig+0x4b4>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fb f982 	bl	8001178 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e78:	f7fb f97e 	bl	8001178 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e04d      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	4b06      	ldr	r3, [pc, #24]	; (8005ea4 <HAL_RCC_OscConfig+0x4ac>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x480>
 8005e96:	e045      	b.n	8005f24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d107      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e040      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	40007000 	.word	0x40007000
 8005eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005eb0:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <HAL_RCC_OscConfig+0x538>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d030      	beq.n	8005f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d129      	bne.n	8005f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d122      	bne.n	8005f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d119      	bne.n	8005f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d10f      	bne.n	8005f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d107      	bne.n	8005f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d001      	beq.n	8005f24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e000      	b.n	8005f26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800

08005f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e07b      	b.n	800603e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d108      	bne.n	8005f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f56:	d009      	beq.n	8005f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
 8005f5e:	e005      	b.n	8005f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fa fe8e 	bl	8000ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	ea42 0103 	orr.w	r1, r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	f003 0104 	and.w	r1, r3, #4
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	f003 0210 	and.w	r2, r3, #16
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e041      	b.n	80060dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fa fe63 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f000 f95d 	bl	8006344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d001      	beq.n	80060fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e046      	b.n	800618a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a23      	ldr	r2, [pc, #140]	; (8006198 <HAL_TIM_Base_Start+0xb4>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d022      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006116:	d01d      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a1f      	ldr	r2, [pc, #124]	; (800619c <HAL_TIM_Base_Start+0xb8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d018      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <HAL_TIM_Base_Start+0xbc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d013      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <HAL_TIM_Base_Start+0xc0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00e      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1b      	ldr	r2, [pc, #108]	; (80061a8 <HAL_TIM_Base_Start+0xc4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d009      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a19      	ldr	r2, [pc, #100]	; (80061ac <HAL_TIM_Base_Start+0xc8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <HAL_TIM_Base_Start+0xcc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d111      	bne.n	8006178 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b06      	cmp	r3, #6
 8006164:	d010      	beq.n	8006188 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006176:	e007      	b.n	8006188 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40010000 	.word	0x40010000
 800619c:	40000400 	.word	0x40000400
 80061a0:	40000800 	.word	0x40000800
 80061a4:	40000c00 	.word	0x40000c00
 80061a8:	40010400 	.word	0x40010400
 80061ac:	40014000 	.word	0x40014000
 80061b0:	40001800 	.word	0x40001800

080061b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_TIM_ConfigClockSource+0x1c>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e0b4      	b.n	800633a <HAL_TIM_ConfigClockSource+0x186>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006208:	d03e      	beq.n	8006288 <HAL_TIM_ConfigClockSource+0xd4>
 800620a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620e:	f200 8087 	bhi.w	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006216:	f000 8086 	beq.w	8006326 <HAL_TIM_ConfigClockSource+0x172>
 800621a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621e:	d87f      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006220:	2b70      	cmp	r3, #112	; 0x70
 8006222:	d01a      	beq.n	800625a <HAL_TIM_ConfigClockSource+0xa6>
 8006224:	2b70      	cmp	r3, #112	; 0x70
 8006226:	d87b      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006228:	2b60      	cmp	r3, #96	; 0x60
 800622a:	d050      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0x11a>
 800622c:	2b60      	cmp	r3, #96	; 0x60
 800622e:	d877      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006230:	2b50      	cmp	r3, #80	; 0x50
 8006232:	d03c      	beq.n	80062ae <HAL_TIM_ConfigClockSource+0xfa>
 8006234:	2b50      	cmp	r3, #80	; 0x50
 8006236:	d873      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	d058      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0x13a>
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d86f      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006240:	2b30      	cmp	r3, #48	; 0x30
 8006242:	d064      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x15a>
 8006244:	2b30      	cmp	r3, #48	; 0x30
 8006246:	d86b      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006248:	2b20      	cmp	r3, #32
 800624a:	d060      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x15a>
 800624c:	2b20      	cmp	r3, #32
 800624e:	d867      	bhi.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d05c      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x15a>
 8006254:	2b10      	cmp	r3, #16
 8006256:	d05a      	beq.n	800630e <HAL_TIM_ConfigClockSource+0x15a>
 8006258:	e062      	b.n	8006320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800626a:	f000 f991 	bl	8006590 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800627c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	609a      	str	r2, [r3, #8]
      break;
 8006286:	e04f      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006298:	f000 f97a 	bl	8006590 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062aa:	609a      	str	r2, [r3, #8]
      break;
 80062ac:	e03c      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ba:	461a      	mov	r2, r3
 80062bc:	f000 f8ee 	bl	800649c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2150      	movs	r1, #80	; 0x50
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 f947 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 80062cc:	e02c      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062da:	461a      	mov	r2, r3
 80062dc:	f000 f90d 	bl	80064fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2160      	movs	r1, #96	; 0x60
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 f937 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 80062ec:	e01c      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	461a      	mov	r2, r3
 80062fc:	f000 f8ce 	bl	800649c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2140      	movs	r1, #64	; 0x40
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f927 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 800630c:	e00c      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f000 f91e 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 800631e:	e003      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
      break;
 8006324:	e000      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a46      	ldr	r2, [pc, #280]	; (8006470 <TIM_Base_SetConfig+0x12c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d013      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d00f      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a43      	ldr	r2, [pc, #268]	; (8006474 <TIM_Base_SetConfig+0x130>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00b      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a42      	ldr	r2, [pc, #264]	; (8006478 <TIM_Base_SetConfig+0x134>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d007      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a41      	ldr	r2, [pc, #260]	; (800647c <TIM_Base_SetConfig+0x138>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_Base_SetConfig+0x40>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a40      	ldr	r2, [pc, #256]	; (8006480 <TIM_Base_SetConfig+0x13c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d108      	bne.n	8006396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a35      	ldr	r2, [pc, #212]	; (8006470 <TIM_Base_SetConfig+0x12c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d02b      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a4:	d027      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a32      	ldr	r2, [pc, #200]	; (8006474 <TIM_Base_SetConfig+0x130>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d023      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a31      	ldr	r2, [pc, #196]	; (8006478 <TIM_Base_SetConfig+0x134>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01f      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a30      	ldr	r2, [pc, #192]	; (800647c <TIM_Base_SetConfig+0x138>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01b      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a2f      	ldr	r2, [pc, #188]	; (8006480 <TIM_Base_SetConfig+0x13c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d017      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a2e      	ldr	r2, [pc, #184]	; (8006484 <TIM_Base_SetConfig+0x140>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a2d      	ldr	r2, [pc, #180]	; (8006488 <TIM_Base_SetConfig+0x144>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00f      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2c      	ldr	r2, [pc, #176]	; (800648c <TIM_Base_SetConfig+0x148>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00b      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2b      	ldr	r2, [pc, #172]	; (8006490 <TIM_Base_SetConfig+0x14c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d007      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2a      	ldr	r2, [pc, #168]	; (8006494 <TIM_Base_SetConfig+0x150>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a29      	ldr	r2, [pc, #164]	; (8006498 <TIM_Base_SetConfig+0x154>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d108      	bne.n	8006408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a10      	ldr	r2, [pc, #64]	; (8006470 <TIM_Base_SetConfig+0x12c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_Base_SetConfig+0xf8>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a12      	ldr	r2, [pc, #72]	; (8006480 <TIM_Base_SetConfig+0x13c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d103      	bne.n	8006444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b01      	cmp	r3, #1
 8006454:	d105      	bne.n	8006462 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f023 0201 	bic.w	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	611a      	str	r2, [r3, #16]
  }
}
 8006462:	bf00      	nop
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00
 8006480:	40010400 	.word	0x40010400
 8006484:	40014000 	.word	0x40014000
 8006488:	40014400 	.word	0x40014400
 800648c:	40014800 	.word	0x40014800
 8006490:	40001800 	.word	0x40001800
 8006494:	40001c00 	.word	0x40001c00
 8006498:	40002000 	.word	0x40002000

0800649c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f023 0201 	bic.w	r2, r3, #1
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f023 030a 	bic.w	r3, r3, #10
 80064d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b087      	sub	sp, #28
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f023 0210 	bic.w	r2, r3, #16
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	031b      	lsls	r3, r3, #12
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006536:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	f043 0307 	orr.w	r3, r3, #7
 800657c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	609a      	str	r2, [r3, #8]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	021a      	lsls	r2, r3, #8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	609a      	str	r2, [r3, #8]
}
 80065c4:	bf00      	nop
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e05a      	b.n	800669e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a21      	ldr	r2, [pc, #132]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d022      	beq.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006634:	d01d      	beq.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a1d      	ldr	r2, [pc, #116]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d018      	beq.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1a      	ldr	r2, [pc, #104]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00e      	beq.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a18      	ldr	r2, [pc, #96]	; (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d004      	beq.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d10c      	bne.n	800668c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4313      	orrs	r3, r2
 8006682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40010000 	.word	0x40010000
 80066b0:	40000400 	.word	0x40000400
 80066b4:	40000800 	.word	0x40000800
 80066b8:	40000c00 	.word	0x40000c00
 80066bc:	40010400 	.word	0x40010400
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40001800 	.word	0x40001800

080066c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e042      	b.n	8006760 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d106      	bne.n	80066f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fa fb42 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2224      	movs	r2, #36	; 0x24
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800670a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fd69 	bl	80071e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695a      	ldr	r2, [r3, #20]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b20      	cmp	r3, #32
 8006786:	d175      	bne.n	8006874 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_UART_Transmit+0x2c>
 800678e:	88fb      	ldrh	r3, [r7, #6]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e06e      	b.n	8006876 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2221      	movs	r2, #33	; 0x21
 80067a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067a6:	f7fa fce7 	bl	8001178 <HAL_GetTick>
 80067aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	88fa      	ldrh	r2, [r7, #6]
 80067b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	88fa      	ldrh	r2, [r7, #6]
 80067b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c0:	d108      	bne.n	80067d4 <HAL_UART_Transmit+0x6c>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d104      	bne.n	80067d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	e003      	b.n	80067dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067dc:	e02e      	b.n	800683c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2200      	movs	r2, #0
 80067e6:	2180      	movs	r1, #128	; 0x80
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fb05 	bl	8006df8 <UART_WaitOnFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e03a      	b.n	8006876 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10b      	bne.n	800681e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	3302      	adds	r3, #2
 800681a:	61bb      	str	r3, [r7, #24]
 800681c:	e007      	b.n	800682e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	3301      	adds	r3, #1
 800682c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1cb      	bne.n	80067de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2200      	movs	r2, #0
 800684e:	2140      	movs	r1, #64	; 0x40
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fad1 	bl	8006df8 <UART_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e006      	b.n	8006876 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	e000      	b.n	8006876 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006874:	2302      	movs	r3, #2
  }
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b0ba      	sub	sp, #232	; 0xe8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10f      	bne.n	80068e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d009      	beq.n	80068e6 <HAL_UART_IRQHandler+0x66>
 80068d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fbc2 	bl	8007068 <UART_Receive_IT>
      return;
 80068e4:	e25b      	b.n	8006d9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 80de 	beq.w	8006aac <HAL_UART_IRQHandler+0x22c>
 80068f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006900:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80d1 	beq.w	8006aac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <HAL_UART_IRQHandler+0xae>
 8006916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006926:	f043 0201 	orr.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800692e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <HAL_UART_IRQHandler+0xd2>
 800693a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	f043 0202 	orr.w	r2, r3, #2
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00b      	beq.n	8006976 <HAL_UART_IRQHandler+0xf6>
 800695e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696e:	f043 0204 	orr.w	r2, r3, #4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d011      	beq.n	80069a6 <HAL_UART_IRQHandler+0x126>
 8006982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b00      	cmp	r3, #0
 800698c:	d105      	bne.n	800699a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800698e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699e:	f043 0208 	orr.w	r2, r3, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 81f2 	beq.w	8006d94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <HAL_UART_IRQHandler+0x14e>
 80069bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fb4d 	bl	8007068 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b40      	cmp	r3, #64	; 0x40
 80069da:	bf0c      	ite	eq
 80069dc:	2301      	moveq	r3, #1
 80069de:	2300      	movne	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d103      	bne.n	80069fa <HAL_UART_IRQHandler+0x17a>
 80069f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d04f      	beq.n	8006a9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fa55 	bl	8006eaa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0a:	2b40      	cmp	r3, #64	; 0x40
 8006a0c:	d141      	bne.n	8006a92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3314      	adds	r3, #20
 8006a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1d9      	bne.n	8006a0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d013      	beq.n	8006a8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	4a7e      	ldr	r2, [pc, #504]	; (8006c60 <HAL_UART_IRQHandler+0x3e0>)
 8006a68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fb fa52 	bl	8001f18 <HAL_DMA_Abort_IT>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d016      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a84:	4610      	mov	r0, r2
 8006a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	e00e      	b.n	8006aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f99e 	bl	8006dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a90:	e00a      	b.n	8006aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f99a 	bl	8006dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a98:	e006      	b.n	8006aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f996 	bl	8006dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006aa6:	e175      	b.n	8006d94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa8:	bf00      	nop
    return;
 8006aaa:	e173      	b.n	8006d94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	f040 814f 	bne.w	8006d54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aba:	f003 0310 	and.w	r3, r3, #16
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8148 	beq.w	8006d54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8141 	beq.w	8006d54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60bb      	str	r3, [r7, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	f040 80b6 	bne.w	8006c64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8145 	beq.w	8006d98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b16:	429a      	cmp	r2, r3
 8006b18:	f080 813e 	bcs.w	8006d98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b2e:	f000 8088 	beq.w	8006c42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	330c      	adds	r3, #12
 8006b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1d9      	bne.n	8006b32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3314      	adds	r3, #20
 8006b84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3314      	adds	r3, #20
 8006b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ba2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e1      	bne.n	8006b7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3314      	adds	r3, #20
 8006bc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3314      	adds	r3, #20
 8006bda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006be0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006be4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e3      	bne.n	8006bba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	330c      	adds	r3, #12
 8006c20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c24:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e3      	bne.n	8006c00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fb f8fb 	bl	8001e38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2202      	movs	r2, #2
 8006c46:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f8c1 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c5e:	e09b      	b.n	8006d98 <HAL_UART_IRQHandler+0x518>
 8006c60:	08006f71 	.word	0x08006f71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 808e 	beq.w	8006d9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 8089 	beq.w	8006d9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	330c      	adds	r3, #12
 8006c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cae:	647a      	str	r2, [r7, #68]	; 0x44
 8006cb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e3      	bne.n	8006c8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3314      	adds	r3, #20
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3314      	adds	r3, #20
 8006ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ce6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e3      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0310 	bic.w	r3, r3, #16
 8006d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d2c:	61fa      	str	r2, [r7, #28]
 8006d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	69b9      	ldr	r1, [r7, #24]
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	617b      	str	r3, [r7, #20]
   return(result);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e3      	bne.n	8006d08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f847 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d52:	e023      	b.n	8006d9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <HAL_UART_IRQHandler+0x4f4>
 8006d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f913 	bl	8006f98 <UART_Transmit_IT>
    return;
 8006d72:	e014      	b.n	8006d9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00e      	beq.n	8006d9e <HAL_UART_IRQHandler+0x51e>
 8006d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d008      	beq.n	8006d9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f953 	bl	8007038 <UART_EndTransmit_IT>
    return;
 8006d92:	e004      	b.n	8006d9e <HAL_UART_IRQHandler+0x51e>
    return;
 8006d94:	bf00      	nop
 8006d96:	e002      	b.n	8006d9e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d98:	bf00      	nop
 8006d9a:	e000      	b.n	8006d9e <HAL_UART_IRQHandler+0x51e>
      return;
 8006d9c:	bf00      	nop
  }
}
 8006d9e:	37e8      	adds	r7, #232	; 0xe8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e08:	e03b      	b.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e10:	d037      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e12:	f7fa f9b1 	bl	8001178 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	6a3a      	ldr	r2, [r7, #32]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d302      	bcc.n	8006e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e03a      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d023      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b80      	cmp	r3, #128	; 0x80
 8006e3e:	d020      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d01d      	beq.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d116      	bne.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e54:	2300      	movs	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f81d 	bl	8006eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2208      	movs	r2, #8
 8006e74:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e00f      	b.n	8006ea2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d0b4      	beq.n	8006e0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b095      	sub	sp, #84	; 0x54
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	330c      	adds	r3, #12
 8006ed0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ed2:	643a      	str	r2, [r7, #64]	; 0x40
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ed8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e5      	bne.n	8006eb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	f023 0301 	bic.w	r3, r3, #1
 8006efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3314      	adds	r3, #20
 8006f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e5      	bne.n	8006ee6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d119      	bne.n	8006f56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	330c      	adds	r3, #12
 8006f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f023 0310 	bic.w	r3, r3, #16
 8006f38:	647b      	str	r3, [r7, #68]	; 0x44
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	330c      	adds	r3, #12
 8006f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f42:	61ba      	str	r2, [r7, #24]
 8006f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	6979      	ldr	r1, [r7, #20]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e5      	bne.n	8006f22 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f64:	bf00      	nop
 8006f66:	3754      	adds	r7, #84	; 0x54
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7ff ff1e 	bl	8006dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f90:	bf00      	nop
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b21      	cmp	r3, #33	; 0x21
 8006faa:	d13e      	bne.n	800702a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb4:	d114      	bne.n	8006fe0 <UART_Transmit_IT+0x48>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d110      	bne.n	8006fe0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	1c9a      	adds	r2, r3, #2
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	621a      	str	r2, [r3, #32]
 8006fde:	e008      	b.n	8006ff2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	1c59      	adds	r1, r3, #1
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6211      	str	r1, [r2, #32]
 8006fea:	781a      	ldrb	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	4619      	mov	r1, r3
 8007000:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10f      	bne.n	8007026 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007014:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007024:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	e000      	b.n	800702c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
  }
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800704e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff fea3 	bl	8006da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08c      	sub	sp, #48	; 0x30
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b22      	cmp	r3, #34	; 0x22
 800707a:	f040 80ae 	bne.w	80071da <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007086:	d117      	bne.n	80070b8 <UART_Receive_IT+0x50>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d113      	bne.n	80070b8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007090:	2300      	movs	r3, #0
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	1c9a      	adds	r2, r3, #2
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	629a      	str	r2, [r3, #40]	; 0x28
 80070b6:	e026      	b.n	8007106 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ca:	d007      	beq.n	80070dc <UART_Receive_IT+0x74>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10a      	bne.n	80070ea <UART_Receive_IT+0x82>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	e008      	b.n	80070fc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29b      	uxth	r3, r3
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4619      	mov	r1, r3
 8007114:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007116:	2b00      	cmp	r3, #0
 8007118:	d15d      	bne.n	80071d6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0220 	bic.w	r2, r2, #32
 8007128:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68da      	ldr	r2, [r3, #12]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007138:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	695a      	ldr	r2, [r3, #20]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2220      	movs	r2, #32
 800714e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	2b01      	cmp	r3, #1
 800715e:	d135      	bne.n	80071cc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	330c      	adds	r3, #12
 800716c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	613b      	str	r3, [r7, #16]
   return(result);
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f023 0310 	bic.w	r3, r3, #16
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	330c      	adds	r3, #12
 8007184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007186:	623a      	str	r2, [r7, #32]
 8007188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	69f9      	ldr	r1, [r7, #28]
 800718c:	6a3a      	ldr	r2, [r7, #32]
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	61bb      	str	r3, [r7, #24]
   return(result);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e5      	bne.n	8007166 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d10a      	bne.n	80071be <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff fe0b 	bl	8006de0 <HAL_UARTEx_RxEventCallback>
 80071ca:	e002      	b.n	80071d2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff fdf3 	bl	8006db8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	e002      	b.n	80071dc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e000      	b.n	80071dc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071da:	2302      	movs	r3, #2
  }
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3730      	adds	r7, #48	; 0x30
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071e8:	b0c0      	sub	sp, #256	; 0x100
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007200:	68d9      	ldr	r1, [r3, #12]
 8007202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	ea40 0301 	orr.w	r3, r0, r1
 800720c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800720e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	431a      	orrs	r2, r3
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	431a      	orrs	r2, r3
 8007224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800723c:	f021 010c 	bic.w	r1, r1, #12
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800724a:	430b      	orrs	r3, r1
 800724c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800724e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800725a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725e:	6999      	ldr	r1, [r3, #24]
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	ea40 0301 	orr.w	r3, r0, r1
 800726a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800726c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b8f      	ldr	r3, [pc, #572]	; (80074b0 <UART_SetConfig+0x2cc>)
 8007274:	429a      	cmp	r2, r3
 8007276:	d005      	beq.n	8007284 <UART_SetConfig+0xa0>
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4b8d      	ldr	r3, [pc, #564]	; (80074b4 <UART_SetConfig+0x2d0>)
 8007280:	429a      	cmp	r2, r3
 8007282:	d104      	bne.n	800728e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007284:	f7fd fe4a 	bl	8004f1c <HAL_RCC_GetPCLK2Freq>
 8007288:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800728c:	e003      	b.n	8007296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800728e:	f7fd fe31 	bl	8004ef4 <HAL_RCC_GetPCLK1Freq>
 8007292:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a0:	f040 810c 	bne.w	80074bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072a8:	2200      	movs	r2, #0
 80072aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072b6:	4622      	mov	r2, r4
 80072b8:	462b      	mov	r3, r5
 80072ba:	1891      	adds	r1, r2, r2
 80072bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80072be:	415b      	adcs	r3, r3
 80072c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072c6:	4621      	mov	r1, r4
 80072c8:	eb12 0801 	adds.w	r8, r2, r1
 80072cc:	4629      	mov	r1, r5
 80072ce:	eb43 0901 	adc.w	r9, r3, r1
 80072d2:	f04f 0200 	mov.w	r2, #0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072e6:	4690      	mov	r8, r2
 80072e8:	4699      	mov	r9, r3
 80072ea:	4623      	mov	r3, r4
 80072ec:	eb18 0303 	adds.w	r3, r8, r3
 80072f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072f4:	462b      	mov	r3, r5
 80072f6:	eb49 0303 	adc.w	r3, r9, r3
 80072fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800730a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800730e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007312:	460b      	mov	r3, r1
 8007314:	18db      	adds	r3, r3, r3
 8007316:	653b      	str	r3, [r7, #80]	; 0x50
 8007318:	4613      	mov	r3, r2
 800731a:	eb42 0303 	adc.w	r3, r2, r3
 800731e:	657b      	str	r3, [r7, #84]	; 0x54
 8007320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007328:	f7f8 ffda 	bl	80002e0 <__aeabi_uldivmod>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4b61      	ldr	r3, [pc, #388]	; (80074b8 <UART_SetConfig+0x2d4>)
 8007332:	fba3 2302 	umull	r2, r3, r3, r2
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	011c      	lsls	r4, r3, #4
 800733a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800733e:	2200      	movs	r2, #0
 8007340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007344:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800734c:	4642      	mov	r2, r8
 800734e:	464b      	mov	r3, r9
 8007350:	1891      	adds	r1, r2, r2
 8007352:	64b9      	str	r1, [r7, #72]	; 0x48
 8007354:	415b      	adcs	r3, r3
 8007356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800735c:	4641      	mov	r1, r8
 800735e:	eb12 0a01 	adds.w	sl, r2, r1
 8007362:	4649      	mov	r1, r9
 8007364:	eb43 0b01 	adc.w	fp, r3, r1
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800737c:	4692      	mov	sl, r2
 800737e:	469b      	mov	fp, r3
 8007380:	4643      	mov	r3, r8
 8007382:	eb1a 0303 	adds.w	r3, sl, r3
 8007386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800738a:	464b      	mov	r3, r9
 800738c:	eb4b 0303 	adc.w	r3, fp, r3
 8007390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073a8:	460b      	mov	r3, r1
 80073aa:	18db      	adds	r3, r3, r3
 80073ac:	643b      	str	r3, [r7, #64]	; 0x40
 80073ae:	4613      	mov	r3, r2
 80073b0:	eb42 0303 	adc.w	r3, r2, r3
 80073b4:	647b      	str	r3, [r7, #68]	; 0x44
 80073b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073be:	f7f8 ff8f 	bl	80002e0 <__aeabi_uldivmod>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	4611      	mov	r1, r2
 80073c8:	4b3b      	ldr	r3, [pc, #236]	; (80074b8 <UART_SetConfig+0x2d4>)
 80073ca:	fba3 2301 	umull	r2, r3, r3, r1
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	2264      	movs	r2, #100	; 0x64
 80073d2:	fb02 f303 	mul.w	r3, r2, r3
 80073d6:	1acb      	subs	r3, r1, r3
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073de:	4b36      	ldr	r3, [pc, #216]	; (80074b8 <UART_SetConfig+0x2d4>)
 80073e0:	fba3 2302 	umull	r2, r3, r3, r2
 80073e4:	095b      	lsrs	r3, r3, #5
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073ec:	441c      	add	r4, r3
 80073ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007400:	4642      	mov	r2, r8
 8007402:	464b      	mov	r3, r9
 8007404:	1891      	adds	r1, r2, r2
 8007406:	63b9      	str	r1, [r7, #56]	; 0x38
 8007408:	415b      	adcs	r3, r3
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800740c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007410:	4641      	mov	r1, r8
 8007412:	1851      	adds	r1, r2, r1
 8007414:	6339      	str	r1, [r7, #48]	; 0x30
 8007416:	4649      	mov	r1, r9
 8007418:	414b      	adcs	r3, r1
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	f04f 0300 	mov.w	r3, #0
 8007424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007428:	4659      	mov	r1, fp
 800742a:	00cb      	lsls	r3, r1, #3
 800742c:	4651      	mov	r1, sl
 800742e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007432:	4651      	mov	r1, sl
 8007434:	00ca      	lsls	r2, r1, #3
 8007436:	4610      	mov	r0, r2
 8007438:	4619      	mov	r1, r3
 800743a:	4603      	mov	r3, r0
 800743c:	4642      	mov	r2, r8
 800743e:	189b      	adds	r3, r3, r2
 8007440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007444:	464b      	mov	r3, r9
 8007446:	460a      	mov	r2, r1
 8007448:	eb42 0303 	adc.w	r3, r2, r3
 800744c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800745c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007464:	460b      	mov	r3, r1
 8007466:	18db      	adds	r3, r3, r3
 8007468:	62bb      	str	r3, [r7, #40]	; 0x28
 800746a:	4613      	mov	r3, r2
 800746c:	eb42 0303 	adc.w	r3, r2, r3
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800747a:	f7f8 ff31 	bl	80002e0 <__aeabi_uldivmod>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <UART_SetConfig+0x2d4>)
 8007484:	fba3 1302 	umull	r1, r3, r3, r2
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	2164      	movs	r1, #100	; 0x64
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	3332      	adds	r3, #50	; 0x32
 8007496:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <UART_SetConfig+0x2d4>)
 8007498:	fba2 2303 	umull	r2, r3, r2, r3
 800749c:	095b      	lsrs	r3, r3, #5
 800749e:	f003 0207 	and.w	r2, r3, #7
 80074a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4422      	add	r2, r4
 80074aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074ac:	e106      	b.n	80076bc <UART_SetConfig+0x4d8>
 80074ae:	bf00      	nop
 80074b0:	40011000 	.word	0x40011000
 80074b4:	40011400 	.word	0x40011400
 80074b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074ce:	4642      	mov	r2, r8
 80074d0:	464b      	mov	r3, r9
 80074d2:	1891      	adds	r1, r2, r2
 80074d4:	6239      	str	r1, [r7, #32]
 80074d6:	415b      	adcs	r3, r3
 80074d8:	627b      	str	r3, [r7, #36]	; 0x24
 80074da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074de:	4641      	mov	r1, r8
 80074e0:	1854      	adds	r4, r2, r1
 80074e2:	4649      	mov	r1, r9
 80074e4:	eb43 0501 	adc.w	r5, r3, r1
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	00eb      	lsls	r3, r5, #3
 80074f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074f6:	00e2      	lsls	r2, r4, #3
 80074f8:	4614      	mov	r4, r2
 80074fa:	461d      	mov	r5, r3
 80074fc:	4643      	mov	r3, r8
 80074fe:	18e3      	adds	r3, r4, r3
 8007500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007504:	464b      	mov	r3, r9
 8007506:	eb45 0303 	adc.w	r3, r5, r3
 800750a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800750e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800751a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800752a:	4629      	mov	r1, r5
 800752c:	008b      	lsls	r3, r1, #2
 800752e:	4621      	mov	r1, r4
 8007530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007534:	4621      	mov	r1, r4
 8007536:	008a      	lsls	r2, r1, #2
 8007538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800753c:	f7f8 fed0 	bl	80002e0 <__aeabi_uldivmod>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4b60      	ldr	r3, [pc, #384]	; (80076c8 <UART_SetConfig+0x4e4>)
 8007546:	fba3 2302 	umull	r2, r3, r3, r2
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	011c      	lsls	r4, r3, #4
 800754e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007552:	2200      	movs	r2, #0
 8007554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800755c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007560:	4642      	mov	r2, r8
 8007562:	464b      	mov	r3, r9
 8007564:	1891      	adds	r1, r2, r2
 8007566:	61b9      	str	r1, [r7, #24]
 8007568:	415b      	adcs	r3, r3
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007570:	4641      	mov	r1, r8
 8007572:	1851      	adds	r1, r2, r1
 8007574:	6139      	str	r1, [r7, #16]
 8007576:	4649      	mov	r1, r9
 8007578:	414b      	adcs	r3, r1
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007588:	4659      	mov	r1, fp
 800758a:	00cb      	lsls	r3, r1, #3
 800758c:	4651      	mov	r1, sl
 800758e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007592:	4651      	mov	r1, sl
 8007594:	00ca      	lsls	r2, r1, #3
 8007596:	4610      	mov	r0, r2
 8007598:	4619      	mov	r1, r3
 800759a:	4603      	mov	r3, r0
 800759c:	4642      	mov	r2, r8
 800759e:	189b      	adds	r3, r3, r2
 80075a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075a4:	464b      	mov	r3, r9
 80075a6:	460a      	mov	r2, r1
 80075a8:	eb42 0303 	adc.w	r3, r2, r3
 80075ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80075ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075c8:	4649      	mov	r1, r9
 80075ca:	008b      	lsls	r3, r1, #2
 80075cc:	4641      	mov	r1, r8
 80075ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d2:	4641      	mov	r1, r8
 80075d4:	008a      	lsls	r2, r1, #2
 80075d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075da:	f7f8 fe81 	bl	80002e0 <__aeabi_uldivmod>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	4b38      	ldr	r3, [pc, #224]	; (80076c8 <UART_SetConfig+0x4e4>)
 80075e6:	fba3 2301 	umull	r2, r3, r3, r1
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	2264      	movs	r2, #100	; 0x64
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
 80075f2:	1acb      	subs	r3, r1, r3
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	3332      	adds	r3, #50	; 0x32
 80075f8:	4a33      	ldr	r2, [pc, #204]	; (80076c8 <UART_SetConfig+0x4e4>)
 80075fa:	fba2 2303 	umull	r2, r3, r2, r3
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007604:	441c      	add	r4, r3
 8007606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800760a:	2200      	movs	r2, #0
 800760c:	673b      	str	r3, [r7, #112]	; 0x70
 800760e:	677a      	str	r2, [r7, #116]	; 0x74
 8007610:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007614:	4642      	mov	r2, r8
 8007616:	464b      	mov	r3, r9
 8007618:	1891      	adds	r1, r2, r2
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	415b      	adcs	r3, r3
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007624:	4641      	mov	r1, r8
 8007626:	1851      	adds	r1, r2, r1
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	4649      	mov	r1, r9
 800762c:	414b      	adcs	r3, r1
 800762e:	607b      	str	r3, [r7, #4]
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800763c:	4659      	mov	r1, fp
 800763e:	00cb      	lsls	r3, r1, #3
 8007640:	4651      	mov	r1, sl
 8007642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007646:	4651      	mov	r1, sl
 8007648:	00ca      	lsls	r2, r1, #3
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	4603      	mov	r3, r0
 8007650:	4642      	mov	r2, r8
 8007652:	189b      	adds	r3, r3, r2
 8007654:	66bb      	str	r3, [r7, #104]	; 0x68
 8007656:	464b      	mov	r3, r9
 8007658:	460a      	mov	r2, r1
 800765a:	eb42 0303 	adc.w	r3, r2, r3
 800765e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	663b      	str	r3, [r7, #96]	; 0x60
 800766a:	667a      	str	r2, [r7, #100]	; 0x64
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007678:	4649      	mov	r1, r9
 800767a:	008b      	lsls	r3, r1, #2
 800767c:	4641      	mov	r1, r8
 800767e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007682:	4641      	mov	r1, r8
 8007684:	008a      	lsls	r2, r1, #2
 8007686:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800768a:	f7f8 fe29 	bl	80002e0 <__aeabi_uldivmod>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4b0d      	ldr	r3, [pc, #52]	; (80076c8 <UART_SetConfig+0x4e4>)
 8007694:	fba3 1302 	umull	r1, r3, r3, r2
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	2164      	movs	r1, #100	; 0x64
 800769c:	fb01 f303 	mul.w	r3, r1, r3
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	3332      	adds	r3, #50	; 0x32
 80076a6:	4a08      	ldr	r2, [pc, #32]	; (80076c8 <UART_SetConfig+0x4e4>)
 80076a8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ac:	095b      	lsrs	r3, r3, #5
 80076ae:	f003 020f 	and.w	r2, r3, #15
 80076b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4422      	add	r2, r4
 80076ba:	609a      	str	r2, [r3, #8]
}
 80076bc:	bf00      	nop
 80076be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076c2:	46bd      	mov	sp, r7
 80076c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076c8:	51eb851f 	.word	0x51eb851f

080076cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076cc:	b084      	sub	sp, #16
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	f107 001c 	add.w	r0, r7, #28
 80076da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076de:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d123      	bne.n	800772e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80076fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800770e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007712:	2b01      	cmp	r3, #1
 8007714:	d105      	bne.n	8007722 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fae2 	bl	8008cec <USB_CoreReset>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	e01b      	b.n	8007766 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fad6 	bl	8008cec <USB_CoreReset>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007744:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007748:	2b00      	cmp	r3, #0
 800774a:	d106      	bne.n	800775a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
 8007758:	e005      	b.n	8007766 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007766:	7fbb      	ldrb	r3, [r7, #30]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d10b      	bne.n	8007784 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f043 0206 	orr.w	r2, r3, #6
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f043 0220 	orr.w	r2, r3, #32
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007790:	b004      	add	sp, #16
 8007792:	4770      	bx	lr

08007794 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	4613      	mov	r3, r2
 80077a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d165      	bne.n	8007874 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	4a41      	ldr	r2, [pc, #260]	; (80078b0 <USB_SetTurnaroundTime+0x11c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d906      	bls.n	80077be <USB_SetTurnaroundTime+0x2a>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4a40      	ldr	r2, [pc, #256]	; (80078b4 <USB_SetTurnaroundTime+0x120>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d202      	bcs.n	80077be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80077b8:	230f      	movs	r3, #15
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e062      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4a3c      	ldr	r2, [pc, #240]	; (80078b4 <USB_SetTurnaroundTime+0x120>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d306      	bcc.n	80077d4 <USB_SetTurnaroundTime+0x40>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	4a3b      	ldr	r2, [pc, #236]	; (80078b8 <USB_SetTurnaroundTime+0x124>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d202      	bcs.n	80077d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80077ce:	230e      	movs	r3, #14
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e057      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4a38      	ldr	r2, [pc, #224]	; (80078b8 <USB_SetTurnaroundTime+0x124>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d306      	bcc.n	80077ea <USB_SetTurnaroundTime+0x56>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4a37      	ldr	r2, [pc, #220]	; (80078bc <USB_SetTurnaroundTime+0x128>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d202      	bcs.n	80077ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80077e4:	230d      	movs	r3, #13
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	e04c      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	4a33      	ldr	r2, [pc, #204]	; (80078bc <USB_SetTurnaroundTime+0x128>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d306      	bcc.n	8007800 <USB_SetTurnaroundTime+0x6c>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	4a32      	ldr	r2, [pc, #200]	; (80078c0 <USB_SetTurnaroundTime+0x12c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d802      	bhi.n	8007800 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80077fa:	230c      	movs	r3, #12
 80077fc:	617b      	str	r3, [r7, #20]
 80077fe:	e041      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	4a2f      	ldr	r2, [pc, #188]	; (80078c0 <USB_SetTurnaroundTime+0x12c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d906      	bls.n	8007816 <USB_SetTurnaroundTime+0x82>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4a2e      	ldr	r2, [pc, #184]	; (80078c4 <USB_SetTurnaroundTime+0x130>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d802      	bhi.n	8007816 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007810:	230b      	movs	r3, #11
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	e036      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	4a2a      	ldr	r2, [pc, #168]	; (80078c4 <USB_SetTurnaroundTime+0x130>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d906      	bls.n	800782c <USB_SetTurnaroundTime+0x98>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4a29      	ldr	r2, [pc, #164]	; (80078c8 <USB_SetTurnaroundTime+0x134>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d802      	bhi.n	800782c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007826:	230a      	movs	r3, #10
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	e02b      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4a26      	ldr	r2, [pc, #152]	; (80078c8 <USB_SetTurnaroundTime+0x134>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d906      	bls.n	8007842 <USB_SetTurnaroundTime+0xae>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4a25      	ldr	r2, [pc, #148]	; (80078cc <USB_SetTurnaroundTime+0x138>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d202      	bcs.n	8007842 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800783c:	2309      	movs	r3, #9
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e020      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4a21      	ldr	r2, [pc, #132]	; (80078cc <USB_SetTurnaroundTime+0x138>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d306      	bcc.n	8007858 <USB_SetTurnaroundTime+0xc4>
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4a20      	ldr	r2, [pc, #128]	; (80078d0 <USB_SetTurnaroundTime+0x13c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d802      	bhi.n	8007858 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007852:	2308      	movs	r3, #8
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	e015      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4a1d      	ldr	r2, [pc, #116]	; (80078d0 <USB_SetTurnaroundTime+0x13c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d906      	bls.n	800786e <USB_SetTurnaroundTime+0xda>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4a1c      	ldr	r2, [pc, #112]	; (80078d4 <USB_SetTurnaroundTime+0x140>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d202      	bcs.n	800786e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007868:	2307      	movs	r3, #7
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	e00a      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800786e:	2306      	movs	r3, #6
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	e007      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800787a:	2309      	movs	r3, #9
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	e001      	b.n	8007884 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007880:	2309      	movs	r3, #9
 8007882:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	029b      	lsls	r3, r3, #10
 8007898:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800789c:	431a      	orrs	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	00d8acbf 	.word	0x00d8acbf
 80078b4:	00e4e1c0 	.word	0x00e4e1c0
 80078b8:	00f42400 	.word	0x00f42400
 80078bc:	01067380 	.word	0x01067380
 80078c0:	011a499f 	.word	0x011a499f
 80078c4:	01312cff 	.word	0x01312cff
 80078c8:	014ca43f 	.word	0x014ca43f
 80078cc:	016e3600 	.word	0x016e3600
 80078d0:	01a6ab1f 	.word	0x01a6ab1f
 80078d4:	01e84800 	.word	0x01e84800

080078d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f043 0201 	orr.w	r2, r3, #1
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f023 0201 	bic.w	r2, r3, #1
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d115      	bne.n	800796a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800794a:	200a      	movs	r0, #10
 800794c:	f7f9 fc20 	bl	8001190 <HAL_Delay>
      ms += 10U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	330a      	adds	r3, #10
 8007954:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 f939 	bl	8008bce <USB_GetMode>
 800795c:	4603      	mov	r3, r0
 800795e:	2b01      	cmp	r3, #1
 8007960:	d01e      	beq.n	80079a0 <USB_SetCurrentMode+0x84>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2bc7      	cmp	r3, #199	; 0xc7
 8007966:	d9f0      	bls.n	800794a <USB_SetCurrentMode+0x2e>
 8007968:	e01a      	b.n	80079a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d115      	bne.n	800799c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800797c:	200a      	movs	r0, #10
 800797e:	f7f9 fc07 	bl	8001190 <HAL_Delay>
      ms += 10U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	330a      	adds	r3, #10
 8007986:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 f920 	bl	8008bce <USB_GetMode>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <USB_SetCurrentMode+0x84>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2bc7      	cmp	r3, #199	; 0xc7
 8007998:	d9f0      	bls.n	800797c <USB_SetCurrentMode+0x60>
 800799a:	e001      	b.n	80079a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e005      	b.n	80079ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2bc8      	cmp	r3, #200	; 0xc8
 80079a4:	d101      	bne.n	80079aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079b4:	b084      	sub	sp, #16
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b086      	sub	sp, #24
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
 80079d2:	e009      	b.n	80079e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	3340      	adds	r3, #64	; 0x40
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	2200      	movs	r2, #0
 80079e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	3301      	adds	r3, #1
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	2b0e      	cmp	r3, #14
 80079ec:	d9f2      	bls.n	80079d4 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80079ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d11c      	bne.n	8007a30 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a04:	f043 0302 	orr.w	r3, r3, #2
 8007a08:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e005      	b.n	8007a3c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a42:	461a      	mov	r2, r3
 8007a44:	2300      	movs	r3, #0
 8007a46:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a48:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d10d      	bne.n	8007a6c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a58:	2100      	movs	r1, #0
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f968 	bl	8007d30 <USB_SetDevSpeed>
 8007a60:	e008      	b.n	8007a74 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a62:	2101      	movs	r1, #1
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f963 	bl	8007d30 <USB_SetDevSpeed>
 8007a6a:	e003      	b.n	8007a74 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a6c:	2103      	movs	r1, #3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f95e 	bl	8007d30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a74:	2110      	movs	r1, #16
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f8fa 	bl	8007c70 <USB_FlushTxFifo>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f924 	bl	8007cd4 <USB_FlushRxFifo>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2300      	movs	r3, #0
 8007aac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aba:	2300      	movs	r3, #0
 8007abc:	613b      	str	r3, [r7, #16]
 8007abe:	e043      	b.n	8007b48 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ad6:	d118      	bne.n	8007b0a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10a      	bne.n	8007af4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aea:	461a      	mov	r2, r3
 8007aec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	e013      	b.n	8007b1c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b00:	461a      	mov	r2, r3
 8007b02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	e008      	b.n	8007b1c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b16:	461a      	mov	r2, r3
 8007b18:	2300      	movs	r3, #0
 8007b1a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007b40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	3301      	adds	r3, #1
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d3b5      	bcc.n	8007ac0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b54:	2300      	movs	r3, #0
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	e043      	b.n	8007be2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b70:	d118      	bne.n	8007ba4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	461a      	mov	r2, r3
 8007b86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007b8a:	6013      	str	r3, [r2, #0]
 8007b8c:	e013      	b.n	8007bb6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	e008      	b.n	8007bb6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	3301      	adds	r3, #1
 8007be0:	613b      	str	r3, [r7, #16]
 8007be2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007be6:	461a      	mov	r2, r3
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d3b5      	bcc.n	8007b5a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c00:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007c0e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d105      	bne.n	8007c24 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	f043 0210 	orr.w	r2, r3, #16
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	699a      	ldr	r2, [r3, #24]
 8007c28:	4b10      	ldr	r3, [pc, #64]	; (8007c6c <USB_DevInit+0x2b8>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f043 0208 	orr.w	r2, r3, #8
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d107      	bne.n	8007c5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c54:	f043 0304 	orr.w	r3, r3, #4
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3718      	adds	r7, #24
 8007c62:	46bd      	mov	sp, r7
 8007c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c68:	b004      	add	sp, #16
 8007c6a:	4770      	bx	lr
 8007c6c:	803c3800 	.word	0x803c3800

08007c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3301      	adds	r3, #1
 8007c82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007c8a:	d901      	bls.n	8007c90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e01b      	b.n	8007cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	daf2      	bge.n	8007c7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	019b      	lsls	r3, r3, #6
 8007ca0:	f043 0220 	orr.w	r2, r3, #32
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007cb4:	d901      	bls.n	8007cba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e006      	b.n	8007cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b20      	cmp	r3, #32
 8007cc4:	d0f0      	beq.n	8007ca8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007cec:	d901      	bls.n	8007cf2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e018      	b.n	8007d24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	daf2      	bge.n	8007ce0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2210      	movs	r2, #16
 8007d02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007d10:	d901      	bls.n	8007d16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e006      	b.n	8007d24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	f003 0310 	and.w	r3, r3, #16
 8007d1e:	2b10      	cmp	r3, #16
 8007d20:	d0f0      	beq.n	8007d04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	68f9      	ldr	r1, [r7, #12]
 8007d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d50:	4313      	orrs	r3, r2
 8007d52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b087      	sub	sp, #28
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f003 0306 	and.w	r3, r3, #6
 8007d7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d82:	2300      	movs	r3, #0
 8007d84:	75fb      	strb	r3, [r7, #23]
 8007d86:	e00a      	b.n	8007d9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d002      	beq.n	8007d94 <USB_GetDevSpeed+0x32>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b06      	cmp	r3, #6
 8007d92:	d102      	bne.n	8007d9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d94:	2302      	movs	r3, #2
 8007d96:	75fb      	strb	r3, [r7, #23]
 8007d98:	e001      	b.n	8007d9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d9a:	230f      	movs	r3, #15
 8007d9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d13a      	bne.n	8007e3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dce:	69da      	ldr	r2, [r3, #28]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	f003 030f 	and.w	r3, r3, #15
 8007dd8:	2101      	movs	r1, #1
 8007dda:	fa01 f303 	lsl.w	r3, r1, r3
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	68f9      	ldr	r1, [r7, #12]
 8007de2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007de6:	4313      	orrs	r3, r2
 8007de8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d155      	bne.n	8007eac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	791b      	ldrb	r3, [r3, #4]
 8007e1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	059b      	lsls	r3, r3, #22
 8007e22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e24:	4313      	orrs	r3, r2
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	0151      	lsls	r1, r2, #5
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	440a      	add	r2, r1
 8007e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	e036      	b.n	8007eac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	69da      	ldr	r2, [r3, #28]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 030f 	and.w	r3, r3, #15
 8007e4e:	2101      	movs	r1, #1
 8007e50:	fa01 f303 	lsl.w	r3, r1, r3
 8007e54:	041b      	lsls	r3, r3, #16
 8007e56:	68f9      	ldr	r1, [r7, #12]
 8007e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d11a      	bne.n	8007eac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	791b      	ldrb	r3, [r3, #4]
 8007e90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e92:	430b      	orrs	r3, r1
 8007e94:	4313      	orrs	r3, r2
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	0151      	lsls	r1, r2, #5
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
	...

08007ebc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d161      	bne.n	8007f9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eee:	d11f      	bne.n	8007f30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	0151      	lsls	r1, r2, #5
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	440a      	add	r2, r1
 8007f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	2101      	movs	r1, #1
 8007f42:	fa01 f303 	lsl.w	r3, r1, r3
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f50:	4013      	ands	r3, r2
 8007f52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5a:	69da      	ldr	r2, [r3, #28]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	2101      	movs	r1, #1
 8007f66:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f74:	4013      	ands	r3, r2
 8007f76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	0159      	lsls	r1, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	440b      	add	r3, r1
 8007f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f92:	4619      	mov	r1, r3
 8007f94:	4b35      	ldr	r3, [pc, #212]	; (800806c <USB_DeactivateEndpoint+0x1b0>)
 8007f96:	4013      	ands	r3, r2
 8007f98:	600b      	str	r3, [r1, #0]
 8007f9a:	e060      	b.n	800805e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fb2:	d11f      	bne.n	8007ff4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	0151      	lsls	r1, r2, #5
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	440a      	add	r2, r1
 8007fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ff2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	2101      	movs	r1, #1
 8008006:	fa01 f303 	lsl.w	r3, r1, r3
 800800a:	041b      	lsls	r3, r3, #16
 800800c:	43db      	mvns	r3, r3
 800800e:	68f9      	ldr	r1, [r7, #12]
 8008010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008014:	4013      	ands	r3, r2
 8008016:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801e:	69da      	ldr	r2, [r3, #28]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	f003 030f 	and.w	r3, r3, #15
 8008028:	2101      	movs	r1, #1
 800802a:	fa01 f303 	lsl.w	r3, r1, r3
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	43db      	mvns	r3, r3
 8008032:	68f9      	ldr	r1, [r7, #12]
 8008034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008038:	4013      	ands	r3, r2
 800803a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	0159      	lsls	r1, r3, #5
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	440b      	add	r3, r1
 8008052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008056:	4619      	mov	r1, r3
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <USB_DeactivateEndpoint+0x1b4>)
 800805a:	4013      	ands	r3, r2
 800805c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	ec337800 	.word	0xec337800
 8008070:	eff37800 	.word	0xeff37800

08008074 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08a      	sub	sp, #40	; 0x28
 8008078:	af02      	add	r7, sp, #8
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	785b      	ldrb	r3, [r3, #1]
 8008090:	2b01      	cmp	r3, #1
 8008092:	f040 8180 	bne.w	8008396 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d132      	bne.n	8008104 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	0151      	lsls	r1, r2, #5
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	440a      	add	r2, r1
 80080b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fc:	0cdb      	lsrs	r3, r3, #19
 80080fe:	04db      	lsls	r3, r3, #19
 8008100:	6113      	str	r3, [r2, #16]
 8008102:	e098      	b.n	8008236 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	0151      	lsls	r1, r2, #5
 8008116:	69fa      	ldr	r2, [r7, #28]
 8008118:	440a      	add	r2, r1
 800811a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800811e:	0cdb      	lsrs	r3, r3, #19
 8008120:	04db      	lsls	r3, r3, #19
 8008122:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	0151      	lsls	r1, r2, #5
 8008136:	69fa      	ldr	r2, [r7, #28]
 8008138:	440a      	add	r2, r1
 800813a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800813e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008142:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008146:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d11a      	bne.n	8008184 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	691a      	ldr	r2, [r3, #16]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	429a      	cmp	r2, r3
 8008158:	d903      	bls.n	8008162 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	015a      	lsls	r2, r3, #5
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	4413      	add	r3, r2
 800816a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	0151      	lsls	r1, r2, #5
 8008174:	69fa      	ldr	r2, [r7, #28]
 8008176:	440a      	add	r2, r1
 8008178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800817c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008180:	6113      	str	r3, [r2, #16]
 8008182:	e045      	b.n	8008210 <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4413      	add	r3, r2
 800818e:	1e5a      	subs	r2, r3, #1
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	fbb2 f3f3 	udiv	r3, r2, r3
 8008198:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a6:	691a      	ldr	r2, [r3, #16]
 80081a8:	8afb      	ldrh	r3, [r7, #22]
 80081aa:	04db      	lsls	r3, r3, #19
 80081ac:	4619      	mov	r1, r3
 80081ae:	4ba4      	ldr	r3, [pc, #656]	; (8008440 <USB_EPStartXfer+0x3cc>)
 80081b0:	400b      	ands	r3, r1
 80081b2:	69b9      	ldr	r1, [r7, #24]
 80081b4:	0148      	lsls	r0, r1, #5
 80081b6:	69f9      	ldr	r1, [r7, #28]
 80081b8:	4401      	add	r1, r0
 80081ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80081be:	4313      	orrs	r3, r2
 80081c0:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	791b      	ldrb	r3, [r3, #4]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d122      	bne.n	8008210 <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	0151      	lsls	r1, r2, #5
 80081dc:	69fa      	ldr	r2, [r7, #28]
 80081de:	440a      	add	r2, r1
 80081e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80081e8:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f6:	691a      	ldr	r2, [r3, #16]
 80081f8:	8afb      	ldrh	r3, [r7, #22]
 80081fa:	075b      	lsls	r3, r3, #29
 80081fc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8008200:	69b9      	ldr	r1, [r7, #24]
 8008202:	0148      	lsls	r0, r1, #5
 8008204:	69f9      	ldr	r1, [r7, #28]
 8008206:	4401      	add	r1, r0
 8008208:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800820c:	4313      	orrs	r3, r2
 800820e:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821c:	691a      	ldr	r2, [r3, #16]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008226:	69b9      	ldr	r1, [r7, #24]
 8008228:	0148      	lsls	r0, r1, #5
 800822a:	69f9      	ldr	r1, [r7, #28]
 800822c:	4401      	add	r1, r0
 800822e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008232:	4313      	orrs	r3, r2
 8008234:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d14b      	bne.n	80082d4 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d009      	beq.n	8008258 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008250:	461a      	mov	r2, r3
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	791b      	ldrb	r3, [r3, #4]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d128      	bne.n	80082b2 <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826c:	2b00      	cmp	r3, #0
 800826e:	d110      	bne.n	8008292 <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	440a      	add	r2, r1
 8008286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800828a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800828e:	6013      	str	r3, [r2, #0]
 8008290:	e00f      	b.n	80082b2 <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	015a      	lsls	r2, r3, #5
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	4413      	add	r3, r2
 800829a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	0151      	lsls	r1, r2, #5
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	440a      	add	r2, r1
 80082a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082d0:	6013      	str	r3, [r2, #0]
 80082d2:	e165      	b.n	80085a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	0151      	lsls	r1, r2, #5
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	440a      	add	r2, r1
 80082ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	791b      	ldrb	r3, [r3, #4]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d015      	beq.n	8008328 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 814d 	beq.w	80085a0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800830c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	2101      	movs	r1, #1
 8008318:	fa01 f303 	lsl.w	r3, r1, r3
 800831c:	69f9      	ldr	r1, [r7, #28]
 800831e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008322:	4313      	orrs	r3, r2
 8008324:	634b      	str	r3, [r1, #52]	; 0x34
 8008326:	e13b      	b.n	80085a0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008334:	2b00      	cmp	r3, #0
 8008336:	d110      	bne.n	800835a <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	0151      	lsls	r1, r2, #5
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	440a      	add	r2, r1
 800834e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008356:	6013      	str	r3, [r2, #0]
 8008358:	e00f      	b.n	800837a <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	4413      	add	r3, r2
 8008362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	0151      	lsls	r1, r2, #5
 800836c:	69fa      	ldr	r2, [r7, #28]
 800836e:	440a      	add	r2, r1
 8008370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008378:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	68d9      	ldr	r1, [r3, #12]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	781a      	ldrb	r2, [r3, #0]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	b298      	uxth	r0, r3
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	4603      	mov	r3, r0
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f9b8 	bl	8008704 <USB_WritePacket>
 8008394:	e104      	b.n	80085a0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	0151      	lsls	r1, r2, #5
 80083a8:	69fa      	ldr	r2, [r7, #28]
 80083aa:	440a      	add	r2, r1
 80083ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b0:	0cdb      	lsrs	r3, r3, #19
 80083b2:	04db      	lsls	r3, r3, #19
 80083b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	0151      	lsls	r1, r2, #5
 80083c8:	69fa      	ldr	r2, [r7, #28]
 80083ca:	440a      	add	r2, r1
 80083cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083d8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d131      	bne.n	8008444 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800840e:	69b9      	ldr	r1, [r7, #24]
 8008410:	0148      	lsls	r0, r1, #5
 8008412:	69f9      	ldr	r1, [r7, #28]
 8008414:	4401      	add	r1, r0
 8008416:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800841a:	4313      	orrs	r3, r2
 800841c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	0151      	lsls	r1, r2, #5
 8008430:	69fa      	ldr	r2, [r7, #28]
 8008432:	440a      	add	r2, r1
 8008434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800843c:	6113      	str	r3, [r2, #16]
 800843e:	e061      	b.n	8008504 <USB_EPStartXfer+0x490>
 8008440:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d123      	bne.n	8008494 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008458:	691a      	ldr	r2, [r3, #16]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008462:	69b9      	ldr	r1, [r7, #24]
 8008464:	0148      	lsls	r0, r1, #5
 8008466:	69f9      	ldr	r1, [r7, #28]
 8008468:	4401      	add	r1, r0
 800846a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800846e:	4313      	orrs	r3, r2
 8008470:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	69ba      	ldr	r2, [r7, #24]
 8008482:	0151      	lsls	r1, r2, #5
 8008484:	69fa      	ldr	r2, [r7, #28]
 8008486:	440a      	add	r2, r1
 8008488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800848c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008490:	6113      	str	r3, [r2, #16]
 8008492:	e037      	b.n	8008504 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4413      	add	r3, r2
 800849e:	1e5a      	subs	r2, r3, #1
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	8afa      	ldrh	r2, [r7, #22]
 80084b0:	fb03 f202 	mul.w	r2, r3, r2
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c4:	691a      	ldr	r2, [r3, #16]
 80084c6:	8afb      	ldrh	r3, [r7, #22]
 80084c8:	04d9      	lsls	r1, r3, #19
 80084ca:	4b38      	ldr	r3, [pc, #224]	; (80085ac <USB_EPStartXfer+0x538>)
 80084cc:	400b      	ands	r3, r1
 80084ce:	69b9      	ldr	r1, [r7, #24]
 80084d0:	0148      	lsls	r0, r1, #5
 80084d2:	69f9      	ldr	r1, [r7, #28]
 80084d4:	4401      	add	r1, r0
 80084d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80084da:	4313      	orrs	r3, r2
 80084dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084f4:	69b9      	ldr	r1, [r7, #24]
 80084f6:	0148      	lsls	r0, r1, #5
 80084f8:	69f9      	ldr	r1, [r7, #28]
 80084fa:	4401      	add	r1, r0
 80084fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008500:	4313      	orrs	r3, r2
 8008502:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d10d      	bne.n	8008526 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	68d9      	ldr	r1, [r3, #12]
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008522:	460a      	mov	r2, r1
 8008524:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	791b      	ldrb	r3, [r3, #4]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d128      	bne.n	8008580 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	2b00      	cmp	r3, #0
 800853c:	d110      	bne.n	8008560 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	69fa      	ldr	r2, [r7, #28]
 8008552:	440a      	add	r2, r1
 8008554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	e00f      	b.n	8008580 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	0151      	lsls	r1, r2, #5
 8008572:	69fa      	ldr	r2, [r7, #28]
 8008574:	440a      	add	r2, r1
 8008576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800857a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800857e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	0151      	lsls	r1, r2, #5
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	440a      	add	r2, r1
 8008596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800859e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	1ff80000 	.word	0x1ff80000

080085b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d14a      	bne.n	8008664 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085e6:	f040 8086 	bne.w	80086f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	7812      	ldrb	r2, [r2, #0]
 80085fe:	0151      	lsls	r1, r2, #5
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	440a      	add	r2, r1
 8008604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008608:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800860c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	015a      	lsls	r2, r3, #5
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	4413      	add	r3, r2
 8008618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	7812      	ldrb	r2, [r2, #0]
 8008622:	0151      	lsls	r1, r2, #5
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	440a      	add	r2, r1
 8008628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008630:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f242 7210 	movw	r2, #10000	; 0x2710
 800863e:	4293      	cmp	r3, r2
 8008640:	d902      	bls.n	8008648 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	75fb      	strb	r3, [r7, #23]
          break;
 8008646:	e056      	b.n	80086f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800865c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008660:	d0e7      	beq.n	8008632 <USB_EPStopXfer+0x82>
 8008662:	e048      	b.n	80086f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800867c:	d13b      	bne.n	80086f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	7812      	ldrb	r2, [r2, #0]
 8008692:	0151      	lsls	r1, r2, #5
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	440a      	add	r2, r1
 8008698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800869c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	7812      	ldrb	r2, [r2, #0]
 80086b6:	0151      	lsls	r1, r2, #5
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	440a      	add	r2, r1
 80086bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d902      	bls.n	80086dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	75fb      	strb	r3, [r7, #23]
          break;
 80086da:	e00c      	b.n	80086f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086f4:	d0e7      	beq.n	80086c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008704:	b480      	push	{r7}
 8008706:	b089      	sub	sp, #36	; 0x24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	4611      	mov	r1, r2
 8008710:	461a      	mov	r2, r3
 8008712:	460b      	mov	r3, r1
 8008714:	71fb      	strb	r3, [r7, #7]
 8008716:	4613      	mov	r3, r2
 8008718:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008722:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008726:	2b00      	cmp	r3, #0
 8008728:	d123      	bne.n	8008772 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800872a:	88bb      	ldrh	r3, [r7, #4]
 800872c:	3303      	adds	r3, #3
 800872e:	089b      	lsrs	r3, r3, #2
 8008730:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008732:	2300      	movs	r3, #0
 8008734:	61bb      	str	r3, [r7, #24]
 8008736:	e018      	b.n	800876a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	031a      	lsls	r2, r3, #12
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	4413      	add	r3, r2
 8008740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008744:	461a      	mov	r2, r3
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	3301      	adds	r3, #1
 8008750:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	3301      	adds	r3, #1
 8008756:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	3301      	adds	r3, #1
 800875c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	3301      	adds	r3, #1
 8008762:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	3301      	adds	r3, #1
 8008768:	61bb      	str	r3, [r7, #24]
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	429a      	cmp	r2, r3
 8008770:	d3e2      	bcc.n	8008738 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3724      	adds	r7, #36	; 0x24
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008780:	b480      	push	{r7}
 8008782:	b08b      	sub	sp, #44	; 0x2c
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	089b      	lsrs	r3, r3, #2
 800879a:	b29b      	uxth	r3, r3
 800879c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80087a6:	2300      	movs	r3, #0
 80087a8:	623b      	str	r3, [r7, #32]
 80087aa:	e014      	b.n	80087d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	3301      	adds	r3, #1
 80087bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	3301      	adds	r3, #1
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	3301      	adds	r3, #1
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	3301      	adds	r3, #1
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	3301      	adds	r3, #1
 80087d4:	623b      	str	r3, [r7, #32]
 80087d6:	6a3a      	ldr	r2, [r7, #32]
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d3e6      	bcc.n	80087ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80087de:	8bfb      	ldrh	r3, [r7, #30]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d01e      	beq.n	8008822 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ee:	461a      	mov	r2, r3
 80087f0:	f107 0310 	add.w	r3, r7, #16
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
 8008804:	b2da      	uxtb	r2, r3
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	701a      	strb	r2, [r3, #0]
      i++;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	3301      	adds	r3, #1
 800880e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	3301      	adds	r3, #1
 8008814:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008816:	8bfb      	ldrh	r3, [r7, #30]
 8008818:	3b01      	subs	r3, #1
 800881a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800881c:	8bfb      	ldrh	r3, [r7, #30]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1ea      	bne.n	80087f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008824:	4618      	mov	r0, r3
 8008826:	372c      	adds	r7, #44	; 0x2c
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	785b      	ldrb	r3, [r3, #1]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d12c      	bne.n	80088a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	db12      	blt.n	8008884 <USB_EPSetStall+0x54>
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00f      	beq.n	8008884 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	440a      	add	r2, r1
 800887a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800887e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008882:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	0151      	lsls	r1, r2, #5
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	440a      	add	r2, r1
 800889a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800889e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	e02b      	b.n	80088fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	db12      	blt.n	80088de <USB_EPSetStall+0xae>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00f      	beq.n	80088de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	0151      	lsls	r1, r2, #5
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	440a      	add	r2, r1
 80088f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d128      	bne.n	800897a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	0151      	lsls	r1, r2, #5
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	440a      	add	r2, r1
 800893e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008946:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	791b      	ldrb	r3, [r3, #4]
 800894c:	2b03      	cmp	r3, #3
 800894e:	d003      	beq.n	8008958 <USB_EPClearStall+0x4c>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	791b      	ldrb	r3, [r3, #4]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d138      	bne.n	80089ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	015a      	lsls	r2, r3, #5
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4413      	add	r3, r2
 8008960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	0151      	lsls	r1, r2, #5
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	440a      	add	r2, r1
 800896e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	e027      	b.n	80089ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4413      	add	r3, r2
 8008982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	0151      	lsls	r1, r2, #5
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	440a      	add	r2, r1
 8008990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008994:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008998:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	791b      	ldrb	r3, [r3, #4]
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d003      	beq.n	80089aa <USB_EPClearStall+0x9e>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	791b      	ldrb	r3, [r3, #4]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d10f      	bne.n	80089ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	0151      	lsls	r1, r2, #5
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	440a      	add	r2, r1
 80089c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008a0c:	68f9      	ldr	r1, [r7, #12]
 8008a0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a12:	4313      	orrs	r3, r2
 8008a14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a3e:	f023 0303 	bic.w	r3, r3, #3
 8008a42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a52:	f023 0302 	bic.w	r3, r3, #2
 8008a56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a94:	f043 0302 	orr.w	r3, r3, #2
 8008a98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4013      	ands	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	4013      	ands	r3, r2
 8008af0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	0c1b      	lsrs	r3, r3, #16
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3714      	adds	r7, #20
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b085      	sub	sp, #20
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	4013      	ands	r3, r2
 8008b24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	b29b      	uxth	r3, r3
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b085      	sub	sp, #20
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4013      	ands	r3, r2
 8008b62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b64:	68bb      	ldr	r3, [r7, #8]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b087      	sub	sp, #28
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b96:	78fb      	ldrb	r3, [r7, #3]
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba2:	01db      	lsls	r3, r3, #7
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	f003 0301 	and.w	r3, r3, #1
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c08:	f023 0307 	bic.w	r3, r3, #7
 8008c0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	333c      	adds	r3, #60	; 0x3c
 8008c46:	3304      	adds	r3, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	4a26      	ldr	r2, [pc, #152]	; (8008ce8 <USB_EP0_OutStart+0xb8>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d90a      	bls.n	8008c6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c64:	d101      	bne.n	8008c6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	e037      	b.n	8008cda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c70:	461a      	mov	r2, r3
 8008c72:	2300      	movs	r3, #0
 8008c74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c98:	f043 0318 	orr.w	r3, r3, #24
 8008c9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008cb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008cb2:	7afb      	ldrb	r3, [r7, #11]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d10f      	bne.n	8008cd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008cd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	371c      	adds	r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	4f54300a 	.word	0x4f54300a

08008cec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008d04:	d901      	bls.n	8008d0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e01b      	b.n	8008d42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	daf2      	bge.n	8008cf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f043 0201 	orr.w	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3301      	adds	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008d2e:	d901      	bls.n	8008d34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e006      	b.n	8008d42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d0f0      	beq.n	8008d22 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d60:	f003 fbc0 	bl	800c4e4 <USBD_static_malloc>
 8008d64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	32b0      	adds	r2, #176	; 0xb0
 8008d76:	2100      	movs	r1, #0
 8008d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e0d4      	b.n	8008f2a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008d80:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008d84:	2100      	movs	r1, #0
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f003 fd8d 	bl	800c8a6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	32b0      	adds	r2, #176	; 0xb0
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	32b0      	adds	r2, #176	; 0xb0
 8008da6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	7c1b      	ldrb	r3, [r3, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d138      	bne.n	8008e2a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008db8:	4b5e      	ldr	r3, [pc, #376]	; (8008f34 <USBD_CDC_Init+0x1e4>)
 8008dba:	7819      	ldrb	r1, [r3, #0]
 8008dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f003 fa1d 	bl	800c202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008dc8:	4b5a      	ldr	r3, [pc, #360]	; (8008f34 <USBD_CDC_Init+0x1e4>)
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	f003 020f 	and.w	r2, r3, #15
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	3324      	adds	r3, #36	; 0x24
 8008dde:	2201      	movs	r2, #1
 8008de0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008de2:	4b55      	ldr	r3, [pc, #340]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008de4:	7819      	ldrb	r1, [r3, #0]
 8008de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dea:	2202      	movs	r2, #2
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f003 fa08 	bl	800c202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008df2:	4b51      	ldr	r3, [pc, #324]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	f003 020f 	and.w	r2, r3, #15
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008e0e:	4b4b      	ldr	r3, [pc, #300]	; (8008f3c <USBD_CDC_Init+0x1ec>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	f003 020f 	and.w	r2, r3, #15
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	3326      	adds	r3, #38	; 0x26
 8008e24:	2210      	movs	r2, #16
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e035      	b.n	8008e96 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008e2a:	4b42      	ldr	r3, [pc, #264]	; (8008f34 <USBD_CDC_Init+0x1e4>)
 8008e2c:	7819      	ldrb	r1, [r3, #0]
 8008e2e:	2340      	movs	r3, #64	; 0x40
 8008e30:	2202      	movs	r2, #2
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f003 f9e5 	bl	800c202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008e38:	4b3e      	ldr	r3, [pc, #248]	; (8008f34 <USBD_CDC_Init+0x1e4>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 020f 	and.w	r2, r3, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3324      	adds	r3, #36	; 0x24
 8008e4e:	2201      	movs	r2, #1
 8008e50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008e52:	4b39      	ldr	r3, [pc, #228]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008e54:	7819      	ldrb	r1, [r3, #0]
 8008e56:	2340      	movs	r3, #64	; 0x40
 8008e58:	2202      	movs	r2, #2
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f003 f9d1 	bl	800c202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008e60:	4b35      	ldr	r3, [pc, #212]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	f003 020f 	and.w	r2, r3, #15
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e78:	2201      	movs	r2, #1
 8008e7a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008e7c:	4b2f      	ldr	r3, [pc, #188]	; (8008f3c <USBD_CDC_Init+0x1ec>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	f003 020f 	and.w	r2, r3, #15
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	3326      	adds	r3, #38	; 0x26
 8008e92:	2210      	movs	r2, #16
 8008e94:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008e96:	4b29      	ldr	r3, [pc, #164]	; (8008f3c <USBD_CDC_Init+0x1ec>)
 8008e98:	7819      	ldrb	r1, [r3, #0]
 8008e9a:	2308      	movs	r3, #8
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f003 f9af 	bl	800c202 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008ea4:	4b25      	ldr	r3, [pc, #148]	; (8008f3c <USBD_CDC_Init+0x1ec>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	f003 020f 	and.w	r2, r3, #15
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	3324      	adds	r3, #36	; 0x24
 8008eba:	2201      	movs	r2, #1
 8008ebc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	33b0      	adds	r3, #176	; 0xb0
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e018      	b.n	8008f2a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	7c1b      	ldrb	r3, [r3, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f00:	4b0d      	ldr	r3, [pc, #52]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008f02:	7819      	ldrb	r1, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f003 fa66 	bl	800c3e0 <USBD_LL_PrepareReceive>
 8008f14:	e008      	b.n	8008f28 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f16:	4b08      	ldr	r3, [pc, #32]	; (8008f38 <USBD_CDC_Init+0x1e8>)
 8008f18:	7819      	ldrb	r1, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f20:	2340      	movs	r3, #64	; 0x40
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f003 fa5c 	bl	800c3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000093 	.word	0x20000093
 8008f38:	20000094 	.word	0x20000094
 8008f3c:	20000095 	.word	0x20000095

08008f40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008f4c:	4b3a      	ldr	r3, [pc, #232]	; (8009038 <USBD_CDC_DeInit+0xf8>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f003 f97b 	bl	800c24e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008f58:	4b37      	ldr	r3, [pc, #220]	; (8009038 <USBD_CDC_DeInit+0xf8>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	f003 020f 	and.w	r2, r3, #15
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	3324      	adds	r3, #36	; 0x24
 8008f6e:	2200      	movs	r2, #0
 8008f70:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008f72:	4b32      	ldr	r3, [pc, #200]	; (800903c <USBD_CDC_DeInit+0xfc>)
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f003 f968 	bl	800c24e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008f7e:	4b2f      	ldr	r3, [pc, #188]	; (800903c <USBD_CDC_DeInit+0xfc>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	f003 020f 	and.w	r2, r3, #15
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f96:	2200      	movs	r2, #0
 8008f98:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008f9a:	4b29      	ldr	r3, [pc, #164]	; (8009040 <USBD_CDC_DeInit+0x100>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f003 f954 	bl	800c24e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008fa6:	4b26      	ldr	r3, [pc, #152]	; (8009040 <USBD_CDC_DeInit+0x100>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	f003 020f 	and.w	r2, r3, #15
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	3324      	adds	r3, #36	; 0x24
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008fc0:	4b1f      	ldr	r3, [pc, #124]	; (8009040 <USBD_CDC_DeInit+0x100>)
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	f003 020f 	and.w	r2, r3, #15
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	3326      	adds	r3, #38	; 0x26
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	32b0      	adds	r2, #176	; 0xb0
 8008fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01f      	beq.n	800902c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	33b0      	adds	r3, #176	; 0xb0
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	32b0      	adds	r2, #176	; 0xb0
 800900a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900e:	4618      	mov	r0, r3
 8009010:	f003 fa76 	bl	800c500 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32b0      	adds	r2, #176	; 0xb0
 800901e:	2100      	movs	r1, #0
 8009020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000093 	.word	0x20000093
 800903c:	20000094 	.word	0x20000094
 8009040:	20000095 	.word	0x20000095

08009044 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	32b0      	adds	r2, #176	; 0xb0
 8009058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800905e:	2300      	movs	r3, #0
 8009060:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009070:	2303      	movs	r3, #3
 8009072:	e0bf      	b.n	80091f4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800907c:	2b00      	cmp	r3, #0
 800907e:	d050      	beq.n	8009122 <USBD_CDC_Setup+0xde>
 8009080:	2b20      	cmp	r3, #32
 8009082:	f040 80af 	bne.w	80091e4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	88db      	ldrh	r3, [r3, #6]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d03a      	beq.n	8009104 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	b25b      	sxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	da1b      	bge.n	80090d0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	33b0      	adds	r3, #176	; 0xb0
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80090ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	88d2      	ldrh	r2, [r2, #6]
 80090b4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	88db      	ldrh	r3, [r3, #6]
 80090ba:	2b07      	cmp	r3, #7
 80090bc:	bf28      	it	cs
 80090be:	2307      	movcs	r3, #7
 80090c0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	89fa      	ldrh	r2, [r7, #14]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 fd7f 	bl	800abcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80090ce:	e090      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	785a      	ldrb	r2, [r3, #1]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	88db      	ldrh	r3, [r3, #6]
 80090de:	2b3f      	cmp	r3, #63	; 0x3f
 80090e0:	d803      	bhi.n	80090ea <USBD_CDC_Setup+0xa6>
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	88db      	ldrh	r3, [r3, #6]
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	e000      	b.n	80090ec <USBD_CDC_Setup+0xa8>
 80090ea:	2240      	movs	r2, #64	; 0x40
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80090f2:	6939      	ldr	r1, [r7, #16]
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80090fa:	461a      	mov	r2, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 fd91 	bl	800ac24 <USBD_CtlPrepareRx>
      break;
 8009102:	e076      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	33b0      	adds	r3, #176	; 0xb0
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	7850      	ldrb	r0, [r2, #1]
 800911a:	2200      	movs	r2, #0
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	4798      	blx	r3
      break;
 8009120:	e067      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	2b0b      	cmp	r3, #11
 8009128:	d851      	bhi.n	80091ce <USBD_CDC_Setup+0x18a>
 800912a:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <USBD_CDC_Setup+0xec>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	08009161 	.word	0x08009161
 8009134:	080091dd 	.word	0x080091dd
 8009138:	080091cf 	.word	0x080091cf
 800913c:	080091cf 	.word	0x080091cf
 8009140:	080091cf 	.word	0x080091cf
 8009144:	080091cf 	.word	0x080091cf
 8009148:	080091cf 	.word	0x080091cf
 800914c:	080091cf 	.word	0x080091cf
 8009150:	080091cf 	.word	0x080091cf
 8009154:	080091cf 	.word	0x080091cf
 8009158:	0800918b 	.word	0x0800918b
 800915c:	080091b5 	.word	0x080091b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b03      	cmp	r3, #3
 800916a:	d107      	bne.n	800917c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800916c:	f107 030a 	add.w	r3, r7, #10
 8009170:	2202      	movs	r2, #2
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fd29 	bl	800abcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800917a:	e032      	b.n	80091e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 fca7 	bl	800aad2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009184:	2303      	movs	r3, #3
 8009186:	75fb      	strb	r3, [r7, #23]
          break;
 8009188:	e02b      	b.n	80091e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b03      	cmp	r3, #3
 8009194:	d107      	bne.n	80091a6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009196:	f107 030d 	add.w	r3, r7, #13
 800919a:	2201      	movs	r2, #1
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f001 fd14 	bl	800abcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091a4:	e01d      	b.n	80091e2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 fc92 	bl	800aad2 <USBD_CtlError>
            ret = USBD_FAIL;
 80091ae:	2303      	movs	r3, #3
 80091b0:	75fb      	strb	r3, [r7, #23]
          break;
 80091b2:	e016      	b.n	80091e2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d00f      	beq.n	80091e0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fc85 	bl	800aad2 <USBD_CtlError>
            ret = USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80091cc:	e008      	b.n	80091e0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 fc7e 	bl	800aad2 <USBD_CtlError>
          ret = USBD_FAIL;
 80091d6:	2303      	movs	r3, #3
 80091d8:	75fb      	strb	r3, [r7, #23]
          break;
 80091da:	e002      	b.n	80091e2 <USBD_CDC_Setup+0x19e>
          break;
 80091dc:	bf00      	nop
 80091de:	e008      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>
          break;
 80091e0:	bf00      	nop
      }
      break;
 80091e2:	e006      	b.n	80091f2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 fc73 	bl	800aad2 <USBD_CtlError>
      ret = USBD_FAIL;
 80091ec:	2303      	movs	r3, #3
 80091ee:	75fb      	strb	r3, [r7, #23]
      break;
 80091f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800920e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32b0      	adds	r2, #176	; 0xb0
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009222:	2303      	movs	r3, #3
 8009224:	e065      	b.n	80092f2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	32b0      	adds	r2, #176	; 0xb0
 8009230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009234:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009236:	78fb      	ldrb	r3, [r7, #3]
 8009238:	f003 020f 	and.w	r2, r3, #15
 800923c:	6879      	ldr	r1, [r7, #4]
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	440b      	add	r3, r1
 8009248:	3318      	adds	r3, #24
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d02f      	beq.n	80092b0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 020f 	and.w	r2, r3, #15
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	3318      	adds	r3, #24
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	78fb      	ldrb	r3, [r7, #3]
 8009268:	f003 010f 	and.w	r1, r3, #15
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	460b      	mov	r3, r1
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	440b      	add	r3, r1
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4403      	add	r3, r0
 8009278:	331c      	adds	r3, #28
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009280:	fb01 f303 	mul.w	r3, r1, r3
 8009284:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009286:	2b00      	cmp	r3, #0
 8009288:	d112      	bne.n	80092b0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	f003 020f 	and.w	r2, r3, #15
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	440b      	add	r3, r1
 800929c:	3318      	adds	r3, #24
 800929e:	2200      	movs	r2, #0
 80092a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80092a2:	78f9      	ldrb	r1, [r7, #3]
 80092a4:	2300      	movs	r3, #0
 80092a6:	2200      	movs	r2, #0
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f003 f878 	bl	800c39e <USBD_LL_Transmit>
 80092ae:	e01f      	b.n	80092f0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	33b0      	adds	r3, #176	; 0xb0
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4413      	add	r3, r2
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d010      	beq.n	80092f0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	33b0      	adds	r3, #176	; 0xb0
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80092ec:	78fa      	ldrb	r2, [r7, #3]
 80092ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	460b      	mov	r3, r1
 8009304:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	32b0      	adds	r2, #176	; 0xb0
 8009310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009314:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	32b0      	adds	r2, #176	; 0xb0
 8009320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009328:	2303      	movs	r3, #3
 800932a:	e01a      	b.n	8009362 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f003 f876 	bl	800c422 <USBD_LL_GetRxDataSize>
 8009336:	4602      	mov	r2, r0
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	33b0      	adds	r3, #176	; 0xb0
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4413      	add	r3, r2
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800935c:	4611      	mov	r1, r2
 800935e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	32b0      	adds	r2, #176	; 0xb0
 800937c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009380:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009388:	2303      	movs	r3, #3
 800938a:	e025      	b.n	80093d8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	33b0      	adds	r3, #176	; 0xb0
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d01a      	beq.n	80093d6 <USBD_CDC_EP0_RxReady+0x6c>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80093a6:	2bff      	cmp	r3, #255	; 0xff
 80093a8:	d015      	beq.n	80093d6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	33b0      	adds	r3, #176	; 0xb0
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80093c2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80093ca:	b292      	uxth	r2, r2
 80093cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	22ff      	movs	r2, #255	; 0xff
 80093d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093e8:	2182      	movs	r1, #130	; 0x82
 80093ea:	4818      	ldr	r0, [pc, #96]	; (800944c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093ec:	f000 fd0f 	bl	8009e0e <USBD_GetEpDesc>
 80093f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093f2:	2101      	movs	r1, #1
 80093f4:	4815      	ldr	r0, [pc, #84]	; (800944c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80093f6:	f000 fd0a 	bl	8009e0e <USBD_GetEpDesc>
 80093fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093fc:	2181      	movs	r1, #129	; 0x81
 80093fe:	4813      	ldr	r0, [pc, #76]	; (800944c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009400:	f000 fd05 	bl	8009e0e <USBD_GetEpDesc>
 8009404:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2210      	movs	r2, #16
 8009410:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d006      	beq.n	8009426 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2200      	movs	r2, #0
 800941c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009420:	711a      	strb	r2, [r3, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d006      	beq.n	800943a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009434:	711a      	strb	r2, [r3, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2243      	movs	r2, #67	; 0x43
 800943e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009440:	4b02      	ldr	r3, [pc, #8]	; (800944c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000050 	.word	0x20000050

08009450 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009458:	2182      	movs	r1, #130	; 0x82
 800945a:	4818      	ldr	r0, [pc, #96]	; (80094bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800945c:	f000 fcd7 	bl	8009e0e <USBD_GetEpDesc>
 8009460:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009462:	2101      	movs	r1, #1
 8009464:	4815      	ldr	r0, [pc, #84]	; (80094bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009466:	f000 fcd2 	bl	8009e0e <USBD_GetEpDesc>
 800946a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800946c:	2181      	movs	r1, #129	; 0x81
 800946e:	4813      	ldr	r0, [pc, #76]	; (80094bc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009470:	f000 fccd 	bl	8009e0e <USBD_GetEpDesc>
 8009474:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2210      	movs	r2, #16
 8009480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d006      	beq.n	8009496 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2200      	movs	r2, #0
 800948c:	711a      	strb	r2, [r3, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f042 0202 	orr.w	r2, r2, #2
 8009494:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d006      	beq.n	80094aa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	711a      	strb	r2, [r3, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f042 0202 	orr.w	r2, r2, #2
 80094a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2243      	movs	r2, #67	; 0x43
 80094ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094b0:	4b02      	ldr	r3, [pc, #8]	; (80094bc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000050 	.word	0x20000050

080094c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80094c8:	2182      	movs	r1, #130	; 0x82
 80094ca:	4818      	ldr	r0, [pc, #96]	; (800952c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094cc:	f000 fc9f 	bl	8009e0e <USBD_GetEpDesc>
 80094d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80094d2:	2101      	movs	r1, #1
 80094d4:	4815      	ldr	r0, [pc, #84]	; (800952c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094d6:	f000 fc9a 	bl	8009e0e <USBD_GetEpDesc>
 80094da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094dc:	2181      	movs	r1, #129	; 0x81
 80094de:	4813      	ldr	r0, [pc, #76]	; (800952c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80094e0:	f000 fc95 	bl	8009e0e <USBD_GetEpDesc>
 80094e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d002      	beq.n	80094f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2210      	movs	r2, #16
 80094f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d006      	beq.n	8009506 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009500:	711a      	strb	r2, [r3, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d006      	beq.n	800951a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009514:	711a      	strb	r2, [r3, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2243      	movs	r2, #67	; 0x43
 800951e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009520:	4b02      	ldr	r3, [pc, #8]	; (800952c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20000050 	.word	0x20000050

08009530 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	220a      	movs	r2, #10
 800953c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800953e:	4b03      	ldr	r3, [pc, #12]	; (800954c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009540:	4618      	mov	r0, r3
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	2000000c 	.word	0x2000000c

08009550 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009560:	2303      	movs	r3, #3
 8009562:	e009      	b.n	8009578 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	33b0      	adds	r3, #176	; 0xb0
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	32b0      	adds	r2, #176	; 0xb0
 800959a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e008      	b.n	80095bc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	371c      	adds	r7, #28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	32b0      	adds	r2, #176	; 0xb0
 80095dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e004      	b.n	80095f6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
	...

08009604 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	32b0      	adds	r2, #176	; 0xb0
 8009616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	32b0      	adds	r2, #176	; 0xb0
 8009626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800962e:	2303      	movs	r3, #3
 8009630:	e018      	b.n	8009664 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	7c1b      	ldrb	r3, [r3, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800963a:	4b0c      	ldr	r3, [pc, #48]	; (800966c <USBD_CDC_ReceivePacket+0x68>)
 800963c:	7819      	ldrb	r1, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f002 fec9 	bl	800c3e0 <USBD_LL_PrepareReceive>
 800964e:	e008      	b.n	8009662 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009650:	4b06      	ldr	r3, [pc, #24]	; (800966c <USBD_CDC_ReceivePacket+0x68>)
 8009652:	7819      	ldrb	r1, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f002 febf 	bl	800c3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000094 	.word	0x20000094

08009670 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009684:	2303      	movs	r3, #3
 8009686:	e01f      	b.n	80096c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	79fa      	ldrb	r2, [r7, #7]
 80096ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f002 fd39 	bl	800c134 <USBD_LL_Init>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80096e4:	2303      	movs	r3, #3
 80096e6:	e025      	b.n	8009734 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	32ae      	adds	r2, #174	; 0xae
 80096fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00f      	beq.n	8009724 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	32ae      	adds	r2, #174	; 0xae
 800970e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009714:	f107 020e 	add.w	r2, r7, #14
 8009718:	4610      	mov	r0, r2
 800971a:	4798      	blx	r3
 800971c:	4602      	mov	r2, r0
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f002 fd41 	bl	800c1cc <USBD_LL_Start>
 800974a:	4603      	mov	r3, r0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800975c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	460b      	mov	r3, r1
 8009774:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009780:	2b00      	cmp	r3, #0
 8009782:	d009      	beq.n	8009798 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	78fa      	ldrb	r2, [r7, #3]
 800978e:	4611      	mov	r1, r2
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	4798      	blx	r3
 8009794:	4603      	mov	r3, r0
 8009796:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009798:	7bfb      	ldrb	r3, [r7, #15]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	4611      	mov	r1, r2
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80097c8:	2303      	movs	r3, #3
 80097ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f001 f938 	bl	800aa5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80097fc:	461a      	mov	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800980a:	f003 031f 	and.w	r3, r3, #31
 800980e:	2b02      	cmp	r3, #2
 8009810:	d01a      	beq.n	8009848 <USBD_LL_SetupStage+0x72>
 8009812:	2b02      	cmp	r3, #2
 8009814:	d822      	bhi.n	800985c <USBD_LL_SetupStage+0x86>
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <USBD_LL_SetupStage+0x4a>
 800981a:	2b01      	cmp	r3, #1
 800981c:	d00a      	beq.n	8009834 <USBD_LL_SetupStage+0x5e>
 800981e:	e01d      	b.n	800985c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fb65 	bl	8009ef8 <USBD_StdDevReq>
 800982e:	4603      	mov	r3, r0
 8009830:	73fb      	strb	r3, [r7, #15]
      break;
 8009832:	e020      	b.n	8009876 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fbcd 	bl	8009fdc <USBD_StdItfReq>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]
      break;
 8009846:	e016      	b.n	8009876 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fc2f 	bl	800a0b4 <USBD_StdEPReq>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]
      break;
 800985a:	e00c      	b.n	8009876 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009862:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009866:	b2db      	uxtb	r3, r3
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f002 fd0e 	bl	800c28c <USBD_LL_StallEP>
 8009870:	4603      	mov	r3, r0
 8009872:	73fb      	strb	r3, [r7, #15]
      break;
 8009874:	bf00      	nop
  }

  return ret;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	460b      	mov	r3, r1
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d16e      	bne.n	8009976 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800989e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	f040 8098 	bne.w	80099dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d913      	bls.n	80098e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	1ad2      	subs	r2, r2, r3
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	68da      	ldr	r2, [r3, #12]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	4293      	cmp	r3, r2
 80098d0:	bf28      	it	cs
 80098d2:	4613      	movcs	r3, r2
 80098d4:	461a      	mov	r2, r3
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f001 f9c0 	bl	800ac5e <USBD_CtlContinueRx>
 80098de:	e07d      	b.n	80099dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80098e6:	f003 031f 	and.w	r3, r3, #31
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d014      	beq.n	8009918 <USBD_LL_DataOutStage+0x98>
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d81d      	bhi.n	800992e <USBD_LL_DataOutStage+0xae>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <USBD_LL_DataOutStage+0x7c>
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d003      	beq.n	8009902 <USBD_LL_DataOutStage+0x82>
 80098fa:	e018      	b.n	800992e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	75bb      	strb	r3, [r7, #22]
            break;
 8009900:	e018      	b.n	8009934 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009908:	b2db      	uxtb	r3, r3
 800990a:	4619      	mov	r1, r3
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fa64 	bl	8009dda <USBD_CoreFindIF>
 8009912:	4603      	mov	r3, r0
 8009914:	75bb      	strb	r3, [r7, #22]
            break;
 8009916:	e00d      	b.n	8009934 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800991e:	b2db      	uxtb	r3, r3
 8009920:	4619      	mov	r1, r3
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 fa66 	bl	8009df4 <USBD_CoreFindEP>
 8009928:	4603      	mov	r3, r0
 800992a:	75bb      	strb	r3, [r7, #22]
            break;
 800992c:	e002      	b.n	8009934 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	75bb      	strb	r3, [r7, #22]
            break;
 8009932:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009934:	7dbb      	ldrb	r3, [r7, #22]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d119      	bne.n	800996e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b03      	cmp	r3, #3
 8009944:	d113      	bne.n	800996e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009946:	7dba      	ldrb	r2, [r7, #22]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	32ae      	adds	r2, #174	; 0xae
 800994c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00b      	beq.n	800996e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009956:	7dba      	ldrb	r2, [r7, #22]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800995e:	7dba      	ldrb	r2, [r7, #22]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	32ae      	adds	r2, #174	; 0xae
 8009964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f001 f986 	bl	800ac80 <USBD_CtlSendStatus>
 8009974:	e032      	b.n	80099dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009976:	7afb      	ldrb	r3, [r7, #11]
 8009978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997c:	b2db      	uxtb	r3, r3
 800997e:	4619      	mov	r1, r3
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 fa37 	bl	8009df4 <USBD_CoreFindEP>
 8009986:	4603      	mov	r3, r0
 8009988:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800998a:	7dbb      	ldrb	r3, [r7, #22]
 800998c:	2bff      	cmp	r3, #255	; 0xff
 800998e:	d025      	beq.n	80099dc <USBD_LL_DataOutStage+0x15c>
 8009990:	7dbb      	ldrb	r3, [r7, #22]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d122      	bne.n	80099dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d117      	bne.n	80099d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80099a2:	7dba      	ldrb	r2, [r7, #22]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	32ae      	adds	r2, #174	; 0xae
 80099a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00f      	beq.n	80099d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80099b2:	7dba      	ldrb	r2, [r7, #22]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80099ba:	7dba      	ldrb	r2, [r7, #22]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	32ae      	adds	r2, #174	; 0xae
 80099c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	7afa      	ldrb	r2, [r7, #11]
 80099c8:	4611      	mov	r1, r2
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	4798      	blx	r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80099d2:	7dfb      	ldrb	r3, [r7, #23]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	e000      	b.n	80099de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	460b      	mov	r3, r1
 80099f0:	607a      	str	r2, [r7, #4]
 80099f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d16f      	bne.n	8009ada <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3314      	adds	r3, #20
 80099fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d15a      	bne.n	8009ac0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d914      	bls.n	8009a40 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	1ad2      	subs	r2, r2, r3
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6879      	ldr	r1, [r7, #4]
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f001 f8e8 	bl	800ac02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a32:	2300      	movs	r3, #0
 8009a34:	2200      	movs	r2, #0
 8009a36:	2100      	movs	r1, #0
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f002 fcd1 	bl	800c3e0 <USBD_LL_PrepareReceive>
 8009a3e:	e03f      	b.n	8009ac0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d11c      	bne.n	8009a86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d316      	bcc.n	8009a86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d20f      	bcs.n	8009a86 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a66:	2200      	movs	r2, #0
 8009a68:	2100      	movs	r1, #0
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f001 f8c9 	bl	800ac02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f002 fcae 	bl	800c3e0 <USBD_LL_PrepareReceive>
 8009a84:	e01c      	b.n	8009ac0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d10f      	bne.n	8009ab2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ab2:	2180      	movs	r1, #128	; 0x80
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f002 fbe9 	bl	800c28c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f001 f8f3 	bl	800aca6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d03a      	beq.n	8009b40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7ff fe42 	bl	8009754 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009ad8:	e032      	b.n	8009b40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009ada:	7afb      	ldrb	r3, [r7, #11]
 8009adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f985 	bl	8009df4 <USBD_CoreFindEP>
 8009aea:	4603      	mov	r3, r0
 8009aec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	2bff      	cmp	r3, #255	; 0xff
 8009af2:	d025      	beq.n	8009b40 <USBD_LL_DataInStage+0x15a>
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d122      	bne.n	8009b40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d11c      	bne.n	8009b40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009b06:	7dfa      	ldrb	r2, [r7, #23]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	32ae      	adds	r2, #174	; 0xae
 8009b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d014      	beq.n	8009b40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009b16:	7dfa      	ldrb	r2, [r7, #23]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009b1e:	7dfa      	ldrb	r2, [r7, #23]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	32ae      	adds	r2, #174	; 0xae
 8009b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	7afa      	ldrb	r2, [r7, #11]
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	4798      	blx	r3
 8009b32:	4603      	mov	r3, r0
 8009b34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009b36:	7dbb      	ldrb	r3, [r7, #22]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009b3c:	7dbb      	ldrb	r3, [r7, #22]
 8009b3e:	e000      	b.n	8009b42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d014      	beq.n	8009bb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00e      	beq.n	8009bb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	6852      	ldr	r2, [r2, #4]
 8009b9e:	b2d2      	uxtb	r2, r2
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009bac:	2303      	movs	r3, #3
 8009bae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f002 fb23 	bl	800c202 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2240      	movs	r2, #64	; 0x40
 8009bc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009bcc:	2340      	movs	r3, #64	; 0x40
 8009bce:	2200      	movs	r2, #0
 8009bd0:	2180      	movs	r1, #128	; 0x80
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f002 fb15 	bl	800c202 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2240      	movs	r2, #64	; 0x40
 8009be2:	621a      	str	r2, [r3, #32]

  return ret;
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	78fa      	ldrb	r2, [r7, #3]
 8009bfe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b083      	sub	sp, #12
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	d006      	beq.n	8009c30 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2204      	movs	r2, #4
 8009c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d106      	bne.n	8009c68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b082      	sub	sp, #8
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	d110      	bne.n	8009cac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00b      	beq.n	8009cac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	32ae      	adds	r2, #174	; 0xae
 8009ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e01c      	b.n	8009d12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b03      	cmp	r3, #3
 8009ce2:	d115      	bne.n	8009d10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	32ae      	adds	r2, #174	; 0xae
 8009cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00b      	beq.n	8009d10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	32ae      	adds	r2, #174	; 0xae
 8009d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	78fa      	ldrb	r2, [r7, #3]
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	460b      	mov	r3, r1
 8009d24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	32ae      	adds	r2, #174	; 0xae
 8009d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e01c      	b.n	8009d76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d115      	bne.n	8009d74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	32ae      	adds	r2, #174	; 0xae
 8009d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00b      	beq.n	8009d74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	32ae      	adds	r2, #174	; 0xae
 8009d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	78fa      	ldrb	r2, [r7, #3]
 8009d6e:	4611      	mov	r1, r2
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b083      	sub	sp, #12
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00e      	beq.n	8009dd0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	6852      	ldr	r2, [r2, #4]
 8009dbe:	b2d2      	uxtb	r2, r2
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	460b      	mov	r3, r1
 8009de4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009de6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009e00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b086      	sub	sp, #24
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	460b      	mov	r3, r1
 8009e18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	885b      	ldrh	r3, [r3, #2]
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d920      	bls.n	8009e78 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009e3e:	e013      	b.n	8009e68 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009e40:	f107 030a 	add.w	r3, r7, #10
 8009e44:	4619      	mov	r1, r3
 8009e46:	6978      	ldr	r0, [r7, #20]
 8009e48:	f000 f81b 	bl	8009e82 <USBD_GetNextDesc>
 8009e4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	785b      	ldrb	r3, [r3, #1]
 8009e52:	2b05      	cmp	r3, #5
 8009e54:	d108      	bne.n	8009e68 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	789b      	ldrb	r3, [r3, #2]
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d008      	beq.n	8009e76 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009e64:	2300      	movs	r3, #0
 8009e66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	885b      	ldrh	r3, [r3, #2]
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	897b      	ldrh	r3, [r7, #10]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d8e5      	bhi.n	8009e40 <USBD_GetEpDesc+0x32>
 8009e74:	e000      	b.n	8009e78 <USBD_GetEpDesc+0x6a>
          break;
 8009e76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009e78:	693b      	ldr	r3, [r7, #16]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	881a      	ldrh	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	4413      	add	r3, r2
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4413      	add	r3, r2
 8009eac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009eae:	68fb      	ldr	r3, [r7, #12]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009eda:	8a3b      	ldrh	r3, [r7, #16]
 8009edc:	021b      	lsls	r3, r3, #8
 8009ede:	b21a      	sxth	r2, r3
 8009ee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	b21b      	sxth	r3, r3
 8009ee8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009eea:	89fb      	ldrh	r3, [r7, #14]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	371c      	adds	r7, #28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f0e:	2b40      	cmp	r3, #64	; 0x40
 8009f10:	d005      	beq.n	8009f1e <USBD_StdDevReq+0x26>
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	d857      	bhi.n	8009fc6 <USBD_StdDevReq+0xce>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00f      	beq.n	8009f3a <USBD_StdDevReq+0x42>
 8009f1a:	2b20      	cmp	r3, #32
 8009f1c:	d153      	bne.n	8009fc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	32ae      	adds	r2, #174	; 0xae
 8009f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
 8009f34:	4603      	mov	r3, r0
 8009f36:	73fb      	strb	r3, [r7, #15]
      break;
 8009f38:	e04a      	b.n	8009fd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	d83b      	bhi.n	8009fba <USBD_StdDevReq+0xc2>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <USBD_StdDevReq+0x50>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f9d 	.word	0x08009f9d
 8009f4c:	08009fb1 	.word	0x08009fb1
 8009f50:	08009fbb 	.word	0x08009fbb
 8009f54:	08009fa7 	.word	0x08009fa7
 8009f58:	08009fbb 	.word	0x08009fbb
 8009f5c:	08009f7b 	.word	0x08009f7b
 8009f60:	08009f71 	.word	0x08009f71
 8009f64:	08009fbb 	.word	0x08009fbb
 8009f68:	08009f93 	.word	0x08009f93
 8009f6c:	08009f85 	.word	0x08009f85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fa3c 	bl	800a3f0 <USBD_GetDescriptor>
          break;
 8009f78:	e024      	b.n	8009fc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fbcb 	bl	800a718 <USBD_SetAddress>
          break;
 8009f82:	e01f      	b.n	8009fc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fc0a 	bl	800a7a0 <USBD_SetConfig>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]
          break;
 8009f90:	e018      	b.n	8009fc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fcad 	bl	800a8f4 <USBD_GetConfig>
          break;
 8009f9a:	e013      	b.n	8009fc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fcde 	bl	800a960 <USBD_GetStatus>
          break;
 8009fa4:	e00e      	b.n	8009fc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fd0d 	bl	800a9c8 <USBD_SetFeature>
          break;
 8009fae:	e009      	b.n	8009fc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fd31 	bl	800aa1a <USBD_ClrFeature>
          break;
 8009fb8:	e004      	b.n	8009fc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fd88 	bl	800aad2 <USBD_CtlError>
          break;
 8009fc2:	bf00      	nop
      }
      break;
 8009fc4:	e004      	b.n	8009fd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fd82 	bl	800aad2 <USBD_CtlError>
      break;
 8009fce:	bf00      	nop
  }

  return ret;
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop

08009fdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ff2:	2b40      	cmp	r3, #64	; 0x40
 8009ff4:	d005      	beq.n	800a002 <USBD_StdItfReq+0x26>
 8009ff6:	2b40      	cmp	r3, #64	; 0x40
 8009ff8:	d852      	bhi.n	800a0a0 <USBD_StdItfReq+0xc4>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <USBD_StdItfReq+0x26>
 8009ffe:	2b20      	cmp	r3, #32
 800a000:	d14e      	bne.n	800a0a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	3b01      	subs	r3, #1
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d840      	bhi.n	800a092 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	889b      	ldrh	r3, [r3, #4]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b01      	cmp	r3, #1
 800a018:	d836      	bhi.n	800a088 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	889b      	ldrh	r3, [r3, #4]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff fed9 	bl	8009dda <USBD_CoreFindIF>
 800a028:	4603      	mov	r3, r0
 800a02a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	2bff      	cmp	r3, #255	; 0xff
 800a030:	d01d      	beq.n	800a06e <USBD_StdItfReq+0x92>
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d11a      	bne.n	800a06e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a038:	7bba      	ldrb	r2, [r7, #14]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	32ae      	adds	r2, #174	; 0xae
 800a03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00f      	beq.n	800a068 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a048:	7bba      	ldrb	r2, [r7, #14]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a050:	7bba      	ldrb	r2, [r7, #14]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	32ae      	adds	r2, #174	; 0xae
 800a056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	4798      	blx	r3
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a066:	e004      	b.n	800a072 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a06c:	e001      	b.n	800a072 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a06e:	2303      	movs	r3, #3
 800a070:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	88db      	ldrh	r3, [r3, #6]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d110      	bne.n	800a09c <USBD_StdItfReq+0xc0>
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10d      	bne.n	800a09c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fdfd 	bl	800ac80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a086:	e009      	b.n	800a09c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fd21 	bl	800aad2 <USBD_CtlError>
          break;
 800a090:	e004      	b.n	800a09c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fd1c 	bl	800aad2 <USBD_CtlError>
          break;
 800a09a:	e000      	b.n	800a09e <USBD_StdItfReq+0xc2>
          break;
 800a09c:	bf00      	nop
      }
      break;
 800a09e:	e004      	b.n	800a0aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fd15 	bl	800aad2 <USBD_CtlError>
      break;
 800a0a8:	bf00      	nop
  }

  return ret;
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	889b      	ldrh	r3, [r3, #4]
 800a0c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0d0:	2b40      	cmp	r3, #64	; 0x40
 800a0d2:	d007      	beq.n	800a0e4 <USBD_StdEPReq+0x30>
 800a0d4:	2b40      	cmp	r3, #64	; 0x40
 800a0d6:	f200 817f 	bhi.w	800a3d8 <USBD_StdEPReq+0x324>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d02a      	beq.n	800a134 <USBD_StdEPReq+0x80>
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	f040 817a 	bne.w	800a3d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0e4:	7bbb      	ldrb	r3, [r7, #14]
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff fe83 	bl	8009df4 <USBD_CoreFindEP>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0f2:	7b7b      	ldrb	r3, [r7, #13]
 800a0f4:	2bff      	cmp	r3, #255	; 0xff
 800a0f6:	f000 8174 	beq.w	800a3e2 <USBD_StdEPReq+0x32e>
 800a0fa:	7b7b      	ldrb	r3, [r7, #13]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f040 8170 	bne.w	800a3e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a102:	7b7a      	ldrb	r2, [r7, #13]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a10a:	7b7a      	ldrb	r2, [r7, #13]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	32ae      	adds	r2, #174	; 0xae
 800a110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 8163 	beq.w	800a3e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a11c:	7b7a      	ldrb	r2, [r7, #13]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	32ae      	adds	r2, #174	; 0xae
 800a122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	4798      	blx	r3
 800a12e:	4603      	mov	r3, r0
 800a130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a132:	e156      	b.n	800a3e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	785b      	ldrb	r3, [r3, #1]
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d008      	beq.n	800a14e <USBD_StdEPReq+0x9a>
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	f300 8145 	bgt.w	800a3cc <USBD_StdEPReq+0x318>
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 809b 	beq.w	800a27e <USBD_StdEPReq+0x1ca>
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d03c      	beq.n	800a1c6 <USBD_StdEPReq+0x112>
 800a14c:	e13e      	b.n	800a3cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b02      	cmp	r3, #2
 800a158:	d002      	beq.n	800a160 <USBD_StdEPReq+0xac>
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d016      	beq.n	800a18c <USBD_StdEPReq+0xd8>
 800a15e:	e02c      	b.n	800a1ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00d      	beq.n	800a182 <USBD_StdEPReq+0xce>
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b80      	cmp	r3, #128	; 0x80
 800a16a:	d00a      	beq.n	800a182 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a16c:	7bbb      	ldrb	r3, [r7, #14]
 800a16e:	4619      	mov	r1, r3
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f002 f88b 	bl	800c28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a176:	2180      	movs	r1, #128	; 0x80
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f002 f887 	bl	800c28c <USBD_LL_StallEP>
 800a17e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a180:	e020      	b.n	800a1c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a182:	6839      	ldr	r1, [r7, #0]
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 fca4 	bl	800aad2 <USBD_CtlError>
              break;
 800a18a:	e01b      	b.n	800a1c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	885b      	ldrh	r3, [r3, #2]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10e      	bne.n	800a1b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00b      	beq.n	800a1b2 <USBD_StdEPReq+0xfe>
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
 800a19c:	2b80      	cmp	r3, #128	; 0x80
 800a19e:	d008      	beq.n	800a1b2 <USBD_StdEPReq+0xfe>
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	88db      	ldrh	r3, [r3, #6]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d104      	bne.n	800a1b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f002 f86d 	bl	800c28c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fd64 	bl	800ac80 <USBD_CtlSendStatus>

              break;
 800a1b8:	e004      	b.n	800a1c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a1ba:	6839      	ldr	r1, [r7, #0]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 fc88 	bl	800aad2 <USBD_CtlError>
              break;
 800a1c2:	bf00      	nop
          }
          break;
 800a1c4:	e107      	b.n	800a3d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d002      	beq.n	800a1d8 <USBD_StdEPReq+0x124>
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d016      	beq.n	800a204 <USBD_StdEPReq+0x150>
 800a1d6:	e04b      	b.n	800a270 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00d      	beq.n	800a1fa <USBD_StdEPReq+0x146>
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
 800a1e0:	2b80      	cmp	r3, #128	; 0x80
 800a1e2:	d00a      	beq.n	800a1fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f002 f84f 	bl	800c28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1ee:	2180      	movs	r1, #128	; 0x80
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f002 f84b 	bl	800c28c <USBD_LL_StallEP>
 800a1f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1f8:	e040      	b.n	800a27c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fc68 	bl	800aad2 <USBD_CtlError>
              break;
 800a202:	e03b      	b.n	800a27c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	885b      	ldrh	r3, [r3, #2]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d136      	bne.n	800a27a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
 800a20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a212:	2b00      	cmp	r3, #0
 800a214:	d004      	beq.n	800a220 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a216:	7bbb      	ldrb	r3, [r7, #14]
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f002 f855 	bl	800c2ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fd2d 	bl	800ac80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff fde2 	bl	8009df4 <USBD_CoreFindEP>
 800a230:	4603      	mov	r3, r0
 800a232:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a234:	7b7b      	ldrb	r3, [r7, #13]
 800a236:	2bff      	cmp	r3, #255	; 0xff
 800a238:	d01f      	beq.n	800a27a <USBD_StdEPReq+0x1c6>
 800a23a:	7b7b      	ldrb	r3, [r7, #13]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d11c      	bne.n	800a27a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a240:	7b7a      	ldrb	r2, [r7, #13]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a248:	7b7a      	ldrb	r2, [r7, #13]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	32ae      	adds	r2, #174	; 0xae
 800a24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d010      	beq.n	800a27a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a258:	7b7a      	ldrb	r2, [r7, #13]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	32ae      	adds	r2, #174	; 0xae
 800a25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	6839      	ldr	r1, [r7, #0]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	4798      	blx	r3
 800a26a:	4603      	mov	r3, r0
 800a26c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a26e:	e004      	b.n	800a27a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fc2d 	bl	800aad2 <USBD_CtlError>
              break;
 800a278:	e000      	b.n	800a27c <USBD_StdEPReq+0x1c8>
              break;
 800a27a:	bf00      	nop
          }
          break;
 800a27c:	e0ab      	b.n	800a3d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b02      	cmp	r3, #2
 800a288:	d002      	beq.n	800a290 <USBD_StdEPReq+0x1dc>
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d032      	beq.n	800a2f4 <USBD_StdEPReq+0x240>
 800a28e:	e097      	b.n	800a3c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a290:	7bbb      	ldrb	r3, [r7, #14]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d007      	beq.n	800a2a6 <USBD_StdEPReq+0x1f2>
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	2b80      	cmp	r3, #128	; 0x80
 800a29a:	d004      	beq.n	800a2a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fc17 	bl	800aad2 <USBD_CtlError>
                break;
 800a2a4:	e091      	b.n	800a3ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	da0b      	bge.n	800a2c6 <USBD_StdEPReq+0x212>
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	3310      	adds	r3, #16
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	e00b      	b.n	800a2de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2c6:	7bbb      	ldrb	r3, [r7, #14]
 800a2c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	4413      	add	r3, r2
 800a2dc:	3304      	adds	r3, #4
 800a2de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2202      	movs	r2, #2
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fc6d 	bl	800abcc <USBD_CtlSendData>
              break;
 800a2f2:	e06a      	b.n	800a3ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a2f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	da11      	bge.n	800a320 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	f003 020f 	and.w	r2, r3, #15
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	440b      	add	r3, r1
 800a30e:	3324      	adds	r3, #36	; 0x24
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d117      	bne.n	800a346 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fbda 	bl	800aad2 <USBD_CtlError>
                  break;
 800a31e:	e054      	b.n	800a3ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a320:	7bbb      	ldrb	r3, [r7, #14]
 800a322:	f003 020f 	and.w	r2, r3, #15
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	4613      	mov	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	440b      	add	r3, r1
 800a332:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a336:	881b      	ldrh	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d104      	bne.n	800a346 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fbc7 	bl	800aad2 <USBD_CtlError>
                  break;
 800a344:	e041      	b.n	800a3ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	da0b      	bge.n	800a366 <USBD_StdEPReq+0x2b2>
 800a34e:	7bbb      	ldrb	r3, [r7, #14]
 800a350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a354:	4613      	mov	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	3310      	adds	r3, #16
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	4413      	add	r3, r2
 800a362:	3304      	adds	r3, #4
 800a364:	e00b      	b.n	800a37e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a36c:	4613      	mov	r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	4413      	add	r3, r2
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	4413      	add	r3, r2
 800a37c:	3304      	adds	r3, #4
 800a37e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a380:	7bbb      	ldrb	r3, [r7, #14]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <USBD_StdEPReq+0x2d8>
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	2b80      	cmp	r3, #128	; 0x80
 800a38a:	d103      	bne.n	800a394 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2200      	movs	r2, #0
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	e00e      	b.n	800a3b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 ffb5 	bl	800c308 <USBD_LL_IsStallEP>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d003      	beq.n	800a3ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	e002      	b.n	800a3b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fc07 	bl	800abcc <USBD_CtlSendData>
              break;
 800a3be:	e004      	b.n	800a3ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fb85 	bl	800aad2 <USBD_CtlError>
              break;
 800a3c8:	bf00      	nop
          }
          break;
 800a3ca:	e004      	b.n	800a3d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fb7f 	bl	800aad2 <USBD_CtlError>
          break;
 800a3d4:	bf00      	nop
      }
      break;
 800a3d6:	e005      	b.n	800a3e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fb79 	bl	800aad2 <USBD_CtlError>
      break;
 800a3e0:	e000      	b.n	800a3e4 <USBD_StdEPReq+0x330>
      break;
 800a3e2:	bf00      	nop
  }

  return ret;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	885b      	ldrh	r3, [r3, #2]
 800a40a:	0a1b      	lsrs	r3, r3, #8
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	3b01      	subs	r3, #1
 800a410:	2b0e      	cmp	r3, #14
 800a412:	f200 8152 	bhi.w	800a6ba <USBD_GetDescriptor+0x2ca>
 800a416:	a201      	add	r2, pc, #4	; (adr r2, 800a41c <USBD_GetDescriptor+0x2c>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a48d 	.word	0x0800a48d
 800a420:	0800a4a5 	.word	0x0800a4a5
 800a424:	0800a4e5 	.word	0x0800a4e5
 800a428:	0800a6bb 	.word	0x0800a6bb
 800a42c:	0800a6bb 	.word	0x0800a6bb
 800a430:	0800a65b 	.word	0x0800a65b
 800a434:	0800a687 	.word	0x0800a687
 800a438:	0800a6bb 	.word	0x0800a6bb
 800a43c:	0800a6bb 	.word	0x0800a6bb
 800a440:	0800a6bb 	.word	0x0800a6bb
 800a444:	0800a6bb 	.word	0x0800a6bb
 800a448:	0800a6bb 	.word	0x0800a6bb
 800a44c:	0800a6bb 	.word	0x0800a6bb
 800a450:	0800a6bb 	.word	0x0800a6bb
 800a454:	0800a459 	.word	0x0800a459
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00b      	beq.n	800a47c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	7c12      	ldrb	r2, [r2, #16]
 800a470:	f107 0108 	add.w	r1, r7, #8
 800a474:	4610      	mov	r0, r2
 800a476:	4798      	blx	r3
 800a478:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a47a:	e126      	b.n	800a6ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fb27 	bl	800aad2 <USBD_CtlError>
        err++;
 800a484:	7afb      	ldrb	r3, [r7, #11]
 800a486:	3301      	adds	r3, #1
 800a488:	72fb      	strb	r3, [r7, #11]
      break;
 800a48a:	e11e      	b.n	800a6ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	7c12      	ldrb	r2, [r2, #16]
 800a498:	f107 0108 	add.w	r1, r7, #8
 800a49c:	4610      	mov	r0, r2
 800a49e:	4798      	blx	r3
 800a4a0:	60f8      	str	r0, [r7, #12]
      break;
 800a4a2:	e112      	b.n	800a6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7c1b      	ldrb	r3, [r3, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10d      	bne.n	800a4c8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b4:	f107 0208 	add.w	r2, r7, #8
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	4798      	blx	r3
 800a4bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	2202      	movs	r2, #2
 800a4c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a4c6:	e100      	b.n	800a6ca <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	f107 0208 	add.w	r2, r7, #8
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	4798      	blx	r3
 800a4d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	2202      	movs	r2, #2
 800a4e0:	701a      	strb	r2, [r3, #0]
      break;
 800a4e2:	e0f2      	b.n	800a6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	885b      	ldrh	r3, [r3, #2]
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b05      	cmp	r3, #5
 800a4ec:	f200 80ac 	bhi.w	800a648 <USBD_GetDescriptor+0x258>
 800a4f0:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <USBD_GetDescriptor+0x108>)
 800a4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f6:	bf00      	nop
 800a4f8:	0800a511 	.word	0x0800a511
 800a4fc:	0800a545 	.word	0x0800a545
 800a500:	0800a579 	.word	0x0800a579
 800a504:	0800a5ad 	.word	0x0800a5ad
 800a508:	0800a5e1 	.word	0x0800a5e1
 800a50c:	0800a615 	.word	0x0800a615
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00b      	beq.n	800a534 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	7c12      	ldrb	r2, [r2, #16]
 800a528:	f107 0108 	add.w	r1, r7, #8
 800a52c:	4610      	mov	r0, r2
 800a52e:	4798      	blx	r3
 800a530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a532:	e091      	b.n	800a658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 facb 	bl	800aad2 <USBD_CtlError>
            err++;
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	3301      	adds	r3, #1
 800a540:	72fb      	strb	r3, [r7, #11]
          break;
 800a542:	e089      	b.n	800a658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00b      	beq.n	800a568 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	7c12      	ldrb	r2, [r2, #16]
 800a55c:	f107 0108 	add.w	r1, r7, #8
 800a560:	4610      	mov	r0, r2
 800a562:	4798      	blx	r3
 800a564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a566:	e077      	b.n	800a658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fab1 	bl	800aad2 <USBD_CtlError>
            err++;
 800a570:	7afb      	ldrb	r3, [r7, #11]
 800a572:	3301      	adds	r3, #1
 800a574:	72fb      	strb	r3, [r7, #11]
          break;
 800a576:	e06f      	b.n	800a658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00b      	beq.n	800a59c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	7c12      	ldrb	r2, [r2, #16]
 800a590:	f107 0108 	add.w	r1, r7, #8
 800a594:	4610      	mov	r0, r2
 800a596:	4798      	blx	r3
 800a598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a59a:	e05d      	b.n	800a658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a59c:	6839      	ldr	r1, [r7, #0]
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fa97 	bl	800aad2 <USBD_CtlError>
            err++;
 800a5a4:	7afb      	ldrb	r3, [r7, #11]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a5aa:	e055      	b.n	800a658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00b      	beq.n	800a5d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	7c12      	ldrb	r2, [r2, #16]
 800a5c4:	f107 0108 	add.w	r1, r7, #8
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	4798      	blx	r3
 800a5cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5ce:	e043      	b.n	800a658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fa7d 	bl	800aad2 <USBD_CtlError>
            err++;
 800a5d8:	7afb      	ldrb	r3, [r7, #11]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a5de:	e03b      	b.n	800a658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d00b      	beq.n	800a604 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5f2:	695b      	ldr	r3, [r3, #20]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	7c12      	ldrb	r2, [r2, #16]
 800a5f8:	f107 0108 	add.w	r1, r7, #8
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	4798      	blx	r3
 800a600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a602:	e029      	b.n	800a658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a604:	6839      	ldr	r1, [r7, #0]
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fa63 	bl	800aad2 <USBD_CtlError>
            err++;
 800a60c:	7afb      	ldrb	r3, [r7, #11]
 800a60e:	3301      	adds	r3, #1
 800a610:	72fb      	strb	r3, [r7, #11]
          break;
 800a612:	e021      	b.n	800a658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00b      	beq.n	800a638 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	7c12      	ldrb	r2, [r2, #16]
 800a62c:	f107 0108 	add.w	r1, r7, #8
 800a630:	4610      	mov	r0, r2
 800a632:	4798      	blx	r3
 800a634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a636:	e00f      	b.n	800a658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fa49 	bl	800aad2 <USBD_CtlError>
            err++;
 800a640:	7afb      	ldrb	r3, [r7, #11]
 800a642:	3301      	adds	r3, #1
 800a644:	72fb      	strb	r3, [r7, #11]
          break;
 800a646:	e007      	b.n	800a658 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fa41 	bl	800aad2 <USBD_CtlError>
          err++;
 800a650:	7afb      	ldrb	r3, [r7, #11]
 800a652:	3301      	adds	r3, #1
 800a654:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a656:	bf00      	nop
      }
      break;
 800a658:	e037      	b.n	800a6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	7c1b      	ldrb	r3, [r3, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d109      	bne.n	800a676 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66a:	f107 0208 	add.w	r2, r7, #8
 800a66e:	4610      	mov	r0, r2
 800a670:	4798      	blx	r3
 800a672:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a674:	e029      	b.n	800a6ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fa2a 	bl	800aad2 <USBD_CtlError>
        err++;
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	3301      	adds	r3, #1
 800a682:	72fb      	strb	r3, [r7, #11]
      break;
 800a684:	e021      	b.n	800a6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	7c1b      	ldrb	r3, [r3, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10d      	bne.n	800a6aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a696:	f107 0208 	add.w	r2, r7, #8
 800a69a:	4610      	mov	r0, r2
 800a69c:	4798      	blx	r3
 800a69e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	2207      	movs	r2, #7
 800a6a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6a8:	e00f      	b.n	800a6ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fa10 	bl	800aad2 <USBD_CtlError>
        err++;
 800a6b2:	7afb      	ldrb	r3, [r7, #11]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	72fb      	strb	r3, [r7, #11]
      break;
 800a6b8:	e007      	b.n	800a6ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fa08 	bl	800aad2 <USBD_CtlError>
      err++;
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	72fb      	strb	r3, [r7, #11]
      break;
 800a6c8:	bf00      	nop
  }

  if (err != 0U)
 800a6ca:	7afb      	ldrb	r3, [r7, #11]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d11e      	bne.n	800a70e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	88db      	ldrh	r3, [r3, #6]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d016      	beq.n	800a706 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a6d8:	893b      	ldrh	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00e      	beq.n	800a6fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	88da      	ldrh	r2, [r3, #6]
 800a6e2:	893b      	ldrh	r3, [r7, #8]
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	bf28      	it	cs
 800a6e8:	4613      	movcs	r3, r2
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6ee:	893b      	ldrh	r3, [r7, #8]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	68f9      	ldr	r1, [r7, #12]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fa69 	bl	800abcc <USBD_CtlSendData>
 800a6fa:	e009      	b.n	800a710 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f9e7 	bl	800aad2 <USBD_CtlError>
 800a704:	e004      	b.n	800a710 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 faba 	bl	800ac80 <USBD_CtlSendStatus>
 800a70c:	e000      	b.n	800a710 <USBD_GetDescriptor+0x320>
    return;
 800a70e:	bf00      	nop
  }
}
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop

0800a718 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	889b      	ldrh	r3, [r3, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d131      	bne.n	800a78e <USBD_SetAddress+0x76>
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	88db      	ldrh	r3, [r3, #6]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d12d      	bne.n	800a78e <USBD_SetAddress+0x76>
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	885b      	ldrh	r3, [r3, #2]
 800a736:	2b7f      	cmp	r3, #127	; 0x7f
 800a738:	d829      	bhi.n	800a78e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	885b      	ldrh	r3, [r3, #2]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a744:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d104      	bne.n	800a75c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f9bc 	bl	800aad2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a75a:	e01d      	b.n	800a798 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	7bfa      	ldrb	r2, [r7, #15]
 800a760:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a764:	7bfb      	ldrb	r3, [r7, #15]
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f001 fdf9 	bl	800c360 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa86 	bl	800ac80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d004      	beq.n	800a784 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2202      	movs	r2, #2
 800a77e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a782:	e009      	b.n	800a798 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a78c:	e004      	b.n	800a798 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a78e:	6839      	ldr	r1, [r7, #0]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f99e 	bl	800aad2 <USBD_CtlError>
  }
}
 800a796:	bf00      	nop
 800a798:	bf00      	nop
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	885b      	ldrh	r3, [r3, #2]
 800a7b2:	b2da      	uxtb	r2, r3
 800a7b4:	4b4e      	ldr	r3, [pc, #312]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a7b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a7b8:	4b4d      	ldr	r3, [pc, #308]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d905      	bls.n	800a7cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f985 	bl	800aad2 <USBD_CtlError>
    return USBD_FAIL;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e08c      	b.n	800a8e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d002      	beq.n	800a7de <USBD_SetConfig+0x3e>
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d029      	beq.n	800a830 <USBD_SetConfig+0x90>
 800a7dc:	e075      	b.n	800a8ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a7de:	4b44      	ldr	r3, [pc, #272]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d020      	beq.n	800a828 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a7e6:	4b42      	ldr	r3, [pc, #264]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7f0:	4b3f      	ldr	r3, [pc, #252]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7fe ffb7 	bl	800976a <USBD_SetClassConfig>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d008      	beq.n	800a818 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a806:	6839      	ldr	r1, [r7, #0]
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f962 	bl	800aad2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2202      	movs	r2, #2
 800a812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a816:	e065      	b.n	800a8e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fa31 	bl	800ac80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2203      	movs	r2, #3
 800a822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a826:	e05d      	b.n	800a8e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fa29 	bl	800ac80 <USBD_CtlSendStatus>
      break;
 800a82e:	e059      	b.n	800a8e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a830:	4b2f      	ldr	r3, [pc, #188]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d112      	bne.n	800a85e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2202      	movs	r2, #2
 800a83c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a840:	4b2b      	ldr	r3, [pc, #172]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	461a      	mov	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a84a:	4b29      	ldr	r3, [pc, #164]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	4619      	mov	r1, r3
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7fe ffa6 	bl	80097a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fa12 	bl	800ac80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a85c:	e042      	b.n	800a8e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a85e:	4b24      	ldr	r3, [pc, #144]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d02a      	beq.n	800a8c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	b2db      	uxtb	r3, r3
 800a872:	4619      	mov	r1, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7fe ff94 	bl	80097a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a87a:	4b1d      	ldr	r3, [pc, #116]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a884:	4b1a      	ldr	r3, [pc, #104]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7fe ff6d 	bl	800976a <USBD_SetClassConfig>
 800a890:	4603      	mov	r3, r0
 800a892:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00f      	beq.n	800a8ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a89a:	6839      	ldr	r1, [r7, #0]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f918 	bl	800aad2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7fe ff79 	bl	80097a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2202      	movs	r2, #2
 800a8b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a8b8:	e014      	b.n	800a8e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f9e0 	bl	800ac80 <USBD_CtlSendStatus>
      break;
 800a8c0:	e010      	b.n	800a8e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f9dc 	bl	800ac80 <USBD_CtlSendStatus>
      break;
 800a8c8:	e00c      	b.n	800a8e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f900 	bl	800aad2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8d2:	4b07      	ldr	r3, [pc, #28]	; (800a8f0 <USBD_SetConfig+0x150>)
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7fe ff62 	bl	80097a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e2:	bf00      	nop
  }

  return ret;
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3710      	adds	r7, #16
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000370 	.word	0x20000370

0800a8f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	88db      	ldrh	r3, [r3, #6]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d004      	beq.n	800a910 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f8e2 	bl	800aad2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a90e:	e023      	b.n	800a958 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b02      	cmp	r3, #2
 800a91a:	dc02      	bgt.n	800a922 <USBD_GetConfig+0x2e>
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	dc03      	bgt.n	800a928 <USBD_GetConfig+0x34>
 800a920:	e015      	b.n	800a94e <USBD_GetConfig+0x5a>
 800a922:	2b03      	cmp	r3, #3
 800a924:	d00b      	beq.n	800a93e <USBD_GetConfig+0x4a>
 800a926:	e012      	b.n	800a94e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3308      	adds	r3, #8
 800a932:	2201      	movs	r2, #1
 800a934:	4619      	mov	r1, r3
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f948 	bl	800abcc <USBD_CtlSendData>
        break;
 800a93c:	e00c      	b.n	800a958 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3304      	adds	r3, #4
 800a942:	2201      	movs	r2, #1
 800a944:	4619      	mov	r1, r3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f940 	bl	800abcc <USBD_CtlSendData>
        break;
 800a94c:	e004      	b.n	800a958 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f8be 	bl	800aad2 <USBD_CtlError>
        break;
 800a956:	bf00      	nop
}
 800a958:	bf00      	nop
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a970:	b2db      	uxtb	r3, r3
 800a972:	3b01      	subs	r3, #1
 800a974:	2b02      	cmp	r3, #2
 800a976:	d81e      	bhi.n	800a9b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	88db      	ldrh	r3, [r3, #6]
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d004      	beq.n	800a98a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f8a5 	bl	800aad2 <USBD_CtlError>
        break;
 800a988:	e01a      	b.n	800a9c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a996:	2b00      	cmp	r3, #0
 800a998:	d005      	beq.n	800a9a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f043 0202 	orr.w	r2, r3, #2
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	330c      	adds	r3, #12
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f90c 	bl	800abcc <USBD_CtlSendData>
      break;
 800a9b4:	e004      	b.n	800a9c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f88a 	bl	800aad2 <USBD_CtlError>
      break;
 800a9be:	bf00      	nop
  }
}
 800a9c0:	bf00      	nop
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	885b      	ldrh	r3, [r3, #2]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d107      	bne.n	800a9ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f94c 	bl	800ac80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a9e8:	e013      	b.n	800aa12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	885b      	ldrh	r3, [r3, #2]
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d10b      	bne.n	800aa0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	889b      	ldrh	r3, [r3, #4]
 800a9f6:	0a1b      	lsrs	r3, r3, #8
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f93c 	bl	800ac80 <USBD_CtlSendStatus>
}
 800aa08:	e003      	b.n	800aa12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 f860 	bl	800aad2 <USBD_CtlError>
}
 800aa12:	bf00      	nop
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d80b      	bhi.n	800aa4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	885b      	ldrh	r3, [r3, #2]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d10c      	bne.n	800aa54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f91c 	bl	800ac80 <USBD_CtlSendStatus>
      }
      break;
 800aa48:	e004      	b.n	800aa54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f840 	bl	800aad2 <USBD_CtlError>
      break;
 800aa52:	e000      	b.n	800aa56 <USBD_ClrFeature+0x3c>
      break;
 800aa54:	bf00      	nop
  }
}
 800aa56:	bf00      	nop
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b084      	sub	sp, #16
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	781a      	ldrb	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3301      	adds	r3, #1
 800aa78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	781a      	ldrb	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	3301      	adds	r3, #1
 800aa86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f7ff fa17 	bl	8009ebc <SWAPBYTE>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	461a      	mov	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7ff fa0a 	bl	8009ebc <SWAPBYTE>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	461a      	mov	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3301      	adds	r3, #1
 800aab4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3301      	adds	r3, #1
 800aaba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f7ff f9fd 	bl	8009ebc <SWAPBYTE>
 800aac2:	4603      	mov	r3, r0
 800aac4:	461a      	mov	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	80da      	strh	r2, [r3, #6]
}
 800aaca:	bf00      	nop
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aadc:	2180      	movs	r1, #128	; 0x80
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 fbd4 	bl	800c28c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aae4:	2100      	movs	r1, #0
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f001 fbd0 	bl	800c28c <USBD_LL_StallEP>
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d042      	beq.n	800ab90 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ab0e:	6938      	ldr	r0, [r7, #16]
 800ab10:	f000 f842 	bl	800ab98 <USBD_GetLen>
 800ab14:	4603      	mov	r3, r0
 800ab16:	3301      	adds	r3, #1
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab1e:	d808      	bhi.n	800ab32 <USBD_GetString+0x3e>
 800ab20:	6938      	ldr	r0, [r7, #16]
 800ab22:	f000 f839 	bl	800ab98 <USBD_GetLen>
 800ab26:	4603      	mov	r3, r0
 800ab28:	3301      	adds	r3, #1
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	005b      	lsls	r3, r3, #1
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	e001      	b.n	800ab36 <USBD_GetString+0x42>
 800ab32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	4413      	add	r3, r2
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	7812      	ldrb	r2, [r2, #0]
 800ab44:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	4413      	add	r3, r2
 800ab52:	2203      	movs	r2, #3
 800ab54:	701a      	strb	r2, [r3, #0]
  idx++;
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ab5c:	e013      	b.n	800ab86 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	4413      	add	r3, r2
 800ab64:	693a      	ldr	r2, [r7, #16]
 800ab66:	7812      	ldrb	r2, [r2, #0]
 800ab68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	613b      	str	r3, [r7, #16]
    idx++;
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	3301      	adds	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	3301      	adds	r3, #1
 800ab84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1e7      	bne.n	800ab5e <USBD_GetString+0x6a>
 800ab8e:	e000      	b.n	800ab92 <USBD_GetString+0x9e>
    return;
 800ab90:	bf00      	nop
  }
}
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aba8:	e005      	b.n	800abb6 <USBD_GetLen+0x1e>
  {
    len++;
 800abaa:	7bfb      	ldrb	r3, [r7, #15]
 800abac:	3301      	adds	r3, #1
 800abae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	3301      	adds	r3, #1
 800abb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1f5      	bne.n	800abaa <USBD_GetLen+0x12>
  }

  return len;
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2202      	movs	r2, #2
 800abdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	2100      	movs	r1, #0
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f001 fbd3 	bl	800c39e <USBD_LL_Transmit>

  return USBD_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	2100      	movs	r1, #0
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f001 fbc2 	bl	800c39e <USBD_LL_Transmit>

  return USBD_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2203      	movs	r2, #3
 800ac34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f001 fbc6 	bl	800c3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	2100      	movs	r1, #0
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f001 fbb5 	bl	800c3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2204      	movs	r2, #4
 800ac8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac90:	2300      	movs	r3, #0
 800ac92:	2200      	movs	r2, #0
 800ac94:	2100      	movs	r1, #0
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 fb81 	bl	800c39e <USBD_LL_Transmit>

  return USBD_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2205      	movs	r2, #5
 800acb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acb6:	2300      	movs	r3, #0
 800acb8:	2200      	movs	r2, #0
 800acba:	2100      	movs	r1, #0
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f001 fb8f 	bl	800c3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <delayInit>:
#include <API_delay.h>
#include <stm32f4xx_hal.h>

void delayInit(delay_t* delay, tick_t duration){
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
	assert(delay);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d105      	bne.n	800ace8 <delayInit+0x1c>
 800acdc:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <delayInit+0x3c>)
 800acde:	4a0b      	ldr	r2, [pc, #44]	; (800ad0c <delayInit+0x40>)
 800ace0:	2105      	movs	r1, #5
 800ace2:	480b      	ldr	r0, [pc, #44]	; (800ad10 <delayInit+0x44>)
 800ace4:	f001 fc42 	bl	800c56c <__assert_func>

	delay->startTime = HAL_GetTick();
 800ace8:	f7f6 fa46 	bl	8001178 <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	609a      	str	r2, [r3, #8]
}
 800acfe:	bf00      	nop
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	0800e1e4 	.word	0x0800e1e4
 800ad0c:	0800e520 	.word	0x0800e520
 800ad10:	0800e1ec 	.word	0x0800e1ec

0800ad14 <delayRead>:

bool_t delayRead(delay_t* delay){
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
	assert(delay);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d105      	bne.n	800ad2e <delayRead+0x1a>
 800ad22:	4b16      	ldr	r3, [pc, #88]	; (800ad7c <delayRead+0x68>)
 800ad24:	4a16      	ldr	r2, [pc, #88]	; (800ad80 <delayRead+0x6c>)
 800ad26:	210d      	movs	r1, #13
 800ad28:	4816      	ldr	r0, [pc, #88]	; (800ad84 <delayRead+0x70>)
 800ad2a:	f001 fc1f 	bl	800c56c <__assert_func>

	tick_t Current_time = HAL_GetTick();
 800ad2e:	f7f6 fa23 	bl	8001178 <HAL_GetTick>
 800ad32:	60b8      	str	r0, [r7, #8]
	bool_t Done = false;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73fb      	strb	r3, [r7, #15]

	if(!delay->running){
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d106      	bne.n	800ad4e <delayRead+0x3a>
		delay->startTime = Current_time;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	601a      	str	r2, [r3, #0]
		delay->running = true;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	609a      	str	r2, [r3, #8]
 800ad4c:	e011      	b.n	800ad72 <delayRead+0x5e>
	}else{
		// Done is TRUE when the duration has elapsed
		// Done is FALSE when theres time remaining
		Done = (Current_time - delay->startTime) >= delay->duration;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	1ad2      	subs	r2, r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	bf2c      	ite	cs
 800ad5e:	2301      	movcs	r3, #1
 800ad60:	2300      	movcc	r3, #0
 800ad62:	73fb      	strb	r3, [r7, #15]
		// If it's done, it should stop running
		delay->running = !Done;
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
 800ad66:	f083 0301 	eor.w	r3, r3, #1
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	609a      	str	r2, [r3, #8]
	}
	return Done;
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	0800e1e4 	.word	0x0800e1e4
 800ad80:	0800e52c 	.word	0x0800e52c
 800ad84:	0800e1ec 	.word	0x0800e1ec

0800ad88 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ){
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
	assert(delay);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d105      	bne.n	800ada4 <delayWrite+0x1c>
 800ad98:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <delayWrite+0x2c>)
 800ad9a:	4a07      	ldr	r2, [pc, #28]	; (800adb8 <delayWrite+0x30>)
 800ad9c:	2120      	movs	r1, #32
 800ad9e:	4807      	ldr	r0, [pc, #28]	; (800adbc <delayWrite+0x34>)
 800ada0:	f001 fbe4 	bl	800c56c <__assert_func>

	delay->duration = duration;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	605a      	str	r2, [r3, #4]
}
 800adaa:	bf00      	nop
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	0800e1e4 	.word	0x0800e1e4
 800adb8:	0800e538 	.word	0x0800e538
 800adbc:	0800e1ec 	.word	0x0800e1ec

0800adc0 <on_initializing>:
// carry parsed values from USB into on_usb_command
static pending_action_t pending_action;

//─── Initialization ─────────────────────────────────────────────────────────
static void on_initializing(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
	debug_uart_print("INIT: entering on_initializing()\r\n");
 800adc4:	4811      	ldr	r0, [pc, #68]	; (800ae0c <on_initializing+0x4c>)
 800adc6:	f000 fc9b 	bl	800b700 <debug_uart_print>
    usb_commands_init();
 800adca:	f000 fd3b 	bl	800b844 <usb_commands_init>
    eeprom_init();
 800adce:	f000 fa15 	bl	800b1fc <eeprom_init>
    rtc_init();
 800add2:	f000 fbbf 	bl	800b554 <rtc_init>

    // load or default thresholds
    eeprom_read_thresholds(&threshold_low, &threshold_high);
 800add6:	490e      	ldr	r1, [pc, #56]	; (800ae10 <on_initializing+0x50>)
 800add8:	480e      	ldr	r0, [pc, #56]	; (800ae14 <on_initializing+0x54>)
 800adda:	f000 fa40 	bl	800b25e <eeprom_read_thresholds>

    // kick off TIM2→ADC1@1kHz DMA→256 samples
    HAL_TIM_Base_Start(&htim2);
 800adde:	480e      	ldr	r0, [pc, #56]	; (800ae18 <on_initializing+0x58>)
 800ade0:	f7fb f980 	bl	80060e4 <HAL_TIM_Base_Start>
    HAL_ADC_Start_DMA(&hadc1,
 800ade4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ade8:	490c      	ldr	r1, [pc, #48]	; (800ae1c <on_initializing+0x5c>)
 800adea:	480d      	ldr	r0, [pc, #52]	; (800ae20 <on_initializing+0x60>)
 800adec:	f7f6 fa38 	bl	8001260 <HAL_ADC_Start_DMA>
                      (uint32_t*)adc_dma_buffer,
                      ADC_BUFFER_SIZE);

    // start a 1 s non‑blocking delay
    delayInit(&measureDelay, 1000);
 800adf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800adf4:	480b      	ldr	r0, [pc, #44]	; (800ae24 <on_initializing+0x64>)
 800adf6:	f7ff ff69 	bl	800accc <delayInit>
    debug_uart_print("INIT: drivers initialized\r\n");
 800adfa:	480b      	ldr	r0, [pc, #44]	; (800ae28 <on_initializing+0x68>)
 800adfc:	f000 fc80 	bl	800b700 <debug_uart_print>

    application_state = STATE_IDLE;
 800ae00:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <on_initializing+0x6c>)
 800ae02:	2201      	movs	r2, #1
 800ae04:	701a      	strb	r2, [r3, #0]
}
 800ae06:	bf00      	nop
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	0800e20c 	.word	0x0800e20c
 800ae10:	20000382 	.word	0x20000382
 800ae14:	20000380 	.word	0x20000380
 800ae18:	200002d8 	.word	0x200002d8
 800ae1c:	20000394 	.word	0x20000394
 800ae20:	20000184 	.word	0x20000184
 800ae24:	20000374 	.word	0x20000374
 800ae28:	0800e230 	.word	0x0800e230
 800ae2c:	20000371 	.word	0x20000371

0800ae30 <on_idle>:

//─── Idle: wait for timeout or USB ────────────────────────────────────────────
static void on_idle(void)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
    if (delayRead(&measureDelay)) {
 800ae34:	4809      	ldr	r0, [pc, #36]	; (800ae5c <on_idle+0x2c>)
 800ae36:	f7ff ff6d 	bl	800ad14 <delayRead>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d003      	beq.n	800ae48 <on_idle+0x18>
        application_state = STATE_MONITORING;
 800ae40:	4b07      	ldr	r3, [pc, #28]	; (800ae60 <on_idle+0x30>)
 800ae42:	2202      	movs	r2, #2
 800ae44:	701a      	strb	r2, [r3, #0]
        return;
 800ae46:	e008      	b.n	800ae5a <on_idle+0x2a>
    }
    if (usb_commands_pending()) {
 800ae48:	f000 fd02 	bl	800b850 <usb_commands_pending>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <on_idle+0x2a>
        application_state = STATE_USB_COMMAND;
 800ae52:	4b03      	ldr	r3, [pc, #12]	; (800ae60 <on_idle+0x30>)
 800ae54:	2203      	movs	r2, #3
 800ae56:	701a      	strb	r2, [r3, #0]
        return;
 800ae58:	bf00      	nop
    }
}
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	20000374 	.word	0x20000374
 800ae60:	20000371 	.word	0x20000371

0800ae64 <on_monitoring>:

//─── Monitoring: show & log high events ──────────────────────────────────────
static void on_monitoring(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b092      	sub	sp, #72	; 0x48
 800ae68:	af00      	add	r7, sp, #0
    char buf[64];
    sprintf(buf, "ENV = %u counts\r\n", envelope);
 800ae6a:	4b1a      	ldr	r3, [pc, #104]	; (800aed4 <on_monitoring+0x70>)
 800ae6c:	881b      	ldrh	r3, [r3, #0]
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	461a      	mov	r2, r3
 800ae72:	f107 0308 	add.w	r3, r7, #8
 800ae76:	4918      	ldr	r1, [pc, #96]	; (800aed8 <on_monitoring+0x74>)
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f001 fc69 	bl	800c750 <siprintf>
    debug_uart_print(buf);
 800ae7e:	f107 0308 	add.w	r3, r7, #8
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 fc3c 	bl	800b700 <debug_uart_print>

    if (envelope < threshold_low) {
 800ae88:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <on_monitoring+0x70>)
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <on_monitoring+0x78>)
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d311      	bcc.n	800aeba <on_monitoring+0x56>
        // TODO: turn off all 6 LEDs
    }
    else if (envelope < threshold_high) {
 800ae96:	4b0f      	ldr	r3, [pc, #60]	; (800aed4 <on_monitoring+0x70>)
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <on_monitoring+0x7c>)
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d30a      	bcc.n	800aeba <on_monitoring+0x56>
    }
    else {
        // TODO: light all 6 LEDs
        // log timestamp
        rtc_datetime_t now;
        if (rtc_get_datetime(&now)) {
 800aea4:	463b      	mov	r3, r7
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fb76 	bl	800b598 <rtc_get_datetime>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <on_monitoring+0x56>
            eeprom_log_high_event((eeprom_log_entry_t*)&now);
 800aeb2:	463b      	mov	r3, r7
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 fa23 	bl	800b300 <eeprom_log_high_event>
        }
    }

    // restart 1 s and go back
    delayWrite(&measureDelay, 1000);
 800aeba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aebe:	4809      	ldr	r0, [pc, #36]	; (800aee4 <on_monitoring+0x80>)
 800aec0:	f7ff ff62 	bl	800ad88 <delayWrite>
    application_state = STATE_IDLE;
 800aec4:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <on_monitoring+0x84>)
 800aec6:	2201      	movs	r2, #1
 800aec8:	701a      	strb	r2, [r3, #0]
}
 800aeca:	bf00      	nop
 800aecc:	3748      	adds	r7, #72	; 0x48
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20000594 	.word	0x20000594
 800aed8:	0800e24c 	.word	0x0800e24c
 800aedc:	20000380 	.word	0x20000380
 800aee0:	20000382 	.word	0x20000382
 800aee4:	20000374 	.word	0x20000374
 800aee8:	20000371 	.word	0x20000371

0800aeec <on_usb_command>:

//─── USB Command handler ─────────────────────────────────────────────────────
static void on_usb_command(void)
{
 800aeec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeee:	b0ad      	sub	sp, #180	; 0xb4
 800aef0:	af06      	add	r7, sp, #24
    usb_command_t cmd = usb_commands_get(&pending_action);
 800aef2:	487d      	ldr	r0, [pc, #500]	; (800b0e8 <on_usb_command+0x1fc>)
 800aef4:	f000 fcb4 	bl	800b860 <usb_commands_get>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
    switch (cmd) {
 800aefe:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800af02:	2b04      	cmp	r3, #4
 800af04:	f200 80e6 	bhi.w	800b0d4 <on_usb_command+0x1e8>
 800af08:	a201      	add	r2, pc, #4	; (adr r2, 800af10 <on_usb_command+0x24>)
 800af0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0e:	bf00      	nop
 800af10:	0800af25 	.word	0x0800af25
 800af14:	0800af45 	.word	0x0800af45
 800af18:	0800af7b 	.word	0x0800af7b
 800af1c:	0800afd3 	.word	0x0800afd3
 800af20:	0800afef 	.word	0x0800afef
        case CMD_GET_THRESH: {
            char msg[64];
            sprintf(msg, "TH_LOW=%u TH_HIGH=%u\r\n",
 800af24:	4b71      	ldr	r3, [pc, #452]	; (800b0ec <on_usb_command+0x200>)
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	461a      	mov	r2, r3
 800af2a:	4b71      	ldr	r3, [pc, #452]	; (800b0f0 <on_usb_command+0x204>)
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800af32:	4970      	ldr	r1, [pc, #448]	; (800b0f4 <on_usb_command+0x208>)
 800af34:	f001 fc0c 	bl	800c750 <siprintf>
                    threshold_low, threshold_high);
            debug_uart_print(msg);
 800af38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fbdf 	bl	800b700 <debug_uart_print>
            break;
 800af42:	e0ca      	b.n	800b0da <on_usb_command+0x1ee>
        }
        case CMD_SET_THRESH: {
            if (eeprom_write_thresholds(pending_action.low,
 800af44:	4b68      	ldr	r3, [pc, #416]	; (800b0e8 <on_usb_command+0x1fc>)
 800af46:	885b      	ldrh	r3, [r3, #2]
 800af48:	4a67      	ldr	r2, [pc, #412]	; (800b0e8 <on_usb_command+0x1fc>)
 800af4a:	8892      	ldrh	r2, [r2, #4]
 800af4c:	4611      	mov	r1, r2
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f9b2 	bl	800b2b8 <eeprom_write_thresholds>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00b      	beq.n	800af72 <on_usb_command+0x86>
                                        pending_action.high))
            {
                threshold_low  = pending_action.low;
 800af5a:	4b63      	ldr	r3, [pc, #396]	; (800b0e8 <on_usb_command+0x1fc>)
 800af5c:	885a      	ldrh	r2, [r3, #2]
 800af5e:	4b63      	ldr	r3, [pc, #396]	; (800b0ec <on_usb_command+0x200>)
 800af60:	801a      	strh	r2, [r3, #0]
                threshold_high = pending_action.high;
 800af62:	4b61      	ldr	r3, [pc, #388]	; (800b0e8 <on_usb_command+0x1fc>)
 800af64:	889a      	ldrh	r2, [r3, #4]
 800af66:	4b62      	ldr	r3, [pc, #392]	; (800b0f0 <on_usb_command+0x204>)
 800af68:	801a      	strh	r2, [r3, #0]
                debug_uart_print("Thresholds updated\r\n");
 800af6a:	4863      	ldr	r0, [pc, #396]	; (800b0f8 <on_usb_command+0x20c>)
 800af6c:	f000 fbc8 	bl	800b700 <debug_uart_print>
            } else {
                debug_uart_print("EEPROM write error\r\n");
            }
            break;
 800af70:	e0b3      	b.n	800b0da <on_usb_command+0x1ee>
                debug_uart_print("EEPROM write error\r\n");
 800af72:	4862      	ldr	r0, [pc, #392]	; (800b0fc <on_usb_command+0x210>)
 800af74:	f000 fbc4 	bl	800b700 <debug_uart_print>
            break;
 800af78:	e0af      	b.n	800b0da <on_usb_command+0x1ee>
        }
        case CMD_GET_TIME: {
            rtc_datetime_t dt;
            if (rtc_get_datetime(&dt)) {
 800af7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 fb0a 	bl	800b598 <rtc_get_datetime>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d01f      	beq.n	800afca <on_usb_command+0xde>
                char msg[64];
                sprintf(msg, "%02u/%02u/20%02u %02u:%02u:%02u\r\n",
                        dt.day, dt.month, dt.year,
 800af8a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
                sprintf(msg, "%02u/%02u/20%02u %02u:%02u:%02u\r\n",
 800af8e:	461d      	mov	r5, r3
                        dt.day, dt.month, dt.year,
 800af90:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
                sprintf(msg, "%02u/%02u/20%02u %02u:%02u:%02u\r\n",
 800af94:	461e      	mov	r6, r3
                        dt.day, dt.month, dt.year,
 800af96:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
                        dt.hour, dt.min, dt.sec);
 800af9a:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800af9e:	f897 108d 	ldrb.w	r1, [r7, #141]	; 0x8d
 800afa2:	f897 008c 	ldrb.w	r0, [r7, #140]	; 0x8c
                sprintf(msg, "%02u/%02u/20%02u %02u:%02u:%02u\r\n",
 800afa6:	4604      	mov	r4, r0
 800afa8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800afac:	9403      	str	r4, [sp, #12]
 800afae:	9102      	str	r1, [sp, #8]
 800afb0:	9201      	str	r2, [sp, #4]
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	4633      	mov	r3, r6
 800afb6:	462a      	mov	r2, r5
 800afb8:	4951      	ldr	r1, [pc, #324]	; (800b100 <on_usb_command+0x214>)
 800afba:	f001 fbc9 	bl	800c750 <siprintf>
                debug_uart_print(msg);
 800afbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fb9c 	bl	800b700 <debug_uart_print>
            } else {
                debug_uart_print("RTC: ND\r\n");
            }
            break;
 800afc8:	e087      	b.n	800b0da <on_usb_command+0x1ee>
                debug_uart_print("RTC: ND\r\n");
 800afca:	484e      	ldr	r0, [pc, #312]	; (800b104 <on_usb_command+0x218>)
 800afcc:	f000 fb98 	bl	800b700 <debug_uart_print>
            break;
 800afd0:	e083      	b.n	800b0da <on_usb_command+0x1ee>
        }
        case CMD_SET_TIME: {
            if (rtc_set_datetime(&pending_action.dt)) {
 800afd2:	484d      	ldr	r0, [pc, #308]	; (800b108 <on_usb_command+0x21c>)
 800afd4:	f000 fb42 	bl	800b65c <rtc_set_datetime>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d003      	beq.n	800afe6 <on_usb_command+0xfa>
                debug_uart_print("RTC updated\r\n");
 800afde:	484b      	ldr	r0, [pc, #300]	; (800b10c <on_usb_command+0x220>)
 800afe0:	f000 fb8e 	bl	800b700 <debug_uart_print>
            } else {
                debug_uart_print("RTC write error\r\n");
            }
            break;
 800afe4:	e079      	b.n	800b0da <on_usb_command+0x1ee>
                debug_uart_print("RTC write error\r\n");
 800afe6:	484a      	ldr	r0, [pc, #296]	; (800b110 <on_usb_command+0x224>)
 800afe8:	f000 fb8a 	bl	800b700 <debug_uart_print>
            break;
 800afec:	e075      	b.n	800b0da <on_usb_command+0x1ee>
        }
        case CMD_GET_LOG: {
            eeprom_log_entry_t entries[EEPROM_LOG_MAX_ENTRIES];
            uint8_t count;
            if (eeprom_read_log(entries,
 800afee:	f107 028b 	add.w	r2, r7, #139	; 0x8b
 800aff2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aff6:	210a      	movs	r1, #10
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 f9ca 	bl	800b392 <eeprom_read_log>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d063      	beq.n	800b0cc <on_usb_command+0x1e0>
                                EEPROM_LOG_MAX_ENTRIES,
                                &count))
            {
                for (uint8_t i = 0; i < count; i++) {
 800b004:	2300      	movs	r3, #0
 800b006:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b00a:	e058      	b.n	800b0be <on_usb_command+0x1d2>
                    char msg[64];
                    sprintf(msg,
                            "%02u/%02u/20%02u %02u:%02u:%02u Lvl=%u\r\n",
                            entries[i].day,
 800b00c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800b010:	4613      	mov	r3, r2
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	1a9b      	subs	r3, r3, r2
 800b016:	3398      	adds	r3, #152	; 0x98
 800b018:	443b      	add	r3, r7
 800b01a:	3b52      	subs	r3, #82	; 0x52
 800b01c:	781b      	ldrb	r3, [r3, #0]
                    sprintf(msg,
 800b01e:	469c      	mov	ip, r3
                            entries[i].month,
 800b020:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800b024:	4613      	mov	r3, r2
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	1a9b      	subs	r3, r3, r2
 800b02a:	3398      	adds	r3, #152	; 0x98
 800b02c:	443b      	add	r3, r7
 800b02e:	3b53      	subs	r3, #83	; 0x53
 800b030:	781b      	ldrb	r3, [r3, #0]
                    sprintf(msg,
 800b032:	469e      	mov	lr, r3
                            entries[i].year,
 800b034:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800b038:	4613      	mov	r3, r2
 800b03a:	00db      	lsls	r3, r3, #3
 800b03c:	1a9b      	subs	r3, r3, r2
 800b03e:	3398      	adds	r3, #152	; 0x98
 800b040:	443b      	add	r3, r7
 800b042:	3b54      	subs	r3, #84	; 0x54
 800b044:	781b      	ldrb	r3, [r3, #0]
                    sprintf(msg,
 800b046:	4619      	mov	r1, r3
                            entries[i].hour,
 800b048:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800b04c:	4613      	mov	r3, r2
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	3398      	adds	r3, #152	; 0x98
 800b054:	443b      	add	r3, r7
 800b056:	3b51      	subs	r3, #81	; 0x51
 800b058:	781b      	ldrb	r3, [r3, #0]
                    sprintf(msg,
 800b05a:	461c      	mov	r4, r3
                            entries[i].minute,
 800b05c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800b060:	4613      	mov	r3, r2
 800b062:	00db      	lsls	r3, r3, #3
 800b064:	1a9b      	subs	r3, r3, r2
 800b066:	3398      	adds	r3, #152	; 0x98
 800b068:	443b      	add	r3, r7
 800b06a:	3b50      	subs	r3, #80	; 0x50
 800b06c:	781b      	ldrb	r3, [r3, #0]
                    sprintf(msg,
 800b06e:	461d      	mov	r5, r3
                            entries[i].second,
 800b070:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800b074:	4613      	mov	r3, r2
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	1a9b      	subs	r3, r3, r2
 800b07a:	3398      	adds	r3, #152	; 0x98
 800b07c:	443b      	add	r3, r7
 800b07e:	3b4f      	subs	r3, #79	; 0x4f
 800b080:	781b      	ldrb	r3, [r3, #0]
                    sprintf(msg,
 800b082:	461e      	mov	r6, r3
                            entries[i].level);
 800b084:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800b088:	4613      	mov	r3, r2
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	1a9b      	subs	r3, r3, r2
 800b08e:	3398      	adds	r3, #152	; 0x98
 800b090:	443b      	add	r3, r7
 800b092:	3b4e      	subs	r3, #78	; 0x4e
 800b094:	781b      	ldrb	r3, [r3, #0]
                    sprintf(msg,
 800b096:	1d38      	adds	r0, r7, #4
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	9603      	str	r6, [sp, #12]
 800b09c:	9502      	str	r5, [sp, #8]
 800b09e:	9401      	str	r4, [sp, #4]
 800b0a0:	9100      	str	r1, [sp, #0]
 800b0a2:	4673      	mov	r3, lr
 800b0a4:	4662      	mov	r2, ip
 800b0a6:	491b      	ldr	r1, [pc, #108]	; (800b114 <on_usb_command+0x228>)
 800b0a8:	f001 fb52 	bl	800c750 <siprintf>
                    debug_uart_print(msg);
 800b0ac:	1d3b      	adds	r3, r7, #4
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 fb26 	bl	800b700 <debug_uart_print>
                for (uint8_t i = 0; i < count; i++) {
 800b0b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800b0be:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800b0c2:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d3a0      	bcc.n	800b00c <on_usb_command+0x120>
                }
            } else {
                debug_uart_print("Log empty or error\r\n");
            }
            break;
 800b0ca:	e006      	b.n	800b0da <on_usb_command+0x1ee>
                debug_uart_print("Log empty or error\r\n");
 800b0cc:	4812      	ldr	r0, [pc, #72]	; (800b118 <on_usb_command+0x22c>)
 800b0ce:	f000 fb17 	bl	800b700 <debug_uart_print>
            break;
 800b0d2:	e002      	b.n	800b0da <on_usb_command+0x1ee>
        }
        case CMD_HELP:
        default:
            usb_commands_print_help();
 800b0d4:	f000 fc30 	bl	800b938 <usb_commands_print_help>
            break;
 800b0d8:	bf00      	nop
    }
    application_state = STATE_IDLE;
 800b0da:	4b10      	ldr	r3, [pc, #64]	; (800b11c <on_usb_command+0x230>)
 800b0dc:	2201      	movs	r2, #1
 800b0de:	701a      	strb	r2, [r3, #0]
}
 800b0e0:	bf00      	nop
 800b0e2:	379c      	adds	r7, #156	; 0x9c
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e8:	20000384 	.word	0x20000384
 800b0ec:	20000380 	.word	0x20000380
 800b0f0:	20000382 	.word	0x20000382
 800b0f4:	0800e260 	.word	0x0800e260
 800b0f8:	0800e278 	.word	0x0800e278
 800b0fc:	0800e290 	.word	0x0800e290
 800b100:	0800e2a8 	.word	0x0800e2a8
 800b104:	0800e2cc 	.word	0x0800e2cc
 800b108:	2000038a 	.word	0x2000038a
 800b10c:	0800e2d8 	.word	0x0800e2d8
 800b110:	0800e2e8 	.word	0x0800e2e8
 800b114:	0800e2fc 	.word	0x0800e2fc
 800b118:	0800e328 	.word	0x0800e328
 800b11c:	20000371 	.word	0x20000371

0800b120 <app_entry_point>:

//─── Main loop ───────────────────────────────────────────────────────────────
void app_entry_point(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0
    while (1) {
        switch (application_state) {
 800b124:	4b0e      	ldr	r3, [pc, #56]	; (800b160 <app_entry_point+0x40>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b03      	cmp	r3, #3
 800b12a:	d8fb      	bhi.n	800b124 <app_entry_point+0x4>
 800b12c:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <app_entry_point+0x14>)
 800b12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b132:	bf00      	nop
 800b134:	0800b145 	.word	0x0800b145
 800b138:	0800b14b 	.word	0x0800b14b
 800b13c:	0800b151 	.word	0x0800b151
 800b140:	0800b157 	.word	0x0800b157
            case STATE_INITIALIZING:
            	on_initializing();
 800b144:	f7ff fe3c 	bl	800adc0 <on_initializing>
            	break;
 800b148:	e009      	b.n	800b15e <app_entry_point+0x3e>
            case STATE_IDLE:
            	on_idle();
 800b14a:	f7ff fe71 	bl	800ae30 <on_idle>
            	break;
 800b14e:	e006      	b.n	800b15e <app_entry_point+0x3e>
            case STATE_MONITORING:
            	on_monitoring();
 800b150:	f7ff fe88 	bl	800ae64 <on_monitoring>
            	break;
 800b154:	e003      	b.n	800b15e <app_entry_point+0x3e>
            case STATE_USB_COMMAND:
            	on_usb_command();
 800b156:	f7ff fec9 	bl	800aeec <on_usb_command>
            	break;
 800b15a:	bf00      	nop
 800b15c:	e7e2      	b.n	800b124 <app_entry_point+0x4>
        switch (application_state) {
 800b15e:	e7e1      	b.n	800b124 <app_entry_point+0x4>
 800b160:	20000371 	.word	0x20000371

0800b164 <HAL_ADC_ConvCpltCallback>:
    // Update the debouncing state machine in the button driver.
    button_update();
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b164:	b480      	push	{r7}
 800b166:	b089      	sub	sp, #36	; 0x24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a1f      	ldr	r2, [pc, #124]	; (800b1f0 <HAL_ADC_ConvCpltCallback+0x8c>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d135      	bne.n	800b1e2 <HAL_ADC_ConvCpltCallback+0x7e>
        // 1) Compute DC bias
        uint32_t sum = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b17a:	2300      	movs	r3, #0
 800b17c:	61bb      	str	r3, [r7, #24]
 800b17e:	e00a      	b.n	800b196 <HAL_ADC_ConvCpltCallback+0x32>
            sum += adc_dma_buffer[i];
 800b180:	4a1c      	ldr	r2, [pc, #112]	; (800b1f4 <HAL_ADC_ConvCpltCallback+0x90>)
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b188:	461a      	mov	r2, r3
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	4413      	add	r3, r2
 800b18e:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	3301      	adds	r3, #1
 800b194:	61bb      	str	r3, [r7, #24]
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	2bff      	cmp	r3, #255	; 0xff
 800b19a:	ddf1      	ble.n	800b180 <HAL_ADC_ConvCpltCallback+0x1c>
        }
        uint16_t bias = sum / ADC_BUFFER_SIZE;
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	0a1b      	lsrs	r3, r3, #8
 800b1a0:	81fb      	strh	r3, [r7, #14]

        // 2) Compute mean absolute deviation (“envelope”)
        uint32_t abs_sum = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	613b      	str	r3, [r7, #16]
 800b1aa:	e012      	b.n	800b1d2 <HAL_ADC_ConvCpltCallback+0x6e>
            int32_t d = (int32_t)adc_dma_buffer[i] - (int32_t)bias;
 800b1ac:	4a11      	ldr	r2, [pc, #68]	; (800b1f4 <HAL_ADC_ConvCpltCallback+0x90>)
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	89fb      	ldrh	r3, [r7, #14]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	60bb      	str	r3, [r7, #8]
            abs_sum += (d < 0 ? -d : d);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	bfb8      	it	lt
 800b1c2:	425b      	neglt	r3, r3
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2bff      	cmp	r3, #255	; 0xff
 800b1d6:	dde9      	ble.n	800b1ac <HAL_ADC_ConvCpltCallback+0x48>
        }
        envelope = abs_sum / ADC_BUFFER_SIZE;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	0a1b      	lsrs	r3, r3, #8
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <HAL_ADC_ConvCpltCallback+0x94>)
 800b1e0:	801a      	strh	r2, [r3, #0]
    }
}
 800b1e2:	bf00      	nop
 800b1e4:	3724      	adds	r7, #36	; 0x24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	40012000 	.word	0x40012000
 800b1f4:	20000394 	.word	0x20000394
 800b1f8:	20000594 	.word	0x20000594

0800b1fc <eeprom_init>:
#include <string.h>
#include "debug_uart.h"

// ——— Initialize EEPROM and thresholds ———
bool eeprom_init(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
    uint8_t sig;
    // Read the stored signature byte
    if (!eeprom_read(EEPROM_SIGNATURE_ADDR, &sig, 1)) {
 800b202:	1dfb      	adds	r3, r7, #7
 800b204:	2201      	movs	r2, #1
 800b206:	4619      	mov	r1, r3
 800b208:	2000      	movs	r0, #0
 800b20a:	f000 fb9f 	bl	800b94c <eeprom_read>
 800b20e:	4603      	mov	r3, r0
 800b210:	f083 0301 	eor.w	r3, r3, #1
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <eeprom_init+0x22>
        return false;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e01b      	b.n	800b256 <eeprom_init+0x5a>
    }

    // If signature mismatches, first‑time setup:
    if (sig != EEPROM_SIGNATURE_VALUE) {
 800b21e:	79fb      	ldrb	r3, [r7, #7]
 800b220:	2ba5      	cmp	r3, #165	; 0xa5
 800b222:	d017      	beq.n	800b254 <eeprom_init+0x58>
        // Buffer: [ signature ][ LOW (2) ][ HIGH (2) ]
        uint8_t buf[1 + 2*2];
        buf[0] = EEPROM_SIGNATURE_VALUE;
 800b224:	23a5      	movs	r3, #165	; 0xa5
 800b226:	703b      	strb	r3, [r7, #0]

        // Pack default LOW
        buf[1] = (uint8_t)(DEFAULT_THRESHOLD_LOW & 0xFF);
 800b228:	230a      	movs	r3, #10
 800b22a:	707b      	strb	r3, [r7, #1]
        buf[2] = (uint8_t)(DEFAULT_THRESHOLD_LOW >> 8);
 800b22c:	2300      	movs	r3, #0
 800b22e:	70bb      	strb	r3, [r7, #2]
        // Pack default HIGH
        buf[3] = (uint8_t)(DEFAULT_THRESHOLD_HIGH & 0xFF);
 800b230:	2358      	movs	r3, #88	; 0x58
 800b232:	70fb      	strb	r3, [r7, #3]
        buf[4] = (uint8_t)(DEFAULT_THRESHOLD_HIGH >> 8);
 800b234:	2302      	movs	r3, #2
 800b236:	713b      	strb	r3, [r7, #4]

        // Write signature + defaults
        if (!eeprom_write(EEPROM_SIGNATURE_ADDR, buf, sizeof(buf))) {
 800b238:	463b      	mov	r3, r7
 800b23a:	2205      	movs	r2, #5
 800b23c:	4619      	mov	r1, r3
 800b23e:	2000      	movs	r0, #0
 800b240:	f000 fba6 	bl	800b990 <eeprom_write>
 800b244:	4603      	mov	r3, r0
 800b246:	f083 0301 	eor.w	r3, r3, #1
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <eeprom_init+0x58>
            return false;
 800b250:	2300      	movs	r3, #0
 800b252:	e000      	b.n	800b256 <eeprom_init+0x5a>
        }
    }
    return true;
 800b254:	2301      	movs	r3, #1
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <eeprom_read_thresholds>:

// ——— Read LOW & HIGH thresholds ———
bool eeprom_read_thresholds(uint16_t *low, uint16_t *high)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b084      	sub	sp, #16
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	6039      	str	r1, [r7, #0]
    uint8_t buf[2*2];
    if (!eeprom_read(EEPROM_THRESH_ADDR, buf, sizeof(buf))) {
 800b268:	f107 030c 	add.w	r3, r7, #12
 800b26c:	2204      	movs	r2, #4
 800b26e:	4619      	mov	r1, r3
 800b270:	2001      	movs	r0, #1
 800b272:	f000 fb6b 	bl	800b94c <eeprom_read>
 800b276:	4603      	mov	r3, r0
 800b278:	f083 0301 	eor.w	r3, r3, #1
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <eeprom_read_thresholds+0x28>
        return false;
 800b282:	2300      	movs	r3, #0
 800b284:	e014      	b.n	800b2b0 <eeprom_read_thresholds+0x52>
    }
    // Little‑endian unpack
    *low  = (uint16_t)buf[0] | ((uint16_t)buf[1] << 8);
 800b286:	7b3b      	ldrb	r3, [r7, #12]
 800b288:	b21a      	sxth	r2, r3
 800b28a:	7b7b      	ldrb	r3, [r7, #13]
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	b21b      	sxth	r3, r3
 800b290:	4313      	orrs	r3, r2
 800b292:	b21b      	sxth	r3, r3
 800b294:	b29a      	uxth	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	801a      	strh	r2, [r3, #0]
    *high = (uint16_t)buf[2] | ((uint16_t)buf[3] << 8);
 800b29a:	7bbb      	ldrb	r3, [r7, #14]
 800b29c:	b21a      	sxth	r2, r3
 800b29e:	7bfb      	ldrb	r3, [r7, #15]
 800b2a0:	021b      	lsls	r3, r3, #8
 800b2a2:	b21b      	sxth	r3, r3
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	b21b      	sxth	r3, r3
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	801a      	strh	r2, [r3, #0]
    return true;
 800b2ae:	2301      	movs	r3, #1
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <eeprom_write_thresholds>:

// ——— Write new LOW & HIGH thresholds ———
bool eeprom_write_thresholds(uint16_t low, uint16_t high)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	4603      	mov	r3, r0
 800b2c0:	460a      	mov	r2, r1
 800b2c2:	80fb      	strh	r3, [r7, #6]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[2*2];
    buf[0] = (uint8_t)(low & 0xFF);
 800b2c8:	88fb      	ldrh	r3, [r7, #6]
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)(low >> 8);
 800b2ce:	88fb      	ldrh	r3, [r7, #6]
 800b2d0:	0a1b      	lsrs	r3, r3, #8
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(high & 0xFF);
 800b2d8:	88bb      	ldrh	r3, [r7, #4]
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t)(high >> 8);
 800b2de:	88bb      	ldrh	r3, [r7, #4]
 800b2e0:	0a1b      	lsrs	r3, r3, #8
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	73fb      	strb	r3, [r7, #15]
    return eeprom_write(EEPROM_THRESH_ADDR, buf, sizeof(buf));
 800b2e8:	f107 030c 	add.w	r3, r7, #12
 800b2ec:	2204      	movs	r2, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	2001      	movs	r0, #1
 800b2f2:	f000 fb4d 	bl	800b990 <eeprom_write>
 800b2f6:	4603      	mov	r3, r0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <eeprom_log_high_event>:

bool eeprom_log_high_event(const eeprom_log_entry_t *evt)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b096      	sub	sp, #88	; 0x58
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
    // 1) read existing log into RAM (up to EEPROM_LOG_MAX_ENTRIES)
    eeprom_log_entry_t tmp[EEPROM_LOG_MAX_ENTRIES];
    uint8_t count = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]
    eeprom_read_log(tmp, EEPROM_LOG_MAX_ENTRIES, &count);
 800b30c:	f107 020f 	add.w	r2, r7, #15
 800b310:	f107 0310 	add.w	r3, r7, #16
 800b314:	210a      	movs	r1, #10
 800b316:	4618      	mov	r0, r3
 800b318:	f000 f83b 	bl	800b392 <eeprom_read_log>

    // 2) shift everything down
    if (count == EEPROM_LOG_MAX_ENTRIES) {
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	2b0a      	cmp	r3, #10
 800b320:	d10b      	bne.n	800b33a <eeprom_log_high_event+0x3a>
        memmove(&tmp[1], &tmp[0], (EEPROM_LOG_MAX_ENTRIES-1)*sizeof(*tmp));
 800b322:	f107 0110 	add.w	r1, r7, #16
 800b326:	f107 0310 	add.w	r3, r7, #16
 800b32a:	3307      	adds	r3, #7
 800b32c:	223f      	movs	r2, #63	; 0x3f
 800b32e:	4618      	mov	r0, r3
 800b330:	f001 fa9f 	bl	800c872 <memmove>
        count = EEPROM_LOG_MAX_ENTRIES;
 800b334:	230a      	movs	r3, #10
 800b336:	73fb      	strb	r3, [r7, #15]
 800b338:	e011      	b.n	800b35e <eeprom_log_high_event+0x5e>
    } else {
        count++;
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	3301      	adds	r3, #1
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	73fb      	strb	r3, [r7, #15]
        memmove(&tmp[1], &tmp[0], (count-1)*sizeof(*tmp));
 800b342:	7bfb      	ldrb	r3, [r7, #15]
 800b344:	3b01      	subs	r3, #1
 800b346:	461a      	mov	r2, r3
 800b348:	4613      	mov	r3, r2
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	1a9a      	subs	r2, r3, r2
 800b34e:	f107 0110 	add.w	r1, r7, #16
 800b352:	f107 0310 	add.w	r3, r7, #16
 800b356:	3307      	adds	r3, #7
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 fa8a 	bl	800c872 <memmove>
    }

    // 3) insert new event at tmp[0]
    tmp[0] = *evt;
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	f107 0310 	add.w	r3, r7, #16
 800b364:	6810      	ldr	r0, [r2, #0]
 800b366:	6018      	str	r0, [r3, #0]
 800b368:	8891      	ldrh	r1, [r2, #4]
 800b36a:	7992      	ldrb	r2, [r2, #6]
 800b36c:	8099      	strh	r1, [r3, #4]
 800b36e:	719a      	strb	r2, [r3, #6]

    // 4) write back `count` entries to EEPROM
    return eeprom_write(EEPROM_LOG_BASE_ADDR,
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	b29b      	uxth	r3, r3
 800b374:	461a      	mov	r2, r3
 800b376:	00d2      	lsls	r2, r2, #3
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	4619      	mov	r1, r3
 800b382:	2010      	movs	r0, #16
 800b384:	f000 fb04 	bl	800b990 <eeprom_write>
 800b388:	4603      	mov	r3, r0
                              (uint8_t*)tmp,
                              count * EEPROM_LOG_ENTRY_SIZE);
    return true;
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3758      	adds	r7, #88	; 0x58
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <eeprom_read_log>:

bool eeprom_read_log(eeprom_log_entry_t *entries, uint8_t max_entries, uint8_t *out_count)
{
 800b392:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b396:	b089      	sub	sp, #36	; 0x24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	460b      	mov	r3, r1
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	72fb      	strb	r3, [r7, #11]
 800b3a2:	466b      	mov	r3, sp
 800b3a4:	461e      	mov	r6, r3
    // calculate how many bytes are valid: max_entries * size
    uint16_t to_read = max_entries * EEPROM_LOG_ENTRY_SIZE;
 800b3a6:	7afb      	ldrb	r3, [r7, #11]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	00d2      	lsls	r2, r2, #3
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	83bb      	strh	r3, [r7, #28]
    uint8_t buf[to_read];
 800b3b2:	8bb9      	ldrh	r1, [r7, #28]
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	61bb      	str	r3, [r7, #24]
 800b3ba:	b28b      	uxth	r3, r1
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4698      	mov	r8, r3
 800b3c0:	4691      	mov	r9, r2
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	f04f 0300 	mov.w	r3, #0
 800b3ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3d6:	b28b      	uxth	r3, r1
 800b3d8:	2200      	movs	r2, #0
 800b3da:	461c      	mov	r4, r3
 800b3dc:	4615      	mov	r5, r2
 800b3de:	f04f 0200 	mov.w	r2, #0
 800b3e2:	f04f 0300 	mov.w	r3, #0
 800b3e6:	00eb      	lsls	r3, r5, #3
 800b3e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b3ec:	00e2      	lsls	r2, r4, #3
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	3307      	adds	r3, #7
 800b3f2:	08db      	lsrs	r3, r3, #3
 800b3f4:	00db      	lsls	r3, r3, #3
 800b3f6:	ebad 0d03 	sub.w	sp, sp, r3
 800b3fa:	466b      	mov	r3, sp
 800b3fc:	3300      	adds	r3, #0
 800b3fe:	617b      	str	r3, [r7, #20]
    if (!eeprom_read(EEPROM_LOG_BASE_ADDR, buf, to_read))
 800b400:	8bbb      	ldrh	r3, [r7, #28]
 800b402:	461a      	mov	r2, r3
 800b404:	6979      	ldr	r1, [r7, #20]
 800b406:	2010      	movs	r0, #16
 800b408:	f000 faa0 	bl	800b94c <eeprom_read>
 800b40c:	4603      	mov	r3, r0
 800b40e:	f083 0301 	eor.w	r3, r3, #1
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <eeprom_read_log+0x8a>
        return false;
 800b418:	2300      	movs	r3, #0
 800b41a:	e058      	b.n	800b4ce <eeprom_read_log+0x13c>

    // unpack; stop if you hit a sentinel (e.g. year==0) or max_entries
    uint8_t count = 0;
 800b41c:	2300      	movs	r3, #0
 800b41e:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < max_entries; i++) {
 800b420:	2300      	movs	r3, #0
 800b422:	77bb      	strb	r3, [r7, #30]
 800b424:	e04b      	b.n	800b4be <eeprom_read_log+0x12c>
        uint8_t *b = &buf[i * EEPROM_LOG_ENTRY_SIZE];
 800b426:	7fba      	ldrb	r2, [r7, #30]
 800b428:	4613      	mov	r3, r2
 800b42a:	00db      	lsls	r3, r3, #3
 800b42c:	1a9b      	subs	r3, r3, r2
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	4413      	add	r3, r2
 800b432:	613b      	str	r3, [r7, #16]
        entries[i].year   = b[0];
 800b434:	7fba      	ldrb	r2, [r7, #30]
 800b436:	4613      	mov	r3, r2
 800b438:	00db      	lsls	r3, r3, #3
 800b43a:	1a9b      	subs	r3, r3, r2
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	4413      	add	r3, r2
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	7812      	ldrb	r2, [r2, #0]
 800b444:	701a      	strb	r2, [r3, #0]
        entries[i].month  = b[1];
 800b446:	7fba      	ldrb	r2, [r7, #30]
 800b448:	4613      	mov	r3, r2
 800b44a:	00db      	lsls	r3, r3, #3
 800b44c:	1a9b      	subs	r3, r3, r2
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	4413      	add	r3, r2
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	7852      	ldrb	r2, [r2, #1]
 800b456:	705a      	strb	r2, [r3, #1]
        entries[i].day    = b[2];
 800b458:	7fba      	ldrb	r2, [r7, #30]
 800b45a:	4613      	mov	r3, r2
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	1a9b      	subs	r3, r3, r2
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	7892      	ldrb	r2, [r2, #2]
 800b468:	709a      	strb	r2, [r3, #2]
        entries[i].hour   = b[3];
 800b46a:	7fba      	ldrb	r2, [r7, #30]
 800b46c:	4613      	mov	r3, r2
 800b46e:	00db      	lsls	r3, r3, #3
 800b470:	1a9b      	subs	r3, r3, r2
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	4413      	add	r3, r2
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	78d2      	ldrb	r2, [r2, #3]
 800b47a:	70da      	strb	r2, [r3, #3]
        entries[i].minute = b[4];
 800b47c:	7fba      	ldrb	r2, [r7, #30]
 800b47e:	4613      	mov	r3, r2
 800b480:	00db      	lsls	r3, r3, #3
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	4413      	add	r3, r2
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	7912      	ldrb	r2, [r2, #4]
 800b48c:	711a      	strb	r2, [r3, #4]
        entries[i].second = b[5];
 800b48e:	7fba      	ldrb	r2, [r7, #30]
 800b490:	4613      	mov	r3, r2
 800b492:	00db      	lsls	r3, r3, #3
 800b494:	1a9b      	subs	r3, r3, r2
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	4413      	add	r3, r2
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	7952      	ldrb	r2, [r2, #5]
 800b49e:	715a      	strb	r2, [r3, #5]
        entries[i].level  = b[6];
 800b4a0:	7fba      	ldrb	r2, [r7, #30]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	00db      	lsls	r3, r3, #3
 800b4a6:	1a9b      	subs	r3, r3, r2
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	7992      	ldrb	r2, [r2, #6]
 800b4b0:	719a      	strb	r2, [r3, #6]
        // you can check if year==0 to break early
        count++;
 800b4b2:	7ffb      	ldrb	r3, [r7, #31]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < max_entries; i++) {
 800b4b8:	7fbb      	ldrb	r3, [r7, #30]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	77bb      	strb	r3, [r7, #30]
 800b4be:	7fba      	ldrb	r2, [r7, #30]
 800b4c0:	7afb      	ldrb	r3, [r7, #11]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d3af      	bcc.n	800b426 <eeprom_read_log+0x94>
    }
    *out_count = count;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7ffa      	ldrb	r2, [r7, #31]
 800b4ca:	701a      	strb	r2, [r3, #0]
    return true;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	46b5      	mov	sp, r6
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3724      	adds	r7, #36	; 0x24
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b4da <bcd2bin>:
#include "rtc.h"
#include "port_rtc.h"

// BCD ↔ BIN helpers
static uint8_t  bcd2bin(uint8_t v) { return (v & 0x0F) + ((v >> 4) * 10); }
 800b4da:	b480      	push	{r7}
 800b4dc:	b083      	sub	sp, #12
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	71fb      	strb	r3, [r7, #7]
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	f003 030f 	and.w	r3, r3, #15
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	79fb      	ldrb	r3, [r7, #7]
 800b4ee:	091b      	lsrs	r3, r3, #4
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	0089      	lsls	r1, r1, #2
 800b4f6:	440b      	add	r3, r1
 800b4f8:	005b      	lsls	r3, r3, #1
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	4413      	add	r3, r2
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	4618      	mov	r0, r3
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <bin2bcd>:
static uint8_t  bin2bcd(uint8_t v) { return ((v / 10) << 4) | (v % 10); }
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	4603      	mov	r3, r0
 800b514:	71fb      	strb	r3, [r7, #7]
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	4a0d      	ldr	r2, [pc, #52]	; (800b550 <bin2bcd+0x44>)
 800b51a:	fba2 2303 	umull	r2, r3, r2, r3
 800b51e:	08db      	lsrs	r3, r3, #3
 800b520:	b2db      	uxtb	r3, r3
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	b258      	sxtb	r0, r3
 800b526:	79fa      	ldrb	r2, [r7, #7]
 800b528:	4b09      	ldr	r3, [pc, #36]	; (800b550 <bin2bcd+0x44>)
 800b52a:	fba3 1302 	umull	r1, r3, r3, r2
 800b52e:	08d9      	lsrs	r1, r3, #3
 800b530:	460b      	mov	r3, r1
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	440b      	add	r3, r1
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	1ad3      	subs	r3, r2, r3
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	b25b      	sxtb	r3, r3
 800b53e:	4303      	orrs	r3, r0
 800b540:	b25b      	sxtb	r3, r3
 800b542:	b2db      	uxtb	r3, r3
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	cccccccd 	.word	0xcccccccd

0800b554 <rtc_init>:

static bool     time_set = false;

bool rtc_init(void)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
    port_rtc_init();
 800b55a:	f000 fa3d 	bl	800b9d8 <port_rtc_init>

    uint8_t sec_reg;
    if (!port_rtc_read(0x00, &sec_reg, 1)) {
 800b55e:	1dfb      	adds	r3, r7, #7
 800b560:	2201      	movs	r2, #1
 800b562:	4619      	mov	r1, r3
 800b564:	2000      	movs	r0, #0
 800b566:	f000 fa3f 	bl	800b9e8 <port_rtc_read>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f083 0301 	eor.w	r3, r3, #1
 800b570:	b2db      	uxtb	r3, r3
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <rtc_init+0x26>
        return false;
 800b576:	2300      	movs	r3, #0
 800b578:	e008      	b.n	800b58c <rtc_init+0x38>
    }
    // CH bit = bit7 of seconds register. If set → clock halted (not init’d)
    time_set = !(sec_reg & 0x80);
 800b57a:	79fb      	ldrb	r3, [r7, #7]
 800b57c:	b25b      	sxtb	r3, r3
 800b57e:	43db      	mvns	r3, r3
 800b580:	b2db      	uxtb	r3, r3
 800b582:	09db      	lsrs	r3, r3, #7
 800b584:	b2da      	uxtb	r2, r3
 800b586:	4b03      	ldr	r3, [pc, #12]	; (800b594 <rtc_init+0x40>)
 800b588:	701a      	strb	r2, [r3, #0]
    return true;
 800b58a:	2301      	movs	r3, #1
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}
 800b594:	20000596 	.word	0x20000596

0800b598 <rtc_get_datetime>:
{
    return time_set;
}

bool rtc_get_datetime(rtc_datetime_t *dt)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
    if (!time_set) return false;
 800b5a0:	4b2d      	ldr	r3, [pc, #180]	; (800b658 <rtc_get_datetime+0xc0>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	f083 0301 	eor.w	r3, r3, #1
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <rtc_get_datetime+0x1a>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e04d      	b.n	800b64e <rtc_get_datetime+0xb6>

    uint8_t buf[7];
    if (!port_rtc_read(0x00, buf, 7)) {
 800b5b2:	f107 0308 	add.w	r3, r7, #8
 800b5b6:	2207      	movs	r2, #7
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	f000 fa14 	bl	800b9e8 <port_rtc_read>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f083 0301 	eor.w	r3, r3, #1
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <rtc_get_datetime+0x38>
        return false;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e03e      	b.n	800b64e <rtc_get_datetime+0xb6>
    }
    // decode BCD fields
    dt->sec   = bcd2bin(buf[0] & 0x7F);
 800b5d0:	7a3b      	ldrb	r3, [r7, #8]
 800b5d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff ff7e 	bl	800b4da <bcd2bin>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	701a      	strb	r2, [r3, #0]
    dt->min   = bcd2bin(buf[1]);
 800b5e6:	7a7b      	ldrb	r3, [r7, #9]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7ff ff76 	bl	800b4da <bcd2bin>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	705a      	strb	r2, [r3, #1]
    dt->hour  = bcd2bin(buf[2] & 0x3F);
 800b5f6:	7abb      	ldrb	r3, [r7, #10]
 800b5f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff ff6b 	bl	800b4da <bcd2bin>
 800b604:	4603      	mov	r3, r0
 800b606:	461a      	mov	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	709a      	strb	r2, [r3, #2]
    dt->day   = bcd2bin(buf[3]);
 800b60c:	7afb      	ldrb	r3, [r7, #11]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff ff63 	bl	800b4da <bcd2bin>
 800b614:	4603      	mov	r3, r0
 800b616:	461a      	mov	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	70da      	strb	r2, [r3, #3]
    dt->date  = bcd2bin(buf[4]);
 800b61c:	7b3b      	ldrb	r3, [r7, #12]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff ff5b 	bl	800b4da <bcd2bin>
 800b624:	4603      	mov	r3, r0
 800b626:	461a      	mov	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	711a      	strb	r2, [r3, #4]
    dt->month = bcd2bin(buf[5]);
 800b62c:	7b7b      	ldrb	r3, [r7, #13]
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff ff53 	bl	800b4da <bcd2bin>
 800b634:	4603      	mov	r3, r0
 800b636:	461a      	mov	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	715a      	strb	r2, [r3, #5]
    dt->year  = bcd2bin(buf[6]);
 800b63c:	7bbb      	ldrb	r3, [r7, #14]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff ff4b 	bl	800b4da <bcd2bin>
 800b644:	4603      	mov	r3, r0
 800b646:	461a      	mov	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	719a      	strb	r2, [r3, #6]
    return true;
 800b64c:	2301      	movs	r3, #1
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20000596 	.word	0x20000596

0800b65c <rtc_set_datetime>:

bool rtc_set_datetime(const rtc_datetime_t *dt)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
    uint8_t buf[8];
    // seconds with CH=0 to start oscillator
    buf[0] = bin2bcd(dt->sec) & 0x7F;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	4618      	mov	r0, r3
 800b66a:	f7ff ff4f 	bl	800b50c <bin2bcd>
 800b66e:	4603      	mov	r3, r0
 800b670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b674:	b2db      	uxtb	r3, r3
 800b676:	723b      	strb	r3, [r7, #8]
    buf[1] = bin2bcd(dt->min);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	785b      	ldrb	r3, [r3, #1]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7ff ff45 	bl	800b50c <bin2bcd>
 800b682:	4603      	mov	r3, r0
 800b684:	727b      	strb	r3, [r7, #9]
    buf[2] = bin2bcd(dt->hour);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	789b      	ldrb	r3, [r3, #2]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff ff3e 	bl	800b50c <bin2bcd>
 800b690:	4603      	mov	r3, r0
 800b692:	72bb      	strb	r3, [r7, #10]
    buf[3] = bin2bcd(dt->day);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	78db      	ldrb	r3, [r3, #3]
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff ff37 	bl	800b50c <bin2bcd>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	72fb      	strb	r3, [r7, #11]
    buf[4] = bin2bcd(dt->date);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	791b      	ldrb	r3, [r3, #4]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff ff30 	bl	800b50c <bin2bcd>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	733b      	strb	r3, [r7, #12]
    buf[5] = bin2bcd(dt->month);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	795b      	ldrb	r3, [r3, #5]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7ff ff29 	bl	800b50c <bin2bcd>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	737b      	strb	r3, [r7, #13]
    buf[6] = bin2bcd(dt->year);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	799b      	ldrb	r3, [r3, #6]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7ff ff22 	bl	800b50c <bin2bcd>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	73bb      	strb	r3, [r7, #14]
    // write starting at reg 0x00
    if (!port_rtc_write(0x00, buf, 7)) {
 800b6cc:	f107 0308 	add.w	r3, r7, #8
 800b6d0:	2207      	movs	r2, #7
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	f000 f9a9 	bl	800ba2c <port_rtc_write>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	f083 0301 	eor.w	r3, r3, #1
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <rtc_set_datetime+0x8e>
        return false;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e003      	b.n	800b6f2 <rtc_set_datetime+0x96>
    }
    time_set = true;
 800b6ea:	4b04      	ldr	r3, [pc, #16]	; (800b6fc <rtc_set_datetime+0xa0>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	701a      	strb	r2, [r3, #0]
    return true;
 800b6f0:	2301      	movs	r3, #1
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20000596 	.word	0x20000596

0800b700 <debug_uart_print>:
    // In most cases, initialization for UART2 is handled by CubeMX.
    // This function exists for logical consistency.
}

int debug_uart_print(const char* msg)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
    if (msg == 0) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d102      	bne.n	800b714 <debug_uart_print+0x14>
        return -1;
 800b70e:	f04f 33ff 	mov.w	r3, #4294967295
 800b712:	e011      	b.n	800b738 <debug_uart_print+0x38>
    }

    uint16_t len = (uint16_t)strlen(msg);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7f4 fd85 	bl	8000224 <strlen>
 800b71a:	4603      	mov	r3, r0
 800b71c:	81fb      	strh	r3, [r7, #14]
    // Transmit the string over UART2 with a timeout of 100 ms.
    if (HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100) == HAL_OK)
 800b71e:	89fa      	ldrh	r2, [r7, #14]
 800b720:	2364      	movs	r3, #100	; 0x64
 800b722:	6879      	ldr	r1, [r7, #4]
 800b724:	4806      	ldr	r0, [pc, #24]	; (800b740 <debug_uart_print+0x40>)
 800b726:	f7fb f81f 	bl	8006768 <HAL_UART_Transmit>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <debug_uart_print+0x34>
    {
        return 0;
 800b730:	2300      	movs	r3, #0
 800b732:	e001      	b.n	800b738 <debug_uart_print+0x38>
    }
    return -1;
 800b734:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	20000320 	.word	0x20000320

0800b744 <usb_cdc_init>:
static char usb_cmd_buffer[USB_CMD_BUFFER_SIZE] = { 0 };

/**
 * @brief Initializes the USB CDC driver.
 */
void usb_cdc_init(void) {
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
	command_pending = false;
 800b748:	4b04      	ldr	r3, [pc, #16]	; (800b75c <usb_cdc_init+0x18>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]
	memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800b74e:	2280      	movs	r2, #128	; 0x80
 800b750:	2100      	movs	r1, #0
 800b752:	4803      	ldr	r0, [pc, #12]	; (800b760 <usb_cdc_init+0x1c>)
 800b754:	f001 f8a7 	bl	800c8a6 <memset>
}
 800b758:	bf00      	nop
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20000597 	.word	0x20000597
 800b760:	20000598 	.word	0x20000598

0800b764 <usb_cdc_receiveCallback>:
 * It copies data into the command buffer and marks a command as pending.
 *
 * @param Buf Pointer to the received data buffer.
 * @param Len Number of bytes received.
 */
void usb_cdc_receiveCallback(uint8_t *Buf, uint32_t Len) {
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	6039      	str	r1, [r7, #0]
	debug_uart_print("usb_cdc_receiveCallback()\r\n");
 800b76e:	481e      	ldr	r0, [pc, #120]	; (800b7e8 <usb_cdc_receiveCallback+0x84>)
 800b770:	f7ff ffc6 	bl	800b700 <debug_uart_print>
	debug_uart_print((char*) Buf);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7ff ffc3 	bl	800b700 <debug_uart_print>
	debug_uart_print("\r\n");
 800b77a:	481c      	ldr	r0, [pc, #112]	; (800b7ec <usb_cdc_receiveCallback+0x88>)
 800b77c:	f7ff ffc0 	bl	800b700 <debug_uart_print>
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800b780:	e002      	b.n	800b788 <usb_cdc_receiveCallback+0x24>
		Len--;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	3b01      	subs	r3, #1
 800b786:	603b      	str	r3, [r7, #0]
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00d      	beq.n	800b7aa <usb_cdc_receiveCallback+0x46>
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	3b01      	subs	r3, #1
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	4413      	add	r3, r2
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	2b0d      	cmp	r3, #13
 800b79a:	d0f2      	beq.n	800b782 <usb_cdc_receiveCallback+0x1e>
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	2b0a      	cmp	r3, #10
 800b7a8:	d0eb      	beq.n	800b782 <usb_cdc_receiveCallback+0x1e>
	}
	if (!command_pending && Len < USB_CMD_BUFFER_SIZE) {
 800b7aa:	4b11      	ldr	r3, [pc, #68]	; (800b7f0 <usb_cdc_receiveCallback+0x8c>)
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	f083 0301 	eor.w	r3, r3, #1
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d011      	beq.n	800b7de <usb_cdc_receiveCallback+0x7a>
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	2b7f      	cmp	r3, #127	; 0x7f
 800b7be:	d80e      	bhi.n	800b7de <usb_cdc_receiveCallback+0x7a>
		memcpy(usb_cmd_buffer, Buf, Len);
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	6879      	ldr	r1, [r7, #4]
 800b7c4:	480b      	ldr	r0, [pc, #44]	; (800b7f4 <usb_cdc_receiveCallback+0x90>)
 800b7c6:	f001 f8ea 	bl	800c99e <memcpy>
		// Null-terminate the string safely.
		usb_cmd_buffer[Len < USB_CMD_BUFFER_SIZE ? Len : USB_CMD_BUFFER_SIZE - 1] =
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b7f      	cmp	r3, #127	; 0x7f
 800b7ce:	bf28      	it	cs
 800b7d0:	237f      	movcs	r3, #127	; 0x7f
 800b7d2:	4a08      	ldr	r2, [pc, #32]	; (800b7f4 <usb_cdc_receiveCallback+0x90>)
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	54d1      	strb	r1, [r2, r3]
				'\0';
		command_pending = true;
 800b7d8:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <usb_cdc_receiveCallback+0x8c>)
 800b7da:	2201      	movs	r2, #1
 800b7dc:	701a      	strb	r2, [r3, #0]
	}
	// If a command is already pending, new data is discarded.
}
 800b7de:	bf00      	nop
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	0800e340 	.word	0x0800e340
 800b7ec:	0800e35c 	.word	0x0800e35c
 800b7f0:	20000597 	.word	0x20000597
 800b7f4:	20000598 	.word	0x20000598

0800b7f8 <usb_cdc_isCommandPending>:
/**
 * @brief Checks if there is a pending USB CDC command.
 *
 * @return true if there is a pending command, false otherwise.
 */
bool usb_cdc_isCommandPending(void) {
 800b7f8:	b480      	push	{r7}
 800b7fa:	af00      	add	r7, sp, #0
	return command_pending;
 800b7fc:	4b03      	ldr	r3, [pc, #12]	; (800b80c <usb_cdc_isCommandPending+0x14>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	b2db      	uxtb	r3, r3
}
 800b802:	4618      	mov	r0, r3
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	20000597 	.word	0x20000597

0800b810 <usb_cdc_getCommand>:
/**
 * @brief Retrieves the buffered USB CDC command.
 *
 * @return Pointer to the null-terminated command string.
 */
const char* usb_cdc_getCommand(void) {
 800b810:	b480      	push	{r7}
 800b812:	af00      	add	r7, sp, #0
	return usb_cmd_buffer;
 800b814:	4b02      	ldr	r3, [pc, #8]	; (800b820 <usb_cdc_getCommand+0x10>)
}
 800b816:	4618      	mov	r0, r3
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	20000598 	.word	0x20000598

0800b824 <usb_cdc_clearCommand>:

/**
 * @brief Clears the current USB CDC command.
 */
void usb_cdc_clearCommand(void) {
 800b824:	b580      	push	{r7, lr}
 800b826:	af00      	add	r7, sp, #0
	command_pending = false;
 800b828:	4b04      	ldr	r3, [pc, #16]	; (800b83c <usb_cdc_clearCommand+0x18>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
	memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800b82e:	2280      	movs	r2, #128	; 0x80
 800b830:	2100      	movs	r1, #0
 800b832:	4803      	ldr	r0, [pc, #12]	; (800b840 <usb_cdc_clearCommand+0x1c>)
 800b834:	f001 f837 	bl	800c8a6 <memset>
}
 800b838:	bf00      	nop
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20000597 	.word	0x20000597
 800b840:	20000598 	.word	0x20000598

0800b844 <usb_commands_init>:
#include "usb_cdc.h"
#include "debug_uart.h"
#include <string.h>
#include <stdio.h>

void usb_commands_init(void) {
 800b844:	b580      	push	{r7, lr}
 800b846:	af00      	add	r7, sp, #0
    // Ensure CDC driver is up
    usb_cdc_init();
 800b848:	f7ff ff7c 	bl	800b744 <usb_cdc_init>
}
 800b84c:	bf00      	nop
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <usb_commands_pending>:

bool usb_commands_pending(void) {
 800b850:	b580      	push	{r7, lr}
 800b852:	af00      	add	r7, sp, #0
    return usb_cdc_isCommandPending();
 800b854:	f7ff ffd0 	bl	800b7f8 <usb_cdc_isCommandPending>
 800b858:	4603      	mov	r3, r0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	bd80      	pop	{r7, pc}
	...

0800b860 <usb_commands_get>:

usb_command_t usb_commands_get(pending_action_t *out) {
 800b860:	b5b0      	push	{r4, r5, r7, lr}
 800b862:	b088      	sub	sp, #32
 800b864:	af04      	add	r7, sp, #16
 800b866:	6078      	str	r0, [r7, #4]
    const char *cmd = usb_cdc_getCommand();
 800b868:	f7ff ffd2 	bl	800b810 <usb_cdc_getCommand>
 800b86c:	60f8      	str	r0, [r7, #12]

    // GET_THRESH
    if (strcmp(cmd, USB_CMD_GET_THRESH) == 0) {
 800b86e:	492d      	ldr	r1, [pc, #180]	; (800b924 <usb_commands_get+0xc4>)
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7f4 fccd 	bl	8000210 <strcmp>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d103      	bne.n	800b884 <usb_commands_get+0x24>
        out->cmd = CMD_GET_THRESH;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	701a      	strb	r2, [r3, #0]
 800b882:	e046      	b.n	800b912 <usb_commands_get+0xb2>
    }
    // SET_THRESH L H
    else if (sscanf(cmd, USB_CMD_SET_THRESH " %hu %hu",
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	1c9a      	adds	r2, r3, #2
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3304      	adds	r3, #4
 800b88c:	4926      	ldr	r1, [pc, #152]	; (800b928 <usb_commands_get+0xc8>)
 800b88e:	68f8      	ldr	r0, [r7, #12]
 800b890:	f000 ff7e 	bl	800c790 <siscanf>
 800b894:	4603      	mov	r3, r0
 800b896:	2b02      	cmp	r3, #2
 800b898:	d103      	bne.n	800b8a2 <usb_commands_get+0x42>
                    &out->low, &out->high) == 2) {
        out->cmd = CMD_SET_THRESH;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	701a      	strb	r2, [r3, #0]
 800b8a0:	e037      	b.n	800b912 <usb_commands_get+0xb2>
    }
    // GET_TIME
    else if (strcmp(cmd, USB_CMD_GET_TIME) == 0) {
 800b8a2:	4922      	ldr	r1, [pc, #136]	; (800b92c <usb_commands_get+0xcc>)
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7f4 fcb3 	bl	8000210 <strcmp>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d103      	bne.n	800b8b8 <usb_commands_get+0x58>
        out->cmd = CMD_GET_TIME;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	701a      	strb	r2, [r3, #0]
 800b8b6:	e02c      	b.n	800b912 <usb_commands_get+0xb2>
    }
    // SET_TIME Y M D h m s
    else if (sscanf(cmd, USB_CMD_SET_TIME " %hhu %hhu %hhu %hhu %hhu %hhu",
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f103 040c 	add.w	r4, r3, #12
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f103 050b 	add.w	r5, r3, #11
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3309      	adds	r3, #9
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	3208      	adds	r2, #8
 800b8cc:	6879      	ldr	r1, [r7, #4]
 800b8ce:	3107      	adds	r1, #7
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	3006      	adds	r0, #6
 800b8d4:	9003      	str	r0, [sp, #12]
 800b8d6:	9102      	str	r1, [sp, #8]
 800b8d8:	9201      	str	r2, [sp, #4]
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	462b      	mov	r3, r5
 800b8de:	4622      	mov	r2, r4
 800b8e0:	4913      	ldr	r1, [pc, #76]	; (800b930 <usb_commands_get+0xd0>)
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f000 ff54 	bl	800c790 <siscanf>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b06      	cmp	r3, #6
 800b8ec:	d103      	bne.n	800b8f6 <usb_commands_get+0x96>
                    &out->dt.year, &out->dt.month, &out->dt.day,
                    &out->dt.hour, &out->dt.min, &out->dt.sec) == 6) {
        out->cmd = CMD_SET_TIME;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2203      	movs	r2, #3
 800b8f2:	701a      	strb	r2, [r3, #0]
 800b8f4:	e00d      	b.n	800b912 <usb_commands_get+0xb2>
    }
    // GET_LOG
    else if (strcmp(cmd, USB_CMD_GET_LOG) == 0) {
 800b8f6:	490f      	ldr	r1, [pc, #60]	; (800b934 <usb_commands_get+0xd4>)
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f7f4 fc89 	bl	8000210 <strcmp>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d103      	bne.n	800b90c <usb_commands_get+0xac>
        out->cmd = CMD_GET_LOG;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2204      	movs	r2, #4
 800b908:	701a      	strb	r2, [r3, #0]
 800b90a:	e002      	b.n	800b912 <usb_commands_get+0xb2>
    }
    // HELP or unrecognized
    else {
        out->cmd = CMD_HELP;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2205      	movs	r2, #5
 800b910:	701a      	strb	r2, [r3, #0]
    }

    // Consume the pending flag and buffer
    usb_cdc_clearCommand();
 800b912:	f7ff ff87 	bl	800b824 <usb_cdc_clearCommand>
    return out->cmd;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	781b      	ldrb	r3, [r3, #0]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bdb0      	pop	{r4, r5, r7, pc}
 800b922:	bf00      	nop
 800b924:	0800e360 	.word	0x0800e360
 800b928:	0800e368 	.word	0x0800e368
 800b92c:	0800e378 	.word	0x0800e378
 800b930:	0800e380 	.word	0x0800e380
 800b934:	0800e3a8 	.word	0x0800e3a8

0800b938 <usb_commands_print_help>:

void usb_commands_print_help(void) {
 800b938:	b580      	push	{r7, lr}
 800b93a:	af00      	add	r7, sp, #0
    debug_uart_print(
 800b93c:	4802      	ldr	r0, [pc, #8]	; (800b948 <usb_commands_print_help+0x10>)
 800b93e:	f7ff fedf 	bl	800b700 <debug_uart_print>
        "  gettime              - Read RTC\r\n"
        "  settime YY MM DD h m s - Set RTC\r\n"
        "  getlog               - Dump event log\r\n"
        "  help                 - Show this message\r\n"
    );
}
 800b942:	bf00      	nop
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	0800e3b0 	.word	0x0800e3b0

0800b94c <eeprom_read>:
    // nothing to do: CubeMX already calls HAL_I2C_Init(&hi2c1)
    return true;
}

bool eeprom_read(uint16_t mem_addr, uint8_t *data, uint16_t len)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af04      	add	r7, sp, #16
 800b952:	4603      	mov	r3, r0
 800b954:	6039      	str	r1, [r7, #0]
 800b956:	80fb      	strh	r3, [r7, #6]
 800b958:	4613      	mov	r3, r2
 800b95a:	80bb      	strh	r3, [r7, #4]
    return (HAL_I2C_Mem_Read(&hi2c1,
 800b95c:	88fa      	ldrh	r2, [r7, #6]
 800b95e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b962:	9302      	str	r3, [sp, #8]
 800b964:	88bb      	ldrh	r3, [r7, #4]
 800b966:	9301      	str	r3, [sp, #4]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	2310      	movs	r3, #16
 800b96e:	21a0      	movs	r1, #160	; 0xa0
 800b970:	4806      	ldr	r0, [pc, #24]	; (800b98c <eeprom_read+0x40>)
 800b972:	f7f7 f949 	bl	8002c08 <HAL_I2C_Mem_Read>
 800b976:	4603      	mov	r3, r0
                             EEPROM_I2C_ADDR,
                             mem_addr,
                             I2C_MEMADD_SIZE_16BIT,
                             data,
                             len,
                             500) == HAL_OK);
 800b978:	2b00      	cmp	r3, #0
 800b97a:	bf0c      	ite	eq
 800b97c:	2301      	moveq	r3, #1
 800b97e:	2300      	movne	r3, #0
 800b980:	b2db      	uxtb	r3, r3
}
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	2000022c 	.word	0x2000022c

0800b990 <eeprom_write>:

bool eeprom_write(uint16_t mem_addr, const uint8_t *data, uint16_t len)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af04      	add	r7, sp, #16
 800b996:	4603      	mov	r3, r0
 800b998:	6039      	str	r1, [r7, #0]
 800b99a:	80fb      	strh	r3, [r7, #6]
 800b99c:	4613      	mov	r3, r2
 800b99e:	80bb      	strh	r3, [r7, #4]
    if (HAL_I2C_Mem_Write(&hi2c1,
 800b9a0:	88fa      	ldrh	r2, [r7, #6]
 800b9a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b9a6:	9302      	str	r3, [sp, #8]
 800b9a8:	88bb      	ldrh	r3, [r7, #4]
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	2310      	movs	r3, #16
 800b9b2:	21a0      	movs	r1, #160	; 0xa0
 800b9b4:	4807      	ldr	r0, [pc, #28]	; (800b9d4 <eeprom_write+0x44>)
 800b9b6:	f7f7 f82d 	bl	8002a14 <HAL_I2C_Mem_Write>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <eeprom_write+0x34>
                          I2C_MEMADD_SIZE_16BIT,
                          (uint8_t*)data,
                          len,
                          500) != HAL_OK)
    {
        return false;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	e003      	b.n	800b9cc <eeprom_write+0x3c>
    }
    // wait for the internal write cycle (~5 ms max)
    HAL_Delay(6);
 800b9c4:	2006      	movs	r0, #6
 800b9c6:	f7f5 fbe3 	bl	8001190 <HAL_Delay>
    return true;
 800b9ca:	2301      	movs	r3, #1
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	2000022c 	.word	0x2000022c

0800b9d8 <port_rtc_init>:
#define DS1307_ADDR   (0x68 << 1)

extern I2C_HandleTypeDef hi2c1;

bool port_rtc_init(void)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
    // nothing extra to do: CubeMX already init’s hi2c1
    return true;
 800b9dc:	2301      	movs	r3, #1
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <port_rtc_read>:

bool port_rtc_read(uint8_t reg_addr, uint8_t *buf, uint8_t len)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af04      	add	r7, sp, #16
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	6039      	str	r1, [r7, #0]
 800b9f2:	71fb      	strb	r3, [r7, #7]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	71bb      	strb	r3, [r7, #6]
    return (HAL_I2C_Mem_Read(&hi2c1,
 800b9f8:	79fb      	ldrb	r3, [r7, #7]
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	79bb      	ldrb	r3, [r7, #6]
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	21c8      	movs	r1, #200	; 0xc8
 800ba02:	9102      	str	r1, [sp, #8]
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	9300      	str	r3, [sp, #0]
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	21d0      	movs	r1, #208	; 0xd0
 800ba0e:	4806      	ldr	r0, [pc, #24]	; (800ba28 <port_rtc_read+0x40>)
 800ba10:	f7f7 f8fa 	bl	8002c08 <HAL_I2C_Mem_Read>
 800ba14:	4603      	mov	r3, r0
                             DS1307_ADDR,
                             reg_addr,
                             I2C_MEMADD_SIZE_8BIT,
                             buf,
                             len,
                             200) == HAL_OK);
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bf0c      	ite	eq
 800ba1a:	2301      	moveq	r3, #1
 800ba1c:	2300      	movne	r3, #0
 800ba1e:	b2db      	uxtb	r3, r3
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	2000022c 	.word	0x2000022c

0800ba2c <port_rtc_write>:

bool port_rtc_write(uint8_t reg_addr, const uint8_t *buf, uint8_t len)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af04      	add	r7, sp, #16
 800ba32:	4603      	mov	r3, r0
 800ba34:	6039      	str	r1, [r7, #0]
 800ba36:	71fb      	strb	r3, [r7, #7]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Mem_Write(&hi2c1,
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	79bb      	ldrb	r3, [r7, #6]
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	21c8      	movs	r1, #200	; 0xc8
 800ba46:	9102      	str	r1, [sp, #8]
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	2301      	movs	r3, #1
 800ba50:	21d0      	movs	r1, #208	; 0xd0
 800ba52:	4808      	ldr	r0, [pc, #32]	; (800ba74 <port_rtc_write+0x48>)
 800ba54:	f7f6 ffde 	bl	8002a14 <HAL_I2C_Mem_Write>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <port_rtc_write+0x36>
                          reg_addr,
                          I2C_MEMADD_SIZE_8BIT,
                          (uint8_t*)buf,
                          len,
                          200) != HAL_OK) {
        return false;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e003      	b.n	800ba6a <port_rtc_write+0x3e>
    }
    // DS1307 has no internal write‑cycle delay, but a small delay is safe
    HAL_Delay(1);
 800ba62:	2001      	movs	r0, #1
 800ba64:	f7f5 fb94 	bl	8001190 <HAL_Delay>
    return true;
 800ba68:	2301      	movs	r3, #1
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	2000022c 	.word	0x2000022c

0800ba78 <project_main>:
// === Public variable definitions ================================================================================= //
// === Private variable definitions ================================================================================ //
// === Private function implementation ============================================================================= //
// === Public function implementation ============================================================================== //

void project_main() { app_entry_point(); }
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	f7ff fb50 	bl	800b120 <app_entry_point>
 800ba80:	bf00      	nop
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4912      	ldr	r1, [pc, #72]	; (800bad4 <MX_USB_DEVICE_Init+0x50>)
 800ba8c:	4812      	ldr	r0, [pc, #72]	; (800bad8 <MX_USB_DEVICE_Init+0x54>)
 800ba8e:	f7fd fdef 	bl	8009670 <USBD_Init>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba98:	f7f5 f818 	bl	8000acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba9c:	490f      	ldr	r1, [pc, #60]	; (800badc <MX_USB_DEVICE_Init+0x58>)
 800ba9e:	480e      	ldr	r0, [pc, #56]	; (800bad8 <MX_USB_DEVICE_Init+0x54>)
 800baa0:	f7fd fe16 	bl	80096d0 <USBD_RegisterClass>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800baaa:	f7f5 f80f 	bl	8000acc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800baae:	490c      	ldr	r1, [pc, #48]	; (800bae0 <MX_USB_DEVICE_Init+0x5c>)
 800bab0:	4809      	ldr	r0, [pc, #36]	; (800bad8 <MX_USB_DEVICE_Init+0x54>)
 800bab2:	f7fd fd4d 	bl	8009550 <USBD_CDC_RegisterInterface>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800babc:	f7f5 f806 	bl	8000acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bac0:	4805      	ldr	r0, [pc, #20]	; (800bad8 <MX_USB_DEVICE_Init+0x54>)
 800bac2:	f7fd fe3b 	bl	800973c <USBD_Start>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bacc:	f7f4 fffe 	bl	8000acc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bad0:	bf00      	nop
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	200000ac 	.word	0x200000ac
 800bad8:	20000618 	.word	0x20000618
 800badc:	20000018 	.word	0x20000018
 800bae0:	20000098 	.word	0x20000098

0800bae4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bae8:	2200      	movs	r2, #0
 800baea:	4905      	ldr	r1, [pc, #20]	; (800bb00 <CDC_Init_FS+0x1c>)
 800baec:	4805      	ldr	r0, [pc, #20]	; (800bb04 <CDC_Init_FS+0x20>)
 800baee:	f7fd fd49 	bl	8009584 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800baf2:	4905      	ldr	r1, [pc, #20]	; (800bb08 <CDC_Init_FS+0x24>)
 800baf4:	4803      	ldr	r0, [pc, #12]	; (800bb04 <CDC_Init_FS+0x20>)
 800baf6:	f7fd fd67 	bl	80095c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bafa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	200010f4 	.word	0x200010f4
 800bb04:	20000618 	.word	0x20000618
 800bb08:	200008f4 	.word	0x200008f4

0800bb0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	6039      	str	r1, [r7, #0]
 800bb26:	71fb      	strb	r3, [r7, #7]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb2c:	79fb      	ldrb	r3, [r7, #7]
 800bb2e:	2b23      	cmp	r3, #35	; 0x23
 800bb30:	d84a      	bhi.n	800bbc8 <CDC_Control_FS+0xac>
 800bb32:	a201      	add	r2, pc, #4	; (adr r2, 800bb38 <CDC_Control_FS+0x1c>)
 800bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb38:	0800bbc9 	.word	0x0800bbc9
 800bb3c:	0800bbc9 	.word	0x0800bbc9
 800bb40:	0800bbc9 	.word	0x0800bbc9
 800bb44:	0800bbc9 	.word	0x0800bbc9
 800bb48:	0800bbc9 	.word	0x0800bbc9
 800bb4c:	0800bbc9 	.word	0x0800bbc9
 800bb50:	0800bbc9 	.word	0x0800bbc9
 800bb54:	0800bbc9 	.word	0x0800bbc9
 800bb58:	0800bbc9 	.word	0x0800bbc9
 800bb5c:	0800bbc9 	.word	0x0800bbc9
 800bb60:	0800bbc9 	.word	0x0800bbc9
 800bb64:	0800bbc9 	.word	0x0800bbc9
 800bb68:	0800bbc9 	.word	0x0800bbc9
 800bb6c:	0800bbc9 	.word	0x0800bbc9
 800bb70:	0800bbc9 	.word	0x0800bbc9
 800bb74:	0800bbc9 	.word	0x0800bbc9
 800bb78:	0800bbc9 	.word	0x0800bbc9
 800bb7c:	0800bbc9 	.word	0x0800bbc9
 800bb80:	0800bbc9 	.word	0x0800bbc9
 800bb84:	0800bbc9 	.word	0x0800bbc9
 800bb88:	0800bbc9 	.word	0x0800bbc9
 800bb8c:	0800bbc9 	.word	0x0800bbc9
 800bb90:	0800bbc9 	.word	0x0800bbc9
 800bb94:	0800bbc9 	.word	0x0800bbc9
 800bb98:	0800bbc9 	.word	0x0800bbc9
 800bb9c:	0800bbc9 	.word	0x0800bbc9
 800bba0:	0800bbc9 	.word	0x0800bbc9
 800bba4:	0800bbc9 	.word	0x0800bbc9
 800bba8:	0800bbc9 	.word	0x0800bbc9
 800bbac:	0800bbc9 	.word	0x0800bbc9
 800bbb0:	0800bbc9 	.word	0x0800bbc9
 800bbb4:	0800bbc9 	.word	0x0800bbc9
 800bbb8:	0800bbc9 	.word	0x0800bbc9
 800bbbc:	0800bbc9 	.word	0x0800bbc9
 800bbc0:	0800bbc9 	.word	0x0800bbc9
 800bbc4:	0800bbc9 	.word	0x0800bbc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbc8:	bf00      	nop
  }

  return (USBD_OK);
 800bbca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > 0) {
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d005      	beq.n	800bbf6 <CDC_Receive_FS+0x1e>
	    usb_cdc_receiveCallback(Buf, *Len);
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff fdb7 	bl	800b764 <usb_cdc_receiveCallback>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbf6:	6879      	ldr	r1, [r7, #4]
 800bbf8:	4805      	ldr	r0, [pc, #20]	; (800bc10 <CDC_Receive_FS+0x38>)
 800bbfa:	f7fd fce5 	bl	80095c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bbfe:	4804      	ldr	r0, [pc, #16]	; (800bc10 <CDC_Receive_FS+0x38>)
 800bc00:	f7fd fd00 	bl	8009604 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	20000618 	.word	0x20000618

0800bc14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	371c      	adds	r7, #28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
	...

0800bc38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	6039      	str	r1, [r7, #0]
 800bc42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2212      	movs	r2, #18
 800bc48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc4a:	4b03      	ldr	r3, [pc, #12]	; (800bc58 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	200000cc 	.word	0x200000cc

0800bc5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	6039      	str	r1, [r7, #0]
 800bc66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc6e:	4b03      	ldr	r3, [pc, #12]	; (800bc7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	200000ec 	.word	0x200000ec

0800bc80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4603      	mov	r3, r0
 800bc88:	6039      	str	r1, [r7, #0]
 800bc8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc8c:	79fb      	ldrb	r3, [r7, #7]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d105      	bne.n	800bc9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	4907      	ldr	r1, [pc, #28]	; (800bcb4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc96:	4808      	ldr	r0, [pc, #32]	; (800bcb8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc98:	f7fe ff2c 	bl	800aaf4 <USBD_GetString>
 800bc9c:	e004      	b.n	800bca8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	4904      	ldr	r1, [pc, #16]	; (800bcb4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bca2:	4805      	ldr	r0, [pc, #20]	; (800bcb8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bca4:	f7fe ff26 	bl	800aaf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bca8:	4b02      	ldr	r3, [pc, #8]	; (800bcb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	200018f4 	.word	0x200018f4
 800bcb8:	0800e4ac 	.word	0x0800e4ac

0800bcbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	6039      	str	r1, [r7, #0]
 800bcc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	4904      	ldr	r1, [pc, #16]	; (800bcdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bccc:	4804      	ldr	r0, [pc, #16]	; (800bce0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bcce:	f7fe ff11 	bl	800aaf4 <USBD_GetString>
  return USBD_StrDesc;
 800bcd2:	4b02      	ldr	r3, [pc, #8]	; (800bcdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	200018f4 	.word	0x200018f4
 800bce0:	0800e4c4 	.word	0x0800e4c4

0800bce4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	221a      	movs	r2, #26
 800bcf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bcf6:	f000 f855 	bl	800bda4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bcfa:	4b02      	ldr	r3, [pc, #8]	; (800bd04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	200000f0 	.word	0x200000f0

0800bd08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	6039      	str	r1, [r7, #0]
 800bd12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd14:	79fb      	ldrb	r3, [r7, #7]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d105      	bne.n	800bd26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	4907      	ldr	r1, [pc, #28]	; (800bd3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd1e:	4808      	ldr	r0, [pc, #32]	; (800bd40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd20:	f7fe fee8 	bl	800aaf4 <USBD_GetString>
 800bd24:	e004      	b.n	800bd30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	4904      	ldr	r1, [pc, #16]	; (800bd3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd2a:	4805      	ldr	r0, [pc, #20]	; (800bd40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd2c:	f7fe fee2 	bl	800aaf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd30:	4b02      	ldr	r3, [pc, #8]	; (800bd3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	200018f4 	.word	0x200018f4
 800bd40:	0800e4d8 	.word	0x0800e4d8

0800bd44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	6039      	str	r1, [r7, #0]
 800bd4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd50:	79fb      	ldrb	r3, [r7, #7]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d105      	bne.n	800bd62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	4907      	ldr	r1, [pc, #28]	; (800bd78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd5a:	4808      	ldr	r0, [pc, #32]	; (800bd7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd5c:	f7fe feca 	bl	800aaf4 <USBD_GetString>
 800bd60:	e004      	b.n	800bd6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	4904      	ldr	r1, [pc, #16]	; (800bd78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd66:	4805      	ldr	r0, [pc, #20]	; (800bd7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd68:	f7fe fec4 	bl	800aaf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd6c:	4b02      	ldr	r3, [pc, #8]	; (800bd78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	200018f4 	.word	0x200018f4
 800bd7c:	0800e4e4 	.word	0x0800e4e4

0800bd80 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4603      	mov	r3, r0
 800bd88:	6039      	str	r1, [r7, #0]
 800bd8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	220c      	movs	r2, #12
 800bd90:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bd92:	4b03      	ldr	r3, [pc, #12]	; (800bda0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	200000e0 	.word	0x200000e0

0800bda4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdaa:	4b0f      	ldr	r3, [pc, #60]	; (800bde8 <Get_SerialNum+0x44>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdb0:	4b0e      	ldr	r3, [pc, #56]	; (800bdec <Get_SerialNum+0x48>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdb6:	4b0e      	ldr	r3, [pc, #56]	; (800bdf0 <Get_SerialNum+0x4c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d009      	beq.n	800bdde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdca:	2208      	movs	r2, #8
 800bdcc:	4909      	ldr	r1, [pc, #36]	; (800bdf4 <Get_SerialNum+0x50>)
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 f814 	bl	800bdfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdd4:	2204      	movs	r2, #4
 800bdd6:	4908      	ldr	r1, [pc, #32]	; (800bdf8 <Get_SerialNum+0x54>)
 800bdd8:	68b8      	ldr	r0, [r7, #8]
 800bdda:	f000 f80f 	bl	800bdfc <IntToUnicode>
  }
}
 800bdde:	bf00      	nop
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	1fff7a10 	.word	0x1fff7a10
 800bdec:	1fff7a14 	.word	0x1fff7a14
 800bdf0:	1fff7a18 	.word	0x1fff7a18
 800bdf4:	200000f2 	.word	0x200000f2
 800bdf8:	20000102 	.word	0x20000102

0800bdfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	4613      	mov	r3, r2
 800be08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be0e:	2300      	movs	r3, #0
 800be10:	75fb      	strb	r3, [r7, #23]
 800be12:	e027      	b.n	800be64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	0f1b      	lsrs	r3, r3, #28
 800be18:	2b09      	cmp	r3, #9
 800be1a:	d80b      	bhi.n	800be34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	0f1b      	lsrs	r3, r3, #28
 800be20:	b2da      	uxtb	r2, r3
 800be22:	7dfb      	ldrb	r3, [r7, #23]
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	4619      	mov	r1, r3
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	440b      	add	r3, r1
 800be2c:	3230      	adds	r2, #48	; 0x30
 800be2e:	b2d2      	uxtb	r2, r2
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	e00a      	b.n	800be4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	0f1b      	lsrs	r3, r3, #28
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	005b      	lsls	r3, r3, #1
 800be3e:	4619      	mov	r1, r3
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	440b      	add	r3, r1
 800be44:	3237      	adds	r2, #55	; 0x37
 800be46:	b2d2      	uxtb	r2, r2
 800be48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	011b      	lsls	r3, r3, #4
 800be4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be50:	7dfb      	ldrb	r3, [r7, #23]
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	3301      	adds	r3, #1
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	4413      	add	r3, r2
 800be5a:	2200      	movs	r2, #0
 800be5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be5e:	7dfb      	ldrb	r3, [r7, #23]
 800be60:	3301      	adds	r3, #1
 800be62:	75fb      	strb	r3, [r7, #23]
 800be64:	7dfa      	ldrb	r2, [r7, #23]
 800be66:	79fb      	ldrb	r3, [r7, #7]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d3d3      	bcc.n	800be14 <IntToUnicode+0x18>
  }
}
 800be6c:	bf00      	nop
 800be6e:	bf00      	nop
 800be70:	371c      	adds	r7, #28
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
	...

0800be7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b0a0      	sub	sp, #128	; 0x80
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	605a      	str	r2, [r3, #4]
 800be8e:	609a      	str	r2, [r3, #8]
 800be90:	60da      	str	r2, [r3, #12]
 800be92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800be94:	f107 0310 	add.w	r3, r7, #16
 800be98:	225c      	movs	r2, #92	; 0x5c
 800be9a:	2100      	movs	r1, #0
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 fd02 	bl	800c8a6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800beaa:	d149      	bne.n	800bf40 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800beac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800beb0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800beb2:	2300      	movs	r3, #0
 800beb4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800beb6:	f107 0310 	add.w	r3, r7, #16
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f9 f842 	bl	8004f44 <HAL_RCCEx_PeriphCLKConfig>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800bec6:	f7f4 fe01 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800beca:	2300      	movs	r3, #0
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	4b1e      	ldr	r3, [pc, #120]	; (800bf48 <HAL_PCD_MspInit+0xcc>)
 800bed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed2:	4a1d      	ldr	r2, [pc, #116]	; (800bf48 <HAL_PCD_MspInit+0xcc>)
 800bed4:	f043 0301 	orr.w	r3, r3, #1
 800bed8:	6313      	str	r3, [r2, #48]	; 0x30
 800beda:	4b1b      	ldr	r3, [pc, #108]	; (800bf48 <HAL_PCD_MspInit+0xcc>)
 800bedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bee6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800beea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beec:	2302      	movs	r3, #2
 800beee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bef0:	2300      	movs	r3, #0
 800bef2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bef4:	2303      	movs	r3, #3
 800bef6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bef8:	230a      	movs	r3, #10
 800befa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800befc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800bf00:	4619      	mov	r1, r3
 800bf02:	4812      	ldr	r0, [pc, #72]	; (800bf4c <HAL_PCD_MspInit+0xd0>)
 800bf04:	f7f6 fa94 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bf08:	4b0f      	ldr	r3, [pc, #60]	; (800bf48 <HAL_PCD_MspInit+0xcc>)
 800bf0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf0c:	4a0e      	ldr	r2, [pc, #56]	; (800bf48 <HAL_PCD_MspInit+0xcc>)
 800bf0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf12:	6353      	str	r3, [r2, #52]	; 0x34
 800bf14:	2300      	movs	r3, #0
 800bf16:	60bb      	str	r3, [r7, #8]
 800bf18:	4b0b      	ldr	r3, [pc, #44]	; (800bf48 <HAL_PCD_MspInit+0xcc>)
 800bf1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf1c:	4a0a      	ldr	r2, [pc, #40]	; (800bf48 <HAL_PCD_MspInit+0xcc>)
 800bf1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf22:	6453      	str	r3, [r2, #68]	; 0x44
 800bf24:	4b08      	ldr	r3, [pc, #32]	; (800bf48 <HAL_PCD_MspInit+0xcc>)
 800bf26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf2c:	60bb      	str	r3, [r7, #8]
 800bf2e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf30:	2200      	movs	r2, #0
 800bf32:	2100      	movs	r1, #0
 800bf34:	2043      	movs	r0, #67	; 0x43
 800bf36:	f7f5 fe42 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf3a:	2043      	movs	r0, #67	; 0x43
 800bf3c:	f7f5 fe5b 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf40:	bf00      	nop
 800bf42:	3780      	adds	r7, #128	; 0x80
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	40023800 	.word	0x40023800
 800bf4c:	40020000 	.word	0x40020000

0800bf50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800bf64:	4619      	mov	r1, r3
 800bf66:	4610      	mov	r0, r2
 800bf68:	f7fd fc35 	bl	80097d6 <USBD_LL_SetupStage>
}
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800bf86:	78fa      	ldrb	r2, [r7, #3]
 800bf88:	6879      	ldr	r1, [r7, #4]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	00db      	lsls	r3, r3, #3
 800bf8e:	4413      	add	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	440b      	add	r3, r1
 800bf94:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	78fb      	ldrb	r3, [r7, #3]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f7fd fc6f 	bl	8009880 <USBD_LL_DataOutStage>
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b082      	sub	sp, #8
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800bfbc:	78fa      	ldrb	r2, [r7, #3]
 800bfbe:	6879      	ldr	r1, [r7, #4]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	440b      	add	r3, r1
 800bfca:	3320      	adds	r3, #32
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	78fb      	ldrb	r3, [r7, #3]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	f7fd fd08 	bl	80099e6 <USBD_LL_DataInStage>
}
 800bfd6:	bf00      	nop
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b082      	sub	sp, #8
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fd fe42 	bl	8009c76 <USBD_LL_SOF>
}
 800bff2:	bf00      	nop
 800bff4:	3708      	adds	r7, #8
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b084      	sub	sp, #16
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c002:	2301      	movs	r3, #1
 800c004:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	79db      	ldrb	r3, [r3, #7]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d102      	bne.n	800c014 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c00e:	2300      	movs	r3, #0
 800c010:	73fb      	strb	r3, [r7, #15]
 800c012:	e008      	b.n	800c026 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	79db      	ldrb	r3, [r3, #7]
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d102      	bne.n	800c022 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c01c:	2301      	movs	r3, #1
 800c01e:	73fb      	strb	r3, [r7, #15]
 800c020:	e001      	b.n	800c026 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c022:	f7f4 fd53 	bl	8000acc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c02c:	7bfa      	ldrb	r2, [r7, #15]
 800c02e:	4611      	mov	r1, r2
 800c030:	4618      	mov	r0, r3
 800c032:	f7fd fddc 	bl	8009bee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fd fd84 	bl	8009b4a <USBD_LL_Reset>
}
 800c042:	bf00      	nop
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
	...

0800c04c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fd fdd7 	bl	8009c0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	6812      	ldr	r2, [r2, #0]
 800c06e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c072:	f043 0301 	orr.w	r3, r3, #1
 800c076:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	7adb      	ldrb	r3, [r3, #11]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d005      	beq.n	800c08c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c080:	4b04      	ldr	r3, [pc, #16]	; (800c094 <HAL_PCD_SuspendCallback+0x48>)
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	4a03      	ldr	r2, [pc, #12]	; (800c094 <HAL_PCD_SuspendCallback+0x48>)
 800c086:	f043 0306 	orr.w	r3, r3, #6
 800c08a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c08c:	bf00      	nop
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	e000ed00 	.word	0xe000ed00

0800c098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fd fdcd 	bl	8009c46 <USBD_LL_Resume>
}
 800c0ac:	bf00      	nop
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	460b      	mov	r3, r1
 800c0be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c0c6:	78fa      	ldrb	r2, [r7, #3]
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fd fe25 	bl	8009d1a <USBD_LL_IsoOUTIncomplete>
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c0ea:	78fa      	ldrb	r2, [r7, #3]
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fd fde1 	bl	8009cb6 <USBD_LL_IsoINIncomplete>
}
 800c0f4:	bf00      	nop
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fd fe37 	bl	8009d7e <USBD_LL_DevConnected>
}
 800c110:	bf00      	nop
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c126:	4618      	mov	r0, r3
 800c128:	f7fd fe34 	bl	8009d94 <USBD_LL_DevDisconnected>
}
 800c12c:	bf00      	nop
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d13c      	bne.n	800c1be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c144:	4a20      	ldr	r2, [pc, #128]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a1e      	ldr	r2, [pc, #120]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c150:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c154:	4b1c      	ldr	r3, [pc, #112]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c156:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c15a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c15c:	4b1a      	ldr	r3, [pc, #104]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c15e:	2206      	movs	r2, #6
 800c160:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c162:	4b19      	ldr	r3, [pc, #100]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c164:	2202      	movs	r2, #2
 800c166:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c168:	4b17      	ldr	r3, [pc, #92]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c16e:	4b16      	ldr	r3, [pc, #88]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c170:	2202      	movs	r2, #2
 800c172:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c174:	4b14      	ldr	r3, [pc, #80]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c176:	2200      	movs	r2, #0
 800c178:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c17a:	4b13      	ldr	r3, [pc, #76]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c180:	4b11      	ldr	r3, [pc, #68]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c182:	2200      	movs	r2, #0
 800c184:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c186:	4b10      	ldr	r3, [pc, #64]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c188:	2200      	movs	r2, #0
 800c18a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c18c:	4b0e      	ldr	r3, [pc, #56]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c18e:	2200      	movs	r2, #0
 800c190:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c192:	480d      	ldr	r0, [pc, #52]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c194:	f7f7 fb1e 	bl	80037d4 <HAL_PCD_Init>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d001      	beq.n	800c1a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c19e:	f7f4 fc95 	bl	8000acc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c1a2:	2180      	movs	r1, #128	; 0x80
 800c1a4:	4808      	ldr	r0, [pc, #32]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c1a6:	f7f8 fd7e 	bl	8004ca6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c1aa:	2240      	movs	r2, #64	; 0x40
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	4806      	ldr	r0, [pc, #24]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c1b0:	f7f8 fd32 	bl	8004c18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c1b4:	2280      	movs	r2, #128	; 0x80
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	4803      	ldr	r0, [pc, #12]	; (800c1c8 <USBD_LL_Init+0x94>)
 800c1ba:	f7f8 fd2d 	bl	8004c18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	20001af4 	.word	0x20001af4

0800c1cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f7 fc0c 	bl	8003a00 <HAL_PCD_Start>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f990 	bl	800c514 <USBD_Get_USB_Status>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b084      	sub	sp, #16
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	4608      	mov	r0, r1
 800c20c:	4611      	mov	r1, r2
 800c20e:	461a      	mov	r2, r3
 800c210:	4603      	mov	r3, r0
 800c212:	70fb      	strb	r3, [r7, #3]
 800c214:	460b      	mov	r3, r1
 800c216:	70bb      	strb	r3, [r7, #2]
 800c218:	4613      	mov	r3, r2
 800c21a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c22a:	78bb      	ldrb	r3, [r7, #2]
 800c22c:	883a      	ldrh	r2, [r7, #0]
 800c22e:	78f9      	ldrb	r1, [r7, #3]
 800c230:	f7f8 f90d 	bl	800444e <HAL_PCD_EP_Open>
 800c234:	4603      	mov	r3, r0
 800c236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f000 f96a 	bl	800c514 <USBD_Get_USB_Status>
 800c240:	4603      	mov	r3, r0
 800c242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c244:	7bbb      	ldrb	r3, [r7, #14]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b084      	sub	sp, #16
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	460b      	mov	r3, r1
 800c258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c268:	78fa      	ldrb	r2, [r7, #3]
 800c26a:	4611      	mov	r1, r2
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7f8 f958 	bl	8004522 <HAL_PCD_EP_Close>
 800c272:	4603      	mov	r3, r0
 800c274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 f94b 	bl	800c514 <USBD_Get_USB_Status>
 800c27e:	4603      	mov	r3, r0
 800c280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c282:	7bbb      	ldrb	r3, [r7, #14]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	460b      	mov	r3, r1
 800c296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2a6:	78fa      	ldrb	r2, [r7, #3]
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7f8 fa10 	bl	80046d0 <HAL_PCD_EP_SetStall>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f000 f92c 	bl	800c514 <USBD_Get_USB_Status>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2e4:	78fa      	ldrb	r2, [r7, #3]
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7f8 fa54 	bl	8004796 <HAL_PCD_EP_ClrStall>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f000 f90d 	bl	800c514 <USBD_Get_USB_Status>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}

0800c308 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	460b      	mov	r3, r1
 800c312:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c31a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c31c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c320:	2b00      	cmp	r3, #0
 800c322:	da0b      	bge.n	800c33c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c324:	78fb      	ldrb	r3, [r7, #3]
 800c326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c32a:	68f9      	ldr	r1, [r7, #12]
 800c32c:	4613      	mov	r3, r2
 800c32e:	00db      	lsls	r3, r3, #3
 800c330:	4413      	add	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	440b      	add	r3, r1
 800c336:	3316      	adds	r3, #22
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	e00b      	b.n	800c354 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c33c:	78fb      	ldrb	r3, [r7, #3]
 800c33e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c342:	68f9      	ldr	r1, [r7, #12]
 800c344:	4613      	mov	r3, r2
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	4413      	add	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	440b      	add	r3, r1
 800c34e:	f203 2356 	addw	r3, r3, #598	; 0x256
 800c352:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c354:	4618      	mov	r0, r3
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c370:	2300      	movs	r3, #0
 800c372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c37a:	78fa      	ldrb	r2, [r7, #3]
 800c37c:	4611      	mov	r1, r2
 800c37e:	4618      	mov	r0, r3
 800c380:	f7f8 f841 	bl	8004406 <HAL_PCD_SetAddress>
 800c384:	4603      	mov	r3, r0
 800c386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c388:	7bfb      	ldrb	r3, [r7, #15]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f000 f8c2 	bl	800c514 <USBD_Get_USB_Status>
 800c390:	4603      	mov	r3, r0
 800c392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c394:	7bbb      	ldrb	r3, [r7, #14]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b086      	sub	sp, #24
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	60f8      	str	r0, [r7, #12]
 800c3a6:	607a      	str	r2, [r7, #4]
 800c3a8:	603b      	str	r3, [r7, #0]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3bc:	7af9      	ldrb	r1, [r7, #11]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	f7f8 f94b 	bl	800465c <HAL_PCD_EP_Transmit>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 f8a1 	bl	800c514 <USBD_Get_USB_Status>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	607a      	str	r2, [r7, #4]
 800c3ea:	603b      	str	r3, [r7, #0]
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3fe:	7af9      	ldrb	r1, [r7, #11]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	f7f8 f8d7 	bl	80045b6 <HAL_PCD_EP_Receive>
 800c408:	4603      	mov	r3, r0
 800c40a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	4618      	mov	r0, r3
 800c410:	f000 f880 	bl	800c514 <USBD_Get_USB_Status>
 800c414:	4603      	mov	r3, r0
 800c416:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c418:	7dbb      	ldrb	r3, [r7, #22]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3718      	adds	r7, #24
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b082      	sub	sp, #8
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	460b      	mov	r3, r1
 800c42c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c434:	78fa      	ldrb	r2, [r7, #3]
 800c436:	4611      	mov	r1, r2
 800c438:	4618      	mov	r0, r3
 800c43a:	f7f8 f8f7 	bl	800462c <HAL_PCD_EP_GetRxCount>
 800c43e:	4603      	mov	r3, r0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c454:	78fb      	ldrb	r3, [r7, #3]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d002      	beq.n	800c460 <HAL_PCDEx_LPM_Callback+0x18>
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d01f      	beq.n	800c49e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c45e:	e03b      	b.n	800c4d8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	7adb      	ldrb	r3, [r3, #11]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d007      	beq.n	800c478 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c468:	f7f4 f8d2 	bl	8000610 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c46c:	4b1c      	ldr	r3, [pc, #112]	; (800c4e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	4a1b      	ldr	r2, [pc, #108]	; (800c4e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c472:	f023 0306 	bic.w	r3, r3, #6
 800c476:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	6812      	ldr	r2, [r2, #0]
 800c486:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c48a:	f023 0301 	bic.w	r3, r3, #1
 800c48e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c496:	4618      	mov	r0, r3
 800c498:	f7fd fbd5 	bl	8009c46 <USBD_LL_Resume>
    break;
 800c49c:	e01c      	b.n	800c4d8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	6812      	ldr	r2, [r2, #0]
 800c4ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c4b0:	f043 0301 	orr.w	r3, r3, #1
 800c4b4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fd fba6 	bl	8009c0e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	7adb      	ldrb	r3, [r3, #11]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d005      	beq.n	800c4d6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4ca:	4b05      	ldr	r3, [pc, #20]	; (800c4e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	4a04      	ldr	r2, [pc, #16]	; (800c4e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c4d0:	f043 0306 	orr.w	r3, r3, #6
 800c4d4:	6113      	str	r3, [r2, #16]
    break;
 800c4d6:	bf00      	nop
}
 800c4d8:	bf00      	nop
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	e000ed00 	.word	0xe000ed00

0800c4e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4ec:	4b03      	ldr	r3, [pc, #12]	; (800c4fc <USBD_static_malloc+0x18>)
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	20001fd8 	.word	0x20001fd8

0800c500 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]

}
 800c508:	bf00      	nop
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c522:	79fb      	ldrb	r3, [r7, #7]
 800c524:	2b03      	cmp	r3, #3
 800c526:	d817      	bhi.n	800c558 <USBD_Get_USB_Status+0x44>
 800c528:	a201      	add	r2, pc, #4	; (adr r2, 800c530 <USBD_Get_USB_Status+0x1c>)
 800c52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52e:	bf00      	nop
 800c530:	0800c541 	.word	0x0800c541
 800c534:	0800c547 	.word	0x0800c547
 800c538:	0800c54d 	.word	0x0800c54d
 800c53c:	0800c553 	.word	0x0800c553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	73fb      	strb	r3, [r7, #15]
    break;
 800c544:	e00b      	b.n	800c55e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c546:	2303      	movs	r3, #3
 800c548:	73fb      	strb	r3, [r7, #15]
    break;
 800c54a:	e008      	b.n	800c55e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c54c:	2301      	movs	r3, #1
 800c54e:	73fb      	strb	r3, [r7, #15]
    break;
 800c550:	e005      	b.n	800c55e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c552:	2303      	movs	r3, #3
 800c554:	73fb      	strb	r3, [r7, #15]
    break;
 800c556:	e002      	b.n	800c55e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c558:	2303      	movs	r3, #3
 800c55a:	73fb      	strb	r3, [r7, #15]
    break;
 800c55c:	bf00      	nop
  }
  return usb_status;
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3714      	adds	r7, #20
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <__assert_func>:
 800c56c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c56e:	4614      	mov	r4, r2
 800c570:	461a      	mov	r2, r3
 800c572:	4b09      	ldr	r3, [pc, #36]	; (800c598 <__assert_func+0x2c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4605      	mov	r5, r0
 800c578:	68d8      	ldr	r0, [r3, #12]
 800c57a:	b14c      	cbz	r4, 800c590 <__assert_func+0x24>
 800c57c:	4b07      	ldr	r3, [pc, #28]	; (800c59c <__assert_func+0x30>)
 800c57e:	9100      	str	r1, [sp, #0]
 800c580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c584:	4906      	ldr	r1, [pc, #24]	; (800c5a0 <__assert_func+0x34>)
 800c586:	462b      	mov	r3, r5
 800c588:	f000 f8b2 	bl	800c6f0 <fiprintf>
 800c58c:	f000 fa15 	bl	800c9ba <abort>
 800c590:	4b04      	ldr	r3, [pc, #16]	; (800c5a4 <__assert_func+0x38>)
 800c592:	461c      	mov	r4, r3
 800c594:	e7f3      	b.n	800c57e <__assert_func+0x12>
 800c596:	bf00      	nop
 800c598:	20000164 	.word	0x20000164
 800c59c:	0800e543 	.word	0x0800e543
 800c5a0:	0800e550 	.word	0x0800e550
 800c5a4:	0800e57e 	.word	0x0800e57e

0800c5a8 <std>:
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	b510      	push	{r4, lr}
 800c5ac:	4604      	mov	r4, r0
 800c5ae:	e9c0 3300 	strd	r3, r3, [r0]
 800c5b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5b6:	6083      	str	r3, [r0, #8]
 800c5b8:	8181      	strh	r1, [r0, #12]
 800c5ba:	6643      	str	r3, [r0, #100]	; 0x64
 800c5bc:	81c2      	strh	r2, [r0, #14]
 800c5be:	6183      	str	r3, [r0, #24]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	2208      	movs	r2, #8
 800c5c4:	305c      	adds	r0, #92	; 0x5c
 800c5c6:	f000 f96e 	bl	800c8a6 <memset>
 800c5ca:	4b0d      	ldr	r3, [pc, #52]	; (800c600 <std+0x58>)
 800c5cc:	6263      	str	r3, [r4, #36]	; 0x24
 800c5ce:	4b0d      	ldr	r3, [pc, #52]	; (800c604 <std+0x5c>)
 800c5d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5d2:	4b0d      	ldr	r3, [pc, #52]	; (800c608 <std+0x60>)
 800c5d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5d6:	4b0d      	ldr	r3, [pc, #52]	; (800c60c <std+0x64>)
 800c5d8:	6323      	str	r3, [r4, #48]	; 0x30
 800c5da:	4b0d      	ldr	r3, [pc, #52]	; (800c610 <std+0x68>)
 800c5dc:	6224      	str	r4, [r4, #32]
 800c5de:	429c      	cmp	r4, r3
 800c5e0:	d006      	beq.n	800c5f0 <std+0x48>
 800c5e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c5e6:	4294      	cmp	r4, r2
 800c5e8:	d002      	beq.n	800c5f0 <std+0x48>
 800c5ea:	33d0      	adds	r3, #208	; 0xd0
 800c5ec:	429c      	cmp	r4, r3
 800c5ee:	d105      	bne.n	800c5fc <std+0x54>
 800c5f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5f8:	f000 b9ce 	b.w	800c998 <__retarget_lock_init_recursive>
 800c5fc:	bd10      	pop	{r4, pc}
 800c5fe:	bf00      	nop
 800c600:	0800c7e9 	.word	0x0800c7e9
 800c604:	0800c80f 	.word	0x0800c80f
 800c608:	0800c847 	.word	0x0800c847
 800c60c:	0800c86b 	.word	0x0800c86b
 800c610:	200021f8 	.word	0x200021f8

0800c614 <stdio_exit_handler>:
 800c614:	4a02      	ldr	r2, [pc, #8]	; (800c620 <stdio_exit_handler+0xc>)
 800c616:	4903      	ldr	r1, [pc, #12]	; (800c624 <stdio_exit_handler+0x10>)
 800c618:	4803      	ldr	r0, [pc, #12]	; (800c628 <stdio_exit_handler+0x14>)
 800c61a:	f000 b87b 	b.w	800c714 <_fwalk_sglue>
 800c61e:	bf00      	nop
 800c620:	2000010c 	.word	0x2000010c
 800c624:	0800db5d 	.word	0x0800db5d
 800c628:	20000118 	.word	0x20000118

0800c62c <cleanup_stdio>:
 800c62c:	6841      	ldr	r1, [r0, #4]
 800c62e:	4b0c      	ldr	r3, [pc, #48]	; (800c660 <cleanup_stdio+0x34>)
 800c630:	4299      	cmp	r1, r3
 800c632:	b510      	push	{r4, lr}
 800c634:	4604      	mov	r4, r0
 800c636:	d001      	beq.n	800c63c <cleanup_stdio+0x10>
 800c638:	f001 fa90 	bl	800db5c <_fflush_r>
 800c63c:	68a1      	ldr	r1, [r4, #8]
 800c63e:	4b09      	ldr	r3, [pc, #36]	; (800c664 <cleanup_stdio+0x38>)
 800c640:	4299      	cmp	r1, r3
 800c642:	d002      	beq.n	800c64a <cleanup_stdio+0x1e>
 800c644:	4620      	mov	r0, r4
 800c646:	f001 fa89 	bl	800db5c <_fflush_r>
 800c64a:	68e1      	ldr	r1, [r4, #12]
 800c64c:	4b06      	ldr	r3, [pc, #24]	; (800c668 <cleanup_stdio+0x3c>)
 800c64e:	4299      	cmp	r1, r3
 800c650:	d004      	beq.n	800c65c <cleanup_stdio+0x30>
 800c652:	4620      	mov	r0, r4
 800c654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c658:	f001 ba80 	b.w	800db5c <_fflush_r>
 800c65c:	bd10      	pop	{r4, pc}
 800c65e:	bf00      	nop
 800c660:	200021f8 	.word	0x200021f8
 800c664:	20002260 	.word	0x20002260
 800c668:	200022c8 	.word	0x200022c8

0800c66c <global_stdio_init.part.0>:
 800c66c:	b510      	push	{r4, lr}
 800c66e:	4b0b      	ldr	r3, [pc, #44]	; (800c69c <global_stdio_init.part.0+0x30>)
 800c670:	4c0b      	ldr	r4, [pc, #44]	; (800c6a0 <global_stdio_init.part.0+0x34>)
 800c672:	4a0c      	ldr	r2, [pc, #48]	; (800c6a4 <global_stdio_init.part.0+0x38>)
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	4620      	mov	r0, r4
 800c678:	2200      	movs	r2, #0
 800c67a:	2104      	movs	r1, #4
 800c67c:	f7ff ff94 	bl	800c5a8 <std>
 800c680:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c684:	2201      	movs	r2, #1
 800c686:	2109      	movs	r1, #9
 800c688:	f7ff ff8e 	bl	800c5a8 <std>
 800c68c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c690:	2202      	movs	r2, #2
 800c692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c696:	2112      	movs	r1, #18
 800c698:	f7ff bf86 	b.w	800c5a8 <std>
 800c69c:	20002330 	.word	0x20002330
 800c6a0:	200021f8 	.word	0x200021f8
 800c6a4:	0800c615 	.word	0x0800c615

0800c6a8 <__sfp_lock_acquire>:
 800c6a8:	4801      	ldr	r0, [pc, #4]	; (800c6b0 <__sfp_lock_acquire+0x8>)
 800c6aa:	f000 b976 	b.w	800c99a <__retarget_lock_acquire_recursive>
 800c6ae:	bf00      	nop
 800c6b0:	20002339 	.word	0x20002339

0800c6b4 <__sfp_lock_release>:
 800c6b4:	4801      	ldr	r0, [pc, #4]	; (800c6bc <__sfp_lock_release+0x8>)
 800c6b6:	f000 b971 	b.w	800c99c <__retarget_lock_release_recursive>
 800c6ba:	bf00      	nop
 800c6bc:	20002339 	.word	0x20002339

0800c6c0 <__sinit>:
 800c6c0:	b510      	push	{r4, lr}
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	f7ff fff0 	bl	800c6a8 <__sfp_lock_acquire>
 800c6c8:	6a23      	ldr	r3, [r4, #32]
 800c6ca:	b11b      	cbz	r3, 800c6d4 <__sinit+0x14>
 800c6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d0:	f7ff bff0 	b.w	800c6b4 <__sfp_lock_release>
 800c6d4:	4b04      	ldr	r3, [pc, #16]	; (800c6e8 <__sinit+0x28>)
 800c6d6:	6223      	str	r3, [r4, #32]
 800c6d8:	4b04      	ldr	r3, [pc, #16]	; (800c6ec <__sinit+0x2c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1f5      	bne.n	800c6cc <__sinit+0xc>
 800c6e0:	f7ff ffc4 	bl	800c66c <global_stdio_init.part.0>
 800c6e4:	e7f2      	b.n	800c6cc <__sinit+0xc>
 800c6e6:	bf00      	nop
 800c6e8:	0800c62d 	.word	0x0800c62d
 800c6ec:	20002330 	.word	0x20002330

0800c6f0 <fiprintf>:
 800c6f0:	b40e      	push	{r1, r2, r3}
 800c6f2:	b503      	push	{r0, r1, lr}
 800c6f4:	4601      	mov	r1, r0
 800c6f6:	ab03      	add	r3, sp, #12
 800c6f8:	4805      	ldr	r0, [pc, #20]	; (800c710 <fiprintf+0x20>)
 800c6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6fe:	6800      	ldr	r0, [r0, #0]
 800c700:	9301      	str	r3, [sp, #4]
 800c702:	f000 fdad 	bl	800d260 <_vfiprintf_r>
 800c706:	b002      	add	sp, #8
 800c708:	f85d eb04 	ldr.w	lr, [sp], #4
 800c70c:	b003      	add	sp, #12
 800c70e:	4770      	bx	lr
 800c710:	20000164 	.word	0x20000164

0800c714 <_fwalk_sglue>:
 800c714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c718:	4607      	mov	r7, r0
 800c71a:	4688      	mov	r8, r1
 800c71c:	4614      	mov	r4, r2
 800c71e:	2600      	movs	r6, #0
 800c720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c724:	f1b9 0901 	subs.w	r9, r9, #1
 800c728:	d505      	bpl.n	800c736 <_fwalk_sglue+0x22>
 800c72a:	6824      	ldr	r4, [r4, #0]
 800c72c:	2c00      	cmp	r4, #0
 800c72e:	d1f7      	bne.n	800c720 <_fwalk_sglue+0xc>
 800c730:	4630      	mov	r0, r6
 800c732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d907      	bls.n	800c74c <_fwalk_sglue+0x38>
 800c73c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c740:	3301      	adds	r3, #1
 800c742:	d003      	beq.n	800c74c <_fwalk_sglue+0x38>
 800c744:	4629      	mov	r1, r5
 800c746:	4638      	mov	r0, r7
 800c748:	47c0      	blx	r8
 800c74a:	4306      	orrs	r6, r0
 800c74c:	3568      	adds	r5, #104	; 0x68
 800c74e:	e7e9      	b.n	800c724 <_fwalk_sglue+0x10>

0800c750 <siprintf>:
 800c750:	b40e      	push	{r1, r2, r3}
 800c752:	b500      	push	{lr}
 800c754:	b09c      	sub	sp, #112	; 0x70
 800c756:	ab1d      	add	r3, sp, #116	; 0x74
 800c758:	9002      	str	r0, [sp, #8]
 800c75a:	9006      	str	r0, [sp, #24]
 800c75c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c760:	4809      	ldr	r0, [pc, #36]	; (800c788 <siprintf+0x38>)
 800c762:	9107      	str	r1, [sp, #28]
 800c764:	9104      	str	r1, [sp, #16]
 800c766:	4909      	ldr	r1, [pc, #36]	; (800c78c <siprintf+0x3c>)
 800c768:	f853 2b04 	ldr.w	r2, [r3], #4
 800c76c:	9105      	str	r1, [sp, #20]
 800c76e:	6800      	ldr	r0, [r0, #0]
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	a902      	add	r1, sp, #8
 800c774:	f000 fa7a 	bl	800cc6c <_svfiprintf_r>
 800c778:	9b02      	ldr	r3, [sp, #8]
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	b01c      	add	sp, #112	; 0x70
 800c780:	f85d eb04 	ldr.w	lr, [sp], #4
 800c784:	b003      	add	sp, #12
 800c786:	4770      	bx	lr
 800c788:	20000164 	.word	0x20000164
 800c78c:	ffff0208 	.word	0xffff0208

0800c790 <siscanf>:
 800c790:	b40e      	push	{r1, r2, r3}
 800c792:	b510      	push	{r4, lr}
 800c794:	b09f      	sub	sp, #124	; 0x7c
 800c796:	ac21      	add	r4, sp, #132	; 0x84
 800c798:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c79c:	f854 2b04 	ldr.w	r2, [r4], #4
 800c7a0:	9201      	str	r2, [sp, #4]
 800c7a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c7a6:	9004      	str	r0, [sp, #16]
 800c7a8:	9008      	str	r0, [sp, #32]
 800c7aa:	f7f3 fd3b 	bl	8000224 <strlen>
 800c7ae:	4b0c      	ldr	r3, [pc, #48]	; (800c7e0 <siscanf+0x50>)
 800c7b0:	9005      	str	r0, [sp, #20]
 800c7b2:	9009      	str	r0, [sp, #36]	; 0x24
 800c7b4:	930d      	str	r3, [sp, #52]	; 0x34
 800c7b6:	480b      	ldr	r0, [pc, #44]	; (800c7e4 <siscanf+0x54>)
 800c7b8:	9a01      	ldr	r2, [sp, #4]
 800c7ba:	6800      	ldr	r0, [r0, #0]
 800c7bc:	9403      	str	r4, [sp, #12]
 800c7be:	2300      	movs	r3, #0
 800c7c0:	9311      	str	r3, [sp, #68]	; 0x44
 800c7c2:	9316      	str	r3, [sp, #88]	; 0x58
 800c7c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c7cc:	a904      	add	r1, sp, #16
 800c7ce:	4623      	mov	r3, r4
 800c7d0:	f000 fba4 	bl	800cf1c <__ssvfiscanf_r>
 800c7d4:	b01f      	add	sp, #124	; 0x7c
 800c7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7da:	b003      	add	sp, #12
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	0800c80b 	.word	0x0800c80b
 800c7e4:	20000164 	.word	0x20000164

0800c7e8 <__sread>:
 800c7e8:	b510      	push	{r4, lr}
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f0:	f000 f884 	bl	800c8fc <_read_r>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	bfab      	itete	ge
 800c7f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c7fc:	181b      	addge	r3, r3, r0
 800c7fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c802:	bfac      	ite	ge
 800c804:	6563      	strge	r3, [r4, #84]	; 0x54
 800c806:	81a3      	strhlt	r3, [r4, #12]
 800c808:	bd10      	pop	{r4, pc}

0800c80a <__seofread>:
 800c80a:	2000      	movs	r0, #0
 800c80c:	4770      	bx	lr

0800c80e <__swrite>:
 800c80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c812:	461f      	mov	r7, r3
 800c814:	898b      	ldrh	r3, [r1, #12]
 800c816:	05db      	lsls	r3, r3, #23
 800c818:	4605      	mov	r5, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	4616      	mov	r6, r2
 800c81e:	d505      	bpl.n	800c82c <__swrite+0x1e>
 800c820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c824:	2302      	movs	r3, #2
 800c826:	2200      	movs	r2, #0
 800c828:	f000 f856 	bl	800c8d8 <_lseek_r>
 800c82c:	89a3      	ldrh	r3, [r4, #12]
 800c82e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	4632      	mov	r2, r6
 800c83a:	463b      	mov	r3, r7
 800c83c:	4628      	mov	r0, r5
 800c83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	f000 b86d 	b.w	800c920 <_write_r>

0800c846 <__sseek>:
 800c846:	b510      	push	{r4, lr}
 800c848:	460c      	mov	r4, r1
 800c84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84e:	f000 f843 	bl	800c8d8 <_lseek_r>
 800c852:	1c43      	adds	r3, r0, #1
 800c854:	89a3      	ldrh	r3, [r4, #12]
 800c856:	bf15      	itete	ne
 800c858:	6560      	strne	r0, [r4, #84]	; 0x54
 800c85a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c85e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c862:	81a3      	strheq	r3, [r4, #12]
 800c864:	bf18      	it	ne
 800c866:	81a3      	strhne	r3, [r4, #12]
 800c868:	bd10      	pop	{r4, pc}

0800c86a <__sclose>:
 800c86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c86e:	f000 b823 	b.w	800c8b8 <_close_r>

0800c872 <memmove>:
 800c872:	4288      	cmp	r0, r1
 800c874:	b510      	push	{r4, lr}
 800c876:	eb01 0402 	add.w	r4, r1, r2
 800c87a:	d902      	bls.n	800c882 <memmove+0x10>
 800c87c:	4284      	cmp	r4, r0
 800c87e:	4623      	mov	r3, r4
 800c880:	d807      	bhi.n	800c892 <memmove+0x20>
 800c882:	1e43      	subs	r3, r0, #1
 800c884:	42a1      	cmp	r1, r4
 800c886:	d008      	beq.n	800c89a <memmove+0x28>
 800c888:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c88c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c890:	e7f8      	b.n	800c884 <memmove+0x12>
 800c892:	4402      	add	r2, r0
 800c894:	4601      	mov	r1, r0
 800c896:	428a      	cmp	r2, r1
 800c898:	d100      	bne.n	800c89c <memmove+0x2a>
 800c89a:	bd10      	pop	{r4, pc}
 800c89c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8a4:	e7f7      	b.n	800c896 <memmove+0x24>

0800c8a6 <memset>:
 800c8a6:	4402      	add	r2, r0
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d100      	bne.n	800c8b0 <memset+0xa>
 800c8ae:	4770      	bx	lr
 800c8b0:	f803 1b01 	strb.w	r1, [r3], #1
 800c8b4:	e7f9      	b.n	800c8aa <memset+0x4>
	...

0800c8b8 <_close_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d06      	ldr	r5, [pc, #24]	; (800c8d4 <_close_r+0x1c>)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	602b      	str	r3, [r5, #0]
 800c8c4:	f7f4 fb4b 	bl	8000f5e <_close>
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	d102      	bne.n	800c8d2 <_close_r+0x1a>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	b103      	cbz	r3, 800c8d2 <_close_r+0x1a>
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	20002334 	.word	0x20002334

0800c8d8 <_lseek_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d07      	ldr	r5, [pc, #28]	; (800c8f8 <_lseek_r+0x20>)
 800c8dc:	4604      	mov	r4, r0
 800c8de:	4608      	mov	r0, r1
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	602a      	str	r2, [r5, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	f7f4 fb60 	bl	8000fac <_lseek>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d102      	bne.n	800c8f6 <_lseek_r+0x1e>
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	b103      	cbz	r3, 800c8f6 <_lseek_r+0x1e>
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	20002334 	.word	0x20002334

0800c8fc <_read_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4d07      	ldr	r5, [pc, #28]	; (800c91c <_read_r+0x20>)
 800c900:	4604      	mov	r4, r0
 800c902:	4608      	mov	r0, r1
 800c904:	4611      	mov	r1, r2
 800c906:	2200      	movs	r2, #0
 800c908:	602a      	str	r2, [r5, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	f7f4 faee 	bl	8000eec <_read>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d102      	bne.n	800c91a <_read_r+0x1e>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	b103      	cbz	r3, 800c91a <_read_r+0x1e>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	20002334 	.word	0x20002334

0800c920 <_write_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4d07      	ldr	r5, [pc, #28]	; (800c940 <_write_r+0x20>)
 800c924:	4604      	mov	r4, r0
 800c926:	4608      	mov	r0, r1
 800c928:	4611      	mov	r1, r2
 800c92a:	2200      	movs	r2, #0
 800c92c:	602a      	str	r2, [r5, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	f7f4 faf9 	bl	8000f26 <_write>
 800c934:	1c43      	adds	r3, r0, #1
 800c936:	d102      	bne.n	800c93e <_write_r+0x1e>
 800c938:	682b      	ldr	r3, [r5, #0]
 800c93a:	b103      	cbz	r3, 800c93e <_write_r+0x1e>
 800c93c:	6023      	str	r3, [r4, #0]
 800c93e:	bd38      	pop	{r3, r4, r5, pc}
 800c940:	20002334 	.word	0x20002334

0800c944 <__errno>:
 800c944:	4b01      	ldr	r3, [pc, #4]	; (800c94c <__errno+0x8>)
 800c946:	6818      	ldr	r0, [r3, #0]
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	20000164 	.word	0x20000164

0800c950 <__libc_init_array>:
 800c950:	b570      	push	{r4, r5, r6, lr}
 800c952:	4d0d      	ldr	r5, [pc, #52]	; (800c988 <__libc_init_array+0x38>)
 800c954:	4c0d      	ldr	r4, [pc, #52]	; (800c98c <__libc_init_array+0x3c>)
 800c956:	1b64      	subs	r4, r4, r5
 800c958:	10a4      	asrs	r4, r4, #2
 800c95a:	2600      	movs	r6, #0
 800c95c:	42a6      	cmp	r6, r4
 800c95e:	d109      	bne.n	800c974 <__libc_init_array+0x24>
 800c960:	4d0b      	ldr	r5, [pc, #44]	; (800c990 <__libc_init_array+0x40>)
 800c962:	4c0c      	ldr	r4, [pc, #48]	; (800c994 <__libc_init_array+0x44>)
 800c964:	f001 fc32 	bl	800e1cc <_init>
 800c968:	1b64      	subs	r4, r4, r5
 800c96a:	10a4      	asrs	r4, r4, #2
 800c96c:	2600      	movs	r6, #0
 800c96e:	42a6      	cmp	r6, r4
 800c970:	d105      	bne.n	800c97e <__libc_init_array+0x2e>
 800c972:	bd70      	pop	{r4, r5, r6, pc}
 800c974:	f855 3b04 	ldr.w	r3, [r5], #4
 800c978:	4798      	blx	r3
 800c97a:	3601      	adds	r6, #1
 800c97c:	e7ee      	b.n	800c95c <__libc_init_array+0xc>
 800c97e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c982:	4798      	blx	r3
 800c984:	3601      	adds	r6, #1
 800c986:	e7f2      	b.n	800c96e <__libc_init_array+0x1e>
 800c988:	0800e6d8 	.word	0x0800e6d8
 800c98c:	0800e6d8 	.word	0x0800e6d8
 800c990:	0800e6d8 	.word	0x0800e6d8
 800c994:	0800e6dc 	.word	0x0800e6dc

0800c998 <__retarget_lock_init_recursive>:
 800c998:	4770      	bx	lr

0800c99a <__retarget_lock_acquire_recursive>:
 800c99a:	4770      	bx	lr

0800c99c <__retarget_lock_release_recursive>:
 800c99c:	4770      	bx	lr

0800c99e <memcpy>:
 800c99e:	440a      	add	r2, r1
 800c9a0:	4291      	cmp	r1, r2
 800c9a2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9a6:	d100      	bne.n	800c9aa <memcpy+0xc>
 800c9a8:	4770      	bx	lr
 800c9aa:	b510      	push	{r4, lr}
 800c9ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9b4:	4291      	cmp	r1, r2
 800c9b6:	d1f9      	bne.n	800c9ac <memcpy+0xe>
 800c9b8:	bd10      	pop	{r4, pc}

0800c9ba <abort>:
 800c9ba:	b508      	push	{r3, lr}
 800c9bc:	2006      	movs	r0, #6
 800c9be:	f001 fa25 	bl	800de0c <raise>
 800c9c2:	2001      	movs	r0, #1
 800c9c4:	f7f4 fa88 	bl	8000ed8 <_exit>

0800c9c8 <_free_r>:
 800c9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9ca:	2900      	cmp	r1, #0
 800c9cc:	d044      	beq.n	800ca58 <_free_r+0x90>
 800c9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d2:	9001      	str	r0, [sp, #4]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f1a1 0404 	sub.w	r4, r1, #4
 800c9da:	bfb8      	it	lt
 800c9dc:	18e4      	addlt	r4, r4, r3
 800c9de:	f000 f8df 	bl	800cba0 <__malloc_lock>
 800c9e2:	4a1e      	ldr	r2, [pc, #120]	; (800ca5c <_free_r+0x94>)
 800c9e4:	9801      	ldr	r0, [sp, #4]
 800c9e6:	6813      	ldr	r3, [r2, #0]
 800c9e8:	b933      	cbnz	r3, 800c9f8 <_free_r+0x30>
 800c9ea:	6063      	str	r3, [r4, #4]
 800c9ec:	6014      	str	r4, [r2, #0]
 800c9ee:	b003      	add	sp, #12
 800c9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9f4:	f000 b8da 	b.w	800cbac <__malloc_unlock>
 800c9f8:	42a3      	cmp	r3, r4
 800c9fa:	d908      	bls.n	800ca0e <_free_r+0x46>
 800c9fc:	6825      	ldr	r5, [r4, #0]
 800c9fe:	1961      	adds	r1, r4, r5
 800ca00:	428b      	cmp	r3, r1
 800ca02:	bf01      	itttt	eq
 800ca04:	6819      	ldreq	r1, [r3, #0]
 800ca06:	685b      	ldreq	r3, [r3, #4]
 800ca08:	1949      	addeq	r1, r1, r5
 800ca0a:	6021      	streq	r1, [r4, #0]
 800ca0c:	e7ed      	b.n	800c9ea <_free_r+0x22>
 800ca0e:	461a      	mov	r2, r3
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	b10b      	cbz	r3, 800ca18 <_free_r+0x50>
 800ca14:	42a3      	cmp	r3, r4
 800ca16:	d9fa      	bls.n	800ca0e <_free_r+0x46>
 800ca18:	6811      	ldr	r1, [r2, #0]
 800ca1a:	1855      	adds	r5, r2, r1
 800ca1c:	42a5      	cmp	r5, r4
 800ca1e:	d10b      	bne.n	800ca38 <_free_r+0x70>
 800ca20:	6824      	ldr	r4, [r4, #0]
 800ca22:	4421      	add	r1, r4
 800ca24:	1854      	adds	r4, r2, r1
 800ca26:	42a3      	cmp	r3, r4
 800ca28:	6011      	str	r1, [r2, #0]
 800ca2a:	d1e0      	bne.n	800c9ee <_free_r+0x26>
 800ca2c:	681c      	ldr	r4, [r3, #0]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	6053      	str	r3, [r2, #4]
 800ca32:	440c      	add	r4, r1
 800ca34:	6014      	str	r4, [r2, #0]
 800ca36:	e7da      	b.n	800c9ee <_free_r+0x26>
 800ca38:	d902      	bls.n	800ca40 <_free_r+0x78>
 800ca3a:	230c      	movs	r3, #12
 800ca3c:	6003      	str	r3, [r0, #0]
 800ca3e:	e7d6      	b.n	800c9ee <_free_r+0x26>
 800ca40:	6825      	ldr	r5, [r4, #0]
 800ca42:	1961      	adds	r1, r4, r5
 800ca44:	428b      	cmp	r3, r1
 800ca46:	bf04      	itt	eq
 800ca48:	6819      	ldreq	r1, [r3, #0]
 800ca4a:	685b      	ldreq	r3, [r3, #4]
 800ca4c:	6063      	str	r3, [r4, #4]
 800ca4e:	bf04      	itt	eq
 800ca50:	1949      	addeq	r1, r1, r5
 800ca52:	6021      	streq	r1, [r4, #0]
 800ca54:	6054      	str	r4, [r2, #4]
 800ca56:	e7ca      	b.n	800c9ee <_free_r+0x26>
 800ca58:	b003      	add	sp, #12
 800ca5a:	bd30      	pop	{r4, r5, pc}
 800ca5c:	2000233c 	.word	0x2000233c

0800ca60 <sbrk_aligned>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	4e0e      	ldr	r6, [pc, #56]	; (800ca9c <sbrk_aligned+0x3c>)
 800ca64:	460c      	mov	r4, r1
 800ca66:	6831      	ldr	r1, [r6, #0]
 800ca68:	4605      	mov	r5, r0
 800ca6a:	b911      	cbnz	r1, 800ca72 <sbrk_aligned+0x12>
 800ca6c:	f001 f9ea 	bl	800de44 <_sbrk_r>
 800ca70:	6030      	str	r0, [r6, #0]
 800ca72:	4621      	mov	r1, r4
 800ca74:	4628      	mov	r0, r5
 800ca76:	f001 f9e5 	bl	800de44 <_sbrk_r>
 800ca7a:	1c43      	adds	r3, r0, #1
 800ca7c:	d00a      	beq.n	800ca94 <sbrk_aligned+0x34>
 800ca7e:	1cc4      	adds	r4, r0, #3
 800ca80:	f024 0403 	bic.w	r4, r4, #3
 800ca84:	42a0      	cmp	r0, r4
 800ca86:	d007      	beq.n	800ca98 <sbrk_aligned+0x38>
 800ca88:	1a21      	subs	r1, r4, r0
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f001 f9da 	bl	800de44 <_sbrk_r>
 800ca90:	3001      	adds	r0, #1
 800ca92:	d101      	bne.n	800ca98 <sbrk_aligned+0x38>
 800ca94:	f04f 34ff 	mov.w	r4, #4294967295
 800ca98:	4620      	mov	r0, r4
 800ca9a:	bd70      	pop	{r4, r5, r6, pc}
 800ca9c:	20002340 	.word	0x20002340

0800caa0 <_malloc_r>:
 800caa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caa4:	1ccd      	adds	r5, r1, #3
 800caa6:	f025 0503 	bic.w	r5, r5, #3
 800caaa:	3508      	adds	r5, #8
 800caac:	2d0c      	cmp	r5, #12
 800caae:	bf38      	it	cc
 800cab0:	250c      	movcc	r5, #12
 800cab2:	2d00      	cmp	r5, #0
 800cab4:	4607      	mov	r7, r0
 800cab6:	db01      	blt.n	800cabc <_malloc_r+0x1c>
 800cab8:	42a9      	cmp	r1, r5
 800caba:	d905      	bls.n	800cac8 <_malloc_r+0x28>
 800cabc:	230c      	movs	r3, #12
 800cabe:	603b      	str	r3, [r7, #0]
 800cac0:	2600      	movs	r6, #0
 800cac2:	4630      	mov	r0, r6
 800cac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb9c <_malloc_r+0xfc>
 800cacc:	f000 f868 	bl	800cba0 <__malloc_lock>
 800cad0:	f8d8 3000 	ldr.w	r3, [r8]
 800cad4:	461c      	mov	r4, r3
 800cad6:	bb5c      	cbnz	r4, 800cb30 <_malloc_r+0x90>
 800cad8:	4629      	mov	r1, r5
 800cada:	4638      	mov	r0, r7
 800cadc:	f7ff ffc0 	bl	800ca60 <sbrk_aligned>
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	4604      	mov	r4, r0
 800cae4:	d155      	bne.n	800cb92 <_malloc_r+0xf2>
 800cae6:	f8d8 4000 	ldr.w	r4, [r8]
 800caea:	4626      	mov	r6, r4
 800caec:	2e00      	cmp	r6, #0
 800caee:	d145      	bne.n	800cb7c <_malloc_r+0xdc>
 800caf0:	2c00      	cmp	r4, #0
 800caf2:	d048      	beq.n	800cb86 <_malloc_r+0xe6>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	4631      	mov	r1, r6
 800caf8:	4638      	mov	r0, r7
 800cafa:	eb04 0903 	add.w	r9, r4, r3
 800cafe:	f001 f9a1 	bl	800de44 <_sbrk_r>
 800cb02:	4581      	cmp	r9, r0
 800cb04:	d13f      	bne.n	800cb86 <_malloc_r+0xe6>
 800cb06:	6821      	ldr	r1, [r4, #0]
 800cb08:	1a6d      	subs	r5, r5, r1
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	4638      	mov	r0, r7
 800cb0e:	f7ff ffa7 	bl	800ca60 <sbrk_aligned>
 800cb12:	3001      	adds	r0, #1
 800cb14:	d037      	beq.n	800cb86 <_malloc_r+0xe6>
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	442b      	add	r3, r5
 800cb1a:	6023      	str	r3, [r4, #0]
 800cb1c:	f8d8 3000 	ldr.w	r3, [r8]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d038      	beq.n	800cb96 <_malloc_r+0xf6>
 800cb24:	685a      	ldr	r2, [r3, #4]
 800cb26:	42a2      	cmp	r2, r4
 800cb28:	d12b      	bne.n	800cb82 <_malloc_r+0xe2>
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	605a      	str	r2, [r3, #4]
 800cb2e:	e00f      	b.n	800cb50 <_malloc_r+0xb0>
 800cb30:	6822      	ldr	r2, [r4, #0]
 800cb32:	1b52      	subs	r2, r2, r5
 800cb34:	d41f      	bmi.n	800cb76 <_malloc_r+0xd6>
 800cb36:	2a0b      	cmp	r2, #11
 800cb38:	d917      	bls.n	800cb6a <_malloc_r+0xca>
 800cb3a:	1961      	adds	r1, r4, r5
 800cb3c:	42a3      	cmp	r3, r4
 800cb3e:	6025      	str	r5, [r4, #0]
 800cb40:	bf18      	it	ne
 800cb42:	6059      	strne	r1, [r3, #4]
 800cb44:	6863      	ldr	r3, [r4, #4]
 800cb46:	bf08      	it	eq
 800cb48:	f8c8 1000 	streq.w	r1, [r8]
 800cb4c:	5162      	str	r2, [r4, r5]
 800cb4e:	604b      	str	r3, [r1, #4]
 800cb50:	4638      	mov	r0, r7
 800cb52:	f104 060b 	add.w	r6, r4, #11
 800cb56:	f000 f829 	bl	800cbac <__malloc_unlock>
 800cb5a:	f026 0607 	bic.w	r6, r6, #7
 800cb5e:	1d23      	adds	r3, r4, #4
 800cb60:	1af2      	subs	r2, r6, r3
 800cb62:	d0ae      	beq.n	800cac2 <_malloc_r+0x22>
 800cb64:	1b9b      	subs	r3, r3, r6
 800cb66:	50a3      	str	r3, [r4, r2]
 800cb68:	e7ab      	b.n	800cac2 <_malloc_r+0x22>
 800cb6a:	42a3      	cmp	r3, r4
 800cb6c:	6862      	ldr	r2, [r4, #4]
 800cb6e:	d1dd      	bne.n	800cb2c <_malloc_r+0x8c>
 800cb70:	f8c8 2000 	str.w	r2, [r8]
 800cb74:	e7ec      	b.n	800cb50 <_malloc_r+0xb0>
 800cb76:	4623      	mov	r3, r4
 800cb78:	6864      	ldr	r4, [r4, #4]
 800cb7a:	e7ac      	b.n	800cad6 <_malloc_r+0x36>
 800cb7c:	4634      	mov	r4, r6
 800cb7e:	6876      	ldr	r6, [r6, #4]
 800cb80:	e7b4      	b.n	800caec <_malloc_r+0x4c>
 800cb82:	4613      	mov	r3, r2
 800cb84:	e7cc      	b.n	800cb20 <_malloc_r+0x80>
 800cb86:	230c      	movs	r3, #12
 800cb88:	603b      	str	r3, [r7, #0]
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	f000 f80e 	bl	800cbac <__malloc_unlock>
 800cb90:	e797      	b.n	800cac2 <_malloc_r+0x22>
 800cb92:	6025      	str	r5, [r4, #0]
 800cb94:	e7dc      	b.n	800cb50 <_malloc_r+0xb0>
 800cb96:	605b      	str	r3, [r3, #4]
 800cb98:	deff      	udf	#255	; 0xff
 800cb9a:	bf00      	nop
 800cb9c:	2000233c 	.word	0x2000233c

0800cba0 <__malloc_lock>:
 800cba0:	4801      	ldr	r0, [pc, #4]	; (800cba8 <__malloc_lock+0x8>)
 800cba2:	f7ff befa 	b.w	800c99a <__retarget_lock_acquire_recursive>
 800cba6:	bf00      	nop
 800cba8:	20002338 	.word	0x20002338

0800cbac <__malloc_unlock>:
 800cbac:	4801      	ldr	r0, [pc, #4]	; (800cbb4 <__malloc_unlock+0x8>)
 800cbae:	f7ff bef5 	b.w	800c99c <__retarget_lock_release_recursive>
 800cbb2:	bf00      	nop
 800cbb4:	20002338 	.word	0x20002338

0800cbb8 <__ssputs_r>:
 800cbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbbc:	688e      	ldr	r6, [r1, #8]
 800cbbe:	461f      	mov	r7, r3
 800cbc0:	42be      	cmp	r6, r7
 800cbc2:	680b      	ldr	r3, [r1, #0]
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	4690      	mov	r8, r2
 800cbca:	d82c      	bhi.n	800cc26 <__ssputs_r+0x6e>
 800cbcc:	898a      	ldrh	r2, [r1, #12]
 800cbce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbd2:	d026      	beq.n	800cc22 <__ssputs_r+0x6a>
 800cbd4:	6965      	ldr	r5, [r4, #20]
 800cbd6:	6909      	ldr	r1, [r1, #16]
 800cbd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbdc:	eba3 0901 	sub.w	r9, r3, r1
 800cbe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbe4:	1c7b      	adds	r3, r7, #1
 800cbe6:	444b      	add	r3, r9
 800cbe8:	106d      	asrs	r5, r5, #1
 800cbea:	429d      	cmp	r5, r3
 800cbec:	bf38      	it	cc
 800cbee:	461d      	movcc	r5, r3
 800cbf0:	0553      	lsls	r3, r2, #21
 800cbf2:	d527      	bpl.n	800cc44 <__ssputs_r+0x8c>
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	f7ff ff53 	bl	800caa0 <_malloc_r>
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	b360      	cbz	r0, 800cc58 <__ssputs_r+0xa0>
 800cbfe:	6921      	ldr	r1, [r4, #16]
 800cc00:	464a      	mov	r2, r9
 800cc02:	f7ff fecc 	bl	800c99e <memcpy>
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc10:	81a3      	strh	r3, [r4, #12]
 800cc12:	6126      	str	r6, [r4, #16]
 800cc14:	6165      	str	r5, [r4, #20]
 800cc16:	444e      	add	r6, r9
 800cc18:	eba5 0509 	sub.w	r5, r5, r9
 800cc1c:	6026      	str	r6, [r4, #0]
 800cc1e:	60a5      	str	r5, [r4, #8]
 800cc20:	463e      	mov	r6, r7
 800cc22:	42be      	cmp	r6, r7
 800cc24:	d900      	bls.n	800cc28 <__ssputs_r+0x70>
 800cc26:	463e      	mov	r6, r7
 800cc28:	6820      	ldr	r0, [r4, #0]
 800cc2a:	4632      	mov	r2, r6
 800cc2c:	4641      	mov	r1, r8
 800cc2e:	f7ff fe20 	bl	800c872 <memmove>
 800cc32:	68a3      	ldr	r3, [r4, #8]
 800cc34:	1b9b      	subs	r3, r3, r6
 800cc36:	60a3      	str	r3, [r4, #8]
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	4433      	add	r3, r6
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	2000      	movs	r0, #0
 800cc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc44:	462a      	mov	r2, r5
 800cc46:	f001 f90d 	bl	800de64 <_realloc_r>
 800cc4a:	4606      	mov	r6, r0
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	d1e0      	bne.n	800cc12 <__ssputs_r+0x5a>
 800cc50:	6921      	ldr	r1, [r4, #16]
 800cc52:	4650      	mov	r0, sl
 800cc54:	f7ff feb8 	bl	800c9c8 <_free_r>
 800cc58:	230c      	movs	r3, #12
 800cc5a:	f8ca 3000 	str.w	r3, [sl]
 800cc5e:	89a3      	ldrh	r3, [r4, #12]
 800cc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc64:	81a3      	strh	r3, [r4, #12]
 800cc66:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6a:	e7e9      	b.n	800cc40 <__ssputs_r+0x88>

0800cc6c <_svfiprintf_r>:
 800cc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc70:	4698      	mov	r8, r3
 800cc72:	898b      	ldrh	r3, [r1, #12]
 800cc74:	061b      	lsls	r3, r3, #24
 800cc76:	b09d      	sub	sp, #116	; 0x74
 800cc78:	4607      	mov	r7, r0
 800cc7a:	460d      	mov	r5, r1
 800cc7c:	4614      	mov	r4, r2
 800cc7e:	d50e      	bpl.n	800cc9e <_svfiprintf_r+0x32>
 800cc80:	690b      	ldr	r3, [r1, #16]
 800cc82:	b963      	cbnz	r3, 800cc9e <_svfiprintf_r+0x32>
 800cc84:	2140      	movs	r1, #64	; 0x40
 800cc86:	f7ff ff0b 	bl	800caa0 <_malloc_r>
 800cc8a:	6028      	str	r0, [r5, #0]
 800cc8c:	6128      	str	r0, [r5, #16]
 800cc8e:	b920      	cbnz	r0, 800cc9a <_svfiprintf_r+0x2e>
 800cc90:	230c      	movs	r3, #12
 800cc92:	603b      	str	r3, [r7, #0]
 800cc94:	f04f 30ff 	mov.w	r0, #4294967295
 800cc98:	e0d0      	b.n	800ce3c <_svfiprintf_r+0x1d0>
 800cc9a:	2340      	movs	r3, #64	; 0x40
 800cc9c:	616b      	str	r3, [r5, #20]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	9309      	str	r3, [sp, #36]	; 0x24
 800cca2:	2320      	movs	r3, #32
 800cca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cca8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccac:	2330      	movs	r3, #48	; 0x30
 800ccae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ce54 <_svfiprintf_r+0x1e8>
 800ccb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccb6:	f04f 0901 	mov.w	r9, #1
 800ccba:	4623      	mov	r3, r4
 800ccbc:	469a      	mov	sl, r3
 800ccbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccc2:	b10a      	cbz	r2, 800ccc8 <_svfiprintf_r+0x5c>
 800ccc4:	2a25      	cmp	r2, #37	; 0x25
 800ccc6:	d1f9      	bne.n	800ccbc <_svfiprintf_r+0x50>
 800ccc8:	ebba 0b04 	subs.w	fp, sl, r4
 800cccc:	d00b      	beq.n	800cce6 <_svfiprintf_r+0x7a>
 800ccce:	465b      	mov	r3, fp
 800ccd0:	4622      	mov	r2, r4
 800ccd2:	4629      	mov	r1, r5
 800ccd4:	4638      	mov	r0, r7
 800ccd6:	f7ff ff6f 	bl	800cbb8 <__ssputs_r>
 800ccda:	3001      	adds	r0, #1
 800ccdc:	f000 80a9 	beq.w	800ce32 <_svfiprintf_r+0x1c6>
 800cce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cce2:	445a      	add	r2, fp
 800cce4:	9209      	str	r2, [sp, #36]	; 0x24
 800cce6:	f89a 3000 	ldrb.w	r3, [sl]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f000 80a1 	beq.w	800ce32 <_svfiprintf_r+0x1c6>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccfa:	f10a 0a01 	add.w	sl, sl, #1
 800ccfe:	9304      	str	r3, [sp, #16]
 800cd00:	9307      	str	r3, [sp, #28]
 800cd02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd06:	931a      	str	r3, [sp, #104]	; 0x68
 800cd08:	4654      	mov	r4, sl
 800cd0a:	2205      	movs	r2, #5
 800cd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd10:	4850      	ldr	r0, [pc, #320]	; (800ce54 <_svfiprintf_r+0x1e8>)
 800cd12:	f7f3 fa95 	bl	8000240 <memchr>
 800cd16:	9a04      	ldr	r2, [sp, #16]
 800cd18:	b9d8      	cbnz	r0, 800cd52 <_svfiprintf_r+0xe6>
 800cd1a:	06d0      	lsls	r0, r2, #27
 800cd1c:	bf44      	itt	mi
 800cd1e:	2320      	movmi	r3, #32
 800cd20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd24:	0711      	lsls	r1, r2, #28
 800cd26:	bf44      	itt	mi
 800cd28:	232b      	movmi	r3, #43	; 0x2b
 800cd2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd2e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd32:	2b2a      	cmp	r3, #42	; 0x2a
 800cd34:	d015      	beq.n	800cd62 <_svfiprintf_r+0xf6>
 800cd36:	9a07      	ldr	r2, [sp, #28]
 800cd38:	4654      	mov	r4, sl
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	f04f 0c0a 	mov.w	ip, #10
 800cd40:	4621      	mov	r1, r4
 800cd42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd46:	3b30      	subs	r3, #48	; 0x30
 800cd48:	2b09      	cmp	r3, #9
 800cd4a:	d94d      	bls.n	800cde8 <_svfiprintf_r+0x17c>
 800cd4c:	b1b0      	cbz	r0, 800cd7c <_svfiprintf_r+0x110>
 800cd4e:	9207      	str	r2, [sp, #28]
 800cd50:	e014      	b.n	800cd7c <_svfiprintf_r+0x110>
 800cd52:	eba0 0308 	sub.w	r3, r0, r8
 800cd56:	fa09 f303 	lsl.w	r3, r9, r3
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	9304      	str	r3, [sp, #16]
 800cd5e:	46a2      	mov	sl, r4
 800cd60:	e7d2      	b.n	800cd08 <_svfiprintf_r+0x9c>
 800cd62:	9b03      	ldr	r3, [sp, #12]
 800cd64:	1d19      	adds	r1, r3, #4
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	9103      	str	r1, [sp, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	bfbb      	ittet	lt
 800cd6e:	425b      	neglt	r3, r3
 800cd70:	f042 0202 	orrlt.w	r2, r2, #2
 800cd74:	9307      	strge	r3, [sp, #28]
 800cd76:	9307      	strlt	r3, [sp, #28]
 800cd78:	bfb8      	it	lt
 800cd7a:	9204      	strlt	r2, [sp, #16]
 800cd7c:	7823      	ldrb	r3, [r4, #0]
 800cd7e:	2b2e      	cmp	r3, #46	; 0x2e
 800cd80:	d10c      	bne.n	800cd9c <_svfiprintf_r+0x130>
 800cd82:	7863      	ldrb	r3, [r4, #1]
 800cd84:	2b2a      	cmp	r3, #42	; 0x2a
 800cd86:	d134      	bne.n	800cdf2 <_svfiprintf_r+0x186>
 800cd88:	9b03      	ldr	r3, [sp, #12]
 800cd8a:	1d1a      	adds	r2, r3, #4
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	9203      	str	r2, [sp, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	bfb8      	it	lt
 800cd94:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd98:	3402      	adds	r4, #2
 800cd9a:	9305      	str	r3, [sp, #20]
 800cd9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ce64 <_svfiprintf_r+0x1f8>
 800cda0:	7821      	ldrb	r1, [r4, #0]
 800cda2:	2203      	movs	r2, #3
 800cda4:	4650      	mov	r0, sl
 800cda6:	f7f3 fa4b 	bl	8000240 <memchr>
 800cdaa:	b138      	cbz	r0, 800cdbc <_svfiprintf_r+0x150>
 800cdac:	9b04      	ldr	r3, [sp, #16]
 800cdae:	eba0 000a 	sub.w	r0, r0, sl
 800cdb2:	2240      	movs	r2, #64	; 0x40
 800cdb4:	4082      	lsls	r2, r0
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	3401      	adds	r4, #1
 800cdba:	9304      	str	r3, [sp, #16]
 800cdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc0:	4825      	ldr	r0, [pc, #148]	; (800ce58 <_svfiprintf_r+0x1ec>)
 800cdc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdc6:	2206      	movs	r2, #6
 800cdc8:	f7f3 fa3a 	bl	8000240 <memchr>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d038      	beq.n	800ce42 <_svfiprintf_r+0x1d6>
 800cdd0:	4b22      	ldr	r3, [pc, #136]	; (800ce5c <_svfiprintf_r+0x1f0>)
 800cdd2:	bb1b      	cbnz	r3, 800ce1c <_svfiprintf_r+0x1b0>
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	3307      	adds	r3, #7
 800cdd8:	f023 0307 	bic.w	r3, r3, #7
 800cddc:	3308      	adds	r3, #8
 800cdde:	9303      	str	r3, [sp, #12]
 800cde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde2:	4433      	add	r3, r6
 800cde4:	9309      	str	r3, [sp, #36]	; 0x24
 800cde6:	e768      	b.n	800ccba <_svfiprintf_r+0x4e>
 800cde8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdec:	460c      	mov	r4, r1
 800cdee:	2001      	movs	r0, #1
 800cdf0:	e7a6      	b.n	800cd40 <_svfiprintf_r+0xd4>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	3401      	adds	r4, #1
 800cdf6:	9305      	str	r3, [sp, #20]
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	f04f 0c0a 	mov.w	ip, #10
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce04:	3a30      	subs	r2, #48	; 0x30
 800ce06:	2a09      	cmp	r2, #9
 800ce08:	d903      	bls.n	800ce12 <_svfiprintf_r+0x1a6>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0c6      	beq.n	800cd9c <_svfiprintf_r+0x130>
 800ce0e:	9105      	str	r1, [sp, #20]
 800ce10:	e7c4      	b.n	800cd9c <_svfiprintf_r+0x130>
 800ce12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce16:	4604      	mov	r4, r0
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e7f0      	b.n	800cdfe <_svfiprintf_r+0x192>
 800ce1c:	ab03      	add	r3, sp, #12
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	462a      	mov	r2, r5
 800ce22:	4b0f      	ldr	r3, [pc, #60]	; (800ce60 <_svfiprintf_r+0x1f4>)
 800ce24:	a904      	add	r1, sp, #16
 800ce26:	4638      	mov	r0, r7
 800ce28:	f3af 8000 	nop.w
 800ce2c:	1c42      	adds	r2, r0, #1
 800ce2e:	4606      	mov	r6, r0
 800ce30:	d1d6      	bne.n	800cde0 <_svfiprintf_r+0x174>
 800ce32:	89ab      	ldrh	r3, [r5, #12]
 800ce34:	065b      	lsls	r3, r3, #25
 800ce36:	f53f af2d 	bmi.w	800cc94 <_svfiprintf_r+0x28>
 800ce3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce3c:	b01d      	add	sp, #116	; 0x74
 800ce3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce42:	ab03      	add	r3, sp, #12
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	462a      	mov	r2, r5
 800ce48:	4b05      	ldr	r3, [pc, #20]	; (800ce60 <_svfiprintf_r+0x1f4>)
 800ce4a:	a904      	add	r1, sp, #16
 800ce4c:	4638      	mov	r0, r7
 800ce4e:	f000 fb8f 	bl	800d570 <_printf_i>
 800ce52:	e7eb      	b.n	800ce2c <_svfiprintf_r+0x1c0>
 800ce54:	0800e57f 	.word	0x0800e57f
 800ce58:	0800e589 	.word	0x0800e589
 800ce5c:	00000000 	.word	0x00000000
 800ce60:	0800cbb9 	.word	0x0800cbb9
 800ce64:	0800e585 	.word	0x0800e585

0800ce68 <_sungetc_r>:
 800ce68:	b538      	push	{r3, r4, r5, lr}
 800ce6a:	1c4b      	adds	r3, r1, #1
 800ce6c:	4614      	mov	r4, r2
 800ce6e:	d103      	bne.n	800ce78 <_sungetc_r+0x10>
 800ce70:	f04f 35ff 	mov.w	r5, #4294967295
 800ce74:	4628      	mov	r0, r5
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	8993      	ldrh	r3, [r2, #12]
 800ce7a:	f023 0320 	bic.w	r3, r3, #32
 800ce7e:	8193      	strh	r3, [r2, #12]
 800ce80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce82:	6852      	ldr	r2, [r2, #4]
 800ce84:	b2cd      	uxtb	r5, r1
 800ce86:	b18b      	cbz	r3, 800ceac <_sungetc_r+0x44>
 800ce88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	dd08      	ble.n	800cea0 <_sungetc_r+0x38>
 800ce8e:	6823      	ldr	r3, [r4, #0]
 800ce90:	1e5a      	subs	r2, r3, #1
 800ce92:	6022      	str	r2, [r4, #0]
 800ce94:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ce98:	6863      	ldr	r3, [r4, #4]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	6063      	str	r3, [r4, #4]
 800ce9e:	e7e9      	b.n	800ce74 <_sungetc_r+0xc>
 800cea0:	4621      	mov	r1, r4
 800cea2:	f000 febc 	bl	800dc1e <__submore>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d0f1      	beq.n	800ce8e <_sungetc_r+0x26>
 800ceaa:	e7e1      	b.n	800ce70 <_sungetc_r+0x8>
 800ceac:	6921      	ldr	r1, [r4, #16]
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	b151      	cbz	r1, 800cec8 <_sungetc_r+0x60>
 800ceb2:	4299      	cmp	r1, r3
 800ceb4:	d208      	bcs.n	800cec8 <_sungetc_r+0x60>
 800ceb6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ceba:	42a9      	cmp	r1, r5
 800cebc:	d104      	bne.n	800cec8 <_sungetc_r+0x60>
 800cebe:	3b01      	subs	r3, #1
 800cec0:	3201      	adds	r2, #1
 800cec2:	6023      	str	r3, [r4, #0]
 800cec4:	6062      	str	r2, [r4, #4]
 800cec6:	e7d5      	b.n	800ce74 <_sungetc_r+0xc>
 800cec8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ced0:	6363      	str	r3, [r4, #52]	; 0x34
 800ced2:	2303      	movs	r3, #3
 800ced4:	63a3      	str	r3, [r4, #56]	; 0x38
 800ced6:	4623      	mov	r3, r4
 800ced8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cedc:	6023      	str	r3, [r4, #0]
 800cede:	2301      	movs	r3, #1
 800cee0:	e7dc      	b.n	800ce9c <_sungetc_r+0x34>

0800cee2 <__ssrefill_r>:
 800cee2:	b510      	push	{r4, lr}
 800cee4:	460c      	mov	r4, r1
 800cee6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cee8:	b169      	cbz	r1, 800cf06 <__ssrefill_r+0x24>
 800ceea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ceee:	4299      	cmp	r1, r3
 800cef0:	d001      	beq.n	800cef6 <__ssrefill_r+0x14>
 800cef2:	f7ff fd69 	bl	800c9c8 <_free_r>
 800cef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cef8:	6063      	str	r3, [r4, #4]
 800cefa:	2000      	movs	r0, #0
 800cefc:	6360      	str	r0, [r4, #52]	; 0x34
 800cefe:	b113      	cbz	r3, 800cf06 <__ssrefill_r+0x24>
 800cf00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf02:	6023      	str	r3, [r4, #0]
 800cf04:	bd10      	pop	{r4, pc}
 800cf06:	6923      	ldr	r3, [r4, #16]
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	6063      	str	r3, [r4, #4]
 800cf0e:	89a3      	ldrh	r3, [r4, #12]
 800cf10:	f043 0320 	orr.w	r3, r3, #32
 800cf14:	81a3      	strh	r3, [r4, #12]
 800cf16:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1a:	e7f3      	b.n	800cf04 <__ssrefill_r+0x22>

0800cf1c <__ssvfiscanf_r>:
 800cf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf20:	460c      	mov	r4, r1
 800cf22:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cf26:	2100      	movs	r1, #0
 800cf28:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cf2c:	49a6      	ldr	r1, [pc, #664]	; (800d1c8 <__ssvfiscanf_r+0x2ac>)
 800cf2e:	91a0      	str	r1, [sp, #640]	; 0x280
 800cf30:	f10d 0804 	add.w	r8, sp, #4
 800cf34:	49a5      	ldr	r1, [pc, #660]	; (800d1cc <__ssvfiscanf_r+0x2b0>)
 800cf36:	4fa6      	ldr	r7, [pc, #664]	; (800d1d0 <__ssvfiscanf_r+0x2b4>)
 800cf38:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d1d4 <__ssvfiscanf_r+0x2b8>
 800cf3c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cf40:	4606      	mov	r6, r0
 800cf42:	91a1      	str	r1, [sp, #644]	; 0x284
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	7813      	ldrb	r3, [r2, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 815a 	beq.w	800d202 <__ssvfiscanf_r+0x2e6>
 800cf4e:	5cf9      	ldrb	r1, [r7, r3]
 800cf50:	f011 0108 	ands.w	r1, r1, #8
 800cf54:	f102 0501 	add.w	r5, r2, #1
 800cf58:	d019      	beq.n	800cf8e <__ssvfiscanf_r+0x72>
 800cf5a:	6863      	ldr	r3, [r4, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	dd0f      	ble.n	800cf80 <__ssvfiscanf_r+0x64>
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	781a      	ldrb	r2, [r3, #0]
 800cf64:	5cba      	ldrb	r2, [r7, r2]
 800cf66:	0712      	lsls	r2, r2, #28
 800cf68:	d401      	bmi.n	800cf6e <__ssvfiscanf_r+0x52>
 800cf6a:	462a      	mov	r2, r5
 800cf6c:	e7eb      	b.n	800cf46 <__ssvfiscanf_r+0x2a>
 800cf6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cf70:	3201      	adds	r2, #1
 800cf72:	9245      	str	r2, [sp, #276]	; 0x114
 800cf74:	6862      	ldr	r2, [r4, #4]
 800cf76:	3301      	adds	r3, #1
 800cf78:	3a01      	subs	r2, #1
 800cf7a:	6062      	str	r2, [r4, #4]
 800cf7c:	6023      	str	r3, [r4, #0]
 800cf7e:	e7ec      	b.n	800cf5a <__ssvfiscanf_r+0x3e>
 800cf80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cf82:	4621      	mov	r1, r4
 800cf84:	4630      	mov	r0, r6
 800cf86:	4798      	blx	r3
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d0e9      	beq.n	800cf60 <__ssvfiscanf_r+0x44>
 800cf8c:	e7ed      	b.n	800cf6a <__ssvfiscanf_r+0x4e>
 800cf8e:	2b25      	cmp	r3, #37	; 0x25
 800cf90:	d012      	beq.n	800cfb8 <__ssvfiscanf_r+0x9c>
 800cf92:	469a      	mov	sl, r3
 800cf94:	6863      	ldr	r3, [r4, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	f340 8091 	ble.w	800d0be <__ssvfiscanf_r+0x1a2>
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	7813      	ldrb	r3, [r2, #0]
 800cfa0:	4553      	cmp	r3, sl
 800cfa2:	f040 812e 	bne.w	800d202 <__ssvfiscanf_r+0x2e6>
 800cfa6:	6863      	ldr	r3, [r4, #4]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	6063      	str	r3, [r4, #4]
 800cfac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cfae:	3201      	adds	r2, #1
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	6022      	str	r2, [r4, #0]
 800cfb4:	9345      	str	r3, [sp, #276]	; 0x114
 800cfb6:	e7d8      	b.n	800cf6a <__ssvfiscanf_r+0x4e>
 800cfb8:	9141      	str	r1, [sp, #260]	; 0x104
 800cfba:	9143      	str	r1, [sp, #268]	; 0x10c
 800cfbc:	7853      	ldrb	r3, [r2, #1]
 800cfbe:	2b2a      	cmp	r3, #42	; 0x2a
 800cfc0:	bf02      	ittt	eq
 800cfc2:	2310      	moveq	r3, #16
 800cfc4:	1c95      	addeq	r5, r2, #2
 800cfc6:	9341      	streq	r3, [sp, #260]	; 0x104
 800cfc8:	220a      	movs	r2, #10
 800cfca:	46aa      	mov	sl, r5
 800cfcc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cfd0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800cfd4:	2b09      	cmp	r3, #9
 800cfd6:	d91c      	bls.n	800d012 <__ssvfiscanf_r+0xf6>
 800cfd8:	487e      	ldr	r0, [pc, #504]	; (800d1d4 <__ssvfiscanf_r+0x2b8>)
 800cfda:	2203      	movs	r2, #3
 800cfdc:	f7f3 f930 	bl	8000240 <memchr>
 800cfe0:	b138      	cbz	r0, 800cff2 <__ssvfiscanf_r+0xd6>
 800cfe2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cfe4:	eba0 0009 	sub.w	r0, r0, r9
 800cfe8:	2301      	movs	r3, #1
 800cfea:	4083      	lsls	r3, r0
 800cfec:	4313      	orrs	r3, r2
 800cfee:	9341      	str	r3, [sp, #260]	; 0x104
 800cff0:	4655      	mov	r5, sl
 800cff2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cff6:	2b78      	cmp	r3, #120	; 0x78
 800cff8:	d806      	bhi.n	800d008 <__ssvfiscanf_r+0xec>
 800cffa:	2b57      	cmp	r3, #87	; 0x57
 800cffc:	d810      	bhi.n	800d020 <__ssvfiscanf_r+0x104>
 800cffe:	2b25      	cmp	r3, #37	; 0x25
 800d000:	d0c7      	beq.n	800cf92 <__ssvfiscanf_r+0x76>
 800d002:	d857      	bhi.n	800d0b4 <__ssvfiscanf_r+0x198>
 800d004:	2b00      	cmp	r3, #0
 800d006:	d065      	beq.n	800d0d4 <__ssvfiscanf_r+0x1b8>
 800d008:	2303      	movs	r3, #3
 800d00a:	9347      	str	r3, [sp, #284]	; 0x11c
 800d00c:	230a      	movs	r3, #10
 800d00e:	9342      	str	r3, [sp, #264]	; 0x108
 800d010:	e076      	b.n	800d100 <__ssvfiscanf_r+0x1e4>
 800d012:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d014:	fb02 1103 	mla	r1, r2, r3, r1
 800d018:	3930      	subs	r1, #48	; 0x30
 800d01a:	9143      	str	r1, [sp, #268]	; 0x10c
 800d01c:	4655      	mov	r5, sl
 800d01e:	e7d4      	b.n	800cfca <__ssvfiscanf_r+0xae>
 800d020:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d024:	2a20      	cmp	r2, #32
 800d026:	d8ef      	bhi.n	800d008 <__ssvfiscanf_r+0xec>
 800d028:	a101      	add	r1, pc, #4	; (adr r1, 800d030 <__ssvfiscanf_r+0x114>)
 800d02a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d02e:	bf00      	nop
 800d030:	0800d0e3 	.word	0x0800d0e3
 800d034:	0800d009 	.word	0x0800d009
 800d038:	0800d009 	.word	0x0800d009
 800d03c:	0800d141 	.word	0x0800d141
 800d040:	0800d009 	.word	0x0800d009
 800d044:	0800d009 	.word	0x0800d009
 800d048:	0800d009 	.word	0x0800d009
 800d04c:	0800d009 	.word	0x0800d009
 800d050:	0800d009 	.word	0x0800d009
 800d054:	0800d009 	.word	0x0800d009
 800d058:	0800d009 	.word	0x0800d009
 800d05c:	0800d157 	.word	0x0800d157
 800d060:	0800d13d 	.word	0x0800d13d
 800d064:	0800d0bb 	.word	0x0800d0bb
 800d068:	0800d0bb 	.word	0x0800d0bb
 800d06c:	0800d0bb 	.word	0x0800d0bb
 800d070:	0800d009 	.word	0x0800d009
 800d074:	0800d0f9 	.word	0x0800d0f9
 800d078:	0800d009 	.word	0x0800d009
 800d07c:	0800d009 	.word	0x0800d009
 800d080:	0800d009 	.word	0x0800d009
 800d084:	0800d009 	.word	0x0800d009
 800d088:	0800d167 	.word	0x0800d167
 800d08c:	0800d135 	.word	0x0800d135
 800d090:	0800d0db 	.word	0x0800d0db
 800d094:	0800d009 	.word	0x0800d009
 800d098:	0800d009 	.word	0x0800d009
 800d09c:	0800d163 	.word	0x0800d163
 800d0a0:	0800d009 	.word	0x0800d009
 800d0a4:	0800d13d 	.word	0x0800d13d
 800d0a8:	0800d009 	.word	0x0800d009
 800d0ac:	0800d009 	.word	0x0800d009
 800d0b0:	0800d0e3 	.word	0x0800d0e3
 800d0b4:	3b45      	subs	r3, #69	; 0x45
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d8a6      	bhi.n	800d008 <__ssvfiscanf_r+0xec>
 800d0ba:	2305      	movs	r3, #5
 800d0bc:	e01f      	b.n	800d0fe <__ssvfiscanf_r+0x1e2>
 800d0be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d0c0:	4621      	mov	r1, r4
 800d0c2:	4630      	mov	r0, r6
 800d0c4:	4798      	blx	r3
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	f43f af68 	beq.w	800cf9c <__ssvfiscanf_r+0x80>
 800d0cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f040 808d 	bne.w	800d1ee <__ssvfiscanf_r+0x2d2>
 800d0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d8:	e08f      	b.n	800d1fa <__ssvfiscanf_r+0x2de>
 800d0da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d0dc:	f042 0220 	orr.w	r2, r2, #32
 800d0e0:	9241      	str	r2, [sp, #260]	; 0x104
 800d0e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d0e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d0e8:	9241      	str	r2, [sp, #260]	; 0x104
 800d0ea:	2210      	movs	r2, #16
 800d0ec:	2b6f      	cmp	r3, #111	; 0x6f
 800d0ee:	9242      	str	r2, [sp, #264]	; 0x108
 800d0f0:	bf34      	ite	cc
 800d0f2:	2303      	movcc	r3, #3
 800d0f4:	2304      	movcs	r3, #4
 800d0f6:	e002      	b.n	800d0fe <__ssvfiscanf_r+0x1e2>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	9342      	str	r3, [sp, #264]	; 0x108
 800d0fc:	2303      	movs	r3, #3
 800d0fe:	9347      	str	r3, [sp, #284]	; 0x11c
 800d100:	6863      	ldr	r3, [r4, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	dd3d      	ble.n	800d182 <__ssvfiscanf_r+0x266>
 800d106:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d108:	0659      	lsls	r1, r3, #25
 800d10a:	d404      	bmi.n	800d116 <__ssvfiscanf_r+0x1fa>
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	781a      	ldrb	r2, [r3, #0]
 800d110:	5cba      	ldrb	r2, [r7, r2]
 800d112:	0712      	lsls	r2, r2, #28
 800d114:	d43c      	bmi.n	800d190 <__ssvfiscanf_r+0x274>
 800d116:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d118:	2b02      	cmp	r3, #2
 800d11a:	dc4b      	bgt.n	800d1b4 <__ssvfiscanf_r+0x298>
 800d11c:	466b      	mov	r3, sp
 800d11e:	4622      	mov	r2, r4
 800d120:	a941      	add	r1, sp, #260	; 0x104
 800d122:	4630      	mov	r0, r6
 800d124:	f000 fb46 	bl	800d7b4 <_scanf_chars>
 800d128:	2801      	cmp	r0, #1
 800d12a:	d06a      	beq.n	800d202 <__ssvfiscanf_r+0x2e6>
 800d12c:	2802      	cmp	r0, #2
 800d12e:	f47f af1c 	bne.w	800cf6a <__ssvfiscanf_r+0x4e>
 800d132:	e7cb      	b.n	800d0cc <__ssvfiscanf_r+0x1b0>
 800d134:	2308      	movs	r3, #8
 800d136:	9342      	str	r3, [sp, #264]	; 0x108
 800d138:	2304      	movs	r3, #4
 800d13a:	e7e0      	b.n	800d0fe <__ssvfiscanf_r+0x1e2>
 800d13c:	220a      	movs	r2, #10
 800d13e:	e7d5      	b.n	800d0ec <__ssvfiscanf_r+0x1d0>
 800d140:	4629      	mov	r1, r5
 800d142:	4640      	mov	r0, r8
 800d144:	f000 fd32 	bl	800dbac <__sccl>
 800d148:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d14e:	9341      	str	r3, [sp, #260]	; 0x104
 800d150:	4605      	mov	r5, r0
 800d152:	2301      	movs	r3, #1
 800d154:	e7d3      	b.n	800d0fe <__ssvfiscanf_r+0x1e2>
 800d156:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d15c:	9341      	str	r3, [sp, #260]	; 0x104
 800d15e:	2300      	movs	r3, #0
 800d160:	e7cd      	b.n	800d0fe <__ssvfiscanf_r+0x1e2>
 800d162:	2302      	movs	r3, #2
 800d164:	e7cb      	b.n	800d0fe <__ssvfiscanf_r+0x1e2>
 800d166:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d168:	06c3      	lsls	r3, r0, #27
 800d16a:	f53f aefe 	bmi.w	800cf6a <__ssvfiscanf_r+0x4e>
 800d16e:	9b00      	ldr	r3, [sp, #0]
 800d170:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d172:	1d19      	adds	r1, r3, #4
 800d174:	9100      	str	r1, [sp, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	07c0      	lsls	r0, r0, #31
 800d17a:	bf4c      	ite	mi
 800d17c:	801a      	strhmi	r2, [r3, #0]
 800d17e:	601a      	strpl	r2, [r3, #0]
 800d180:	e6f3      	b.n	800cf6a <__ssvfiscanf_r+0x4e>
 800d182:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d184:	4621      	mov	r1, r4
 800d186:	4630      	mov	r0, r6
 800d188:	4798      	blx	r3
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d0bb      	beq.n	800d106 <__ssvfiscanf_r+0x1ea>
 800d18e:	e79d      	b.n	800d0cc <__ssvfiscanf_r+0x1b0>
 800d190:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d192:	3201      	adds	r2, #1
 800d194:	9245      	str	r2, [sp, #276]	; 0x114
 800d196:	6862      	ldr	r2, [r4, #4]
 800d198:	3a01      	subs	r2, #1
 800d19a:	2a00      	cmp	r2, #0
 800d19c:	6062      	str	r2, [r4, #4]
 800d19e:	dd02      	ble.n	800d1a6 <__ssvfiscanf_r+0x28a>
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	6023      	str	r3, [r4, #0]
 800d1a4:	e7b2      	b.n	800d10c <__ssvfiscanf_r+0x1f0>
 800d1a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	4798      	blx	r3
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d0ac      	beq.n	800d10c <__ssvfiscanf_r+0x1f0>
 800d1b2:	e78b      	b.n	800d0cc <__ssvfiscanf_r+0x1b0>
 800d1b4:	2b04      	cmp	r3, #4
 800d1b6:	dc0f      	bgt.n	800d1d8 <__ssvfiscanf_r+0x2bc>
 800d1b8:	466b      	mov	r3, sp
 800d1ba:	4622      	mov	r2, r4
 800d1bc:	a941      	add	r1, sp, #260	; 0x104
 800d1be:	4630      	mov	r0, r6
 800d1c0:	f000 fb52 	bl	800d868 <_scanf_i>
 800d1c4:	e7b0      	b.n	800d128 <__ssvfiscanf_r+0x20c>
 800d1c6:	bf00      	nop
 800d1c8:	0800ce69 	.word	0x0800ce69
 800d1cc:	0800cee3 	.word	0x0800cee3
 800d1d0:	0800e5ce 	.word	0x0800e5ce
 800d1d4:	0800e585 	.word	0x0800e585
 800d1d8:	4b0b      	ldr	r3, [pc, #44]	; (800d208 <__ssvfiscanf_r+0x2ec>)
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f43f aec5 	beq.w	800cf6a <__ssvfiscanf_r+0x4e>
 800d1e0:	466b      	mov	r3, sp
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	a941      	add	r1, sp, #260	; 0x104
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f3af 8000 	nop.w
 800d1ec:	e79c      	b.n	800d128 <__ssvfiscanf_r+0x20c>
 800d1ee:	89a3      	ldrh	r3, [r4, #12]
 800d1f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d1f4:	bf18      	it	ne
 800d1f6:	f04f 30ff 	movne.w	r0, #4294967295
 800d1fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d202:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d204:	e7f9      	b.n	800d1fa <__ssvfiscanf_r+0x2de>
 800d206:	bf00      	nop
 800d208:	00000000 	.word	0x00000000

0800d20c <__sfputc_r>:
 800d20c:	6893      	ldr	r3, [r2, #8]
 800d20e:	3b01      	subs	r3, #1
 800d210:	2b00      	cmp	r3, #0
 800d212:	b410      	push	{r4}
 800d214:	6093      	str	r3, [r2, #8]
 800d216:	da08      	bge.n	800d22a <__sfputc_r+0x1e>
 800d218:	6994      	ldr	r4, [r2, #24]
 800d21a:	42a3      	cmp	r3, r4
 800d21c:	db01      	blt.n	800d222 <__sfputc_r+0x16>
 800d21e:	290a      	cmp	r1, #10
 800d220:	d103      	bne.n	800d22a <__sfputc_r+0x1e>
 800d222:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d226:	f000 bd34 	b.w	800dc92 <__swbuf_r>
 800d22a:	6813      	ldr	r3, [r2, #0]
 800d22c:	1c58      	adds	r0, r3, #1
 800d22e:	6010      	str	r0, [r2, #0]
 800d230:	7019      	strb	r1, [r3, #0]
 800d232:	4608      	mov	r0, r1
 800d234:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d238:	4770      	bx	lr

0800d23a <__sfputs_r>:
 800d23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23c:	4606      	mov	r6, r0
 800d23e:	460f      	mov	r7, r1
 800d240:	4614      	mov	r4, r2
 800d242:	18d5      	adds	r5, r2, r3
 800d244:	42ac      	cmp	r4, r5
 800d246:	d101      	bne.n	800d24c <__sfputs_r+0x12>
 800d248:	2000      	movs	r0, #0
 800d24a:	e007      	b.n	800d25c <__sfputs_r+0x22>
 800d24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d250:	463a      	mov	r2, r7
 800d252:	4630      	mov	r0, r6
 800d254:	f7ff ffda 	bl	800d20c <__sfputc_r>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	d1f3      	bne.n	800d244 <__sfputs_r+0xa>
 800d25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d260 <_vfiprintf_r>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	460d      	mov	r5, r1
 800d266:	b09d      	sub	sp, #116	; 0x74
 800d268:	4614      	mov	r4, r2
 800d26a:	4698      	mov	r8, r3
 800d26c:	4606      	mov	r6, r0
 800d26e:	b118      	cbz	r0, 800d278 <_vfiprintf_r+0x18>
 800d270:	6a03      	ldr	r3, [r0, #32]
 800d272:	b90b      	cbnz	r3, 800d278 <_vfiprintf_r+0x18>
 800d274:	f7ff fa24 	bl	800c6c0 <__sinit>
 800d278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d27a:	07d9      	lsls	r1, r3, #31
 800d27c:	d405      	bmi.n	800d28a <_vfiprintf_r+0x2a>
 800d27e:	89ab      	ldrh	r3, [r5, #12]
 800d280:	059a      	lsls	r2, r3, #22
 800d282:	d402      	bmi.n	800d28a <_vfiprintf_r+0x2a>
 800d284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d286:	f7ff fb88 	bl	800c99a <__retarget_lock_acquire_recursive>
 800d28a:	89ab      	ldrh	r3, [r5, #12]
 800d28c:	071b      	lsls	r3, r3, #28
 800d28e:	d501      	bpl.n	800d294 <_vfiprintf_r+0x34>
 800d290:	692b      	ldr	r3, [r5, #16]
 800d292:	b99b      	cbnz	r3, 800d2bc <_vfiprintf_r+0x5c>
 800d294:	4629      	mov	r1, r5
 800d296:	4630      	mov	r0, r6
 800d298:	f000 fd38 	bl	800dd0c <__swsetup_r>
 800d29c:	b170      	cbz	r0, 800d2bc <_vfiprintf_r+0x5c>
 800d29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2a0:	07dc      	lsls	r4, r3, #31
 800d2a2:	d504      	bpl.n	800d2ae <_vfiprintf_r+0x4e>
 800d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a8:	b01d      	add	sp, #116	; 0x74
 800d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ae:	89ab      	ldrh	r3, [r5, #12]
 800d2b0:	0598      	lsls	r0, r3, #22
 800d2b2:	d4f7      	bmi.n	800d2a4 <_vfiprintf_r+0x44>
 800d2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2b6:	f7ff fb71 	bl	800c99c <__retarget_lock_release_recursive>
 800d2ba:	e7f3      	b.n	800d2a4 <_vfiprintf_r+0x44>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c0:	2320      	movs	r3, #32
 800d2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ca:	2330      	movs	r3, #48	; 0x30
 800d2cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d480 <_vfiprintf_r+0x220>
 800d2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2d4:	f04f 0901 	mov.w	r9, #1
 800d2d8:	4623      	mov	r3, r4
 800d2da:	469a      	mov	sl, r3
 800d2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e0:	b10a      	cbz	r2, 800d2e6 <_vfiprintf_r+0x86>
 800d2e2:	2a25      	cmp	r2, #37	; 0x25
 800d2e4:	d1f9      	bne.n	800d2da <_vfiprintf_r+0x7a>
 800d2e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ea:	d00b      	beq.n	800d304 <_vfiprintf_r+0xa4>
 800d2ec:	465b      	mov	r3, fp
 800d2ee:	4622      	mov	r2, r4
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f7ff ffa1 	bl	800d23a <__sfputs_r>
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	f000 80a9 	beq.w	800d450 <_vfiprintf_r+0x1f0>
 800d2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d300:	445a      	add	r2, fp
 800d302:	9209      	str	r2, [sp, #36]	; 0x24
 800d304:	f89a 3000 	ldrb.w	r3, [sl]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 80a1 	beq.w	800d450 <_vfiprintf_r+0x1f0>
 800d30e:	2300      	movs	r3, #0
 800d310:	f04f 32ff 	mov.w	r2, #4294967295
 800d314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d318:	f10a 0a01 	add.w	sl, sl, #1
 800d31c:	9304      	str	r3, [sp, #16]
 800d31e:	9307      	str	r3, [sp, #28]
 800d320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d324:	931a      	str	r3, [sp, #104]	; 0x68
 800d326:	4654      	mov	r4, sl
 800d328:	2205      	movs	r2, #5
 800d32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d32e:	4854      	ldr	r0, [pc, #336]	; (800d480 <_vfiprintf_r+0x220>)
 800d330:	f7f2 ff86 	bl	8000240 <memchr>
 800d334:	9a04      	ldr	r2, [sp, #16]
 800d336:	b9d8      	cbnz	r0, 800d370 <_vfiprintf_r+0x110>
 800d338:	06d1      	lsls	r1, r2, #27
 800d33a:	bf44      	itt	mi
 800d33c:	2320      	movmi	r3, #32
 800d33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d342:	0713      	lsls	r3, r2, #28
 800d344:	bf44      	itt	mi
 800d346:	232b      	movmi	r3, #43	; 0x2b
 800d348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d34c:	f89a 3000 	ldrb.w	r3, [sl]
 800d350:	2b2a      	cmp	r3, #42	; 0x2a
 800d352:	d015      	beq.n	800d380 <_vfiprintf_r+0x120>
 800d354:	9a07      	ldr	r2, [sp, #28]
 800d356:	4654      	mov	r4, sl
 800d358:	2000      	movs	r0, #0
 800d35a:	f04f 0c0a 	mov.w	ip, #10
 800d35e:	4621      	mov	r1, r4
 800d360:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d364:	3b30      	subs	r3, #48	; 0x30
 800d366:	2b09      	cmp	r3, #9
 800d368:	d94d      	bls.n	800d406 <_vfiprintf_r+0x1a6>
 800d36a:	b1b0      	cbz	r0, 800d39a <_vfiprintf_r+0x13a>
 800d36c:	9207      	str	r2, [sp, #28]
 800d36e:	e014      	b.n	800d39a <_vfiprintf_r+0x13a>
 800d370:	eba0 0308 	sub.w	r3, r0, r8
 800d374:	fa09 f303 	lsl.w	r3, r9, r3
 800d378:	4313      	orrs	r3, r2
 800d37a:	9304      	str	r3, [sp, #16]
 800d37c:	46a2      	mov	sl, r4
 800d37e:	e7d2      	b.n	800d326 <_vfiprintf_r+0xc6>
 800d380:	9b03      	ldr	r3, [sp, #12]
 800d382:	1d19      	adds	r1, r3, #4
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	9103      	str	r1, [sp, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	bfbb      	ittet	lt
 800d38c:	425b      	neglt	r3, r3
 800d38e:	f042 0202 	orrlt.w	r2, r2, #2
 800d392:	9307      	strge	r3, [sp, #28]
 800d394:	9307      	strlt	r3, [sp, #28]
 800d396:	bfb8      	it	lt
 800d398:	9204      	strlt	r2, [sp, #16]
 800d39a:	7823      	ldrb	r3, [r4, #0]
 800d39c:	2b2e      	cmp	r3, #46	; 0x2e
 800d39e:	d10c      	bne.n	800d3ba <_vfiprintf_r+0x15a>
 800d3a0:	7863      	ldrb	r3, [r4, #1]
 800d3a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a4:	d134      	bne.n	800d410 <_vfiprintf_r+0x1b0>
 800d3a6:	9b03      	ldr	r3, [sp, #12]
 800d3a8:	1d1a      	adds	r2, r3, #4
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	9203      	str	r2, [sp, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	bfb8      	it	lt
 800d3b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3b6:	3402      	adds	r4, #2
 800d3b8:	9305      	str	r3, [sp, #20]
 800d3ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d490 <_vfiprintf_r+0x230>
 800d3be:	7821      	ldrb	r1, [r4, #0]
 800d3c0:	2203      	movs	r2, #3
 800d3c2:	4650      	mov	r0, sl
 800d3c4:	f7f2 ff3c 	bl	8000240 <memchr>
 800d3c8:	b138      	cbz	r0, 800d3da <_vfiprintf_r+0x17a>
 800d3ca:	9b04      	ldr	r3, [sp, #16]
 800d3cc:	eba0 000a 	sub.w	r0, r0, sl
 800d3d0:	2240      	movs	r2, #64	; 0x40
 800d3d2:	4082      	lsls	r2, r0
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	3401      	adds	r4, #1
 800d3d8:	9304      	str	r3, [sp, #16]
 800d3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3de:	4829      	ldr	r0, [pc, #164]	; (800d484 <_vfiprintf_r+0x224>)
 800d3e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3e4:	2206      	movs	r2, #6
 800d3e6:	f7f2 ff2b 	bl	8000240 <memchr>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	d03f      	beq.n	800d46e <_vfiprintf_r+0x20e>
 800d3ee:	4b26      	ldr	r3, [pc, #152]	; (800d488 <_vfiprintf_r+0x228>)
 800d3f0:	bb1b      	cbnz	r3, 800d43a <_vfiprintf_r+0x1da>
 800d3f2:	9b03      	ldr	r3, [sp, #12]
 800d3f4:	3307      	adds	r3, #7
 800d3f6:	f023 0307 	bic.w	r3, r3, #7
 800d3fa:	3308      	adds	r3, #8
 800d3fc:	9303      	str	r3, [sp, #12]
 800d3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d400:	443b      	add	r3, r7
 800d402:	9309      	str	r3, [sp, #36]	; 0x24
 800d404:	e768      	b.n	800d2d8 <_vfiprintf_r+0x78>
 800d406:	fb0c 3202 	mla	r2, ip, r2, r3
 800d40a:	460c      	mov	r4, r1
 800d40c:	2001      	movs	r0, #1
 800d40e:	e7a6      	b.n	800d35e <_vfiprintf_r+0xfe>
 800d410:	2300      	movs	r3, #0
 800d412:	3401      	adds	r4, #1
 800d414:	9305      	str	r3, [sp, #20]
 800d416:	4619      	mov	r1, r3
 800d418:	f04f 0c0a 	mov.w	ip, #10
 800d41c:	4620      	mov	r0, r4
 800d41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d422:	3a30      	subs	r2, #48	; 0x30
 800d424:	2a09      	cmp	r2, #9
 800d426:	d903      	bls.n	800d430 <_vfiprintf_r+0x1d0>
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d0c6      	beq.n	800d3ba <_vfiprintf_r+0x15a>
 800d42c:	9105      	str	r1, [sp, #20]
 800d42e:	e7c4      	b.n	800d3ba <_vfiprintf_r+0x15a>
 800d430:	fb0c 2101 	mla	r1, ip, r1, r2
 800d434:	4604      	mov	r4, r0
 800d436:	2301      	movs	r3, #1
 800d438:	e7f0      	b.n	800d41c <_vfiprintf_r+0x1bc>
 800d43a:	ab03      	add	r3, sp, #12
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	462a      	mov	r2, r5
 800d440:	4b12      	ldr	r3, [pc, #72]	; (800d48c <_vfiprintf_r+0x22c>)
 800d442:	a904      	add	r1, sp, #16
 800d444:	4630      	mov	r0, r6
 800d446:	f3af 8000 	nop.w
 800d44a:	4607      	mov	r7, r0
 800d44c:	1c78      	adds	r0, r7, #1
 800d44e:	d1d6      	bne.n	800d3fe <_vfiprintf_r+0x19e>
 800d450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d452:	07d9      	lsls	r1, r3, #31
 800d454:	d405      	bmi.n	800d462 <_vfiprintf_r+0x202>
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	059a      	lsls	r2, r3, #22
 800d45a:	d402      	bmi.n	800d462 <_vfiprintf_r+0x202>
 800d45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d45e:	f7ff fa9d 	bl	800c99c <__retarget_lock_release_recursive>
 800d462:	89ab      	ldrh	r3, [r5, #12]
 800d464:	065b      	lsls	r3, r3, #25
 800d466:	f53f af1d 	bmi.w	800d2a4 <_vfiprintf_r+0x44>
 800d46a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d46c:	e71c      	b.n	800d2a8 <_vfiprintf_r+0x48>
 800d46e:	ab03      	add	r3, sp, #12
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	462a      	mov	r2, r5
 800d474:	4b05      	ldr	r3, [pc, #20]	; (800d48c <_vfiprintf_r+0x22c>)
 800d476:	a904      	add	r1, sp, #16
 800d478:	4630      	mov	r0, r6
 800d47a:	f000 f879 	bl	800d570 <_printf_i>
 800d47e:	e7e4      	b.n	800d44a <_vfiprintf_r+0x1ea>
 800d480:	0800e57f 	.word	0x0800e57f
 800d484:	0800e589 	.word	0x0800e589
 800d488:	00000000 	.word	0x00000000
 800d48c:	0800d23b 	.word	0x0800d23b
 800d490:	0800e585 	.word	0x0800e585

0800d494 <_printf_common>:
 800d494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d498:	4616      	mov	r6, r2
 800d49a:	4699      	mov	r9, r3
 800d49c:	688a      	ldr	r2, [r1, #8]
 800d49e:	690b      	ldr	r3, [r1, #16]
 800d4a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	bfb8      	it	lt
 800d4a8:	4613      	movlt	r3, r2
 800d4aa:	6033      	str	r3, [r6, #0]
 800d4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	b10a      	cbz	r2, 800d4ba <_printf_common+0x26>
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	6033      	str	r3, [r6, #0]
 800d4ba:	6823      	ldr	r3, [r4, #0]
 800d4bc:	0699      	lsls	r1, r3, #26
 800d4be:	bf42      	ittt	mi
 800d4c0:	6833      	ldrmi	r3, [r6, #0]
 800d4c2:	3302      	addmi	r3, #2
 800d4c4:	6033      	strmi	r3, [r6, #0]
 800d4c6:	6825      	ldr	r5, [r4, #0]
 800d4c8:	f015 0506 	ands.w	r5, r5, #6
 800d4cc:	d106      	bne.n	800d4dc <_printf_common+0x48>
 800d4ce:	f104 0a19 	add.w	sl, r4, #25
 800d4d2:	68e3      	ldr	r3, [r4, #12]
 800d4d4:	6832      	ldr	r2, [r6, #0]
 800d4d6:	1a9b      	subs	r3, r3, r2
 800d4d8:	42ab      	cmp	r3, r5
 800d4da:	dc26      	bgt.n	800d52a <_printf_common+0x96>
 800d4dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4e0:	1e13      	subs	r3, r2, #0
 800d4e2:	6822      	ldr	r2, [r4, #0]
 800d4e4:	bf18      	it	ne
 800d4e6:	2301      	movne	r3, #1
 800d4e8:	0692      	lsls	r2, r2, #26
 800d4ea:	d42b      	bmi.n	800d544 <_printf_common+0xb0>
 800d4ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	47c0      	blx	r8
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	d01e      	beq.n	800d538 <_printf_common+0xa4>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	6922      	ldr	r2, [r4, #16]
 800d4fe:	f003 0306 	and.w	r3, r3, #6
 800d502:	2b04      	cmp	r3, #4
 800d504:	bf02      	ittt	eq
 800d506:	68e5      	ldreq	r5, [r4, #12]
 800d508:	6833      	ldreq	r3, [r6, #0]
 800d50a:	1aed      	subeq	r5, r5, r3
 800d50c:	68a3      	ldr	r3, [r4, #8]
 800d50e:	bf0c      	ite	eq
 800d510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d514:	2500      	movne	r5, #0
 800d516:	4293      	cmp	r3, r2
 800d518:	bfc4      	itt	gt
 800d51a:	1a9b      	subgt	r3, r3, r2
 800d51c:	18ed      	addgt	r5, r5, r3
 800d51e:	2600      	movs	r6, #0
 800d520:	341a      	adds	r4, #26
 800d522:	42b5      	cmp	r5, r6
 800d524:	d11a      	bne.n	800d55c <_printf_common+0xc8>
 800d526:	2000      	movs	r0, #0
 800d528:	e008      	b.n	800d53c <_printf_common+0xa8>
 800d52a:	2301      	movs	r3, #1
 800d52c:	4652      	mov	r2, sl
 800d52e:	4649      	mov	r1, r9
 800d530:	4638      	mov	r0, r7
 800d532:	47c0      	blx	r8
 800d534:	3001      	adds	r0, #1
 800d536:	d103      	bne.n	800d540 <_printf_common+0xac>
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d540:	3501      	adds	r5, #1
 800d542:	e7c6      	b.n	800d4d2 <_printf_common+0x3e>
 800d544:	18e1      	adds	r1, r4, r3
 800d546:	1c5a      	adds	r2, r3, #1
 800d548:	2030      	movs	r0, #48	; 0x30
 800d54a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d54e:	4422      	add	r2, r4
 800d550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d558:	3302      	adds	r3, #2
 800d55a:	e7c7      	b.n	800d4ec <_printf_common+0x58>
 800d55c:	2301      	movs	r3, #1
 800d55e:	4622      	mov	r2, r4
 800d560:	4649      	mov	r1, r9
 800d562:	4638      	mov	r0, r7
 800d564:	47c0      	blx	r8
 800d566:	3001      	adds	r0, #1
 800d568:	d0e6      	beq.n	800d538 <_printf_common+0xa4>
 800d56a:	3601      	adds	r6, #1
 800d56c:	e7d9      	b.n	800d522 <_printf_common+0x8e>
	...

0800d570 <_printf_i>:
 800d570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d574:	7e0f      	ldrb	r7, [r1, #24]
 800d576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d578:	2f78      	cmp	r7, #120	; 0x78
 800d57a:	4691      	mov	r9, r2
 800d57c:	4680      	mov	r8, r0
 800d57e:	460c      	mov	r4, r1
 800d580:	469a      	mov	sl, r3
 800d582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d586:	d807      	bhi.n	800d598 <_printf_i+0x28>
 800d588:	2f62      	cmp	r7, #98	; 0x62
 800d58a:	d80a      	bhi.n	800d5a2 <_printf_i+0x32>
 800d58c:	2f00      	cmp	r7, #0
 800d58e:	f000 80d4 	beq.w	800d73a <_printf_i+0x1ca>
 800d592:	2f58      	cmp	r7, #88	; 0x58
 800d594:	f000 80c0 	beq.w	800d718 <_printf_i+0x1a8>
 800d598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d59c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5a0:	e03a      	b.n	800d618 <_printf_i+0xa8>
 800d5a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5a6:	2b15      	cmp	r3, #21
 800d5a8:	d8f6      	bhi.n	800d598 <_printf_i+0x28>
 800d5aa:	a101      	add	r1, pc, #4	; (adr r1, 800d5b0 <_printf_i+0x40>)
 800d5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5b0:	0800d609 	.word	0x0800d609
 800d5b4:	0800d61d 	.word	0x0800d61d
 800d5b8:	0800d599 	.word	0x0800d599
 800d5bc:	0800d599 	.word	0x0800d599
 800d5c0:	0800d599 	.word	0x0800d599
 800d5c4:	0800d599 	.word	0x0800d599
 800d5c8:	0800d61d 	.word	0x0800d61d
 800d5cc:	0800d599 	.word	0x0800d599
 800d5d0:	0800d599 	.word	0x0800d599
 800d5d4:	0800d599 	.word	0x0800d599
 800d5d8:	0800d599 	.word	0x0800d599
 800d5dc:	0800d721 	.word	0x0800d721
 800d5e0:	0800d649 	.word	0x0800d649
 800d5e4:	0800d6db 	.word	0x0800d6db
 800d5e8:	0800d599 	.word	0x0800d599
 800d5ec:	0800d599 	.word	0x0800d599
 800d5f0:	0800d743 	.word	0x0800d743
 800d5f4:	0800d599 	.word	0x0800d599
 800d5f8:	0800d649 	.word	0x0800d649
 800d5fc:	0800d599 	.word	0x0800d599
 800d600:	0800d599 	.word	0x0800d599
 800d604:	0800d6e3 	.word	0x0800d6e3
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	1d1a      	adds	r2, r3, #4
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	602a      	str	r2, [r5, #0]
 800d610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d618:	2301      	movs	r3, #1
 800d61a:	e09f      	b.n	800d75c <_printf_i+0x1ec>
 800d61c:	6820      	ldr	r0, [r4, #0]
 800d61e:	682b      	ldr	r3, [r5, #0]
 800d620:	0607      	lsls	r7, r0, #24
 800d622:	f103 0104 	add.w	r1, r3, #4
 800d626:	6029      	str	r1, [r5, #0]
 800d628:	d501      	bpl.n	800d62e <_printf_i+0xbe>
 800d62a:	681e      	ldr	r6, [r3, #0]
 800d62c:	e003      	b.n	800d636 <_printf_i+0xc6>
 800d62e:	0646      	lsls	r6, r0, #25
 800d630:	d5fb      	bpl.n	800d62a <_printf_i+0xba>
 800d632:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d636:	2e00      	cmp	r6, #0
 800d638:	da03      	bge.n	800d642 <_printf_i+0xd2>
 800d63a:	232d      	movs	r3, #45	; 0x2d
 800d63c:	4276      	negs	r6, r6
 800d63e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d642:	485a      	ldr	r0, [pc, #360]	; (800d7ac <_printf_i+0x23c>)
 800d644:	230a      	movs	r3, #10
 800d646:	e012      	b.n	800d66e <_printf_i+0xfe>
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	6820      	ldr	r0, [r4, #0]
 800d64c:	1d19      	adds	r1, r3, #4
 800d64e:	6029      	str	r1, [r5, #0]
 800d650:	0605      	lsls	r5, r0, #24
 800d652:	d501      	bpl.n	800d658 <_printf_i+0xe8>
 800d654:	681e      	ldr	r6, [r3, #0]
 800d656:	e002      	b.n	800d65e <_printf_i+0xee>
 800d658:	0641      	lsls	r1, r0, #25
 800d65a:	d5fb      	bpl.n	800d654 <_printf_i+0xe4>
 800d65c:	881e      	ldrh	r6, [r3, #0]
 800d65e:	4853      	ldr	r0, [pc, #332]	; (800d7ac <_printf_i+0x23c>)
 800d660:	2f6f      	cmp	r7, #111	; 0x6f
 800d662:	bf0c      	ite	eq
 800d664:	2308      	moveq	r3, #8
 800d666:	230a      	movne	r3, #10
 800d668:	2100      	movs	r1, #0
 800d66a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d66e:	6865      	ldr	r5, [r4, #4]
 800d670:	60a5      	str	r5, [r4, #8]
 800d672:	2d00      	cmp	r5, #0
 800d674:	bfa2      	ittt	ge
 800d676:	6821      	ldrge	r1, [r4, #0]
 800d678:	f021 0104 	bicge.w	r1, r1, #4
 800d67c:	6021      	strge	r1, [r4, #0]
 800d67e:	b90e      	cbnz	r6, 800d684 <_printf_i+0x114>
 800d680:	2d00      	cmp	r5, #0
 800d682:	d04b      	beq.n	800d71c <_printf_i+0x1ac>
 800d684:	4615      	mov	r5, r2
 800d686:	fbb6 f1f3 	udiv	r1, r6, r3
 800d68a:	fb03 6711 	mls	r7, r3, r1, r6
 800d68e:	5dc7      	ldrb	r7, [r0, r7]
 800d690:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d694:	4637      	mov	r7, r6
 800d696:	42bb      	cmp	r3, r7
 800d698:	460e      	mov	r6, r1
 800d69a:	d9f4      	bls.n	800d686 <_printf_i+0x116>
 800d69c:	2b08      	cmp	r3, #8
 800d69e:	d10b      	bne.n	800d6b8 <_printf_i+0x148>
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	07de      	lsls	r6, r3, #31
 800d6a4:	d508      	bpl.n	800d6b8 <_printf_i+0x148>
 800d6a6:	6923      	ldr	r3, [r4, #16]
 800d6a8:	6861      	ldr	r1, [r4, #4]
 800d6aa:	4299      	cmp	r1, r3
 800d6ac:	bfde      	ittt	le
 800d6ae:	2330      	movle	r3, #48	; 0x30
 800d6b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6b8:	1b52      	subs	r2, r2, r5
 800d6ba:	6122      	str	r2, [r4, #16]
 800d6bc:	f8cd a000 	str.w	sl, [sp]
 800d6c0:	464b      	mov	r3, r9
 800d6c2:	aa03      	add	r2, sp, #12
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	4640      	mov	r0, r8
 800d6c8:	f7ff fee4 	bl	800d494 <_printf_common>
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d14a      	bne.n	800d766 <_printf_i+0x1f6>
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d4:	b004      	add	sp, #16
 800d6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	f043 0320 	orr.w	r3, r3, #32
 800d6e0:	6023      	str	r3, [r4, #0]
 800d6e2:	4833      	ldr	r0, [pc, #204]	; (800d7b0 <_printf_i+0x240>)
 800d6e4:	2778      	movs	r7, #120	; 0x78
 800d6e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	6829      	ldr	r1, [r5, #0]
 800d6ee:	061f      	lsls	r7, r3, #24
 800d6f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6f4:	d402      	bmi.n	800d6fc <_printf_i+0x18c>
 800d6f6:	065f      	lsls	r7, r3, #25
 800d6f8:	bf48      	it	mi
 800d6fa:	b2b6      	uxthmi	r6, r6
 800d6fc:	07df      	lsls	r7, r3, #31
 800d6fe:	bf48      	it	mi
 800d700:	f043 0320 	orrmi.w	r3, r3, #32
 800d704:	6029      	str	r1, [r5, #0]
 800d706:	bf48      	it	mi
 800d708:	6023      	strmi	r3, [r4, #0]
 800d70a:	b91e      	cbnz	r6, 800d714 <_printf_i+0x1a4>
 800d70c:	6823      	ldr	r3, [r4, #0]
 800d70e:	f023 0320 	bic.w	r3, r3, #32
 800d712:	6023      	str	r3, [r4, #0]
 800d714:	2310      	movs	r3, #16
 800d716:	e7a7      	b.n	800d668 <_printf_i+0xf8>
 800d718:	4824      	ldr	r0, [pc, #144]	; (800d7ac <_printf_i+0x23c>)
 800d71a:	e7e4      	b.n	800d6e6 <_printf_i+0x176>
 800d71c:	4615      	mov	r5, r2
 800d71e:	e7bd      	b.n	800d69c <_printf_i+0x12c>
 800d720:	682b      	ldr	r3, [r5, #0]
 800d722:	6826      	ldr	r6, [r4, #0]
 800d724:	6961      	ldr	r1, [r4, #20]
 800d726:	1d18      	adds	r0, r3, #4
 800d728:	6028      	str	r0, [r5, #0]
 800d72a:	0635      	lsls	r5, r6, #24
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	d501      	bpl.n	800d734 <_printf_i+0x1c4>
 800d730:	6019      	str	r1, [r3, #0]
 800d732:	e002      	b.n	800d73a <_printf_i+0x1ca>
 800d734:	0670      	lsls	r0, r6, #25
 800d736:	d5fb      	bpl.n	800d730 <_printf_i+0x1c0>
 800d738:	8019      	strh	r1, [r3, #0]
 800d73a:	2300      	movs	r3, #0
 800d73c:	6123      	str	r3, [r4, #16]
 800d73e:	4615      	mov	r5, r2
 800d740:	e7bc      	b.n	800d6bc <_printf_i+0x14c>
 800d742:	682b      	ldr	r3, [r5, #0]
 800d744:	1d1a      	adds	r2, r3, #4
 800d746:	602a      	str	r2, [r5, #0]
 800d748:	681d      	ldr	r5, [r3, #0]
 800d74a:	6862      	ldr	r2, [r4, #4]
 800d74c:	2100      	movs	r1, #0
 800d74e:	4628      	mov	r0, r5
 800d750:	f7f2 fd76 	bl	8000240 <memchr>
 800d754:	b108      	cbz	r0, 800d75a <_printf_i+0x1ea>
 800d756:	1b40      	subs	r0, r0, r5
 800d758:	6060      	str	r0, [r4, #4]
 800d75a:	6863      	ldr	r3, [r4, #4]
 800d75c:	6123      	str	r3, [r4, #16]
 800d75e:	2300      	movs	r3, #0
 800d760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d764:	e7aa      	b.n	800d6bc <_printf_i+0x14c>
 800d766:	6923      	ldr	r3, [r4, #16]
 800d768:	462a      	mov	r2, r5
 800d76a:	4649      	mov	r1, r9
 800d76c:	4640      	mov	r0, r8
 800d76e:	47d0      	blx	sl
 800d770:	3001      	adds	r0, #1
 800d772:	d0ad      	beq.n	800d6d0 <_printf_i+0x160>
 800d774:	6823      	ldr	r3, [r4, #0]
 800d776:	079b      	lsls	r3, r3, #30
 800d778:	d413      	bmi.n	800d7a2 <_printf_i+0x232>
 800d77a:	68e0      	ldr	r0, [r4, #12]
 800d77c:	9b03      	ldr	r3, [sp, #12]
 800d77e:	4298      	cmp	r0, r3
 800d780:	bfb8      	it	lt
 800d782:	4618      	movlt	r0, r3
 800d784:	e7a6      	b.n	800d6d4 <_printf_i+0x164>
 800d786:	2301      	movs	r3, #1
 800d788:	4632      	mov	r2, r6
 800d78a:	4649      	mov	r1, r9
 800d78c:	4640      	mov	r0, r8
 800d78e:	47d0      	blx	sl
 800d790:	3001      	adds	r0, #1
 800d792:	d09d      	beq.n	800d6d0 <_printf_i+0x160>
 800d794:	3501      	adds	r5, #1
 800d796:	68e3      	ldr	r3, [r4, #12]
 800d798:	9903      	ldr	r1, [sp, #12]
 800d79a:	1a5b      	subs	r3, r3, r1
 800d79c:	42ab      	cmp	r3, r5
 800d79e:	dcf2      	bgt.n	800d786 <_printf_i+0x216>
 800d7a0:	e7eb      	b.n	800d77a <_printf_i+0x20a>
 800d7a2:	2500      	movs	r5, #0
 800d7a4:	f104 0619 	add.w	r6, r4, #25
 800d7a8:	e7f5      	b.n	800d796 <_printf_i+0x226>
 800d7aa:	bf00      	nop
 800d7ac:	0800e590 	.word	0x0800e590
 800d7b0:	0800e5a1 	.word	0x0800e5a1

0800d7b4 <_scanf_chars>:
 800d7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7b8:	4615      	mov	r5, r2
 800d7ba:	688a      	ldr	r2, [r1, #8]
 800d7bc:	4680      	mov	r8, r0
 800d7be:	460c      	mov	r4, r1
 800d7c0:	b932      	cbnz	r2, 800d7d0 <_scanf_chars+0x1c>
 800d7c2:	698a      	ldr	r2, [r1, #24]
 800d7c4:	2a00      	cmp	r2, #0
 800d7c6:	bf0c      	ite	eq
 800d7c8:	2201      	moveq	r2, #1
 800d7ca:	f04f 32ff 	movne.w	r2, #4294967295
 800d7ce:	608a      	str	r2, [r1, #8]
 800d7d0:	6822      	ldr	r2, [r4, #0]
 800d7d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d864 <_scanf_chars+0xb0>
 800d7d6:	06d1      	lsls	r1, r2, #27
 800d7d8:	bf5f      	itttt	pl
 800d7da:	681a      	ldrpl	r2, [r3, #0]
 800d7dc:	1d11      	addpl	r1, r2, #4
 800d7de:	6019      	strpl	r1, [r3, #0]
 800d7e0:	6816      	ldrpl	r6, [r2, #0]
 800d7e2:	2700      	movs	r7, #0
 800d7e4:	69a0      	ldr	r0, [r4, #24]
 800d7e6:	b188      	cbz	r0, 800d80c <_scanf_chars+0x58>
 800d7e8:	2801      	cmp	r0, #1
 800d7ea:	d107      	bne.n	800d7fc <_scanf_chars+0x48>
 800d7ec:	682a      	ldr	r2, [r5, #0]
 800d7ee:	7811      	ldrb	r1, [r2, #0]
 800d7f0:	6962      	ldr	r2, [r4, #20]
 800d7f2:	5c52      	ldrb	r2, [r2, r1]
 800d7f4:	b952      	cbnz	r2, 800d80c <_scanf_chars+0x58>
 800d7f6:	2f00      	cmp	r7, #0
 800d7f8:	d031      	beq.n	800d85e <_scanf_chars+0xaa>
 800d7fa:	e022      	b.n	800d842 <_scanf_chars+0x8e>
 800d7fc:	2802      	cmp	r0, #2
 800d7fe:	d120      	bne.n	800d842 <_scanf_chars+0x8e>
 800d800:	682b      	ldr	r3, [r5, #0]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d808:	071b      	lsls	r3, r3, #28
 800d80a:	d41a      	bmi.n	800d842 <_scanf_chars+0x8e>
 800d80c:	6823      	ldr	r3, [r4, #0]
 800d80e:	06da      	lsls	r2, r3, #27
 800d810:	bf5e      	ittt	pl
 800d812:	682b      	ldrpl	r3, [r5, #0]
 800d814:	781b      	ldrbpl	r3, [r3, #0]
 800d816:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d81a:	682a      	ldr	r2, [r5, #0]
 800d81c:	686b      	ldr	r3, [r5, #4]
 800d81e:	3201      	adds	r2, #1
 800d820:	602a      	str	r2, [r5, #0]
 800d822:	68a2      	ldr	r2, [r4, #8]
 800d824:	3b01      	subs	r3, #1
 800d826:	3a01      	subs	r2, #1
 800d828:	606b      	str	r3, [r5, #4]
 800d82a:	3701      	adds	r7, #1
 800d82c:	60a2      	str	r2, [r4, #8]
 800d82e:	b142      	cbz	r2, 800d842 <_scanf_chars+0x8e>
 800d830:	2b00      	cmp	r3, #0
 800d832:	dcd7      	bgt.n	800d7e4 <_scanf_chars+0x30>
 800d834:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d838:	4629      	mov	r1, r5
 800d83a:	4640      	mov	r0, r8
 800d83c:	4798      	blx	r3
 800d83e:	2800      	cmp	r0, #0
 800d840:	d0d0      	beq.n	800d7e4 <_scanf_chars+0x30>
 800d842:	6823      	ldr	r3, [r4, #0]
 800d844:	f013 0310 	ands.w	r3, r3, #16
 800d848:	d105      	bne.n	800d856 <_scanf_chars+0xa2>
 800d84a:	68e2      	ldr	r2, [r4, #12]
 800d84c:	3201      	adds	r2, #1
 800d84e:	60e2      	str	r2, [r4, #12]
 800d850:	69a2      	ldr	r2, [r4, #24]
 800d852:	b102      	cbz	r2, 800d856 <_scanf_chars+0xa2>
 800d854:	7033      	strb	r3, [r6, #0]
 800d856:	6923      	ldr	r3, [r4, #16]
 800d858:	443b      	add	r3, r7
 800d85a:	6123      	str	r3, [r4, #16]
 800d85c:	2000      	movs	r0, #0
 800d85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d862:	bf00      	nop
 800d864:	0800e5ce 	.word	0x0800e5ce

0800d868 <_scanf_i>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	4698      	mov	r8, r3
 800d86e:	4b74      	ldr	r3, [pc, #464]	; (800da40 <_scanf_i+0x1d8>)
 800d870:	460c      	mov	r4, r1
 800d872:	4682      	mov	sl, r0
 800d874:	4616      	mov	r6, r2
 800d876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d87a:	b087      	sub	sp, #28
 800d87c:	ab03      	add	r3, sp, #12
 800d87e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d882:	4b70      	ldr	r3, [pc, #448]	; (800da44 <_scanf_i+0x1dc>)
 800d884:	69a1      	ldr	r1, [r4, #24]
 800d886:	4a70      	ldr	r2, [pc, #448]	; (800da48 <_scanf_i+0x1e0>)
 800d888:	2903      	cmp	r1, #3
 800d88a:	bf18      	it	ne
 800d88c:	461a      	movne	r2, r3
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	9201      	str	r2, [sp, #4]
 800d892:	1e5a      	subs	r2, r3, #1
 800d894:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d898:	bf88      	it	hi
 800d89a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d89e:	4627      	mov	r7, r4
 800d8a0:	bf82      	ittt	hi
 800d8a2:	eb03 0905 	addhi.w	r9, r3, r5
 800d8a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d8aa:	60a3      	strhi	r3, [r4, #8]
 800d8ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d8b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d8b4:	bf98      	it	ls
 800d8b6:	f04f 0900 	movls.w	r9, #0
 800d8ba:	6023      	str	r3, [r4, #0]
 800d8bc:	463d      	mov	r5, r7
 800d8be:	f04f 0b00 	mov.w	fp, #0
 800d8c2:	6831      	ldr	r1, [r6, #0]
 800d8c4:	ab03      	add	r3, sp, #12
 800d8c6:	7809      	ldrb	r1, [r1, #0]
 800d8c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d8cc:	2202      	movs	r2, #2
 800d8ce:	f7f2 fcb7 	bl	8000240 <memchr>
 800d8d2:	b328      	cbz	r0, 800d920 <_scanf_i+0xb8>
 800d8d4:	f1bb 0f01 	cmp.w	fp, #1
 800d8d8:	d159      	bne.n	800d98e <_scanf_i+0x126>
 800d8da:	6862      	ldr	r2, [r4, #4]
 800d8dc:	b92a      	cbnz	r2, 800d8ea <_scanf_i+0x82>
 800d8de:	6822      	ldr	r2, [r4, #0]
 800d8e0:	2308      	movs	r3, #8
 800d8e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8e6:	6063      	str	r3, [r4, #4]
 800d8e8:	6022      	str	r2, [r4, #0]
 800d8ea:	6822      	ldr	r2, [r4, #0]
 800d8ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d8f0:	6022      	str	r2, [r4, #0]
 800d8f2:	68a2      	ldr	r2, [r4, #8]
 800d8f4:	1e51      	subs	r1, r2, #1
 800d8f6:	60a1      	str	r1, [r4, #8]
 800d8f8:	b192      	cbz	r2, 800d920 <_scanf_i+0xb8>
 800d8fa:	6832      	ldr	r2, [r6, #0]
 800d8fc:	1c51      	adds	r1, r2, #1
 800d8fe:	6031      	str	r1, [r6, #0]
 800d900:	7812      	ldrb	r2, [r2, #0]
 800d902:	f805 2b01 	strb.w	r2, [r5], #1
 800d906:	6872      	ldr	r2, [r6, #4]
 800d908:	3a01      	subs	r2, #1
 800d90a:	2a00      	cmp	r2, #0
 800d90c:	6072      	str	r2, [r6, #4]
 800d90e:	dc07      	bgt.n	800d920 <_scanf_i+0xb8>
 800d910:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d914:	4631      	mov	r1, r6
 800d916:	4650      	mov	r0, sl
 800d918:	4790      	blx	r2
 800d91a:	2800      	cmp	r0, #0
 800d91c:	f040 8085 	bne.w	800da2a <_scanf_i+0x1c2>
 800d920:	f10b 0b01 	add.w	fp, fp, #1
 800d924:	f1bb 0f03 	cmp.w	fp, #3
 800d928:	d1cb      	bne.n	800d8c2 <_scanf_i+0x5a>
 800d92a:	6863      	ldr	r3, [r4, #4]
 800d92c:	b90b      	cbnz	r3, 800d932 <_scanf_i+0xca>
 800d92e:	230a      	movs	r3, #10
 800d930:	6063      	str	r3, [r4, #4]
 800d932:	6863      	ldr	r3, [r4, #4]
 800d934:	4945      	ldr	r1, [pc, #276]	; (800da4c <_scanf_i+0x1e4>)
 800d936:	6960      	ldr	r0, [r4, #20]
 800d938:	1ac9      	subs	r1, r1, r3
 800d93a:	f000 f937 	bl	800dbac <__sccl>
 800d93e:	f04f 0b00 	mov.w	fp, #0
 800d942:	68a3      	ldr	r3, [r4, #8]
 800d944:	6822      	ldr	r2, [r4, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d03d      	beq.n	800d9c6 <_scanf_i+0x15e>
 800d94a:	6831      	ldr	r1, [r6, #0]
 800d94c:	6960      	ldr	r0, [r4, #20]
 800d94e:	f891 c000 	ldrb.w	ip, [r1]
 800d952:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d956:	2800      	cmp	r0, #0
 800d958:	d035      	beq.n	800d9c6 <_scanf_i+0x15e>
 800d95a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d95e:	d124      	bne.n	800d9aa <_scanf_i+0x142>
 800d960:	0510      	lsls	r0, r2, #20
 800d962:	d522      	bpl.n	800d9aa <_scanf_i+0x142>
 800d964:	f10b 0b01 	add.w	fp, fp, #1
 800d968:	f1b9 0f00 	cmp.w	r9, #0
 800d96c:	d003      	beq.n	800d976 <_scanf_i+0x10e>
 800d96e:	3301      	adds	r3, #1
 800d970:	f109 39ff 	add.w	r9, r9, #4294967295
 800d974:	60a3      	str	r3, [r4, #8]
 800d976:	6873      	ldr	r3, [r6, #4]
 800d978:	3b01      	subs	r3, #1
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	6073      	str	r3, [r6, #4]
 800d97e:	dd1b      	ble.n	800d9b8 <_scanf_i+0x150>
 800d980:	6833      	ldr	r3, [r6, #0]
 800d982:	3301      	adds	r3, #1
 800d984:	6033      	str	r3, [r6, #0]
 800d986:	68a3      	ldr	r3, [r4, #8]
 800d988:	3b01      	subs	r3, #1
 800d98a:	60a3      	str	r3, [r4, #8]
 800d98c:	e7d9      	b.n	800d942 <_scanf_i+0xda>
 800d98e:	f1bb 0f02 	cmp.w	fp, #2
 800d992:	d1ae      	bne.n	800d8f2 <_scanf_i+0x8a>
 800d994:	6822      	ldr	r2, [r4, #0]
 800d996:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d99a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d99e:	d1bf      	bne.n	800d920 <_scanf_i+0xb8>
 800d9a0:	2310      	movs	r3, #16
 800d9a2:	6063      	str	r3, [r4, #4]
 800d9a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d9a8:	e7a2      	b.n	800d8f0 <_scanf_i+0x88>
 800d9aa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d9ae:	6022      	str	r2, [r4, #0]
 800d9b0:	780b      	ldrb	r3, [r1, #0]
 800d9b2:	f805 3b01 	strb.w	r3, [r5], #1
 800d9b6:	e7de      	b.n	800d976 <_scanf_i+0x10e>
 800d9b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d9bc:	4631      	mov	r1, r6
 800d9be:	4650      	mov	r0, sl
 800d9c0:	4798      	blx	r3
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	d0df      	beq.n	800d986 <_scanf_i+0x11e>
 800d9c6:	6823      	ldr	r3, [r4, #0]
 800d9c8:	05d9      	lsls	r1, r3, #23
 800d9ca:	d50d      	bpl.n	800d9e8 <_scanf_i+0x180>
 800d9cc:	42bd      	cmp	r5, r7
 800d9ce:	d909      	bls.n	800d9e4 <_scanf_i+0x17c>
 800d9d0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d9d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9d8:	4632      	mov	r2, r6
 800d9da:	4650      	mov	r0, sl
 800d9dc:	4798      	blx	r3
 800d9de:	f105 39ff 	add.w	r9, r5, #4294967295
 800d9e2:	464d      	mov	r5, r9
 800d9e4:	42bd      	cmp	r5, r7
 800d9e6:	d028      	beq.n	800da3a <_scanf_i+0x1d2>
 800d9e8:	6822      	ldr	r2, [r4, #0]
 800d9ea:	f012 0210 	ands.w	r2, r2, #16
 800d9ee:	d113      	bne.n	800da18 <_scanf_i+0x1b0>
 800d9f0:	702a      	strb	r2, [r5, #0]
 800d9f2:	6863      	ldr	r3, [r4, #4]
 800d9f4:	9e01      	ldr	r6, [sp, #4]
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	4650      	mov	r0, sl
 800d9fa:	47b0      	blx	r6
 800d9fc:	f8d8 3000 	ldr.w	r3, [r8]
 800da00:	6821      	ldr	r1, [r4, #0]
 800da02:	1d1a      	adds	r2, r3, #4
 800da04:	f8c8 2000 	str.w	r2, [r8]
 800da08:	f011 0f20 	tst.w	r1, #32
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	d00f      	beq.n	800da30 <_scanf_i+0x1c8>
 800da10:	6018      	str	r0, [r3, #0]
 800da12:	68e3      	ldr	r3, [r4, #12]
 800da14:	3301      	adds	r3, #1
 800da16:	60e3      	str	r3, [r4, #12]
 800da18:	6923      	ldr	r3, [r4, #16]
 800da1a:	1bed      	subs	r5, r5, r7
 800da1c:	445d      	add	r5, fp
 800da1e:	442b      	add	r3, r5
 800da20:	6123      	str	r3, [r4, #16]
 800da22:	2000      	movs	r0, #0
 800da24:	b007      	add	sp, #28
 800da26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da2a:	f04f 0b00 	mov.w	fp, #0
 800da2e:	e7ca      	b.n	800d9c6 <_scanf_i+0x15e>
 800da30:	07ca      	lsls	r2, r1, #31
 800da32:	bf4c      	ite	mi
 800da34:	8018      	strhmi	r0, [r3, #0]
 800da36:	6018      	strpl	r0, [r3, #0]
 800da38:	e7eb      	b.n	800da12 <_scanf_i+0x1aa>
 800da3a:	2001      	movs	r0, #1
 800da3c:	e7f2      	b.n	800da24 <_scanf_i+0x1bc>
 800da3e:	bf00      	nop
 800da40:	0800e4f4 	.word	0x0800e4f4
 800da44:	0800e0b1 	.word	0x0800e0b1
 800da48:	0800dfc9 	.word	0x0800dfc9
 800da4c:	0800e5c2 	.word	0x0800e5c2

0800da50 <__sflush_r>:
 800da50:	898a      	ldrh	r2, [r1, #12]
 800da52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da56:	4605      	mov	r5, r0
 800da58:	0710      	lsls	r0, r2, #28
 800da5a:	460c      	mov	r4, r1
 800da5c:	d458      	bmi.n	800db10 <__sflush_r+0xc0>
 800da5e:	684b      	ldr	r3, [r1, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	dc05      	bgt.n	800da70 <__sflush_r+0x20>
 800da64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da66:	2b00      	cmp	r3, #0
 800da68:	dc02      	bgt.n	800da70 <__sflush_r+0x20>
 800da6a:	2000      	movs	r0, #0
 800da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da72:	2e00      	cmp	r6, #0
 800da74:	d0f9      	beq.n	800da6a <__sflush_r+0x1a>
 800da76:	2300      	movs	r3, #0
 800da78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da7c:	682f      	ldr	r7, [r5, #0]
 800da7e:	6a21      	ldr	r1, [r4, #32]
 800da80:	602b      	str	r3, [r5, #0]
 800da82:	d032      	beq.n	800daea <__sflush_r+0x9a>
 800da84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da86:	89a3      	ldrh	r3, [r4, #12]
 800da88:	075a      	lsls	r2, r3, #29
 800da8a:	d505      	bpl.n	800da98 <__sflush_r+0x48>
 800da8c:	6863      	ldr	r3, [r4, #4]
 800da8e:	1ac0      	subs	r0, r0, r3
 800da90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da92:	b10b      	cbz	r3, 800da98 <__sflush_r+0x48>
 800da94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da96:	1ac0      	subs	r0, r0, r3
 800da98:	2300      	movs	r3, #0
 800da9a:	4602      	mov	r2, r0
 800da9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da9e:	6a21      	ldr	r1, [r4, #32]
 800daa0:	4628      	mov	r0, r5
 800daa2:	47b0      	blx	r6
 800daa4:	1c43      	adds	r3, r0, #1
 800daa6:	89a3      	ldrh	r3, [r4, #12]
 800daa8:	d106      	bne.n	800dab8 <__sflush_r+0x68>
 800daaa:	6829      	ldr	r1, [r5, #0]
 800daac:	291d      	cmp	r1, #29
 800daae:	d82b      	bhi.n	800db08 <__sflush_r+0xb8>
 800dab0:	4a29      	ldr	r2, [pc, #164]	; (800db58 <__sflush_r+0x108>)
 800dab2:	410a      	asrs	r2, r1
 800dab4:	07d6      	lsls	r6, r2, #31
 800dab6:	d427      	bmi.n	800db08 <__sflush_r+0xb8>
 800dab8:	2200      	movs	r2, #0
 800daba:	6062      	str	r2, [r4, #4]
 800dabc:	04d9      	lsls	r1, r3, #19
 800dabe:	6922      	ldr	r2, [r4, #16]
 800dac0:	6022      	str	r2, [r4, #0]
 800dac2:	d504      	bpl.n	800dace <__sflush_r+0x7e>
 800dac4:	1c42      	adds	r2, r0, #1
 800dac6:	d101      	bne.n	800dacc <__sflush_r+0x7c>
 800dac8:	682b      	ldr	r3, [r5, #0]
 800daca:	b903      	cbnz	r3, 800dace <__sflush_r+0x7e>
 800dacc:	6560      	str	r0, [r4, #84]	; 0x54
 800dace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dad0:	602f      	str	r7, [r5, #0]
 800dad2:	2900      	cmp	r1, #0
 800dad4:	d0c9      	beq.n	800da6a <__sflush_r+0x1a>
 800dad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dada:	4299      	cmp	r1, r3
 800dadc:	d002      	beq.n	800dae4 <__sflush_r+0x94>
 800dade:	4628      	mov	r0, r5
 800dae0:	f7fe ff72 	bl	800c9c8 <_free_r>
 800dae4:	2000      	movs	r0, #0
 800dae6:	6360      	str	r0, [r4, #52]	; 0x34
 800dae8:	e7c0      	b.n	800da6c <__sflush_r+0x1c>
 800daea:	2301      	movs	r3, #1
 800daec:	4628      	mov	r0, r5
 800daee:	47b0      	blx	r6
 800daf0:	1c41      	adds	r1, r0, #1
 800daf2:	d1c8      	bne.n	800da86 <__sflush_r+0x36>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d0c5      	beq.n	800da86 <__sflush_r+0x36>
 800dafa:	2b1d      	cmp	r3, #29
 800dafc:	d001      	beq.n	800db02 <__sflush_r+0xb2>
 800dafe:	2b16      	cmp	r3, #22
 800db00:	d101      	bne.n	800db06 <__sflush_r+0xb6>
 800db02:	602f      	str	r7, [r5, #0]
 800db04:	e7b1      	b.n	800da6a <__sflush_r+0x1a>
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db0c:	81a3      	strh	r3, [r4, #12]
 800db0e:	e7ad      	b.n	800da6c <__sflush_r+0x1c>
 800db10:	690f      	ldr	r7, [r1, #16]
 800db12:	2f00      	cmp	r7, #0
 800db14:	d0a9      	beq.n	800da6a <__sflush_r+0x1a>
 800db16:	0793      	lsls	r3, r2, #30
 800db18:	680e      	ldr	r6, [r1, #0]
 800db1a:	bf08      	it	eq
 800db1c:	694b      	ldreq	r3, [r1, #20]
 800db1e:	600f      	str	r7, [r1, #0]
 800db20:	bf18      	it	ne
 800db22:	2300      	movne	r3, #0
 800db24:	eba6 0807 	sub.w	r8, r6, r7
 800db28:	608b      	str	r3, [r1, #8]
 800db2a:	f1b8 0f00 	cmp.w	r8, #0
 800db2e:	dd9c      	ble.n	800da6a <__sflush_r+0x1a>
 800db30:	6a21      	ldr	r1, [r4, #32]
 800db32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db34:	4643      	mov	r3, r8
 800db36:	463a      	mov	r2, r7
 800db38:	4628      	mov	r0, r5
 800db3a:	47b0      	blx	r6
 800db3c:	2800      	cmp	r0, #0
 800db3e:	dc06      	bgt.n	800db4e <__sflush_r+0xfe>
 800db40:	89a3      	ldrh	r3, [r4, #12]
 800db42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db46:	81a3      	strh	r3, [r4, #12]
 800db48:	f04f 30ff 	mov.w	r0, #4294967295
 800db4c:	e78e      	b.n	800da6c <__sflush_r+0x1c>
 800db4e:	4407      	add	r7, r0
 800db50:	eba8 0800 	sub.w	r8, r8, r0
 800db54:	e7e9      	b.n	800db2a <__sflush_r+0xda>
 800db56:	bf00      	nop
 800db58:	dfbffffe 	.word	0xdfbffffe

0800db5c <_fflush_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	690b      	ldr	r3, [r1, #16]
 800db60:	4605      	mov	r5, r0
 800db62:	460c      	mov	r4, r1
 800db64:	b913      	cbnz	r3, 800db6c <_fflush_r+0x10>
 800db66:	2500      	movs	r5, #0
 800db68:	4628      	mov	r0, r5
 800db6a:	bd38      	pop	{r3, r4, r5, pc}
 800db6c:	b118      	cbz	r0, 800db76 <_fflush_r+0x1a>
 800db6e:	6a03      	ldr	r3, [r0, #32]
 800db70:	b90b      	cbnz	r3, 800db76 <_fflush_r+0x1a>
 800db72:	f7fe fda5 	bl	800c6c0 <__sinit>
 800db76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d0f3      	beq.n	800db66 <_fflush_r+0xa>
 800db7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db80:	07d0      	lsls	r0, r2, #31
 800db82:	d404      	bmi.n	800db8e <_fflush_r+0x32>
 800db84:	0599      	lsls	r1, r3, #22
 800db86:	d402      	bmi.n	800db8e <_fflush_r+0x32>
 800db88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db8a:	f7fe ff06 	bl	800c99a <__retarget_lock_acquire_recursive>
 800db8e:	4628      	mov	r0, r5
 800db90:	4621      	mov	r1, r4
 800db92:	f7ff ff5d 	bl	800da50 <__sflush_r>
 800db96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db98:	07da      	lsls	r2, r3, #31
 800db9a:	4605      	mov	r5, r0
 800db9c:	d4e4      	bmi.n	800db68 <_fflush_r+0xc>
 800db9e:	89a3      	ldrh	r3, [r4, #12]
 800dba0:	059b      	lsls	r3, r3, #22
 800dba2:	d4e1      	bmi.n	800db68 <_fflush_r+0xc>
 800dba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba6:	f7fe fef9 	bl	800c99c <__retarget_lock_release_recursive>
 800dbaa:	e7dd      	b.n	800db68 <_fflush_r+0xc>

0800dbac <__sccl>:
 800dbac:	b570      	push	{r4, r5, r6, lr}
 800dbae:	780b      	ldrb	r3, [r1, #0]
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	2b5e      	cmp	r3, #94	; 0x5e
 800dbb4:	bf0b      	itete	eq
 800dbb6:	784b      	ldrbeq	r3, [r1, #1]
 800dbb8:	1c4a      	addne	r2, r1, #1
 800dbba:	1c8a      	addeq	r2, r1, #2
 800dbbc:	2100      	movne	r1, #0
 800dbbe:	bf08      	it	eq
 800dbc0:	2101      	moveq	r1, #1
 800dbc2:	3801      	subs	r0, #1
 800dbc4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dbc8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800dbcc:	42a8      	cmp	r0, r5
 800dbce:	d1fb      	bne.n	800dbc8 <__sccl+0x1c>
 800dbd0:	b90b      	cbnz	r3, 800dbd6 <__sccl+0x2a>
 800dbd2:	1e50      	subs	r0, r2, #1
 800dbd4:	bd70      	pop	{r4, r5, r6, pc}
 800dbd6:	f081 0101 	eor.w	r1, r1, #1
 800dbda:	54e1      	strb	r1, [r4, r3]
 800dbdc:	4610      	mov	r0, r2
 800dbde:	4602      	mov	r2, r0
 800dbe0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dbe4:	2d2d      	cmp	r5, #45	; 0x2d
 800dbe6:	d005      	beq.n	800dbf4 <__sccl+0x48>
 800dbe8:	2d5d      	cmp	r5, #93	; 0x5d
 800dbea:	d016      	beq.n	800dc1a <__sccl+0x6e>
 800dbec:	2d00      	cmp	r5, #0
 800dbee:	d0f1      	beq.n	800dbd4 <__sccl+0x28>
 800dbf0:	462b      	mov	r3, r5
 800dbf2:	e7f2      	b.n	800dbda <__sccl+0x2e>
 800dbf4:	7846      	ldrb	r6, [r0, #1]
 800dbf6:	2e5d      	cmp	r6, #93	; 0x5d
 800dbf8:	d0fa      	beq.n	800dbf0 <__sccl+0x44>
 800dbfa:	42b3      	cmp	r3, r6
 800dbfc:	dcf8      	bgt.n	800dbf0 <__sccl+0x44>
 800dbfe:	3002      	adds	r0, #2
 800dc00:	461a      	mov	r2, r3
 800dc02:	3201      	adds	r2, #1
 800dc04:	4296      	cmp	r6, r2
 800dc06:	54a1      	strb	r1, [r4, r2]
 800dc08:	dcfb      	bgt.n	800dc02 <__sccl+0x56>
 800dc0a:	1af2      	subs	r2, r6, r3
 800dc0c:	3a01      	subs	r2, #1
 800dc0e:	1c5d      	adds	r5, r3, #1
 800dc10:	42b3      	cmp	r3, r6
 800dc12:	bfa8      	it	ge
 800dc14:	2200      	movge	r2, #0
 800dc16:	18ab      	adds	r3, r5, r2
 800dc18:	e7e1      	b.n	800dbde <__sccl+0x32>
 800dc1a:	4610      	mov	r0, r2
 800dc1c:	e7da      	b.n	800dbd4 <__sccl+0x28>

0800dc1e <__submore>:
 800dc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc22:	460c      	mov	r4, r1
 800dc24:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dc26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc2a:	4299      	cmp	r1, r3
 800dc2c:	d11d      	bne.n	800dc6a <__submore+0x4c>
 800dc2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dc32:	f7fe ff35 	bl	800caa0 <_malloc_r>
 800dc36:	b918      	cbnz	r0, 800dc40 <__submore+0x22>
 800dc38:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc44:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc46:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc4a:	6360      	str	r0, [r4, #52]	; 0x34
 800dc4c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dc50:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dc54:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dc58:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc5c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dc60:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dc64:	6020      	str	r0, [r4, #0]
 800dc66:	2000      	movs	r0, #0
 800dc68:	e7e8      	b.n	800dc3c <__submore+0x1e>
 800dc6a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dc6c:	0077      	lsls	r7, r6, #1
 800dc6e:	463a      	mov	r2, r7
 800dc70:	f000 f8f8 	bl	800de64 <_realloc_r>
 800dc74:	4605      	mov	r5, r0
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d0de      	beq.n	800dc38 <__submore+0x1a>
 800dc7a:	eb00 0806 	add.w	r8, r0, r6
 800dc7e:	4601      	mov	r1, r0
 800dc80:	4632      	mov	r2, r6
 800dc82:	4640      	mov	r0, r8
 800dc84:	f7fe fe8b 	bl	800c99e <memcpy>
 800dc88:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dc8c:	f8c4 8000 	str.w	r8, [r4]
 800dc90:	e7e9      	b.n	800dc66 <__submore+0x48>

0800dc92 <__swbuf_r>:
 800dc92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc94:	460e      	mov	r6, r1
 800dc96:	4614      	mov	r4, r2
 800dc98:	4605      	mov	r5, r0
 800dc9a:	b118      	cbz	r0, 800dca4 <__swbuf_r+0x12>
 800dc9c:	6a03      	ldr	r3, [r0, #32]
 800dc9e:	b90b      	cbnz	r3, 800dca4 <__swbuf_r+0x12>
 800dca0:	f7fe fd0e 	bl	800c6c0 <__sinit>
 800dca4:	69a3      	ldr	r3, [r4, #24]
 800dca6:	60a3      	str	r3, [r4, #8]
 800dca8:	89a3      	ldrh	r3, [r4, #12]
 800dcaa:	071a      	lsls	r2, r3, #28
 800dcac:	d525      	bpl.n	800dcfa <__swbuf_r+0x68>
 800dcae:	6923      	ldr	r3, [r4, #16]
 800dcb0:	b31b      	cbz	r3, 800dcfa <__swbuf_r+0x68>
 800dcb2:	6823      	ldr	r3, [r4, #0]
 800dcb4:	6922      	ldr	r2, [r4, #16]
 800dcb6:	1a98      	subs	r0, r3, r2
 800dcb8:	6963      	ldr	r3, [r4, #20]
 800dcba:	b2f6      	uxtb	r6, r6
 800dcbc:	4283      	cmp	r3, r0
 800dcbe:	4637      	mov	r7, r6
 800dcc0:	dc04      	bgt.n	800dccc <__swbuf_r+0x3a>
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	f7ff ff49 	bl	800db5c <_fflush_r>
 800dcca:	b9e0      	cbnz	r0, 800dd06 <__swbuf_r+0x74>
 800dccc:	68a3      	ldr	r3, [r4, #8]
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	60a3      	str	r3, [r4, #8]
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	1c5a      	adds	r2, r3, #1
 800dcd6:	6022      	str	r2, [r4, #0]
 800dcd8:	701e      	strb	r6, [r3, #0]
 800dcda:	6962      	ldr	r2, [r4, #20]
 800dcdc:	1c43      	adds	r3, r0, #1
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d004      	beq.n	800dcec <__swbuf_r+0x5a>
 800dce2:	89a3      	ldrh	r3, [r4, #12]
 800dce4:	07db      	lsls	r3, r3, #31
 800dce6:	d506      	bpl.n	800dcf6 <__swbuf_r+0x64>
 800dce8:	2e0a      	cmp	r6, #10
 800dcea:	d104      	bne.n	800dcf6 <__swbuf_r+0x64>
 800dcec:	4621      	mov	r1, r4
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f7ff ff34 	bl	800db5c <_fflush_r>
 800dcf4:	b938      	cbnz	r0, 800dd06 <__swbuf_r+0x74>
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcfa:	4621      	mov	r1, r4
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	f000 f805 	bl	800dd0c <__swsetup_r>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d0d5      	beq.n	800dcb2 <__swbuf_r+0x20>
 800dd06:	f04f 37ff 	mov.w	r7, #4294967295
 800dd0a:	e7f4      	b.n	800dcf6 <__swbuf_r+0x64>

0800dd0c <__swsetup_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4b2a      	ldr	r3, [pc, #168]	; (800ddb8 <__swsetup_r+0xac>)
 800dd10:	4605      	mov	r5, r0
 800dd12:	6818      	ldr	r0, [r3, #0]
 800dd14:	460c      	mov	r4, r1
 800dd16:	b118      	cbz	r0, 800dd20 <__swsetup_r+0x14>
 800dd18:	6a03      	ldr	r3, [r0, #32]
 800dd1a:	b90b      	cbnz	r3, 800dd20 <__swsetup_r+0x14>
 800dd1c:	f7fe fcd0 	bl	800c6c0 <__sinit>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd26:	0718      	lsls	r0, r3, #28
 800dd28:	d422      	bmi.n	800dd70 <__swsetup_r+0x64>
 800dd2a:	06d9      	lsls	r1, r3, #27
 800dd2c:	d407      	bmi.n	800dd3e <__swsetup_r+0x32>
 800dd2e:	2309      	movs	r3, #9
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd36:	81a3      	strh	r3, [r4, #12]
 800dd38:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3c:	e034      	b.n	800dda8 <__swsetup_r+0x9c>
 800dd3e:	0758      	lsls	r0, r3, #29
 800dd40:	d512      	bpl.n	800dd68 <__swsetup_r+0x5c>
 800dd42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd44:	b141      	cbz	r1, 800dd58 <__swsetup_r+0x4c>
 800dd46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd4a:	4299      	cmp	r1, r3
 800dd4c:	d002      	beq.n	800dd54 <__swsetup_r+0x48>
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f7fe fe3a 	bl	800c9c8 <_free_r>
 800dd54:	2300      	movs	r3, #0
 800dd56:	6363      	str	r3, [r4, #52]	; 0x34
 800dd58:	89a3      	ldrh	r3, [r4, #12]
 800dd5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd5e:	81a3      	strh	r3, [r4, #12]
 800dd60:	2300      	movs	r3, #0
 800dd62:	6063      	str	r3, [r4, #4]
 800dd64:	6923      	ldr	r3, [r4, #16]
 800dd66:	6023      	str	r3, [r4, #0]
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	f043 0308 	orr.w	r3, r3, #8
 800dd6e:	81a3      	strh	r3, [r4, #12]
 800dd70:	6923      	ldr	r3, [r4, #16]
 800dd72:	b94b      	cbnz	r3, 800dd88 <__swsetup_r+0x7c>
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd7e:	d003      	beq.n	800dd88 <__swsetup_r+0x7c>
 800dd80:	4621      	mov	r1, r4
 800dd82:	4628      	mov	r0, r5
 800dd84:	f000 f9bc 	bl	800e100 <__smakebuf_r>
 800dd88:	89a0      	ldrh	r0, [r4, #12]
 800dd8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd8e:	f010 0301 	ands.w	r3, r0, #1
 800dd92:	d00a      	beq.n	800ddaa <__swsetup_r+0x9e>
 800dd94:	2300      	movs	r3, #0
 800dd96:	60a3      	str	r3, [r4, #8]
 800dd98:	6963      	ldr	r3, [r4, #20]
 800dd9a:	425b      	negs	r3, r3
 800dd9c:	61a3      	str	r3, [r4, #24]
 800dd9e:	6923      	ldr	r3, [r4, #16]
 800dda0:	b943      	cbnz	r3, 800ddb4 <__swsetup_r+0xa8>
 800dda2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dda6:	d1c4      	bne.n	800dd32 <__swsetup_r+0x26>
 800dda8:	bd38      	pop	{r3, r4, r5, pc}
 800ddaa:	0781      	lsls	r1, r0, #30
 800ddac:	bf58      	it	pl
 800ddae:	6963      	ldrpl	r3, [r4, #20]
 800ddb0:	60a3      	str	r3, [r4, #8]
 800ddb2:	e7f4      	b.n	800dd9e <__swsetup_r+0x92>
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	e7f7      	b.n	800dda8 <__swsetup_r+0x9c>
 800ddb8:	20000164 	.word	0x20000164

0800ddbc <_raise_r>:
 800ddbc:	291f      	cmp	r1, #31
 800ddbe:	b538      	push	{r3, r4, r5, lr}
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	460d      	mov	r5, r1
 800ddc4:	d904      	bls.n	800ddd0 <_raise_r+0x14>
 800ddc6:	2316      	movs	r3, #22
 800ddc8:	6003      	str	r3, [r0, #0]
 800ddca:	f04f 30ff 	mov.w	r0, #4294967295
 800ddce:	bd38      	pop	{r3, r4, r5, pc}
 800ddd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ddd2:	b112      	cbz	r2, 800ddda <_raise_r+0x1e>
 800ddd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddd8:	b94b      	cbnz	r3, 800ddee <_raise_r+0x32>
 800ddda:	4620      	mov	r0, r4
 800dddc:	f000 f830 	bl	800de40 <_getpid_r>
 800dde0:	462a      	mov	r2, r5
 800dde2:	4601      	mov	r1, r0
 800dde4:	4620      	mov	r0, r4
 800dde6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddea:	f000 b817 	b.w	800de1c <_kill_r>
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d00a      	beq.n	800de08 <_raise_r+0x4c>
 800ddf2:	1c59      	adds	r1, r3, #1
 800ddf4:	d103      	bne.n	800ddfe <_raise_r+0x42>
 800ddf6:	2316      	movs	r3, #22
 800ddf8:	6003      	str	r3, [r0, #0]
 800ddfa:	2001      	movs	r0, #1
 800ddfc:	e7e7      	b.n	800ddce <_raise_r+0x12>
 800ddfe:	2400      	movs	r4, #0
 800de00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de04:	4628      	mov	r0, r5
 800de06:	4798      	blx	r3
 800de08:	2000      	movs	r0, #0
 800de0a:	e7e0      	b.n	800ddce <_raise_r+0x12>

0800de0c <raise>:
 800de0c:	4b02      	ldr	r3, [pc, #8]	; (800de18 <raise+0xc>)
 800de0e:	4601      	mov	r1, r0
 800de10:	6818      	ldr	r0, [r3, #0]
 800de12:	f7ff bfd3 	b.w	800ddbc <_raise_r>
 800de16:	bf00      	nop
 800de18:	20000164 	.word	0x20000164

0800de1c <_kill_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	4d07      	ldr	r5, [pc, #28]	; (800de3c <_kill_r+0x20>)
 800de20:	2300      	movs	r3, #0
 800de22:	4604      	mov	r4, r0
 800de24:	4608      	mov	r0, r1
 800de26:	4611      	mov	r1, r2
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	f7f3 f845 	bl	8000eb8 <_kill>
 800de2e:	1c43      	adds	r3, r0, #1
 800de30:	d102      	bne.n	800de38 <_kill_r+0x1c>
 800de32:	682b      	ldr	r3, [r5, #0]
 800de34:	b103      	cbz	r3, 800de38 <_kill_r+0x1c>
 800de36:	6023      	str	r3, [r4, #0]
 800de38:	bd38      	pop	{r3, r4, r5, pc}
 800de3a:	bf00      	nop
 800de3c:	20002334 	.word	0x20002334

0800de40 <_getpid_r>:
 800de40:	f7f3 b832 	b.w	8000ea8 <_getpid>

0800de44 <_sbrk_r>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4d06      	ldr	r5, [pc, #24]	; (800de60 <_sbrk_r+0x1c>)
 800de48:	2300      	movs	r3, #0
 800de4a:	4604      	mov	r4, r0
 800de4c:	4608      	mov	r0, r1
 800de4e:	602b      	str	r3, [r5, #0]
 800de50:	f7f3 f8ba 	bl	8000fc8 <_sbrk>
 800de54:	1c43      	adds	r3, r0, #1
 800de56:	d102      	bne.n	800de5e <_sbrk_r+0x1a>
 800de58:	682b      	ldr	r3, [r5, #0]
 800de5a:	b103      	cbz	r3, 800de5e <_sbrk_r+0x1a>
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
 800de60:	20002334 	.word	0x20002334

0800de64 <_realloc_r>:
 800de64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de68:	4680      	mov	r8, r0
 800de6a:	4614      	mov	r4, r2
 800de6c:	460e      	mov	r6, r1
 800de6e:	b921      	cbnz	r1, 800de7a <_realloc_r+0x16>
 800de70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de74:	4611      	mov	r1, r2
 800de76:	f7fe be13 	b.w	800caa0 <_malloc_r>
 800de7a:	b92a      	cbnz	r2, 800de88 <_realloc_r+0x24>
 800de7c:	f7fe fda4 	bl	800c9c8 <_free_r>
 800de80:	4625      	mov	r5, r4
 800de82:	4628      	mov	r0, r5
 800de84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de88:	f000 f998 	bl	800e1bc <_malloc_usable_size_r>
 800de8c:	4284      	cmp	r4, r0
 800de8e:	4607      	mov	r7, r0
 800de90:	d802      	bhi.n	800de98 <_realloc_r+0x34>
 800de92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de96:	d812      	bhi.n	800debe <_realloc_r+0x5a>
 800de98:	4621      	mov	r1, r4
 800de9a:	4640      	mov	r0, r8
 800de9c:	f7fe fe00 	bl	800caa0 <_malloc_r>
 800dea0:	4605      	mov	r5, r0
 800dea2:	2800      	cmp	r0, #0
 800dea4:	d0ed      	beq.n	800de82 <_realloc_r+0x1e>
 800dea6:	42bc      	cmp	r4, r7
 800dea8:	4622      	mov	r2, r4
 800deaa:	4631      	mov	r1, r6
 800deac:	bf28      	it	cs
 800deae:	463a      	movcs	r2, r7
 800deb0:	f7fe fd75 	bl	800c99e <memcpy>
 800deb4:	4631      	mov	r1, r6
 800deb6:	4640      	mov	r0, r8
 800deb8:	f7fe fd86 	bl	800c9c8 <_free_r>
 800debc:	e7e1      	b.n	800de82 <_realloc_r+0x1e>
 800debe:	4635      	mov	r5, r6
 800dec0:	e7df      	b.n	800de82 <_realloc_r+0x1e>
	...

0800dec4 <_strtol_l.constprop.0>:
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deca:	d001      	beq.n	800ded0 <_strtol_l.constprop.0+0xc>
 800decc:	2b24      	cmp	r3, #36	; 0x24
 800dece:	d906      	bls.n	800dede <_strtol_l.constprop.0+0x1a>
 800ded0:	f7fe fd38 	bl	800c944 <__errno>
 800ded4:	2316      	movs	r3, #22
 800ded6:	6003      	str	r3, [r0, #0]
 800ded8:	2000      	movs	r0, #0
 800deda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dede:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dfc4 <_strtol_l.constprop.0+0x100>
 800dee2:	460d      	mov	r5, r1
 800dee4:	462e      	mov	r6, r5
 800dee6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800deea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800deee:	f017 0708 	ands.w	r7, r7, #8
 800def2:	d1f7      	bne.n	800dee4 <_strtol_l.constprop.0+0x20>
 800def4:	2c2d      	cmp	r4, #45	; 0x2d
 800def6:	d132      	bne.n	800df5e <_strtol_l.constprop.0+0x9a>
 800def8:	782c      	ldrb	r4, [r5, #0]
 800defa:	2701      	movs	r7, #1
 800defc:	1cb5      	adds	r5, r6, #2
 800defe:	2b00      	cmp	r3, #0
 800df00:	d05b      	beq.n	800dfba <_strtol_l.constprop.0+0xf6>
 800df02:	2b10      	cmp	r3, #16
 800df04:	d109      	bne.n	800df1a <_strtol_l.constprop.0+0x56>
 800df06:	2c30      	cmp	r4, #48	; 0x30
 800df08:	d107      	bne.n	800df1a <_strtol_l.constprop.0+0x56>
 800df0a:	782c      	ldrb	r4, [r5, #0]
 800df0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800df10:	2c58      	cmp	r4, #88	; 0x58
 800df12:	d14d      	bne.n	800dfb0 <_strtol_l.constprop.0+0xec>
 800df14:	786c      	ldrb	r4, [r5, #1]
 800df16:	2310      	movs	r3, #16
 800df18:	3502      	adds	r5, #2
 800df1a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800df1e:	f108 38ff 	add.w	r8, r8, #4294967295
 800df22:	f04f 0e00 	mov.w	lr, #0
 800df26:	fbb8 f9f3 	udiv	r9, r8, r3
 800df2a:	4676      	mov	r6, lr
 800df2c:	fb03 8a19 	mls	sl, r3, r9, r8
 800df30:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800df34:	f1bc 0f09 	cmp.w	ip, #9
 800df38:	d816      	bhi.n	800df68 <_strtol_l.constprop.0+0xa4>
 800df3a:	4664      	mov	r4, ip
 800df3c:	42a3      	cmp	r3, r4
 800df3e:	dd24      	ble.n	800df8a <_strtol_l.constprop.0+0xc6>
 800df40:	f1be 3fff 	cmp.w	lr, #4294967295
 800df44:	d008      	beq.n	800df58 <_strtol_l.constprop.0+0x94>
 800df46:	45b1      	cmp	r9, r6
 800df48:	d31c      	bcc.n	800df84 <_strtol_l.constprop.0+0xc0>
 800df4a:	d101      	bne.n	800df50 <_strtol_l.constprop.0+0x8c>
 800df4c:	45a2      	cmp	sl, r4
 800df4e:	db19      	blt.n	800df84 <_strtol_l.constprop.0+0xc0>
 800df50:	fb06 4603 	mla	r6, r6, r3, r4
 800df54:	f04f 0e01 	mov.w	lr, #1
 800df58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df5c:	e7e8      	b.n	800df30 <_strtol_l.constprop.0+0x6c>
 800df5e:	2c2b      	cmp	r4, #43	; 0x2b
 800df60:	bf04      	itt	eq
 800df62:	782c      	ldrbeq	r4, [r5, #0]
 800df64:	1cb5      	addeq	r5, r6, #2
 800df66:	e7ca      	b.n	800defe <_strtol_l.constprop.0+0x3a>
 800df68:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800df6c:	f1bc 0f19 	cmp.w	ip, #25
 800df70:	d801      	bhi.n	800df76 <_strtol_l.constprop.0+0xb2>
 800df72:	3c37      	subs	r4, #55	; 0x37
 800df74:	e7e2      	b.n	800df3c <_strtol_l.constprop.0+0x78>
 800df76:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800df7a:	f1bc 0f19 	cmp.w	ip, #25
 800df7e:	d804      	bhi.n	800df8a <_strtol_l.constprop.0+0xc6>
 800df80:	3c57      	subs	r4, #87	; 0x57
 800df82:	e7db      	b.n	800df3c <_strtol_l.constprop.0+0x78>
 800df84:	f04f 3eff 	mov.w	lr, #4294967295
 800df88:	e7e6      	b.n	800df58 <_strtol_l.constprop.0+0x94>
 800df8a:	f1be 3fff 	cmp.w	lr, #4294967295
 800df8e:	d105      	bne.n	800df9c <_strtol_l.constprop.0+0xd8>
 800df90:	2322      	movs	r3, #34	; 0x22
 800df92:	6003      	str	r3, [r0, #0]
 800df94:	4646      	mov	r6, r8
 800df96:	b942      	cbnz	r2, 800dfaa <_strtol_l.constprop.0+0xe6>
 800df98:	4630      	mov	r0, r6
 800df9a:	e79e      	b.n	800deda <_strtol_l.constprop.0+0x16>
 800df9c:	b107      	cbz	r7, 800dfa0 <_strtol_l.constprop.0+0xdc>
 800df9e:	4276      	negs	r6, r6
 800dfa0:	2a00      	cmp	r2, #0
 800dfa2:	d0f9      	beq.n	800df98 <_strtol_l.constprop.0+0xd4>
 800dfa4:	f1be 0f00 	cmp.w	lr, #0
 800dfa8:	d000      	beq.n	800dfac <_strtol_l.constprop.0+0xe8>
 800dfaa:	1e69      	subs	r1, r5, #1
 800dfac:	6011      	str	r1, [r2, #0]
 800dfae:	e7f3      	b.n	800df98 <_strtol_l.constprop.0+0xd4>
 800dfb0:	2430      	movs	r4, #48	; 0x30
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1b1      	bne.n	800df1a <_strtol_l.constprop.0+0x56>
 800dfb6:	2308      	movs	r3, #8
 800dfb8:	e7af      	b.n	800df1a <_strtol_l.constprop.0+0x56>
 800dfba:	2c30      	cmp	r4, #48	; 0x30
 800dfbc:	d0a5      	beq.n	800df0a <_strtol_l.constprop.0+0x46>
 800dfbe:	230a      	movs	r3, #10
 800dfc0:	e7ab      	b.n	800df1a <_strtol_l.constprop.0+0x56>
 800dfc2:	bf00      	nop
 800dfc4:	0800e5ce 	.word	0x0800e5ce

0800dfc8 <_strtol_r>:
 800dfc8:	f7ff bf7c 	b.w	800dec4 <_strtol_l.constprop.0>

0800dfcc <_strtoul_l.constprop.0>:
 800dfcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfd0:	4f36      	ldr	r7, [pc, #216]	; (800e0ac <_strtoul_l.constprop.0+0xe0>)
 800dfd2:	4686      	mov	lr, r0
 800dfd4:	460d      	mov	r5, r1
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfdc:	5d3e      	ldrb	r6, [r7, r4]
 800dfde:	f016 0608 	ands.w	r6, r6, #8
 800dfe2:	d1f8      	bne.n	800dfd6 <_strtoul_l.constprop.0+0xa>
 800dfe4:	2c2d      	cmp	r4, #45	; 0x2d
 800dfe6:	d130      	bne.n	800e04a <_strtoul_l.constprop.0+0x7e>
 800dfe8:	782c      	ldrb	r4, [r5, #0]
 800dfea:	2601      	movs	r6, #1
 800dfec:	1c85      	adds	r5, r0, #2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d057      	beq.n	800e0a2 <_strtoul_l.constprop.0+0xd6>
 800dff2:	2b10      	cmp	r3, #16
 800dff4:	d109      	bne.n	800e00a <_strtoul_l.constprop.0+0x3e>
 800dff6:	2c30      	cmp	r4, #48	; 0x30
 800dff8:	d107      	bne.n	800e00a <_strtoul_l.constprop.0+0x3e>
 800dffa:	7828      	ldrb	r0, [r5, #0]
 800dffc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e000:	2858      	cmp	r0, #88	; 0x58
 800e002:	d149      	bne.n	800e098 <_strtoul_l.constprop.0+0xcc>
 800e004:	786c      	ldrb	r4, [r5, #1]
 800e006:	2310      	movs	r3, #16
 800e008:	3502      	adds	r5, #2
 800e00a:	f04f 38ff 	mov.w	r8, #4294967295
 800e00e:	2700      	movs	r7, #0
 800e010:	fbb8 f8f3 	udiv	r8, r8, r3
 800e014:	fb03 f908 	mul.w	r9, r3, r8
 800e018:	ea6f 0909 	mvn.w	r9, r9
 800e01c:	4638      	mov	r0, r7
 800e01e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e022:	f1bc 0f09 	cmp.w	ip, #9
 800e026:	d815      	bhi.n	800e054 <_strtoul_l.constprop.0+0x88>
 800e028:	4664      	mov	r4, ip
 800e02a:	42a3      	cmp	r3, r4
 800e02c:	dd23      	ble.n	800e076 <_strtoul_l.constprop.0+0xaa>
 800e02e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e032:	d007      	beq.n	800e044 <_strtoul_l.constprop.0+0x78>
 800e034:	4580      	cmp	r8, r0
 800e036:	d31b      	bcc.n	800e070 <_strtoul_l.constprop.0+0xa4>
 800e038:	d101      	bne.n	800e03e <_strtoul_l.constprop.0+0x72>
 800e03a:	45a1      	cmp	r9, r4
 800e03c:	db18      	blt.n	800e070 <_strtoul_l.constprop.0+0xa4>
 800e03e:	fb00 4003 	mla	r0, r0, r3, r4
 800e042:	2701      	movs	r7, #1
 800e044:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e048:	e7e9      	b.n	800e01e <_strtoul_l.constprop.0+0x52>
 800e04a:	2c2b      	cmp	r4, #43	; 0x2b
 800e04c:	bf04      	itt	eq
 800e04e:	782c      	ldrbeq	r4, [r5, #0]
 800e050:	1c85      	addeq	r5, r0, #2
 800e052:	e7cc      	b.n	800dfee <_strtoul_l.constprop.0+0x22>
 800e054:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e058:	f1bc 0f19 	cmp.w	ip, #25
 800e05c:	d801      	bhi.n	800e062 <_strtoul_l.constprop.0+0x96>
 800e05e:	3c37      	subs	r4, #55	; 0x37
 800e060:	e7e3      	b.n	800e02a <_strtoul_l.constprop.0+0x5e>
 800e062:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e066:	f1bc 0f19 	cmp.w	ip, #25
 800e06a:	d804      	bhi.n	800e076 <_strtoul_l.constprop.0+0xaa>
 800e06c:	3c57      	subs	r4, #87	; 0x57
 800e06e:	e7dc      	b.n	800e02a <_strtoul_l.constprop.0+0x5e>
 800e070:	f04f 37ff 	mov.w	r7, #4294967295
 800e074:	e7e6      	b.n	800e044 <_strtoul_l.constprop.0+0x78>
 800e076:	1c7b      	adds	r3, r7, #1
 800e078:	d106      	bne.n	800e088 <_strtoul_l.constprop.0+0xbc>
 800e07a:	2322      	movs	r3, #34	; 0x22
 800e07c:	f8ce 3000 	str.w	r3, [lr]
 800e080:	4638      	mov	r0, r7
 800e082:	b932      	cbnz	r2, 800e092 <_strtoul_l.constprop.0+0xc6>
 800e084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e088:	b106      	cbz	r6, 800e08c <_strtoul_l.constprop.0+0xc0>
 800e08a:	4240      	negs	r0, r0
 800e08c:	2a00      	cmp	r2, #0
 800e08e:	d0f9      	beq.n	800e084 <_strtoul_l.constprop.0+0xb8>
 800e090:	b107      	cbz	r7, 800e094 <_strtoul_l.constprop.0+0xc8>
 800e092:	1e69      	subs	r1, r5, #1
 800e094:	6011      	str	r1, [r2, #0]
 800e096:	e7f5      	b.n	800e084 <_strtoul_l.constprop.0+0xb8>
 800e098:	2430      	movs	r4, #48	; 0x30
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d1b5      	bne.n	800e00a <_strtoul_l.constprop.0+0x3e>
 800e09e:	2308      	movs	r3, #8
 800e0a0:	e7b3      	b.n	800e00a <_strtoul_l.constprop.0+0x3e>
 800e0a2:	2c30      	cmp	r4, #48	; 0x30
 800e0a4:	d0a9      	beq.n	800dffa <_strtoul_l.constprop.0+0x2e>
 800e0a6:	230a      	movs	r3, #10
 800e0a8:	e7af      	b.n	800e00a <_strtoul_l.constprop.0+0x3e>
 800e0aa:	bf00      	nop
 800e0ac:	0800e5ce 	.word	0x0800e5ce

0800e0b0 <_strtoul_r>:
 800e0b0:	f7ff bf8c 	b.w	800dfcc <_strtoul_l.constprop.0>

0800e0b4 <__swhatbuf_r>:
 800e0b4:	b570      	push	{r4, r5, r6, lr}
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	b096      	sub	sp, #88	; 0x58
 800e0c0:	4615      	mov	r5, r2
 800e0c2:	461e      	mov	r6, r3
 800e0c4:	da0d      	bge.n	800e0e2 <__swhatbuf_r+0x2e>
 800e0c6:	89a3      	ldrh	r3, [r4, #12]
 800e0c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e0cc:	f04f 0100 	mov.w	r1, #0
 800e0d0:	bf0c      	ite	eq
 800e0d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e0d6:	2340      	movne	r3, #64	; 0x40
 800e0d8:	2000      	movs	r0, #0
 800e0da:	6031      	str	r1, [r6, #0]
 800e0dc:	602b      	str	r3, [r5, #0]
 800e0de:	b016      	add	sp, #88	; 0x58
 800e0e0:	bd70      	pop	{r4, r5, r6, pc}
 800e0e2:	466a      	mov	r2, sp
 800e0e4:	f000 f848 	bl	800e178 <_fstat_r>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	dbec      	blt.n	800e0c6 <__swhatbuf_r+0x12>
 800e0ec:	9901      	ldr	r1, [sp, #4]
 800e0ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e0f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e0f6:	4259      	negs	r1, r3
 800e0f8:	4159      	adcs	r1, r3
 800e0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0fe:	e7eb      	b.n	800e0d8 <__swhatbuf_r+0x24>

0800e100 <__smakebuf_r>:
 800e100:	898b      	ldrh	r3, [r1, #12]
 800e102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e104:	079d      	lsls	r5, r3, #30
 800e106:	4606      	mov	r6, r0
 800e108:	460c      	mov	r4, r1
 800e10a:	d507      	bpl.n	800e11c <__smakebuf_r+0x1c>
 800e10c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	6123      	str	r3, [r4, #16]
 800e114:	2301      	movs	r3, #1
 800e116:	6163      	str	r3, [r4, #20]
 800e118:	b002      	add	sp, #8
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	ab01      	add	r3, sp, #4
 800e11e:	466a      	mov	r2, sp
 800e120:	f7ff ffc8 	bl	800e0b4 <__swhatbuf_r>
 800e124:	9900      	ldr	r1, [sp, #0]
 800e126:	4605      	mov	r5, r0
 800e128:	4630      	mov	r0, r6
 800e12a:	f7fe fcb9 	bl	800caa0 <_malloc_r>
 800e12e:	b948      	cbnz	r0, 800e144 <__smakebuf_r+0x44>
 800e130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e134:	059a      	lsls	r2, r3, #22
 800e136:	d4ef      	bmi.n	800e118 <__smakebuf_r+0x18>
 800e138:	f023 0303 	bic.w	r3, r3, #3
 800e13c:	f043 0302 	orr.w	r3, r3, #2
 800e140:	81a3      	strh	r3, [r4, #12]
 800e142:	e7e3      	b.n	800e10c <__smakebuf_r+0xc>
 800e144:	89a3      	ldrh	r3, [r4, #12]
 800e146:	6020      	str	r0, [r4, #0]
 800e148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e14c:	81a3      	strh	r3, [r4, #12]
 800e14e:	9b00      	ldr	r3, [sp, #0]
 800e150:	6163      	str	r3, [r4, #20]
 800e152:	9b01      	ldr	r3, [sp, #4]
 800e154:	6120      	str	r0, [r4, #16]
 800e156:	b15b      	cbz	r3, 800e170 <__smakebuf_r+0x70>
 800e158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e15c:	4630      	mov	r0, r6
 800e15e:	f000 f81d 	bl	800e19c <_isatty_r>
 800e162:	b128      	cbz	r0, 800e170 <__smakebuf_r+0x70>
 800e164:	89a3      	ldrh	r3, [r4, #12]
 800e166:	f023 0303 	bic.w	r3, r3, #3
 800e16a:	f043 0301 	orr.w	r3, r3, #1
 800e16e:	81a3      	strh	r3, [r4, #12]
 800e170:	89a3      	ldrh	r3, [r4, #12]
 800e172:	431d      	orrs	r5, r3
 800e174:	81a5      	strh	r5, [r4, #12]
 800e176:	e7cf      	b.n	800e118 <__smakebuf_r+0x18>

0800e178 <_fstat_r>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	4d07      	ldr	r5, [pc, #28]	; (800e198 <_fstat_r+0x20>)
 800e17c:	2300      	movs	r3, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	4608      	mov	r0, r1
 800e182:	4611      	mov	r1, r2
 800e184:	602b      	str	r3, [r5, #0]
 800e186:	f7f2 fef6 	bl	8000f76 <_fstat>
 800e18a:	1c43      	adds	r3, r0, #1
 800e18c:	d102      	bne.n	800e194 <_fstat_r+0x1c>
 800e18e:	682b      	ldr	r3, [r5, #0]
 800e190:	b103      	cbz	r3, 800e194 <_fstat_r+0x1c>
 800e192:	6023      	str	r3, [r4, #0]
 800e194:	bd38      	pop	{r3, r4, r5, pc}
 800e196:	bf00      	nop
 800e198:	20002334 	.word	0x20002334

0800e19c <_isatty_r>:
 800e19c:	b538      	push	{r3, r4, r5, lr}
 800e19e:	4d06      	ldr	r5, [pc, #24]	; (800e1b8 <_isatty_r+0x1c>)
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	4608      	mov	r0, r1
 800e1a6:	602b      	str	r3, [r5, #0]
 800e1a8:	f7f2 fef5 	bl	8000f96 <_isatty>
 800e1ac:	1c43      	adds	r3, r0, #1
 800e1ae:	d102      	bne.n	800e1b6 <_isatty_r+0x1a>
 800e1b0:	682b      	ldr	r3, [r5, #0]
 800e1b2:	b103      	cbz	r3, 800e1b6 <_isatty_r+0x1a>
 800e1b4:	6023      	str	r3, [r4, #0]
 800e1b6:	bd38      	pop	{r3, r4, r5, pc}
 800e1b8:	20002334 	.word	0x20002334

0800e1bc <_malloc_usable_size_r>:
 800e1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1c0:	1f18      	subs	r0, r3, #4
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	bfbc      	itt	lt
 800e1c6:	580b      	ldrlt	r3, [r1, r0]
 800e1c8:	18c0      	addlt	r0, r0, r3
 800e1ca:	4770      	bx	lr

0800e1cc <_init>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	bf00      	nop
 800e1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1d2:	bc08      	pop	{r3}
 800e1d4:	469e      	mov	lr, r3
 800e1d6:	4770      	bx	lr

0800e1d8 <_fini>:
 800e1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1da:	bf00      	nop
 800e1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1de:	bc08      	pop	{r3}
 800e1e0:	469e      	mov	lr, r3
 800e1e2:	4770      	bx	lr
