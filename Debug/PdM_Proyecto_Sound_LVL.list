
PdM_Proyecto_Sound_LVL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e570  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800e740  0800e740  0001e740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee20  0800ee20  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee20  0800ee20  0001ee20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee28  0800ee28  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee28  0800ee28  0001ee28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee2c  0800ee2c  0001ee2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800ee30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  20000168  0800ef98  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20002344  0800ef98  00022344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   000208ec  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056ea  00000000  00000000  00040ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c08  00000000  00000000  000461b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001569  00000000  00000000  00047dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a11d  00000000  00000000  00049329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029b47  00000000  00000000  00073446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e73d2  00000000  00000000  0009cf8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fc4  00000000  00000000  00184360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0018c324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e728 	.word	0x0800e728

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	0800e728 	.word	0x0800e728

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd22 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f814 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9be 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f99c 	bl	8000928 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 f970 	bl	80008d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005f4:	f000 f878 	bl	80006e8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80005f8:	f00b fc64 	bl	800bec4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80005fc:	f000 f8c6 	bl	800078c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000600:	f000 f8f2 	bl	80007e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000604:	f000 f93c 	bl	8000880 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  project_main();
 8000608:	f00b fc56 	bl	800beb8 <project_main>
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x30>
	...

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00c fba1 	bl	800cd66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <SystemClock_Config+0xd0>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd4>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000688:	2348      	movs	r3, #72	; 0x48
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f005 f981 	bl	80059a4 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a8:	f000 f9e2 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 faf7 	bl	8004cbc <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006d4:	f000 f9cc 	bl	8000a70 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC1_Init+0x9c>)
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <MX_ADC1_Init+0xa0>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC1_Init+0x9c>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC1_Init+0x9c>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC1_Init+0x9c>)
 800072a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000738:	2201      	movs	r2, #1
 800073a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ADC1_Init+0x9c>)
 800073e:	2201      	movs	r2, #1
 8000740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <MX_ADC1_Init+0x9c>)
 800074c:	f000 fd02 	bl	8001154 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000756:	f000 f98b 	bl	8000a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075a:	2301      	movs	r3, #1
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_ADC1_Init+0x9c>)
 800076c:	f000 fe5a 	bl	8001424 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000776:	f000 f97b 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000184 	.word	0x20000184
 8000788:	40012000 	.word	0x40012000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f001 ffb5 	bl	8002738 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f94c 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000022c 	.word	0x2000022c
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM2_Init+0x94>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_TIM2_Init+0x94>)
 800080e:	2253      	movs	r2, #83	; 0x53
 8000810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM2_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_TIM2_Init+0x94>)
 800081a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800081e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_TIM2_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_TIM2_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <MX_TIM2_Init+0x94>)
 800082e:	f005 fb57 	bl	8005ee0 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000838:	f000 f91a 	bl	8000a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_TIM2_Init+0x94>)
 800084a:	f005 fc01 	bl	8006050 <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000854:	f000 f90c 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000858:	2320      	movs	r3, #32
 800085a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_TIM2_Init+0x94>)
 8000866:	f005 fe01 	bl	800646c <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 f8fe 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000280 	.word	0x20000280

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART1_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800088c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b8:	f005 fe54 	bl	8006564 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f8d5 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200002c8 	.word	0x200002c8
 80008d0:	40011000 	.word	0x40011000

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f005 fe2a 	bl	8006564 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f8ab 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000310 	.word	0x20000310
 8000924:	40004400 	.word	0x40004400

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_DMA_Init+0x3c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <MX_DMA_Init+0x3c>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_DMA_Init+0x3c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2038      	movs	r0, #56	; 0x38
 8000950:	f001 f8f3 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000954:	2038      	movs	r0, #56	; 0x38
 8000956:	f001 f90c 	bl	8001b72 <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <MX_GPIO_Init+0xfc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a37      	ldr	r2, [pc, #220]	; (8000a64 <MX_GPIO_Init+0xfc>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <MX_GPIO_Init+0xfc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <MX_GPIO_Init+0x100>)
 80009f4:	f001 fe86 	bl	8002704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fe:	481b      	ldr	r0, [pc, #108]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a00:	f001 fe80 	bl	8002704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a1c:	f001 fcc6 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_GPIO_Init+0x100>)
 8000a38:	f001 fcb8 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a56:	f001 fca9 	bl	80023ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40020800 	.word	0x40020800

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aba:	2007      	movs	r0, #7
 8000abc:	f001 f832 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <HAL_ADC_MspInit+0xdc>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d157      	bne.n	8000b9e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a26      	ldr	r2, [pc, #152]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b24      	ldr	r3, [pc, #144]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b26:	2302      	movs	r3, #2
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <HAL_ADC_MspInit+0xe4>)
 8000b3a:	f001 fc37 	bl	80023ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <HAL_ADC_MspInit+0xec>)
 8000b42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b84:	f001 f810 	bl	8001ba8 <HAL_DMA_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b8e:	f7ff ff6f 	bl	8000a70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b96:	639a      	str	r2, [r3, #56]	; 0x38
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40012000 	.word	0x40012000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	200001cc 	.word	0x200001cc
 8000bb8:	40026410 	.word	0x40026410

08000bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_I2C_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12c      	bne.n	8000c38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c00:	2312      	movs	r3, #18
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <HAL_I2C_MspInit+0x8c>)
 8000c18:	f001 fbc8 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40005400 	.word	0x40005400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020400 	.word	0x40020400

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c5c:	d10d      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a36      	ldr	r2, [pc, #216]	; (8000d84 <HAL_UART_MspInit+0xf8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12d      	bne.n	8000d0a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a34      	ldr	r2, [pc, #208]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4822      	ldr	r0, [pc, #136]	; (8000d8c <HAL_UART_MspInit+0x100>)
 8000d04:	f001 fb52 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d08:	e038      	b.n	8000d7c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a20      	ldr	r2, [pc, #128]	; (8000d90 <HAL_UART_MspInit+0x104>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d133      	bne.n	8000d7c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d4c:	230c      	movs	r3, #12
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4809      	ldr	r0, [pc, #36]	; (8000d8c <HAL_UART_MspInit+0x100>)
 8000d68:	f001 fb20 	bl	80023ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2026      	movs	r0, #38	; 0x26
 8000d72:	f000 fee2 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d76:	2026      	movs	r0, #38	; 0x26
 8000d78:	f000 fefb 	bl	8001b72 <HAL_NVIC_EnableIRQ>
}
 8000d7c:	bf00      	nop
 8000d7e:	3730      	adds	r7, #48	; 0x30
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40004400 	.word	0x40004400

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f974 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USART2_IRQHandler+0x10>)
 8000dee:	f005 fc95 	bl	800671c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000310 	.word	0x20000310

08000dfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <DMA2_Stream0_IRQHandler+0x10>)
 8000e02:	f001 f869 	bl	8001ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001cc 	.word	0x200001cc

08000e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <OTG_FS_IRQHandler+0x10>)
 8000e16:	f002 fdfe 	bl	8003a16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20001af4 	.word	0x20001af4

08000e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return 1;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_kill>:

int _kill(int pid, int sig)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e3e:	f00b fff3 	bl	800ce28 <__errno>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2216      	movs	r2, #22
 8000e46:	601a      	str	r2, [r3, #0]
  return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_exit>:

void _exit (int status)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ffe7 	bl	8000e34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e66:	e7fe      	b.n	8000e66 <_exit+0x12>

08000e68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e00a      	b.n	8000e90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e7a:	f3af 8000 	nop.w
 8000e7e:	4601      	mov	r1, r0
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60ba      	str	r2, [r7, #8]
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf0      	blt.n	8000e7a <_read+0x12>
  }

  return len;
 8000e98:	687b      	ldr	r3, [r7, #4]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	e009      	b.n	8000ec8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	60ba      	str	r2, [r7, #8]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf1      	blt.n	8000eb4 <_write+0x12>
  }
  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_close>:

int _close(int file)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f02:	605a      	str	r2, [r3, #4]
  return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_isatty>:

int _isatty(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f00b ff58 	bl	800ce28 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20020000 	.word	0x20020000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	20000358 	.word	0x20000358
 8000fac:	20002348 	.word	0x20002348

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fd8:	f7ff ffea 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001002:	f00b ff17 	bl	800ce34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fae9 	bl	80005dc <main>
  bx  lr    
 800100a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001018:	0800ee30 	.word	0x0800ee30
  ldr r2, =_sbss
 800101c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001020:	20002344 	.word	0x20002344

08001024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_Init+0x40>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_Init+0x40>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_Init+0x40>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 fd67 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fd0e 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fd7f 	bl	8001b8e <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 fd47 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000004 	.word	0x20000004

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	2000035c 	.word	0x2000035c

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000035c 	.word	0x2000035c

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_Delay+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffde 	bl	80010f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008

08001154 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e033      	b.n	80011d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fcaa 	bl	8000acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800119a:	f023 0302 	bic.w	r3, r3, #2
 800119e:	f043 0202 	orr.w	r2, r3, #2
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fa6e 	bl	8001688 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
 80011c2:	e001      	b.n	80011c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Start_DMA+0x1e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e0e9      	b.n	80013ce <HAL_ADC_Start_DMA+0x1f2>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d018      	beq.n	8001242 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001220:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <HAL_ADC_Start_DMA+0x1fc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6d      	ldr	r2, [pc, #436]	; (80013dc <HAL_ADC_Start_DMA+0x200>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9a      	lsrs	r2, r3, #18
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001234:	e002      	b.n	800123c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	3b01      	subs	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d107      	bne.n	8001262 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001260:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b01      	cmp	r3, #1
 800126e:	f040 80a1 	bne.w	80013b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	2b00      	cmp	r3, #0
 8001292:	d007      	beq.n	80012a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800129c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b0:	d106      	bne.n	80012c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f023 0206 	bic.w	r2, r3, #6
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
 80012be:	e002      	b.n	80012c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_ADC_Start_DMA+0x204>)
 80012d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	4a43      	ldr	r2, [pc, #268]	; (80013e4 <HAL_ADC_Start_DMA+0x208>)
 80012d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	4a42      	ldr	r2, [pc, #264]	; (80013e8 <HAL_ADC_Start_DMA+0x20c>)
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	4a41      	ldr	r2, [pc, #260]	; (80013ec <HAL_ADC_Start_DMA+0x210>)
 80012e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001302:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001312:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	334c      	adds	r3, #76	; 0x4c
 800131e:	4619      	mov	r1, r3
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f000 fcee 	bl	8001d04 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	2b00      	cmp	r3, #0
 8001332:	d12a      	bne.n	800138a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <HAL_ADC_Start_DMA+0x214>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d015      	beq.n	800136a <HAL_ADC_Start_DMA+0x18e>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <HAL_ADC_Start_DMA+0x218>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d105      	bne.n	8001354 <HAL_ADC_Start_DMA+0x178>
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_ADC_Start_DMA+0x204>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00a      	beq.n	800136a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <HAL_ADC_Start_DMA+0x21c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d136      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_ADC_Start_DMA+0x204>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d130      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d129      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	e020      	b.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <HAL_ADC_Start_DMA+0x214>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d11b      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d114      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	e00b      	b.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f043 0210 	orr.w	r2, r3, #16
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000
 80013dc:	431bde83 	.word	0x431bde83
 80013e0:	40012300 	.word	0x40012300
 80013e4:	08001881 	.word	0x08001881
 80013e8:	0800193b 	.word	0x0800193b
 80013ec:	08001957 	.word	0x08001957
 80013f0:	40012000 	.word	0x40012000
 80013f4:	40012100 	.word	0x40012100
 80013f8:	40012200 	.word	0x40012200

080013fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1c>
 800143c:	2302      	movs	r3, #2
 800143e:	e113      	b.n	8001668 <HAL_ADC_ConfigChannel+0x244>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d925      	bls.n	800149c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68d9      	ldr	r1, [r3, #12]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	3b1e      	subs	r3, #30
 8001466:	2207      	movs	r2, #7
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43da      	mvns	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	400a      	ands	r2, r1
 8001474:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68d9      	ldr	r1, [r3, #12]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	4603      	mov	r3, r0
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4403      	add	r3, r0
 800148e:	3b1e      	subs	r3, #30
 8001490:	409a      	lsls	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	e022      	b.n	80014e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6919      	ldr	r1, [r3, #16]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	2207      	movs	r2, #7
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	400a      	ands	r2, r1
 80014be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6919      	ldr	r1, [r3, #16]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4403      	add	r3, r0
 80014d8:	409a      	lsls	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d824      	bhi.n	8001534 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3b05      	subs	r3, #5
 80014fc:	221f      	movs	r2, #31
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b05      	subs	r3, #5
 8001526:	fa00 f203 	lsl.w	r2, r0, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
 8001532:	e04c      	b.n	80015ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d824      	bhi.n	8001586 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b23      	subs	r3, #35	; 0x23
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43da      	mvns	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	400a      	ands	r2, r1
 800155c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b23      	subs	r3, #35	; 0x23
 8001578:	fa00 f203 	lsl.w	r2, r0, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
 8001584:	e023      	b.n	80015ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b41      	subs	r3, #65	; 0x41
 8001598:	221f      	movs	r2, #31
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b41      	subs	r3, #65	; 0x41
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ce:	4b29      	ldr	r3, [pc, #164]	; (8001674 <HAL_ADC_ConfigChannel+0x250>)
 80015d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a28      	ldr	r2, [pc, #160]	; (8001678 <HAL_ADC_ConfigChannel+0x254>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10f      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1d8>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b12      	cmp	r3, #18
 80015e2:	d10b      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_ADC_ConfigChannel+0x254>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12b      	bne.n	800165e <HAL_ADC_ConfigChannel+0x23a>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <HAL_ADC_ConfigChannel+0x258>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d003      	beq.n	8001618 <HAL_ADC_ConfigChannel+0x1f4>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b11      	cmp	r3, #17
 8001616:	d122      	bne.n	800165e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a11      	ldr	r2, [pc, #68]	; (800167c <HAL_ADC_ConfigChannel+0x258>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d111      	bne.n	800165e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_ADC_ConfigChannel+0x25c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_ADC_ConfigChannel+0x260>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	0c9a      	lsrs	r2, r3, #18
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001650:	e002      	b.n	8001658 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3b01      	subs	r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f9      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40012300 	.word	0x40012300
 8001678:	40012000 	.word	0x40012000
 800167c:	10000012 	.word	0x10000012
 8001680:	20000000 	.word	0x20000000
 8001684:	431bde83 	.word	0x431bde83

08001688 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001690:	4b79      	ldr	r3, [pc, #484]	; (8001878 <ADC_Init+0x1f0>)
 8001692:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	021a      	lsls	r2, r3, #8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	4a58      	ldr	r2, [pc, #352]	; (800187c <ADC_Init+0x1f4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d022      	beq.n	8001766 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800172e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	e00f      	b.n	8001786 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001784:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0202 	bic.w	r2, r2, #2
 8001794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6899      	ldr	r1, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e1b      	ldrb	r3, [r3, #24]
 80017a0:	005a      	lsls	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01b      	beq.n	80017ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	3b01      	subs	r3, #1
 80017e0:	035a      	lsls	r2, r3, #13
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	e007      	b.n	80017fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	3b01      	subs	r3, #1
 8001818:	051a      	lsls	r2, r3, #20
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800183e:	025a      	lsls	r2, r3, #9
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	029a      	lsls	r2, r3, #10
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40012300 	.word	0x40012300
 800187c:	0f000001 	.word	0x0f000001

08001880 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001896:	2b00      	cmp	r3, #0
 8001898:	d13c      	bne.n	8001914 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d12b      	bne.n	800190c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d127      	bne.n	800190c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d119      	bne.n	800190c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0220 	bic.w	r2, r2, #32
 80018e6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f043 0201 	orr.w	r2, r3, #1
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f009 fc31 	bl	800b174 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001912:	e00e      	b.n	8001932 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7ff fd75 	bl	8001410 <HAL_ADC_ErrorCallback>
}
 8001926:	e004      	b.n	8001932 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff fd57 	bl	80013fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2240      	movs	r2, #64	; 0x40
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f043 0204 	orr.w	r2, r3, #4
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f7ff fd4a 	bl	8001410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff29 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff3e 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff31 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fa9e 	bl	80010f4 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e099      	b.n	8001cf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be4:	e00f      	b.n	8001c06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be6:	f7ff fa85 	bl	80010f4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d908      	bls.n	8001c06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e078      	b.n	8001cf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e8      	bne.n	8001be6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_DMA_Init+0x158>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d107      	bne.n	8001c70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0307 	bic.w	r3, r3, #7
 8001c86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d117      	bne.n	8001cca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fb01 	bl	80022b4 <DMA_CheckFifoParam>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e016      	b.n	8001cf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fab8 	bl	8002248 <DMA_CalcBaseAndBitshift>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	223f      	movs	r2, #63	; 0x3f
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	f010803f 	.word	0xf010803f

08001d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_DMA_Start_IT+0x26>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e040      	b.n	8001dac <HAL_DMA_Start_IT+0xa8>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12f      	bne.n	8001d9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fa4a 	bl	80021ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	223f      	movs	r2, #63	; 0x3f
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0216 	orr.w	r2, r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e005      	b.n	8001daa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
 8001da8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dc2:	f7ff f997 	bl	80010f4 <HAL_GetTick>
 8001dc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d008      	beq.n	8001de6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e052      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0216 	bic.w	r2, r2, #22
 8001df4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_DMA_Abort+0x62>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0208 	bic.w	r2, r2, #8
 8001e24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e36:	e013      	b.n	8001e60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e38:	f7ff f95c 	bl	80010f4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d90c      	bls.n	8001e60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e015      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e4      	bne.n	8001e38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	223f      	movs	r2, #63	; 0x3f
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00c      	b.n	8001ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee4:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_DMA_IRQHandler+0x248>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a8e      	ldr	r2, [pc, #568]	; (8002124 <HAL_DMA_IRQHandler+0x24c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a9b      	lsrs	r3, r3, #10
 8001ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2208      	movs	r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2208      	movs	r2, #8
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2201      	movs	r2, #1
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	2201      	movs	r2, #1
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f043 0202 	orr.w	r2, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2204      	movs	r2, #4
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d043      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03c      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d024      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e01f      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e016      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0208 	bic.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2220      	movs	r2, #32
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 808f 	beq.w	8002178 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8087 	beq.w	8002178 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2220      	movs	r2, #32
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b05      	cmp	r3, #5
 8002080:	d136      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0216 	bic.w	r2, r2, #22
 8002090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x1da>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0208 	bic.w	r2, r2, #8
 80020c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	223f      	movs	r2, #63	; 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d07e      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
        }
        return;
 80020ee:	e079      	b.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01d      	beq.n	800213a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10d      	bne.n	8002128 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	2b00      	cmp	r3, #0
 8002112:	d031      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e02c      	b.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000
 8002124:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
 8002138:	e01e      	b.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0210 	bic.w	r2, r2, #16
 8002156:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	2b00      	cmp	r3, #0
 800217e:	d032      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d022      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2205      	movs	r2, #5
 8002190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3301      	adds	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d307      	bcc.n	80021c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f2      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x2cc>
 80021be:	e000      	b.n	80021c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e000      	b.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021e4:	bf00      	nop
    }
  }
}
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002208:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b40      	cmp	r3, #64	; 0x40
 8002218:	d108      	bne.n	800222c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800222a:	e007      	b.n	800223c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3b10      	subs	r3, #16
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <DMA_CalcBaseAndBitshift+0x64>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d909      	bls.n	800228a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	659a      	str	r2, [r3, #88]	; 0x58
 8002288:	e007      	b.n	800229a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	aaaaaaab 	.word	0xaaaaaaab
 80022b0:	0800ec68 	.word	0x0800ec68

080022b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d11f      	bne.n	800230e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d856      	bhi.n	8002382 <DMA_CheckFifoParam+0xce>
 80022d4:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <DMA_CheckFifoParam+0x28>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022ff 	.word	0x080022ff
 80022e4:	080022ed 	.word	0x080022ed
 80022e8:	08002383 	.word	0x08002383
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d046      	beq.n	8002386 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fc:	e043      	b.n	8002386 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002306:	d140      	bne.n	800238a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230c:	e03d      	b.n	800238a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002316:	d121      	bne.n	800235c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d837      	bhi.n	800238e <DMA_CheckFifoParam+0xda>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <DMA_CheckFifoParam+0x70>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	0800233b 	.word	0x0800233b
 800232c:	08002335 	.word	0x08002335
 8002330:	0800234d 	.word	0x0800234d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e030      	b.n	800239c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d025      	beq.n	8002392 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234a:	e022      	b.n	8002392 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002354:	d11f      	bne.n	8002396 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800235a:	e01c      	b.n	8002396 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d903      	bls.n	800236a <DMA_CheckFifoParam+0xb6>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d003      	beq.n	8002370 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002368:	e018      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      break;
 800236e:	e015      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e00b      	b.n	800239a <DMA_CheckFifoParam+0xe6>
      break;
 8002382:	bf00      	nop
 8002384:	e00a      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
 8002388:	e008      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
 800238c:	e006      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e004      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e002      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;   
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
    }
  } 
  
  return status; 
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e165      	b.n	8002694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 8154 	bne.w	800268e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80ae 	beq.w	800268e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b5d      	ldr	r3, [pc, #372]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a5c      	ldr	r2, [pc, #368]	; (80026ac <HAL_GPIO_Init+0x300>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b5a      	ldr	r3, [pc, #360]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a58      	ldr	r2, [pc, #352]	; (80026b0 <HAL_GPIO_Init+0x304>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4f      	ldr	r2, [pc, #316]	; (80026b4 <HAL_GPIO_Init+0x308>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d025      	beq.n	80025c6 <HAL_GPIO_Init+0x21a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <HAL_GPIO_Init+0x30c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <HAL_GPIO_Init+0x216>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4d      	ldr	r2, [pc, #308]	; (80026bc <HAL_GPIO_Init+0x310>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x212>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <HAL_GPIO_Init+0x314>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x20e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4b      	ldr	r2, [pc, #300]	; (80026c4 <HAL_GPIO_Init+0x318>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x20a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4a      	ldr	r2, [pc, #296]	; (80026c8 <HAL_GPIO_Init+0x31c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x206>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a49      	ldr	r2, [pc, #292]	; (80026cc <HAL_GPIO_Init+0x320>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x202>
 80025aa:	2306      	movs	r3, #6
 80025ac:	e00c      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025ae:	2307      	movs	r3, #7
 80025b0:	e00a      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025b2:	2305      	movs	r3, #5
 80025b4:	e008      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025b6:	2304      	movs	r3, #4
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025ba:	2303      	movs	r3, #3
 80025bc:	e004      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025be:	2302      	movs	r3, #2
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025c6:	2300      	movs	r3, #0
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	f002 0203 	and.w	r2, r2, #3
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	4093      	lsls	r3, r2
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d8:	4935      	ldr	r1, [pc, #212]	; (80026b0 <HAL_GPIO_Init+0x304>)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e6:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <HAL_GPIO_Init+0x324>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260a:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <HAL_GPIO_Init+0x324>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002610:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002634:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800263a:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_GPIO_Init+0x324>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002688:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <HAL_GPIO_Init+0x324>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3301      	adds	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b0f      	cmp	r3, #15
 8002698:	f67f ae96 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40013800 	.word	0x40013800
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40021400 	.word	0x40021400
 80026cc:	40021800 	.word	0x40021800
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	887b      	ldrh	r3, [r7, #2]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e001      	b.n	80026f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
 8002710:	4613      	mov	r3, r2
 8002712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002714:	787b      	ldrb	r3, [r7, #1]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002720:	e003      	b.n	800272a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	041a      	lsls	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	619a      	str	r2, [r3, #24]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e12b      	b.n	80029a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fa2c 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800278a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800279a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800279c:	f002 fb80 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 80027a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4a81      	ldr	r2, [pc, #516]	; (80029ac <HAL_I2C_Init+0x274>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d807      	bhi.n	80027bc <HAL_I2C_Init+0x84>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4a80      	ldr	r2, [pc, #512]	; (80029b0 <HAL_I2C_Init+0x278>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	bf94      	ite	ls
 80027b4:	2301      	movls	r3, #1
 80027b6:	2300      	movhi	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e006      	b.n	80027ca <HAL_I2C_Init+0x92>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a7d      	ldr	r2, [pc, #500]	; (80029b4 <HAL_I2C_Init+0x27c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	bf94      	ite	ls
 80027c4:	2301      	movls	r3, #1
 80027c6:	2300      	movhi	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0e7      	b.n	80029a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a78      	ldr	r2, [pc, #480]	; (80029b8 <HAL_I2C_Init+0x280>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0c9b      	lsrs	r3, r3, #18
 80027dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a6a      	ldr	r2, [pc, #424]	; (80029ac <HAL_I2C_Init+0x274>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d802      	bhi.n	800280c <HAL_I2C_Init+0xd4>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	3301      	adds	r3, #1
 800280a:	e009      	b.n	8002820 <HAL_I2C_Init+0xe8>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	4a69      	ldr	r2, [pc, #420]	; (80029bc <HAL_I2C_Init+0x284>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	3301      	adds	r3, #1
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	430b      	orrs	r3, r1
 8002826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	495c      	ldr	r1, [pc, #368]	; (80029ac <HAL_I2C_Init+0x274>)
 800283c:	428b      	cmp	r3, r1
 800283e:	d819      	bhi.n	8002874 <HAL_I2C_Init+0x13c>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1e59      	subs	r1, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fbb1 f3f3 	udiv	r3, r1, r3
 800284e:	1c59      	adds	r1, r3, #1
 8002850:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002854:	400b      	ands	r3, r1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_I2C_Init+0x138>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1e59      	subs	r1, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fbb1 f3f3 	udiv	r3, r1, r3
 8002868:	3301      	adds	r3, #1
 800286a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286e:	e051      	b.n	8002914 <HAL_I2C_Init+0x1dc>
 8002870:	2304      	movs	r3, #4
 8002872:	e04f      	b.n	8002914 <HAL_I2C_Init+0x1dc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d111      	bne.n	80028a0 <HAL_I2C_Init+0x168>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e58      	subs	r0, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	440b      	add	r3, r1
 800288a:	fbb0 f3f3 	udiv	r3, r0, r3
 800288e:	3301      	adds	r3, #1
 8002890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e012      	b.n	80028c6 <HAL_I2C_Init+0x18e>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	0099      	lsls	r1, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b6:	3301      	adds	r3, #1
 80028b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Init+0x196>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e022      	b.n	8002914 <HAL_I2C_Init+0x1dc>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10e      	bne.n	80028f4 <HAL_I2C_Init+0x1bc>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1e58      	subs	r0, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	440b      	add	r3, r1
 80028e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f2:	e00f      	b.n	8002914 <HAL_I2C_Init+0x1dc>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1e58      	subs	r0, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	0099      	lsls	r1, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	fbb0 f3f3 	udiv	r3, r0, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	6809      	ldr	r1, [r1, #0]
 8002918:	4313      	orrs	r3, r2
 800291a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6911      	ldr	r1, [r2, #16]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	4311      	orrs	r1, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	430b      	orrs	r3, r1
 8002956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	000186a0 	.word	0x000186a0
 80029b0:	001e847f 	.word	0x001e847f
 80029b4:	003d08ff 	.word	0x003d08ff
 80029b8:	431bde83 	.word	0x431bde83
 80029bc:	10624dd3 	.word	0x10624dd3

080029c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029da:	f7fe fb8b 	bl	80010f4 <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	f040 80d9 	bne.w	8002ba0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2319      	movs	r3, #25
 80029f4:	2201      	movs	r2, #1
 80029f6:	496d      	ldr	r1, [pc, #436]	; (8002bac <HAL_I2C_Mem_Write+0x1ec>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fc8b 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	e0cc      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Mem_Write+0x56>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0c5      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d007      	beq.n	8002a3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2221      	movs	r2, #33	; 0x21
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2240      	movs	r2, #64	; 0x40
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a4d      	ldr	r2, [pc, #308]	; (8002bb0 <HAL_I2C_Mem_Write+0x1f0>)
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a7e:	88f8      	ldrh	r0, [r7, #6]
 8002a80:	893a      	ldrh	r2, [r7, #8]
 8002a82:	8979      	ldrh	r1, [r7, #10]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fac2 	bl	8003018 <I2C_RequestMemoryWrite>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d052      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e081      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fd50 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00d      	beq.n	8002aca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d107      	bne.n	8002ac6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06b      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d11b      	bne.n	8002b40 <HAL_I2C_Mem_Write+0x180>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d017      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1aa      	bne.n	8002a9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fd43 	bl	80035d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00d      	beq.n	8002b74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d107      	bne.n	8002b70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e016      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	00100002 	.word	0x00100002
 8002bb0:	ffff0000 	.word	0xffff0000

08002bb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bce:	f7fe fa91 	bl	80010f4 <HAL_GetTick>
 8002bd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	f040 8214 	bne.w	800300a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2319      	movs	r3, #25
 8002be8:	2201      	movs	r2, #1
 8002bea:	497b      	ldr	r1, [pc, #492]	; (8002dd8 <HAL_I2C_Mem_Read+0x224>)
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fb91 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e207      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_I2C_Mem_Read+0x56>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e200      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d007      	beq.n	8002c30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2222      	movs	r2, #34	; 0x22
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a5b      	ldr	r2, [pc, #364]	; (8002ddc <HAL_I2C_Mem_Read+0x228>)
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c72:	88f8      	ldrh	r0, [r7, #6]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	8979      	ldrh	r1, [r7, #10]
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4603      	mov	r3, r0
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fa5e 	bl	8003144 <I2C_RequestMemoryRead>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1bc      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d113      	bne.n	8002cc2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	623b      	str	r3, [r7, #32]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e190      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d11b      	bne.n	8002d02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	e170      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d11b      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	e150      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d58:	e144      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	f200 80f1 	bhi.w	8002f46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d123      	bne.n	8002db4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fc79 	bl	8003668 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e145      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db2:	e117      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d14e      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	4906      	ldr	r1, [pc, #24]	; (8002de0 <HAL_I2C_Mem_Read+0x22c>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 faa4 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e11a      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
 8002dd6:	bf00      	nop
 8002dd8:	00100002 	.word	0x00100002
 8002ddc:	ffff0000 	.word	0xffff0000
 8002de0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e58:	e0c4      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	2200      	movs	r2, #0
 8002e62:	496c      	ldr	r1, [pc, #432]	; (8003014 <HAL_I2C_Mem_Read+0x460>)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fa55 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0cb      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4955      	ldr	r1, [pc, #340]	; (8003014 <HAL_I2C_Mem_Read+0x460>)
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fa27 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e09d      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f44:	e04e      	b.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fb8c 	bl	8003668 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e058      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d124      	bne.n	8002fe4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d107      	bne.n	8002fb2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f aeb6 	bne.w	8002d5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
  }
}
 800300c:	4618      	mov	r0, r3
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	00010004 	.word	0x00010004

08003018 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4603      	mov	r3, r0
 8003028:	817b      	strh	r3, [r7, #10]
 800302a:	460b      	mov	r3, r1
 800302c:	813b      	strh	r3, [r7, #8]
 800302e:	4613      	mov	r3, r2
 8003030:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003040:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2200      	movs	r2, #0
 800304a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f960 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003068:	d103      	bne.n	8003072 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e05f      	b.n	8003136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003076:	897b      	ldrh	r3, [r7, #10]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003084:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	492d      	ldr	r1, [pc, #180]	; (8003140 <I2C_RequestMemoryWrite+0x128>)
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f9bb 	bl	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e04c      	b.n	8003136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	6a39      	ldr	r1, [r7, #32]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fa46 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d107      	bne.n	80030da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e02b      	b.n	8003136 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030e4:	893b      	ldrh	r3, [r7, #8]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	611a      	str	r2, [r3, #16]
 80030ee:	e021      	b.n	8003134 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030f0:	893b      	ldrh	r3, [r7, #8]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa20 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b04      	cmp	r3, #4
 8003114:	d107      	bne.n	8003126 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e005      	b.n	8003136 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800312a:	893b      	ldrh	r3, [r7, #8]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	00010002 	.word	0x00010002

08003144 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4603      	mov	r3, r0
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	460b      	mov	r3, r1
 8003158:	813b      	strh	r3, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800316c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800317c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	2200      	movs	r2, #0
 8003186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f8c2 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a4:	d103      	bne.n	80031ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e0aa      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031b2:	897b      	ldrh	r3, [r7, #10]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	4952      	ldr	r1, [pc, #328]	; (8003310 <I2C_RequestMemoryRead+0x1cc>)
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f91d 	bl	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e097      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f0:	6a39      	ldr	r1, [r7, #32]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f9a8 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00d      	beq.n	800321a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b04      	cmp	r3, #4
 8003204:	d107      	bne.n	8003216 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003214:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e076      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003220:	893b      	ldrh	r3, [r7, #8]
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	611a      	str	r2, [r3, #16]
 800322a:	e021      	b.n	8003270 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800322c:	893b      	ldrh	r3, [r7, #8]
 800322e:	0a1b      	lsrs	r3, r3, #8
 8003230:	b29b      	uxth	r3, r3
 8003232:	b2da      	uxtb	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	6a39      	ldr	r1, [r7, #32]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f982 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b04      	cmp	r3, #4
 8003250:	d107      	bne.n	8003262 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003260:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e050      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003266:	893b      	ldrh	r3, [r7, #8]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003272:	6a39      	ldr	r1, [r7, #32]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f967 	bl	8003548 <I2C_WaitOnTXEFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00d      	beq.n	800329c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	2b04      	cmp	r3, #4
 8003286:	d107      	bne.n	8003298 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003296:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e035      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 f82b 	bl	8003314 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00d      	beq.n	80032e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032d2:	d103      	bne.n	80032dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e013      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032e0:	897b      	ldrh	r3, [r7, #10]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	4906      	ldr	r1, [pc, #24]	; (8003310 <I2C_RequestMemoryRead+0x1cc>)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f886 	bl	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	00010002 	.word	0x00010002

08003314 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003324:	e048      	b.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d044      	beq.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fd fee1 	bl	80010f4 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnFlagUntilTimeout+0x30>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d139      	bne.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d10d      	bne.n	800336a <I2C_WaitOnFlagUntilTimeout+0x56>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	43da      	mvns	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	e00c      	b.n	8003384 <I2C_WaitOnFlagUntilTimeout+0x70>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	43da      	mvns	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	429a      	cmp	r2, r3
 8003388:	d116      	bne.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e023      	b.n	8003400 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	0c1b      	lsrs	r3, r3, #16
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10d      	bne.n	80033de <I2C_WaitOnFlagUntilTimeout+0xca>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	e00c      	b.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d093      	beq.n	8003326 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003416:	e071      	b.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003426:	d123      	bne.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003436:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003440:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e067      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d041      	beq.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003478:	f7fd fe3c 	bl	80010f4 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	429a      	cmp	r2, r3
 8003486:	d302      	bcc.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d136      	bne.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10c      	bne.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4013      	ands	r3, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	2300      	moveq	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e00b      	b.n	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d016      	beq.n	80034fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e021      	b.n	8003540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d10c      	bne.n	8003520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	43da      	mvns	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4013      	ands	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	e00b      	b.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	bf14      	ite	ne
 8003532:	2301      	movne	r3, #1
 8003534:	2300      	moveq	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f af6d 	bne.w	8003418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003554:	e034      	b.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f8e3 	bl	8003722 <I2C_IsAcknowledgeFailed>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e034      	b.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d028      	beq.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fd fdc1 	bl	80010f4 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11d      	bne.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d016      	beq.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e007      	b.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b80      	cmp	r3, #128	; 0x80
 80035cc:	d1c3      	bne.n	8003556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035e4:	e034      	b.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f89b 	bl	8003722 <I2C_IsAcknowledgeFailed>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d028      	beq.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fd fd79 	bl	80010f4 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11d      	bne.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d016      	beq.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e007      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d1c3      	bne.n	80035e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003674:	e049      	b.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b10      	cmp	r3, #16
 8003682:	d119      	bne.n	80036b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0210 	mvn.w	r2, #16
 800368c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e030      	b.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b8:	f7fd fd1c 	bl	80010f4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11d      	bne.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d016      	beq.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e007      	b.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	d1ae      	bne.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d11b      	bne.n	8003772 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003742:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f043 0204 	orr.w	r2, r3, #4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af02      	add	r7, sp, #8
 8003786:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e108      	b.n	80039a4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f008 fdab 	bl	800c308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2203      	movs	r2, #3
 80037b6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037c0:	d102      	bne.n	80037c8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 ffe2 	bl	8007796 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7c1a      	ldrb	r2, [r3, #16]
 80037da:	f88d 2000 	strb.w	r2, [sp]
 80037de:	3304      	adds	r3, #4
 80037e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e2:	f003 fec1 	bl	8007568 <USB_CoreInit>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0d5      	b.n	80039a4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f003 ffda 	bl	80077b8 <USB_SetCurrentMode>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0c6      	b.n	80039a4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e04a      	b.n	80038b2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3315      	adds	r3, #21
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3314      	adds	r3, #20
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	b298      	uxth	r0, r3
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	332e      	adds	r3, #46	; 0x2e
 8003858:	4602      	mov	r2, r0
 800385a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	3318      	adds	r3, #24
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	331c      	adds	r3, #28
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3320      	adds	r3, #32
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	3301      	adds	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	791b      	ldrb	r3, [r3, #4]
 80038b6:	7bfa      	ldrb	r2, [r7, #15]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d3af      	bcc.n	800381c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]
 80038c0:	e044      	b.n	800394c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	f203 2355 	addw	r3, r3, #597	; 0x255
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003930:	7bfa      	ldrb	r2, [r7, #15]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	3301      	adds	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	791b      	ldrb	r3, [r3, #4]
 8003950:	7bfa      	ldrb	r2, [r7, #15]
 8003952:	429a      	cmp	r2, r3
 8003954:	d3b5      	bcc.n	80038c2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7c1a      	ldrb	r2, [r3, #16]
 800395e:	f88d 2000 	strb.w	r2, [sp]
 8003962:	3304      	adds	r3, #4
 8003964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003966:	f003 ff73 	bl	8007850 <USB_DevInit>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e013      	b.n	80039a4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	7b1b      	ldrb	r3, [r3, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f001 f96e 	bl	8004c74 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f004 ffb0 	bl	8008902 <USB_DevDisconnect>

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_PCD_Start+0x1c>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e022      	b.n	8003a0e <HAL_PCD_Start+0x62>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f003 febd 	bl	8007774 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 ff5e 	bl	80088c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a16:	b590      	push	{r4, r7, lr}
 8003a18:	b08d      	sub	sp, #52	; 0x34
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f005 f81c 	bl	8008a6a <USB_GetMode>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f040 84b9 	bne.w	80043ac <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f004 ff80 	bl	8008944 <USB_ReadInterrupts>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 84af 	beq.w	80043aa <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f004 ff6d 	bl	8008944 <USB_ReadInterrupts>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d107      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f002 0202 	and.w	r2, r2, #2
 8003a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f004 ff5b 	bl	8008944 <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d161      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0210 	bic.w	r2, r2, #16
 8003aa6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	0c5b      	lsrs	r3, r3, #17
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d124      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003ada:	4013      	ands	r3, r2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d035      	beq.n	8003b4c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	6a38      	ldr	r0, [r7, #32]
 8003af4:	f004 fd92 	bl	800861c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	091b      	lsrs	r3, r3, #4
 8003b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b04:	441a      	add	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b16:	441a      	add	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	615a      	str	r2, [r3, #20]
 8003b1c:	e016      	b.n	8003b4c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	0c5b      	lsrs	r3, r3, #17
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	2b06      	cmp	r3, #6
 8003b28:	d110      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003b30:	2208      	movs	r2, #8
 8003b32:	4619      	mov	r1, r3
 8003b34:	6a38      	ldr	r0, [r7, #32]
 8003b36:	f004 fd71 	bl	800861c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b46:	441a      	add	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0210 	orr.w	r2, r2, #16
 8003b5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f004 feef 	bl	8008944 <USB_ReadInterrupts>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b70:	f040 80a7 	bne.w	8003cc2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f004 fef4 	bl	800896a <USB_ReadDevAllOutEpInterrupt>
 8003b82:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b84:	e099      	b.n	8003cba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 808e 	beq.w	8003cae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f004 ff18 	bl	80089d2 <USB_ReadDevOutEPInterrupt>
 8003ba2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00c      	beq.n	8003bc8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fed0 	bl	8004968 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00c      	beq.n	8003bec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	461a      	mov	r2, r3
 8003be0:	2308      	movs	r3, #8
 8003be2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 ffa6 	bl	8004b38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	461a      	mov	r2, r3
 8003c04:	2310      	movs	r3, #16
 8003c06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d030      	beq.n	8003c74 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d109      	bne.n	8003c32 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c30:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	78db      	ldrb	r3, [r3, #3]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d108      	bne.n	8003c62 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2200      	movs	r2, #0
 8003c54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f008 fc6f 	bl	800c540 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2302      	movs	r3, #2
 8003c72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	085b      	lsrs	r3, r3, #1
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f47f af62 	bne.w	8003b86 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 fe3c 	bl	8008944 <USB_ReadInterrupts>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cd6:	f040 80db 	bne.w	8003e90 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f004 fe5d 	bl	800899e <USB_ReadDevAllInEpInterrupt>
 8003ce4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003cea:	e0cd      	b.n	8003e88 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80c2 	beq.w	8003e7c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f004 fe83 	bl	8008a0e <USB_ReadDevInEPInterrupt>
 8003d08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d057      	beq.n	8003dc4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69f9      	ldr	r1, [r7, #28]
 8003d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d34:	4013      	ands	r3, r2
 8003d36:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	461a      	mov	r2, r3
 8003d46:	2301      	movs	r3, #1
 8003d48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	799b      	ldrb	r3, [r3, #6]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d132      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3320      	adds	r3, #32
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4403      	add	r3, r0
 8003d72:	331c      	adds	r3, #28
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4419      	add	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4403      	add	r3, r0
 8003d86:	3320      	adds	r3, #32
 8003d88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d113      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x3a2>
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3324      	adds	r3, #36	; 0x24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d108      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003db0:	461a      	mov	r2, r3
 8003db2:	2101      	movs	r1, #1
 8003db4:	f004 fe8a 	bl	8008acc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f008 fb39 	bl	800c436 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2308      	movs	r3, #8
 8003dde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d008      	beq.n	8003dfc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df6:	461a      	mov	r2, r3
 8003df8:	2310      	movs	r3, #16
 8003dfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e12:	461a      	mov	r2, r3
 8003e14:	2340      	movs	r3, #64	; 0x40
 8003e16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d023      	beq.n	8003e6a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e24:	6a38      	ldr	r0, [r7, #32]
 8003e26:	f003 fe71 	bl	8007b0c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	3310      	adds	r3, #16
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	78db      	ldrb	r3, [r3, #3]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d108      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f008 fb86 	bl	800c564 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e64:	461a      	mov	r2, r3
 8003e66:	2302      	movs	r3, #2
 8003e68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fcea 	bl	8004850 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	3301      	adds	r3, #1
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f47f af2e 	bne.w	8003cec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f004 fd55 	bl	8008944 <USB_ReadInterrupts>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea4:	d122      	bne.n	8003eec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d108      	bne.n	8003ed6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ecc:	2100      	movs	r1, #0
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f008 fd00 	bl	800c8d4 <HAL_PCDEx_LPM_Callback>
 8003ed4:	e002      	b.n	8003edc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f008 fb24 	bl	800c524 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f004 fd27 	bl	8008944 <USB_ReadInterrupts>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f00:	d112      	bne.n	8003f28 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d102      	bne.n	8003f18 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f008 fae0 	bl	800c4d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f26:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f004 fd09 	bl	8008944 <USB_ReadInterrupts>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f3c:	d121      	bne.n	8003f82 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003f4c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d111      	bne.n	8003f7c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f72:	2101      	movs	r1, #1
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f008 fcad 	bl	800c8d4 <HAL_PCDEx_LPM_Callback>
 8003f7a:	e002      	b.n	8003f82 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f008 faab 	bl	800c4d8 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f004 fcdc 	bl	8008944 <USB_ReadInterrupts>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	f040 80b7 	bne.w	8004108 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2110      	movs	r1, #16
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f003 fda9 	bl	8007b0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbe:	e046      	b.n	800404e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fd2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	69fa      	ldr	r2, [r7, #28]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ff2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	461a      	mov	r2, r3
 8004002:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004006:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004022:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004026:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004042:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004046:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	3301      	adds	r3, #1
 800404c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	791b      	ldrb	r3, [r3, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	4293      	cmp	r3, r2
 8004058:	d3b2      	bcc.n	8003fc0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004068:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800406c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	7bdb      	ldrb	r3, [r3, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004086:	f043 030b 	orr.w	r3, r3, #11
 800408a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409c:	f043 030b 	orr.w	r3, r3, #11
 80040a0:	6453      	str	r3, [r2, #68]	; 0x44
 80040a2:	e015      	b.n	80040d0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80040ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ca:	f043 030b 	orr.w	r3, r3, #11
 80040ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040f2:	461a      	mov	r2, r3
 80040f4:	f004 fcea 	bl	8008acc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f004 fc19 	bl	8008944 <USB_ReadInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411c:	d123      	bne.n	8004166 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f004 fcaf 	bl	8008a86 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f003 fd66 	bl	8007bfe <USB_GetDevSpeed>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681c      	ldr	r4, [r3, #0]
 800413e:	f000 fea3 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004142:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004148:	461a      	mov	r2, r3
 800414a:	4620      	mov	r0, r4
 800414c:	f003 fa70 	bl	8007630 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f008 f998 	bl	800c486 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004164:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f004 fbea 	bl	8008944 <USB_ReadInterrupts>
 8004170:	4603      	mov	r3, r0
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b08      	cmp	r3, #8
 8004178:	d10a      	bne.n	8004190 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f008 f975 	bl	800c46a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f002 0208 	and.w	r2, r2, #8
 800418e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f004 fbd5 	bl	8008944 <USB_ReadInterrupts>
 800419a:	4603      	mov	r3, r0
 800419c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a0:	2b80      	cmp	r3, #128	; 0x80
 80041a2:	d123      	bne.n	80041ec <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041b0:	2301      	movs	r3, #1
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
 80041b4:	e014      	b.n	80041e0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f203 2357 	addw	r3, r3, #599	; 0x257
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fb0a 	bl	80047ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	3301      	adds	r3, #1
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d3e4      	bcc.n	80041b6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f004 fba7 	bl	8008944 <USB_ReadInterrupts>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004200:	d13c      	bne.n	800427c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004202:	2301      	movs	r3, #1
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
 8004206:	e02b      	b.n	8004260 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3318      	adds	r3, #24
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d115      	bne.n	800425a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800422e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004230:	2b00      	cmp	r3, #0
 8004232:	da12      	bge.n	800425a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	4613      	mov	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	3317      	adds	r3, #23
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004250:	b2db      	uxtb	r3, r3
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 faca 	bl	80047ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	3301      	adds	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	791b      	ldrb	r3, [r3, #4]
 8004264:	461a      	mov	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	4293      	cmp	r3, r2
 800426a:	d3cd      	bcc.n	8004208 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800427a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f004 fb5f 	bl	8008944 <USB_ReadInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004290:	d156      	bne.n	8004340 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004292:	2301      	movs	r3, #1
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
 8004296:	e045      	b.n	8004324 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d12e      	bne.n	800431e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da2b      	bge.n	800431e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80042d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d121      	bne.n	800431e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042de:	4613      	mov	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	440b      	add	r3, r1
 80042e8:	f203 2357 	addw	r3, r3, #599	; 0x257
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	69fa      	ldr	r2, [r7, #28]
 8004312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800431a:	6053      	str	r3, [r2, #4]
            break;
 800431c:	e008      	b.n	8004330 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	3301      	adds	r3, #1
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	791b      	ldrb	r3, [r3, #4]
 8004328:	461a      	mov	r2, r3
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	4293      	cmp	r3, r2
 800432e:	d3b3      	bcc.n	8004298 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800433e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f004 fafd 	bl	8008944 <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004354:	d10a      	bne.n	800436c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f008 f916 	bl	800c588 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800436a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f004 fae7 	bl	8008944 <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d115      	bne.n	80043ac <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f008 f906 	bl	800c5a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6859      	ldr	r1, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	e000      	b.n	80043ac <HAL_PCD_IRQHandler+0x996>
      return;
 80043aa:	bf00      	nop
    }
  }
}
 80043ac:	3734      	adds	r7, #52	; 0x34
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd90      	pop	{r4, r7, pc}

080043b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_PCD_SetAddress+0x1a>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e012      	b.n	80043f2 <HAL_PCD_SetAddress+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f004 fa46 	bl	8008874 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	4608      	mov	r0, r1
 8004404:	4611      	mov	r1, r2
 8004406:	461a      	mov	r2, r3
 8004408:	4603      	mov	r3, r0
 800440a:	70fb      	strb	r3, [r7, #3]
 800440c:	460b      	mov	r3, r1
 800440e:	803b      	strh	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800441c:	2b00      	cmp	r3, #0
 800441e:	da0f      	bge.n	8004440 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	3310      	adds	r3, #16
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	4413      	add	r3, r2
 8004434:	3304      	adds	r3, #4
 8004436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	705a      	strb	r2, [r3, #1]
 800443e:	e00f      	b.n	8004460 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 020f 	and.w	r2, r3, #15
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800446c:	883b      	ldrh	r3, [r7, #0]
 800446e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	78ba      	ldrb	r2, [r7, #2]
 800447a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800448e:	78bb      	ldrb	r3, [r7, #2]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d102      	bne.n	800449a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_PCD_EP_Open+0xae>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e00e      	b.n	80044c6 <HAL_PCD_EP_Open+0xcc>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f003 fbc6 	bl	8007c48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80044c4:	7afb      	ldrb	r3, [r7, #11]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da0f      	bge.n	8004502 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	3310      	adds	r3, #16
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	3304      	adds	r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	705a      	strb	r2, [r3, #1]
 8004500:	e00f      	b.n	8004522 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	4613      	mov	r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	4413      	add	r3, r2
 8004518:	3304      	adds	r3, #4
 800451a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_PCD_EP_Close+0x6e>
 8004538:	2302      	movs	r3, #2
 800453a:	e00e      	b.n	800455a <HAL_PCD_EP_Close+0x8c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	4618      	mov	r0, r3
 800454c:	f003 fc04 	bl	8007d58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	607a      	str	r2, [r7, #4]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	460b      	mov	r3, r1
 8004570:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004572:	7afb      	ldrb	r3, [r7, #11]
 8004574:	f003 020f 	and.w	r2, r3, #15
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4413      	add	r3, r2
 8004588:	3304      	adds	r3, #4
 800458a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2200      	movs	r2, #0
 800459c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045a4:	7afb      	ldrb	r3, [r7, #11]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	799b      	ldrb	r3, [r3, #6]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d102      	bne.n	80045be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	799b      	ldrb	r3, [r3, #6]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6979      	ldr	r1, [r7, #20]
 80045ca:	f003 fca1 	bl	8007f10 <USB_EPStartXfer>

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80045fa:	681b      	ldr	r3, [r3, #0]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	460b      	mov	r3, r1
 8004616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	f003 020f 	and.w	r2, r3, #15
 800461e:	4613      	mov	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	3310      	adds	r3, #16
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	3304      	adds	r3, #4
 800462e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2201      	movs	r2, #1
 8004646:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004648:	7afb      	ldrb	r3, [r7, #11]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	b2da      	uxtb	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	799b      	ldrb	r3, [r3, #6]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d102      	bne.n	8004662 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	799b      	ldrb	r3, [r3, #6]
 800466a:	461a      	mov	r2, r3
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	f003 fc4f 	bl	8007f10 <USB_EPStartXfer>

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	7912      	ldrb	r2, [r2, #4]
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e04f      	b.n	800473a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800469a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0f      	bge.n	80046c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 020f 	and.w	r2, r3, #15
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	3310      	adds	r3, #16
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	705a      	strb	r2, [r3, #1]
 80046c0:	e00d      	b.n	80046de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	3304      	adds	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_PCD_EP_SetStall+0x82>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e01d      	b.n	800473a <HAL_PCD_EP_SetStall+0xbe>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	4618      	mov	r0, r3
 800470e:	f003 ffdd 	bl	80086cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	7999      	ldrb	r1, [r3, #6]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800472a:	461a      	mov	r2, r3
 800472c:	f004 f9ce 	bl	8008acc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	7912      	ldrb	r2, [r2, #4]
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e042      	b.n	80047e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004764:	2b00      	cmp	r3, #0
 8004766:	da0f      	bge.n	8004788 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 020f 	and.w	r2, r3, #15
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	3310      	adds	r3, #16
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4413      	add	r3, r2
 800477c:	3304      	adds	r3, #4
 800477e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	705a      	strb	r2, [r3, #1]
 8004786:	e00f      	b.n	80047a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4413      	add	r3, r2
 800479e:	3304      	adds	r3, #4
 80047a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_PCD_EP_ClrStall+0x86>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e00e      	b.n	80047e6 <HAL_PCD_EP_ClrStall+0xa4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68f9      	ldr	r1, [r7, #12]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f003 ffe6 	bl	80087a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da0c      	bge.n	800481c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 020f 	and.w	r2, r3, #15
 8004808:	4613      	mov	r3, r2
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	3310      	adds	r3, #16
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4413      	add	r3, r2
 8004816:	3304      	adds	r3, #4
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e00c      	b.n	8004836 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	f003 020f 	and.w	r2, r3, #15
 8004822:	4613      	mov	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	3304      	adds	r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	4618      	mov	r0, r3
 800483e:	f003 fe05 	bl	800844c <USB_EPStopXfer>
 8004842:	4603      	mov	r3, r0
 8004844:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004846:	7afb      	ldrb	r3, [r7, #11]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af02      	add	r7, sp, #8
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	3310      	adds	r3, #16
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	4413      	add	r3, r2
 8004874:	3304      	adds	r3, #4
 8004876:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	429a      	cmp	r2, r3
 8004882:	d901      	bls.n	8004888 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e06b      	b.n	8004960 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	429a      	cmp	r2, r3
 800489c:	d902      	bls.n	80048a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3303      	adds	r3, #3
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048ac:	e02a      	b.n	8004904 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d902      	bls.n	80048ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3303      	adds	r3, #3
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4603      	mov	r3, r0
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f003 fe5a 	bl	80085a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	441a      	add	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	429a      	cmp	r2, r3
 8004918:	d809      	bhi.n	800492e <PCD_WriteEmptyTxFifo+0xde>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004922:	429a      	cmp	r2, r3
 8004924:	d203      	bcs.n	800492e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1bf      	bne.n	80048ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	429a      	cmp	r2, r3
 8004938:	d811      	bhi.n	800495e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	2201      	movs	r2, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	43db      	mvns	r3, r3
 8004954:	6939      	ldr	r1, [r7, #16]
 8004956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800495a:	4013      	ands	r3, r2
 800495c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	333c      	adds	r3, #60	; 0x3c
 8004980:	3304      	adds	r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	799b      	ldrb	r3, [r3, #6]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d17b      	bne.n	8004a96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d015      	beq.n	80049d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4a61      	ldr	r2, [pc, #388]	; (8004b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	f240 80b9 	bls.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80b3 	beq.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d0:	6093      	str	r3, [r2, #8]
 80049d2:	e0a7      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d009      	beq.n	80049f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	2320      	movs	r3, #32
 80049ee:	6093      	str	r3, [r2, #8]
 80049f0:	e098      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8093 	bne.w	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	4a4b      	ldr	r2, [pc, #300]	; (8004b30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d90f      	bls.n	8004a26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a22:	6093      	str	r3, [r2, #8]
 8004a24:	e07e      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	3304      	adds	r3, #4
 8004a3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1a      	ldr	r2, [r3, #32]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	440b      	add	r3, r1
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d114      	bne.n	8004a88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d109      	bne.n	8004a7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004a70:	461a      	mov	r2, r3
 8004a72:	2101      	movs	r1, #1
 8004a74:	f004 f82a 	bl	8008acc <USB_EP0_OutStart>
 8004a78:	e006      	b.n	8004a88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	441a      	add	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f007 fcb6 	bl	800c400 <HAL_PCD_DataOutStageCallback>
 8004a94:	e046      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	4a26      	ldr	r2, [pc, #152]	; (8004b34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d124      	bne.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	6093      	str	r3, [r2, #8]
 8004abc:	e032      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f007 fc8d 	bl	800c400 <HAL_PCD_DataOutStageCallback>
 8004ae6:	e01d      	b.n	8004b24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d114      	bne.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004b10:	461a      	mov	r2, r3
 8004b12:	2100      	movs	r1, #0
 8004b14:	f003 ffda 	bl	8008acc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f007 fc6e 	bl	800c400 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	4f54300a 	.word	0x4f54300a
 8004b34:	4f54310a 	.word	0x4f54310a

08004b38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	333c      	adds	r3, #60	; 0x3c
 8004b50:	3304      	adds	r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d90e      	bls.n	8004b8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d009      	beq.n	8004b8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	461a      	mov	r2, r3
 8004b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f007 fc25 	bl	800c3dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d90c      	bls.n	8004bb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	799b      	ldrb	r3, [r3, #6]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d108      	bne.n	8004bb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004bac:	461a      	mov	r2, r3
 8004bae:	2101      	movs	r1, #1
 8004bb0:	f003 ff8c 	bl	8008acc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	4f54300a 	.word	0x4f54300a

08004bc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d107      	bne.n	8004bf2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004be2:	883b      	ldrh	r3, [r7, #0]
 8004be4:	0419      	lsls	r1, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
 8004bf0:	e028      	b.n	8004c44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	e00d      	b.n	8004c22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	3340      	adds	r3, #64	; 0x40
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4413      	add	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d3ec      	bcc.n	8004c06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c2c:	883b      	ldrh	r3, [r7, #0]
 8004c2e:	0418      	lsls	r0, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	4302      	orrs	r2, r0
 8004c3c:	3340      	adds	r3, #64	; 0x40
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	f043 0303 	orr.w	r3, r3, #3
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0cc      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b68      	ldr	r3, [pc, #416]	; (8004e74 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d90c      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b65      	ldr	r3, [pc, #404]	; (8004e74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b63      	ldr	r3, [pc, #396]	; (8004e74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0b8      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d10:	4b59      	ldr	r3, [pc, #356]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a58      	ldr	r2, [pc, #352]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d28:	4b53      	ldr	r3, [pc, #332]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a52      	ldr	r2, [pc, #328]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d34:	4b50      	ldr	r3, [pc, #320]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	494d      	ldr	r1, [pc, #308]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d044      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d107      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d119      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e07f      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d003      	beq.n	8004d7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d107      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7a:	4b3f      	ldr	r3, [pc, #252]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e06f      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8a:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e067      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d9a:	4b37      	ldr	r3, [pc, #220]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f023 0203 	bic.w	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4934      	ldr	r1, [pc, #208]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dac:	f7fc f9a2 	bl	80010f4 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db4:	f7fc f99e 	bl	80010f4 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e04f      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 020c 	and.w	r2, r3, #12
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d1eb      	bne.n	8004db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ddc:	4b25      	ldr	r3, [pc, #148]	; (8004e74 <HAL_RCC_ClockConfig+0x1b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d20c      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dea:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <HAL_RCC_ClockConfig+0x1b8>)
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <HAL_RCC_ClockConfig+0x1b8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e032      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4916      	ldr	r1, [pc, #88]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	490e      	ldr	r1, [pc, #56]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e42:	f000 fb7f 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8004e46:	4602      	mov	r2, r0
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	490a      	ldr	r1, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004e54:	5ccb      	ldrb	r3, [r1, r3]
 8004e56:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <HAL_RCC_ClockConfig+0x1c8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fc f902 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023c00 	.word	0x40023c00
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	0800ec50 	.word	0x0800ec50
 8004e80:	20000000 	.word	0x20000000
 8004e84:	20000004 	.word	0x20000004

08004e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	20000000 	.word	0x20000000

08004ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ea4:	f7ff fff0 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0a9b      	lsrs	r3, r3, #10
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4903      	ldr	r1, [pc, #12]	; (8004ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	0800ec60 	.word	0x0800ec60

08004ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ecc:	f7ff ffdc 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	0b5b      	lsrs	r3, r3, #13
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	4903      	ldr	r1, [pc, #12]	; (8004eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ede:	5ccb      	ldrb	r3, [r1, r3]
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	0800ec60 	.word	0x0800ec60

08004ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08c      	sub	sp, #48	; 0x30
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d010      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004f28:	4b6f      	ldr	r3, [pc, #444]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f2e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	496c      	ldr	r1, [pc, #432]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004f46:	2301      	movs	r3, #1
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d010      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004f56:	4b64      	ldr	r3, [pc, #400]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	4960      	ldr	r1, [pc, #384]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004f74:	2301      	movs	r3, #1
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d017      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f84:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	4955      	ldr	r1, [pc, #340]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d017      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fc0:	4b49      	ldr	r3, [pc, #292]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	4946      	ldr	r1, [pc, #280]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0320 	and.w	r3, r3, #32
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 808a 	beq.w	8005112 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	4b39      	ldr	r3, [pc, #228]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	4a38      	ldr	r2, [pc, #224]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500c:	6413      	str	r3, [r2, #64]	; 0x40
 800500e:	4b36      	ldr	r3, [pc, #216]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800501a:	4b34      	ldr	r3, [pc, #208]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a33      	ldr	r2, [pc, #204]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005024:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005026:	f7fc f865 	bl	80010f4 <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502e:	f7fc f861 	bl	80010f4 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e278      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005040:	4b2a      	ldr	r3, [pc, #168]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800504c:	4b26      	ldr	r3, [pc, #152]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005054:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d02f      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	429a      	cmp	r2, r3
 8005068:	d028      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800506a:	4b1f      	ldr	r3, [pc, #124]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005072:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005074:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005076:	2201      	movs	r2, #1
 8005078:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800507a:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005080:	4a19      	ldr	r2, [pc, #100]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005086:	4b18      	ldr	r3, [pc, #96]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d114      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005092:	f7fc f82f 	bl	80010f4 <HAL_GetTick>
 8005096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005098:	e00a      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509a:	f7fc f82b 	bl	80010f4 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e240      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0ee      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c8:	d114      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050de:	4902      	ldr	r1, [pc, #8]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]
 80050e4:	e00c      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40007000 	.word	0x40007000
 80050f0:	42470e40 	.word	0x42470e40
 80050f4:	4b4a      	ldr	r3, [pc, #296]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4a49      	ldr	r2, [pc, #292]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050fe:	6093      	str	r3, [r2, #8]
 8005100:	4b47      	ldr	r3, [pc, #284]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800510c:	4944      	ldr	r1, [pc, #272]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800510e:	4313      	orrs	r3, r2
 8005110:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005124:	4b3f      	ldr	r3, [pc, #252]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005126:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005134:	4b3a      	ldr	r3, [pc, #232]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	4937      	ldr	r1, [pc, #220]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005156:	4b32      	ldr	r3, [pc, #200]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800515c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005164:	492e      	ldr	r1, [pc, #184]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d011      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005178:	4b29      	ldr	r3, [pc, #164]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800517a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	4926      	ldr	r1, [pc, #152]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005196:	d101      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005198:	2301      	movs	r3, #1
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80051a8:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	491a      	ldr	r1, [pc, #104]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d011      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80051ca:	4b15      	ldr	r3, [pc, #84]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d8:	4911      	ldr	r1, [pc, #68]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e8:	d101      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80051ea:	2301      	movs	r3, #1
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d005      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fc:	f040 80ff 	bne.w	80053fe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005206:	f7fb ff75 	bl	80010f4 <HAL_GetTick>
 800520a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800520c:	e00e      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800520e:	f7fb ff71 	bl	80010f4 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d907      	bls.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e188      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005220:	40023800 	.word	0x40023800
 8005224:	424711e0 	.word	0x424711e0
 8005228:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800522c:	4b7e      	ldr	r3, [pc, #504]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1ea      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d009      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005254:	2b00      	cmp	r3, #0
 8005256:	d028      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d124      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005260:	4b71      	ldr	r3, [pc, #452]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	3301      	adds	r3, #1
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005272:	4b6d      	ldr	r3, [pc, #436]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005278:	0e1b      	lsrs	r3, r3, #24
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	019b      	lsls	r3, r3, #6
 800528a:	431a      	orrs	r2, r3
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	3b01      	subs	r3, #1
 8005292:	041b      	lsls	r3, r3, #16
 8005294:	431a      	orrs	r2, r3
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	071b      	lsls	r3, r3, #28
 80052a2:	4961      	ldr	r1, [pc, #388]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d035      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052d4:	d130      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80052d6:	4b54      	ldr	r3, [pc, #336]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	3301      	adds	r3, #1
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052e8:	4b4f      	ldr	r3, [pc, #316]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ee:	0f1b      	lsrs	r3, r3, #28
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	019b      	lsls	r3, r3, #6
 8005300:	431a      	orrs	r2, r3
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	3b01      	subs	r3, #1
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	061b      	lsls	r3, r3, #24
 8005312:	431a      	orrs	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	071b      	lsls	r3, r3, #28
 8005318:	4943      	ldr	r1, [pc, #268]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005320:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005322:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005326:	f023 021f 	bic.w	r2, r3, #31
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	3b01      	subs	r3, #1
 8005330:	493d      	ldr	r1, [pc, #244]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	2b00      	cmp	r3, #0
 8005342:	d029      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800534c:	d124      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800534e:	4b36      	ldr	r3, [pc, #216]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	3301      	adds	r3, #1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005360:	4b31      	ldr	r3, [pc, #196]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005366:	0f1b      	lsrs	r3, r3, #28
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	019b      	lsls	r3, r3, #6
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	3b01      	subs	r3, #1
 8005382:	041b      	lsls	r3, r3, #16
 8005384:	431a      	orrs	r2, r3
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	061b      	lsls	r3, r3, #24
 800538a:	431a      	orrs	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	071b      	lsls	r3, r3, #28
 8005390:	4925      	ldr	r1, [pc, #148]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d016      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	3b01      	subs	r3, #1
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	061b      	lsls	r3, r3, #24
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	071b      	lsls	r3, r3, #28
 80053ca:	4917      	ldr	r1, [pc, #92]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053d2:	4b16      	ldr	r3, [pc, #88]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053d8:	f7fb fe8c 	bl	80010f4 <HAL_GetTick>
 80053dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053e0:	f7fb fe88 	bl	80010f4 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e09f      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	2b01      	cmp	r3, #1
 8005402:	f040 8095 	bne.w	8005530 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800540c:	f7fb fe72 	bl	80010f4 <HAL_GetTick>
 8005410:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005412:	e00f      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005414:	f7fb fe6e 	bl	80010f4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d908      	bls.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e085      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	42470068 	.word	0x42470068
 8005430:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005434:	4b41      	ldr	r3, [pc, #260]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800543c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005440:	d0e8      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800545e:	2b00      	cmp	r3, #0
 8005460:	d02b      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005466:	2b00      	cmp	r3, #0
 8005468:	d127      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800546a:	4b34      	ldr	r3, [pc, #208]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	3301      	adds	r3, #1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699a      	ldr	r2, [r3, #24]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	019b      	lsls	r3, r3, #6
 8005486:	431a      	orrs	r2, r3
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	3b01      	subs	r3, #1
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	061b      	lsls	r3, r3, #24
 8005498:	4928      	ldr	r1, [pc, #160]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054a0:	4b26      	ldr	r3, [pc, #152]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	3b01      	subs	r3, #1
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	4922      	ldr	r1, [pc, #136]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01d      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ce:	d118      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054d0:	4b1a      	ldr	r3, [pc, #104]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d6:	0e1b      	lsrs	r3, r3, #24
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	019b      	lsls	r3, r3, #6
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	3b01      	subs	r3, #1
 80054f2:	041b      	lsls	r3, r3, #16
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	061b      	lsls	r3, r3, #24
 80054fa:	4910      	ldr	r1, [pc, #64]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005502:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005508:	f7fb fdf4 	bl	80010f4 <HAL_GetTick>
 800550c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005510:	f7fb fdf0 	bl	80010f4 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e007      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005522:	4b06      	ldr	r3, [pc, #24]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800552a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800552e:	d1ef      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3730      	adds	r7, #48	; 0x30
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40023800 	.word	0x40023800
 8005540:	42470070 	.word	0x42470070

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005548:	b0ae      	sub	sp, #184	; 0xb8
 800554a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800556a:	4bcb      	ldr	r3, [pc, #812]	; (8005898 <HAL_RCC_GetSysClockFreq+0x354>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 030c 	and.w	r3, r3, #12
 8005572:	2b0c      	cmp	r3, #12
 8005574:	f200 8206 	bhi.w	8005984 <HAL_RCC_GetSysClockFreq+0x440>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <HAL_RCC_GetSysClockFreq+0x3c>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055b5 	.word	0x080055b5
 8005584:	08005985 	.word	0x08005985
 8005588:	08005985 	.word	0x08005985
 800558c:	08005985 	.word	0x08005985
 8005590:	080055bd 	.word	0x080055bd
 8005594:	08005985 	.word	0x08005985
 8005598:	08005985 	.word	0x08005985
 800559c:	08005985 	.word	0x08005985
 80055a0:	080055c5 	.word	0x080055c5
 80055a4:	08005985 	.word	0x08005985
 80055a8:	08005985 	.word	0x08005985
 80055ac:	08005985 	.word	0x08005985
 80055b0:	080057b5 	.word	0x080057b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055b4:	4bb9      	ldr	r3, [pc, #740]	; (800589c <HAL_RCC_GetSysClockFreq+0x358>)
 80055b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80055ba:	e1e7      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055bc:	4bb8      	ldr	r3, [pc, #736]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80055be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80055c2:	e1e3      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055c4:	4bb4      	ldr	r3, [pc, #720]	; (8005898 <HAL_RCC_GetSysClockFreq+0x354>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055d0:	4bb1      	ldr	r3, [pc, #708]	; (8005898 <HAL_RCC_GetSysClockFreq+0x354>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d071      	beq.n	80056c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055dc:	4bae      	ldr	r3, [pc, #696]	; (8005898 <HAL_RCC_GetSysClockFreq+0x354>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	099b      	lsrs	r3, r3, #6
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80055ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055f8:	2300      	movs	r3, #0
 80055fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	f04f 0000 	mov.w	r0, #0
 800560a:	f04f 0100 	mov.w	r1, #0
 800560e:	0159      	lsls	r1, r3, #5
 8005610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005614:	0150      	lsls	r0, r2, #5
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4621      	mov	r1, r4
 800561c:	1a51      	subs	r1, r2, r1
 800561e:	6439      	str	r1, [r7, #64]	; 0x40
 8005620:	4629      	mov	r1, r5
 8005622:	eb63 0301 	sbc.w	r3, r3, r1
 8005626:	647b      	str	r3, [r7, #68]	; 0x44
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005634:	4649      	mov	r1, r9
 8005636:	018b      	lsls	r3, r1, #6
 8005638:	4641      	mov	r1, r8
 800563a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800563e:	4641      	mov	r1, r8
 8005640:	018a      	lsls	r2, r1, #6
 8005642:	4641      	mov	r1, r8
 8005644:	1a51      	subs	r1, r2, r1
 8005646:	63b9      	str	r1, [r7, #56]	; 0x38
 8005648:	4649      	mov	r1, r9
 800564a:	eb63 0301 	sbc.w	r3, r3, r1
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800565c:	4649      	mov	r1, r9
 800565e:	00cb      	lsls	r3, r1, #3
 8005660:	4641      	mov	r1, r8
 8005662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005666:	4641      	mov	r1, r8
 8005668:	00ca      	lsls	r2, r1, #3
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	4603      	mov	r3, r0
 8005670:	4622      	mov	r2, r4
 8005672:	189b      	adds	r3, r3, r2
 8005674:	633b      	str	r3, [r7, #48]	; 0x30
 8005676:	462b      	mov	r3, r5
 8005678:	460a      	mov	r2, r1
 800567a:	eb42 0303 	adc.w	r3, r2, r3
 800567e:	637b      	str	r3, [r7, #52]	; 0x34
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800568c:	4629      	mov	r1, r5
 800568e:	024b      	lsls	r3, r1, #9
 8005690:	4621      	mov	r1, r4
 8005692:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005696:	4621      	mov	r1, r4
 8005698:	024a      	lsls	r2, r1, #9
 800569a:	4610      	mov	r0, r2
 800569c:	4619      	mov	r1, r3
 800569e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80056b0:	f7fa fe16 	bl	80002e0 <__aeabi_uldivmod>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4613      	mov	r3, r2
 80056ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056be:	e067      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056c0:	4b75      	ldr	r3, [pc, #468]	; (8005898 <HAL_RCC_GetSysClockFreq+0x354>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	099b      	lsrs	r3, r3, #6
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80056d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056da:	2300      	movs	r3, #0
 80056dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80056e2:	4622      	mov	r2, r4
 80056e4:	462b      	mov	r3, r5
 80056e6:	f04f 0000 	mov.w	r0, #0
 80056ea:	f04f 0100 	mov.w	r1, #0
 80056ee:	0159      	lsls	r1, r3, #5
 80056f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056f4:	0150      	lsls	r0, r2, #5
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4621      	mov	r1, r4
 80056fc:	1a51      	subs	r1, r2, r1
 80056fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8005700:	4629      	mov	r1, r5
 8005702:	eb63 0301 	sbc.w	r3, r3, r1
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005714:	4649      	mov	r1, r9
 8005716:	018b      	lsls	r3, r1, #6
 8005718:	4641      	mov	r1, r8
 800571a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800571e:	4641      	mov	r1, r8
 8005720:	018a      	lsls	r2, r1, #6
 8005722:	4641      	mov	r1, r8
 8005724:	ebb2 0a01 	subs.w	sl, r2, r1
 8005728:	4649      	mov	r1, r9
 800572a:	eb63 0b01 	sbc.w	fp, r3, r1
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800573a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800573e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005742:	4692      	mov	sl, r2
 8005744:	469b      	mov	fp, r3
 8005746:	4623      	mov	r3, r4
 8005748:	eb1a 0303 	adds.w	r3, sl, r3
 800574c:	623b      	str	r3, [r7, #32]
 800574e:	462b      	mov	r3, r5
 8005750:	eb4b 0303 	adc.w	r3, fp, r3
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005762:	4629      	mov	r1, r5
 8005764:	028b      	lsls	r3, r1, #10
 8005766:	4621      	mov	r1, r4
 8005768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800576c:	4621      	mov	r1, r4
 800576e:	028a      	lsls	r2, r1, #10
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005778:	2200      	movs	r2, #0
 800577a:	673b      	str	r3, [r7, #112]	; 0x70
 800577c:	677a      	str	r2, [r7, #116]	; 0x74
 800577e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005782:	f7fa fdad 	bl	80002e0 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4613      	mov	r3, r2
 800578c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005790:	4b41      	ldr	r3, [pc, #260]	; (8005898 <HAL_RCC_GetSysClockFreq+0x354>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	3301      	adds	r3, #1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 80057a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80057a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80057b2:	e0eb      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057b4:	4b38      	ldr	r3, [pc, #224]	; (8005898 <HAL_RCC_GetSysClockFreq+0x354>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057c0:	4b35      	ldr	r3, [pc, #212]	; (8005898 <HAL_RCC_GetSysClockFreq+0x354>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d06b      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057cc:	4b32      	ldr	r3, [pc, #200]	; (8005898 <HAL_RCC_GetSysClockFreq+0x354>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	099b      	lsrs	r3, r3, #6
 80057d2:	2200      	movs	r2, #0
 80057d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80057d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057de:	663b      	str	r3, [r7, #96]	; 0x60
 80057e0:	2300      	movs	r3, #0
 80057e2:	667b      	str	r3, [r7, #100]	; 0x64
 80057e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80057e8:	4622      	mov	r2, r4
 80057ea:	462b      	mov	r3, r5
 80057ec:	f04f 0000 	mov.w	r0, #0
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	0159      	lsls	r1, r3, #5
 80057f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057fa:	0150      	lsls	r0, r2, #5
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4621      	mov	r1, r4
 8005802:	1a51      	subs	r1, r2, r1
 8005804:	61b9      	str	r1, [r7, #24]
 8005806:	4629      	mov	r1, r5
 8005808:	eb63 0301 	sbc.w	r3, r3, r1
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800581a:	4659      	mov	r1, fp
 800581c:	018b      	lsls	r3, r1, #6
 800581e:	4651      	mov	r1, sl
 8005820:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005824:	4651      	mov	r1, sl
 8005826:	018a      	lsls	r2, r1, #6
 8005828:	4651      	mov	r1, sl
 800582a:	ebb2 0801 	subs.w	r8, r2, r1
 800582e:	4659      	mov	r1, fp
 8005830:	eb63 0901 	sbc.w	r9, r3, r1
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005848:	4690      	mov	r8, r2
 800584a:	4699      	mov	r9, r3
 800584c:	4623      	mov	r3, r4
 800584e:	eb18 0303 	adds.w	r3, r8, r3
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	462b      	mov	r3, r5
 8005856:	eb49 0303 	adc.w	r3, r9, r3
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005868:	4629      	mov	r1, r5
 800586a:	024b      	lsls	r3, r1, #9
 800586c:	4621      	mov	r1, r4
 800586e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005872:	4621      	mov	r1, r4
 8005874:	024a      	lsls	r2, r1, #9
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800587e:	2200      	movs	r2, #0
 8005880:	65bb      	str	r3, [r7, #88]	; 0x58
 8005882:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005884:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005888:	f7fa fd2a 	bl	80002e0 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005896:	e065      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x420>
 8005898:	40023800 	.word	0x40023800
 800589c:	00f42400 	.word	0x00f42400
 80058a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058a4:	4b3d      	ldr	r3, [pc, #244]	; (800599c <HAL_RCC_GetSysClockFreq+0x458>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	099b      	lsrs	r3, r3, #6
 80058aa:	2200      	movs	r2, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	4611      	mov	r1, r2
 80058b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058b4:	653b      	str	r3, [r7, #80]	; 0x50
 80058b6:	2300      	movs	r3, #0
 80058b8:	657b      	str	r3, [r7, #84]	; 0x54
 80058ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80058be:	4642      	mov	r2, r8
 80058c0:	464b      	mov	r3, r9
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f04f 0100 	mov.w	r1, #0
 80058ca:	0159      	lsls	r1, r3, #5
 80058cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058d0:	0150      	lsls	r0, r2, #5
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4641      	mov	r1, r8
 80058d8:	1a51      	subs	r1, r2, r1
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	4649      	mov	r1, r9
 80058de:	eb63 0301 	sbc.w	r3, r3, r1
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80058f0:	4659      	mov	r1, fp
 80058f2:	018b      	lsls	r3, r1, #6
 80058f4:	4651      	mov	r1, sl
 80058f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058fa:	4651      	mov	r1, sl
 80058fc:	018a      	lsls	r2, r1, #6
 80058fe:	4651      	mov	r1, sl
 8005900:	1a54      	subs	r4, r2, r1
 8005902:	4659      	mov	r1, fp
 8005904:	eb63 0501 	sbc.w	r5, r3, r1
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	00eb      	lsls	r3, r5, #3
 8005912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005916:	00e2      	lsls	r2, r4, #3
 8005918:	4614      	mov	r4, r2
 800591a:	461d      	mov	r5, r3
 800591c:	4643      	mov	r3, r8
 800591e:	18e3      	adds	r3, r4, r3
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	464b      	mov	r3, r9
 8005924:	eb45 0303 	adc.w	r3, r5, r3
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005936:	4629      	mov	r1, r5
 8005938:	028b      	lsls	r3, r1, #10
 800593a:	4621      	mov	r1, r4
 800593c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005940:	4621      	mov	r1, r4
 8005942:	028a      	lsls	r2, r1, #10
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800594c:	2200      	movs	r2, #0
 800594e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005950:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005952:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005956:	f7fa fcc3 	bl	80002e0 <__aeabi_uldivmod>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4613      	mov	r3, r2
 8005960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005964:	4b0d      	ldr	r3, [pc, #52]	; (800599c <HAL_RCC_GetSysClockFreq+0x458>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	0f1b      	lsrs	r3, r3, #28
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8005972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005982:	e003      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005984:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800598a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800598c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005990:	4618      	mov	r0, r3
 8005992:	37b8      	adds	r7, #184	; 0xb8
 8005994:	46bd      	mov	sp, r7
 8005996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800
 80059a0:	00f42400 	.word	0x00f42400

080059a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e28d      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8083 	beq.w	8005aca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059c4:	4b94      	ldr	r3, [pc, #592]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 030c 	and.w	r3, r3, #12
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d019      	beq.n	8005a04 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80059d0:	4b91      	ldr	r3, [pc, #580]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d106      	bne.n	80059ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80059dc:	4b8e      	ldr	r3, [pc, #568]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059e8:	d00c      	beq.n	8005a04 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ea:	4b8b      	ldr	r3, [pc, #556]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d112      	bne.n	8005a1c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059f6:	4b88      	ldr	r3, [pc, #544]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a02:	d10b      	bne.n	8005a1c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a04:	4b84      	ldr	r3, [pc, #528]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d05b      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x124>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d157      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e25a      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a24:	d106      	bne.n	8005a34 <HAL_RCC_OscConfig+0x90>
 8005a26:	4b7c      	ldr	r3, [pc, #496]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a7b      	ldr	r2, [pc, #492]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e01d      	b.n	8005a70 <HAL_RCC_OscConfig+0xcc>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a3c:	d10c      	bne.n	8005a58 <HAL_RCC_OscConfig+0xb4>
 8005a3e:	4b76      	ldr	r3, [pc, #472]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a75      	ldr	r2, [pc, #468]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	4b73      	ldr	r3, [pc, #460]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a72      	ldr	r2, [pc, #456]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	e00b      	b.n	8005a70 <HAL_RCC_OscConfig+0xcc>
 8005a58:	4b6f      	ldr	r3, [pc, #444]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a6e      	ldr	r2, [pc, #440]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	4b6c      	ldr	r3, [pc, #432]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a6b      	ldr	r2, [pc, #428]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d013      	beq.n	8005aa0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a78:	f7fb fb3c 	bl	80010f4 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fb fb38 	bl	80010f4 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	; 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e21f      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a92:	4b61      	ldr	r3, [pc, #388]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCC_OscConfig+0xdc>
 8005a9e:	e014      	b.n	8005aca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fb fb28 	bl	80010f4 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aa8:	f7fb fb24 	bl	80010f4 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b64      	cmp	r3, #100	; 0x64
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e20b      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aba:	4b57      	ldr	r3, [pc, #348]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x104>
 8005ac6:	e000      	b.n	8005aca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d06f      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ad6:	4b50      	ldr	r3, [pc, #320]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 030c 	and.w	r3, r3, #12
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d017      	beq.n	8005b12 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005ae2:	4b4d      	ldr	r3, [pc, #308]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
        || \
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d105      	bne.n	8005afa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005aee:	4b4a      	ldr	r3, [pc, #296]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00b      	beq.n	8005b12 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afa:	4b47      	ldr	r3, [pc, #284]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b02:	2b0c      	cmp	r3, #12
 8005b04:	d11c      	bne.n	8005b40 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b06:	4b44      	ldr	r3, [pc, #272]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d116      	bne.n	8005b40 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b12:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_RCC_OscConfig+0x186>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d001      	beq.n	8005b2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e1d3      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4937      	ldr	r1, [pc, #220]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b3e:	e03a      	b.n	8005bb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d020      	beq.n	8005b8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b48:	4b34      	ldr	r3, [pc, #208]	; (8005c1c <HAL_RCC_OscConfig+0x278>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4e:	f7fb fad1 	bl	80010f4 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b56:	f7fb facd 	bl	80010f4 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e1b4      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b68:	4b2b      	ldr	r3, [pc, #172]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b74:	4b28      	ldr	r3, [pc, #160]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	4925      	ldr	r1, [pc, #148]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]
 8005b88:	e015      	b.n	8005bb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b8a:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <HAL_RCC_OscConfig+0x278>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fb fab0 	bl	80010f4 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b98:	f7fb faac 	bl	80010f4 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e193      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005baa:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d036      	beq.n	8005c30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd0:	f7fb fa90 	bl	80010f4 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd8:	f7fb fa8c 	bl	80010f4 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e173      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bea:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_RCC_OscConfig+0x274>)
 8005bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x234>
 8005bf6:	e01b      	b.n	8005c30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf8:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <HAL_RCC_OscConfig+0x27c>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bfe:	f7fb fa79 	bl	80010f4 <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c04:	e00e      	b.n	8005c24 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c06:	f7fb fa75 	bl	80010f4 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d907      	bls.n	8005c24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e15c      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	42470000 	.word	0x42470000
 8005c20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c24:	4b8a      	ldr	r3, [pc, #552]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1ea      	bne.n	8005c06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8097 	beq.w	8005d6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c42:	4b83      	ldr	r3, [pc, #524]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10f      	bne.n	8005c6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	4b7f      	ldr	r3, [pc, #508]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	4a7e      	ldr	r2, [pc, #504]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c5e:	4b7c      	ldr	r3, [pc, #496]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6e:	4b79      	ldr	r3, [pc, #484]	; (8005e54 <HAL_RCC_OscConfig+0x4b0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d118      	bne.n	8005cac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c7a:	4b76      	ldr	r3, [pc, #472]	; (8005e54 <HAL_RCC_OscConfig+0x4b0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a75      	ldr	r2, [pc, #468]	; (8005e54 <HAL_RCC_OscConfig+0x4b0>)
 8005c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c86:	f7fb fa35 	bl	80010f4 <HAL_GetTick>
 8005c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8e:	f7fb fa31 	bl	80010f4 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e118      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca0:	4b6c      	ldr	r3, [pc, #432]	; (8005e54 <HAL_RCC_OscConfig+0x4b0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f0      	beq.n	8005c8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x31e>
 8005cb4:	4b66      	ldr	r3, [pc, #408]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	4a65      	ldr	r2, [pc, #404]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005cba:	f043 0301 	orr.w	r3, r3, #1
 8005cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc0:	e01c      	b.n	8005cfc <HAL_RCC_OscConfig+0x358>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x340>
 8005cca:	4b61      	ldr	r3, [pc, #388]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	4a60      	ldr	r2, [pc, #384]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005cd0:	f043 0304 	orr.w	r3, r3, #4
 8005cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd6:	4b5e      	ldr	r3, [pc, #376]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	4a5d      	ldr	r2, [pc, #372]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce2:	e00b      	b.n	8005cfc <HAL_RCC_OscConfig+0x358>
 8005ce4:	4b5a      	ldr	r3, [pc, #360]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	4a59      	ldr	r2, [pc, #356]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf0:	4b57      	ldr	r3, [pc, #348]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	4a56      	ldr	r2, [pc, #344]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005cf6:	f023 0304 	bic.w	r3, r3, #4
 8005cfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d015      	beq.n	8005d30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d04:	f7fb f9f6 	bl	80010f4 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0a:	e00a      	b.n	8005d22 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0c:	f7fb f9f2 	bl	80010f4 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e0d7      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d22:	4b4b      	ldr	r3, [pc, #300]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0ee      	beq.n	8005d0c <HAL_RCC_OscConfig+0x368>
 8005d2e:	e014      	b.n	8005d5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fb f9e0 	bl	80010f4 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fb f9dc 	bl	80010f4 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0c1      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d4e:	4b40      	ldr	r3, [pc, #256]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ee      	bne.n	8005d38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d105      	bne.n	8005d6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d60:	4b3b      	ldr	r3, [pc, #236]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	4a3a      	ldr	r2, [pc, #232]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80ad 	beq.w	8005ed0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d76:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d060      	beq.n	8005e44 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d145      	bne.n	8005e16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8a:	4b33      	ldr	r3, [pc, #204]	; (8005e58 <HAL_RCC_OscConfig+0x4b4>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fb f9b0 	bl	80010f4 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d98:	f7fb f9ac 	bl	80010f4 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e093      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005daa:	4b29      	ldr	r3, [pc, #164]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	019b      	lsls	r3, r3, #6
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	061b      	lsls	r3, r3, #24
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	071b      	lsls	r3, r3, #28
 8005de2:	491b      	ldr	r1, [pc, #108]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005de8:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <HAL_RCC_OscConfig+0x4b4>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fb f981 	bl	80010f4 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df6:	f7fb f97d 	bl	80010f4 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e064      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e08:	4b11      	ldr	r3, [pc, #68]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x452>
 8005e14:	e05c      	b.n	8005ed0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e16:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <HAL_RCC_OscConfig+0x4b4>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fb f96a 	bl	80010f4 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e24:	f7fb f966 	bl	80010f4 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e04d      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e36:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <HAL_RCC_OscConfig+0x4ac>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x480>
 8005e42:	e045      	b.n	8005ed0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d107      	bne.n	8005e5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e040      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
 8005e50:	40023800 	.word	0x40023800
 8005e54:	40007000 	.word	0x40007000
 8005e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e5c:	4b1f      	ldr	r3, [pc, #124]	; (8005edc <HAL_RCC_OscConfig+0x538>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d030      	beq.n	8005ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d129      	bne.n	8005ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d122      	bne.n	8005ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d119      	bne.n	8005ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d10f      	bne.n	8005ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d107      	bne.n	8005ecc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40023800 	.word	0x40023800

08005ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e041      	b.n	8005f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fa fea0 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f000 f95e 	bl	80061e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d001      	beq.n	8005f98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e046      	b.n	8006026 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a23      	ldr	r2, [pc, #140]	; (8006034 <HAL_TIM_Base_Start+0xb4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d022      	beq.n	8005ff0 <HAL_TIM_Base_Start+0x70>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb2:	d01d      	beq.n	8005ff0 <HAL_TIM_Base_Start+0x70>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <HAL_TIM_Base_Start+0xb8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d018      	beq.n	8005ff0 <HAL_TIM_Base_Start+0x70>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1e      	ldr	r2, [pc, #120]	; (800603c <HAL_TIM_Base_Start+0xbc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <HAL_TIM_Base_Start+0x70>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	; (8006040 <HAL_TIM_Base_Start+0xc0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00e      	beq.n	8005ff0 <HAL_TIM_Base_Start+0x70>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1b      	ldr	r2, [pc, #108]	; (8006044 <HAL_TIM_Base_Start+0xc4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d009      	beq.n	8005ff0 <HAL_TIM_Base_Start+0x70>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a19      	ldr	r2, [pc, #100]	; (8006048 <HAL_TIM_Base_Start+0xc8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_TIM_Base_Start+0x70>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a18      	ldr	r2, [pc, #96]	; (800604c <HAL_TIM_Base_Start+0xcc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d111      	bne.n	8006014 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d010      	beq.n	8006024 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006012:	e007      	b.n	8006024 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40000400 	.word	0x40000400
 800603c:	40000800 	.word	0x40000800
 8006040:	40000c00 	.word	0x40000c00
 8006044:	40010400 	.word	0x40010400
 8006048:	40014000 	.word	0x40014000
 800604c:	40001800 	.word	0x40001800

08006050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_TIM_ConfigClockSource+0x1c>
 8006068:	2302      	movs	r3, #2
 800606a:	e0b4      	b.n	80061d6 <HAL_TIM_ConfigClockSource+0x186>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800608a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a4:	d03e      	beq.n	8006124 <HAL_TIM_ConfigClockSource+0xd4>
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060aa:	f200 8087 	bhi.w	80061bc <HAL_TIM_ConfigClockSource+0x16c>
 80060ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b2:	f000 8086 	beq.w	80061c2 <HAL_TIM_ConfigClockSource+0x172>
 80060b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ba:	d87f      	bhi.n	80061bc <HAL_TIM_ConfigClockSource+0x16c>
 80060bc:	2b70      	cmp	r3, #112	; 0x70
 80060be:	d01a      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0xa6>
 80060c0:	2b70      	cmp	r3, #112	; 0x70
 80060c2:	d87b      	bhi.n	80061bc <HAL_TIM_ConfigClockSource+0x16c>
 80060c4:	2b60      	cmp	r3, #96	; 0x60
 80060c6:	d050      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x11a>
 80060c8:	2b60      	cmp	r3, #96	; 0x60
 80060ca:	d877      	bhi.n	80061bc <HAL_TIM_ConfigClockSource+0x16c>
 80060cc:	2b50      	cmp	r3, #80	; 0x50
 80060ce:	d03c      	beq.n	800614a <HAL_TIM_ConfigClockSource+0xfa>
 80060d0:	2b50      	cmp	r3, #80	; 0x50
 80060d2:	d873      	bhi.n	80061bc <HAL_TIM_ConfigClockSource+0x16c>
 80060d4:	2b40      	cmp	r3, #64	; 0x40
 80060d6:	d058      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x13a>
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d86f      	bhi.n	80061bc <HAL_TIM_ConfigClockSource+0x16c>
 80060dc:	2b30      	cmp	r3, #48	; 0x30
 80060de:	d064      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x15a>
 80060e0:	2b30      	cmp	r3, #48	; 0x30
 80060e2:	d86b      	bhi.n	80061bc <HAL_TIM_ConfigClockSource+0x16c>
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d060      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x15a>
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d867      	bhi.n	80061bc <HAL_TIM_ConfigClockSource+0x16c>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d05c      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x15a>
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d05a      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0x15a>
 80060f4:	e062      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006106:	f000 f991 	bl	800642c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	609a      	str	r2, [r3, #8]
      break;
 8006122:	e04f      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006134:	f000 f97a 	bl	800642c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006146:	609a      	str	r2, [r3, #8]
      break;
 8006148:	e03c      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006156:	461a      	mov	r2, r3
 8006158:	f000 f8ee 	bl	8006338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2150      	movs	r1, #80	; 0x50
 8006162:	4618      	mov	r0, r3
 8006164:	f000 f947 	bl	80063f6 <TIM_ITRx_SetConfig>
      break;
 8006168:	e02c      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006176:	461a      	mov	r2, r3
 8006178:	f000 f90d 	bl	8006396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2160      	movs	r1, #96	; 0x60
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f937 	bl	80063f6 <TIM_ITRx_SetConfig>
      break;
 8006188:	e01c      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006196:	461a      	mov	r2, r3
 8006198:	f000 f8ce 	bl	8006338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2140      	movs	r1, #64	; 0x40
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f927 	bl	80063f6 <TIM_ITRx_SetConfig>
      break;
 80061a8:	e00c      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4619      	mov	r1, r3
 80061b4:	4610      	mov	r0, r2
 80061b6:	f000 f91e 	bl	80063f6 <TIM_ITRx_SetConfig>
      break;
 80061ba:	e003      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]
      break;
 80061c0:	e000      	b.n	80061c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a46      	ldr	r2, [pc, #280]	; (800630c <TIM_Base_SetConfig+0x12c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d00f      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a43      	ldr	r2, [pc, #268]	; (8006310 <TIM_Base_SetConfig+0x130>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00b      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a42      	ldr	r2, [pc, #264]	; (8006314 <TIM_Base_SetConfig+0x134>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d007      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a41      	ldr	r2, [pc, #260]	; (8006318 <TIM_Base_SetConfig+0x138>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a40      	ldr	r2, [pc, #256]	; (800631c <TIM_Base_SetConfig+0x13c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d108      	bne.n	8006232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a35      	ldr	r2, [pc, #212]	; (800630c <TIM_Base_SetConfig+0x12c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d02b      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d027      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a32      	ldr	r2, [pc, #200]	; (8006310 <TIM_Base_SetConfig+0x130>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d023      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a31      	ldr	r2, [pc, #196]	; (8006314 <TIM_Base_SetConfig+0x134>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d01f      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a30      	ldr	r2, [pc, #192]	; (8006318 <TIM_Base_SetConfig+0x138>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01b      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2f      	ldr	r2, [pc, #188]	; (800631c <TIM_Base_SetConfig+0x13c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d017      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2e      	ldr	r2, [pc, #184]	; (8006320 <TIM_Base_SetConfig+0x140>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2d      	ldr	r2, [pc, #180]	; (8006324 <TIM_Base_SetConfig+0x144>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00f      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <TIM_Base_SetConfig+0x148>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00b      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a2b      	ldr	r2, [pc, #172]	; (800632c <TIM_Base_SetConfig+0x14c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d007      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <TIM_Base_SetConfig+0x150>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a29      	ldr	r2, [pc, #164]	; (8006334 <TIM_Base_SetConfig+0x154>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d108      	bne.n	80062a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a10      	ldr	r2, [pc, #64]	; (800630c <TIM_Base_SetConfig+0x12c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_Base_SetConfig+0xf8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a12      	ldr	r2, [pc, #72]	; (800631c <TIM_Base_SetConfig+0x13c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d103      	bne.n	80062e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d105      	bne.n	80062fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f023 0201 	bic.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	611a      	str	r2, [r3, #16]
  }
}
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40010000 	.word	0x40010000
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40010400 	.word	0x40010400
 8006320:	40014000 	.word	0x40014000
 8006324:	40014400 	.word	0x40014400
 8006328:	40014800 	.word	0x40014800
 800632c:	40001800 	.word	0x40001800
 8006330:	40001c00 	.word	0x40001c00
 8006334:	40002000 	.word	0x40002000

08006338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0201 	bic.w	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f023 030a 	bic.w	r3, r3, #10
 8006374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006396:	b480      	push	{r7}
 8006398:	b087      	sub	sp, #28
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f023 0210 	bic.w	r2, r3, #16
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	031b      	lsls	r3, r3, #12
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	621a      	str	r2, [r3, #32]
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	f043 0307 	orr.w	r3, r3, #7
 8006418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	609a      	str	r2, [r3, #8]
}
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	021a      	lsls	r2, r3, #8
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	431a      	orrs	r2, r3
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4313      	orrs	r3, r2
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	609a      	str	r2, [r3, #8]
}
 8006460:	bf00      	nop
 8006462:	371c      	adds	r7, #28
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006480:	2302      	movs	r3, #2
 8006482:	e05a      	b.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a21      	ldr	r2, [pc, #132]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d022      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d0:	d01d      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1d      	ldr	r2, [pc, #116]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1a      	ldr	r2, [pc, #104]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a17      	ldr	r2, [pc, #92]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a15      	ldr	r2, [pc, #84]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10c      	bne.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4313      	orrs	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40000c00 	.word	0x40000c00
 8006558:	40010400 	.word	0x40010400
 800655c:	40014000 	.word	0x40014000
 8006560:	40001800 	.word	0x40001800

08006564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e042      	b.n	80065fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fa fb7e 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2224      	movs	r2, #36	; 0x24
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fd69 	bl	8007080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08a      	sub	sp, #40	; 0x28
 8006608:	af02      	add	r7, sp, #8
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	4613      	mov	r3, r2
 8006612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b20      	cmp	r3, #32
 8006622:	d175      	bne.n	8006710 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_UART_Transmit+0x2c>
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d101      	bne.n	8006634 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e06e      	b.n	8006712 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2221      	movs	r2, #33	; 0x21
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006642:	f7fa fd57 	bl	80010f4 <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	88fa      	ldrh	r2, [r7, #6]
 800664c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	88fa      	ldrh	r2, [r7, #6]
 8006652:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665c:	d108      	bne.n	8006670 <HAL_UART_Transmit+0x6c>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006666:	2300      	movs	r3, #0
 8006668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	e003      	b.n	8006678 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006674:	2300      	movs	r3, #0
 8006676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006678:	e02e      	b.n	80066d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	2180      	movs	r1, #128	; 0x80
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fb05 	bl	8006c94 <UART_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e03a      	b.n	8006712 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10b      	bne.n	80066ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	3302      	adds	r3, #2
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	e007      	b.n	80066ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	781a      	ldrb	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1cb      	bne.n	800667a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2200      	movs	r2, #0
 80066ea:	2140      	movs	r1, #64	; 0x40
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f000 fad1 	bl	8006c94 <UART_WaitOnFlagUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e006      	b.n	8006712 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	e000      	b.n	8006712 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006710:	2302      	movs	r3, #2
  }
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b0ba      	sub	sp, #232	; 0xe8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006748:	2300      	movs	r3, #0
 800674a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800674e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800675a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10f      	bne.n	8006782 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <HAL_UART_IRQHandler+0x66>
 800676e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fbc2 	bl	8006f04 <UART_Receive_IT>
      return;
 8006780:	e25b      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80de 	beq.w	8006948 <HAL_UART_IRQHandler+0x22c>
 800678c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80d1 	beq.w	8006948 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <HAL_UART_IRQHandler+0xae>
 80067b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	f043 0201 	orr.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <HAL_UART_IRQHandler+0xd2>
 80067d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e6:	f043 0202 	orr.w	r2, r3, #2
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00b      	beq.n	8006812 <HAL_UART_IRQHandler+0xf6>
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	f043 0204 	orr.w	r2, r3, #4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d011      	beq.n	8006842 <HAL_UART_IRQHandler+0x126>
 800681e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800682a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683a:	f043 0208 	orr.w	r2, r3, #8
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 81f2 	beq.w	8006c30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800684c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <HAL_UART_IRQHandler+0x14e>
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb4d 	bl	8006f04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	bf0c      	ite	eq
 8006878:	2301      	moveq	r3, #1
 800687a:	2300      	movne	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <HAL_UART_IRQHandler+0x17a>
 800688e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d04f      	beq.n	8006936 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fa55 	bl	8006d46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d141      	bne.n	800692e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3314      	adds	r3, #20
 80068b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3314      	adds	r3, #20
 80068d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1d9      	bne.n	80068aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d013      	beq.n	8006926 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	4a7e      	ldr	r2, [pc, #504]	; (8006afc <HAL_UART_IRQHandler+0x3e0>)
 8006904:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	4618      	mov	r0, r3
 800690c:	f7fb fac2 	bl	8001e94 <HAL_DMA_Abort_IT>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d016      	beq.n	8006944 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006924:	e00e      	b.n	8006944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f99e 	bl	8006c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692c:	e00a      	b.n	8006944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f99a 	bl	8006c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006934:	e006      	b.n	8006944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f996 	bl	8006c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006942:	e175      	b.n	8006c30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	bf00      	nop
    return;
 8006946:	e173      	b.n	8006c30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	2b01      	cmp	r3, #1
 800694e:	f040 814f 	bne.w	8006bf0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8148 	beq.w	8006bf0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006964:	f003 0310 	and.w	r3, r3, #16
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8141 	beq.w	8006bf0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800696e:	2300      	movs	r3, #0
 8006970:	60bb      	str	r3, [r7, #8]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	60bb      	str	r3, [r7, #8]
 8006982:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	f040 80b6 	bne.w	8006b00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8145 	beq.w	8006c34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069b2:	429a      	cmp	r2, r3
 80069b4:	f080 813e 	bcs.w	8006c34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ca:	f000 8088 	beq.w	8006ade <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1d9      	bne.n	80069ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3314      	adds	r3, #20
 8006a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e1      	bne.n	8006a1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3314      	adds	r3, #20
 8006a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e3      	bne.n	8006a56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aae:	f023 0310 	bic.w	r3, r3, #16
 8006ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	330c      	adds	r3, #12
 8006abc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ac0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ac2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ac6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e3      	bne.n	8006a9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fb f96b 	bl	8001db4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f8c1 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006afa:	e09b      	b.n	8006c34 <HAL_UART_IRQHandler+0x518>
 8006afc:	08006e0d 	.word	0x08006e0d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 808e 	beq.w	8006c38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 8089 	beq.w	8006c38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	330c      	adds	r3, #12
 8006b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e3      	bne.n	8006b26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3314      	adds	r3, #20
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	e853 3f00 	ldrex	r3, [r3]
 8006b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	f023 0301 	bic.w	r3, r3, #1
 8006b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3314      	adds	r3, #20
 8006b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b82:	633a      	str	r2, [r7, #48]	; 0x30
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e3      	bne.n	8006b5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	330c      	adds	r3, #12
 8006baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0310 	bic.w	r3, r3, #16
 8006bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bc8:	61fa      	str	r2, [r7, #28]
 8006bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	69b9      	ldr	r1, [r7, #24]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e3      	bne.n	8006ba4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006be2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f847 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bee:	e023      	b.n	8006c38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d009      	beq.n	8006c10 <HAL_UART_IRQHandler+0x4f4>
 8006bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f913 	bl	8006e34 <UART_Transmit_IT>
    return;
 8006c0e:	e014      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00e      	beq.n	8006c3a <HAL_UART_IRQHandler+0x51e>
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f953 	bl	8006ed4 <UART_EndTransmit_IT>
    return;
 8006c2e:	e004      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
    return;
 8006c30:	bf00      	nop
 8006c32:	e002      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c34:	bf00      	nop
 8006c36:	e000      	b.n	8006c3a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c38:	bf00      	nop
  }
}
 8006c3a:	37e8      	adds	r7, #232	; 0xe8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca4:	e03b      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d037      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cae:	f7fa fa21 	bl	80010f4 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	6a3a      	ldr	r2, [r7, #32]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d302      	bcc.n	8006cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e03a      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d023      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b80      	cmp	r3, #128	; 0x80
 8006cda:	d020      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d01d      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d116      	bne.n	8006d1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f81d 	bl	8006d46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2208      	movs	r2, #8
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e00f      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4013      	ands	r3, r2
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	bf0c      	ite	eq
 8006d2e:	2301      	moveq	r3, #1
 8006d30:	2300      	movne	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d0b4      	beq.n	8006ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b095      	sub	sp, #84	; 0x54
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	330c      	adds	r3, #12
 8006d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d6e:	643a      	str	r2, [r7, #64]	; 0x40
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e5      	bne.n	8006d4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e5      	bne.n	8006d82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d119      	bne.n	8006df2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	330c      	adds	r3, #12
 8006dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f023 0310 	bic.w	r3, r3, #16
 8006dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	330c      	adds	r3, #12
 8006ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dde:	61ba      	str	r2, [r7, #24]
 8006de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6979      	ldr	r1, [r7, #20]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	613b      	str	r3, [r7, #16]
   return(result);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e5      	bne.n	8006dbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e00:	bf00      	nop
 8006e02:	3754      	adds	r7, #84	; 0x54
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff ff1e 	bl	8006c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b21      	cmp	r3, #33	; 0x21
 8006e46:	d13e      	bne.n	8006ec6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e50:	d114      	bne.n	8006e7c <UART_Transmit_IT+0x48>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d110      	bne.n	8006e7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	1c9a      	adds	r2, r3, #2
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	621a      	str	r2, [r3, #32]
 8006e7a:	e008      	b.n	8006e8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	1c59      	adds	r1, r3, #1
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6211      	str	r1, [r2, #32]
 8006e86:	781a      	ldrb	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10f      	bne.n	8006ec2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006eb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ec0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e000      	b.n	8006ec8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ec6:	2302      	movs	r3, #2
  }
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff fea3 	bl	8006c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08c      	sub	sp, #48	; 0x30
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b22      	cmp	r3, #34	; 0x22
 8006f16:	f040 80ae 	bne.w	8007076 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f22:	d117      	bne.n	8006f54 <UART_Receive_IT+0x50>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d113      	bne.n	8006f54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	1c9a      	adds	r2, r3, #2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	629a      	str	r2, [r3, #40]	; 0x28
 8006f52:	e026      	b.n	8006fa2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	d007      	beq.n	8006f78 <UART_Receive_IT+0x74>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <UART_Receive_IT+0x82>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d106      	bne.n	8006f86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	e008      	b.n	8006f98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d15d      	bne.n	8007072 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0220 	bic.w	r2, r2, #32
 8006fc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695a      	ldr	r2, [r3, #20]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d135      	bne.n	8007068 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	330c      	adds	r3, #12
 8007008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	613b      	str	r3, [r7, #16]
   return(result);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f023 0310 	bic.w	r3, r3, #16
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	330c      	adds	r3, #12
 8007020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007022:	623a      	str	r2, [r7, #32]
 8007024:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	69f9      	ldr	r1, [r7, #28]
 8007028:	6a3a      	ldr	r2, [r7, #32]
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e5      	bne.n	8007002 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b10      	cmp	r3, #16
 8007042:	d10a      	bne.n	800705a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff fe0b 	bl	8006c7c <HAL_UARTEx_RxEventCallback>
 8007066:	e002      	b.n	800706e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff fdf3 	bl	8006c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	e002      	b.n	8007078 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e000      	b.n	8007078 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007076:	2302      	movs	r3, #2
  }
}
 8007078:	4618      	mov	r0, r3
 800707a:	3730      	adds	r7, #48	; 0x30
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007084:	b0c0      	sub	sp, #256	; 0x100
 8007086:	af00      	add	r7, sp, #0
 8007088:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709c:	68d9      	ldr	r1, [r3, #12]
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	ea40 0301 	orr.w	r3, r0, r1
 80070a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	431a      	orrs	r2, r3
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070d8:	f021 010c 	bic.w	r1, r1, #12
 80070dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070e6:	430b      	orrs	r3, r1
 80070e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fa:	6999      	ldr	r1, [r3, #24]
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	ea40 0301 	orr.w	r3, r0, r1
 8007106:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b8f      	ldr	r3, [pc, #572]	; (800734c <UART_SetConfig+0x2cc>)
 8007110:	429a      	cmp	r2, r3
 8007112:	d005      	beq.n	8007120 <UART_SetConfig+0xa0>
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b8d      	ldr	r3, [pc, #564]	; (8007350 <UART_SetConfig+0x2d0>)
 800711c:	429a      	cmp	r2, r3
 800711e:	d104      	bne.n	800712a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007120:	f7fd fed2 	bl	8004ec8 <HAL_RCC_GetPCLK2Freq>
 8007124:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007128:	e003      	b.n	8007132 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800712a:	f7fd feb9 	bl	8004ea0 <HAL_RCC_GetPCLK1Freq>
 800712e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713c:	f040 810c 	bne.w	8007358 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007144:	2200      	movs	r2, #0
 8007146:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800714a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800714e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007152:	4622      	mov	r2, r4
 8007154:	462b      	mov	r3, r5
 8007156:	1891      	adds	r1, r2, r2
 8007158:	65b9      	str	r1, [r7, #88]	; 0x58
 800715a:	415b      	adcs	r3, r3
 800715c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800715e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007162:	4621      	mov	r1, r4
 8007164:	eb12 0801 	adds.w	r8, r2, r1
 8007168:	4629      	mov	r1, r5
 800716a:	eb43 0901 	adc.w	r9, r3, r1
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800717a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800717e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007182:	4690      	mov	r8, r2
 8007184:	4699      	mov	r9, r3
 8007186:	4623      	mov	r3, r4
 8007188:	eb18 0303 	adds.w	r3, r8, r3
 800718c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007190:	462b      	mov	r3, r5
 8007192:	eb49 0303 	adc.w	r3, r9, r3
 8007196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80071aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80071ae:	460b      	mov	r3, r1
 80071b0:	18db      	adds	r3, r3, r3
 80071b2:	653b      	str	r3, [r7, #80]	; 0x50
 80071b4:	4613      	mov	r3, r2
 80071b6:	eb42 0303 	adc.w	r3, r2, r3
 80071ba:	657b      	str	r3, [r7, #84]	; 0x54
 80071bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80071c4:	f7f9 f88c 	bl	80002e0 <__aeabi_uldivmod>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4b61      	ldr	r3, [pc, #388]	; (8007354 <UART_SetConfig+0x2d4>)
 80071ce:	fba3 2302 	umull	r2, r3, r3, r2
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	011c      	lsls	r4, r3, #4
 80071d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80071e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80071e8:	4642      	mov	r2, r8
 80071ea:	464b      	mov	r3, r9
 80071ec:	1891      	adds	r1, r2, r2
 80071ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80071f0:	415b      	adcs	r3, r3
 80071f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071f8:	4641      	mov	r1, r8
 80071fa:	eb12 0a01 	adds.w	sl, r2, r1
 80071fe:	4649      	mov	r1, r9
 8007200:	eb43 0b01 	adc.w	fp, r3, r1
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007210:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007218:	4692      	mov	sl, r2
 800721a:	469b      	mov	fp, r3
 800721c:	4643      	mov	r3, r8
 800721e:	eb1a 0303 	adds.w	r3, sl, r3
 8007222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007226:	464b      	mov	r3, r9
 8007228:	eb4b 0303 	adc.w	r3, fp, r3
 800722c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800723c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007240:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007244:	460b      	mov	r3, r1
 8007246:	18db      	adds	r3, r3, r3
 8007248:	643b      	str	r3, [r7, #64]	; 0x40
 800724a:	4613      	mov	r3, r2
 800724c:	eb42 0303 	adc.w	r3, r2, r3
 8007250:	647b      	str	r3, [r7, #68]	; 0x44
 8007252:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007256:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800725a:	f7f9 f841 	bl	80002e0 <__aeabi_uldivmod>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4611      	mov	r1, r2
 8007264:	4b3b      	ldr	r3, [pc, #236]	; (8007354 <UART_SetConfig+0x2d4>)
 8007266:	fba3 2301 	umull	r2, r3, r3, r1
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	2264      	movs	r2, #100	; 0x64
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	1acb      	subs	r3, r1, r3
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800727a:	4b36      	ldr	r3, [pc, #216]	; (8007354 <UART_SetConfig+0x2d4>)
 800727c:	fba3 2302 	umull	r2, r3, r3, r2
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007288:	441c      	add	r4, r3
 800728a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800728e:	2200      	movs	r2, #0
 8007290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007294:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007298:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	1891      	adds	r1, r2, r2
 80072a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80072a4:	415b      	adcs	r3, r3
 80072a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072ac:	4641      	mov	r1, r8
 80072ae:	1851      	adds	r1, r2, r1
 80072b0:	6339      	str	r1, [r7, #48]	; 0x30
 80072b2:	4649      	mov	r1, r9
 80072b4:	414b      	adcs	r3, r1
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80072c4:	4659      	mov	r1, fp
 80072c6:	00cb      	lsls	r3, r1, #3
 80072c8:	4651      	mov	r1, sl
 80072ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ce:	4651      	mov	r1, sl
 80072d0:	00ca      	lsls	r2, r1, #3
 80072d2:	4610      	mov	r0, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	4642      	mov	r2, r8
 80072da:	189b      	adds	r3, r3, r2
 80072dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072e0:	464b      	mov	r3, r9
 80072e2:	460a      	mov	r2, r1
 80072e4:	eb42 0303 	adc.w	r3, r2, r3
 80072e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007300:	460b      	mov	r3, r1
 8007302:	18db      	adds	r3, r3, r3
 8007304:	62bb      	str	r3, [r7, #40]	; 0x28
 8007306:	4613      	mov	r3, r2
 8007308:	eb42 0303 	adc.w	r3, r2, r3
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800730e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007312:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007316:	f7f8 ffe3 	bl	80002e0 <__aeabi_uldivmod>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <UART_SetConfig+0x2d4>)
 8007320:	fba3 1302 	umull	r1, r3, r3, r2
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	2164      	movs	r1, #100	; 0x64
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	3332      	adds	r3, #50	; 0x32
 8007332:	4a08      	ldr	r2, [pc, #32]	; (8007354 <UART_SetConfig+0x2d4>)
 8007334:	fba2 2303 	umull	r2, r3, r2, r3
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	f003 0207 	and.w	r2, r3, #7
 800733e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4422      	add	r2, r4
 8007346:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007348:	e106      	b.n	8007558 <UART_SetConfig+0x4d8>
 800734a:	bf00      	nop
 800734c:	40011000 	.word	0x40011000
 8007350:	40011400 	.word	0x40011400
 8007354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800735c:	2200      	movs	r2, #0
 800735e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007362:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800736a:	4642      	mov	r2, r8
 800736c:	464b      	mov	r3, r9
 800736e:	1891      	adds	r1, r2, r2
 8007370:	6239      	str	r1, [r7, #32]
 8007372:	415b      	adcs	r3, r3
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
 8007376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800737a:	4641      	mov	r1, r8
 800737c:	1854      	adds	r4, r2, r1
 800737e:	4649      	mov	r1, r9
 8007380:	eb43 0501 	adc.w	r5, r3, r1
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	00eb      	lsls	r3, r5, #3
 800738e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007392:	00e2      	lsls	r2, r4, #3
 8007394:	4614      	mov	r4, r2
 8007396:	461d      	mov	r5, r3
 8007398:	4643      	mov	r3, r8
 800739a:	18e3      	adds	r3, r4, r3
 800739c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073a0:	464b      	mov	r3, r9
 80073a2:	eb45 0303 	adc.w	r3, r5, r3
 80073a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80073c6:	4629      	mov	r1, r5
 80073c8:	008b      	lsls	r3, r1, #2
 80073ca:	4621      	mov	r1, r4
 80073cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073d0:	4621      	mov	r1, r4
 80073d2:	008a      	lsls	r2, r1, #2
 80073d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80073d8:	f7f8 ff82 	bl	80002e0 <__aeabi_uldivmod>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4b60      	ldr	r3, [pc, #384]	; (8007564 <UART_SetConfig+0x4e4>)
 80073e2:	fba3 2302 	umull	r2, r3, r3, r2
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	011c      	lsls	r4, r3, #4
 80073ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073fc:	4642      	mov	r2, r8
 80073fe:	464b      	mov	r3, r9
 8007400:	1891      	adds	r1, r2, r2
 8007402:	61b9      	str	r1, [r7, #24]
 8007404:	415b      	adcs	r3, r3
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800740c:	4641      	mov	r1, r8
 800740e:	1851      	adds	r1, r2, r1
 8007410:	6139      	str	r1, [r7, #16]
 8007412:	4649      	mov	r1, r9
 8007414:	414b      	adcs	r3, r1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	f04f 0200 	mov.w	r2, #0
 800741c:	f04f 0300 	mov.w	r3, #0
 8007420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007424:	4659      	mov	r1, fp
 8007426:	00cb      	lsls	r3, r1, #3
 8007428:	4651      	mov	r1, sl
 800742a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800742e:	4651      	mov	r1, sl
 8007430:	00ca      	lsls	r2, r1, #3
 8007432:	4610      	mov	r0, r2
 8007434:	4619      	mov	r1, r3
 8007436:	4603      	mov	r3, r0
 8007438:	4642      	mov	r2, r8
 800743a:	189b      	adds	r3, r3, r2
 800743c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007440:	464b      	mov	r3, r9
 8007442:	460a      	mov	r2, r1
 8007444:	eb42 0303 	adc.w	r3, r2, r3
 8007448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	67bb      	str	r3, [r7, #120]	; 0x78
 8007456:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007464:	4649      	mov	r1, r9
 8007466:	008b      	lsls	r3, r1, #2
 8007468:	4641      	mov	r1, r8
 800746a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800746e:	4641      	mov	r1, r8
 8007470:	008a      	lsls	r2, r1, #2
 8007472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007476:	f7f8 ff33 	bl	80002e0 <__aeabi_uldivmod>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4611      	mov	r1, r2
 8007480:	4b38      	ldr	r3, [pc, #224]	; (8007564 <UART_SetConfig+0x4e4>)
 8007482:	fba3 2301 	umull	r2, r3, r3, r1
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	2264      	movs	r2, #100	; 0x64
 800748a:	fb02 f303 	mul.w	r3, r2, r3
 800748e:	1acb      	subs	r3, r1, r3
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	3332      	adds	r3, #50	; 0x32
 8007494:	4a33      	ldr	r2, [pc, #204]	; (8007564 <UART_SetConfig+0x4e4>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074a0:	441c      	add	r4, r3
 80074a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a6:	2200      	movs	r2, #0
 80074a8:	673b      	str	r3, [r7, #112]	; 0x70
 80074aa:	677a      	str	r2, [r7, #116]	; 0x74
 80074ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	415b      	adcs	r3, r3
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074c0:	4641      	mov	r1, r8
 80074c2:	1851      	adds	r1, r2, r1
 80074c4:	6039      	str	r1, [r7, #0]
 80074c6:	4649      	mov	r1, r9
 80074c8:	414b      	adcs	r3, r1
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074d8:	4659      	mov	r1, fp
 80074da:	00cb      	lsls	r3, r1, #3
 80074dc:	4651      	mov	r1, sl
 80074de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e2:	4651      	mov	r1, sl
 80074e4:	00ca      	lsls	r2, r1, #3
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	4642      	mov	r2, r8
 80074ee:	189b      	adds	r3, r3, r2
 80074f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80074f2:	464b      	mov	r3, r9
 80074f4:	460a      	mov	r2, r1
 80074f6:	eb42 0303 	adc.w	r3, r2, r3
 80074fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	663b      	str	r3, [r7, #96]	; 0x60
 8007506:	667a      	str	r2, [r7, #100]	; 0x64
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007514:	4649      	mov	r1, r9
 8007516:	008b      	lsls	r3, r1, #2
 8007518:	4641      	mov	r1, r8
 800751a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800751e:	4641      	mov	r1, r8
 8007520:	008a      	lsls	r2, r1, #2
 8007522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007526:	f7f8 fedb 	bl	80002e0 <__aeabi_uldivmod>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <UART_SetConfig+0x4e4>)
 8007530:	fba3 1302 	umull	r1, r3, r3, r2
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	2164      	movs	r1, #100	; 0x64
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	3332      	adds	r3, #50	; 0x32
 8007542:	4a08      	ldr	r2, [pc, #32]	; (8007564 <UART_SetConfig+0x4e4>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4422      	add	r2, r4
 8007556:	609a      	str	r2, [r3, #8]
}
 8007558:	bf00      	nop
 800755a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800755e:	46bd      	mov	sp, r7
 8007560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007564:	51eb851f 	.word	0x51eb851f

08007568 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007568:	b084      	sub	sp, #16
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	f107 001c 	add.w	r0, r7, #28
 8007576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800757a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800757e:	2b01      	cmp	r3, #1
 8007580:	d123      	bne.n	80075ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d105      	bne.n	80075be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 fae2 	bl	8008b88 <USB_CoreReset>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]
 80075c8:	e01b      	b.n	8007602 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 fad6 	bl	8008b88 <USB_CoreReset>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38
 80075f4:	e005      	b.n	8007602 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007602:	7fbb      	ldrb	r3, [r7, #30]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d10b      	bne.n	8007620 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f043 0206 	orr.w	r2, r3, #6
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f043 0220 	orr.w	r2, r3, #32
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800762c:	b004      	add	sp, #16
 800762e:	4770      	bx	lr

08007630 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d165      	bne.n	8007710 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4a41      	ldr	r2, [pc, #260]	; (800774c <USB_SetTurnaroundTime+0x11c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d906      	bls.n	800765a <USB_SetTurnaroundTime+0x2a>
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4a40      	ldr	r2, [pc, #256]	; (8007750 <USB_SetTurnaroundTime+0x120>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d202      	bcs.n	800765a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007654:	230f      	movs	r3, #15
 8007656:	617b      	str	r3, [r7, #20]
 8007658:	e062      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	4a3c      	ldr	r2, [pc, #240]	; (8007750 <USB_SetTurnaroundTime+0x120>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d306      	bcc.n	8007670 <USB_SetTurnaroundTime+0x40>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4a3b      	ldr	r2, [pc, #236]	; (8007754 <USB_SetTurnaroundTime+0x124>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d202      	bcs.n	8007670 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800766a:	230e      	movs	r3, #14
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	e057      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4a38      	ldr	r2, [pc, #224]	; (8007754 <USB_SetTurnaroundTime+0x124>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d306      	bcc.n	8007686 <USB_SetTurnaroundTime+0x56>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	4a37      	ldr	r2, [pc, #220]	; (8007758 <USB_SetTurnaroundTime+0x128>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d202      	bcs.n	8007686 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007680:	230d      	movs	r3, #13
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	e04c      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	4a33      	ldr	r2, [pc, #204]	; (8007758 <USB_SetTurnaroundTime+0x128>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d306      	bcc.n	800769c <USB_SetTurnaroundTime+0x6c>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	4a32      	ldr	r2, [pc, #200]	; (800775c <USB_SetTurnaroundTime+0x12c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d802      	bhi.n	800769c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007696:	230c      	movs	r3, #12
 8007698:	617b      	str	r3, [r7, #20]
 800769a:	e041      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4a2f      	ldr	r2, [pc, #188]	; (800775c <USB_SetTurnaroundTime+0x12c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d906      	bls.n	80076b2 <USB_SetTurnaroundTime+0x82>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4a2e      	ldr	r2, [pc, #184]	; (8007760 <USB_SetTurnaroundTime+0x130>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d802      	bhi.n	80076b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80076ac:	230b      	movs	r3, #11
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	e036      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	4a2a      	ldr	r2, [pc, #168]	; (8007760 <USB_SetTurnaroundTime+0x130>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d906      	bls.n	80076c8 <USB_SetTurnaroundTime+0x98>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	4a29      	ldr	r2, [pc, #164]	; (8007764 <USB_SetTurnaroundTime+0x134>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d802      	bhi.n	80076c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80076c2:	230a      	movs	r3, #10
 80076c4:	617b      	str	r3, [r7, #20]
 80076c6:	e02b      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4a26      	ldr	r2, [pc, #152]	; (8007764 <USB_SetTurnaroundTime+0x134>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d906      	bls.n	80076de <USB_SetTurnaroundTime+0xae>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4a25      	ldr	r2, [pc, #148]	; (8007768 <USB_SetTurnaroundTime+0x138>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d202      	bcs.n	80076de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80076d8:	2309      	movs	r3, #9
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	e020      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	4a21      	ldr	r2, [pc, #132]	; (8007768 <USB_SetTurnaroundTime+0x138>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d306      	bcc.n	80076f4 <USB_SetTurnaroundTime+0xc4>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4a20      	ldr	r2, [pc, #128]	; (800776c <USB_SetTurnaroundTime+0x13c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d802      	bhi.n	80076f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80076ee:	2308      	movs	r3, #8
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	e015      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4a1d      	ldr	r2, [pc, #116]	; (800776c <USB_SetTurnaroundTime+0x13c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d906      	bls.n	800770a <USB_SetTurnaroundTime+0xda>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4a1c      	ldr	r2, [pc, #112]	; (8007770 <USB_SetTurnaroundTime+0x140>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d202      	bcs.n	800770a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007704:	2307      	movs	r3, #7
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e00a      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800770a:	2306      	movs	r3, #6
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	e007      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d102      	bne.n	800771c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007716:	2309      	movs	r3, #9
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	e001      	b.n	8007720 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800771c:	2309      	movs	r3, #9
 800771e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	029b      	lsls	r3, r3, #10
 8007734:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007738:	431a      	orrs	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	371c      	adds	r7, #28
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	00d8acbf 	.word	0x00d8acbf
 8007750:	00e4e1c0 	.word	0x00e4e1c0
 8007754:	00f42400 	.word	0x00f42400
 8007758:	01067380 	.word	0x01067380
 800775c:	011a499f 	.word	0x011a499f
 8007760:	01312cff 	.word	0x01312cff
 8007764:	014ca43f 	.word	0x014ca43f
 8007768:	016e3600 	.word	0x016e3600
 800776c:	01a6ab1f 	.word	0x01a6ab1f
 8007770:	01e84800 	.word	0x01e84800

08007774 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f043 0201 	orr.w	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f023 0201 	bic.w	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d115      	bne.n	8007806 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077e6:	200a      	movs	r0, #10
 80077e8:	f7f9 fc90 	bl	800110c <HAL_Delay>
      ms += 10U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	330a      	adds	r3, #10
 80077f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 f939 	bl	8008a6a <USB_GetMode>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d01e      	beq.n	800783c <USB_SetCurrentMode+0x84>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2bc7      	cmp	r3, #199	; 0xc7
 8007802:	d9f0      	bls.n	80077e6 <USB_SetCurrentMode+0x2e>
 8007804:	e01a      	b.n	800783c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d115      	bne.n	8007838 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007818:	200a      	movs	r0, #10
 800781a:	f7f9 fc77 	bl	800110c <HAL_Delay>
      ms += 10U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	330a      	adds	r3, #10
 8007822:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 f920 	bl	8008a6a <USB_GetMode>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <USB_SetCurrentMode+0x84>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2bc7      	cmp	r3, #199	; 0xc7
 8007834:	d9f0      	bls.n	8007818 <USB_SetCurrentMode+0x60>
 8007836:	e001      	b.n	800783c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e005      	b.n	8007848 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2bc8      	cmp	r3, #200	; 0xc8
 8007840:	d101      	bne.n	8007846 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007850:	b084      	sub	sp, #16
 8007852:	b580      	push	{r7, lr}
 8007854:	b086      	sub	sp, #24
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800785e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	e009      	b.n	8007884 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	3340      	adds	r3, #64	; 0x40
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	2200      	movs	r2, #0
 800787c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	3301      	adds	r3, #1
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b0e      	cmp	r3, #14
 8007888:	d9f2      	bls.n	8007870 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800788a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11c      	bne.n	80078cc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078a0:	f043 0302 	orr.w	r3, r3, #2
 80078a4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	e005      	b.n	80078d8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078de:	461a      	mov	r2, r3
 80078e0:	2300      	movs	r3, #0
 80078e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d10d      	bne.n	8007908 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078f4:	2100      	movs	r1, #0
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f968 	bl	8007bcc <USB_SetDevSpeed>
 80078fc:	e008      	b.n	8007910 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078fe:	2101      	movs	r1, #1
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f963 	bl	8007bcc <USB_SetDevSpeed>
 8007906:	e003      	b.n	8007910 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007908:	2103      	movs	r1, #3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f95e 	bl	8007bcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007910:	2110      	movs	r1, #16
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8fa 	bl	8007b0c <USB_FlushTxFifo>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f924 	bl	8007b70 <USB_FlushRxFifo>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007938:	461a      	mov	r2, r3
 800793a:	2300      	movs	r3, #0
 800793c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007944:	461a      	mov	r2, r3
 8007946:	2300      	movs	r3, #0
 8007948:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007950:	461a      	mov	r2, r3
 8007952:	2300      	movs	r3, #0
 8007954:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	e043      	b.n	80079e4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800796e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007972:	d118      	bne.n	80079a6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10a      	bne.n	8007990 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007986:	461a      	mov	r2, r3
 8007988:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	e013      	b.n	80079b8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799c:	461a      	mov	r2, r3
 800799e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	e008      	b.n	80079b8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	461a      	mov	r2, r3
 80079b4:	2300      	movs	r3, #0
 80079b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c4:	461a      	mov	r2, r3
 80079c6:	2300      	movs	r3, #0
 80079c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	015a      	lsls	r2, r3, #5
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4413      	add	r3, r2
 80079d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d6:	461a      	mov	r2, r3
 80079d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	3301      	adds	r3, #1
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079e8:	461a      	mov	r2, r3
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d3b5      	bcc.n	800795c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079f0:	2300      	movs	r3, #0
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	e043      	b.n	8007a7e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a0c:	d118      	bne.n	8007a40 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a20:	461a      	mov	r2, r3
 8007a22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	e013      	b.n	8007a52 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a36:	461a      	mov	r2, r3
 8007a38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e008      	b.n	8007a52 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	2300      	movs	r3, #0
 8007a50:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2300      	movs	r3, #0
 8007a62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a70:	461a      	mov	r2, r3
 8007a72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a82:	461a      	mov	r2, r3
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d3b5      	bcc.n	80079f6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a9c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007aaa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d105      	bne.n	8007ac0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	f043 0210 	orr.w	r2, r3, #16
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	699a      	ldr	r2, [r3, #24]
 8007ac4:	4b10      	ldr	r3, [pc, #64]	; (8007b08 <USB_DevInit+0x2b8>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007acc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	f043 0208 	orr.w	r2, r3, #8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ae0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d107      	bne.n	8007af8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007af0:	f043 0304 	orr.w	r3, r3, #4
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b04:	b004      	add	sp, #16
 8007b06:	4770      	bx	lr
 8007b08:	803c3800 	.word	0x803c3800

08007b0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007b26:	d901      	bls.n	8007b2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e01b      	b.n	8007b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	daf2      	bge.n	8007b1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	019b      	lsls	r3, r3, #6
 8007b3c:	f043 0220 	orr.w	r2, r3, #32
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007b50:	d901      	bls.n	8007b56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e006      	b.n	8007b64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d0f0      	beq.n	8007b44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007b88:	d901      	bls.n	8007b8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e018      	b.n	8007bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	daf2      	bge.n	8007b7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2210      	movs	r2, #16
 8007b9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007bac:	d901      	bls.n	8007bb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e006      	b.n	8007bc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0310 	and.w	r3, r3, #16
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d0f0      	beq.n	8007ba0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	68f9      	ldr	r1, [r7, #12]
 8007be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bec:	4313      	orrs	r3, r2
 8007bee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b087      	sub	sp, #28
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0306 	and.w	r3, r3, #6
 8007c16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	75fb      	strb	r3, [r7, #23]
 8007c22:	e00a      	b.n	8007c3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d002      	beq.n	8007c30 <USB_GetDevSpeed+0x32>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b06      	cmp	r3, #6
 8007c2e:	d102      	bne.n	8007c36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007c30:	2302      	movs	r3, #2
 8007c32:	75fb      	strb	r3, [r7, #23]
 8007c34:	e001      	b.n	8007c3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007c36:	230f      	movs	r3, #15
 8007c38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d13a      	bne.n	8007cda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6a:	69da      	ldr	r2, [r3, #28]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	f003 030f 	and.w	r3, r3, #15
 8007c74:	2101      	movs	r1, #1
 8007c76:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	68f9      	ldr	r1, [r7, #12]
 8007c7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c82:	4313      	orrs	r3, r2
 8007c84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d155      	bne.n	8007d48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	791b      	ldrb	r3, [r3, #4]
 8007cb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	059b      	lsls	r3, r3, #22
 8007cbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	e036      	b.n	8007d48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce0:	69da      	ldr	r2, [r3, #28]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	2101      	movs	r1, #1
 8007cec:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf0:	041b      	lsls	r3, r3, #16
 8007cf2:	68f9      	ldr	r1, [r7, #12]
 8007cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d11a      	bne.n	8007d48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	791b      	ldrb	r3, [r3, #4]
 8007d2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	4313      	orrs	r3, r2
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
	...

08007d58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d161      	bne.n	8007e38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d8a:	d11f      	bne.n	8007dcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007daa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	f003 030f 	and.w	r3, r3, #15
 8007ddc:	2101      	movs	r1, #1
 8007dde:	fa01 f303 	lsl.w	r3, r1, r3
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	43db      	mvns	r3, r3
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dec:	4013      	ands	r3, r2
 8007dee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df6:	69da      	ldr	r2, [r3, #28]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	f003 030f 	and.w	r3, r3, #15
 8007e00:	2101      	movs	r1, #1
 8007e02:	fa01 f303 	lsl.w	r3, r1, r3
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	43db      	mvns	r3, r3
 8007e0a:	68f9      	ldr	r1, [r7, #12]
 8007e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e10:	4013      	ands	r3, r2
 8007e12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	0159      	lsls	r1, r3, #5
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	440b      	add	r3, r1
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4b35      	ldr	r3, [pc, #212]	; (8007f08 <USB_DeactivateEndpoint+0x1b0>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	600b      	str	r3, [r1, #0]
 8007e36:	e060      	b.n	8007efa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e4e:	d11f      	bne.n	8007e90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	0151      	lsls	r1, r2, #5
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	440a      	add	r2, r1
 8007e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ea6:	041b      	lsls	r3, r3, #16
 8007ea8:	43db      	mvns	r3, r3
 8007eaa:	68f9      	ldr	r1, [r7, #12]
 8007eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	f003 030f 	and.w	r3, r3, #15
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	43db      	mvns	r3, r3
 8007ece:	68f9      	ldr	r1, [r7, #12]
 8007ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	0159      	lsls	r1, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	440b      	add	r3, r1
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <USB_DeactivateEndpoint+0x1b4>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	ec337800 	.word	0xec337800
 8007f0c:	eff37800 	.word	0xeff37800

08007f10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08a      	sub	sp, #40	; 0x28
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	785b      	ldrb	r3, [r3, #1]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	f040 8180 	bne.w	8008232 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d132      	bne.n	8007fa0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	0151      	lsls	r1, r2, #5
 8007f4c:	69fa      	ldr	r2, [r7, #28]
 8007f4e:	440a      	add	r2, r1
 8007f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	0151      	lsls	r1, r2, #5
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	440a      	add	r2, r1
 8007f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f98:	0cdb      	lsrs	r3, r3, #19
 8007f9a:	04db      	lsls	r3, r3, #19
 8007f9c:	6113      	str	r3, [r2, #16]
 8007f9e:	e098      	b.n	80080d2 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	0151      	lsls	r1, r2, #5
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	440a      	add	r2, r1
 8007fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fba:	0cdb      	lsrs	r3, r3, #19
 8007fbc:	04db      	lsls	r3, r3, #19
 8007fbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fe2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d11a      	bne.n	8008020 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	691a      	ldr	r2, [r3, #16]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d903      	bls.n	8007ffe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	689a      	ldr	r2, [r3, #8]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	69fa      	ldr	r2, [r7, #28]
 8008012:	440a      	add	r2, r1
 8008014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800801c:	6113      	str	r3, [r2, #16]
 800801e:	e045      	b.n	80080ac <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	4413      	add	r3, r2
 800802a:	1e5a      	subs	r2, r3, #1
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	fbb2 f3f3 	udiv	r3, r2, r3
 8008034:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	8afb      	ldrh	r3, [r7, #22]
 8008046:	04db      	lsls	r3, r3, #19
 8008048:	4619      	mov	r1, r3
 800804a:	4ba4      	ldr	r3, [pc, #656]	; (80082dc <USB_EPStartXfer+0x3cc>)
 800804c:	400b      	ands	r3, r1
 800804e:	69b9      	ldr	r1, [r7, #24]
 8008050:	0148      	lsls	r0, r1, #5
 8008052:	69f9      	ldr	r1, [r7, #28]
 8008054:	4401      	add	r1, r0
 8008056:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800805a:	4313      	orrs	r3, r2
 800805c:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	791b      	ldrb	r3, [r3, #4]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d122      	bne.n	80080ac <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	0151      	lsls	r1, r2, #5
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	440a      	add	r2, r1
 800807c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008080:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008084:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	4413      	add	r3, r2
 800808e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008092:	691a      	ldr	r2, [r3, #16]
 8008094:	8afb      	ldrh	r3, [r7, #22]
 8008096:	075b      	lsls	r3, r3, #29
 8008098:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800809c:	69b9      	ldr	r1, [r7, #24]
 800809e:	0148      	lsls	r0, r1, #5
 80080a0:	69f9      	ldr	r1, [r7, #28]
 80080a2:	4401      	add	r1, r0
 80080a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080a8:	4313      	orrs	r3, r2
 80080aa:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b8:	691a      	ldr	r2, [r3, #16]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080c2:	69b9      	ldr	r1, [r7, #24]
 80080c4:	0148      	lsls	r0, r1, #5
 80080c6:	69f9      	ldr	r1, [r7, #28]
 80080c8:	4401      	add	r1, r0
 80080ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080ce:	4313      	orrs	r3, r2
 80080d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d14b      	bne.n	8008170 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d009      	beq.n	80080f4 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ec:	461a      	mov	r2, r3
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	791b      	ldrb	r3, [r3, #4]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d128      	bne.n	800814e <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008108:	2b00      	cmp	r3, #0
 800810a:	d110      	bne.n	800812e <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	0151      	lsls	r1, r2, #5
 800811e:	69fa      	ldr	r2, [r7, #28]
 8008120:	440a      	add	r2, r1
 8008122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	e00f      	b.n	800814e <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800814c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	0151      	lsls	r1, r2, #5
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	440a      	add	r2, r1
 8008164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008168:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	e165      	b.n	800843c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	0151      	lsls	r1, r2, #5
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	440a      	add	r2, r1
 8008186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800818e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	791b      	ldrb	r3, [r3, #4]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d015      	beq.n	80081c4 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 814d 	beq.w	800843c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	2101      	movs	r1, #1
 80081b4:	fa01 f303 	lsl.w	r3, r1, r3
 80081b8:	69f9      	ldr	r1, [r7, #28]
 80081ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081be:	4313      	orrs	r3, r2
 80081c0:	634b      	str	r3, [r1, #52]	; 0x34
 80081c2:	e13b      	b.n	800843c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d110      	bne.n	80081f6 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	e00f      	b.n	8008216 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	0151      	lsls	r1, r2, #5
 8008208:	69fa      	ldr	r2, [r7, #28]
 800820a:	440a      	add	r2, r1
 800820c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008214:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	68d9      	ldr	r1, [r3, #12]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	781a      	ldrb	r2, [r3, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	b298      	uxth	r0, r3
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	4603      	mov	r3, r0
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 f9b8 	bl	80085a0 <USB_WritePacket>
 8008230:	e104      	b.n	800843c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800824c:	0cdb      	lsrs	r3, r3, #19
 800824e:	04db      	lsls	r3, r3, #19
 8008250:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800826c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008270:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008274:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d131      	bne.n	80082e0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a0:	691a      	ldr	r2, [r3, #16]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082aa:	69b9      	ldr	r1, [r7, #24]
 80082ac:	0148      	lsls	r0, r1, #5
 80082ae:	69f9      	ldr	r1, [r7, #28]
 80082b0:	4401      	add	r1, r0
 80082b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082b6:	4313      	orrs	r3, r2
 80082b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	0151      	lsls	r1, r2, #5
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	440a      	add	r2, r1
 80082d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082d8:	6113      	str	r3, [r2, #16]
 80082da:	e061      	b.n	80083a0 <USB_EPStartXfer+0x490>
 80082dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d123      	bne.n	8008330 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f4:	691a      	ldr	r2, [r3, #16]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082fe:	69b9      	ldr	r1, [r7, #24]
 8008300:	0148      	lsls	r0, r1, #5
 8008302:	69f9      	ldr	r1, [r7, #28]
 8008304:	4401      	add	r1, r0
 8008306:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800830a:	4313      	orrs	r3, r2
 800830c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	4413      	add	r3, r2
 8008316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	0151      	lsls	r1, r2, #5
 8008320:	69fa      	ldr	r2, [r7, #28]
 8008322:	440a      	add	r2, r1
 8008324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008328:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800832c:	6113      	str	r3, [r2, #16]
 800832e:	e037      	b.n	80083a0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	4413      	add	r3, r2
 800833a:	1e5a      	subs	r2, r3, #1
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	fbb2 f3f3 	udiv	r3, r2, r3
 8008344:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	8afa      	ldrh	r2, [r7, #22]
 800834c:	fb03 f202 	mul.w	r2, r3, r2
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	8afb      	ldrh	r3, [r7, #22]
 8008364:	04d9      	lsls	r1, r3, #19
 8008366:	4b38      	ldr	r3, [pc, #224]	; (8008448 <USB_EPStartXfer+0x538>)
 8008368:	400b      	ands	r3, r1
 800836a:	69b9      	ldr	r1, [r7, #24]
 800836c:	0148      	lsls	r0, r1, #5
 800836e:	69f9      	ldr	r1, [r7, #28]
 8008370:	4401      	add	r1, r0
 8008372:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008376:	4313      	orrs	r3, r2
 8008378:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008390:	69b9      	ldr	r1, [r7, #24]
 8008392:	0148      	lsls	r0, r1, #5
 8008394:	69f9      	ldr	r1, [r7, #28]
 8008396:	4401      	add	r1, r0
 8008398:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800839c:	4313      	orrs	r3, r2
 800839e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d10d      	bne.n	80083c2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	68d9      	ldr	r1, [r3, #12]
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083be:	460a      	mov	r2, r1
 80083c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	791b      	ldrb	r3, [r3, #4]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d128      	bne.n	800841c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d110      	bne.n	80083fc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	0151      	lsls	r1, r2, #5
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	440a      	add	r2, r1
 80083f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083f8:	6013      	str	r3, [r2, #0]
 80083fa:	e00f      	b.n	800841c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	0151      	lsls	r1, r2, #5
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	440a      	add	r2, r1
 8008412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800841a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	440a      	add	r2, r1
 8008432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008436:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800843a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3720      	adds	r7, #32
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	1ff80000 	.word	0x1ff80000

0800844c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d14a      	bne.n	8008500 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800847e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008482:	f040 8086 	bne.w	8008592 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	7812      	ldrb	r2, [r2, #0]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	7812      	ldrb	r2, [r2, #0]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3301      	adds	r3, #1
 80084d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80084da:	4293      	cmp	r3, r2
 80084dc:	d902      	bls.n	80084e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	75fb      	strb	r3, [r7, #23]
          break;
 80084e2:	e056      	b.n	8008592 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084fc:	d0e7      	beq.n	80084ce <USB_EPStopXfer+0x82>
 80084fe:	e048      	b.n	8008592 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008518:	d13b      	bne.n	8008592 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	683a      	ldr	r2, [r7, #0]
 800852c:	7812      	ldrb	r2, [r2, #0]
 800852e:	0151      	lsls	r1, r2, #5
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	440a      	add	r2, r1
 8008534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008538:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800853c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	7812      	ldrb	r2, [r2, #0]
 8008552:	0151      	lsls	r1, r2, #5
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	440a      	add	r2, r1
 8008558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800855c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008560:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f242 7210 	movw	r2, #10000	; 0x2710
 800856e:	4293      	cmp	r3, r2
 8008570:	d902      	bls.n	8008578 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	75fb      	strb	r3, [r7, #23]
          break;
 8008576:	e00c      	b.n	8008592 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800858c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008590:	d0e7      	beq.n	8008562 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008592:	7dfb      	ldrb	r3, [r7, #23]
}
 8008594:	4618      	mov	r0, r3
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b089      	sub	sp, #36	; 0x24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4611      	mov	r1, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	460b      	mov	r3, r1
 80085b0:	71fb      	strb	r3, [r7, #7]
 80085b2:	4613      	mov	r3, r2
 80085b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80085be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d123      	bne.n	800860e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80085c6:	88bb      	ldrh	r3, [r7, #4]
 80085c8:	3303      	adds	r3, #3
 80085ca:	089b      	lsrs	r3, r3, #2
 80085cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80085ce:	2300      	movs	r3, #0
 80085d0:	61bb      	str	r3, [r7, #24]
 80085d2:	e018      	b.n	8008606 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	031a      	lsls	r2, r3, #12
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e0:	461a      	mov	r2, r3
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	3301      	adds	r3, #1
 80085ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	3301      	adds	r3, #1
 80085f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	3301      	adds	r3, #1
 80085f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3301      	adds	r3, #1
 80085fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	3301      	adds	r3, #1
 8008604:	61bb      	str	r3, [r7, #24]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	429a      	cmp	r2, r3
 800860c:	d3e2      	bcc.n	80085d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3724      	adds	r7, #36	; 0x24
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800861c:	b480      	push	{r7}
 800861e:	b08b      	sub	sp, #44	; 0x2c
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008632:	88fb      	ldrh	r3, [r7, #6]
 8008634:	089b      	lsrs	r3, r3, #2
 8008636:	b29b      	uxth	r3, r3
 8008638:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008642:	2300      	movs	r3, #0
 8008644:	623b      	str	r3, [r7, #32]
 8008646:	e014      	b.n	8008672 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	601a      	str	r2, [r3, #0]
    pDest++;
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	3301      	adds	r3, #1
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	3301      	adds	r3, #1
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	3301      	adds	r3, #1
 8008664:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	3301      	adds	r3, #1
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	3301      	adds	r3, #1
 8008670:	623b      	str	r3, [r7, #32]
 8008672:	6a3a      	ldr	r2, [r7, #32]
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	429a      	cmp	r2, r3
 8008678:	d3e6      	bcc.n	8008648 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800867a:	8bfb      	ldrh	r3, [r7, #30]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01e      	beq.n	80086be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868a:	461a      	mov	r2, r3
 800868c:	f107 0310 	add.w	r3, r7, #16
 8008690:	6812      	ldr	r2, [r2, #0]
 8008692:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	6a3b      	ldr	r3, [r7, #32]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	fa22 f303 	lsr.w	r3, r2, r3
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	701a      	strb	r2, [r3, #0]
      i++;
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	3301      	adds	r3, #1
 80086aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	3301      	adds	r3, #1
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80086b2:	8bfb      	ldrh	r3, [r7, #30]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086b8:	8bfb      	ldrh	r3, [r7, #30]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1ea      	bne.n	8008694 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	372c      	adds	r7, #44	; 0x2c
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d12c      	bne.n	8008742 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	db12      	blt.n	8008720 <USB_EPSetStall+0x54>
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00f      	beq.n	8008720 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	0151      	lsls	r1, r2, #5
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	440a      	add	r2, r1
 8008716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800871a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800871e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	0151      	lsls	r1, r2, #5
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	440a      	add	r2, r1
 8008736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800873a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	e02b      	b.n	800879a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	db12      	blt.n	800877a <USB_EPSetStall+0xae>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00f      	beq.n	800877a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008774:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008778:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	440a      	add	r2, r1
 8008790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008798:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	785b      	ldrb	r3, [r3, #1]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d128      	bne.n	8008816 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	791b      	ldrb	r3, [r3, #4]
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d003      	beq.n	80087f4 <USB_EPClearStall+0x4c>
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	791b      	ldrb	r3, [r3, #4]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d138      	bne.n	8008866 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	0151      	lsls	r1, r2, #5
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	440a      	add	r2, r1
 800880a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800880e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	e027      	b.n	8008866 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008830:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008834:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	791b      	ldrb	r3, [r3, #4]
 800883a:	2b03      	cmp	r3, #3
 800883c:	d003      	beq.n	8008846 <USB_EPClearStall+0x9e>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	791b      	ldrb	r3, [r3, #4]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d10f      	bne.n	8008866 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	015a      	lsls	r2, r3, #5
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	0151      	lsls	r1, r2, #5
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	440a      	add	r2, r1
 800885c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008864:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	460b      	mov	r3, r1
 800887e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008892:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008896:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	78fb      	ldrb	r3, [r7, #3]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80088a8:	68f9      	ldr	r1, [r7, #12]
 80088aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088ae:	4313      	orrs	r3, r2
 80088b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088da:	f023 0303 	bic.w	r3, r3, #3
 80088de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088ee:	f023 0302 	bic.w	r3, r3, #2
 80088f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800891c:	f023 0303 	bic.w	r3, r3, #3
 8008920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008930:	f043 0302 	orr.w	r3, r3, #2
 8008934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	4013      	ands	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800895c:	68fb      	ldr	r3, [r7, #12]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	4013      	ands	r3, r2
 800898c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	0c1b      	lsrs	r3, r3, #16
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	4013      	ands	r3, r2
 80089c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	b29b      	uxth	r3, r3
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b085      	sub	sp, #20
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	4013      	ands	r3, r2
 80089fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a00:	68bb      	ldr	r3, [r7, #8]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b087      	sub	sp, #28
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	f003 030f 	and.w	r3, r3, #15
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3e:	01db      	lsls	r3, r3, #7
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	f003 0301 	and.w	r3, r3, #1
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b085      	sub	sp, #20
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aa0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008aa4:	f023 0307 	bic.w	r3, r3, #7
 8008aa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008abc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	333c      	adds	r3, #60	; 0x3c
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	4a26      	ldr	r2, [pc, #152]	; (8008b84 <USB_EP0_OutStart+0xb8>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d90a      	bls.n	8008b06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b00:	d101      	bne.n	8008b06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	e037      	b.n	8008b76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2300      	movs	r3, #0
 8008b10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b34:	f043 0318 	orr.w	r3, r3, #24
 8008b38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008b4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b4e:	7afb      	ldrb	r3, [r7, #11]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d10f      	bne.n	8008b74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008b72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	4f54300a 	.word	0x4f54300a

08008b88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	3301      	adds	r3, #1
 8008b98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008ba0:	d901      	bls.n	8008ba6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e01b      	b.n	8008bde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	daf2      	bge.n	8008b94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	f043 0201 	orr.w	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008bca:	d901      	bls.n	8008bd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e006      	b.n	8008bde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d0f0      	beq.n	8008bbe <USB_CoreReset+0x36>

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008bf8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008bfc:	f003 feb8 	bl	800c970 <USBD_static_malloc>
 8008c00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d109      	bne.n	8008c1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	32b0      	adds	r2, #176	; 0xb0
 8008c12:	2100      	movs	r1, #0
 8008c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008c18:	2302      	movs	r3, #2
 8008c1a:	e0d4      	b.n	8008dc6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008c1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008c20:	2100      	movs	r1, #0
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f004 f89f 	bl	800cd66 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	32b0      	adds	r2, #176	; 0xb0
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	32b0      	adds	r2, #176	; 0xb0
 8008c42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	7c1b      	ldrb	r3, [r3, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d138      	bne.n	8008cc6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c54:	4b5e      	ldr	r3, [pc, #376]	; (8008dd0 <USBD_CDC_Init+0x1e4>)
 8008c56:	7819      	ldrb	r1, [r3, #0]
 8008c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f003 fd15 	bl	800c68e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008c64:	4b5a      	ldr	r3, [pc, #360]	; (8008dd0 <USBD_CDC_Init+0x1e4>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	f003 020f 	and.w	r2, r3, #15
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	440b      	add	r3, r1
 8008c78:	3324      	adds	r3, #36	; 0x24
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008c7e:	4b55      	ldr	r3, [pc, #340]	; (8008dd4 <USBD_CDC_Init+0x1e8>)
 8008c80:	7819      	ldrb	r1, [r3, #0]
 8008c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c86:	2202      	movs	r2, #2
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f003 fd00 	bl	800c68e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c8e:	4b51      	ldr	r3, [pc, #324]	; (8008dd4 <USBD_CDC_Init+0x1e8>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	f003 020f 	and.w	r2, r3, #15
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008caa:	4b4b      	ldr	r3, [pc, #300]	; (8008dd8 <USBD_CDC_Init+0x1ec>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	f003 020f 	and.w	r2, r3, #15
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	440b      	add	r3, r1
 8008cbe:	3326      	adds	r3, #38	; 0x26
 8008cc0:	2210      	movs	r2, #16
 8008cc2:	801a      	strh	r2, [r3, #0]
 8008cc4:	e035      	b.n	8008d32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008cc6:	4b42      	ldr	r3, [pc, #264]	; (8008dd0 <USBD_CDC_Init+0x1e4>)
 8008cc8:	7819      	ldrb	r1, [r3, #0]
 8008cca:	2340      	movs	r3, #64	; 0x40
 8008ccc:	2202      	movs	r2, #2
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f003 fcdd 	bl	800c68e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008cd4:	4b3e      	ldr	r3, [pc, #248]	; (8008dd0 <USBD_CDC_Init+0x1e4>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f003 020f 	and.w	r2, r3, #15
 8008cdc:	6879      	ldr	r1, [r7, #4]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	440b      	add	r3, r1
 8008ce8:	3324      	adds	r3, #36	; 0x24
 8008cea:	2201      	movs	r2, #1
 8008cec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008cee:	4b39      	ldr	r3, [pc, #228]	; (8008dd4 <USBD_CDC_Init+0x1e8>)
 8008cf0:	7819      	ldrb	r1, [r3, #0]
 8008cf2:	2340      	movs	r3, #64	; 0x40
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f003 fcc9 	bl	800c68e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008cfc:	4b35      	ldr	r3, [pc, #212]	; (8008dd4 <USBD_CDC_Init+0x1e8>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	f003 020f 	and.w	r2, r3, #15
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d14:	2201      	movs	r2, #1
 8008d16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008d18:	4b2f      	ldr	r3, [pc, #188]	; (8008dd8 <USBD_CDC_Init+0x1ec>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	f003 020f 	and.w	r2, r3, #15
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	3326      	adds	r3, #38	; 0x26
 8008d2e:	2210      	movs	r2, #16
 8008d30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d32:	4b29      	ldr	r3, [pc, #164]	; (8008dd8 <USBD_CDC_Init+0x1ec>)
 8008d34:	7819      	ldrb	r1, [r3, #0]
 8008d36:	2308      	movs	r3, #8
 8008d38:	2203      	movs	r2, #3
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f003 fca7 	bl	800c68e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008d40:	4b25      	ldr	r3, [pc, #148]	; (8008dd8 <USBD_CDC_Init+0x1ec>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 020f 	and.w	r2, r3, #15
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	3324      	adds	r3, #36	; 0x24
 8008d56:	2201      	movs	r2, #1
 8008d58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	33b0      	adds	r3, #176	; 0xb0
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008d90:	2302      	movs	r3, #2
 8008d92:	e018      	b.n	8008dc6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	7c1b      	ldrb	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10a      	bne.n	8008db2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d9c:	4b0d      	ldr	r3, [pc, #52]	; (8008dd4 <USBD_CDC_Init+0x1e8>)
 8008d9e:	7819      	ldrb	r1, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f003 fd5e 	bl	800c86c <USBD_LL_PrepareReceive>
 8008db0:	e008      	b.n	8008dc4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008db2:	4b08      	ldr	r3, [pc, #32]	; (8008dd4 <USBD_CDC_Init+0x1e8>)
 8008db4:	7819      	ldrb	r1, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dbc:	2340      	movs	r3, #64	; 0x40
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f003 fd54 	bl	800c86c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000093 	.word	0x20000093
 8008dd4:	20000094 	.word	0x20000094
 8008dd8:	20000095 	.word	0x20000095

08008ddc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008de8:	4b3a      	ldr	r3, [pc, #232]	; (8008ed4 <USBD_CDC_DeInit+0xf8>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f003 fc73 	bl	800c6da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008df4:	4b37      	ldr	r3, [pc, #220]	; (8008ed4 <USBD_CDC_DeInit+0xf8>)
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	f003 020f 	and.w	r2, r3, #15
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	3324      	adds	r3, #36	; 0x24
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008e0e:	4b32      	ldr	r3, [pc, #200]	; (8008ed8 <USBD_CDC_DeInit+0xfc>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f003 fc60 	bl	800c6da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008e1a:	4b2f      	ldr	r3, [pc, #188]	; (8008ed8 <USBD_CDC_DeInit+0xfc>)
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	f003 020f 	and.w	r2, r3, #15
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e32:	2200      	movs	r2, #0
 8008e34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008e36:	4b29      	ldr	r3, [pc, #164]	; (8008edc <USBD_CDC_DeInit+0x100>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f003 fc4c 	bl	800c6da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008e42:	4b26      	ldr	r3, [pc, #152]	; (8008edc <USBD_CDC_DeInit+0x100>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	f003 020f 	and.w	r2, r3, #15
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	3324      	adds	r3, #36	; 0x24
 8008e58:	2200      	movs	r2, #0
 8008e5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008e5c:	4b1f      	ldr	r3, [pc, #124]	; (8008edc <USBD_CDC_DeInit+0x100>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	f003 020f 	and.w	r2, r3, #15
 8008e64:	6879      	ldr	r1, [r7, #4]
 8008e66:	4613      	mov	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	440b      	add	r3, r1
 8008e70:	3326      	adds	r3, #38	; 0x26
 8008e72:	2200      	movs	r2, #0
 8008e74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	32b0      	adds	r2, #176	; 0xb0
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01f      	beq.n	8008ec8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	33b0      	adds	r3, #176	; 0xb0
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	32b0      	adds	r2, #176	; 0xb0
 8008ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f003 fd6e 	bl	800c98c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	32b0      	adds	r2, #176	; 0xb0
 8008eba:	2100      	movs	r1, #0
 8008ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20000093 	.word	0x20000093
 8008ed8:	20000094 	.word	0x20000094
 8008edc:	20000095 	.word	0x20000095

08008ee0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	32b0      	adds	r2, #176	; 0xb0
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e0bf      	b.n	8009090 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d050      	beq.n	8008fbe <USBD_CDC_Setup+0xde>
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	f040 80af 	bne.w	8009080 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	88db      	ldrh	r3, [r3, #6]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d03a      	beq.n	8008fa0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	b25b      	sxtb	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	da1b      	bge.n	8008f6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	33b0      	adds	r3, #176	; 0xb0
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008f4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	88d2      	ldrh	r2, [r2, #6]
 8008f50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	88db      	ldrh	r3, [r3, #6]
 8008f56:	2b07      	cmp	r3, #7
 8008f58:	bf28      	it	cs
 8008f5a:	2307      	movcs	r3, #7
 8008f5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	89fa      	ldrh	r2, [r7, #14]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 fdbf 	bl	800aae8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008f6a:	e090      	b.n	800908e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	785a      	ldrb	r2, [r3, #1]
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	88db      	ldrh	r3, [r3, #6]
 8008f7a:	2b3f      	cmp	r3, #63	; 0x3f
 8008f7c:	d803      	bhi.n	8008f86 <USBD_CDC_Setup+0xa6>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	88db      	ldrh	r3, [r3, #6]
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	e000      	b.n	8008f88 <USBD_CDC_Setup+0xa8>
 8008f86:	2240      	movs	r2, #64	; 0x40
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008f8e:	6939      	ldr	r1, [r7, #16]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008f96:	461a      	mov	r2, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 fdd1 	bl	800ab40 <USBD_CtlPrepareRx>
      break;
 8008f9e:	e076      	b.n	800908e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	33b0      	adds	r3, #176	; 0xb0
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	7850      	ldrb	r0, [r2, #1]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	4798      	blx	r3
      break;
 8008fbc:	e067      	b.n	800908e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	2b0b      	cmp	r3, #11
 8008fc4:	d851      	bhi.n	800906a <USBD_CDC_Setup+0x18a>
 8008fc6:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <USBD_CDC_Setup+0xec>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	08008ffd 	.word	0x08008ffd
 8008fd0:	08009079 	.word	0x08009079
 8008fd4:	0800906b 	.word	0x0800906b
 8008fd8:	0800906b 	.word	0x0800906b
 8008fdc:	0800906b 	.word	0x0800906b
 8008fe0:	0800906b 	.word	0x0800906b
 8008fe4:	0800906b 	.word	0x0800906b
 8008fe8:	0800906b 	.word	0x0800906b
 8008fec:	0800906b 	.word	0x0800906b
 8008ff0:	0800906b 	.word	0x0800906b
 8008ff4:	08009027 	.word	0x08009027
 8008ff8:	08009051 	.word	0x08009051
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b03      	cmp	r3, #3
 8009006:	d107      	bne.n	8009018 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009008:	f107 030a 	add.w	r3, r7, #10
 800900c:	2202      	movs	r2, #2
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 fd69 	bl	800aae8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009016:	e032      	b.n	800907e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 fce7 	bl	800a9ee <USBD_CtlError>
            ret = USBD_FAIL;
 8009020:	2303      	movs	r3, #3
 8009022:	75fb      	strb	r3, [r7, #23]
          break;
 8009024:	e02b      	b.n	800907e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b03      	cmp	r3, #3
 8009030:	d107      	bne.n	8009042 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009032:	f107 030d 	add.w	r3, r7, #13
 8009036:	2201      	movs	r2, #1
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f001 fd54 	bl	800aae8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009040:	e01d      	b.n	800907e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 fcd2 	bl	800a9ee <USBD_CtlError>
            ret = USBD_FAIL;
 800904a:	2303      	movs	r3, #3
 800904c:	75fb      	strb	r3, [r7, #23]
          break;
 800904e:	e016      	b.n	800907e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b03      	cmp	r3, #3
 800905a:	d00f      	beq.n	800907c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fcc5 	bl	800a9ee <USBD_CtlError>
            ret = USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009068:	e008      	b.n	800907c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f001 fcbe 	bl	800a9ee <USBD_CtlError>
          ret = USBD_FAIL;
 8009072:	2303      	movs	r3, #3
 8009074:	75fb      	strb	r3, [r7, #23]
          break;
 8009076:	e002      	b.n	800907e <USBD_CDC_Setup+0x19e>
          break;
 8009078:	bf00      	nop
 800907a:	e008      	b.n	800908e <USBD_CDC_Setup+0x1ae>
          break;
 800907c:	bf00      	nop
      }
      break;
 800907e:	e006      	b.n	800908e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f001 fcb3 	bl	800a9ee <USBD_CtlError>
      ret = USBD_FAIL;
 8009088:	2303      	movs	r3, #3
 800908a:	75fb      	strb	r3, [r7, #23]
      break;
 800908c:	bf00      	nop
  }

  return (uint8_t)ret;
 800908e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3718      	adds	r7, #24
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	32b0      	adds	r2, #176	; 0xb0
 80090b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80090be:	2303      	movs	r3, #3
 80090c0:	e065      	b.n	800918e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	32b0      	adds	r2, #176	; 0xb0
 80090cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	f003 020f 	and.w	r2, r3, #15
 80090d8:	6879      	ldr	r1, [r7, #4]
 80090da:	4613      	mov	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	440b      	add	r3, r1
 80090e4:	3318      	adds	r3, #24
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d02f      	beq.n	800914c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	f003 020f 	and.w	r2, r3, #15
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	4613      	mov	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	440b      	add	r3, r1
 80090fe:	3318      	adds	r3, #24
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	f003 010f 	and.w	r1, r3, #15
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	460b      	mov	r3, r1
 800910c:	00db      	lsls	r3, r3, #3
 800910e:	440b      	add	r3, r1
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4403      	add	r3, r0
 8009114:	331c      	adds	r3, #28
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	fbb2 f1f3 	udiv	r1, r2, r3
 800911c:	fb01 f303 	mul.w	r3, r1, r3
 8009120:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009122:	2b00      	cmp	r3, #0
 8009124:	d112      	bne.n	800914c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	f003 020f 	and.w	r2, r3, #15
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	3318      	adds	r3, #24
 800913a:	2200      	movs	r2, #0
 800913c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800913e:	78f9      	ldrb	r1, [r7, #3]
 8009140:	2300      	movs	r3, #0
 8009142:	2200      	movs	r2, #0
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f003 fb70 	bl	800c82a <USBD_LL_Transmit>
 800914a:	e01f      	b.n	800918c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2200      	movs	r2, #0
 8009150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	33b0      	adds	r3, #176	; 0xb0
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d010      	beq.n	800918c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	33b0      	adds	r3, #176	; 0xb0
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	460b      	mov	r3, r1
 80091a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	32b0      	adds	r2, #176	; 0xb0
 80091ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	32b0      	adds	r2, #176	; 0xb0
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e01a      	b.n	80091fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f003 fb6e 	bl	800c8ae <USBD_LL_GetRxDataSize>
 80091d2:	4602      	mov	r2, r0
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	33b0      	adds	r3, #176	; 0xb0
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091f8:	4611      	mov	r1, r2
 80091fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	32b0      	adds	r2, #176	; 0xb0
 8009218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009224:	2303      	movs	r3, #3
 8009226:	e025      	b.n	8009274 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	33b0      	adds	r3, #176	; 0xb0
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01a      	beq.n	8009272 <USBD_CDC_EP0_RxReady+0x6c>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009242:	2bff      	cmp	r3, #255	; 0xff
 8009244:	d015      	beq.n	8009272 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	33b0      	adds	r3, #176	; 0xb0
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800925e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009266:	b292      	uxth	r2, r2
 8009268:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	22ff      	movs	r2, #255	; 0xff
 800926e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009284:	2182      	movs	r1, #130	; 0x82
 8009286:	4818      	ldr	r0, [pc, #96]	; (80092e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009288:	f000 fd4f 	bl	8009d2a <USBD_GetEpDesc>
 800928c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800928e:	2101      	movs	r1, #1
 8009290:	4815      	ldr	r0, [pc, #84]	; (80092e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009292:	f000 fd4a 	bl	8009d2a <USBD_GetEpDesc>
 8009296:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009298:	2181      	movs	r1, #129	; 0x81
 800929a:	4813      	ldr	r0, [pc, #76]	; (80092e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800929c:	f000 fd45 	bl	8009d2a <USBD_GetEpDesc>
 80092a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2210      	movs	r2, #16
 80092ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d006      	beq.n	80092c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092bc:	711a      	strb	r2, [r3, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d006      	beq.n	80092d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092d0:	711a      	strb	r2, [r3, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2243      	movs	r2, #67	; 0x43
 80092da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80092dc:	4b02      	ldr	r3, [pc, #8]	; (80092e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000050 	.word	0x20000050

080092ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092f4:	2182      	movs	r1, #130	; 0x82
 80092f6:	4818      	ldr	r0, [pc, #96]	; (8009358 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80092f8:	f000 fd17 	bl	8009d2a <USBD_GetEpDesc>
 80092fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092fe:	2101      	movs	r1, #1
 8009300:	4815      	ldr	r0, [pc, #84]	; (8009358 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009302:	f000 fd12 	bl	8009d2a <USBD_GetEpDesc>
 8009306:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009308:	2181      	movs	r1, #129	; 0x81
 800930a:	4813      	ldr	r0, [pc, #76]	; (8009358 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800930c:	f000 fd0d 	bl	8009d2a <USBD_GetEpDesc>
 8009310:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2210      	movs	r2, #16
 800931c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d006      	beq.n	8009332 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2200      	movs	r2, #0
 8009328:	711a      	strb	r2, [r3, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f042 0202 	orr.w	r2, r2, #2
 8009330:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d006      	beq.n	8009346 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	711a      	strb	r2, [r3, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f042 0202 	orr.w	r2, r2, #2
 8009344:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2243      	movs	r2, #67	; 0x43
 800934a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000050 	.word	0x20000050

0800935c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009364:	2182      	movs	r1, #130	; 0x82
 8009366:	4818      	ldr	r0, [pc, #96]	; (80093c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009368:	f000 fcdf 	bl	8009d2a <USBD_GetEpDesc>
 800936c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800936e:	2101      	movs	r1, #1
 8009370:	4815      	ldr	r0, [pc, #84]	; (80093c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009372:	f000 fcda 	bl	8009d2a <USBD_GetEpDesc>
 8009376:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009378:	2181      	movs	r1, #129	; 0x81
 800937a:	4813      	ldr	r0, [pc, #76]	; (80093c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800937c:	f000 fcd5 	bl	8009d2a <USBD_GetEpDesc>
 8009380:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	2210      	movs	r2, #16
 800938c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d006      	beq.n	80093a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	2200      	movs	r2, #0
 8009398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800939c:	711a      	strb	r2, [r3, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d006      	beq.n	80093b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093b0:	711a      	strb	r2, [r3, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2243      	movs	r2, #67	; 0x43
 80093ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20000050 	.word	0x20000050

080093cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	220a      	movs	r2, #10
 80093d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80093da:	4b03      	ldr	r3, [pc, #12]	; (80093e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	2000000c 	.word	0x2000000c

080093ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e009      	b.n	8009414 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	33b0      	adds	r3, #176	; 0xb0
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	32b0      	adds	r2, #176	; 0xb0
 8009436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800943a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009442:	2303      	movs	r3, #3
 8009444:	e008      	b.n	8009458 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	32b0      	adds	r2, #176	; 0xb0
 8009478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009484:	2303      	movs	r3, #3
 8009486:	e004      	b.n	8009492 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
	...

080094a0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	32b0      	adds	r2, #176	; 0xb0
 80094b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80094b8:	2301      	movs	r3, #1
 80094ba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e025      	b.n	8009512 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d11f      	bne.n	8009510 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80094d8:	4b10      	ldr	r3, [pc, #64]	; (800951c <USBD_CDC_TransmitPacket+0x7c>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	f003 020f 	and.w	r2, r3, #15
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4613      	mov	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4403      	add	r3, r0
 80094f2:	3318      	adds	r3, #24
 80094f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80094f6:	4b09      	ldr	r3, [pc, #36]	; (800951c <USBD_CDC_TransmitPacket+0x7c>)
 80094f8:	7819      	ldrb	r1, [r3, #0]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f003 f98f 	bl	800c82a <USBD_LL_Transmit>

    ret = USBD_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009510:	7bfb      	ldrb	r3, [r7, #15]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20000093 	.word	0x20000093

08009520 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	32b0      	adds	r2, #176	; 0xb0
 8009532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009536:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	32b0      	adds	r2, #176	; 0xb0
 8009542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800954a:	2303      	movs	r3, #3
 800954c:	e018      	b.n	8009580 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	7c1b      	ldrb	r3, [r3, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10a      	bne.n	800956c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <USBD_CDC_ReceivePacket+0x68>)
 8009558:	7819      	ldrb	r1, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f003 f981 	bl	800c86c <USBD_LL_PrepareReceive>
 800956a:	e008      	b.n	800957e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800956c:	4b06      	ldr	r3, [pc, #24]	; (8009588 <USBD_CDC_ReceivePacket+0x68>)
 800956e:	7819      	ldrb	r1, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009576:	2340      	movs	r3, #64	; 0x40
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f003 f977 	bl	800c86c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000094 	.word	0x20000094

0800958c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	4613      	mov	r3, r2
 8009598:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e01f      	b.n	80095e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	79fa      	ldrb	r2, [r7, #7]
 80095d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f002 fff1 	bl	800c5c0 <USBD_LL_Init>
 80095de:	4603      	mov	r3, r0
 80095e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3718      	adds	r7, #24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009600:	2303      	movs	r3, #3
 8009602:	e025      	b.n	8009650 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	32ae      	adds	r2, #174	; 0xae
 8009616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00f      	beq.n	8009640 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	32ae      	adds	r2, #174	; 0xae
 800962a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	f107 020e 	add.w	r2, r7, #14
 8009634:	4610      	mov	r0, r2
 8009636:	4798      	blx	r3
 8009638:	4602      	mov	r2, r0
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f002 fff9 	bl	800c658 <USBD_LL_Start>
 8009666:	4603      	mov	r3, r0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800967a:	4618      	mov	r0, r3
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800969c:	2b00      	cmp	r3, #0
 800969e:	d009      	beq.n	80096b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	78fa      	ldrb	r2, [r7, #3]
 80096aa:	4611      	mov	r1, r2
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	4798      	blx	r3
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	78fa      	ldrb	r2, [r7, #3]
 80096d8:	4611      	mov	r1, r2
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	4798      	blx	r3
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80096e4:	2303      	movs	r3, #3
 80096e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	4618      	mov	r0, r3
 8009706:	f001 f938 	bl	800a97a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009718:	461a      	mov	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009726:	f003 031f 	and.w	r3, r3, #31
 800972a:	2b02      	cmp	r3, #2
 800972c:	d01a      	beq.n	8009764 <USBD_LL_SetupStage+0x72>
 800972e:	2b02      	cmp	r3, #2
 8009730:	d822      	bhi.n	8009778 <USBD_LL_SetupStage+0x86>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d002      	beq.n	800973c <USBD_LL_SetupStage+0x4a>
 8009736:	2b01      	cmp	r3, #1
 8009738:	d00a      	beq.n	8009750 <USBD_LL_SetupStage+0x5e>
 800973a:	e01d      	b.n	8009778 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fb65 	bl	8009e14 <USBD_StdDevReq>
 800974a:	4603      	mov	r3, r0
 800974c:	73fb      	strb	r3, [r7, #15]
      break;
 800974e:	e020      	b.n	8009792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fbcd 	bl	8009ef8 <USBD_StdItfReq>
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]
      break;
 8009762:	e016      	b.n	8009792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fc2f 	bl	8009fd0 <USBD_StdEPReq>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]
      break;
 8009776:	e00c      	b.n	8009792 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800977e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009782:	b2db      	uxtb	r3, r3
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f002 ffc6 	bl	800c718 <USBD_LL_StallEP>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]
      break;
 8009790:	bf00      	nop
  }

  return ret;
 8009792:	7bfb      	ldrb	r3, [r7, #15]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	460b      	mov	r3, r1
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80097ae:	7afb      	ldrb	r3, [r7, #11]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d16e      	bne.n	8009892 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80097ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	f040 8098 	bne.w	80098f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d913      	bls.n	80097fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	689a      	ldr	r2, [r3, #8]
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	1ad2      	subs	r2, r2, r3
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	68da      	ldr	r2, [r3, #12]
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	4293      	cmp	r3, r2
 80097ec:	bf28      	it	cs
 80097ee:	4613      	movcs	r3, r2
 80097f0:	461a      	mov	r2, r3
 80097f2:	6879      	ldr	r1, [r7, #4]
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f001 f9c0 	bl	800ab7a <USBD_CtlContinueRx>
 80097fa:	e07d      	b.n	80098f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009802:	f003 031f 	and.w	r3, r3, #31
 8009806:	2b02      	cmp	r3, #2
 8009808:	d014      	beq.n	8009834 <USBD_LL_DataOutStage+0x98>
 800980a:	2b02      	cmp	r3, #2
 800980c:	d81d      	bhi.n	800984a <USBD_LL_DataOutStage+0xae>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <USBD_LL_DataOutStage+0x7c>
 8009812:	2b01      	cmp	r3, #1
 8009814:	d003      	beq.n	800981e <USBD_LL_DataOutStage+0x82>
 8009816:	e018      	b.n	800984a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	75bb      	strb	r3, [r7, #22]
            break;
 800981c:	e018      	b.n	8009850 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009824:	b2db      	uxtb	r3, r3
 8009826:	4619      	mov	r1, r3
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 fa64 	bl	8009cf6 <USBD_CoreFindIF>
 800982e:	4603      	mov	r3, r0
 8009830:	75bb      	strb	r3, [r7, #22]
            break;
 8009832:	e00d      	b.n	8009850 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800983a:	b2db      	uxtb	r3, r3
 800983c:	4619      	mov	r1, r3
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 fa66 	bl	8009d10 <USBD_CoreFindEP>
 8009844:	4603      	mov	r3, r0
 8009846:	75bb      	strb	r3, [r7, #22]
            break;
 8009848:	e002      	b.n	8009850 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	75bb      	strb	r3, [r7, #22]
            break;
 800984e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009850:	7dbb      	ldrb	r3, [r7, #22]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d119      	bne.n	800988a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800985c:	b2db      	uxtb	r3, r3
 800985e:	2b03      	cmp	r3, #3
 8009860:	d113      	bne.n	800988a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009862:	7dba      	ldrb	r2, [r7, #22]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	32ae      	adds	r2, #174	; 0xae
 8009868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00b      	beq.n	800988a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009872:	7dba      	ldrb	r2, [r7, #22]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800987a:	7dba      	ldrb	r2, [r7, #22]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	32ae      	adds	r2, #174	; 0xae
 8009880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f001 f986 	bl	800ab9c <USBD_CtlSendStatus>
 8009890:	e032      	b.n	80098f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009898:	b2db      	uxtb	r3, r3
 800989a:	4619      	mov	r1, r3
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 fa37 	bl	8009d10 <USBD_CoreFindEP>
 80098a2:	4603      	mov	r3, r0
 80098a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098a6:	7dbb      	ldrb	r3, [r7, #22]
 80098a8:	2bff      	cmp	r3, #255	; 0xff
 80098aa:	d025      	beq.n	80098f8 <USBD_LL_DataOutStage+0x15c>
 80098ac:	7dbb      	ldrb	r3, [r7, #22]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d122      	bne.n	80098f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d117      	bne.n	80098ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80098be:	7dba      	ldrb	r2, [r7, #22]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	32ae      	adds	r2, #174	; 0xae
 80098c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00f      	beq.n	80098ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80098ce:	7dba      	ldrb	r2, [r7, #22]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80098d6:	7dba      	ldrb	r2, [r7, #22]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	32ae      	adds	r2, #174	; 0xae
 80098dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	7afa      	ldrb	r2, [r7, #11]
 80098e4:	4611      	mov	r1, r2
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	4798      	blx	r3
 80098ea:	4603      	mov	r3, r0
 80098ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	e000      	b.n	80098fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b086      	sub	sp, #24
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	460b      	mov	r3, r1
 800990c:	607a      	str	r2, [r7, #4]
 800990e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d16f      	bne.n	80099f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3314      	adds	r3, #20
 800991a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009922:	2b02      	cmp	r3, #2
 8009924:	d15a      	bne.n	80099dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	689a      	ldr	r2, [r3, #8]
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	429a      	cmp	r2, r3
 8009930:	d914      	bls.n	800995c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	689a      	ldr	r2, [r3, #8]
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	1ad2      	subs	r2, r2, r3
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	461a      	mov	r2, r3
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f001 f8e8 	bl	800ab1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800994e:	2300      	movs	r3, #0
 8009950:	2200      	movs	r2, #0
 8009952:	2100      	movs	r1, #0
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f002 ff89 	bl	800c86c <USBD_LL_PrepareReceive>
 800995a:	e03f      	b.n	80099dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	68da      	ldr	r2, [r3, #12]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	429a      	cmp	r2, r3
 8009966:	d11c      	bne.n	80099a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009970:	429a      	cmp	r2, r3
 8009972:	d316      	bcc.n	80099a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800997e:	429a      	cmp	r2, r3
 8009980:	d20f      	bcs.n	80099a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009982:	2200      	movs	r2, #0
 8009984:	2100      	movs	r1, #0
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f001 f8c9 	bl	800ab1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009994:	2300      	movs	r3, #0
 8009996:	2200      	movs	r2, #0
 8009998:	2100      	movs	r1, #0
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f002 ff66 	bl	800c86c <USBD_LL_PrepareReceive>
 80099a0:	e01c      	b.n	80099dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d10f      	bne.n	80099ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d009      	beq.n	80099ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80099ce:	2180      	movs	r1, #128	; 0x80
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f002 fea1 	bl	800c718 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f001 f8f3 	bl	800abc2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d03a      	beq.n	8009a5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff fe42 	bl	8009670 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099f4:	e032      	b.n	8009a5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80099f6:	7afb      	ldrb	r3, [r7, #11]
 80099f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	4619      	mov	r1, r3
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f985 	bl	8009d10 <USBD_CoreFindEP>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
 8009a0c:	2bff      	cmp	r3, #255	; 0xff
 8009a0e:	d025      	beq.n	8009a5c <USBD_LL_DataInStage+0x15a>
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d122      	bne.n	8009a5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d11c      	bne.n	8009a5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009a22:	7dfa      	ldrb	r2, [r7, #23]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	32ae      	adds	r2, #174	; 0xae
 8009a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d014      	beq.n	8009a5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009a32:	7dfa      	ldrb	r2, [r7, #23]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009a3a:	7dfa      	ldrb	r2, [r7, #23]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	32ae      	adds	r2, #174	; 0xae
 8009a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	7afa      	ldrb	r2, [r7, #11]
 8009a48:	4611      	mov	r1, r2
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	4798      	blx	r3
 8009a4e:	4603      	mov	r3, r0
 8009a50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009a52:	7dbb      	ldrb	r3, [r7, #22]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009a58:	7dbb      	ldrb	r3, [r7, #22]
 8009a5a:	e000      	b.n	8009a5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3718      	adds	r7, #24
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d014      	beq.n	8009acc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00e      	beq.n	8009acc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	6852      	ldr	r2, [r2, #4]
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	4611      	mov	r1, r2
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	4798      	blx	r3
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d001      	beq.n	8009acc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009acc:	2340      	movs	r3, #64	; 0x40
 8009ace:	2200      	movs	r2, #0
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f002 fddb 	bl	800c68e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2240      	movs	r2, #64	; 0x40
 8009ae4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ae8:	2340      	movs	r3, #64	; 0x40
 8009aea:	2200      	movs	r2, #0
 8009aec:	2180      	movs	r1, #128	; 0x80
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f002 fdcd 	bl	800c68e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2240      	movs	r2, #64	; 0x40
 8009afe:	621a      	str	r2, [r3, #32]

  return ret;
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b083      	sub	sp, #12
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	460b      	mov	r3, r1
 8009b14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	78fa      	ldrb	r2, [r7, #3]
 8009b1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b04      	cmp	r3, #4
 8009b3c:	d006      	beq.n	8009b4c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2204      	movs	r2, #4
 8009b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b083      	sub	sp, #12
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	d106      	bne.n	8009b84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d110      	bne.n	8009bc8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb6:	69db      	ldr	r3, [r3, #28]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d005      	beq.n	8009bc8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b082      	sub	sp, #8
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	32ae      	adds	r2, #174	; 0xae
 8009be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e01c      	b.n	8009c2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d115      	bne.n	8009c2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	32ae      	adds	r2, #174	; 0xae
 8009c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	32ae      	adds	r2, #174	; 0xae
 8009c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	78fa      	ldrb	r2, [r7, #3]
 8009c26:	4611      	mov	r1, r2
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b082      	sub	sp, #8
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	32ae      	adds	r2, #174	; 0xae
 8009c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e01c      	b.n	8009c92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d115      	bne.n	8009c90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	32ae      	adds	r2, #174	; 0xae
 8009c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	32ae      	adds	r2, #174	; 0xae
 8009c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c88:	78fa      	ldrb	r2, [r7, #3]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00e      	beq.n	8009cec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	6852      	ldr	r2, [r2, #4]
 8009cda:	b2d2      	uxtb	r2, r2
 8009cdc:	4611      	mov	r1, r2
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	4798      	blx	r3
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b086      	sub	sp, #24
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	460b      	mov	r3, r1
 8009d34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	885b      	ldrh	r3, [r3, #2]
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d920      	bls.n	8009d94 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009d5a:	e013      	b.n	8009d84 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009d5c:	f107 030a 	add.w	r3, r7, #10
 8009d60:	4619      	mov	r1, r3
 8009d62:	6978      	ldr	r0, [r7, #20]
 8009d64:	f000 f81b 	bl	8009d9e <USBD_GetNextDesc>
 8009d68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d108      	bne.n	8009d84 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	789b      	ldrb	r3, [r3, #2]
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d008      	beq.n	8009d92 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009d80:	2300      	movs	r3, #0
 8009d82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	885b      	ldrh	r3, [r3, #2]
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	897b      	ldrh	r3, [r7, #10]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d8e5      	bhi.n	8009d5c <USBD_GetEpDesc+0x32>
 8009d90:	e000      	b.n	8009d94 <USBD_GetEpDesc+0x6a>
          break;
 8009d92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d94:	693b      	ldr	r3, [r7, #16]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b085      	sub	sp, #20
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	881a      	ldrh	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	4413      	add	r3, r2
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009dca:	68fb      	ldr	r3, [r7, #12]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	3301      	adds	r3, #1
 8009dee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009df6:	8a3b      	ldrh	r3, [r7, #16]
 8009df8:	021b      	lsls	r3, r3, #8
 8009dfa:	b21a      	sxth	r2, r3
 8009dfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	b21b      	sxth	r3, r3
 8009e04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009e06:	89fb      	ldrh	r3, [r7, #14]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e2a:	2b40      	cmp	r3, #64	; 0x40
 8009e2c:	d005      	beq.n	8009e3a <USBD_StdDevReq+0x26>
 8009e2e:	2b40      	cmp	r3, #64	; 0x40
 8009e30:	d857      	bhi.n	8009ee2 <USBD_StdDevReq+0xce>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00f      	beq.n	8009e56 <USBD_StdDevReq+0x42>
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	d153      	bne.n	8009ee2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	32ae      	adds	r2, #174	; 0xae
 8009e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	4798      	blx	r3
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]
      break;
 8009e54:	e04a      	b.n	8009eec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	2b09      	cmp	r3, #9
 8009e5c:	d83b      	bhi.n	8009ed6 <USBD_StdDevReq+0xc2>
 8009e5e:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <USBD_StdDevReq+0x50>)
 8009e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e64:	08009eb9 	.word	0x08009eb9
 8009e68:	08009ecd 	.word	0x08009ecd
 8009e6c:	08009ed7 	.word	0x08009ed7
 8009e70:	08009ec3 	.word	0x08009ec3
 8009e74:	08009ed7 	.word	0x08009ed7
 8009e78:	08009e97 	.word	0x08009e97
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009ed7 	.word	0x08009ed7
 8009e84:	08009eaf 	.word	0x08009eaf
 8009e88:	08009ea1 	.word	0x08009ea1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fa3c 	bl	800a30c <USBD_GetDescriptor>
          break;
 8009e94:	e024      	b.n	8009ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fbcb 	bl	800a634 <USBD_SetAddress>
          break;
 8009e9e:	e01f      	b.n	8009ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fc0a 	bl	800a6bc <USBD_SetConfig>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	73fb      	strb	r3, [r7, #15]
          break;
 8009eac:	e018      	b.n	8009ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fcad 	bl	800a810 <USBD_GetConfig>
          break;
 8009eb6:	e013      	b.n	8009ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fcde 	bl	800a87c <USBD_GetStatus>
          break;
 8009ec0:	e00e      	b.n	8009ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ec2:	6839      	ldr	r1, [r7, #0]
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fd0d 	bl	800a8e4 <USBD_SetFeature>
          break;
 8009eca:	e009      	b.n	8009ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fd31 	bl	800a936 <USBD_ClrFeature>
          break;
 8009ed4:	e004      	b.n	8009ee0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fd88 	bl	800a9ee <USBD_CtlError>
          break;
 8009ede:	bf00      	nop
      }
      break;
 8009ee0:	e004      	b.n	8009eec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fd82 	bl	800a9ee <USBD_CtlError>
      break;
 8009eea:	bf00      	nop
  }

  return ret;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop

08009ef8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f0e:	2b40      	cmp	r3, #64	; 0x40
 8009f10:	d005      	beq.n	8009f1e <USBD_StdItfReq+0x26>
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	d852      	bhi.n	8009fbc <USBD_StdItfReq+0xc4>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <USBD_StdItfReq+0x26>
 8009f1a:	2b20      	cmp	r3, #32
 8009f1c:	d14e      	bne.n	8009fbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	3b01      	subs	r3, #1
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d840      	bhi.n	8009fae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	889b      	ldrh	r3, [r3, #4]
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d836      	bhi.n	8009fa4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	889b      	ldrh	r3, [r3, #4]
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff fed9 	bl	8009cf6 <USBD_CoreFindIF>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	2bff      	cmp	r3, #255	; 0xff
 8009f4c:	d01d      	beq.n	8009f8a <USBD_StdItfReq+0x92>
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d11a      	bne.n	8009f8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009f54:	7bba      	ldrb	r2, [r7, #14]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	32ae      	adds	r2, #174	; 0xae
 8009f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00f      	beq.n	8009f84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009f64:	7bba      	ldrb	r2, [r7, #14]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f6c:	7bba      	ldrb	r2, [r7, #14]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	32ae      	adds	r2, #174	; 0xae
 8009f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
 8009f7e:	4603      	mov	r3, r0
 8009f80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f82:	e004      	b.n	8009f8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009f84:	2303      	movs	r3, #3
 8009f86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f88:	e001      	b.n	8009f8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	88db      	ldrh	r3, [r3, #6]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d110      	bne.n	8009fb8 <USBD_StdItfReq+0xc0>
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10d      	bne.n	8009fb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fdfd 	bl	800ab9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009fa2:	e009      	b.n	8009fb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009fa4:	6839      	ldr	r1, [r7, #0]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fd21 	bl	800a9ee <USBD_CtlError>
          break;
 8009fac:	e004      	b.n	8009fb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fd1c 	bl	800a9ee <USBD_CtlError>
          break;
 8009fb6:	e000      	b.n	8009fba <USBD_StdItfReq+0xc2>
          break;
 8009fb8:	bf00      	nop
      }
      break;
 8009fba:	e004      	b.n	8009fc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fd15 	bl	800a9ee <USBD_CtlError>
      break;
 8009fc4:	bf00      	nop
  }

  return ret;
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	889b      	ldrh	r3, [r3, #4]
 8009fe2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fec:	2b40      	cmp	r3, #64	; 0x40
 8009fee:	d007      	beq.n	800a000 <USBD_StdEPReq+0x30>
 8009ff0:	2b40      	cmp	r3, #64	; 0x40
 8009ff2:	f200 817f 	bhi.w	800a2f4 <USBD_StdEPReq+0x324>
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d02a      	beq.n	800a050 <USBD_StdEPReq+0x80>
 8009ffa:	2b20      	cmp	r3, #32
 8009ffc:	f040 817a 	bne.w	800a2f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	4619      	mov	r1, r3
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff fe83 	bl	8009d10 <USBD_CoreFindEP>
 800a00a:	4603      	mov	r3, r0
 800a00c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a00e:	7b7b      	ldrb	r3, [r7, #13]
 800a010:	2bff      	cmp	r3, #255	; 0xff
 800a012:	f000 8174 	beq.w	800a2fe <USBD_StdEPReq+0x32e>
 800a016:	7b7b      	ldrb	r3, [r7, #13]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f040 8170 	bne.w	800a2fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a01e:	7b7a      	ldrb	r2, [r7, #13]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a026:	7b7a      	ldrb	r2, [r7, #13]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	32ae      	adds	r2, #174	; 0xae
 800a02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 8163 	beq.w	800a2fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a038:	7b7a      	ldrb	r2, [r7, #13]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	32ae      	adds	r2, #174	; 0xae
 800a03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	4798      	blx	r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a04e:	e156      	b.n	800a2fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	785b      	ldrb	r3, [r3, #1]
 800a054:	2b03      	cmp	r3, #3
 800a056:	d008      	beq.n	800a06a <USBD_StdEPReq+0x9a>
 800a058:	2b03      	cmp	r3, #3
 800a05a:	f300 8145 	bgt.w	800a2e8 <USBD_StdEPReq+0x318>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 809b 	beq.w	800a19a <USBD_StdEPReq+0x1ca>
 800a064:	2b01      	cmp	r3, #1
 800a066:	d03c      	beq.n	800a0e2 <USBD_StdEPReq+0x112>
 800a068:	e13e      	b.n	800a2e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b02      	cmp	r3, #2
 800a074:	d002      	beq.n	800a07c <USBD_StdEPReq+0xac>
 800a076:	2b03      	cmp	r3, #3
 800a078:	d016      	beq.n	800a0a8 <USBD_StdEPReq+0xd8>
 800a07a:	e02c      	b.n	800a0d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00d      	beq.n	800a09e <USBD_StdEPReq+0xce>
 800a082:	7bbb      	ldrb	r3, [r7, #14]
 800a084:	2b80      	cmp	r3, #128	; 0x80
 800a086:	d00a      	beq.n	800a09e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a088:	7bbb      	ldrb	r3, [r7, #14]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f002 fb43 	bl	800c718 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a092:	2180      	movs	r1, #128	; 0x80
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f002 fb3f 	bl	800c718 <USBD_LL_StallEP>
 800a09a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a09c:	e020      	b.n	800a0e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fca4 	bl	800a9ee <USBD_CtlError>
              break;
 800a0a6:	e01b      	b.n	800a0e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	885b      	ldrh	r3, [r3, #2]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10e      	bne.n	800a0ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a0b0:	7bbb      	ldrb	r3, [r7, #14]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00b      	beq.n	800a0ce <USBD_StdEPReq+0xfe>
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	2b80      	cmp	r3, #128	; 0x80
 800a0ba:	d008      	beq.n	800a0ce <USBD_StdEPReq+0xfe>
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	88db      	ldrh	r3, [r3, #6]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d104      	bne.n	800a0ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f002 fb25 	bl	800c718 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fd64 	bl	800ab9c <USBD_CtlSendStatus>

              break;
 800a0d4:	e004      	b.n	800a0e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fc88 	bl	800a9ee <USBD_CtlError>
              break;
 800a0de:	bf00      	nop
          }
          break;
 800a0e0:	e107      	b.n	800a2f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d002      	beq.n	800a0f4 <USBD_StdEPReq+0x124>
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d016      	beq.n	800a120 <USBD_StdEPReq+0x150>
 800a0f2:	e04b      	b.n	800a18c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00d      	beq.n	800a116 <USBD_StdEPReq+0x146>
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	2b80      	cmp	r3, #128	; 0x80
 800a0fe:	d00a      	beq.n	800a116 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a100:	7bbb      	ldrb	r3, [r7, #14]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f002 fb07 	bl	800c718 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a10a:	2180      	movs	r1, #128	; 0x80
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f002 fb03 	bl	800c718 <USBD_LL_StallEP>
 800a112:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a114:	e040      	b.n	800a198 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fc68 	bl	800a9ee <USBD_CtlError>
              break;
 800a11e:	e03b      	b.n	800a198 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	885b      	ldrh	r3, [r3, #2]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d136      	bne.n	800a196 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a128:	7bbb      	ldrb	r3, [r7, #14]
 800a12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d004      	beq.n	800a13c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a132:	7bbb      	ldrb	r3, [r7, #14]
 800a134:	4619      	mov	r1, r3
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f002 fb0d 	bl	800c756 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fd2d 	bl	800ab9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff fde2 	bl	8009d10 <USBD_CoreFindEP>
 800a14c:	4603      	mov	r3, r0
 800a14e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a150:	7b7b      	ldrb	r3, [r7, #13]
 800a152:	2bff      	cmp	r3, #255	; 0xff
 800a154:	d01f      	beq.n	800a196 <USBD_StdEPReq+0x1c6>
 800a156:	7b7b      	ldrb	r3, [r7, #13]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d11c      	bne.n	800a196 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a15c:	7b7a      	ldrb	r2, [r7, #13]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a164:	7b7a      	ldrb	r2, [r7, #13]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	32ae      	adds	r2, #174	; 0xae
 800a16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d010      	beq.n	800a196 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a174:	7b7a      	ldrb	r2, [r7, #13]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	32ae      	adds	r2, #174	; 0xae
 800a17a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	4798      	blx	r3
 800a186:	4603      	mov	r3, r0
 800a188:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a18a:	e004      	b.n	800a196 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fc2d 	bl	800a9ee <USBD_CtlError>
              break;
 800a194:	e000      	b.n	800a198 <USBD_StdEPReq+0x1c8>
              break;
 800a196:	bf00      	nop
          }
          break;
 800a198:	e0ab      	b.n	800a2f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d002      	beq.n	800a1ac <USBD_StdEPReq+0x1dc>
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d032      	beq.n	800a210 <USBD_StdEPReq+0x240>
 800a1aa:	e097      	b.n	800a2dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <USBD_StdEPReq+0x1f2>
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	2b80      	cmp	r3, #128	; 0x80
 800a1b6:	d004      	beq.n	800a1c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fc17 	bl	800a9ee <USBD_CtlError>
                break;
 800a1c0:	e091      	b.n	800a2e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	da0b      	bge.n	800a1e2 <USBD_StdEPReq+0x212>
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	3310      	adds	r3, #16
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	4413      	add	r3, r2
 800a1de:	3304      	adds	r3, #4
 800a1e0:	e00b      	b.n	800a1fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	2202      	movs	r2, #2
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fc6d 	bl	800aae8 <USBD_CtlSendData>
              break;
 800a20e:	e06a      	b.n	800a2e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a214:	2b00      	cmp	r3, #0
 800a216:	da11      	bge.n	800a23c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a218:	7bbb      	ldrb	r3, [r7, #14]
 800a21a:	f003 020f 	and.w	r2, r3, #15
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	4613      	mov	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	440b      	add	r3, r1
 800a22a:	3324      	adds	r3, #36	; 0x24
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d117      	bne.n	800a262 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fbda 	bl	800a9ee <USBD_CtlError>
                  break;
 800a23a:	e054      	b.n	800a2e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a23c:	7bbb      	ldrb	r3, [r7, #14]
 800a23e:	f003 020f 	and.w	r2, r3, #15
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	4613      	mov	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d104      	bne.n	800a262 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fbc7 	bl	800a9ee <USBD_CtlError>
                  break;
 800a260:	e041      	b.n	800a2e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a266:	2b00      	cmp	r3, #0
 800a268:	da0b      	bge.n	800a282 <USBD_StdEPReq+0x2b2>
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a270:	4613      	mov	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	3310      	adds	r3, #16
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	4413      	add	r3, r2
 800a27e:	3304      	adds	r3, #4
 800a280:	e00b      	b.n	800a29a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a282:	7bbb      	ldrb	r3, [r7, #14]
 800a284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a288:	4613      	mov	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	4413      	add	r3, r2
 800a298:	3304      	adds	r3, #4
 800a29a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <USBD_StdEPReq+0x2d8>
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	2b80      	cmp	r3, #128	; 0x80
 800a2a6:	d103      	bne.n	800a2b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	e00e      	b.n	800a2ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f002 fa6d 	bl	800c794 <USBD_LL_IsStallEP>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]
 800a2c6:	e002      	b.n	800a2ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fc07 	bl	800aae8 <USBD_CtlSendData>
              break;
 800a2da:	e004      	b.n	800a2e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fb85 	bl	800a9ee <USBD_CtlError>
              break;
 800a2e4:	bf00      	nop
          }
          break;
 800a2e6:	e004      	b.n	800a2f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fb7f 	bl	800a9ee <USBD_CtlError>
          break;
 800a2f0:	bf00      	nop
      }
      break;
 800a2f2:	e005      	b.n	800a300 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fb79 	bl	800a9ee <USBD_CtlError>
      break;
 800a2fc:	e000      	b.n	800a300 <USBD_StdEPReq+0x330>
      break;
 800a2fe:	bf00      	nop
  }

  return ret;
 800a300:	7bfb      	ldrb	r3, [r7, #15]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a31e:	2300      	movs	r3, #0
 800a320:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	885b      	ldrh	r3, [r3, #2]
 800a326:	0a1b      	lsrs	r3, r3, #8
 800a328:	b29b      	uxth	r3, r3
 800a32a:	3b01      	subs	r3, #1
 800a32c:	2b0e      	cmp	r3, #14
 800a32e:	f200 8152 	bhi.w	800a5d6 <USBD_GetDescriptor+0x2ca>
 800a332:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <USBD_GetDescriptor+0x2c>)
 800a334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a338:	0800a3a9 	.word	0x0800a3a9
 800a33c:	0800a3c1 	.word	0x0800a3c1
 800a340:	0800a401 	.word	0x0800a401
 800a344:	0800a5d7 	.word	0x0800a5d7
 800a348:	0800a5d7 	.word	0x0800a5d7
 800a34c:	0800a577 	.word	0x0800a577
 800a350:	0800a5a3 	.word	0x0800a5a3
 800a354:	0800a5d7 	.word	0x0800a5d7
 800a358:	0800a5d7 	.word	0x0800a5d7
 800a35c:	0800a5d7 	.word	0x0800a5d7
 800a360:	0800a5d7 	.word	0x0800a5d7
 800a364:	0800a5d7 	.word	0x0800a5d7
 800a368:	0800a5d7 	.word	0x0800a5d7
 800a36c:	0800a5d7 	.word	0x0800a5d7
 800a370:	0800a375 	.word	0x0800a375
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00b      	beq.n	800a398 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a386:	69db      	ldr	r3, [r3, #28]
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	7c12      	ldrb	r2, [r2, #16]
 800a38c:	f107 0108 	add.w	r1, r7, #8
 800a390:	4610      	mov	r0, r2
 800a392:	4798      	blx	r3
 800a394:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a396:	e126      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fb27 	bl	800a9ee <USBD_CtlError>
        err++;
 800a3a0:	7afb      	ldrb	r3, [r7, #11]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	72fb      	strb	r3, [r7, #11]
      break;
 800a3a6:	e11e      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	7c12      	ldrb	r2, [r2, #16]
 800a3b4:	f107 0108 	add.w	r1, r7, #8
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4798      	blx	r3
 800a3bc:	60f8      	str	r0, [r7, #12]
      break;
 800a3be:	e112      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7c1b      	ldrb	r3, [r3, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10d      	bne.n	800a3e4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d0:	f107 0208 	add.w	r2, r7, #8
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	4798      	blx	r3
 800a3d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	2202      	movs	r2, #2
 800a3e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a3e2:	e100      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ec:	f107 0208 	add.w	r2, r7, #8
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	4798      	blx	r3
 800a3f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	701a      	strb	r2, [r3, #0]
      break;
 800a3fe:	e0f2      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	885b      	ldrh	r3, [r3, #2]
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b05      	cmp	r3, #5
 800a408:	f200 80ac 	bhi.w	800a564 <USBD_GetDescriptor+0x258>
 800a40c:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <USBD_GetDescriptor+0x108>)
 800a40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a412:	bf00      	nop
 800a414:	0800a42d 	.word	0x0800a42d
 800a418:	0800a461 	.word	0x0800a461
 800a41c:	0800a495 	.word	0x0800a495
 800a420:	0800a4c9 	.word	0x0800a4c9
 800a424:	0800a4fd 	.word	0x0800a4fd
 800a428:	0800a531 	.word	0x0800a531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00b      	beq.n	800a450 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	7c12      	ldrb	r2, [r2, #16]
 800a444:	f107 0108 	add.w	r1, r7, #8
 800a448:	4610      	mov	r0, r2
 800a44a:	4798      	blx	r3
 800a44c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a44e:	e091      	b.n	800a574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 facb 	bl	800a9ee <USBD_CtlError>
            err++;
 800a458:	7afb      	ldrb	r3, [r7, #11]
 800a45a:	3301      	adds	r3, #1
 800a45c:	72fb      	strb	r3, [r7, #11]
          break;
 800a45e:	e089      	b.n	800a574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00b      	beq.n	800a484 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a472:	689b      	ldr	r3, [r3, #8]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	7c12      	ldrb	r2, [r2, #16]
 800a478:	f107 0108 	add.w	r1, r7, #8
 800a47c:	4610      	mov	r0, r2
 800a47e:	4798      	blx	r3
 800a480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a482:	e077      	b.n	800a574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fab1 	bl	800a9ee <USBD_CtlError>
            err++;
 800a48c:	7afb      	ldrb	r3, [r7, #11]
 800a48e:	3301      	adds	r3, #1
 800a490:	72fb      	strb	r3, [r7, #11]
          break;
 800a492:	e06f      	b.n	800a574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00b      	beq.n	800a4b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	7c12      	ldrb	r2, [r2, #16]
 800a4ac:	f107 0108 	add.w	r1, r7, #8
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
 800a4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4b6:	e05d      	b.n	800a574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fa97 	bl	800a9ee <USBD_CtlError>
            err++;
 800a4c0:	7afb      	ldrb	r3, [r7, #11]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4c6:	e055      	b.n	800a574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00b      	beq.n	800a4ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	7c12      	ldrb	r2, [r2, #16]
 800a4e0:	f107 0108 	add.w	r1, r7, #8
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	4798      	blx	r3
 800a4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ea:	e043      	b.n	800a574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fa7d 	bl	800a9ee <USBD_CtlError>
            err++;
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fa:	e03b      	b.n	800a574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00b      	beq.n	800a520 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	7c12      	ldrb	r2, [r2, #16]
 800a514:	f107 0108 	add.w	r1, r7, #8
 800a518:	4610      	mov	r0, r2
 800a51a:	4798      	blx	r3
 800a51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a51e:	e029      	b.n	800a574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fa63 	bl	800a9ee <USBD_CtlError>
            err++;
 800a528:	7afb      	ldrb	r3, [r7, #11]
 800a52a:	3301      	adds	r3, #1
 800a52c:	72fb      	strb	r3, [r7, #11]
          break;
 800a52e:	e021      	b.n	800a574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	7c12      	ldrb	r2, [r2, #16]
 800a548:	f107 0108 	add.w	r1, r7, #8
 800a54c:	4610      	mov	r0, r2
 800a54e:	4798      	blx	r3
 800a550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a552:	e00f      	b.n	800a574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fa49 	bl	800a9ee <USBD_CtlError>
            err++;
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	3301      	adds	r3, #1
 800a560:	72fb      	strb	r3, [r7, #11]
          break;
 800a562:	e007      	b.n	800a574 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fa41 	bl	800a9ee <USBD_CtlError>
          err++;
 800a56c:	7afb      	ldrb	r3, [r7, #11]
 800a56e:	3301      	adds	r3, #1
 800a570:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a572:	bf00      	nop
      }
      break;
 800a574:	e037      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	7c1b      	ldrb	r3, [r3, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d109      	bne.n	800a592 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a586:	f107 0208 	add.w	r2, r7, #8
 800a58a:	4610      	mov	r0, r2
 800a58c:	4798      	blx	r3
 800a58e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a590:	e029      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fa2a 	bl	800a9ee <USBD_CtlError>
        err++;
 800a59a:	7afb      	ldrb	r3, [r7, #11]
 800a59c:	3301      	adds	r3, #1
 800a59e:	72fb      	strb	r3, [r7, #11]
      break;
 800a5a0:	e021      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	7c1b      	ldrb	r3, [r3, #16]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10d      	bne.n	800a5c6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b2:	f107 0208 	add.w	r2, r7, #8
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	4798      	blx	r3
 800a5ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5c4:	e00f      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a5c6:	6839      	ldr	r1, [r7, #0]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 fa10 	bl	800a9ee <USBD_CtlError>
        err++;
 800a5ce:	7afb      	ldrb	r3, [r7, #11]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5d4:	e007      	b.n	800a5e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fa08 	bl	800a9ee <USBD_CtlError>
      err++;
 800a5de:	7afb      	ldrb	r3, [r7, #11]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5e4:	bf00      	nop
  }

  if (err != 0U)
 800a5e6:	7afb      	ldrb	r3, [r7, #11]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d11e      	bne.n	800a62a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	88db      	ldrh	r3, [r3, #6]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d016      	beq.n	800a622 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a5f4:	893b      	ldrh	r3, [r7, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00e      	beq.n	800a618 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	88da      	ldrh	r2, [r3, #6]
 800a5fe:	893b      	ldrh	r3, [r7, #8]
 800a600:	4293      	cmp	r3, r2
 800a602:	bf28      	it	cs
 800a604:	4613      	movcs	r3, r2
 800a606:	b29b      	uxth	r3, r3
 800a608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a60a:	893b      	ldrh	r3, [r7, #8]
 800a60c:	461a      	mov	r2, r3
 800a60e:	68f9      	ldr	r1, [r7, #12]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fa69 	bl	800aae8 <USBD_CtlSendData>
 800a616:	e009      	b.n	800a62c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f9e7 	bl	800a9ee <USBD_CtlError>
 800a620:	e004      	b.n	800a62c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 faba 	bl	800ab9c <USBD_CtlSendStatus>
 800a628:	e000      	b.n	800a62c <USBD_GetDescriptor+0x320>
    return;
 800a62a:	bf00      	nop
  }
}
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop

0800a634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	889b      	ldrh	r3, [r3, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d131      	bne.n	800a6aa <USBD_SetAddress+0x76>
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	88db      	ldrh	r3, [r3, #6]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d12d      	bne.n	800a6aa <USBD_SetAddress+0x76>
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	885b      	ldrh	r3, [r3, #2]
 800a652:	2b7f      	cmp	r3, #127	; 0x7f
 800a654:	d829      	bhi.n	800a6aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	885b      	ldrh	r3, [r3, #2]
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d104      	bne.n	800a678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f9bc 	bl	800a9ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a676:	e01d      	b.n	800a6b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	7bfa      	ldrb	r2, [r7, #15]
 800a67c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a680:	7bfb      	ldrb	r3, [r7, #15]
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f002 f8b1 	bl	800c7ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fa86 	bl	800ab9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d004      	beq.n	800a6a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2202      	movs	r2, #2
 800a69a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69e:	e009      	b.n	800a6b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a8:	e004      	b.n	800a6b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f99e 	bl	800a9ee <USBD_CtlError>
  }
}
 800a6b2:	bf00      	nop
 800a6b4:	bf00      	nop
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	885b      	ldrh	r3, [r3, #2]
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	4b4e      	ldr	r3, [pc, #312]	; (800a80c <USBD_SetConfig+0x150>)
 800a6d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a6d4:	4b4d      	ldr	r3, [pc, #308]	; (800a80c <USBD_SetConfig+0x150>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d905      	bls.n	800a6e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f985 	bl	800a9ee <USBD_CtlError>
    return USBD_FAIL;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e08c      	b.n	800a802 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d002      	beq.n	800a6fa <USBD_SetConfig+0x3e>
 800a6f4:	2b03      	cmp	r3, #3
 800a6f6:	d029      	beq.n	800a74c <USBD_SetConfig+0x90>
 800a6f8:	e075      	b.n	800a7e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a6fa:	4b44      	ldr	r3, [pc, #272]	; (800a80c <USBD_SetConfig+0x150>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d020      	beq.n	800a744 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a702:	4b42      	ldr	r3, [pc, #264]	; (800a80c <USBD_SetConfig+0x150>)
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a70c:	4b3f      	ldr	r3, [pc, #252]	; (800a80c <USBD_SetConfig+0x150>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7fe ffb7 	bl	8009686 <USBD_SetClassConfig>
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d008      	beq.n	800a734 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f962 	bl	800a9ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2202      	movs	r2, #2
 800a72e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a732:	e065      	b.n	800a800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fa31 	bl	800ab9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2203      	movs	r2, #3
 800a73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a742:	e05d      	b.n	800a800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fa29 	bl	800ab9c <USBD_CtlSendStatus>
      break;
 800a74a:	e059      	b.n	800a800 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a74c:	4b2f      	ldr	r3, [pc, #188]	; (800a80c <USBD_SetConfig+0x150>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d112      	bne.n	800a77a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2202      	movs	r2, #2
 800a758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a75c:	4b2b      	ldr	r3, [pc, #172]	; (800a80c <USBD_SetConfig+0x150>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	461a      	mov	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a766:	4b29      	ldr	r3, [pc, #164]	; (800a80c <USBD_SetConfig+0x150>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	4619      	mov	r1, r3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7fe ffa6 	bl	80096be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fa12 	bl	800ab9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a778:	e042      	b.n	800a800 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a77a:	4b24      	ldr	r3, [pc, #144]	; (800a80c <USBD_SetConfig+0x150>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	429a      	cmp	r2, r3
 800a786:	d02a      	beq.n	800a7de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7fe ff94 	bl	80096be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a796:	4b1d      	ldr	r3, [pc, #116]	; (800a80c <USBD_SetConfig+0x150>)
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7a0:	4b1a      	ldr	r3, [pc, #104]	; (800a80c <USBD_SetConfig+0x150>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f7fe ff6d 	bl	8009686 <USBD_SetClassConfig>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00f      	beq.n	800a7d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f918 	bl	800a9ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7fe ff79 	bl	80096be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a7d4:	e014      	b.n	800a800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f9e0 	bl	800ab9c <USBD_CtlSendStatus>
      break;
 800a7dc:	e010      	b.n	800a800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f9dc 	bl	800ab9c <USBD_CtlSendStatus>
      break;
 800a7e4:	e00c      	b.n	800a800 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f900 	bl	800a9ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7ee:	4b07      	ldr	r3, [pc, #28]	; (800a80c <USBD_SetConfig+0x150>)
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7fe ff62 	bl	80096be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a7fe:	bf00      	nop
  }

  return ret;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	20000360 	.word	0x20000360

0800a810 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	88db      	ldrh	r3, [r3, #6]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d004      	beq.n	800a82c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f8e2 	bl	800a9ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a82a:	e023      	b.n	800a874 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b02      	cmp	r3, #2
 800a836:	dc02      	bgt.n	800a83e <USBD_GetConfig+0x2e>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	dc03      	bgt.n	800a844 <USBD_GetConfig+0x34>
 800a83c:	e015      	b.n	800a86a <USBD_GetConfig+0x5a>
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d00b      	beq.n	800a85a <USBD_GetConfig+0x4a>
 800a842:	e012      	b.n	800a86a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	3308      	adds	r3, #8
 800a84e:	2201      	movs	r2, #1
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f948 	bl	800aae8 <USBD_CtlSendData>
        break;
 800a858:	e00c      	b.n	800a874 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	3304      	adds	r3, #4
 800a85e:	2201      	movs	r2, #1
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f940 	bl	800aae8 <USBD_CtlSendData>
        break;
 800a868:	e004      	b.n	800a874 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f8be 	bl	800a9ee <USBD_CtlError>
        break;
 800a872:	bf00      	nop
}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	3b01      	subs	r3, #1
 800a890:	2b02      	cmp	r3, #2
 800a892:	d81e      	bhi.n	800a8d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	88db      	ldrh	r3, [r3, #6]
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d004      	beq.n	800a8a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f8a5 	bl	800a9ee <USBD_CtlError>
        break;
 800a8a4:	e01a      	b.n	800a8dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d005      	beq.n	800a8c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f043 0202 	orr.w	r2, r3, #2
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	330c      	adds	r3, #12
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f90c 	bl	800aae8 <USBD_CtlSendData>
      break;
 800a8d0:	e004      	b.n	800a8dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f88a 	bl	800a9ee <USBD_CtlError>
      break;
 800a8da:	bf00      	nop
  }
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	885b      	ldrh	r3, [r3, #2]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d107      	bne.n	800a906 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f94c 	bl	800ab9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a904:	e013      	b.n	800a92e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	885b      	ldrh	r3, [r3, #2]
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d10b      	bne.n	800a926 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	889b      	ldrh	r3, [r3, #4]
 800a912:	0a1b      	lsrs	r3, r3, #8
 800a914:	b29b      	uxth	r3, r3
 800a916:	b2da      	uxtb	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 f93c 	bl	800ab9c <USBD_CtlSendStatus>
}
 800a924:	e003      	b.n	800a92e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a926:	6839      	ldr	r1, [r7, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f860 	bl	800a9ee <USBD_CtlError>
}
 800a92e:	bf00      	nop
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a946:	b2db      	uxtb	r3, r3
 800a948:	3b01      	subs	r3, #1
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d80b      	bhi.n	800a966 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	885b      	ldrh	r3, [r3, #2]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d10c      	bne.n	800a970 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f91c 	bl	800ab9c <USBD_CtlSendStatus>
      }
      break;
 800a964:	e004      	b.n	800a970 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f840 	bl	800a9ee <USBD_CtlError>
      break;
 800a96e:	e000      	b.n	800a972 <USBD_ClrFeature+0x3c>
      break;
 800a970:	bf00      	nop
  }
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	781a      	ldrb	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3301      	adds	r3, #1
 800a994:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	781a      	ldrb	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f7ff fa17 	bl	8009dd8 <SWAPBYTE>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f7ff fa0a 	bl	8009dd8 <SWAPBYTE>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f7ff f9fd 	bl	8009dd8 <SWAPBYTE>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	80da      	strh	r2, [r3, #6]
}
 800a9e6:	bf00      	nop
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b082      	sub	sp, #8
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9f8:	2180      	movs	r1, #128	; 0x80
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f001 fe8c 	bl	800c718 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa00:	2100      	movs	r1, #0
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f001 fe88 	bl	800c718 <USBD_LL_StallEP>
}
 800aa08:	bf00      	nop
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d042      	beq.n	800aaac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800aa2a:	6938      	ldr	r0, [r7, #16]
 800aa2c:	f000 f842 	bl	800aab4 <USBD_GetLen>
 800aa30:	4603      	mov	r3, r0
 800aa32:	3301      	adds	r3, #1
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa3a:	d808      	bhi.n	800aa4e <USBD_GetString+0x3e>
 800aa3c:	6938      	ldr	r0, [r7, #16]
 800aa3e:	f000 f839 	bl	800aab4 <USBD_GetLen>
 800aa42:	4603      	mov	r3, r0
 800aa44:	3301      	adds	r3, #1
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	e001      	b.n	800aa52 <USBD_GetString+0x42>
 800aa4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	7812      	ldrb	r2, [r2, #0]
 800aa60:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
 800aa64:	3301      	adds	r3, #1
 800aa66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aa68:	7dfb      	ldrb	r3, [r7, #23]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	2203      	movs	r2, #3
 800aa70:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	3301      	adds	r3, #1
 800aa76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa78:	e013      	b.n	800aaa2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aa7a:	7dfb      	ldrb	r3, [r7, #23]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	4413      	add	r3, r2
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	7812      	ldrb	r2, [r2, #0]
 800aa84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	613b      	str	r3, [r7, #16]
    idx++;
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	4413      	add	r3, r2
 800aa98:	2200      	movs	r2, #0
 800aa9a:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e7      	bne.n	800aa7a <USBD_GetString+0x6a>
 800aaaa:	e000      	b.n	800aaae <USBD_GetString+0x9e>
    return;
 800aaac:	bf00      	nop
  }
}
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aac4:	e005      	b.n	800aad2 <USBD_GetLen+0x1e>
  {
    len++;
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
 800aac8:	3301      	adds	r3, #1
 800aaca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	3301      	adds	r3, #1
 800aad0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1f5      	bne.n	800aac6 <USBD_GetLen+0x12>
  }

  return len;
 800aada:	7bfb      	ldrb	r3, [r7, #15]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f001 fe8b 	bl	800c82a <USBD_LL_Transmit>

  return USBD_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	2100      	movs	r1, #0
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f001 fe7a 	bl	800c82a <USBD_LL_Transmit>

  return USBD_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2203      	movs	r2, #3
 800ab50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	2100      	movs	r1, #0
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f001 fe7e 	bl	800c86c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f001 fe6d 	bl	800c86c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2204      	movs	r2, #4
 800aba8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800abac:	2300      	movs	r3, #0
 800abae:	2200      	movs	r2, #0
 800abb0:	2100      	movs	r1, #0
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f001 fe39 	bl	800c82a <USBD_LL_Transmit>

  return USBD_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2205      	movs	r2, #5
 800abce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abd2:	2300      	movs	r3, #0
 800abd4:	2200      	movs	r2, #0
 800abd6:	2100      	movs	r1, #0
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f001 fe47 	bl	800c86c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <delayInit>:
#include <API_delay.h>
#include <stm32f4xx_hal.h>

void delayInit(delay_t* delay, tick_t duration){
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
	assert(delay);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d105      	bne.n	800ac04 <delayInit+0x1c>
 800abf8:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <delayInit+0x3c>)
 800abfa:	4a0b      	ldr	r2, [pc, #44]	; (800ac28 <delayInit+0x40>)
 800abfc:	2105      	movs	r1, #5
 800abfe:	480b      	ldr	r0, [pc, #44]	; (800ac2c <delayInit+0x44>)
 800ac00:	f001 fefa 	bl	800c9f8 <__assert_func>

	delay->startTime = HAL_GetTick();
 800ac04:	f7f6 fa76 	bl	80010f4 <HAL_GetTick>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	683a      	ldr	r2, [r7, #0]
 800ac12:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	609a      	str	r2, [r3, #8]
}
 800ac1a:	bf00      	nop
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	0800e740 	.word	0x0800e740
 800ac28:	0800ec70 	.word	0x0800ec70
 800ac2c:	0800e748 	.word	0x0800e748

0800ac30 <delayRead>:

bool_t delayRead(delay_t* delay){
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
	assert(delay);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d105      	bne.n	800ac4a <delayRead+0x1a>
 800ac3e:	4b16      	ldr	r3, [pc, #88]	; (800ac98 <delayRead+0x68>)
 800ac40:	4a16      	ldr	r2, [pc, #88]	; (800ac9c <delayRead+0x6c>)
 800ac42:	210d      	movs	r1, #13
 800ac44:	4816      	ldr	r0, [pc, #88]	; (800aca0 <delayRead+0x70>)
 800ac46:	f001 fed7 	bl	800c9f8 <__assert_func>

	tick_t Current_time = HAL_GetTick();
 800ac4a:	f7f6 fa53 	bl	80010f4 <HAL_GetTick>
 800ac4e:	60b8      	str	r0, [r7, #8]
	bool_t Done = false;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73fb      	strb	r3, [r7, #15]

	if(!delay->running){
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d106      	bne.n	800ac6a <delayRead+0x3a>
		delay->startTime = Current_time;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	601a      	str	r2, [r3, #0]
		delay->running = true;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	609a      	str	r2, [r3, #8]
 800ac68:	e011      	b.n	800ac8e <delayRead+0x5e>
	}else{
		// Done is TRUE when the duration has elapsed
		// Done is FALSE when theres time remaining
		Done = (Current_time - delay->startTime) >= delay->duration;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	1ad2      	subs	r2, r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	bf2c      	ite	cs
 800ac7a:	2301      	movcs	r3, #1
 800ac7c:	2300      	movcc	r3, #0
 800ac7e:	73fb      	strb	r3, [r7, #15]
		// If it's done, it should stop running
		delay->running = !Done;
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	f083 0301 	eor.w	r3, r3, #1
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	461a      	mov	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	609a      	str	r2, [r3, #8]
	}
	return Done;
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	0800e740 	.word	0x0800e740
 800ac9c:	0800ec7c 	.word	0x0800ec7c
 800aca0:	0800e748 	.word	0x0800e748

0800aca4 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ){
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
	assert(delay);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d105      	bne.n	800acc0 <delayWrite+0x1c>
 800acb4:	4b06      	ldr	r3, [pc, #24]	; (800acd0 <delayWrite+0x2c>)
 800acb6:	4a07      	ldr	r2, [pc, #28]	; (800acd4 <delayWrite+0x30>)
 800acb8:	2120      	movs	r1, #32
 800acba:	4807      	ldr	r0, [pc, #28]	; (800acd8 <delayWrite+0x34>)
 800acbc:	f001 fe9c 	bl	800c9f8 <__assert_func>

	delay->duration = duration;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	605a      	str	r2, [r3, #4]
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	0800e740 	.word	0x0800e740
 800acd4:	0800ec88 	.word	0x0800ec88
 800acd8:	0800e748 	.word	0x0800e748

0800acdc <on_initializing>:
 * @brief Inicializa los periféricos y carga configuración desde EEPROM.
 *
 * Inicia ADC con DMA, TIM2, carga umbrales de EEPROM y prepara drivers para operación.
 */
static void on_initializing(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
    debug_uart_print("INIT: entering on_initializing()\r\n");
 800ace0:	4812      	ldr	r0, [pc, #72]	; (800ad2c <on_initializing+0x50>)
 800ace2:	f000 ff4b 	bl	800bb7c <debug_uart_print>
    usb_commands_init();
 800ace6:	f001 f827 	bl	800bd38 <usb_commands_init>
    eeprom_init();
 800acea:	f000 fbc9 	bl	800b480 <eeprom_init>
    rtc_init();
 800acee:	f000 fe6f 	bl	800b9d0 <rtc_init>
    bt_init();
 800acf2:	f000 faaf 	bl	800b254 <bt_init>

    // Leer umbrales desde EEPROM o usar valores por defecto si falla
    eeprom_read_thresholds(&threshold_low, &threshold_high);
 800acf6:	490e      	ldr	r1, [pc, #56]	; (800ad30 <on_initializing+0x54>)
 800acf8:	480e      	ldr	r0, [pc, #56]	; (800ad34 <on_initializing+0x58>)
 800acfa:	f000 fc10 	bl	800b51e <eeprom_read_thresholds>

    // Iniciar ADC1 con DMA a 1 kHz
    HAL_TIM_Base_Start(&htim2);
 800acfe:	480e      	ldr	r0, [pc, #56]	; (800ad38 <on_initializing+0x5c>)
 800ad00:	f7fb f93e 	bl	8005f80 <HAL_TIM_Base_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buffer, ADC_BUFFER_SIZE);
 800ad04:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad08:	490c      	ldr	r1, [pc, #48]	; (800ad3c <on_initializing+0x60>)
 800ad0a:	480d      	ldr	r0, [pc, #52]	; (800ad40 <on_initializing+0x64>)
 800ad0c:	f7f6 fa66 	bl	80011dc <HAL_ADC_Start_DMA>

    // Iniciar delay no bloqueante de 1 segundo
    delayInit(&measureDelay, INIT_DELAY_MS);
 800ad10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ad14:	480b      	ldr	r0, [pc, #44]	; (800ad44 <on_initializing+0x68>)
 800ad16:	f7ff ff67 	bl	800abe8 <delayInit>
    debug_uart_print("INIT: drivers initialized\r\n");
 800ad1a:	480b      	ldr	r0, [pc, #44]	; (800ad48 <on_initializing+0x6c>)
 800ad1c:	f000 ff2e 	bl	800bb7c <debug_uart_print>
    application_state = STATE_IDLE;
 800ad20:	4b0a      	ldr	r3, [pc, #40]	; (800ad4c <on_initializing+0x70>)
 800ad22:	2201      	movs	r2, #1
 800ad24:	701a      	strb	r2, [r3, #0]
}
 800ad26:	bf00      	nop
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800e768 	.word	0x0800e768
 800ad30:	20000372 	.word	0x20000372
 800ad34:	20000370 	.word	0x20000370
 800ad38:	20000280 	.word	0x20000280
 800ad3c:	20000374 	.word	0x20000374
 800ad40:	20000184 	.word	0x20000184
 800ad44:	20000364 	.word	0x20000364
 800ad48:	0800e78c 	.word	0x0800e78c
 800ad4c:	20000361 	.word	0x20000361

0800ad50 <on_idle>:

/**
 * @brief Estado de espera. Gestiona botones y transición por timeout o USB.
 */
static void on_idle(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
    button_update();
 800ad54:	f000 face 	bl	800b2f4 <button_update>

    if (button_was_long_pressed()) {
 800ad58:	f000 fb68 	bl	800b42c <button_was_long_pressed>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d005      	beq.n	800ad6e <on_idle+0x1e>
        eeprom_erase_log();
 800ad62:	f000 fd25 	bl	800b7b0 <eeprom_erase_log>
        usb_cdc_sendString("EEPROM logs erased.\r\n");
 800ad66:	4811      	ldr	r0, [pc, #68]	; (800adac <on_idle+0x5c>)
 800ad68:	f000 ffd2 	bl	800bd10 <usb_cdc_sendString>
 800ad6c:	e009      	b.n	800ad82 <on_idle+0x32>
    }
    else if (button_was_pressed()) {
 800ad6e:	f000 fb49 	bl	800b404 <button_was_pressed>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d004      	beq.n	800ad82 <on_idle+0x32>
        eeprom_restore_defaults();
 800ad78:	f000 fd4c 	bl	800b814 <eeprom_restore_defaults>
        usb_cdc_sendString("Thresholds restored to defaults.\r\n");
 800ad7c:	480c      	ldr	r0, [pc, #48]	; (800adb0 <on_idle+0x60>)
 800ad7e:	f000 ffc7 	bl	800bd10 <usb_cdc_sendString>
    }

    if (delayRead(&measureDelay)) {
 800ad82:	480c      	ldr	r0, [pc, #48]	; (800adb4 <on_idle+0x64>)
 800ad84:	f7ff ff54 	bl	800ac30 <delayRead>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <on_idle+0x46>
        application_state = STATE_MONITORING;
 800ad8e:	4b0a      	ldr	r3, [pc, #40]	; (800adb8 <on_idle+0x68>)
 800ad90:	2202      	movs	r2, #2
 800ad92:	701a      	strb	r2, [r3, #0]
        return;
 800ad94:	e008      	b.n	800ada8 <on_idle+0x58>
    }
    if (usb_commands_pending()) {
 800ad96:	f000 ffd5 	bl	800bd44 <usb_commands_pending>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <on_idle+0x58>
        application_state = STATE_USB_COMMAND;
 800ada0:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <on_idle+0x68>)
 800ada2:	2203      	movs	r2, #3
 800ada4:	701a      	strb	r2, [r3, #0]
        return;
 800ada6:	bf00      	nop
    }
}
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	0800e7a8 	.word	0x0800e7a8
 800adb0:	0800e7c0 	.word	0x0800e7c0
 800adb4:	20000364 	.word	0x20000364
 800adb8:	20000361 	.word	0x20000361

0800adbc <on_monitoring>:

/**
 * @brief Clasifica nivel de sonido, reporta y loguea si es alto.
 */
static void on_monitoring(void)
{
 800adbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adbe:	b09f      	sub	sp, #124	; 0x7c
 800adc0:	af06      	add	r7, sp, #24
    char buf[80];
    debug_uart_print("=== ENTER MONITORING ===\r\n");
 800adc2:	4841      	ldr	r0, [pc, #260]	; (800aec8 <on_monitoring+0x10c>)
 800adc4:	f000 feda 	bl	800bb7c <debug_uart_print>
    sprintf(buf, "DBG: Envelope = %u\r\n", envelope);
 800adc8:	4b40      	ldr	r3, [pc, #256]	; (800aecc <on_monitoring+0x110>)
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	b29b      	uxth	r3, r3
 800adce:	461a      	mov	r2, r3
 800add0:	f107 0310 	add.w	r3, r7, #16
 800add4:	493e      	ldr	r1, [pc, #248]	; (800aed0 <on_monitoring+0x114>)
 800add6:	4618      	mov	r0, r3
 800add8:	f001 ff34 	bl	800cc44 <siprintf>
    debug_uart_print(buf);
 800addc:	f107 0310 	add.w	r3, r7, #16
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 fecb 	bl	800bb7c <debug_uart_print>

    if (envelope <= threshold_low) {
 800ade6:	4b39      	ldr	r3, [pc, #228]	; (800aecc <on_monitoring+0x110>)
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	b29a      	uxth	r2, r3
 800adec:	4b39      	ldr	r3, [pc, #228]	; (800aed4 <on_monitoring+0x118>)
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d806      	bhi.n	800ae02 <on_monitoring+0x46>
        debug_uart_print("DBG: Classification → LOW NOISE\r\n");
 800adf4:	4838      	ldr	r0, [pc, #224]	; (800aed8 <on_monitoring+0x11c>)
 800adf6:	f000 fec1 	bl	800bb7c <debug_uart_print>
        bt_send("LOW NOISE\r\n");
 800adfa:	4838      	ldr	r0, [pc, #224]	; (800aedc <on_monitoring+0x120>)
 800adfc:	f000 fa31 	bl	800b262 <bt_send>
 800ae00:	e053      	b.n	800aeaa <on_monitoring+0xee>
    } else if (envelope < threshold_high) {
 800ae02:	4b32      	ldr	r3, [pc, #200]	; (800aecc <on_monitoring+0x110>)
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	4b35      	ldr	r3, [pc, #212]	; (800aee0 <on_monitoring+0x124>)
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d206      	bcs.n	800ae1e <on_monitoring+0x62>
        debug_uart_print("DBG: Classification → MEDIUM NOISE\r\n");
 800ae10:	4834      	ldr	r0, [pc, #208]	; (800aee4 <on_monitoring+0x128>)
 800ae12:	f000 feb3 	bl	800bb7c <debug_uart_print>
        bt_send("MEDIUM NOISE\r\n");
 800ae16:	4834      	ldr	r0, [pc, #208]	; (800aee8 <on_monitoring+0x12c>)
 800ae18:	f000 fa23 	bl	800b262 <bt_send>
 800ae1c:	e045      	b.n	800aeaa <on_monitoring+0xee>
    } else {
        debug_uart_print("DBG: Classification → HIGH NOISE\r\n");
 800ae1e:	4833      	ldr	r0, [pc, #204]	; (800aeec <on_monitoring+0x130>)
 800ae20:	f000 feac 	bl	800bb7c <debug_uart_print>
        bt_send("HIGH NOISE\r\n");
 800ae24:	4832      	ldr	r0, [pc, #200]	; (800aef0 <on_monitoring+0x134>)
 800ae26:	f000 fa1c 	bl	800b262 <bt_send>

        rtc_datetime_t dt;
        if (rtc_get_datetime(&dt)) {
 800ae2a:	f107 0308 	add.w	r3, r7, #8
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fdf0 	bl	800ba14 <rtc_get_datetime>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d034      	beq.n	800aea4 <on_monitoring+0xe8>
            sprintf(buf,
                    "DBG: Logging @ %02u/%02u/20%02u %02u:%02u:%02u, lvl=%u\r\n",
                    dt.day, dt.month, dt.year,
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
            sprintf(buf,
 800ae3c:	461e      	mov	r6, r3
                    dt.day, dt.month, dt.year,
 800ae3e:	7b7b      	ldrb	r3, [r7, #13]
            sprintf(buf,
 800ae40:	469c      	mov	ip, r3
                    dt.day, dt.month, dt.year,
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
            sprintf(buf,
 800ae44:	461a      	mov	r2, r3
                    dt.hour, dt.min, dt.sec,
 800ae46:	7abb      	ldrb	r3, [r7, #10]
            sprintf(buf,
 800ae48:	4619      	mov	r1, r3
                    dt.hour, dt.min, dt.sec,
 800ae4a:	7a7b      	ldrb	r3, [r7, #9]
            sprintf(buf,
 800ae4c:	461c      	mov	r4, r3
                    dt.hour, dt.min, dt.sec,
 800ae4e:	7a3b      	ldrb	r3, [r7, #8]
            sprintf(buf,
 800ae50:	461d      	mov	r5, r3
 800ae52:	4b1e      	ldr	r3, [pc, #120]	; (800aecc <on_monitoring+0x110>)
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	f107 0010 	add.w	r0, r7, #16
 800ae5c:	9304      	str	r3, [sp, #16]
 800ae5e:	9503      	str	r5, [sp, #12]
 800ae60:	9402      	str	r4, [sp, #8]
 800ae62:	9101      	str	r1, [sp, #4]
 800ae64:	9200      	str	r2, [sp, #0]
 800ae66:	4663      	mov	r3, ip
 800ae68:	4632      	mov	r2, r6
 800ae6a:	4922      	ldr	r1, [pc, #136]	; (800aef4 <on_monitoring+0x138>)
 800ae6c:	f001 feea 	bl	800cc44 <siprintf>
                    envelope);
            debug_uart_print(buf);
 800ae70:	f107 0310 	add.w	r3, r7, #16
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fe81 	bl	800bb7c <debug_uart_print>

            eeprom_log_entry_t entry = {
                .year   = dt.year,
 800ae7a:	7bbb      	ldrb	r3, [r7, #14]
            eeprom_log_entry_t entry = {
 800ae7c:	703b      	strb	r3, [r7, #0]
                .month  = dt.month,
 800ae7e:	7b7b      	ldrb	r3, [r7, #13]
            eeprom_log_entry_t entry = {
 800ae80:	707b      	strb	r3, [r7, #1]
                .day    = dt.day,
 800ae82:	7afb      	ldrb	r3, [r7, #11]
            eeprom_log_entry_t entry = {
 800ae84:	70bb      	strb	r3, [r7, #2]
                .hour   = dt.hour,
 800ae86:	7abb      	ldrb	r3, [r7, #10]
            eeprom_log_entry_t entry = {
 800ae88:	70fb      	strb	r3, [r7, #3]
                .minute = dt.min,
 800ae8a:	7a7b      	ldrb	r3, [r7, #9]
            eeprom_log_entry_t entry = {
 800ae8c:	713b      	strb	r3, [r7, #4]
                .second = dt.sec,
 800ae8e:	7a3b      	ldrb	r3, [r7, #8]
            eeprom_log_entry_t entry = {
 800ae90:	717b      	strb	r3, [r7, #5]
 800ae92:	4b0e      	ldr	r3, [pc, #56]	; (800aecc <on_monitoring+0x110>)
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	80fb      	strh	r3, [r7, #6]
                .level  = (uint16_t)envelope
            };
            eeprom_log_high_event(&entry);
 800ae9a:	463b      	mov	r3, r7
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fb8f 	bl	800b5c0 <eeprom_log_high_event>
 800aea2:	e002      	b.n	800aeaa <on_monitoring+0xee>
        } else {
            debug_uart_print("DBG: RTC read failed, skipping log\r\n");
 800aea4:	4814      	ldr	r0, [pc, #80]	; (800aef8 <on_monitoring+0x13c>)
 800aea6:	f000 fe69 	bl	800bb7c <debug_uart_print>
        }
    }

    debug_uart_print("=== EXIT MONITORING ===\r\n");
 800aeaa:	4814      	ldr	r0, [pc, #80]	; (800aefc <on_monitoring+0x140>)
 800aeac:	f000 fe66 	bl	800bb7c <debug_uart_print>
    delayWrite(&measureDelay, INIT_DELAY_MS);
 800aeb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aeb4:	4812      	ldr	r0, [pc, #72]	; (800af00 <on_monitoring+0x144>)
 800aeb6:	f7ff fef5 	bl	800aca4 <delayWrite>
    application_state = STATE_IDLE;
 800aeba:	4b12      	ldr	r3, [pc, #72]	; (800af04 <on_monitoring+0x148>)
 800aebc:	2201      	movs	r2, #1
 800aebe:	701a      	strb	r2, [r3, #0]
}
 800aec0:	bf00      	nop
 800aec2:	3764      	adds	r7, #100	; 0x64
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aec8:	0800e7e4 	.word	0x0800e7e4
 800aecc:	20000574 	.word	0x20000574
 800aed0:	0800e800 	.word	0x0800e800
 800aed4:	20000370 	.word	0x20000370
 800aed8:	0800e818 	.word	0x0800e818
 800aedc:	0800e83c 	.word	0x0800e83c
 800aee0:	20000372 	.word	0x20000372
 800aee4:	0800e848 	.word	0x0800e848
 800aee8:	0800e870 	.word	0x0800e870
 800aeec:	0800e880 	.word	0x0800e880
 800aef0:	0800e8a8 	.word	0x0800e8a8
 800aef4:	0800e8b8 	.word	0x0800e8b8
 800aef8:	0800e8f4 	.word	0x0800e8f4
 800aefc:	0800e91c 	.word	0x0800e91c
 800af00:	20000364 	.word	0x20000364
 800af04:	20000361 	.word	0x20000361

0800af08 <on_usb_command>:
/**
 * @brief Procesa comandos entrantes desde la interfaz USB CDC.
 */

static void on_usb_command(void)
{
 800af08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af0a:	b0b3      	sub	sp, #204	; 0xcc
 800af0c:	af06      	add	r7, sp, #24
    pending_action_t act;
    char buf[64];
    usb_command_t cmd = usb_commands_get(&act);
 800af0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800af12:	4618      	mov	r0, r3
 800af14:	f000 ff5e 	bl	800bdd4 <usb_commands_get>
 800af18:	4603      	mov	r3, r0
 800af1a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    switch (cmd) {
 800af1e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800af22:	2b04      	cmp	r3, #4
 800af24:	f200 80e1 	bhi.w	800b0ea <on_usb_command+0x1e2>
 800af28:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <on_usb_command+0x28>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800af45 	.word	0x0800af45
 800af34:	0800af6b 	.word	0x0800af6b
 800af38:	0800afa1 	.word	0x0800afa1
 800af3c:	0800affb 	.word	0x0800affb
 800af40:	0800b01d 	.word	0x0800b01d
        case CMD_GET_THRESH: {
            snprintf(buf, sizeof(buf), "TH_LOW=%u TH_HIGH=%u\r\n", threshold_low, threshold_high);
 800af44:	4b6e      	ldr	r3, [pc, #440]	; (800b100 <on_usb_command+0x1f8>)
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	4b6e      	ldr	r3, [pc, #440]	; (800b104 <on_usb_command+0x1fc>)
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	4613      	mov	r3, r2
 800af56:	4a6c      	ldr	r2, [pc, #432]	; (800b108 <on_usb_command+0x200>)
 800af58:	2140      	movs	r1, #64	; 0x40
 800af5a:	f001 fe3f 	bl	800cbdc <sniprintf>
            usb_cdc_sendString(buf);
 800af5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af62:	4618      	mov	r0, r3
 800af64:	f000 fed4 	bl	800bd10 <usb_cdc_sendString>
            break;
 800af68:	e0c2      	b.n	800b0f0 <on_usb_command+0x1e8>
        }
        case CMD_SET_THRESH: {
            if (eeprom_write_thresholds(act.low, act.high)) {
 800af6a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800af6e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800af72:	4611      	mov	r1, r2
 800af74:	4618      	mov	r0, r3
 800af76:	f000 faff 	bl	800b578 <eeprom_write_thresholds>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <on_usb_command+0x90>
                threshold_low  = act.low;
 800af80:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800af84:	4b5e      	ldr	r3, [pc, #376]	; (800b100 <on_usb_command+0x1f8>)
 800af86:	801a      	strh	r2, [r3, #0]
                threshold_high = act.high;
 800af88:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800af8c:	4b5d      	ldr	r3, [pc, #372]	; (800b104 <on_usb_command+0x1fc>)
 800af8e:	801a      	strh	r2, [r3, #0]
                usb_cdc_sendString("Thresholds updated\r\n");
 800af90:	485e      	ldr	r0, [pc, #376]	; (800b10c <on_usb_command+0x204>)
 800af92:	f000 febd 	bl	800bd10 <usb_cdc_sendString>
            } else {
                usb_cdc_sendString("EEPROM write error\r\n");
            }
            break;
 800af96:	e0ab      	b.n	800b0f0 <on_usb_command+0x1e8>
                usb_cdc_sendString("EEPROM write error\r\n");
 800af98:	485d      	ldr	r0, [pc, #372]	; (800b110 <on_usb_command+0x208>)
 800af9a:	f000 feb9 	bl	800bd10 <usb_cdc_sendString>
            break;
 800af9e:	e0a7      	b.n	800b0f0 <on_usb_command+0x1e8>
        }
        case CMD_GET_TIME: {
            rtc_datetime_t dt;
            if (rtc_get_datetime(&dt)) {
 800afa0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 fd35 	bl	800ba14 <rtc_get_datetime>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d020      	beq.n	800aff2 <on_usb_command+0xea>
                snprintf(buf, sizeof(buf),
                         "%02u/%02u/20%02u %02u:%02u:%02u\r\n",
                         dt.date, dt.month, dt.year,
 800afb0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
                snprintf(buf, sizeof(buf),
 800afb4:	461e      	mov	r6, r3
                         dt.date, dt.month, dt.year,
 800afb6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800afba:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
                         dt.hour, dt.min, dt.sec);
 800afbe:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
 800afc2:	f897 0059 	ldrb.w	r0, [r7, #89]	; 0x59
                snprintf(buf, sizeof(buf),
 800afc6:	4604      	mov	r4, r0
                         dt.hour, dt.min, dt.sec);
 800afc8:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
                snprintf(buf, sizeof(buf),
 800afcc:	4605      	mov	r5, r0
 800afce:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800afd2:	9504      	str	r5, [sp, #16]
 800afd4:	9403      	str	r4, [sp, #12]
 800afd6:	9102      	str	r1, [sp, #8]
 800afd8:	9201      	str	r2, [sp, #4]
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	4633      	mov	r3, r6
 800afde:	4a4d      	ldr	r2, [pc, #308]	; (800b114 <on_usb_command+0x20c>)
 800afe0:	2140      	movs	r1, #64	; 0x40
 800afe2:	f001 fdfb 	bl	800cbdc <sniprintf>
                usb_cdc_sendString(buf);
 800afe6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fe90 	bl	800bd10 <usb_cdc_sendString>
            } else {
                usb_cdc_sendString("RTC: ND\r\n");
            }
            break;
 800aff0:	e07e      	b.n	800b0f0 <on_usb_command+0x1e8>
                usb_cdc_sendString("RTC: ND\r\n");
 800aff2:	4849      	ldr	r0, [pc, #292]	; (800b118 <on_usb_command+0x210>)
 800aff4:	f000 fe8c 	bl	800bd10 <usb_cdc_sendString>
            break;
 800aff8:	e07a      	b.n	800b0f0 <on_usb_command+0x1e8>
        }
        case CMD_SET_TIME: {
            if (rtc_set_datetime(&act.dt)) {
 800affa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800affe:	3306      	adds	r3, #6
 800b000:	4618      	mov	r0, r3
 800b002:	f000 fd69 	bl	800bad8 <rtc_set_datetime>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <on_usb_command+0x10c>
                usb_cdc_sendString("RTC updated\r\n");
 800b00c:	4843      	ldr	r0, [pc, #268]	; (800b11c <on_usb_command+0x214>)
 800b00e:	f000 fe7f 	bl	800bd10 <usb_cdc_sendString>
            } else {
                usb_cdc_sendString("RTC write error\r\n");
            }
            break;
 800b012:	e06d      	b.n	800b0f0 <on_usb_command+0x1e8>
                usb_cdc_sendString("RTC write error\r\n");
 800b014:	4842      	ldr	r0, [pc, #264]	; (800b120 <on_usb_command+0x218>)
 800b016:	f000 fe7b 	bl	800bd10 <usb_cdc_sendString>
            break;
 800b01a:	e069      	b.n	800b0f0 <on_usb_command+0x1e8>
        }
        case CMD_GET_LOG: {
            eeprom_log_entry_t entries[EEPROM_LOG_MAX_ENTRIES];
            uint8_t count;
            if (eeprom_read_log(entries, EEPROM_LOG_MAX_ENTRIES, &count)) {
 800b01c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800b020:	1d3b      	adds	r3, r7, #4
 800b022:	210a      	movs	r1, #10
 800b024:	4618      	mov	r0, r3
 800b026:	f000 fb45 	bl	800b6b4 <eeprom_read_log>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d058      	beq.n	800b0e2 <on_usb_command+0x1da>
                for (uint8_t i = 0; i < count; i++) {
 800b030:	2300      	movs	r3, #0
 800b032:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800b036:	e04d      	b.n	800b0d4 <on_usb_command+0x1cc>
                    snprintf(buf, sizeof(buf),
                             "%02u/%02u/20%02u %02u:%02u:%02u Lvl=%u\r\n",
                             entries[i].day,
 800b038:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b03c:	00db      	lsls	r3, r3, #3
 800b03e:	33b0      	adds	r3, #176	; 0xb0
 800b040:	443b      	add	r3, r7
 800b042:	f813 3caa 	ldrb.w	r3, [r3, #-170]
                    snprintf(buf, sizeof(buf),
 800b046:	469c      	mov	ip, r3
                             entries[i].month,
 800b048:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	33b0      	adds	r3, #176	; 0xb0
 800b050:	443b      	add	r3, r7
 800b052:	f813 3cab 	ldrb.w	r3, [r3, #-171]
                    snprintf(buf, sizeof(buf),
 800b056:	461a      	mov	r2, r3
                             entries[i].year,
 800b058:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b05c:	00db      	lsls	r3, r3, #3
 800b05e:	33b0      	adds	r3, #176	; 0xb0
 800b060:	443b      	add	r3, r7
 800b062:	f813 3cac 	ldrb.w	r3, [r3, #-172]
                    snprintf(buf, sizeof(buf),
 800b066:	4619      	mov	r1, r3
                             entries[i].hour,
 800b068:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b06c:	00db      	lsls	r3, r3, #3
 800b06e:	33b0      	adds	r3, #176	; 0xb0
 800b070:	443b      	add	r3, r7
 800b072:	f813 3ca9 	ldrb.w	r3, [r3, #-169]
                    snprintf(buf, sizeof(buf),
 800b076:	461c      	mov	r4, r3
                             entries[i].minute,
 800b078:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b07c:	00db      	lsls	r3, r3, #3
 800b07e:	33b0      	adds	r3, #176	; 0xb0
 800b080:	443b      	add	r3, r7
 800b082:	f813 3ca8 	ldrb.w	r3, [r3, #-168]
                    snprintf(buf, sizeof(buf),
 800b086:	461d      	mov	r5, r3
                             entries[i].second,
 800b088:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	33b0      	adds	r3, #176	; 0xb0
 800b090:	443b      	add	r3, r7
 800b092:	f813 3ca7 	ldrb.w	r3, [r3, #-167]
                    snprintf(buf, sizeof(buf),
 800b096:	461e      	mov	r6, r3
                             entries[i].level);
 800b098:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b09c:	00db      	lsls	r3, r3, #3
 800b09e:	33b0      	adds	r3, #176	; 0xb0
 800b0a0:	443b      	add	r3, r7
 800b0a2:	f833 3ca6 	ldrh.w	r3, [r3, #-166]
                    snprintf(buf, sizeof(buf),
 800b0a6:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800b0aa:	9305      	str	r3, [sp, #20]
 800b0ac:	9604      	str	r6, [sp, #16]
 800b0ae:	9503      	str	r5, [sp, #12]
 800b0b0:	9402      	str	r4, [sp, #8]
 800b0b2:	9101      	str	r1, [sp, #4]
 800b0b4:	9200      	str	r2, [sp, #0]
 800b0b6:	4663      	mov	r3, ip
 800b0b8:	4a1a      	ldr	r2, [pc, #104]	; (800b124 <on_usb_command+0x21c>)
 800b0ba:	2140      	movs	r1, #64	; 0x40
 800b0bc:	f001 fd8e 	bl	800cbdc <sniprintf>
                    usb_cdc_sendString(buf);
 800b0c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 fe23 	bl	800bd10 <usb_cdc_sendString>
                for (uint8_t i = 0; i < count; i++) {
 800b0ca:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800b0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0d8:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d3ab      	bcc.n	800b038 <on_usb_command+0x130>
                }
            } else {
                usb_cdc_sendString("Log empty or error\r\n");
            }
            break;
 800b0e0:	e006      	b.n	800b0f0 <on_usb_command+0x1e8>
                usb_cdc_sendString("Log empty or error\r\n");
 800b0e2:	4811      	ldr	r0, [pc, #68]	; (800b128 <on_usb_command+0x220>)
 800b0e4:	f000 fe14 	bl	800bd10 <usb_cdc_sendString>
            break;
 800b0e8:	e002      	b.n	800b0f0 <on_usb_command+0x1e8>
        }
        case CMD_HELP:
        default:
            usb_commands_print_help();
 800b0ea:	f000 fedb 	bl	800bea4 <usb_commands_print_help>
            break;
 800b0ee:	bf00      	nop
    }
    application_state = STATE_IDLE;
 800b0f0:	4b0e      	ldr	r3, [pc, #56]	; (800b12c <on_usb_command+0x224>)
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	701a      	strb	r2, [r3, #0]
}
 800b0f6:	bf00      	nop
 800b0f8:	37b4      	adds	r7, #180	; 0xb4
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20000370 	.word	0x20000370
 800b104:	20000372 	.word	0x20000372
 800b108:	0800e938 	.word	0x0800e938
 800b10c:	0800e950 	.word	0x0800e950
 800b110:	0800e968 	.word	0x0800e968
 800b114:	0800e980 	.word	0x0800e980
 800b118:	0800e9a4 	.word	0x0800e9a4
 800b11c:	0800e9b0 	.word	0x0800e9b0
 800b120:	0800e9c0 	.word	0x0800e9c0
 800b124:	0800e9d4 	.word	0x0800e9d4
 800b128:	0800ea00 	.word	0x0800ea00
 800b12c:	20000361 	.word	0x20000361

0800b130 <appUpdate>:
 *
 * Lazo principal que evalúa el estado de la aplicación y despacha a los handlers correspondientes.
 * Esta función bloquea y debe ser llamada una sola vez desde main().
 */
void appUpdate(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
    while (1) {
        switch (application_state) {
 800b134:	4b0e      	ldr	r3, [pc, #56]	; (800b170 <appUpdate+0x40>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d8fb      	bhi.n	800b134 <appUpdate+0x4>
 800b13c:	a201      	add	r2, pc, #4	; (adr r2, 800b144 <appUpdate+0x14>)
 800b13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b142:	bf00      	nop
 800b144:	0800b155 	.word	0x0800b155
 800b148:	0800b15b 	.word	0x0800b15b
 800b14c:	0800b161 	.word	0x0800b161
 800b150:	0800b167 	.word	0x0800b167
            case STATE_INITIALIZING:
                on_initializing();
 800b154:	f7ff fdc2 	bl	800acdc <on_initializing>
                break;
 800b158:	e009      	b.n	800b16e <appUpdate+0x3e>

            case STATE_IDLE:
                on_idle();
 800b15a:	f7ff fdf9 	bl	800ad50 <on_idle>
                break;
 800b15e:	e006      	b.n	800b16e <appUpdate+0x3e>

            case STATE_MONITORING:
                on_monitoring();
 800b160:	f7ff fe2c 	bl	800adbc <on_monitoring>
                break;
 800b164:	e003      	b.n	800b16e <appUpdate+0x3e>

            case STATE_USB_COMMAND:
                on_usb_command();
 800b166:	f7ff fecf 	bl	800af08 <on_usb_command>
                break;
 800b16a:	bf00      	nop
 800b16c:	e7e2      	b.n	800b134 <appUpdate+0x4>
        switch (application_state) {
 800b16e:	e7e1      	b.n	800b134 <appUpdate+0x4>
 800b170:	20000361 	.word	0x20000361

0800b174 <HAL_ADC_ConvCpltCallback>:
 *
 * @param hadc Puntero al handler del ADC.
 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08a      	sub	sp, #40	; 0x28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
    // Verifico que la interrupción venga del ADC1
    if (hadc->Instance != ADC1){
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a30      	ldr	r2, [pc, #192]	; (800b244 <HAL_ADC_ConvCpltCallback+0xd0>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d15a      	bne.n	800b23c <HAL_ADC_ConvCpltCallback+0xc8>
        return;
    }

    // 1) Calcular el nivel de offset (DC bias) promedio
    uint32_t sum = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b18a:	2300      	movs	r3, #0
 800b18c:	623b      	str	r3, [r7, #32]
 800b18e:	e00a      	b.n	800b1a6 <HAL_ADC_ConvCpltCallback+0x32>
        sum += adc_dma_buffer[i];
 800b190:	4a2d      	ldr	r2, [pc, #180]	; (800b248 <HAL_ADC_ConvCpltCallback+0xd4>)
 800b192:	6a3b      	ldr	r3, [r7, #32]
 800b194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b198:	461a      	mov	r2, r3
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	4413      	add	r3, r2
 800b19e:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	623b      	str	r3, [r7, #32]
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	2bff      	cmp	r3, #255	; 0xff
 800b1aa:	ddf1      	ble.n	800b190 <HAL_ADC_ConvCpltCallback+0x1c>
    }
    float bias = (float)sum / (float)ADC_BUFFER_SIZE;
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b1b6:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b24c <HAL_ADC_ConvCpltCallback+0xd8>
 800b1ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b1be:	edc7 7a05 	vstr	s15, [r7, #20]

    // 2) Calcular la suma de los cuadrados de la señal centrada en el bias
    uint32_t sum_sq = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61bb      	str	r3, [r7, #24]
 800b1ca:	e01b      	b.n	800b204 <HAL_ADC_ConvCpltCallback+0x90>
        float d = (float)adc_dma_buffer[i] - bias;
 800b1cc:	4a1e      	ldr	r2, [pc, #120]	; (800b248 <HAL_ADC_ConvCpltCallback+0xd4>)
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1d4:	ee07 3a90 	vmov	s15, r3
 800b1d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b1dc:	edd7 7a05 	vldr	s15, [r7, #20]
 800b1e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1e4:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_sq += (uint32_t)(d * d);
 800b1e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1f4:	ee17 2a90 	vmov	r2, s15
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	3301      	adds	r3, #1
 800b202:	61bb      	str	r3, [r7, #24]
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	2bff      	cmp	r3, #255	; 0xff
 800b208:	dde0      	ble.n	800b1cc <HAL_ADC_ConvCpltCallback+0x58>
    }

    // 3) Obtener RMS: raíz cuadrada del promedio de los cuadrados
    float rms = sqrtf((float)sum_sq / (float)ADC_BUFFER_SIZE);
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b214:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b24c <HAL_ADC_ConvCpltCallback+0xd8>
 800b218:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b21c:	eeb0 0a47 	vmov.f32	s0, s14
 800b220:	f003 fa60 	bl	800e6e4 <sqrtf>
 800b224:	ed87 0a04 	vstr	s0, [r7, #16]

    // 4) Guardar el valor RMS en la variable global envelope
    envelope = rms;
 800b228:	edd7 7a04 	vldr	s15, [r7, #16]
 800b22c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b230:	ee17 3a90 	vmov	r3, s15
 800b234:	b29a      	uxth	r2, r3
 800b236:	4b06      	ldr	r3, [pc, #24]	; (800b250 <HAL_ADC_ConvCpltCallback+0xdc>)
 800b238:	801a      	strh	r2, [r3, #0]
 800b23a:	e000      	b.n	800b23e <HAL_ADC_ConvCpltCallback+0xca>
        return;
 800b23c:	bf00      	nop
}
 800b23e:	3728      	adds	r7, #40	; 0x28
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	40012000 	.word	0x40012000
 800b248:	20000374 	.word	0x20000374
 800b24c:	43800000 	.word	0x43800000
 800b250:	20000574 	.word	0x20000574

0800b254 <bt_init>:
#include <string.h>

/**
 * Inicializa el módulo Bluetooth llamando al port específico.
 */
bool_t bt_init(void) {
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
    return port_bt_init();
 800b258:	f000 f822 	bl	800b2a0 <port_bt_init>
 800b25c:	4603      	mov	r3, r0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	bd80      	pop	{r7, pc}

0800b262 <bt_send>:

/**
 * Envía un string como mensaje Bluetooth usando la función raw.
 * Internamente convierte el string a un buffer de bytes.
 */
bool_t bt_send(const char* msg) {
 800b262:	b580      	push	{r7, lr}
 800b264:	b082      	sub	sp, #8
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
    return bt_send_raw((const uint8_t*)msg, strlen(msg));
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f7f4 ffda 	bl	8000224 <strlen>
 800b270:	4603      	mov	r3, r0
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f805 	bl	800b284 <bt_send_raw>
 800b27a:	4603      	mov	r3, r0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3708      	adds	r7, #8
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <bt_send_raw>:

/**
 * Envía datos crudos por Bluetooth usando la función del port.
 */
bool_t bt_send_raw(const uint8_t* data, size_t len) {
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
    return port_bt_send(data, len);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f815 	bl	800b2c0 <port_bt_send>
 800b296:	4603      	mov	r3, r0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <port_bt_init>:
/**
 * Inicializa el periférico UART utilizado para Bluetooth.
 *
 * @return true si HAL_UART_Init devuelve HAL_OK
 */
bool_t port_bt_init(void) {
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
    return HAL_UART_Init(&huart1) == HAL_OK;
 800b2a4:	4805      	ldr	r0, [pc, #20]	; (800b2bc <port_bt_init+0x1c>)
 800b2a6:	f7fb f95d 	bl	8006564 <HAL_UART_Init>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bf0c      	ite	eq
 800b2b0:	2301      	moveq	r3, #1
 800b2b2:	2300      	movne	r3, #0
 800b2b4:	b2db      	uxtb	r3, r3
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	200002c8 	.word	0x200002c8

0800b2c0 <port_bt_send>:
 *
 * @param data Buffer con los datos a enviar.
 * @param len Cantidad de bytes del buffer.
 * @return true si la transmisión fue exitosa.
 */
bool_t port_bt_send(const uint8_t* data, size_t len) {
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY) == HAL_OK;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d2:	6879      	ldr	r1, [r7, #4]
 800b2d4:	4806      	ldr	r0, [pc, #24]	; (800b2f0 <port_bt_send+0x30>)
 800b2d6:	f7fb f995 	bl	8006604 <HAL_UART_Transmit>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	bf0c      	ite	eq
 800b2e0:	2301      	moveq	r3, #1
 800b2e2:	2300      	movne	r3, #0
 800b2e4:	b2db      	uxtb	r3, r3
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	200002c8 	.word	0x200002c8

0800b2f4 <button_update>:
/**
 * Actualiza la máquina de estados del botón.
 *
 * Se encarga del manejo de rebotes y detección de pulsaciones largas o cortas.
 */
void button_update(void) {
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
    bool_t phys = port_button_read(); // Lectura física del botón
 800b2fa:	f000 f8ab 	bl	800b454 <port_button_read>
 800b2fe:	4603      	mov	r3, r0
 800b300:	71fb      	strb	r3, [r7, #7]

    switch(state) {
 800b302:	4b3b      	ldr	r3, [pc, #236]	; (800b3f0 <button_update+0xfc>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	2b03      	cmp	r3, #3
 800b308:	d86e      	bhi.n	800b3e8 <button_update+0xf4>
 800b30a:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <button_update+0x1c>)
 800b30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b337 	.word	0x0800b337
 800b318:	0800b369 	.word	0x0800b369
 800b31c:	0800b3a5 	.word	0x0800b3a5
        case UP:
            if (phys) {
 800b320:	79fb      	ldrb	r3, [r7, #7]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d059      	beq.n	800b3da <button_update+0xe6>
                state = FALLING;
 800b326:	4b32      	ldr	r3, [pc, #200]	; (800b3f0 <button_update+0xfc>)
 800b328:	2201      	movs	r2, #1
 800b32a:	701a      	strb	r2, [r3, #0]
                delayInit(&dbDelay, DEBOUNCE_MS);
 800b32c:	2128      	movs	r1, #40	; 0x28
 800b32e:	4831      	ldr	r0, [pc, #196]	; (800b3f4 <button_update+0x100>)
 800b330:	f7ff fc5a 	bl	800abe8 <delayInit>
            }
            break;
 800b334:	e051      	b.n	800b3da <button_update+0xe6>

        case FALLING:
            if (delayRead(&dbDelay)) {
 800b336:	482f      	ldr	r0, [pc, #188]	; (800b3f4 <button_update+0x100>)
 800b338:	f7ff fc7a 	bl	800ac30 <delayRead>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d04d      	beq.n	800b3de <button_update+0xea>
                if (phys) {
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00b      	beq.n	800b360 <button_update+0x6c>
                    state = DOWN;
 800b348:	4b29      	ldr	r3, [pc, #164]	; (800b3f0 <button_update+0xfc>)
 800b34a:	2202      	movs	r2, #2
 800b34c:	701a      	strb	r2, [r3, #0]
                    delayInit(&holdDelay, HOLD_MS); // Comenzar conteo para pulsación larga
 800b34e:	f241 3188 	movw	r1, #5000	; 0x1388
 800b352:	4829      	ldr	r0, [pc, #164]	; (800b3f8 <button_update+0x104>)
 800b354:	f7ff fc48 	bl	800abe8 <delayInit>
                    longFlag = false;
 800b358:	4b28      	ldr	r3, [pc, #160]	; (800b3fc <button_update+0x108>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	701a      	strb	r2, [r3, #0]
                } else {
                    state = UP; // Falsa alarma
                }
            }
            break;
 800b35e:	e03e      	b.n	800b3de <button_update+0xea>
                    state = UP; // Falsa alarma
 800b360:	4b23      	ldr	r3, [pc, #140]	; (800b3f0 <button_update+0xfc>)
 800b362:	2200      	movs	r2, #0
 800b364:	701a      	strb	r2, [r3, #0]
            break;
 800b366:	e03a      	b.n	800b3de <button_update+0xea>

        case DOWN:
            if (delayRead(&holdDelay) && !longFlag) {
 800b368:	4823      	ldr	r0, [pc, #140]	; (800b3f8 <button_update+0x104>)
 800b36a:	f7ff fc61 	bl	800ac30 <delayRead>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d009      	beq.n	800b388 <button_update+0x94>
 800b374:	4b21      	ldr	r3, [pc, #132]	; (800b3fc <button_update+0x108>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	f083 0301 	eor.w	r3, r3, #1
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <button_update+0x94>
                longFlag = true; // Se detecta pulsación larga
 800b382:	4b1e      	ldr	r3, [pc, #120]	; (800b3fc <button_update+0x108>)
 800b384:	2201      	movs	r2, #1
 800b386:	701a      	strb	r2, [r3, #0]
            }
            if (!phys) {
 800b388:	79fb      	ldrb	r3, [r7, #7]
 800b38a:	f083 0301 	eor.w	r3, r3, #1
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b00      	cmp	r3, #0
 800b392:	d026      	beq.n	800b3e2 <button_update+0xee>
                state = RISING;
 800b394:	4b16      	ldr	r3, [pc, #88]	; (800b3f0 <button_update+0xfc>)
 800b396:	2203      	movs	r2, #3
 800b398:	701a      	strb	r2, [r3, #0]
                delayInit(&dbDelay, DEBOUNCE_MS);
 800b39a:	2128      	movs	r1, #40	; 0x28
 800b39c:	4815      	ldr	r0, [pc, #84]	; (800b3f4 <button_update+0x100>)
 800b39e:	f7ff fc23 	bl	800abe8 <delayInit>
            }
            break;
 800b3a2:	e01e      	b.n	800b3e2 <button_update+0xee>

        case RISING:
            if (delayRead(&dbDelay)) {
 800b3a4:	4813      	ldr	r0, [pc, #76]	; (800b3f4 <button_update+0x100>)
 800b3a6:	f7ff fc43 	bl	800ac30 <delayRead>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d01a      	beq.n	800b3e6 <button_update+0xf2>
                if (!phys) {
 800b3b0:	79fb      	ldrb	r3, [r7, #7]
 800b3b2:	f083 0301 	eor.w	r3, r3, #1
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00a      	beq.n	800b3d2 <button_update+0xde>
                    if (longFlag) {
 800b3bc:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <button_update+0x108>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d102      	bne.n	800b3ca <button_update+0xd6>
                        // No se genera shortFlag en caso de long
                    } else {
                        shortFlag = true; // Pulsación corta válida
 800b3c4:	4b0e      	ldr	r3, [pc, #56]	; (800b400 <button_update+0x10c>)
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	701a      	strb	r2, [r3, #0]
                    }
                    state = UP;
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <button_update+0xfc>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
                } else {
                    state = DOWN; // Rebote, seguir abajo
                }
            }
            break;
 800b3d0:	e009      	b.n	800b3e6 <button_update+0xf2>
                    state = DOWN; // Rebote, seguir abajo
 800b3d2:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <button_update+0xfc>)
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	701a      	strb	r2, [r3, #0]
            break;
 800b3d8:	e005      	b.n	800b3e6 <button_update+0xf2>
            break;
 800b3da:	bf00      	nop
 800b3dc:	e004      	b.n	800b3e8 <button_update+0xf4>
            break;
 800b3de:	bf00      	nop
 800b3e0:	e002      	b.n	800b3e8 <button_update+0xf4>
            break;
 800b3e2:	bf00      	nop
 800b3e4:	e000      	b.n	800b3e8 <button_update+0xf4>
            break;
 800b3e6:	bf00      	nop
    }
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20000576 	.word	0x20000576
 800b3f4:	2000057c 	.word	0x2000057c
 800b3f8:	20000588 	.word	0x20000588
 800b3fc:	20000578 	.word	0x20000578
 800b400:	20000577 	.word	0x20000577

0800b404 <button_was_pressed>:

/**
 * Verifica si hubo una pulsación corta desde la última consulta.
 */
bool_t button_was_pressed(void) {
 800b404:	b480      	push	{r7}
 800b406:	af00      	add	r7, sp, #0
    if (shortFlag) {
 800b408:	4b07      	ldr	r3, [pc, #28]	; (800b428 <button_was_pressed+0x24>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d004      	beq.n	800b41a <button_was_pressed+0x16>
        shortFlag = false;
 800b410:	4b05      	ldr	r3, [pc, #20]	; (800b428 <button_was_pressed+0x24>)
 800b412:	2200      	movs	r2, #0
 800b414:	701a      	strb	r2, [r3, #0]
        return true;
 800b416:	2301      	movs	r3, #1
 800b418:	e000      	b.n	800b41c <button_was_pressed+0x18>
    }
    return false;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	20000577 	.word	0x20000577

0800b42c <button_was_long_pressed>:

/**
 * Verifica si hubo una pulsación larga desde la última consulta.
 */
bool_t button_was_long_pressed(void) {
 800b42c:	b480      	push	{r7}
 800b42e:	af00      	add	r7, sp, #0
    if (longFlag) {
 800b430:	4b07      	ldr	r3, [pc, #28]	; (800b450 <button_was_long_pressed+0x24>)
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d004      	beq.n	800b442 <button_was_long_pressed+0x16>
        longFlag = false;
 800b438:	4b05      	ldr	r3, [pc, #20]	; (800b450 <button_was_long_pressed+0x24>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	701a      	strb	r2, [r3, #0]
        return true;
 800b43e:	2301      	movs	r3, #1
 800b440:	e000      	b.n	800b444 <button_was_long_pressed+0x18>
    }
    return false;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	20000578 	.word	0x20000578

0800b454 <port_button_read>:
 * Utiliza HAL_GPIO_ReadPin para leer el pin físico del botón. Si el botón es activo-bajo,
 * invierte la lógica para que devuelva true cuando esté presionado.
 *
 * @return true si el botón está presionado, false si está liberado.
 */
bool_t port_button_read(void) {
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
    // Leemos el estado lógico del pin del botón
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 800b45a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b45e:	4807      	ldr	r0, [pc, #28]	; (800b47c <port_button_read+0x28>)
 800b460:	f7f7 f938 	bl	80026d4 <HAL_GPIO_ReadPin>
 800b464:	4603      	mov	r3, r0
 800b466:	71fb      	strb	r3, [r7, #7]

    // Si el botón es activo-bajo (pull-down), consideramos presionado cuando el pin está en bajo (RESET)
    // Si fuera activo-alto, consideraríamos presionado cuando el pin esté en alto (SET)
    // El operador ternario permite devolver directamente true o false según esta lógica
    return BUTTON_PULL_LOW ? (pin_state == GPIO_PIN_RESET) : (pin_state == GPIO_PIN_SET);
 800b468:	79fb      	ldrb	r3, [r7, #7]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	bf0c      	ite	eq
 800b46e:	2301      	moveq	r3, #1
 800b470:	2300      	movne	r3, #0
 800b472:	b2db      	uxtb	r3, r3
}
 800b474:	4618      	mov	r0, r3
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	40020800 	.word	0x40020800

0800b480 <eeprom_init>:
#include "eeprom.h"
#include "port_eeprom.h"

// ─── Inicialización de EEPROM ─────────────────────────────────────────────
bool_t eeprom_init(void)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
    uint8_t sig;

    // 1) Leemos la firma almacenada
    if (!eeprom_read(EEPROM_SIGNATURE_ADDR, &sig, 1)) {
 800b486:	f107 030f 	add.w	r3, r7, #15
 800b48a:	2201      	movs	r2, #1
 800b48c:	4619      	mov	r1, r3
 800b48e:	2000      	movs	r0, #0
 800b490:	f000 f9ca 	bl	800b828 <eeprom_read>
 800b494:	4603      	mov	r3, r0
 800b496:	f083 0301 	eor.w	r3, r3, #1
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d001      	beq.n	800b4a4 <eeprom_init+0x24>
        return false;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e038      	b.n	800b516 <eeprom_init+0x96>
    }

    // 2) Si la firma no coincide, es la primera vez → inicializamos
    if (sig != EEPROM_SIGNATURE_VALUE) {
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
 800b4a6:	2ba5      	cmp	r3, #165	; 0xa5
 800b4a8:	d034      	beq.n	800b514 <eeprom_init+0x94>
        // ─── Escribimos firma + thresholds por defecto ───
        uint8_t buf[1 + 2*2];
        buf[0] = EEPROM_SIGNATURE_VALUE;
 800b4aa:	23a5      	movs	r3, #165	; 0xa5
 800b4ac:	723b      	strb	r3, [r7, #8]
        buf[1] = (uint8_t)(DEFAULT_THRESHOLD_LOW  & 0xFF);
 800b4ae:	230a      	movs	r3, #10
 800b4b0:	727b      	strb	r3, [r7, #9]
        buf[2] = (uint8_t)(DEFAULT_THRESHOLD_LOW >> 8);
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	72bb      	strb	r3, [r7, #10]
        buf[3] = (uint8_t)(DEFAULT_THRESHOLD_HIGH & 0xFF);
 800b4b6:	2314      	movs	r3, #20
 800b4b8:	72fb      	strb	r3, [r7, #11]
        buf[4] = (uint8_t)(DEFAULT_THRESHOLD_HIGH >> 8);
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	733b      	strb	r3, [r7, #12]

        if (!eeprom_write(EEPROM_SIGNATURE_ADDR, buf, sizeof(buf))) {
 800b4be:	f107 0308 	add.w	r3, r7, #8
 800b4c2:	2205      	movs	r2, #5
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	f000 f9d0 	bl	800b86c <eeprom_write>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f083 0301 	eor.w	r3, r3, #1
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <eeprom_init+0x5c>
            return false;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e01c      	b.n	800b516 <eeprom_init+0x96>
        }

        // ─── Inicializamos los punteros del buffer circular ───
        uint8_t zero = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	71fb      	strb	r3, [r7, #7]
        if (!eeprom_write(EEPROM_LOG_HEAD_ADDR,  &zero, 1) ||
 800b4e0:	1dfb      	adds	r3, r7, #7
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	200f      	movs	r0, #15
 800b4e8:	f000 f9c0 	bl	800b86c <eeprom_write>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f083 0301 	eor.w	r3, r3, #1
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10b      	bne.n	800b510 <eeprom_init+0x90>
            !eeprom_write(EEPROM_LOG_COUNT_ADDR, &zero, 1))
 800b4f8:	1dfb      	adds	r3, r7, #7
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	2010      	movs	r0, #16
 800b500:	f000 f9b4 	bl	800b86c <eeprom_write>
 800b504:	4603      	mov	r3, r0
 800b506:	f083 0301 	eor.w	r3, r3, #1
 800b50a:	b2db      	uxtb	r3, r3
        if (!eeprom_write(EEPROM_LOG_HEAD_ADDR,  &zero, 1) ||
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <eeprom_init+0x94>
        {
            return false;
 800b510:	2300      	movs	r3, #0
 800b512:	e000      	b.n	800b516 <eeprom_init+0x96>
        }
    }

    return true;
 800b514:	2301      	movs	r3, #1
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <eeprom_read_thresholds>:

// ─── Leer thresholds LOW y HIGH ───────────────────────────────────────────
bool_t eeprom_read_thresholds(uint16_t *low, uint16_t *high)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
 800b526:	6039      	str	r1, [r7, #0]
    uint8_t buf[2*2];
    if (!eeprom_read(EEPROM_THRESH_ADDR, buf, sizeof(buf))) {
 800b528:	f107 030c 	add.w	r3, r7, #12
 800b52c:	2204      	movs	r2, #4
 800b52e:	4619      	mov	r1, r3
 800b530:	2001      	movs	r0, #1
 800b532:	f000 f979 	bl	800b828 <eeprom_read>
 800b536:	4603      	mov	r3, r0
 800b538:	f083 0301 	eor.w	r3, r3, #1
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <eeprom_read_thresholds+0x28>
        return false;
 800b542:	2300      	movs	r3, #0
 800b544:	e014      	b.n	800b570 <eeprom_read_thresholds+0x52>
    }
    // Desempaquetado little endian
    *low  = (uint16_t)buf[0] | ((uint16_t)buf[1] << 8);
 800b546:	7b3b      	ldrb	r3, [r7, #12]
 800b548:	b21a      	sxth	r2, r3
 800b54a:	7b7b      	ldrb	r3, [r7, #13]
 800b54c:	021b      	lsls	r3, r3, #8
 800b54e:	b21b      	sxth	r3, r3
 800b550:	4313      	orrs	r3, r2
 800b552:	b21b      	sxth	r3, r3
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	801a      	strh	r2, [r3, #0]
    *high = (uint16_t)buf[2] | ((uint16_t)buf[3] << 8);
 800b55a:	7bbb      	ldrb	r3, [r7, #14]
 800b55c:	b21a      	sxth	r2, r3
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	021b      	lsls	r3, r3, #8
 800b562:	b21b      	sxth	r3, r3
 800b564:	4313      	orrs	r3, r2
 800b566:	b21b      	sxth	r3, r3
 800b568:	b29a      	uxth	r2, r3
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	801a      	strh	r2, [r3, #0]
    return true;
 800b56e:	2301      	movs	r3, #1
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <eeprom_write_thresholds>:

// ─── Escribir nuevos thresholds ───────────────────────────────────────────
bool_t eeprom_write_thresholds(uint16_t low, uint16_t high)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	460a      	mov	r2, r1
 800b582:	80fb      	strh	r3, [r7, #6]
 800b584:	4613      	mov	r3, r2
 800b586:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[2*2];
    buf[0] = (uint8_t)(low & 0xFF);
 800b588:	88fb      	ldrh	r3, [r7, #6]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)(low >> 8);
 800b58e:	88fb      	ldrh	r3, [r7, #6]
 800b590:	0a1b      	lsrs	r3, r3, #8
 800b592:	b29b      	uxth	r3, r3
 800b594:	b2db      	uxtb	r3, r3
 800b596:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(high & 0xFF);
 800b598:	88bb      	ldrh	r3, [r7, #4]
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t)(high >> 8);
 800b59e:	88bb      	ldrh	r3, [r7, #4]
 800b5a0:	0a1b      	lsrs	r3, r3, #8
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	73fb      	strb	r3, [r7, #15]
    return eeprom_write(EEPROM_THRESH_ADDR, buf, sizeof(buf));
 800b5a8:	f107 030c 	add.w	r3, r7, #12
 800b5ac:	2204      	movs	r2, #4
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	2001      	movs	r0, #1
 800b5b2:	f000 f95b 	bl	800b86c <eeprom_write>
 800b5b6:	4603      	mov	r3, r0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <eeprom_log_high_event>:

// ─── Guardar nuevo evento de ruido alto ───────────────────────────────────
bool_t eeprom_log_high_event(const eeprom_log_entry_t *evt)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08c      	sub	sp, #48	; 0x30
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
    uint8_t head, count;

    // 1) Leer HEAD y COUNT actuales del buffer
    eeprom_read(EEPROM_LOG_HEAD_ADDR,  &head,  1);
 800b5c8:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	200f      	movs	r0, #15
 800b5d2:	f000 f929 	bl	800b828 <eeprom_read>
    eeprom_read(EEPROM_LOG_COUNT_ADDR, &count, 1);
 800b5d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5da:	2201      	movs	r2, #1
 800b5dc:	4619      	mov	r1, r3
 800b5de:	2010      	movs	r0, #16
 800b5e0:	f000 f922 	bl	800b828 <eeprom_read>

    // Validar límites por si están corruptos
    if (head  >= EEPROM_LOG_MAX_ENTRIES) head  = 0;
 800b5e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b5e8:	2b09      	cmp	r3, #9
 800b5ea:	d902      	bls.n	800b5f2 <eeprom_log_high_event+0x32>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    if (count >  EEPROM_LOG_MAX_ENTRIES) count = 0;
 800b5f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b5f6:	2b0a      	cmp	r3, #10
 800b5f8:	d902      	bls.n	800b600 <eeprom_log_high_event+0x40>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // 2) Si no está lleno, incrementamos count
    if (count < EEPROM_LOG_MAX_ENTRIES) {
 800b600:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b604:	2b09      	cmp	r3, #9
 800b606:	d805      	bhi.n	800b614 <eeprom_log_high_event+0x54>
        count++;
 800b608:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b60c:	3301      	adds	r3, #1
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // 3) Calculamos la dirección para guardar el evento
    uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
                       + (uint16_t)head * EEPROM_LOG_ENTRY_SIZE;
 800b614:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b618:	3304      	adds	r3, #4
    uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	00db      	lsls	r3, r3, #3
 800b61e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (!eeprom_write(slot_addr, (uint8_t*)evt, EEPROM_LOG_ENTRY_SIZE)) {
 800b620:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b622:	2208      	movs	r2, #8
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	4618      	mov	r0, r3
 800b628:	f000 f920 	bl	800b86c <eeprom_write>
 800b62c:	4603      	mov	r3, r0
 800b62e:	f083 0301 	eor.w	r3, r3, #1
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <eeprom_log_high_event+0x7c>
        return false;
 800b638:	2300      	movs	r3, #0
 800b63a:	e031      	b.n	800b6a0 <eeprom_log_high_event+0xe0>
    }

    // 4) Avanzar HEAD circularmente y guardar ambos punteros
    head = (head + 1) % EEPROM_LOG_MAX_ENTRIES;
 800b63c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	4b19      	ldr	r3, [pc, #100]	; (800b6a8 <eeprom_log_high_event+0xe8>)
 800b644:	fb83 1302 	smull	r1, r3, r3, r2
 800b648:	1099      	asrs	r1, r3, #2
 800b64a:	17d3      	asrs	r3, r2, #31
 800b64c:	1ac9      	subs	r1, r1, r3
 800b64e:	460b      	mov	r3, r1
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	440b      	add	r3, r1
 800b654:	005b      	lsls	r3, r3, #1
 800b656:	1ad1      	subs	r1, r2, r3
 800b658:	b2cb      	uxtb	r3, r1
 800b65a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    eeprom_write(EEPROM_LOG_HEAD_ADDR,  &head,  1);
 800b65e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800b662:	2201      	movs	r2, #1
 800b664:	4619      	mov	r1, r3
 800b666:	200f      	movs	r0, #15
 800b668:	f000 f900 	bl	800b86c <eeprom_write>
    eeprom_write(EEPROM_LOG_COUNT_ADDR, &count, 1);
 800b66c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b670:	2201      	movs	r2, #1
 800b672:	4619      	mov	r1, r3
 800b674:	2010      	movs	r0, #16
 800b676:	f000 f8f9 	bl	800b86c <eeprom_write>

    // Mensaje de debug
    debug_uart_print("LOG: wrote slot ");
 800b67a:	480c      	ldr	r0, [pc, #48]	; (800b6ac <eeprom_log_high_event+0xec>)
 800b67c:	f000 fa7e 	bl	800bb7c <debug_uart_print>
    char dbg[32];
    sprintf(dbg, "%u, count=%u\r\n", head, count);
 800b680:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b684:	461a      	mov	r2, r3
 800b686:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b68a:	f107 000c 	add.w	r0, r7, #12
 800b68e:	4908      	ldr	r1, [pc, #32]	; (800b6b0 <eeprom_log_high_event+0xf0>)
 800b690:	f001 fad8 	bl	800cc44 <siprintf>
    debug_uart_print(dbg);
 800b694:	f107 030c 	add.w	r3, r7, #12
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 fa6f 	bl	800bb7c <debug_uart_print>

    return true;
 800b69e:	2301      	movs	r3, #1
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3730      	adds	r7, #48	; 0x30
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	66666667 	.word	0x66666667
 800b6ac:	0800ea18 	.word	0x0800ea18
 800b6b0:	0800ea2c 	.word	0x0800ea2c

0800b6b4 <eeprom_read_log>:

// ─── Leer los últimos eventos registrados ────────────────────────────────
bool_t eeprom_read_log(eeprom_log_entry_t *entries,
                     uint8_t max_entries,
                     uint8_t *out_count)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	72fb      	strb	r3, [r7, #11]
    uint8_t head, count;

    // 1) Leer HEAD y COUNT actuales
    if (!eeprom_read(EEPROM_LOG_HEAD_ADDR,  &head,  1) ||
 800b6c2:	f107 0311 	add.w	r3, r7, #17
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	200f      	movs	r0, #15
 800b6cc:	f000 f8ac 	bl	800b828 <eeprom_read>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f083 0301 	eor.w	r3, r3, #1
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10c      	bne.n	800b6f6 <eeprom_read_log+0x42>
        !eeprom_read(EEPROM_LOG_COUNT_ADDR, &count, 1))
 800b6dc:	f107 0310 	add.w	r3, r7, #16
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	2010      	movs	r0, #16
 800b6e6:	f000 f89f 	bl	800b828 <eeprom_read>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	f083 0301 	eor.w	r3, r3, #1
 800b6f0:	b2db      	uxtb	r3, r3
    if (!eeprom_read(EEPROM_LOG_HEAD_ADDR,  &head,  1) ||
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <eeprom_read_log+0x46>
    {
        return false;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e054      	b.n	800b7a4 <eeprom_read_log+0xf0>
    }

    // Validaciones de límites
    if (head  >= EEPROM_LOG_MAX_ENTRIES) head  = 0;
 800b6fa:	7c7b      	ldrb	r3, [r7, #17]
 800b6fc:	2b09      	cmp	r3, #9
 800b6fe:	d901      	bls.n	800b704 <eeprom_read_log+0x50>
 800b700:	2300      	movs	r3, #0
 800b702:	747b      	strb	r3, [r7, #17]
    if (count >  EEPROM_LOG_MAX_ENTRIES) count = EEPROM_LOG_MAX_ENTRIES;
 800b704:	7c3b      	ldrb	r3, [r7, #16]
 800b706:	2b0a      	cmp	r3, #10
 800b708:	d901      	bls.n	800b70e <eeprom_read_log+0x5a>
 800b70a:	230a      	movs	r3, #10
 800b70c:	743b      	strb	r3, [r7, #16]
    if (count >  max_entries)             count = max_entries;
 800b70e:	7c3b      	ldrb	r3, [r7, #16]
 800b710:	7afa      	ldrb	r2, [r7, #11]
 800b712:	429a      	cmp	r2, r3
 800b714:	d201      	bcs.n	800b71a <eeprom_read_log+0x66>
 800b716:	7afb      	ldrb	r3, [r7, #11]
 800b718:	743b      	strb	r3, [r7, #16]

    // 2) Calculamos el índice del evento más antiguo
    uint8_t start = (head + EEPROM_LOG_MAX_ENTRIES - count)
 800b71a:	7c7b      	ldrb	r3, [r7, #17]
 800b71c:	330a      	adds	r3, #10
 800b71e:	7c3a      	ldrb	r2, [r7, #16]
 800b720:	1a9a      	subs	r2, r3, r2
                  % EEPROM_LOG_MAX_ENTRIES;
 800b722:	4b22      	ldr	r3, [pc, #136]	; (800b7ac <eeprom_read_log+0xf8>)
 800b724:	fb83 1302 	smull	r1, r3, r3, r2
 800b728:	1099      	asrs	r1, r3, #2
 800b72a:	17d3      	asrs	r3, r2, #31
 800b72c:	1ac9      	subs	r1, r1, r3
 800b72e:	460b      	mov	r3, r1
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	440b      	add	r3, r1
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	1ad1      	subs	r1, r2, r3
    uint8_t start = (head + EEPROM_LOG_MAX_ENTRIES - count)
 800b738:	460b      	mov	r3, r1
 800b73a:	75bb      	strb	r3, [r7, #22]

    // 3) Leemos los eventos en orden circular
    for (uint8_t i = 0; i < count; i++) {
 800b73c:	2300      	movs	r3, #0
 800b73e:	75fb      	strb	r3, [r7, #23]
 800b740:	e028      	b.n	800b794 <eeprom_read_log+0xe0>
        uint8_t idx = (start + i) % EEPROM_LOG_MAX_ENTRIES;
 800b742:	7dba      	ldrb	r2, [r7, #22]
 800b744:	7dfb      	ldrb	r3, [r7, #23]
 800b746:	441a      	add	r2, r3
 800b748:	4b18      	ldr	r3, [pc, #96]	; (800b7ac <eeprom_read_log+0xf8>)
 800b74a:	fb83 1302 	smull	r1, r3, r3, r2
 800b74e:	1099      	asrs	r1, r3, #2
 800b750:	17d3      	asrs	r3, r2, #31
 800b752:	1ac9      	subs	r1, r1, r3
 800b754:	460b      	mov	r3, r1
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	440b      	add	r3, r1
 800b75a:	005b      	lsls	r3, r3, #1
 800b75c:	1ad1      	subs	r1, r2, r3
 800b75e:	460b      	mov	r3, r1
 800b760:	757b      	strb	r3, [r7, #21]
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
                           + idx * EEPROM_LOG_ENTRY_SIZE;
 800b762:	7d7b      	ldrb	r3, [r7, #21]
 800b764:	3304      	adds	r3, #4
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
 800b766:	b29b      	uxth	r3, r3
 800b768:	00db      	lsls	r3, r3, #3
 800b76a:	827b      	strh	r3, [r7, #18]

        if (!eeprom_read(slot_addr,
                         (uint8_t*)&entries[i],
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	18d1      	adds	r1, r2, r3
        if (!eeprom_read(slot_addr,
 800b774:	8a7b      	ldrh	r3, [r7, #18]
 800b776:	2208      	movs	r2, #8
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 f855 	bl	800b828 <eeprom_read>
 800b77e:	4603      	mov	r3, r0
 800b780:	f083 0301 	eor.w	r3, r3, #1
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d001      	beq.n	800b78e <eeprom_read_log+0xda>
                         EEPROM_LOG_ENTRY_SIZE))
        {
            return false;
 800b78a:	2300      	movs	r3, #0
 800b78c:	e00a      	b.n	800b7a4 <eeprom_read_log+0xf0>
    for (uint8_t i = 0; i < count; i++) {
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
 800b790:	3301      	adds	r3, #1
 800b792:	75fb      	strb	r3, [r7, #23]
 800b794:	7c3b      	ldrb	r3, [r7, #16]
 800b796:	7dfa      	ldrb	r2, [r7, #23]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d3d2      	bcc.n	800b742 <eeprom_read_log+0x8e>
        }
    }

    *out_count = count;
 800b79c:	7c3a      	ldrb	r2, [r7, #16]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	701a      	strb	r2, [r3, #0]
    return true;
 800b7a2:	2301      	movs	r3, #1
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	66666667 	.word	0x66666667

0800b7b0 <eeprom_erase_log>:

// ─── Borrar todo el log de eventos ───────────────────────────────────────
void eeprom_erase_log(void)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
    uint8_t zero = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	72fb      	strb	r3, [r7, #11]

    // 1) Resetear HEAD y COUNT
    eeprom_write(EEPROM_LOG_HEAD_ADDR,  &zero, 1);
 800b7ba:	f107 030b 	add.w	r3, r7, #11
 800b7be:	2201      	movs	r2, #1
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	200f      	movs	r0, #15
 800b7c4:	f000 f852 	bl	800b86c <eeprom_write>
    eeprom_write(EEPROM_LOG_COUNT_ADDR, &zero, 1);
 800b7c8:	f107 030b 	add.w	r3, r7, #11
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	2010      	movs	r0, #16
 800b7d2:	f000 f84b 	bl	800b86c <eeprom_write>

    // 2) Limpiar todas las entradas (opcional, valor 0xFF = vacío)
    uint8_t empty_entry[EEPROM_LOG_ENTRY_SIZE];
    memset(empty_entry, 0xFF, EEPROM_LOG_ENTRY_SIZE);
 800b7d6:	463b      	mov	r3, r7
 800b7d8:	2208      	movs	r2, #8
 800b7da:	21ff      	movs	r1, #255	; 0xff
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f001 fac2 	bl	800cd66 <memset>

    for (uint8_t i = 0; i < EEPROM_LOG_MAX_ENTRIES; i++) {
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73fb      	strb	r3, [r7, #15]
 800b7e6:	e00d      	b.n	800b804 <eeprom_erase_log+0x54>
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
                           + (uint16_t)i * EEPROM_LOG_ENTRY_SIZE;
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ea:	3304      	adds	r3, #4
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	81bb      	strh	r3, [r7, #12]
        eeprom_write(slot_addr, empty_entry, EEPROM_LOG_ENTRY_SIZE);
 800b7f2:	4639      	mov	r1, r7
 800b7f4:	89bb      	ldrh	r3, [r7, #12]
 800b7f6:	2208      	movs	r2, #8
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f000 f837 	bl	800b86c <eeprom_write>
    for (uint8_t i = 0; i < EEPROM_LOG_MAX_ENTRIES; i++) {
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
 800b800:	3301      	adds	r3, #1
 800b802:	73fb      	strb	r3, [r7, #15]
 800b804:	7bfb      	ldrb	r3, [r7, #15]
 800b806:	2b09      	cmp	r3, #9
 800b808:	d9ee      	bls.n	800b7e8 <eeprom_erase_log+0x38>
    }
}
 800b80a:	bf00      	nop
 800b80c:	bf00      	nop
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <eeprom_restore_defaults>:

// ─── Restaurar los thresholds por defecto ────────────────────────────────
bool_t eeprom_restore_defaults(void)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
    return eeprom_write_thresholds(DEFAULT_THRESHOLD_LOW,
 800b818:	2114      	movs	r1, #20
 800b81a:	200a      	movs	r0, #10
 800b81c:	f7ff feac 	bl	800b578 <eeprom_write_thresholds>
 800b820:	4603      	mov	r3, r0
                                   DEFAULT_THRESHOLD_HIGH);
}
 800b822:	4618      	mov	r0, r3
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <eeprom_read>:

/**
 * Lee datos desde la EEPROM por I2C.
 */
bool_t eeprom_read(uint16_t mem_addr, uint8_t *data, uint16_t len)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af04      	add	r7, sp, #16
 800b82e:	4603      	mov	r3, r0
 800b830:	6039      	str	r1, [r7, #0]
 800b832:	80fb      	strh	r3, [r7, #6]
 800b834:	4613      	mov	r3, r2
 800b836:	80bb      	strh	r3, [r7, #4]
    return (HAL_I2C_Mem_Read(&hi2c1,
 800b838:	88fa      	ldrh	r2, [r7, #6]
 800b83a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b83e:	9302      	str	r3, [sp, #8]
 800b840:	88bb      	ldrh	r3, [r7, #4]
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	2310      	movs	r3, #16
 800b84a:	21a0      	movs	r1, #160	; 0xa0
 800b84c:	4806      	ldr	r0, [pc, #24]	; (800b868 <eeprom_read+0x40>)
 800b84e:	f7f7 f9b1 	bl	8002bb4 <HAL_I2C_Mem_Read>
 800b852:	4603      	mov	r3, r0
                             EEPROM_I2C_ADDR,
                             mem_addr,
                             I2C_MEMADD_SIZE_16BIT,
                             data,
                             len,
                             500) == HAL_OK);
 800b854:	2b00      	cmp	r3, #0
 800b856:	bf0c      	ite	eq
 800b858:	2301      	moveq	r3, #1
 800b85a:	2300      	movne	r3, #0
 800b85c:	b2db      	uxtb	r3, r3
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	2000022c 	.word	0x2000022c

0800b86c <eeprom_write>:
 * Escribe datos a la EEPROM por I2C.
 *
 * Luego de escribir, espera al menos 6 ms para completar el ciclo interno de escritura.
 */
bool_t eeprom_write(uint16_t mem_addr, const uint8_t *data, uint16_t len)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af04      	add	r7, sp, #16
 800b872:	4603      	mov	r3, r0
 800b874:	6039      	str	r1, [r7, #0]
 800b876:	80fb      	strh	r3, [r7, #6]
 800b878:	4613      	mov	r3, r2
 800b87a:	80bb      	strh	r3, [r7, #4]
    if (HAL_I2C_Mem_Write(&hi2c1,
 800b87c:	88fa      	ldrh	r2, [r7, #6]
 800b87e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b882:	9302      	str	r3, [sp, #8]
 800b884:	88bb      	ldrh	r3, [r7, #4]
 800b886:	9301      	str	r3, [sp, #4]
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	2310      	movs	r3, #16
 800b88e:	21a0      	movs	r1, #160	; 0xa0
 800b890:	4807      	ldr	r0, [pc, #28]	; (800b8b0 <eeprom_write+0x44>)
 800b892:	f7f7 f895 	bl	80029c0 <HAL_I2C_Mem_Write>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <eeprom_write+0x34>
                          I2C_MEMADD_SIZE_16BIT,
                          (uint8_t*)data,
                          len,
                          500) != HAL_OK)
    {
        return false;
 800b89c:	2300      	movs	r3, #0
 800b89e:	e003      	b.n	800b8a8 <eeprom_write+0x3c>
    }
    // Esperamos el ciclo de escritura interna de la EEPROM (~5 ms)
    HAL_Delay(6);
 800b8a0:	2006      	movs	r0, #6
 800b8a2:	f7f5 fc33 	bl	800110c <HAL_Delay>
    return true;
 800b8a6:	2301      	movs	r3, #1
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	2000022c 	.word	0x2000022c

0800b8b4 <port_rtc_init>:
/**
 * Inicializa el puerto del RTC. No se necesita lógica adicional ya que CubeMX
 * ya inicializa el periférico I2C.
 */
bool_t port_rtc_init(void)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	af00      	add	r7, sp, #0
    return true;
 800b8b8:	2301      	movs	r3, #1
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <port_rtc_read>:
 * Lee datos desde registros del DS1307.
 *
 * Utiliza lectura de memoria con dirección de 8 bits.
 */
bool_t port_rtc_read(uint8_t reg_addr, uint8_t *buf, uint8_t len)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af04      	add	r7, sp, #16
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	6039      	str	r1, [r7, #0]
 800b8ce:	71fb      	strb	r3, [r7, #7]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	71bb      	strb	r3, [r7, #6]
    return (HAL_I2C_Mem_Read(&hi2c1,
 800b8d4:	79fb      	ldrb	r3, [r7, #7]
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	79bb      	ldrb	r3, [r7, #6]
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	21c8      	movs	r1, #200	; 0xc8
 800b8de:	9102      	str	r1, [sp, #8]
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	21d0      	movs	r1, #208	; 0xd0
 800b8ea:	4806      	ldr	r0, [pc, #24]	; (800b904 <port_rtc_read+0x40>)
 800b8ec:	f7f7 f962 	bl	8002bb4 <HAL_I2C_Mem_Read>
 800b8f0:	4603      	mov	r3, r0
                             DS1307_ADDR,
                             reg_addr,
                             I2C_MEMADD_SIZE_8BIT,
                             buf,
                             len,
                             200) == HAL_OK);
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bf0c      	ite	eq
 800b8f6:	2301      	moveq	r3, #1
 800b8f8:	2300      	movne	r3, #0
 800b8fa:	b2db      	uxtb	r3, r3
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	2000022c 	.word	0x2000022c

0800b908 <port_rtc_write>:
 *
 * Aunque el DS1307 no requiere retardo posterior a la escritura,
 * se introduce una pequeña demora por seguridad.
 */
bool_t port_rtc_write(uint8_t reg_addr, const uint8_t *buf, uint8_t len)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af04      	add	r7, sp, #16
 800b90e:	4603      	mov	r3, r0
 800b910:	6039      	str	r1, [r7, #0]
 800b912:	71fb      	strb	r3, [r7, #7]
 800b914:	4613      	mov	r3, r2
 800b916:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Mem_Write(&hi2c1,
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	79bb      	ldrb	r3, [r7, #6]
 800b91e:	b29b      	uxth	r3, r3
 800b920:	21c8      	movs	r1, #200	; 0xc8
 800b922:	9102      	str	r1, [sp, #8]
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	2301      	movs	r3, #1
 800b92c:	21d0      	movs	r1, #208	; 0xd0
 800b92e:	4808      	ldr	r0, [pc, #32]	; (800b950 <port_rtc_write+0x48>)
 800b930:	f7f7 f846 	bl	80029c0 <HAL_I2C_Mem_Write>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <port_rtc_write+0x36>
                          reg_addr,
                          I2C_MEMADD_SIZE_8BIT,
                          (uint8_t*)buf,
                          len,
                          200) != HAL_OK) {
        return false;
 800b93a:	2300      	movs	r3, #0
 800b93c:	e003      	b.n	800b946 <port_rtc_write+0x3e>
    }

    // Breve retardo por seguridad (aunque no es estrictamente necesario para el DS1307)
    HAL_Delay(1);
 800b93e:	2001      	movs	r0, #1
 800b940:	f7f5 fbe4 	bl	800110c <HAL_Delay>
    return true;
 800b944:	2301      	movs	r3, #1
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	2000022c 	.word	0x2000022c

0800b954 <bcd2bin>:

// === Funciones auxiliares ===

// Convierte un número codificado en BCD (ej: 0x25 = 37) a binario decimal (37)
// BCD codifica los dígitos decimales por separado en nibbles: 0x25 = 0x2*10 + 0x5 = 25
static uint8_t bcd2bin(uint8_t v) {
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	71fb      	strb	r3, [r7, #7]
    return (v & 0x0F) + ((v >> 4) * 10);
 800b95e:	79fb      	ldrb	r3, [r7, #7]
 800b960:	f003 030f 	and.w	r3, r3, #15
 800b964:	b2da      	uxtb	r2, r3
 800b966:	79fb      	ldrb	r3, [r7, #7]
 800b968:	091b      	lsrs	r3, r3, #4
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	4619      	mov	r1, r3
 800b96e:	0089      	lsls	r1, r1, #2
 800b970:	440b      	add	r3, r1
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	b2db      	uxtb	r3, r3
 800b976:	4413      	add	r3, r2
 800b978:	b2db      	uxtb	r3, r3
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
	...

0800b988 <bin2bcd>:

// Convierte un número decimal (ej: 37) a formato BCD: 0x25
static uint8_t bin2bcd(uint8_t v) {
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	4603      	mov	r3, r0
 800b990:	71fb      	strb	r3, [r7, #7]
    return ((v / 10) << 4) | (v % 10);
 800b992:	79fb      	ldrb	r3, [r7, #7]
 800b994:	4a0d      	ldr	r2, [pc, #52]	; (800b9cc <bin2bcd+0x44>)
 800b996:	fba2 2303 	umull	r2, r3, r2, r3
 800b99a:	08db      	lsrs	r3, r3, #3
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	b258      	sxtb	r0, r3
 800b9a2:	79fa      	ldrb	r2, [r7, #7]
 800b9a4:	4b09      	ldr	r3, [pc, #36]	; (800b9cc <bin2bcd+0x44>)
 800b9a6:	fba3 1302 	umull	r1, r3, r3, r2
 800b9aa:	08d9      	lsrs	r1, r3, #3
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	440b      	add	r3, r1
 800b9b2:	005b      	lsls	r3, r3, #1
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	b25b      	sxtb	r3, r3
 800b9ba:	4303      	orrs	r3, r0
 800b9bc:	b25b      	sxtb	r3, r3
 800b9be:	b2db      	uxtb	r3, r3
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	cccccccd 	.word	0xcccccccd

0800b9d0 <rtc_init>:
static bool_t time_set = false;

// === Funciones públicas ===

bool_t rtc_init(void)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
    port_rtc_init();
 800b9d6:	f7ff ff6d 	bl	800b8b4 <port_rtc_init>

    uint8_t sec_reg;
    // Leemos el registro de segundos (reg 0x00), donde el bit 7 (CH) indica si el reloj está detenido
    if (!port_rtc_read(0x00, &sec_reg, 1)) {
 800b9da:	1dfb      	adds	r3, r7, #7
 800b9dc:	2201      	movs	r2, #1
 800b9de:	4619      	mov	r1, r3
 800b9e0:	2000      	movs	r0, #0
 800b9e2:	f7ff ff6f 	bl	800b8c4 <port_rtc_read>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f083 0301 	eor.w	r3, r3, #1
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <rtc_init+0x26>
        return false;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	e008      	b.n	800ba08 <rtc_init+0x38>
    }

    // Si el bit CH está en 1, el reloj no está corriendo → time_set = false
    time_set = !(sec_reg & 0x80);
 800b9f6:	79fb      	ldrb	r3, [r7, #7]
 800b9f8:	b25b      	sxtb	r3, r3
 800b9fa:	43db      	mvns	r3, r3
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	09db      	lsrs	r3, r3, #7
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	4b03      	ldr	r3, [pc, #12]	; (800ba10 <rtc_init+0x40>)
 800ba04:	701a      	strb	r2, [r3, #0]
    return true;
 800ba06:	2301      	movs	r3, #1
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	20000594 	.word	0x20000594

0800ba14 <rtc_get_datetime>:
{
    return time_set;
}

bool_t rtc_get_datetime(rtc_datetime_t *dt)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
    if (!time_set) return false;
 800ba1c:	4b2d      	ldr	r3, [pc, #180]	; (800bad4 <rtc_get_datetime+0xc0>)
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	f083 0301 	eor.w	r3, r3, #1
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <rtc_get_datetime+0x1a>
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	e04d      	b.n	800baca <rtc_get_datetime+0xb6>

    uint8_t buf[7];
    // Leemos los 7 registros de tiempo desde 0x00
    if (!port_rtc_read(0x00, buf, 7)) {
 800ba2e:	f107 0308 	add.w	r3, r7, #8
 800ba32:	2207      	movs	r2, #7
 800ba34:	4619      	mov	r1, r3
 800ba36:	2000      	movs	r0, #0
 800ba38:	f7ff ff44 	bl	800b8c4 <port_rtc_read>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f083 0301 	eor.w	r3, r3, #1
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <rtc_get_datetime+0x38>
        return false;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	e03e      	b.n	800baca <rtc_get_datetime+0xb6>
    }

    // Convertimos los campos BCD a binario
    dt->sec   = bcd2bin(buf[0] & 0x7F);  // bit 7 = CH, lo descartamos
 800ba4c:	7a3b      	ldrb	r3, [r7, #8]
 800ba4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7ff ff7d 	bl	800b954 <bcd2bin>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	701a      	strb	r2, [r3, #0]
    dt->min   = bcd2bin(buf[1]);
 800ba62:	7a7b      	ldrb	r3, [r7, #9]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff ff75 	bl	800b954 <bcd2bin>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	705a      	strb	r2, [r3, #1]
    dt->hour  = bcd2bin(buf[2] & 0x3F);  // 24h, ignoramos bit 6 AM/PM
 800ba72:	7abb      	ldrb	r3, [r7, #10]
 800ba74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff ff6a 	bl	800b954 <bcd2bin>
 800ba80:	4603      	mov	r3, r0
 800ba82:	461a      	mov	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	709a      	strb	r2, [r3, #2]
    dt->day   = bcd2bin(buf[3]);
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7ff ff62 	bl	800b954 <bcd2bin>
 800ba90:	4603      	mov	r3, r0
 800ba92:	461a      	mov	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	70da      	strb	r2, [r3, #3]
    dt->date  = bcd2bin(buf[4]);
 800ba98:	7b3b      	ldrb	r3, [r7, #12]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff ff5a 	bl	800b954 <bcd2bin>
 800baa0:	4603      	mov	r3, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	711a      	strb	r2, [r3, #4]
    dt->month = bcd2bin(buf[5]);
 800baa8:	7b7b      	ldrb	r3, [r7, #13]
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff ff52 	bl	800b954 <bcd2bin>
 800bab0:	4603      	mov	r3, r0
 800bab2:	461a      	mov	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	715a      	strb	r2, [r3, #5]
    dt->year  = bcd2bin(buf[6]);
 800bab8:	7bbb      	ldrb	r3, [r7, #14]
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff ff4a 	bl	800b954 <bcd2bin>
 800bac0:	4603      	mov	r3, r0
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	719a      	strb	r2, [r3, #6]
    return true;
 800bac8:	2301      	movs	r3, #1
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20000594 	.word	0x20000594

0800bad8 <rtc_set_datetime>:

bool_t rtc_set_datetime(const rtc_datetime_t *dt)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
    uint8_t buf[8];

    // Codificamos los campos a BCD
    buf[0] = bin2bcd(dt->sec) & 0x7F;  // bit 7 (CH) en 0 para arrancar reloj
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7ff ff4f 	bl	800b988 <bin2bcd>
 800baea:	4603      	mov	r3, r0
 800baec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	723b      	strb	r3, [r7, #8]
    buf[1] = bin2bcd(dt->min);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	785b      	ldrb	r3, [r3, #1]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7ff ff45 	bl	800b988 <bin2bcd>
 800bafe:	4603      	mov	r3, r0
 800bb00:	727b      	strb	r3, [r7, #9]
    buf[2] = bin2bcd(dt->hour);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	789b      	ldrb	r3, [r3, #2]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7ff ff3e 	bl	800b988 <bin2bcd>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	72bb      	strb	r3, [r7, #10]
    buf[3] = bin2bcd(dt->day);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	78db      	ldrb	r3, [r3, #3]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7ff ff37 	bl	800b988 <bin2bcd>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	72fb      	strb	r3, [r7, #11]
    buf[4] = bin2bcd(dt->date);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	791b      	ldrb	r3, [r3, #4]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff ff30 	bl	800b988 <bin2bcd>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	733b      	strb	r3, [r7, #12]
    buf[5] = bin2bcd(dt->month);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	795b      	ldrb	r3, [r3, #5]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7ff ff29 	bl	800b988 <bin2bcd>
 800bb36:	4603      	mov	r3, r0
 800bb38:	737b      	strb	r3, [r7, #13]
    buf[6] = bin2bcd(dt->year);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	799b      	ldrb	r3, [r3, #6]
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7ff ff22 	bl	800b988 <bin2bcd>
 800bb44:	4603      	mov	r3, r0
 800bb46:	73bb      	strb	r3, [r7, #14]

    // Escribimos los 7 registros en el RTC comenzando desde la dirección 0x00
    if (!port_rtc_write(0x00, buf, 7)) {
 800bb48:	f107 0308 	add.w	r3, r7, #8
 800bb4c:	2207      	movs	r2, #7
 800bb4e:	4619      	mov	r1, r3
 800bb50:	2000      	movs	r0, #0
 800bb52:	f7ff fed9 	bl	800b908 <port_rtc_write>
 800bb56:	4603      	mov	r3, r0
 800bb58:	f083 0301 	eor.w	r3, r3, #1
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d001      	beq.n	800bb66 <rtc_set_datetime+0x8e>
        return false;
 800bb62:	2300      	movs	r3, #0
 800bb64:	e003      	b.n	800bb6e <rtc_set_datetime+0x96>
    }

    time_set = true;
 800bb66:	4b04      	ldr	r3, [pc, #16]	; (800bb78 <rtc_set_datetime+0xa0>)
 800bb68:	2201      	movs	r2, #1
 800bb6a:	701a      	strb	r2, [r3, #0]
    return true;
 800bb6c:	2301      	movs	r3, #1
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20000594 	.word	0x20000594

0800bb7c <debug_uart_print>:
/**
 * Envía un string de texto a través de la UART de debug.
 *
 * Internamente convierte el string a un buffer de bytes y llama a la función binaria.
 */
bool_t debug_uart_print(const char* msg) {
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
    return debug_uart_send_raw((const uint8_t*)msg, strlen(msg));
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f7f4 fb4d 	bl	8000224 <strlen>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f805 	bl	800bb9e <debug_uart_send_raw>
 800bb94:	4603      	mov	r3, r0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <debug_uart_send_raw>:

/**
 * Envía datos crudos (bytes) a través de la UART de debug.
 */
bool_t debug_uart_send_raw(const uint8_t* data, size_t len) {
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
 800bba6:	6039      	str	r1, [r7, #0]
    return port_debug_uart_send(data, len);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f806 	bl	800bbbc <port_debug_uart_send>
 800bbb0:	4603      	mov	r3, r0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <port_debug_uart_send>:
/**
 * Envía datos por UART2 con timeout bloqueante.
 *
 * Esta función es bloqueante: espera hasta que se transmitan todos los datos.
 */
bool_t port_debug_uart_send(const uint8_t* data, size_t len) {
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY) == HAL_OK;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	f04f 33ff 	mov.w	r3, #4294967295
 800bbce:	6879      	ldr	r1, [r7, #4]
 800bbd0:	4806      	ldr	r0, [pc, #24]	; (800bbec <port_debug_uart_send+0x30>)
 800bbd2:	f7fa fd17 	bl	8006604 <HAL_UART_Transmit>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	bf0c      	ite	eq
 800bbdc:	2301      	moveq	r3, #1
 800bbde:	2300      	movne	r3, #0
 800bbe0:	b2db      	uxtb	r3, r3
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20000310 	.word	0x20000310

0800bbf0 <port_usb_cdc_transmit>:

/**
 * @brief Transmite datos por USB CDC utilizando la función de HAL.
 */
int port_usb_cdc_transmit(const uint8_t *buf, uint16_t len)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	807b      	strh	r3, [r7, #2]
    return CDC_Transmit_FS((uint8_t*)buf, len);
 800bbfc:	887b      	ldrh	r3, [r7, #2]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fa27 	bl	800c054 <CDC_Transmit_FS>
 800bc06:	4603      	mov	r3, r0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <usb_cdc_init>:
// Bandera que indica si hay un comando pendiente por procesar
static volatile bool command_pending = false;
// Buffer de comando recibido (terminado en null)
static char usb_cmd_buffer[USB_CMD_BUFFER_SIZE] = { 0 };

void usb_cdc_init(void) {
 800bc10:	b580      	push	{r7, lr}
 800bc12:	af00      	add	r7, sp, #0
    command_pending = false;
 800bc14:	4b04      	ldr	r3, [pc, #16]	; (800bc28 <usb_cdc_init+0x18>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	701a      	strb	r2, [r3, #0]
    memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800bc1a:	2280      	movs	r2, #128	; 0x80
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	4803      	ldr	r0, [pc, #12]	; (800bc2c <usb_cdc_init+0x1c>)
 800bc20:	f001 f8a1 	bl	800cd66 <memset>
}
 800bc24:	bf00      	nop
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	20000595 	.word	0x20000595
 800bc2c:	20000598 	.word	0x20000598

0800bc30 <usb_cdc_receiveCallback>:

void usb_cdc_receiveCallback(uint8_t *Buf, uint32_t Len) {
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
    debug_uart_print("usb_cdc_receiveCallback()\r\n");
 800bc3a:	481e      	ldr	r0, [pc, #120]	; (800bcb4 <usb_cdc_receiveCallback+0x84>)
 800bc3c:	f7ff ff9e 	bl	800bb7c <debug_uart_print>
    debug_uart_print((char*) Buf);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7ff ff9b 	bl	800bb7c <debug_uart_print>
    debug_uart_print("\r\n");
 800bc46:	481c      	ldr	r0, [pc, #112]	; (800bcb8 <usb_cdc_receiveCallback+0x88>)
 800bc48:	f7ff ff98 	bl	800bb7c <debug_uart_print>

    // Elimina caracteres de nueva línea o retorno de carro al final
    while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800bc4c:	e002      	b.n	800bc54 <usb_cdc_receiveCallback+0x24>
        Len--;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	603b      	str	r3, [r7, #0]
    while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00d      	beq.n	800bc76 <usb_cdc_receiveCallback+0x46>
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	4413      	add	r3, r2
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	2b0d      	cmp	r3, #13
 800bc66:	d0f2      	beq.n	800bc4e <usb_cdc_receiveCallback+0x1e>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	4413      	add	r3, r2
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	2b0a      	cmp	r3, #10
 800bc74:	d0eb      	beq.n	800bc4e <usb_cdc_receiveCallback+0x1e>
    }

    // Si no hay otro comando pendiente y cabe en el buffer, lo copiamos
    if (!command_pending && Len < USB_CMD_BUFFER_SIZE) {
 800bc76:	4b11      	ldr	r3, [pc, #68]	; (800bcbc <usb_cdc_receiveCallback+0x8c>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	f083 0301 	eor.w	r3, r3, #1
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d011      	beq.n	800bcaa <usb_cdc_receiveCallback+0x7a>
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	2b7f      	cmp	r3, #127	; 0x7f
 800bc8a:	d80e      	bhi.n	800bcaa <usb_cdc_receiveCallback+0x7a>
        memcpy(usb_cmd_buffer, Buf, Len);
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	480b      	ldr	r0, [pc, #44]	; (800bcc0 <usb_cdc_receiveCallback+0x90>)
 800bc92:	f001 f8f6 	bl	800ce82 <memcpy>

        // Garantiza que el buffer quede null-terminado para usarlo como string
        usb_cmd_buffer[Len < USB_CMD_BUFFER_SIZE ? Len : USB_CMD_BUFFER_SIZE - 1] = '\0';
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b7f      	cmp	r3, #127	; 0x7f
 800bc9a:	bf28      	it	cs
 800bc9c:	237f      	movcs	r3, #127	; 0x7f
 800bc9e:	4a08      	ldr	r2, [pc, #32]	; (800bcc0 <usb_cdc_receiveCallback+0x90>)
 800bca0:	2100      	movs	r1, #0
 800bca2:	54d1      	strb	r1, [r2, r3]

        command_pending = true;
 800bca4:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <usb_cdc_receiveCallback+0x8c>)
 800bca6:	2201      	movs	r2, #1
 800bca8:	701a      	strb	r2, [r3, #0]
    }
    // Si ya había un comando pendiente, se descarta la nueva entrada
}
 800bcaa:	bf00      	nop
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop
 800bcb4:	0800ea3c 	.word	0x0800ea3c
 800bcb8:	0800ea58 	.word	0x0800ea58
 800bcbc:	20000595 	.word	0x20000595
 800bcc0:	20000598 	.word	0x20000598

0800bcc4 <usb_cdc_isCommandPending>:

bool usb_cdc_isCommandPending(void) {
 800bcc4:	b480      	push	{r7}
 800bcc6:	af00      	add	r7, sp, #0
    return command_pending;
 800bcc8:	4b03      	ldr	r3, [pc, #12]	; (800bcd8 <usb_cdc_isCommandPending+0x14>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	b2db      	uxtb	r3, r3
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr
 800bcd8:	20000595 	.word	0x20000595

0800bcdc <usb_cdc_getCommand>:

const char* usb_cdc_getCommand(void) {
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0
    return usb_cmd_buffer;
 800bce0:	4b02      	ldr	r3, [pc, #8]	; (800bcec <usb_cdc_getCommand+0x10>)
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	20000598 	.word	0x20000598

0800bcf0 <usb_cdc_clearCommand>:

void usb_cdc_clearCommand(void) {
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	af00      	add	r7, sp, #0
    command_pending = false;
 800bcf4:	4b04      	ldr	r3, [pc, #16]	; (800bd08 <usb_cdc_clearCommand+0x18>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	701a      	strb	r2, [r3, #0]
    memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800bcfa:	2280      	movs	r2, #128	; 0x80
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	4803      	ldr	r0, [pc, #12]	; (800bd0c <usb_cdc_clearCommand+0x1c>)
 800bd00:	f001 f831 	bl	800cd66 <memset>
}
 800bd04:	bf00      	nop
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20000595 	.word	0x20000595
 800bd0c:	20000598 	.word	0x20000598

0800bd10 <usb_cdc_sendString>:

uint8_t usb_cdc_sendString(const char *str) {
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
    uint16_t len = (uint16_t) strlen(str);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f7f4 fa83 	bl	8000224 <strlen>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	81fb      	strh	r3, [r7, #14]
    return port_usb_cdc_transmit((const uint8_t*) str, len);
 800bd22:	89fb      	ldrh	r3, [r7, #14]
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f7ff ff62 	bl	800bbf0 <port_usb_cdc_transmit>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	b2db      	uxtb	r3, r3
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <usb_commands_init>:
#include "debug_uart.h"
#include "rtc.h"
#include "usb_cdc.h"
#include "usb_commands.h"

void usb_commands_init(void) {
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
    // Asegura que el driver de CDC esté inicializado
    usb_cdc_init();
 800bd3c:	f7ff ff68 	bl	800bc10 <usb_cdc_init>
}
 800bd40:	bf00      	nop
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <usb_commands_pending>:

bool_t usb_commands_pending(void) {
 800bd44:	b580      	push	{r7, lr}
 800bd46:	af00      	add	r7, sp, #0
    return usb_cdc_isCommandPending();
 800bd48:	f7ff ffbc 	bl	800bcc4 <usb_cdc_isCommandPending>
 800bd4c:	4603      	mov	r3, r0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	bd80      	pop	{r7, pc}
	...

0800bd54 <parse_settime_args>:

// Parsea los argumentos del comando 'settime'
static bool_t parse_settime_args(const char *args, rtc_datetime_t *dt) {
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b08e      	sub	sp, #56	; 0x38
 800bd58:	af04      	add	r7, sp, #16
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
    unsigned int yy, MM, DD, hh, mm, ss;
    int matched = sscanf(args, "%u %u %u %u %u %u", &yy, &MM, &DD, &hh, &mm, &ss);
 800bd5e:	f107 011c 	add.w	r1, r7, #28
 800bd62:	f107 0220 	add.w	r2, r7, #32
 800bd66:	f107 030c 	add.w	r3, r7, #12
 800bd6a:	9303      	str	r3, [sp, #12]
 800bd6c:	f107 0310 	add.w	r3, r7, #16
 800bd70:	9302      	str	r3, [sp, #8]
 800bd72:	f107 0314 	add.w	r3, r7, #20
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	f107 0318 	add.w	r3, r7, #24
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	460b      	mov	r3, r1
 800bd80:	4913      	ldr	r1, [pc, #76]	; (800bdd0 <parse_settime_args+0x7c>)
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 ff7e 	bl	800cc84 <siscanf>
 800bd88:	6278      	str	r0, [r7, #36]	; 0x24
    if (matched != 6) {
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	2b06      	cmp	r3, #6
 800bd8e:	d001      	beq.n	800bd94 <parse_settime_args+0x40>
        return false;
 800bd90:	2300      	movs	r3, #0
 800bd92:	e018      	b.n	800bdc6 <parse_settime_args+0x72>
    }
    dt->year   = (uint8_t)yy;
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	b2da      	uxtb	r2, r3
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	719a      	strb	r2, [r3, #6]
    dt->month  = (uint8_t)MM;
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	715a      	strb	r2, [r3, #5]
    dt->date   = (uint8_t)DD;
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	711a      	strb	r2, [r3, #4]
    dt->hour   = (uint8_t)hh;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	709a      	strb	r2, [r3, #2]
    dt->min    = (uint8_t)mm;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	705a      	strb	r2, [r3, #1]
    dt->sec    = (uint8_t)ss;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	701a      	strb	r2, [r3, #0]
    return true;
 800bdc4:	2301      	movs	r3, #1
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3728      	adds	r7, #40	; 0x28
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	0800ea5c 	.word	0x0800ea5c

0800bdd4 <usb_commands_get>:

usb_command_t usb_commands_get(pending_action_t *out) {
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
    const char *cmd = usb_cdc_getCommand();
 800bddc:	f7ff ff7e 	bl	800bcdc <usb_cdc_getCommand>
 800bde0:	60f8      	str	r0, [r7, #12]

    if (strcmp(cmd, USB_CMD_GET_THRESH) == 0) {
 800bde2:	492b      	ldr	r1, [pc, #172]	; (800be90 <usb_commands_get+0xbc>)
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7f4 fa13 	bl	8000210 <strcmp>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d103      	bne.n	800bdf8 <usb_commands_get+0x24>
        out->cmd = CMD_GET_THRESH;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	701a      	strb	r2, [r3, #0]
 800bdf6:	e043      	b.n	800be80 <usb_commands_get+0xac>
    } else if (sscanf(cmd, USB_CMD_SET_THRESH " %hu %hu", &out->low, &out->high) == 2) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	1c9a      	adds	r2, r3, #2
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3304      	adds	r3, #4
 800be00:	4924      	ldr	r1, [pc, #144]	; (800be94 <usb_commands_get+0xc0>)
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f000 ff3e 	bl	800cc84 <siscanf>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d103      	bne.n	800be16 <usb_commands_get+0x42>
        out->cmd = CMD_SET_THRESH;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2201      	movs	r2, #1
 800be12:	701a      	strb	r2, [r3, #0]
 800be14:	e034      	b.n	800be80 <usb_commands_get+0xac>
    } else if (strcmp(cmd, USB_CMD_GET_TIME) == 0) {
 800be16:	4920      	ldr	r1, [pc, #128]	; (800be98 <usb_commands_get+0xc4>)
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f7f4 f9f9 	bl	8000210 <strcmp>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <usb_commands_get+0x58>
        out->cmd = CMD_GET_TIME;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2202      	movs	r2, #2
 800be28:	701a      	strb	r2, [r3, #0]
 800be2a:	e029      	b.n	800be80 <usb_commands_get+0xac>
    } else if (strncmp(cmd, USB_CMD_SET_TIME " ", strlen(USB_CMD_SET_TIME) + 1) == 0) {
 800be2c:	2208      	movs	r2, #8
 800be2e:	491b      	ldr	r1, [pc, #108]	; (800be9c <usb_commands_get+0xc8>)
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f000 ffa0 	bl	800cd76 <strncmp>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d113      	bne.n	800be64 <usb_commands_get+0x90>
        const char *args = cmd + strlen(USB_CMD_SET_TIME) + 1;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	3308      	adds	r3, #8
 800be40:	60bb      	str	r3, [r7, #8]
        if (parse_settime_args(args, &out->dt)) {
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	3306      	adds	r3, #6
 800be46:	4619      	mov	r1, r3
 800be48:	68b8      	ldr	r0, [r7, #8]
 800be4a:	f7ff ff83 	bl	800bd54 <parse_settime_args>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d003      	beq.n	800be5c <usb_commands_get+0x88>
            out->cmd = CMD_SET_TIME;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2203      	movs	r2, #3
 800be58:	701a      	strb	r2, [r3, #0]
 800be5a:	e011      	b.n	800be80 <usb_commands_get+0xac>
        } else {
            out->cmd = CMD_HELP;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2205      	movs	r2, #5
 800be60:	701a      	strb	r2, [r3, #0]
 800be62:	e00d      	b.n	800be80 <usb_commands_get+0xac>
        }
    } else if (strcmp(cmd, USB_CMD_GET_LOG) == 0) {
 800be64:	490e      	ldr	r1, [pc, #56]	; (800bea0 <usb_commands_get+0xcc>)
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7f4 f9d2 	bl	8000210 <strcmp>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d103      	bne.n	800be7a <usb_commands_get+0xa6>
        out->cmd = CMD_GET_LOG;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2204      	movs	r2, #4
 800be76:	701a      	strb	r2, [r3, #0]
 800be78:	e002      	b.n	800be80 <usb_commands_get+0xac>
    } else {
        out->cmd = CMD_HELP;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2205      	movs	r2, #5
 800be7e:	701a      	strb	r2, [r3, #0]
    }

    usb_cdc_clearCommand();
 800be80:	f7ff ff36 	bl	800bcf0 <usb_cdc_clearCommand>
    return out->cmd;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	781b      	ldrb	r3, [r3, #0]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	0800ea70 	.word	0x0800ea70
 800be94:	0800ea78 	.word	0x0800ea78
 800be98:	0800ea88 	.word	0x0800ea88
 800be9c:	0800ea90 	.word	0x0800ea90
 800bea0:	0800ea9c 	.word	0x0800ea9c

0800bea4 <usb_commands_print_help>:

void usb_commands_print_help(void) {
 800bea4:	b580      	push	{r7, lr}
 800bea6:	af00      	add	r7, sp, #0
    usb_cdc_sendString(
 800bea8:	4802      	ldr	r0, [pc, #8]	; (800beb4 <usb_commands_print_help+0x10>)
 800beaa:	f7ff ff31 	bl	800bd10 <usb_cdc_sendString>
        "  gettime                - Leer fecha/hora del RTC\r\n"
        "  settime YY MM DD h m s - Establecer fecha/hora RTC\r\n"
        "  getlog                 - Mostrar eventos registrados\r\n"
        "  help                   - Mostrar esta ayuda\r\n"
    );
}
 800beae:	bf00      	nop
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	0800eaa4 	.word	0x0800eaa4

0800beb8 <project_main>:
// === Public variable definitions ================================================================================= //
// === Private variable definitions ================================================================================ //
// === Private function implementation ============================================================================= //
// === Public function implementation ============================================================================== //

void project_main() { appUpdate(); }
 800beb8:	b580      	push	{r7, lr}
 800beba:	af00      	add	r7, sp, #0
 800bebc:	f7ff f938 	bl	800b130 <appUpdate>
 800bec0:	bf00      	nop
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bec8:	2200      	movs	r2, #0
 800beca:	4912      	ldr	r1, [pc, #72]	; (800bf14 <MX_USB_DEVICE_Init+0x50>)
 800becc:	4812      	ldr	r0, [pc, #72]	; (800bf18 <MX_USB_DEVICE_Init+0x54>)
 800bece:	f7fd fb5d 	bl	800958c <USBD_Init>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d001      	beq.n	800bedc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bed8:	f7f4 fdca 	bl	8000a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bedc:	490f      	ldr	r1, [pc, #60]	; (800bf1c <MX_USB_DEVICE_Init+0x58>)
 800bede:	480e      	ldr	r0, [pc, #56]	; (800bf18 <MX_USB_DEVICE_Init+0x54>)
 800bee0:	f7fd fb84 	bl	80095ec <USBD_RegisterClass>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800beea:	f7f4 fdc1 	bl	8000a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800beee:	490c      	ldr	r1, [pc, #48]	; (800bf20 <MX_USB_DEVICE_Init+0x5c>)
 800bef0:	4809      	ldr	r0, [pc, #36]	; (800bf18 <MX_USB_DEVICE_Init+0x54>)
 800bef2:	f7fd fa7b 	bl	80093ec <USBD_CDC_RegisterInterface>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d001      	beq.n	800bf00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800befc:	f7f4 fdb8 	bl	8000a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf00:	4805      	ldr	r0, [pc, #20]	; (800bf18 <MX_USB_DEVICE_Init+0x54>)
 800bf02:	f7fd fba9 	bl	8009658 <USBD_Start>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf0c:	f7f4 fdb0 	bl	8000a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf10:	bf00      	nop
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	200000ac 	.word	0x200000ac
 800bf18:	20000618 	.word	0x20000618
 800bf1c:	20000018 	.word	0x20000018
 800bf20:	20000098 	.word	0x20000098

0800bf24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4905      	ldr	r1, [pc, #20]	; (800bf40 <CDC_Init_FS+0x1c>)
 800bf2c:	4805      	ldr	r0, [pc, #20]	; (800bf44 <CDC_Init_FS+0x20>)
 800bf2e:	f7fd fa77 	bl	8009420 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf32:	4905      	ldr	r1, [pc, #20]	; (800bf48 <CDC_Init_FS+0x24>)
 800bf34:	4803      	ldr	r0, [pc, #12]	; (800bf44 <CDC_Init_FS+0x20>)
 800bf36:	f7fd fa95 	bl	8009464 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	200010f4 	.word	0x200010f4
 800bf44:	20000618 	.word	0x20000618
 800bf48:	200008f4 	.word	0x200008f4

0800bf4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	6039      	str	r1, [r7, #0]
 800bf66:	71fb      	strb	r3, [r7, #7]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bf6c:	79fb      	ldrb	r3, [r7, #7]
 800bf6e:	2b23      	cmp	r3, #35	; 0x23
 800bf70:	d84a      	bhi.n	800c008 <CDC_Control_FS+0xac>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <CDC_Control_FS+0x1c>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800c009 	.word	0x0800c009
 800bf7c:	0800c009 	.word	0x0800c009
 800bf80:	0800c009 	.word	0x0800c009
 800bf84:	0800c009 	.word	0x0800c009
 800bf88:	0800c009 	.word	0x0800c009
 800bf8c:	0800c009 	.word	0x0800c009
 800bf90:	0800c009 	.word	0x0800c009
 800bf94:	0800c009 	.word	0x0800c009
 800bf98:	0800c009 	.word	0x0800c009
 800bf9c:	0800c009 	.word	0x0800c009
 800bfa0:	0800c009 	.word	0x0800c009
 800bfa4:	0800c009 	.word	0x0800c009
 800bfa8:	0800c009 	.word	0x0800c009
 800bfac:	0800c009 	.word	0x0800c009
 800bfb0:	0800c009 	.word	0x0800c009
 800bfb4:	0800c009 	.word	0x0800c009
 800bfb8:	0800c009 	.word	0x0800c009
 800bfbc:	0800c009 	.word	0x0800c009
 800bfc0:	0800c009 	.word	0x0800c009
 800bfc4:	0800c009 	.word	0x0800c009
 800bfc8:	0800c009 	.word	0x0800c009
 800bfcc:	0800c009 	.word	0x0800c009
 800bfd0:	0800c009 	.word	0x0800c009
 800bfd4:	0800c009 	.word	0x0800c009
 800bfd8:	0800c009 	.word	0x0800c009
 800bfdc:	0800c009 	.word	0x0800c009
 800bfe0:	0800c009 	.word	0x0800c009
 800bfe4:	0800c009 	.word	0x0800c009
 800bfe8:	0800c009 	.word	0x0800c009
 800bfec:	0800c009 	.word	0x0800c009
 800bff0:	0800c009 	.word	0x0800c009
 800bff4:	0800c009 	.word	0x0800c009
 800bff8:	0800c009 	.word	0x0800c009
 800bffc:	0800c009 	.word	0x0800c009
 800c000:	0800c009 	.word	0x0800c009
 800c004:	0800c009 	.word	0x0800c009
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c008:	bf00      	nop
  }

  return (USBD_OK);
 800c00a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > 0) {
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d005      	beq.n	800c036 <CDC_Receive_FS+0x1e>
	    usb_cdc_receiveCallback(Buf, *Len);
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff fdfd 	bl	800bc30 <usb_cdc_receiveCallback>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	4805      	ldr	r0, [pc, #20]	; (800c050 <CDC_Receive_FS+0x38>)
 800c03a:	f7fd fa13 	bl	8009464 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c03e:	4804      	ldr	r0, [pc, #16]	; (800c050 <CDC_Receive_FS+0x38>)
 800c040:	f7fd fa6e 	bl	8009520 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c044:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c046:	4618      	mov	r0, r3
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	20000618 	.word	0x20000618

0800c054 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c060:	2300      	movs	r3, #0
 800c062:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c064:	4b0d      	ldr	r3, [pc, #52]	; (800c09c <CDC_Transmit_FS+0x48>)
 800c066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c06a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c076:	2301      	movs	r3, #1
 800c078:	e00b      	b.n	800c092 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c07a:	887b      	ldrh	r3, [r7, #2]
 800c07c:	461a      	mov	r2, r3
 800c07e:	6879      	ldr	r1, [r7, #4]
 800c080:	4806      	ldr	r0, [pc, #24]	; (800c09c <CDC_Transmit_FS+0x48>)
 800c082:	f7fd f9cd 	bl	8009420 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c086:	4805      	ldr	r0, [pc, #20]	; (800c09c <CDC_Transmit_FS+0x48>)
 800c088:	f7fd fa0a 	bl	80094a0 <USBD_CDC_TransmitPacket>
 800c08c:	4603      	mov	r3, r0
 800c08e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c090:	7bfb      	ldrb	r3, [r7, #15]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	20000618 	.word	0x20000618

0800c0a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b087      	sub	sp, #28
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c0b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	371c      	adds	r7, #28
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	6039      	str	r1, [r7, #0]
 800c0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	2212      	movs	r2, #18
 800c0d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c0d6:	4b03      	ldr	r3, [pc, #12]	; (800c0e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	200000cc 	.word	0x200000cc

0800c0e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	6039      	str	r1, [r7, #0]
 800c0f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2204      	movs	r2, #4
 800c0f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c0fa:	4b03      	ldr	r3, [pc, #12]	; (800c108 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	200000ec 	.word	0x200000ec

0800c10c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	4603      	mov	r3, r0
 800c114:	6039      	str	r1, [r7, #0]
 800c116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c118:	79fb      	ldrb	r3, [r7, #7]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d105      	bne.n	800c12a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	4907      	ldr	r1, [pc, #28]	; (800c140 <USBD_FS_ProductStrDescriptor+0x34>)
 800c122:	4808      	ldr	r0, [pc, #32]	; (800c144 <USBD_FS_ProductStrDescriptor+0x38>)
 800c124:	f7fe fc74 	bl	800aa10 <USBD_GetString>
 800c128:	e004      	b.n	800c134 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	4904      	ldr	r1, [pc, #16]	; (800c140 <USBD_FS_ProductStrDescriptor+0x34>)
 800c12e:	4805      	ldr	r0, [pc, #20]	; (800c144 <USBD_FS_ProductStrDescriptor+0x38>)
 800c130:	f7fe fc6e 	bl	800aa10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c134:	4b02      	ldr	r3, [pc, #8]	; (800c140 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	200018f4 	.word	0x200018f4
 800c144:	0800ebfc 	.word	0x0800ebfc

0800c148 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	4603      	mov	r3, r0
 800c150:	6039      	str	r1, [r7, #0]
 800c152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	4904      	ldr	r1, [pc, #16]	; (800c168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c158:	4804      	ldr	r0, [pc, #16]	; (800c16c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c15a:	f7fe fc59 	bl	800aa10 <USBD_GetString>
  return USBD_StrDesc;
 800c15e:	4b02      	ldr	r3, [pc, #8]	; (800c168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	200018f4 	.word	0x200018f4
 800c16c:	0800ec14 	.word	0x0800ec14

0800c170 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	4603      	mov	r3, r0
 800c178:	6039      	str	r1, [r7, #0]
 800c17a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	221a      	movs	r2, #26
 800c180:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c182:	f000 f855 	bl	800c230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c186:	4b02      	ldr	r3, [pc, #8]	; (800c190 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	200000f0 	.word	0x200000f0

0800c194 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	4603      	mov	r3, r0
 800c19c:	6039      	str	r1, [r7, #0]
 800c19e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d105      	bne.n	800c1b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	4907      	ldr	r1, [pc, #28]	; (800c1c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1aa:	4808      	ldr	r0, [pc, #32]	; (800c1cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1ac:	f7fe fc30 	bl	800aa10 <USBD_GetString>
 800c1b0:	e004      	b.n	800c1bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	4904      	ldr	r1, [pc, #16]	; (800c1c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1b6:	4805      	ldr	r0, [pc, #20]	; (800c1cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1b8:	f7fe fc2a 	bl	800aa10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1bc:	4b02      	ldr	r3, [pc, #8]	; (800c1c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	200018f4 	.word	0x200018f4
 800c1cc:	0800ec28 	.word	0x0800ec28

0800c1d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	6039      	str	r1, [r7, #0]
 800c1da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1dc:	79fb      	ldrb	r3, [r7, #7]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d105      	bne.n	800c1ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1e2:	683a      	ldr	r2, [r7, #0]
 800c1e4:	4907      	ldr	r1, [pc, #28]	; (800c204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1e6:	4808      	ldr	r0, [pc, #32]	; (800c208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1e8:	f7fe fc12 	bl	800aa10 <USBD_GetString>
 800c1ec:	e004      	b.n	800c1f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	4904      	ldr	r1, [pc, #16]	; (800c204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c1f2:	4805      	ldr	r0, [pc, #20]	; (800c208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c1f4:	f7fe fc0c 	bl	800aa10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1f8:	4b02      	ldr	r3, [pc, #8]	; (800c204 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	200018f4 	.word	0x200018f4
 800c208:	0800ec34 	.word	0x0800ec34

0800c20c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	6039      	str	r1, [r7, #0]
 800c216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	220c      	movs	r2, #12
 800c21c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c21e:	4b03      	ldr	r3, [pc, #12]	; (800c22c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c220:	4618      	mov	r0, r3
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	200000e0 	.word	0x200000e0

0800c230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c236:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <Get_SerialNum+0x44>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c23c:	4b0e      	ldr	r3, [pc, #56]	; (800c278 <Get_SerialNum+0x48>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c242:	4b0e      	ldr	r3, [pc, #56]	; (800c27c <Get_SerialNum+0x4c>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4413      	add	r3, r2
 800c24e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d009      	beq.n	800c26a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c256:	2208      	movs	r2, #8
 800c258:	4909      	ldr	r1, [pc, #36]	; (800c280 <Get_SerialNum+0x50>)
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f000 f814 	bl	800c288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c260:	2204      	movs	r2, #4
 800c262:	4908      	ldr	r1, [pc, #32]	; (800c284 <Get_SerialNum+0x54>)
 800c264:	68b8      	ldr	r0, [r7, #8]
 800c266:	f000 f80f 	bl	800c288 <IntToUnicode>
  }
}
 800c26a:	bf00      	nop
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	1fff7a10 	.word	0x1fff7a10
 800c278:	1fff7a14 	.word	0x1fff7a14
 800c27c:	1fff7a18 	.word	0x1fff7a18
 800c280:	200000f2 	.word	0x200000f2
 800c284:	20000102 	.word	0x20000102

0800c288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c288:	b480      	push	{r7}
 800c28a:	b087      	sub	sp, #28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	4613      	mov	r3, r2
 800c294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c296:	2300      	movs	r3, #0
 800c298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c29a:	2300      	movs	r3, #0
 800c29c:	75fb      	strb	r3, [r7, #23]
 800c29e:	e027      	b.n	800c2f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	0f1b      	lsrs	r3, r3, #28
 800c2a4:	2b09      	cmp	r3, #9
 800c2a6:	d80b      	bhi.n	800c2c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	0f1b      	lsrs	r3, r3, #28
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	7dfb      	ldrb	r3, [r7, #23]
 800c2b0:	005b      	lsls	r3, r3, #1
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	440b      	add	r3, r1
 800c2b8:	3230      	adds	r2, #48	; 0x30
 800c2ba:	b2d2      	uxtb	r2, r2
 800c2bc:	701a      	strb	r2, [r3, #0]
 800c2be:	e00a      	b.n	800c2d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	0f1b      	lsrs	r3, r3, #28
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	7dfb      	ldrb	r3, [r7, #23]
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	440b      	add	r3, r1
 800c2d0:	3237      	adds	r2, #55	; 0x37
 800c2d2:	b2d2      	uxtb	r2, r2
 800c2d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	011b      	lsls	r3, r3, #4
 800c2da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
 800c2de:	005b      	lsls	r3, r3, #1
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	75fb      	strb	r3, [r7, #23]
 800c2f0:	7dfa      	ldrb	r2, [r7, #23]
 800c2f2:	79fb      	ldrb	r3, [r7, #7]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d3d3      	bcc.n	800c2a0 <IntToUnicode+0x18>
  }
}
 800c2f8:	bf00      	nop
 800c2fa:	bf00      	nop
 800c2fc:	371c      	adds	r7, #28
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
	...

0800c308 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b0a0      	sub	sp, #128	; 0x80
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c310:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c314:	2200      	movs	r2, #0
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	605a      	str	r2, [r3, #4]
 800c31a:	609a      	str	r2, [r3, #8]
 800c31c:	60da      	str	r2, [r3, #12]
 800c31e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c320:	f107 0310 	add.w	r3, r7, #16
 800c324:	225c      	movs	r2, #92	; 0x5c
 800c326:	2100      	movs	r1, #0
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 fd1c 	bl	800cd66 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c336:	d149      	bne.n	800c3cc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c33c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c33e:	2300      	movs	r3, #0
 800c340:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c342:	f107 0310 	add.w	r3, r7, #16
 800c346:	4618      	mov	r0, r3
 800c348:	f7f8 fdd2 	bl	8004ef0 <HAL_RCCEx_PeriphCLKConfig>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c352:	f7f4 fb8d 	bl	8000a70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c356:	2300      	movs	r3, #0
 800c358:	60fb      	str	r3, [r7, #12]
 800c35a:	4b1e      	ldr	r3, [pc, #120]	; (800c3d4 <HAL_PCD_MspInit+0xcc>)
 800c35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c35e:	4a1d      	ldr	r2, [pc, #116]	; (800c3d4 <HAL_PCD_MspInit+0xcc>)
 800c360:	f043 0301 	orr.w	r3, r3, #1
 800c364:	6313      	str	r3, [r2, #48]	; 0x30
 800c366:	4b1b      	ldr	r3, [pc, #108]	; (800c3d4 <HAL_PCD_MspInit+0xcc>)
 800c368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c36a:	f003 0301 	and.w	r3, r3, #1
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c376:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c378:	2302      	movs	r3, #2
 800c37a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c37c:	2300      	movs	r3, #0
 800c37e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c380:	2303      	movs	r3, #3
 800c382:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c384:	230a      	movs	r3, #10
 800c386:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c388:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c38c:	4619      	mov	r1, r3
 800c38e:	4812      	ldr	r0, [pc, #72]	; (800c3d8 <HAL_PCD_MspInit+0xd0>)
 800c390:	f7f6 f80c 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c394:	4b0f      	ldr	r3, [pc, #60]	; (800c3d4 <HAL_PCD_MspInit+0xcc>)
 800c396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c398:	4a0e      	ldr	r2, [pc, #56]	; (800c3d4 <HAL_PCD_MspInit+0xcc>)
 800c39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c39e:	6353      	str	r3, [r2, #52]	; 0x34
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	60bb      	str	r3, [r7, #8]
 800c3a4:	4b0b      	ldr	r3, [pc, #44]	; (800c3d4 <HAL_PCD_MspInit+0xcc>)
 800c3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a8:	4a0a      	ldr	r2, [pc, #40]	; (800c3d4 <HAL_PCD_MspInit+0xcc>)
 800c3aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c3ae:	6453      	str	r3, [r2, #68]	; 0x44
 800c3b0:	4b08      	ldr	r3, [pc, #32]	; (800c3d4 <HAL_PCD_MspInit+0xcc>)
 800c3b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3b8:	60bb      	str	r3, [r7, #8]
 800c3ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c3bc:	2200      	movs	r2, #0
 800c3be:	2100      	movs	r1, #0
 800c3c0:	2043      	movs	r0, #67	; 0x43
 800c3c2:	f7f5 fbba 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c3c6:	2043      	movs	r0, #67	; 0x43
 800c3c8:	f7f5 fbd3 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c3cc:	bf00      	nop
 800c3ce:	3780      	adds	r7, #128	; 0x80
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	40023800 	.word	0x40023800
 800c3d8:	40020000 	.word	0x40020000

0800c3dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	f7fd f97d 	bl	80096f2 <USBD_LL_SetupStage>
}
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	460b      	mov	r3, r1
 800c40a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800c412:	78fa      	ldrb	r2, [r7, #3]
 800c414:	6879      	ldr	r1, [r7, #4]
 800c416:	4613      	mov	r3, r2
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	440b      	add	r3, r1
 800c420:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	78fb      	ldrb	r3, [r7, #3]
 800c428:	4619      	mov	r1, r3
 800c42a:	f7fd f9b7 	bl	800979c <USBD_LL_DataOutStage>
}
 800c42e:	bf00      	nop
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}

0800c436 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b082      	sub	sp, #8
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	460b      	mov	r3, r1
 800c440:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800c448:	78fa      	ldrb	r2, [r7, #3]
 800c44a:	6879      	ldr	r1, [r7, #4]
 800c44c:	4613      	mov	r3, r2
 800c44e:	00db      	lsls	r3, r3, #3
 800c450:	4413      	add	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	440b      	add	r3, r1
 800c456:	3320      	adds	r3, #32
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	78fb      	ldrb	r3, [r7, #3]
 800c45c:	4619      	mov	r1, r3
 800c45e:	f7fd fa50 	bl	8009902 <USBD_LL_DataInStage>
}
 800c462:	bf00      	nop
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b082      	sub	sp, #8
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fd fb8a 	bl	8009b92 <USBD_LL_SOF>
}
 800c47e:	bf00      	nop
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b084      	sub	sp, #16
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c48e:	2301      	movs	r3, #1
 800c490:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	79db      	ldrb	r3, [r3, #7]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73fb      	strb	r3, [r7, #15]
 800c49e:	e008      	b.n	800c4b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	79db      	ldrb	r3, [r3, #7]
 800c4a4:	2b02      	cmp	r3, #2
 800c4a6:	d102      	bne.n	800c4ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	73fb      	strb	r3, [r7, #15]
 800c4ac:	e001      	b.n	800c4b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c4ae:	f7f4 fadf 	bl	8000a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c4b8:	7bfa      	ldrb	r2, [r7, #15]
 800c4ba:	4611      	mov	r1, r2
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fd fb24 	bl	8009b0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fd facc 	bl	8009a66 <USBD_LL_Reset>
}
 800c4ce:	bf00      	nop
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fd fb1f 	bl	8009b2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	6812      	ldr	r2, [r2, #0]
 800c4fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c4fe:	f043 0301 	orr.w	r3, r3, #1
 800c502:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	7adb      	ldrb	r3, [r3, #11]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d005      	beq.n	800c518 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c50c:	4b04      	ldr	r3, [pc, #16]	; (800c520 <HAL_PCD_SuspendCallback+0x48>)
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	4a03      	ldr	r2, [pc, #12]	; (800c520 <HAL_PCD_SuspendCallback+0x48>)
 800c512:	f043 0306 	orr.w	r3, r3, #6
 800c516:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c518:	bf00      	nop
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	e000ed00 	.word	0xe000ed00

0800c524 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c532:	4618      	mov	r0, r3
 800c534:	f7fd fb15 	bl	8009b62 <USBD_LL_Resume>
}
 800c538:	bf00      	nop
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	460b      	mov	r3, r1
 800c54a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c552:	78fa      	ldrb	r2, [r7, #3]
 800c554:	4611      	mov	r1, r2
 800c556:	4618      	mov	r0, r3
 800c558:	f7fd fb6d 	bl	8009c36 <USBD_LL_IsoOUTIncomplete>
}
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	460b      	mov	r3, r1
 800c56e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c576:	78fa      	ldrb	r2, [r7, #3]
 800c578:	4611      	mov	r1, r2
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fd fb29 	bl	8009bd2 <USBD_LL_IsoINIncomplete>
}
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c596:	4618      	mov	r0, r3
 800c598:	f7fd fb7f 	bl	8009c9a <USBD_LL_DevConnected>
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fd fb7c 	bl	8009cb0 <USBD_LL_DevDisconnected>
}
 800c5b8:	bf00      	nop
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d13c      	bne.n	800c64a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c5d0:	4a20      	ldr	r2, [pc, #128]	; (800c654 <USBD_LL_Init+0x94>)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a1e      	ldr	r2, [pc, #120]	; (800c654 <USBD_LL_Init+0x94>)
 800c5dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c5e0:	4b1c      	ldr	r3, [pc, #112]	; (800c654 <USBD_LL_Init+0x94>)
 800c5e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c5e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c5e8:	4b1a      	ldr	r3, [pc, #104]	; (800c654 <USBD_LL_Init+0x94>)
 800c5ea:	2206      	movs	r2, #6
 800c5ec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c5ee:	4b19      	ldr	r3, [pc, #100]	; (800c654 <USBD_LL_Init+0x94>)
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c5f4:	4b17      	ldr	r3, [pc, #92]	; (800c654 <USBD_LL_Init+0x94>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c5fa:	4b16      	ldr	r3, [pc, #88]	; (800c654 <USBD_LL_Init+0x94>)
 800c5fc:	2202      	movs	r2, #2
 800c5fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c600:	4b14      	ldr	r3, [pc, #80]	; (800c654 <USBD_LL_Init+0x94>)
 800c602:	2200      	movs	r2, #0
 800c604:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c606:	4b13      	ldr	r3, [pc, #76]	; (800c654 <USBD_LL_Init+0x94>)
 800c608:	2200      	movs	r2, #0
 800c60a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c60c:	4b11      	ldr	r3, [pc, #68]	; (800c654 <USBD_LL_Init+0x94>)
 800c60e:	2200      	movs	r2, #0
 800c610:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c612:	4b10      	ldr	r3, [pc, #64]	; (800c654 <USBD_LL_Init+0x94>)
 800c614:	2200      	movs	r2, #0
 800c616:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c618:	4b0e      	ldr	r3, [pc, #56]	; (800c654 <USBD_LL_Init+0x94>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c61e:	480d      	ldr	r0, [pc, #52]	; (800c654 <USBD_LL_Init+0x94>)
 800c620:	f7f7 f8ae 	bl	8003780 <HAL_PCD_Init>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d001      	beq.n	800c62e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c62a:	f7f4 fa21 	bl	8000a70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c62e:	2180      	movs	r1, #128	; 0x80
 800c630:	4808      	ldr	r0, [pc, #32]	; (800c654 <USBD_LL_Init+0x94>)
 800c632:	f7f8 fb0e 	bl	8004c52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c636:	2240      	movs	r2, #64	; 0x40
 800c638:	2100      	movs	r1, #0
 800c63a:	4806      	ldr	r0, [pc, #24]	; (800c654 <USBD_LL_Init+0x94>)
 800c63c:	f7f8 fac2 	bl	8004bc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c640:	2280      	movs	r2, #128	; 0x80
 800c642:	2101      	movs	r1, #1
 800c644:	4803      	ldr	r0, [pc, #12]	; (800c654 <USBD_LL_Init+0x94>)
 800c646:	f7f8 fabd 	bl	8004bc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20001af4 	.word	0x20001af4

0800c658 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c664:	2300      	movs	r3, #0
 800c666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c66e:	4618      	mov	r0, r3
 800c670:	f7f7 f99c 	bl	80039ac <HAL_PCD_Start>
 800c674:	4603      	mov	r3, r0
 800c676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c678:	7bfb      	ldrb	r3, [r7, #15]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 f990 	bl	800c9a0 <USBD_Get_USB_Status>
 800c680:	4603      	mov	r3, r0
 800c682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c684:	7bbb      	ldrb	r3, [r7, #14]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c68e:	b580      	push	{r7, lr}
 800c690:	b084      	sub	sp, #16
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	4608      	mov	r0, r1
 800c698:	4611      	mov	r1, r2
 800c69a:	461a      	mov	r2, r3
 800c69c:	4603      	mov	r3, r0
 800c69e:	70fb      	strb	r3, [r7, #3]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70bb      	strb	r3, [r7, #2]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c6b6:	78bb      	ldrb	r3, [r7, #2]
 800c6b8:	883a      	ldrh	r2, [r7, #0]
 800c6ba:	78f9      	ldrb	r1, [r7, #3]
 800c6bc:	f7f7 fe9d 	bl	80043fa <HAL_PCD_EP_Open>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 f96a 	bl	800c9a0 <USBD_Get_USB_Status>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6f4:	78fa      	ldrb	r2, [r7, #3]
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7f7 fee8 	bl	80044ce <HAL_PCD_EP_Close>
 800c6fe:	4603      	mov	r3, r0
 800c700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	4618      	mov	r0, r3
 800c706:	f000 f94b 	bl	800c9a0 <USBD_Get_USB_Status>
 800c70a:	4603      	mov	r3, r0
 800c70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	460b      	mov	r3, r1
 800c722:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c728:	2300      	movs	r3, #0
 800c72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c732:	78fa      	ldrb	r2, [r7, #3]
 800c734:	4611      	mov	r1, r2
 800c736:	4618      	mov	r0, r3
 800c738:	f7f7 ffa0 	bl	800467c <HAL_PCD_EP_SetStall>
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4618      	mov	r0, r3
 800c744:	f000 f92c 	bl	800c9a0 <USBD_Get_USB_Status>
 800c748:	4603      	mov	r3, r0
 800c74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	460b      	mov	r3, r1
 800c760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c770:	78fa      	ldrb	r2, [r7, #3]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f7f7 ffe4 	bl	8004742 <HAL_PCD_EP_ClrStall>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	4618      	mov	r0, r3
 800c782:	f000 f90d 	bl	800c9a0 <USBD_Get_USB_Status>
 800c786:	4603      	mov	r3, r0
 800c788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c7a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	da0b      	bge.n	800c7c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c7b0:	78fb      	ldrb	r3, [r7, #3]
 800c7b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7b6:	68f9      	ldr	r1, [r7, #12]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	4413      	add	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	440b      	add	r3, r1
 800c7c2:	3316      	adds	r3, #22
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	e00b      	b.n	800c7e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c7c8:	78fb      	ldrb	r3, [r7, #3]
 800c7ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7ce:	68f9      	ldr	r1, [r7, #12]
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	00db      	lsls	r3, r3, #3
 800c7d4:	4413      	add	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	440b      	add	r3, r1
 800c7da:	f203 2356 	addw	r3, r3, #598	; 0x256
 800c7de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c806:	78fa      	ldrb	r2, [r7, #3]
 800c808:	4611      	mov	r1, r2
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7f7 fdd1 	bl	80043b2 <HAL_PCD_SetAddress>
 800c810:	4603      	mov	r3, r0
 800c812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c814:	7bfb      	ldrb	r3, [r7, #15]
 800c816:	4618      	mov	r0, r3
 800c818:	f000 f8c2 	bl	800c9a0 <USBD_Get_USB_Status>
 800c81c:	4603      	mov	r3, r0
 800c81e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c820:	7bbb      	ldrb	r3, [r7, #14]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b086      	sub	sp, #24
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
 800c836:	460b      	mov	r3, r1
 800c838:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c848:	7af9      	ldrb	r1, [r7, #11]
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	f7f7 fedb 	bl	8004608 <HAL_PCD_EP_Transmit>
 800c852:	4603      	mov	r3, r0
 800c854:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 f8a1 	bl	800c9a0 <USBD_Get_USB_Status>
 800c85e:	4603      	mov	r3, r0
 800c860:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c862:	7dbb      	ldrb	r3, [r7, #22]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b086      	sub	sp, #24
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	607a      	str	r2, [r7, #4]
 800c876:	603b      	str	r3, [r7, #0]
 800c878:	460b      	mov	r3, r1
 800c87a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c88a:	7af9      	ldrb	r1, [r7, #11]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	f7f7 fe67 	bl	8004562 <HAL_PCD_EP_Receive>
 800c894:	4603      	mov	r3, r0
 800c896:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c898:	7dfb      	ldrb	r3, [r7, #23]
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 f880 	bl	800c9a0 <USBD_Get_USB_Status>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b082      	sub	sp, #8
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8c0:	78fa      	ldrb	r2, [r7, #3]
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7f7 fe87 	bl	80045d8 <HAL_PCD_EP_GetRxCount>
 800c8ca:	4603      	mov	r3, r0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	460b      	mov	r3, r1
 800c8de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c8e0:	78fb      	ldrb	r3, [r7, #3]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d002      	beq.n	800c8ec <HAL_PCDEx_LPM_Callback+0x18>
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d01f      	beq.n	800c92a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c8ea:	e03b      	b.n	800c964 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	7adb      	ldrb	r3, [r3, #11]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d007      	beq.n	800c904 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c8f4:	f7f3 fe8c 	bl	8000610 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8f8:	4b1c      	ldr	r3, [pc, #112]	; (800c96c <HAL_PCDEx_LPM_Callback+0x98>)
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	4a1b      	ldr	r2, [pc, #108]	; (800c96c <HAL_PCDEx_LPM_Callback+0x98>)
 800c8fe:	f023 0306 	bic.w	r3, r3, #6
 800c902:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	6812      	ldr	r2, [r2, #0]
 800c912:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c916:	f023 0301 	bic.w	r3, r3, #1
 800c91a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c922:	4618      	mov	r0, r3
 800c924:	f7fd f91d 	bl	8009b62 <USBD_LL_Resume>
    break;
 800c928:	e01c      	b.n	800c964 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	6812      	ldr	r2, [r2, #0]
 800c938:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c93c:	f043 0301 	orr.w	r3, r3, #1
 800c940:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fd f8ee 	bl	8009b2a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	7adb      	ldrb	r3, [r3, #11]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d005      	beq.n	800c962 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c956:	4b05      	ldr	r3, [pc, #20]	; (800c96c <HAL_PCDEx_LPM_Callback+0x98>)
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	4a04      	ldr	r2, [pc, #16]	; (800c96c <HAL_PCDEx_LPM_Callback+0x98>)
 800c95c:	f043 0306 	orr.w	r3, r3, #6
 800c960:	6113      	str	r3, [r2, #16]
    break;
 800c962:	bf00      	nop
}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	e000ed00 	.word	0xe000ed00

0800c970 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c978:	4b03      	ldr	r3, [pc, #12]	; (800c988 <USBD_static_malloc+0x18>)
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop
 800c988:	20001fd8 	.word	0x20001fd8

0800c98c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]

}
 800c994:	bf00      	nop
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9ae:	79fb      	ldrb	r3, [r7, #7]
 800c9b0:	2b03      	cmp	r3, #3
 800c9b2:	d817      	bhi.n	800c9e4 <USBD_Get_USB_Status+0x44>
 800c9b4:	a201      	add	r2, pc, #4	; (adr r2, 800c9bc <USBD_Get_USB_Status+0x1c>)
 800c9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ba:	bf00      	nop
 800c9bc:	0800c9cd 	.word	0x0800c9cd
 800c9c0:	0800c9d3 	.word	0x0800c9d3
 800c9c4:	0800c9d9 	.word	0x0800c9d9
 800c9c8:	0800c9df 	.word	0x0800c9df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d0:	e00b      	b.n	800c9ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d6:	e008      	b.n	800c9ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]
    break;
 800c9dc:	e005      	b.n	800c9ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c9e2:	e002      	b.n	800c9ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c9e4:	2303      	movs	r3, #3
 800c9e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c9e8:	bf00      	nop
  }
  return usb_status;
 800c9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3714      	adds	r7, #20
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <__assert_func>:
 800c9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9fa:	4614      	mov	r4, r2
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	4b09      	ldr	r3, [pc, #36]	; (800ca24 <__assert_func+0x2c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4605      	mov	r5, r0
 800ca04:	68d8      	ldr	r0, [r3, #12]
 800ca06:	b14c      	cbz	r4, 800ca1c <__assert_func+0x24>
 800ca08:	4b07      	ldr	r3, [pc, #28]	; (800ca28 <__assert_func+0x30>)
 800ca0a:	9100      	str	r1, [sp, #0]
 800ca0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca10:	4906      	ldr	r1, [pc, #24]	; (800ca2c <__assert_func+0x34>)
 800ca12:	462b      	mov	r3, r5
 800ca14:	f000 f8b2 	bl	800cb7c <fiprintf>
 800ca18:	f000 fa41 	bl	800ce9e <abort>
 800ca1c:	4b04      	ldr	r3, [pc, #16]	; (800ca30 <__assert_func+0x38>)
 800ca1e:	461c      	mov	r4, r3
 800ca20:	e7f3      	b.n	800ca0a <__assert_func+0x12>
 800ca22:	bf00      	nop
 800ca24:	20000164 	.word	0x20000164
 800ca28:	0800ec93 	.word	0x0800ec93
 800ca2c:	0800eca0 	.word	0x0800eca0
 800ca30:	0800ecce 	.word	0x0800ecce

0800ca34 <std>:
 800ca34:	2300      	movs	r3, #0
 800ca36:	b510      	push	{r4, lr}
 800ca38:	4604      	mov	r4, r0
 800ca3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ca3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca42:	6083      	str	r3, [r0, #8]
 800ca44:	8181      	strh	r1, [r0, #12]
 800ca46:	6643      	str	r3, [r0, #100]	; 0x64
 800ca48:	81c2      	strh	r2, [r0, #14]
 800ca4a:	6183      	str	r3, [r0, #24]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	2208      	movs	r2, #8
 800ca50:	305c      	adds	r0, #92	; 0x5c
 800ca52:	f000 f988 	bl	800cd66 <memset>
 800ca56:	4b0d      	ldr	r3, [pc, #52]	; (800ca8c <std+0x58>)
 800ca58:	6263      	str	r3, [r4, #36]	; 0x24
 800ca5a:	4b0d      	ldr	r3, [pc, #52]	; (800ca90 <std+0x5c>)
 800ca5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca5e:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <std+0x60>)
 800ca60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca62:	4b0d      	ldr	r3, [pc, #52]	; (800ca98 <std+0x64>)
 800ca64:	6323      	str	r3, [r4, #48]	; 0x30
 800ca66:	4b0d      	ldr	r3, [pc, #52]	; (800ca9c <std+0x68>)
 800ca68:	6224      	str	r4, [r4, #32]
 800ca6a:	429c      	cmp	r4, r3
 800ca6c:	d006      	beq.n	800ca7c <std+0x48>
 800ca6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ca72:	4294      	cmp	r4, r2
 800ca74:	d002      	beq.n	800ca7c <std+0x48>
 800ca76:	33d0      	adds	r3, #208	; 0xd0
 800ca78:	429c      	cmp	r4, r3
 800ca7a:	d105      	bne.n	800ca88 <std+0x54>
 800ca7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca84:	f000 b9fa 	b.w	800ce7c <__retarget_lock_init_recursive>
 800ca88:	bd10      	pop	{r4, pc}
 800ca8a:	bf00      	nop
 800ca8c:	0800ccdd 	.word	0x0800ccdd
 800ca90:	0800cd03 	.word	0x0800cd03
 800ca94:	0800cd3b 	.word	0x0800cd3b
 800ca98:	0800cd5f 	.word	0x0800cd5f
 800ca9c:	200021f8 	.word	0x200021f8

0800caa0 <stdio_exit_handler>:
 800caa0:	4a02      	ldr	r2, [pc, #8]	; (800caac <stdio_exit_handler+0xc>)
 800caa2:	4903      	ldr	r1, [pc, #12]	; (800cab0 <stdio_exit_handler+0x10>)
 800caa4:	4803      	ldr	r0, [pc, #12]	; (800cab4 <stdio_exit_handler+0x14>)
 800caa6:	f000 b87b 	b.w	800cba0 <_fwalk_sglue>
 800caaa:	bf00      	nop
 800caac:	2000010c 	.word	0x2000010c
 800cab0:	0800e041 	.word	0x0800e041
 800cab4:	20000118 	.word	0x20000118

0800cab8 <cleanup_stdio>:
 800cab8:	6841      	ldr	r1, [r0, #4]
 800caba:	4b0c      	ldr	r3, [pc, #48]	; (800caec <cleanup_stdio+0x34>)
 800cabc:	4299      	cmp	r1, r3
 800cabe:	b510      	push	{r4, lr}
 800cac0:	4604      	mov	r4, r0
 800cac2:	d001      	beq.n	800cac8 <cleanup_stdio+0x10>
 800cac4:	f001 fabc 	bl	800e040 <_fflush_r>
 800cac8:	68a1      	ldr	r1, [r4, #8]
 800caca:	4b09      	ldr	r3, [pc, #36]	; (800caf0 <cleanup_stdio+0x38>)
 800cacc:	4299      	cmp	r1, r3
 800cace:	d002      	beq.n	800cad6 <cleanup_stdio+0x1e>
 800cad0:	4620      	mov	r0, r4
 800cad2:	f001 fab5 	bl	800e040 <_fflush_r>
 800cad6:	68e1      	ldr	r1, [r4, #12]
 800cad8:	4b06      	ldr	r3, [pc, #24]	; (800caf4 <cleanup_stdio+0x3c>)
 800cada:	4299      	cmp	r1, r3
 800cadc:	d004      	beq.n	800cae8 <cleanup_stdio+0x30>
 800cade:	4620      	mov	r0, r4
 800cae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cae4:	f001 baac 	b.w	800e040 <_fflush_r>
 800cae8:	bd10      	pop	{r4, pc}
 800caea:	bf00      	nop
 800caec:	200021f8 	.word	0x200021f8
 800caf0:	20002260 	.word	0x20002260
 800caf4:	200022c8 	.word	0x200022c8

0800caf8 <global_stdio_init.part.0>:
 800caf8:	b510      	push	{r4, lr}
 800cafa:	4b0b      	ldr	r3, [pc, #44]	; (800cb28 <global_stdio_init.part.0+0x30>)
 800cafc:	4c0b      	ldr	r4, [pc, #44]	; (800cb2c <global_stdio_init.part.0+0x34>)
 800cafe:	4a0c      	ldr	r2, [pc, #48]	; (800cb30 <global_stdio_init.part.0+0x38>)
 800cb00:	601a      	str	r2, [r3, #0]
 800cb02:	4620      	mov	r0, r4
 800cb04:	2200      	movs	r2, #0
 800cb06:	2104      	movs	r1, #4
 800cb08:	f7ff ff94 	bl	800ca34 <std>
 800cb0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cb10:	2201      	movs	r2, #1
 800cb12:	2109      	movs	r1, #9
 800cb14:	f7ff ff8e 	bl	800ca34 <std>
 800cb18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cb1c:	2202      	movs	r2, #2
 800cb1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb22:	2112      	movs	r1, #18
 800cb24:	f7ff bf86 	b.w	800ca34 <std>
 800cb28:	20002330 	.word	0x20002330
 800cb2c:	200021f8 	.word	0x200021f8
 800cb30:	0800caa1 	.word	0x0800caa1

0800cb34 <__sfp_lock_acquire>:
 800cb34:	4801      	ldr	r0, [pc, #4]	; (800cb3c <__sfp_lock_acquire+0x8>)
 800cb36:	f000 b9a2 	b.w	800ce7e <__retarget_lock_acquire_recursive>
 800cb3a:	bf00      	nop
 800cb3c:	20002339 	.word	0x20002339

0800cb40 <__sfp_lock_release>:
 800cb40:	4801      	ldr	r0, [pc, #4]	; (800cb48 <__sfp_lock_release+0x8>)
 800cb42:	f000 b99d 	b.w	800ce80 <__retarget_lock_release_recursive>
 800cb46:	bf00      	nop
 800cb48:	20002339 	.word	0x20002339

0800cb4c <__sinit>:
 800cb4c:	b510      	push	{r4, lr}
 800cb4e:	4604      	mov	r4, r0
 800cb50:	f7ff fff0 	bl	800cb34 <__sfp_lock_acquire>
 800cb54:	6a23      	ldr	r3, [r4, #32]
 800cb56:	b11b      	cbz	r3, 800cb60 <__sinit+0x14>
 800cb58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb5c:	f7ff bff0 	b.w	800cb40 <__sfp_lock_release>
 800cb60:	4b04      	ldr	r3, [pc, #16]	; (800cb74 <__sinit+0x28>)
 800cb62:	6223      	str	r3, [r4, #32]
 800cb64:	4b04      	ldr	r3, [pc, #16]	; (800cb78 <__sinit+0x2c>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1f5      	bne.n	800cb58 <__sinit+0xc>
 800cb6c:	f7ff ffc4 	bl	800caf8 <global_stdio_init.part.0>
 800cb70:	e7f2      	b.n	800cb58 <__sinit+0xc>
 800cb72:	bf00      	nop
 800cb74:	0800cab9 	.word	0x0800cab9
 800cb78:	20002330 	.word	0x20002330

0800cb7c <fiprintf>:
 800cb7c:	b40e      	push	{r1, r2, r3}
 800cb7e:	b503      	push	{r0, r1, lr}
 800cb80:	4601      	mov	r1, r0
 800cb82:	ab03      	add	r3, sp, #12
 800cb84:	4805      	ldr	r0, [pc, #20]	; (800cb9c <fiprintf+0x20>)
 800cb86:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb8a:	6800      	ldr	r0, [r0, #0]
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	f000 fdd9 	bl	800d744 <_vfiprintf_r>
 800cb92:	b002      	add	sp, #8
 800cb94:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb98:	b003      	add	sp, #12
 800cb9a:	4770      	bx	lr
 800cb9c:	20000164 	.word	0x20000164

0800cba0 <_fwalk_sglue>:
 800cba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cba4:	4607      	mov	r7, r0
 800cba6:	4688      	mov	r8, r1
 800cba8:	4614      	mov	r4, r2
 800cbaa:	2600      	movs	r6, #0
 800cbac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbb0:	f1b9 0901 	subs.w	r9, r9, #1
 800cbb4:	d505      	bpl.n	800cbc2 <_fwalk_sglue+0x22>
 800cbb6:	6824      	ldr	r4, [r4, #0]
 800cbb8:	2c00      	cmp	r4, #0
 800cbba:	d1f7      	bne.n	800cbac <_fwalk_sglue+0xc>
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbc2:	89ab      	ldrh	r3, [r5, #12]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d907      	bls.n	800cbd8 <_fwalk_sglue+0x38>
 800cbc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	d003      	beq.n	800cbd8 <_fwalk_sglue+0x38>
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	47c0      	blx	r8
 800cbd6:	4306      	orrs	r6, r0
 800cbd8:	3568      	adds	r5, #104	; 0x68
 800cbda:	e7e9      	b.n	800cbb0 <_fwalk_sglue+0x10>

0800cbdc <sniprintf>:
 800cbdc:	b40c      	push	{r2, r3}
 800cbde:	b530      	push	{r4, r5, lr}
 800cbe0:	4b17      	ldr	r3, [pc, #92]	; (800cc40 <sniprintf+0x64>)
 800cbe2:	1e0c      	subs	r4, r1, #0
 800cbe4:	681d      	ldr	r5, [r3, #0]
 800cbe6:	b09d      	sub	sp, #116	; 0x74
 800cbe8:	da08      	bge.n	800cbfc <sniprintf+0x20>
 800cbea:	238b      	movs	r3, #139	; 0x8b
 800cbec:	602b      	str	r3, [r5, #0]
 800cbee:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf2:	b01d      	add	sp, #116	; 0x74
 800cbf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbf8:	b002      	add	sp, #8
 800cbfa:	4770      	bx	lr
 800cbfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cc00:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc04:	bf14      	ite	ne
 800cc06:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cc0a:	4623      	moveq	r3, r4
 800cc0c:	9304      	str	r3, [sp, #16]
 800cc0e:	9307      	str	r3, [sp, #28]
 800cc10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc14:	9002      	str	r0, [sp, #8]
 800cc16:	9006      	str	r0, [sp, #24]
 800cc18:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cc1e:	ab21      	add	r3, sp, #132	; 0x84
 800cc20:	a902      	add	r1, sp, #8
 800cc22:	4628      	mov	r0, r5
 800cc24:	9301      	str	r3, [sp, #4]
 800cc26:	f000 fa93 	bl	800d150 <_svfiprintf_r>
 800cc2a:	1c43      	adds	r3, r0, #1
 800cc2c:	bfbc      	itt	lt
 800cc2e:	238b      	movlt	r3, #139	; 0x8b
 800cc30:	602b      	strlt	r3, [r5, #0]
 800cc32:	2c00      	cmp	r4, #0
 800cc34:	d0dd      	beq.n	800cbf2 <sniprintf+0x16>
 800cc36:	9b02      	ldr	r3, [sp, #8]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	701a      	strb	r2, [r3, #0]
 800cc3c:	e7d9      	b.n	800cbf2 <sniprintf+0x16>
 800cc3e:	bf00      	nop
 800cc40:	20000164 	.word	0x20000164

0800cc44 <siprintf>:
 800cc44:	b40e      	push	{r1, r2, r3}
 800cc46:	b500      	push	{lr}
 800cc48:	b09c      	sub	sp, #112	; 0x70
 800cc4a:	ab1d      	add	r3, sp, #116	; 0x74
 800cc4c:	9002      	str	r0, [sp, #8]
 800cc4e:	9006      	str	r0, [sp, #24]
 800cc50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc54:	4809      	ldr	r0, [pc, #36]	; (800cc7c <siprintf+0x38>)
 800cc56:	9107      	str	r1, [sp, #28]
 800cc58:	9104      	str	r1, [sp, #16]
 800cc5a:	4909      	ldr	r1, [pc, #36]	; (800cc80 <siprintf+0x3c>)
 800cc5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc60:	9105      	str	r1, [sp, #20]
 800cc62:	6800      	ldr	r0, [r0, #0]
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	a902      	add	r1, sp, #8
 800cc68:	f000 fa72 	bl	800d150 <_svfiprintf_r>
 800cc6c:	9b02      	ldr	r3, [sp, #8]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	701a      	strb	r2, [r3, #0]
 800cc72:	b01c      	add	sp, #112	; 0x70
 800cc74:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc78:	b003      	add	sp, #12
 800cc7a:	4770      	bx	lr
 800cc7c:	20000164 	.word	0x20000164
 800cc80:	ffff0208 	.word	0xffff0208

0800cc84 <siscanf>:
 800cc84:	b40e      	push	{r1, r2, r3}
 800cc86:	b510      	push	{r4, lr}
 800cc88:	b09f      	sub	sp, #124	; 0x7c
 800cc8a:	ac21      	add	r4, sp, #132	; 0x84
 800cc8c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800cc90:	f854 2b04 	ldr.w	r2, [r4], #4
 800cc94:	9201      	str	r2, [sp, #4]
 800cc96:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cc9a:	9004      	str	r0, [sp, #16]
 800cc9c:	9008      	str	r0, [sp, #32]
 800cc9e:	f7f3 fac1 	bl	8000224 <strlen>
 800cca2:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <siscanf+0x50>)
 800cca4:	9005      	str	r0, [sp, #20]
 800cca6:	9009      	str	r0, [sp, #36]	; 0x24
 800cca8:	930d      	str	r3, [sp, #52]	; 0x34
 800ccaa:	480b      	ldr	r0, [pc, #44]	; (800ccd8 <siscanf+0x54>)
 800ccac:	9a01      	ldr	r2, [sp, #4]
 800ccae:	6800      	ldr	r0, [r0, #0]
 800ccb0:	9403      	str	r4, [sp, #12]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	9311      	str	r3, [sp, #68]	; 0x44
 800ccb6:	9316      	str	r3, [sp, #88]	; 0x58
 800ccb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccbc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ccc0:	a904      	add	r1, sp, #16
 800ccc2:	4623      	mov	r3, r4
 800ccc4:	f000 fb9c 	bl	800d400 <__ssvfiscanf_r>
 800ccc8:	b01f      	add	sp, #124	; 0x7c
 800ccca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccce:	b003      	add	sp, #12
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	0800ccff 	.word	0x0800ccff
 800ccd8:	20000164 	.word	0x20000164

0800ccdc <__sread>:
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	460c      	mov	r4, r1
 800cce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce4:	f000 f87c 	bl	800cde0 <_read_r>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	bfab      	itete	ge
 800ccec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccee:	89a3      	ldrhlt	r3, [r4, #12]
 800ccf0:	181b      	addge	r3, r3, r0
 800ccf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccf6:	bfac      	ite	ge
 800ccf8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccfa:	81a3      	strhlt	r3, [r4, #12]
 800ccfc:	bd10      	pop	{r4, pc}

0800ccfe <__seofread>:
 800ccfe:	2000      	movs	r0, #0
 800cd00:	4770      	bx	lr

0800cd02 <__swrite>:
 800cd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd06:	461f      	mov	r7, r3
 800cd08:	898b      	ldrh	r3, [r1, #12]
 800cd0a:	05db      	lsls	r3, r3, #23
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	460c      	mov	r4, r1
 800cd10:	4616      	mov	r6, r2
 800cd12:	d505      	bpl.n	800cd20 <__swrite+0x1e>
 800cd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd18:	2302      	movs	r3, #2
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f000 f84e 	bl	800cdbc <_lseek_r>
 800cd20:	89a3      	ldrh	r3, [r4, #12]
 800cd22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd2a:	81a3      	strh	r3, [r4, #12]
 800cd2c:	4632      	mov	r2, r6
 800cd2e:	463b      	mov	r3, r7
 800cd30:	4628      	mov	r0, r5
 800cd32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd36:	f000 b865 	b.w	800ce04 <_write_r>

0800cd3a <__sseek>:
 800cd3a:	b510      	push	{r4, lr}
 800cd3c:	460c      	mov	r4, r1
 800cd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd42:	f000 f83b 	bl	800cdbc <_lseek_r>
 800cd46:	1c43      	adds	r3, r0, #1
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	bf15      	itete	ne
 800cd4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd56:	81a3      	strheq	r3, [r4, #12]
 800cd58:	bf18      	it	ne
 800cd5a:	81a3      	strhne	r3, [r4, #12]
 800cd5c:	bd10      	pop	{r4, pc}

0800cd5e <__sclose>:
 800cd5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd62:	f000 b81b 	b.w	800cd9c <_close_r>

0800cd66 <memset>:
 800cd66:	4402      	add	r2, r0
 800cd68:	4603      	mov	r3, r0
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d100      	bne.n	800cd70 <memset+0xa>
 800cd6e:	4770      	bx	lr
 800cd70:	f803 1b01 	strb.w	r1, [r3], #1
 800cd74:	e7f9      	b.n	800cd6a <memset+0x4>

0800cd76 <strncmp>:
 800cd76:	b510      	push	{r4, lr}
 800cd78:	b16a      	cbz	r2, 800cd96 <strncmp+0x20>
 800cd7a:	3901      	subs	r1, #1
 800cd7c:	1884      	adds	r4, r0, r2
 800cd7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd82:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d103      	bne.n	800cd92 <strncmp+0x1c>
 800cd8a:	42a0      	cmp	r0, r4
 800cd8c:	d001      	beq.n	800cd92 <strncmp+0x1c>
 800cd8e:	2a00      	cmp	r2, #0
 800cd90:	d1f5      	bne.n	800cd7e <strncmp+0x8>
 800cd92:	1ad0      	subs	r0, r2, r3
 800cd94:	bd10      	pop	{r4, pc}
 800cd96:	4610      	mov	r0, r2
 800cd98:	e7fc      	b.n	800cd94 <strncmp+0x1e>
	...

0800cd9c <_close_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d06      	ldr	r5, [pc, #24]	; (800cdb8 <_close_r+0x1c>)
 800cda0:	2300      	movs	r3, #0
 800cda2:	4604      	mov	r4, r0
 800cda4:	4608      	mov	r0, r1
 800cda6:	602b      	str	r3, [r5, #0]
 800cda8:	f7f4 f897 	bl	8000eda <_close>
 800cdac:	1c43      	adds	r3, r0, #1
 800cdae:	d102      	bne.n	800cdb6 <_close_r+0x1a>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	b103      	cbz	r3, 800cdb6 <_close_r+0x1a>
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	20002334 	.word	0x20002334

0800cdbc <_lseek_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4d07      	ldr	r5, [pc, #28]	; (800cddc <_lseek_r+0x20>)
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	4608      	mov	r0, r1
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	602a      	str	r2, [r5, #0]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f7f4 f8ac 	bl	8000f28 <_lseek>
 800cdd0:	1c43      	adds	r3, r0, #1
 800cdd2:	d102      	bne.n	800cdda <_lseek_r+0x1e>
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	b103      	cbz	r3, 800cdda <_lseek_r+0x1e>
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	bd38      	pop	{r3, r4, r5, pc}
 800cddc:	20002334 	.word	0x20002334

0800cde0 <_read_r>:
 800cde0:	b538      	push	{r3, r4, r5, lr}
 800cde2:	4d07      	ldr	r5, [pc, #28]	; (800ce00 <_read_r+0x20>)
 800cde4:	4604      	mov	r4, r0
 800cde6:	4608      	mov	r0, r1
 800cde8:	4611      	mov	r1, r2
 800cdea:	2200      	movs	r2, #0
 800cdec:	602a      	str	r2, [r5, #0]
 800cdee:	461a      	mov	r2, r3
 800cdf0:	f7f4 f83a 	bl	8000e68 <_read>
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	d102      	bne.n	800cdfe <_read_r+0x1e>
 800cdf8:	682b      	ldr	r3, [r5, #0]
 800cdfa:	b103      	cbz	r3, 800cdfe <_read_r+0x1e>
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	bd38      	pop	{r3, r4, r5, pc}
 800ce00:	20002334 	.word	0x20002334

0800ce04 <_write_r>:
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	4d07      	ldr	r5, [pc, #28]	; (800ce24 <_write_r+0x20>)
 800ce08:	4604      	mov	r4, r0
 800ce0a:	4608      	mov	r0, r1
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	2200      	movs	r2, #0
 800ce10:	602a      	str	r2, [r5, #0]
 800ce12:	461a      	mov	r2, r3
 800ce14:	f7f4 f845 	bl	8000ea2 <_write>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_write_r+0x1e>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_write_r+0x1e>
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	20002334 	.word	0x20002334

0800ce28 <__errno>:
 800ce28:	4b01      	ldr	r3, [pc, #4]	; (800ce30 <__errno+0x8>)
 800ce2a:	6818      	ldr	r0, [r3, #0]
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop
 800ce30:	20000164 	.word	0x20000164

0800ce34 <__libc_init_array>:
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	4d0d      	ldr	r5, [pc, #52]	; (800ce6c <__libc_init_array+0x38>)
 800ce38:	4c0d      	ldr	r4, [pc, #52]	; (800ce70 <__libc_init_array+0x3c>)
 800ce3a:	1b64      	subs	r4, r4, r5
 800ce3c:	10a4      	asrs	r4, r4, #2
 800ce3e:	2600      	movs	r6, #0
 800ce40:	42a6      	cmp	r6, r4
 800ce42:	d109      	bne.n	800ce58 <__libc_init_array+0x24>
 800ce44:	4d0b      	ldr	r5, [pc, #44]	; (800ce74 <__libc_init_array+0x40>)
 800ce46:	4c0c      	ldr	r4, [pc, #48]	; (800ce78 <__libc_init_array+0x44>)
 800ce48:	f001 fc6e 	bl	800e728 <_init>
 800ce4c:	1b64      	subs	r4, r4, r5
 800ce4e:	10a4      	asrs	r4, r4, #2
 800ce50:	2600      	movs	r6, #0
 800ce52:	42a6      	cmp	r6, r4
 800ce54:	d105      	bne.n	800ce62 <__libc_init_array+0x2e>
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce5c:	4798      	blx	r3
 800ce5e:	3601      	adds	r6, #1
 800ce60:	e7ee      	b.n	800ce40 <__libc_init_array+0xc>
 800ce62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce66:	4798      	blx	r3
 800ce68:	3601      	adds	r6, #1
 800ce6a:	e7f2      	b.n	800ce52 <__libc_init_array+0x1e>
 800ce6c:	0800ee28 	.word	0x0800ee28
 800ce70:	0800ee28 	.word	0x0800ee28
 800ce74:	0800ee28 	.word	0x0800ee28
 800ce78:	0800ee2c 	.word	0x0800ee2c

0800ce7c <__retarget_lock_init_recursive>:
 800ce7c:	4770      	bx	lr

0800ce7e <__retarget_lock_acquire_recursive>:
 800ce7e:	4770      	bx	lr

0800ce80 <__retarget_lock_release_recursive>:
 800ce80:	4770      	bx	lr

0800ce82 <memcpy>:
 800ce82:	440a      	add	r2, r1
 800ce84:	4291      	cmp	r1, r2
 800ce86:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce8a:	d100      	bne.n	800ce8e <memcpy+0xc>
 800ce8c:	4770      	bx	lr
 800ce8e:	b510      	push	{r4, lr}
 800ce90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce98:	4291      	cmp	r1, r2
 800ce9a:	d1f9      	bne.n	800ce90 <memcpy+0xe>
 800ce9c:	bd10      	pop	{r4, pc}

0800ce9e <abort>:
 800ce9e:	b508      	push	{r3, lr}
 800cea0:	2006      	movs	r0, #6
 800cea2:	f001 fa3f 	bl	800e324 <raise>
 800cea6:	2001      	movs	r0, #1
 800cea8:	f7f3 ffd4 	bl	8000e54 <_exit>

0800ceac <_free_r>:
 800ceac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ceae:	2900      	cmp	r1, #0
 800ceb0:	d044      	beq.n	800cf3c <_free_r+0x90>
 800ceb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceb6:	9001      	str	r0, [sp, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f1a1 0404 	sub.w	r4, r1, #4
 800cebe:	bfb8      	it	lt
 800cec0:	18e4      	addlt	r4, r4, r3
 800cec2:	f000 f8df 	bl	800d084 <__malloc_lock>
 800cec6:	4a1e      	ldr	r2, [pc, #120]	; (800cf40 <_free_r+0x94>)
 800cec8:	9801      	ldr	r0, [sp, #4]
 800ceca:	6813      	ldr	r3, [r2, #0]
 800cecc:	b933      	cbnz	r3, 800cedc <_free_r+0x30>
 800cece:	6063      	str	r3, [r4, #4]
 800ced0:	6014      	str	r4, [r2, #0]
 800ced2:	b003      	add	sp, #12
 800ced4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ced8:	f000 b8da 	b.w	800d090 <__malloc_unlock>
 800cedc:	42a3      	cmp	r3, r4
 800cede:	d908      	bls.n	800cef2 <_free_r+0x46>
 800cee0:	6825      	ldr	r5, [r4, #0]
 800cee2:	1961      	adds	r1, r4, r5
 800cee4:	428b      	cmp	r3, r1
 800cee6:	bf01      	itttt	eq
 800cee8:	6819      	ldreq	r1, [r3, #0]
 800ceea:	685b      	ldreq	r3, [r3, #4]
 800ceec:	1949      	addeq	r1, r1, r5
 800ceee:	6021      	streq	r1, [r4, #0]
 800cef0:	e7ed      	b.n	800cece <_free_r+0x22>
 800cef2:	461a      	mov	r2, r3
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	b10b      	cbz	r3, 800cefc <_free_r+0x50>
 800cef8:	42a3      	cmp	r3, r4
 800cefa:	d9fa      	bls.n	800cef2 <_free_r+0x46>
 800cefc:	6811      	ldr	r1, [r2, #0]
 800cefe:	1855      	adds	r5, r2, r1
 800cf00:	42a5      	cmp	r5, r4
 800cf02:	d10b      	bne.n	800cf1c <_free_r+0x70>
 800cf04:	6824      	ldr	r4, [r4, #0]
 800cf06:	4421      	add	r1, r4
 800cf08:	1854      	adds	r4, r2, r1
 800cf0a:	42a3      	cmp	r3, r4
 800cf0c:	6011      	str	r1, [r2, #0]
 800cf0e:	d1e0      	bne.n	800ced2 <_free_r+0x26>
 800cf10:	681c      	ldr	r4, [r3, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	6053      	str	r3, [r2, #4]
 800cf16:	440c      	add	r4, r1
 800cf18:	6014      	str	r4, [r2, #0]
 800cf1a:	e7da      	b.n	800ced2 <_free_r+0x26>
 800cf1c:	d902      	bls.n	800cf24 <_free_r+0x78>
 800cf1e:	230c      	movs	r3, #12
 800cf20:	6003      	str	r3, [r0, #0]
 800cf22:	e7d6      	b.n	800ced2 <_free_r+0x26>
 800cf24:	6825      	ldr	r5, [r4, #0]
 800cf26:	1961      	adds	r1, r4, r5
 800cf28:	428b      	cmp	r3, r1
 800cf2a:	bf04      	itt	eq
 800cf2c:	6819      	ldreq	r1, [r3, #0]
 800cf2e:	685b      	ldreq	r3, [r3, #4]
 800cf30:	6063      	str	r3, [r4, #4]
 800cf32:	bf04      	itt	eq
 800cf34:	1949      	addeq	r1, r1, r5
 800cf36:	6021      	streq	r1, [r4, #0]
 800cf38:	6054      	str	r4, [r2, #4]
 800cf3a:	e7ca      	b.n	800ced2 <_free_r+0x26>
 800cf3c:	b003      	add	sp, #12
 800cf3e:	bd30      	pop	{r4, r5, pc}
 800cf40:	2000233c 	.word	0x2000233c

0800cf44 <sbrk_aligned>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	4e0e      	ldr	r6, [pc, #56]	; (800cf80 <sbrk_aligned+0x3c>)
 800cf48:	460c      	mov	r4, r1
 800cf4a:	6831      	ldr	r1, [r6, #0]
 800cf4c:	4605      	mov	r5, r0
 800cf4e:	b911      	cbnz	r1, 800cf56 <sbrk_aligned+0x12>
 800cf50:	f001 fa04 	bl	800e35c <_sbrk_r>
 800cf54:	6030      	str	r0, [r6, #0]
 800cf56:	4621      	mov	r1, r4
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f001 f9ff 	bl	800e35c <_sbrk_r>
 800cf5e:	1c43      	adds	r3, r0, #1
 800cf60:	d00a      	beq.n	800cf78 <sbrk_aligned+0x34>
 800cf62:	1cc4      	adds	r4, r0, #3
 800cf64:	f024 0403 	bic.w	r4, r4, #3
 800cf68:	42a0      	cmp	r0, r4
 800cf6a:	d007      	beq.n	800cf7c <sbrk_aligned+0x38>
 800cf6c:	1a21      	subs	r1, r4, r0
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f001 f9f4 	bl	800e35c <_sbrk_r>
 800cf74:	3001      	adds	r0, #1
 800cf76:	d101      	bne.n	800cf7c <sbrk_aligned+0x38>
 800cf78:	f04f 34ff 	mov.w	r4, #4294967295
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	bd70      	pop	{r4, r5, r6, pc}
 800cf80:	20002340 	.word	0x20002340

0800cf84 <_malloc_r>:
 800cf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf88:	1ccd      	adds	r5, r1, #3
 800cf8a:	f025 0503 	bic.w	r5, r5, #3
 800cf8e:	3508      	adds	r5, #8
 800cf90:	2d0c      	cmp	r5, #12
 800cf92:	bf38      	it	cc
 800cf94:	250c      	movcc	r5, #12
 800cf96:	2d00      	cmp	r5, #0
 800cf98:	4607      	mov	r7, r0
 800cf9a:	db01      	blt.n	800cfa0 <_malloc_r+0x1c>
 800cf9c:	42a9      	cmp	r1, r5
 800cf9e:	d905      	bls.n	800cfac <_malloc_r+0x28>
 800cfa0:	230c      	movs	r3, #12
 800cfa2:	603b      	str	r3, [r7, #0]
 800cfa4:	2600      	movs	r6, #0
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d080 <_malloc_r+0xfc>
 800cfb0:	f000 f868 	bl	800d084 <__malloc_lock>
 800cfb4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfb8:	461c      	mov	r4, r3
 800cfba:	bb5c      	cbnz	r4, 800d014 <_malloc_r+0x90>
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	f7ff ffc0 	bl	800cf44 <sbrk_aligned>
 800cfc4:	1c43      	adds	r3, r0, #1
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	d155      	bne.n	800d076 <_malloc_r+0xf2>
 800cfca:	f8d8 4000 	ldr.w	r4, [r8]
 800cfce:	4626      	mov	r6, r4
 800cfd0:	2e00      	cmp	r6, #0
 800cfd2:	d145      	bne.n	800d060 <_malloc_r+0xdc>
 800cfd4:	2c00      	cmp	r4, #0
 800cfd6:	d048      	beq.n	800d06a <_malloc_r+0xe6>
 800cfd8:	6823      	ldr	r3, [r4, #0]
 800cfda:	4631      	mov	r1, r6
 800cfdc:	4638      	mov	r0, r7
 800cfde:	eb04 0903 	add.w	r9, r4, r3
 800cfe2:	f001 f9bb 	bl	800e35c <_sbrk_r>
 800cfe6:	4581      	cmp	r9, r0
 800cfe8:	d13f      	bne.n	800d06a <_malloc_r+0xe6>
 800cfea:	6821      	ldr	r1, [r4, #0]
 800cfec:	1a6d      	subs	r5, r5, r1
 800cfee:	4629      	mov	r1, r5
 800cff0:	4638      	mov	r0, r7
 800cff2:	f7ff ffa7 	bl	800cf44 <sbrk_aligned>
 800cff6:	3001      	adds	r0, #1
 800cff8:	d037      	beq.n	800d06a <_malloc_r+0xe6>
 800cffa:	6823      	ldr	r3, [r4, #0]
 800cffc:	442b      	add	r3, r5
 800cffe:	6023      	str	r3, [r4, #0]
 800d000:	f8d8 3000 	ldr.w	r3, [r8]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d038      	beq.n	800d07a <_malloc_r+0xf6>
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	42a2      	cmp	r2, r4
 800d00c:	d12b      	bne.n	800d066 <_malloc_r+0xe2>
 800d00e:	2200      	movs	r2, #0
 800d010:	605a      	str	r2, [r3, #4]
 800d012:	e00f      	b.n	800d034 <_malloc_r+0xb0>
 800d014:	6822      	ldr	r2, [r4, #0]
 800d016:	1b52      	subs	r2, r2, r5
 800d018:	d41f      	bmi.n	800d05a <_malloc_r+0xd6>
 800d01a:	2a0b      	cmp	r2, #11
 800d01c:	d917      	bls.n	800d04e <_malloc_r+0xca>
 800d01e:	1961      	adds	r1, r4, r5
 800d020:	42a3      	cmp	r3, r4
 800d022:	6025      	str	r5, [r4, #0]
 800d024:	bf18      	it	ne
 800d026:	6059      	strne	r1, [r3, #4]
 800d028:	6863      	ldr	r3, [r4, #4]
 800d02a:	bf08      	it	eq
 800d02c:	f8c8 1000 	streq.w	r1, [r8]
 800d030:	5162      	str	r2, [r4, r5]
 800d032:	604b      	str	r3, [r1, #4]
 800d034:	4638      	mov	r0, r7
 800d036:	f104 060b 	add.w	r6, r4, #11
 800d03a:	f000 f829 	bl	800d090 <__malloc_unlock>
 800d03e:	f026 0607 	bic.w	r6, r6, #7
 800d042:	1d23      	adds	r3, r4, #4
 800d044:	1af2      	subs	r2, r6, r3
 800d046:	d0ae      	beq.n	800cfa6 <_malloc_r+0x22>
 800d048:	1b9b      	subs	r3, r3, r6
 800d04a:	50a3      	str	r3, [r4, r2]
 800d04c:	e7ab      	b.n	800cfa6 <_malloc_r+0x22>
 800d04e:	42a3      	cmp	r3, r4
 800d050:	6862      	ldr	r2, [r4, #4]
 800d052:	d1dd      	bne.n	800d010 <_malloc_r+0x8c>
 800d054:	f8c8 2000 	str.w	r2, [r8]
 800d058:	e7ec      	b.n	800d034 <_malloc_r+0xb0>
 800d05a:	4623      	mov	r3, r4
 800d05c:	6864      	ldr	r4, [r4, #4]
 800d05e:	e7ac      	b.n	800cfba <_malloc_r+0x36>
 800d060:	4634      	mov	r4, r6
 800d062:	6876      	ldr	r6, [r6, #4]
 800d064:	e7b4      	b.n	800cfd0 <_malloc_r+0x4c>
 800d066:	4613      	mov	r3, r2
 800d068:	e7cc      	b.n	800d004 <_malloc_r+0x80>
 800d06a:	230c      	movs	r3, #12
 800d06c:	603b      	str	r3, [r7, #0]
 800d06e:	4638      	mov	r0, r7
 800d070:	f000 f80e 	bl	800d090 <__malloc_unlock>
 800d074:	e797      	b.n	800cfa6 <_malloc_r+0x22>
 800d076:	6025      	str	r5, [r4, #0]
 800d078:	e7dc      	b.n	800d034 <_malloc_r+0xb0>
 800d07a:	605b      	str	r3, [r3, #4]
 800d07c:	deff      	udf	#255	; 0xff
 800d07e:	bf00      	nop
 800d080:	2000233c 	.word	0x2000233c

0800d084 <__malloc_lock>:
 800d084:	4801      	ldr	r0, [pc, #4]	; (800d08c <__malloc_lock+0x8>)
 800d086:	f7ff befa 	b.w	800ce7e <__retarget_lock_acquire_recursive>
 800d08a:	bf00      	nop
 800d08c:	20002338 	.word	0x20002338

0800d090 <__malloc_unlock>:
 800d090:	4801      	ldr	r0, [pc, #4]	; (800d098 <__malloc_unlock+0x8>)
 800d092:	f7ff bef5 	b.w	800ce80 <__retarget_lock_release_recursive>
 800d096:	bf00      	nop
 800d098:	20002338 	.word	0x20002338

0800d09c <__ssputs_r>:
 800d09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a0:	688e      	ldr	r6, [r1, #8]
 800d0a2:	461f      	mov	r7, r3
 800d0a4:	42be      	cmp	r6, r7
 800d0a6:	680b      	ldr	r3, [r1, #0]
 800d0a8:	4682      	mov	sl, r0
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	4690      	mov	r8, r2
 800d0ae:	d82c      	bhi.n	800d10a <__ssputs_r+0x6e>
 800d0b0:	898a      	ldrh	r2, [r1, #12]
 800d0b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0b6:	d026      	beq.n	800d106 <__ssputs_r+0x6a>
 800d0b8:	6965      	ldr	r5, [r4, #20]
 800d0ba:	6909      	ldr	r1, [r1, #16]
 800d0bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0c0:	eba3 0901 	sub.w	r9, r3, r1
 800d0c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0c8:	1c7b      	adds	r3, r7, #1
 800d0ca:	444b      	add	r3, r9
 800d0cc:	106d      	asrs	r5, r5, #1
 800d0ce:	429d      	cmp	r5, r3
 800d0d0:	bf38      	it	cc
 800d0d2:	461d      	movcc	r5, r3
 800d0d4:	0553      	lsls	r3, r2, #21
 800d0d6:	d527      	bpl.n	800d128 <__ssputs_r+0x8c>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	f7ff ff53 	bl	800cf84 <_malloc_r>
 800d0de:	4606      	mov	r6, r0
 800d0e0:	b360      	cbz	r0, 800d13c <__ssputs_r+0xa0>
 800d0e2:	6921      	ldr	r1, [r4, #16]
 800d0e4:	464a      	mov	r2, r9
 800d0e6:	f7ff fecc 	bl	800ce82 <memcpy>
 800d0ea:	89a3      	ldrh	r3, [r4, #12]
 800d0ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0f4:	81a3      	strh	r3, [r4, #12]
 800d0f6:	6126      	str	r6, [r4, #16]
 800d0f8:	6165      	str	r5, [r4, #20]
 800d0fa:	444e      	add	r6, r9
 800d0fc:	eba5 0509 	sub.w	r5, r5, r9
 800d100:	6026      	str	r6, [r4, #0]
 800d102:	60a5      	str	r5, [r4, #8]
 800d104:	463e      	mov	r6, r7
 800d106:	42be      	cmp	r6, r7
 800d108:	d900      	bls.n	800d10c <__ssputs_r+0x70>
 800d10a:	463e      	mov	r6, r7
 800d10c:	6820      	ldr	r0, [r4, #0]
 800d10e:	4632      	mov	r2, r6
 800d110:	4641      	mov	r1, r8
 800d112:	f001 f8c5 	bl	800e2a0 <memmove>
 800d116:	68a3      	ldr	r3, [r4, #8]
 800d118:	1b9b      	subs	r3, r3, r6
 800d11a:	60a3      	str	r3, [r4, #8]
 800d11c:	6823      	ldr	r3, [r4, #0]
 800d11e:	4433      	add	r3, r6
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	2000      	movs	r0, #0
 800d124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d128:	462a      	mov	r2, r5
 800d12a:	f001 f927 	bl	800e37c <_realloc_r>
 800d12e:	4606      	mov	r6, r0
 800d130:	2800      	cmp	r0, #0
 800d132:	d1e0      	bne.n	800d0f6 <__ssputs_r+0x5a>
 800d134:	6921      	ldr	r1, [r4, #16]
 800d136:	4650      	mov	r0, sl
 800d138:	f7ff feb8 	bl	800ceac <_free_r>
 800d13c:	230c      	movs	r3, #12
 800d13e:	f8ca 3000 	str.w	r3, [sl]
 800d142:	89a3      	ldrh	r3, [r4, #12]
 800d144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d148:	81a3      	strh	r3, [r4, #12]
 800d14a:	f04f 30ff 	mov.w	r0, #4294967295
 800d14e:	e7e9      	b.n	800d124 <__ssputs_r+0x88>

0800d150 <_svfiprintf_r>:
 800d150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d154:	4698      	mov	r8, r3
 800d156:	898b      	ldrh	r3, [r1, #12]
 800d158:	061b      	lsls	r3, r3, #24
 800d15a:	b09d      	sub	sp, #116	; 0x74
 800d15c:	4607      	mov	r7, r0
 800d15e:	460d      	mov	r5, r1
 800d160:	4614      	mov	r4, r2
 800d162:	d50e      	bpl.n	800d182 <_svfiprintf_r+0x32>
 800d164:	690b      	ldr	r3, [r1, #16]
 800d166:	b963      	cbnz	r3, 800d182 <_svfiprintf_r+0x32>
 800d168:	2140      	movs	r1, #64	; 0x40
 800d16a:	f7ff ff0b 	bl	800cf84 <_malloc_r>
 800d16e:	6028      	str	r0, [r5, #0]
 800d170:	6128      	str	r0, [r5, #16]
 800d172:	b920      	cbnz	r0, 800d17e <_svfiprintf_r+0x2e>
 800d174:	230c      	movs	r3, #12
 800d176:	603b      	str	r3, [r7, #0]
 800d178:	f04f 30ff 	mov.w	r0, #4294967295
 800d17c:	e0d0      	b.n	800d320 <_svfiprintf_r+0x1d0>
 800d17e:	2340      	movs	r3, #64	; 0x40
 800d180:	616b      	str	r3, [r5, #20]
 800d182:	2300      	movs	r3, #0
 800d184:	9309      	str	r3, [sp, #36]	; 0x24
 800d186:	2320      	movs	r3, #32
 800d188:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d18c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d190:	2330      	movs	r3, #48	; 0x30
 800d192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d338 <_svfiprintf_r+0x1e8>
 800d196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d19a:	f04f 0901 	mov.w	r9, #1
 800d19e:	4623      	mov	r3, r4
 800d1a0:	469a      	mov	sl, r3
 800d1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1a6:	b10a      	cbz	r2, 800d1ac <_svfiprintf_r+0x5c>
 800d1a8:	2a25      	cmp	r2, #37	; 0x25
 800d1aa:	d1f9      	bne.n	800d1a0 <_svfiprintf_r+0x50>
 800d1ac:	ebba 0b04 	subs.w	fp, sl, r4
 800d1b0:	d00b      	beq.n	800d1ca <_svfiprintf_r+0x7a>
 800d1b2:	465b      	mov	r3, fp
 800d1b4:	4622      	mov	r2, r4
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	f7ff ff6f 	bl	800d09c <__ssputs_r>
 800d1be:	3001      	adds	r0, #1
 800d1c0:	f000 80a9 	beq.w	800d316 <_svfiprintf_r+0x1c6>
 800d1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1c6:	445a      	add	r2, fp
 800d1c8:	9209      	str	r2, [sp, #36]	; 0x24
 800d1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f000 80a1 	beq.w	800d316 <_svfiprintf_r+0x1c6>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1de:	f10a 0a01 	add.w	sl, sl, #1
 800d1e2:	9304      	str	r3, [sp, #16]
 800d1e4:	9307      	str	r3, [sp, #28]
 800d1e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1ea:	931a      	str	r3, [sp, #104]	; 0x68
 800d1ec:	4654      	mov	r4, sl
 800d1ee:	2205      	movs	r2, #5
 800d1f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1f4:	4850      	ldr	r0, [pc, #320]	; (800d338 <_svfiprintf_r+0x1e8>)
 800d1f6:	f7f3 f823 	bl	8000240 <memchr>
 800d1fa:	9a04      	ldr	r2, [sp, #16]
 800d1fc:	b9d8      	cbnz	r0, 800d236 <_svfiprintf_r+0xe6>
 800d1fe:	06d0      	lsls	r0, r2, #27
 800d200:	bf44      	itt	mi
 800d202:	2320      	movmi	r3, #32
 800d204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d208:	0711      	lsls	r1, r2, #28
 800d20a:	bf44      	itt	mi
 800d20c:	232b      	movmi	r3, #43	; 0x2b
 800d20e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d212:	f89a 3000 	ldrb.w	r3, [sl]
 800d216:	2b2a      	cmp	r3, #42	; 0x2a
 800d218:	d015      	beq.n	800d246 <_svfiprintf_r+0xf6>
 800d21a:	9a07      	ldr	r2, [sp, #28]
 800d21c:	4654      	mov	r4, sl
 800d21e:	2000      	movs	r0, #0
 800d220:	f04f 0c0a 	mov.w	ip, #10
 800d224:	4621      	mov	r1, r4
 800d226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d22a:	3b30      	subs	r3, #48	; 0x30
 800d22c:	2b09      	cmp	r3, #9
 800d22e:	d94d      	bls.n	800d2cc <_svfiprintf_r+0x17c>
 800d230:	b1b0      	cbz	r0, 800d260 <_svfiprintf_r+0x110>
 800d232:	9207      	str	r2, [sp, #28]
 800d234:	e014      	b.n	800d260 <_svfiprintf_r+0x110>
 800d236:	eba0 0308 	sub.w	r3, r0, r8
 800d23a:	fa09 f303 	lsl.w	r3, r9, r3
 800d23e:	4313      	orrs	r3, r2
 800d240:	9304      	str	r3, [sp, #16]
 800d242:	46a2      	mov	sl, r4
 800d244:	e7d2      	b.n	800d1ec <_svfiprintf_r+0x9c>
 800d246:	9b03      	ldr	r3, [sp, #12]
 800d248:	1d19      	adds	r1, r3, #4
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	9103      	str	r1, [sp, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	bfbb      	ittet	lt
 800d252:	425b      	neglt	r3, r3
 800d254:	f042 0202 	orrlt.w	r2, r2, #2
 800d258:	9307      	strge	r3, [sp, #28]
 800d25a:	9307      	strlt	r3, [sp, #28]
 800d25c:	bfb8      	it	lt
 800d25e:	9204      	strlt	r2, [sp, #16]
 800d260:	7823      	ldrb	r3, [r4, #0]
 800d262:	2b2e      	cmp	r3, #46	; 0x2e
 800d264:	d10c      	bne.n	800d280 <_svfiprintf_r+0x130>
 800d266:	7863      	ldrb	r3, [r4, #1]
 800d268:	2b2a      	cmp	r3, #42	; 0x2a
 800d26a:	d134      	bne.n	800d2d6 <_svfiprintf_r+0x186>
 800d26c:	9b03      	ldr	r3, [sp, #12]
 800d26e:	1d1a      	adds	r2, r3, #4
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	9203      	str	r2, [sp, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	bfb8      	it	lt
 800d278:	f04f 33ff 	movlt.w	r3, #4294967295
 800d27c:	3402      	adds	r4, #2
 800d27e:	9305      	str	r3, [sp, #20]
 800d280:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d348 <_svfiprintf_r+0x1f8>
 800d284:	7821      	ldrb	r1, [r4, #0]
 800d286:	2203      	movs	r2, #3
 800d288:	4650      	mov	r0, sl
 800d28a:	f7f2 ffd9 	bl	8000240 <memchr>
 800d28e:	b138      	cbz	r0, 800d2a0 <_svfiprintf_r+0x150>
 800d290:	9b04      	ldr	r3, [sp, #16]
 800d292:	eba0 000a 	sub.w	r0, r0, sl
 800d296:	2240      	movs	r2, #64	; 0x40
 800d298:	4082      	lsls	r2, r0
 800d29a:	4313      	orrs	r3, r2
 800d29c:	3401      	adds	r4, #1
 800d29e:	9304      	str	r3, [sp, #16]
 800d2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2a4:	4825      	ldr	r0, [pc, #148]	; (800d33c <_svfiprintf_r+0x1ec>)
 800d2a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2aa:	2206      	movs	r2, #6
 800d2ac:	f7f2 ffc8 	bl	8000240 <memchr>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	d038      	beq.n	800d326 <_svfiprintf_r+0x1d6>
 800d2b4:	4b22      	ldr	r3, [pc, #136]	; (800d340 <_svfiprintf_r+0x1f0>)
 800d2b6:	bb1b      	cbnz	r3, 800d300 <_svfiprintf_r+0x1b0>
 800d2b8:	9b03      	ldr	r3, [sp, #12]
 800d2ba:	3307      	adds	r3, #7
 800d2bc:	f023 0307 	bic.w	r3, r3, #7
 800d2c0:	3308      	adds	r3, #8
 800d2c2:	9303      	str	r3, [sp, #12]
 800d2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c6:	4433      	add	r3, r6
 800d2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ca:	e768      	b.n	800d19e <_svfiprintf_r+0x4e>
 800d2cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	2001      	movs	r0, #1
 800d2d4:	e7a6      	b.n	800d224 <_svfiprintf_r+0xd4>
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	3401      	adds	r4, #1
 800d2da:	9305      	str	r3, [sp, #20]
 800d2dc:	4619      	mov	r1, r3
 800d2de:	f04f 0c0a 	mov.w	ip, #10
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2e8:	3a30      	subs	r2, #48	; 0x30
 800d2ea:	2a09      	cmp	r2, #9
 800d2ec:	d903      	bls.n	800d2f6 <_svfiprintf_r+0x1a6>
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d0c6      	beq.n	800d280 <_svfiprintf_r+0x130>
 800d2f2:	9105      	str	r1, [sp, #20]
 800d2f4:	e7c4      	b.n	800d280 <_svfiprintf_r+0x130>
 800d2f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e7f0      	b.n	800d2e2 <_svfiprintf_r+0x192>
 800d300:	ab03      	add	r3, sp, #12
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	462a      	mov	r2, r5
 800d306:	4b0f      	ldr	r3, [pc, #60]	; (800d344 <_svfiprintf_r+0x1f4>)
 800d308:	a904      	add	r1, sp, #16
 800d30a:	4638      	mov	r0, r7
 800d30c:	f3af 8000 	nop.w
 800d310:	1c42      	adds	r2, r0, #1
 800d312:	4606      	mov	r6, r0
 800d314:	d1d6      	bne.n	800d2c4 <_svfiprintf_r+0x174>
 800d316:	89ab      	ldrh	r3, [r5, #12]
 800d318:	065b      	lsls	r3, r3, #25
 800d31a:	f53f af2d 	bmi.w	800d178 <_svfiprintf_r+0x28>
 800d31e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d320:	b01d      	add	sp, #116	; 0x74
 800d322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d326:	ab03      	add	r3, sp, #12
 800d328:	9300      	str	r3, [sp, #0]
 800d32a:	462a      	mov	r2, r5
 800d32c:	4b05      	ldr	r3, [pc, #20]	; (800d344 <_svfiprintf_r+0x1f4>)
 800d32e:	a904      	add	r1, sp, #16
 800d330:	4638      	mov	r0, r7
 800d332:	f000 fb8f 	bl	800da54 <_printf_i>
 800d336:	e7eb      	b.n	800d310 <_svfiprintf_r+0x1c0>
 800d338:	0800eccf 	.word	0x0800eccf
 800d33c:	0800ecd9 	.word	0x0800ecd9
 800d340:	00000000 	.word	0x00000000
 800d344:	0800d09d 	.word	0x0800d09d
 800d348:	0800ecd5 	.word	0x0800ecd5

0800d34c <_sungetc_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	1c4b      	adds	r3, r1, #1
 800d350:	4614      	mov	r4, r2
 800d352:	d103      	bne.n	800d35c <_sungetc_r+0x10>
 800d354:	f04f 35ff 	mov.w	r5, #4294967295
 800d358:	4628      	mov	r0, r5
 800d35a:	bd38      	pop	{r3, r4, r5, pc}
 800d35c:	8993      	ldrh	r3, [r2, #12]
 800d35e:	f023 0320 	bic.w	r3, r3, #32
 800d362:	8193      	strh	r3, [r2, #12]
 800d364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d366:	6852      	ldr	r2, [r2, #4]
 800d368:	b2cd      	uxtb	r5, r1
 800d36a:	b18b      	cbz	r3, 800d390 <_sungetc_r+0x44>
 800d36c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d36e:	4293      	cmp	r3, r2
 800d370:	dd08      	ble.n	800d384 <_sungetc_r+0x38>
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	1e5a      	subs	r2, r3, #1
 800d376:	6022      	str	r2, [r4, #0]
 800d378:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d37c:	6863      	ldr	r3, [r4, #4]
 800d37e:	3301      	adds	r3, #1
 800d380:	6063      	str	r3, [r4, #4]
 800d382:	e7e9      	b.n	800d358 <_sungetc_r+0xc>
 800d384:	4621      	mov	r1, r4
 800d386:	f000 febc 	bl	800e102 <__submore>
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d0f1      	beq.n	800d372 <_sungetc_r+0x26>
 800d38e:	e7e1      	b.n	800d354 <_sungetc_r+0x8>
 800d390:	6921      	ldr	r1, [r4, #16]
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	b151      	cbz	r1, 800d3ac <_sungetc_r+0x60>
 800d396:	4299      	cmp	r1, r3
 800d398:	d208      	bcs.n	800d3ac <_sungetc_r+0x60>
 800d39a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d39e:	42a9      	cmp	r1, r5
 800d3a0:	d104      	bne.n	800d3ac <_sungetc_r+0x60>
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	3201      	adds	r2, #1
 800d3a6:	6023      	str	r3, [r4, #0]
 800d3a8:	6062      	str	r2, [r4, #4]
 800d3aa:	e7d5      	b.n	800d358 <_sungetc_r+0xc>
 800d3ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d3b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3b4:	6363      	str	r3, [r4, #52]	; 0x34
 800d3b6:	2303      	movs	r3, #3
 800d3b8:	63a3      	str	r3, [r4, #56]	; 0x38
 800d3ba:	4623      	mov	r3, r4
 800d3bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e7dc      	b.n	800d380 <_sungetc_r+0x34>

0800d3c6 <__ssrefill_r>:
 800d3c6:	b510      	push	{r4, lr}
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d3cc:	b169      	cbz	r1, 800d3ea <__ssrefill_r+0x24>
 800d3ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3d2:	4299      	cmp	r1, r3
 800d3d4:	d001      	beq.n	800d3da <__ssrefill_r+0x14>
 800d3d6:	f7ff fd69 	bl	800ceac <_free_r>
 800d3da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3dc:	6063      	str	r3, [r4, #4]
 800d3de:	2000      	movs	r0, #0
 800d3e0:	6360      	str	r0, [r4, #52]	; 0x34
 800d3e2:	b113      	cbz	r3, 800d3ea <__ssrefill_r+0x24>
 800d3e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d3e6:	6023      	str	r3, [r4, #0]
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	6923      	ldr	r3, [r4, #16]
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	6063      	str	r3, [r4, #4]
 800d3f2:	89a3      	ldrh	r3, [r4, #12]
 800d3f4:	f043 0320 	orr.w	r3, r3, #32
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fe:	e7f3      	b.n	800d3e8 <__ssrefill_r+0x22>

0800d400 <__ssvfiscanf_r>:
 800d400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d404:	460c      	mov	r4, r1
 800d406:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d40a:	2100      	movs	r1, #0
 800d40c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d410:	49a6      	ldr	r1, [pc, #664]	; (800d6ac <__ssvfiscanf_r+0x2ac>)
 800d412:	91a0      	str	r1, [sp, #640]	; 0x280
 800d414:	f10d 0804 	add.w	r8, sp, #4
 800d418:	49a5      	ldr	r1, [pc, #660]	; (800d6b0 <__ssvfiscanf_r+0x2b0>)
 800d41a:	4fa6      	ldr	r7, [pc, #664]	; (800d6b4 <__ssvfiscanf_r+0x2b4>)
 800d41c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d6b8 <__ssvfiscanf_r+0x2b8>
 800d420:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d424:	4606      	mov	r6, r0
 800d426:	91a1      	str	r1, [sp, #644]	; 0x284
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	7813      	ldrb	r3, [r2, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 815a 	beq.w	800d6e6 <__ssvfiscanf_r+0x2e6>
 800d432:	5cf9      	ldrb	r1, [r7, r3]
 800d434:	f011 0108 	ands.w	r1, r1, #8
 800d438:	f102 0501 	add.w	r5, r2, #1
 800d43c:	d019      	beq.n	800d472 <__ssvfiscanf_r+0x72>
 800d43e:	6863      	ldr	r3, [r4, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	dd0f      	ble.n	800d464 <__ssvfiscanf_r+0x64>
 800d444:	6823      	ldr	r3, [r4, #0]
 800d446:	781a      	ldrb	r2, [r3, #0]
 800d448:	5cba      	ldrb	r2, [r7, r2]
 800d44a:	0712      	lsls	r2, r2, #28
 800d44c:	d401      	bmi.n	800d452 <__ssvfiscanf_r+0x52>
 800d44e:	462a      	mov	r2, r5
 800d450:	e7eb      	b.n	800d42a <__ssvfiscanf_r+0x2a>
 800d452:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d454:	3201      	adds	r2, #1
 800d456:	9245      	str	r2, [sp, #276]	; 0x114
 800d458:	6862      	ldr	r2, [r4, #4]
 800d45a:	3301      	adds	r3, #1
 800d45c:	3a01      	subs	r2, #1
 800d45e:	6062      	str	r2, [r4, #4]
 800d460:	6023      	str	r3, [r4, #0]
 800d462:	e7ec      	b.n	800d43e <__ssvfiscanf_r+0x3e>
 800d464:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d466:	4621      	mov	r1, r4
 800d468:	4630      	mov	r0, r6
 800d46a:	4798      	blx	r3
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d0e9      	beq.n	800d444 <__ssvfiscanf_r+0x44>
 800d470:	e7ed      	b.n	800d44e <__ssvfiscanf_r+0x4e>
 800d472:	2b25      	cmp	r3, #37	; 0x25
 800d474:	d012      	beq.n	800d49c <__ssvfiscanf_r+0x9c>
 800d476:	469a      	mov	sl, r3
 800d478:	6863      	ldr	r3, [r4, #4]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f340 8091 	ble.w	800d5a2 <__ssvfiscanf_r+0x1a2>
 800d480:	6822      	ldr	r2, [r4, #0]
 800d482:	7813      	ldrb	r3, [r2, #0]
 800d484:	4553      	cmp	r3, sl
 800d486:	f040 812e 	bne.w	800d6e6 <__ssvfiscanf_r+0x2e6>
 800d48a:	6863      	ldr	r3, [r4, #4]
 800d48c:	3b01      	subs	r3, #1
 800d48e:	6063      	str	r3, [r4, #4]
 800d490:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d492:	3201      	adds	r2, #1
 800d494:	3301      	adds	r3, #1
 800d496:	6022      	str	r2, [r4, #0]
 800d498:	9345      	str	r3, [sp, #276]	; 0x114
 800d49a:	e7d8      	b.n	800d44e <__ssvfiscanf_r+0x4e>
 800d49c:	9141      	str	r1, [sp, #260]	; 0x104
 800d49e:	9143      	str	r1, [sp, #268]	; 0x10c
 800d4a0:	7853      	ldrb	r3, [r2, #1]
 800d4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4a4:	bf02      	ittt	eq
 800d4a6:	2310      	moveq	r3, #16
 800d4a8:	1c95      	addeq	r5, r2, #2
 800d4aa:	9341      	streq	r3, [sp, #260]	; 0x104
 800d4ac:	220a      	movs	r2, #10
 800d4ae:	46aa      	mov	sl, r5
 800d4b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d4b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d4b8:	2b09      	cmp	r3, #9
 800d4ba:	d91c      	bls.n	800d4f6 <__ssvfiscanf_r+0xf6>
 800d4bc:	487e      	ldr	r0, [pc, #504]	; (800d6b8 <__ssvfiscanf_r+0x2b8>)
 800d4be:	2203      	movs	r2, #3
 800d4c0:	f7f2 febe 	bl	8000240 <memchr>
 800d4c4:	b138      	cbz	r0, 800d4d6 <__ssvfiscanf_r+0xd6>
 800d4c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d4c8:	eba0 0009 	sub.w	r0, r0, r9
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	4083      	lsls	r3, r0
 800d4d0:	4313      	orrs	r3, r2
 800d4d2:	9341      	str	r3, [sp, #260]	; 0x104
 800d4d4:	4655      	mov	r5, sl
 800d4d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d4da:	2b78      	cmp	r3, #120	; 0x78
 800d4dc:	d806      	bhi.n	800d4ec <__ssvfiscanf_r+0xec>
 800d4de:	2b57      	cmp	r3, #87	; 0x57
 800d4e0:	d810      	bhi.n	800d504 <__ssvfiscanf_r+0x104>
 800d4e2:	2b25      	cmp	r3, #37	; 0x25
 800d4e4:	d0c7      	beq.n	800d476 <__ssvfiscanf_r+0x76>
 800d4e6:	d857      	bhi.n	800d598 <__ssvfiscanf_r+0x198>
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d065      	beq.n	800d5b8 <__ssvfiscanf_r+0x1b8>
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	9347      	str	r3, [sp, #284]	; 0x11c
 800d4f0:	230a      	movs	r3, #10
 800d4f2:	9342      	str	r3, [sp, #264]	; 0x108
 800d4f4:	e076      	b.n	800d5e4 <__ssvfiscanf_r+0x1e4>
 800d4f6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d4f8:	fb02 1103 	mla	r1, r2, r3, r1
 800d4fc:	3930      	subs	r1, #48	; 0x30
 800d4fe:	9143      	str	r1, [sp, #268]	; 0x10c
 800d500:	4655      	mov	r5, sl
 800d502:	e7d4      	b.n	800d4ae <__ssvfiscanf_r+0xae>
 800d504:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d508:	2a20      	cmp	r2, #32
 800d50a:	d8ef      	bhi.n	800d4ec <__ssvfiscanf_r+0xec>
 800d50c:	a101      	add	r1, pc, #4	; (adr r1, 800d514 <__ssvfiscanf_r+0x114>)
 800d50e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d512:	bf00      	nop
 800d514:	0800d5c7 	.word	0x0800d5c7
 800d518:	0800d4ed 	.word	0x0800d4ed
 800d51c:	0800d4ed 	.word	0x0800d4ed
 800d520:	0800d625 	.word	0x0800d625
 800d524:	0800d4ed 	.word	0x0800d4ed
 800d528:	0800d4ed 	.word	0x0800d4ed
 800d52c:	0800d4ed 	.word	0x0800d4ed
 800d530:	0800d4ed 	.word	0x0800d4ed
 800d534:	0800d4ed 	.word	0x0800d4ed
 800d538:	0800d4ed 	.word	0x0800d4ed
 800d53c:	0800d4ed 	.word	0x0800d4ed
 800d540:	0800d63b 	.word	0x0800d63b
 800d544:	0800d621 	.word	0x0800d621
 800d548:	0800d59f 	.word	0x0800d59f
 800d54c:	0800d59f 	.word	0x0800d59f
 800d550:	0800d59f 	.word	0x0800d59f
 800d554:	0800d4ed 	.word	0x0800d4ed
 800d558:	0800d5dd 	.word	0x0800d5dd
 800d55c:	0800d4ed 	.word	0x0800d4ed
 800d560:	0800d4ed 	.word	0x0800d4ed
 800d564:	0800d4ed 	.word	0x0800d4ed
 800d568:	0800d4ed 	.word	0x0800d4ed
 800d56c:	0800d64b 	.word	0x0800d64b
 800d570:	0800d619 	.word	0x0800d619
 800d574:	0800d5bf 	.word	0x0800d5bf
 800d578:	0800d4ed 	.word	0x0800d4ed
 800d57c:	0800d4ed 	.word	0x0800d4ed
 800d580:	0800d647 	.word	0x0800d647
 800d584:	0800d4ed 	.word	0x0800d4ed
 800d588:	0800d621 	.word	0x0800d621
 800d58c:	0800d4ed 	.word	0x0800d4ed
 800d590:	0800d4ed 	.word	0x0800d4ed
 800d594:	0800d5c7 	.word	0x0800d5c7
 800d598:	3b45      	subs	r3, #69	; 0x45
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d8a6      	bhi.n	800d4ec <__ssvfiscanf_r+0xec>
 800d59e:	2305      	movs	r3, #5
 800d5a0:	e01f      	b.n	800d5e2 <__ssvfiscanf_r+0x1e2>
 800d5a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	4798      	blx	r3
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	f43f af68 	beq.w	800d480 <__ssvfiscanf_r+0x80>
 800d5b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	f040 808d 	bne.w	800d6d2 <__ssvfiscanf_r+0x2d2>
 800d5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5bc:	e08f      	b.n	800d6de <__ssvfiscanf_r+0x2de>
 800d5be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d5c0:	f042 0220 	orr.w	r2, r2, #32
 800d5c4:	9241      	str	r2, [sp, #260]	; 0x104
 800d5c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d5c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5cc:	9241      	str	r2, [sp, #260]	; 0x104
 800d5ce:	2210      	movs	r2, #16
 800d5d0:	2b6f      	cmp	r3, #111	; 0x6f
 800d5d2:	9242      	str	r2, [sp, #264]	; 0x108
 800d5d4:	bf34      	ite	cc
 800d5d6:	2303      	movcc	r3, #3
 800d5d8:	2304      	movcs	r3, #4
 800d5da:	e002      	b.n	800d5e2 <__ssvfiscanf_r+0x1e2>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	9342      	str	r3, [sp, #264]	; 0x108
 800d5e0:	2303      	movs	r3, #3
 800d5e2:	9347      	str	r3, [sp, #284]	; 0x11c
 800d5e4:	6863      	ldr	r3, [r4, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	dd3d      	ble.n	800d666 <__ssvfiscanf_r+0x266>
 800d5ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d5ec:	0659      	lsls	r1, r3, #25
 800d5ee:	d404      	bmi.n	800d5fa <__ssvfiscanf_r+0x1fa>
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	781a      	ldrb	r2, [r3, #0]
 800d5f4:	5cba      	ldrb	r2, [r7, r2]
 800d5f6:	0712      	lsls	r2, r2, #28
 800d5f8:	d43c      	bmi.n	800d674 <__ssvfiscanf_r+0x274>
 800d5fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	dc4b      	bgt.n	800d698 <__ssvfiscanf_r+0x298>
 800d600:	466b      	mov	r3, sp
 800d602:	4622      	mov	r2, r4
 800d604:	a941      	add	r1, sp, #260	; 0x104
 800d606:	4630      	mov	r0, r6
 800d608:	f000 fb46 	bl	800dc98 <_scanf_chars>
 800d60c:	2801      	cmp	r0, #1
 800d60e:	d06a      	beq.n	800d6e6 <__ssvfiscanf_r+0x2e6>
 800d610:	2802      	cmp	r0, #2
 800d612:	f47f af1c 	bne.w	800d44e <__ssvfiscanf_r+0x4e>
 800d616:	e7cb      	b.n	800d5b0 <__ssvfiscanf_r+0x1b0>
 800d618:	2308      	movs	r3, #8
 800d61a:	9342      	str	r3, [sp, #264]	; 0x108
 800d61c:	2304      	movs	r3, #4
 800d61e:	e7e0      	b.n	800d5e2 <__ssvfiscanf_r+0x1e2>
 800d620:	220a      	movs	r2, #10
 800d622:	e7d5      	b.n	800d5d0 <__ssvfiscanf_r+0x1d0>
 800d624:	4629      	mov	r1, r5
 800d626:	4640      	mov	r0, r8
 800d628:	f000 fd32 	bl	800e090 <__sccl>
 800d62c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d632:	9341      	str	r3, [sp, #260]	; 0x104
 800d634:	4605      	mov	r5, r0
 800d636:	2301      	movs	r3, #1
 800d638:	e7d3      	b.n	800d5e2 <__ssvfiscanf_r+0x1e2>
 800d63a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d63c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d640:	9341      	str	r3, [sp, #260]	; 0x104
 800d642:	2300      	movs	r3, #0
 800d644:	e7cd      	b.n	800d5e2 <__ssvfiscanf_r+0x1e2>
 800d646:	2302      	movs	r3, #2
 800d648:	e7cb      	b.n	800d5e2 <__ssvfiscanf_r+0x1e2>
 800d64a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d64c:	06c3      	lsls	r3, r0, #27
 800d64e:	f53f aefe 	bmi.w	800d44e <__ssvfiscanf_r+0x4e>
 800d652:	9b00      	ldr	r3, [sp, #0]
 800d654:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d656:	1d19      	adds	r1, r3, #4
 800d658:	9100      	str	r1, [sp, #0]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	07c0      	lsls	r0, r0, #31
 800d65e:	bf4c      	ite	mi
 800d660:	801a      	strhmi	r2, [r3, #0]
 800d662:	601a      	strpl	r2, [r3, #0]
 800d664:	e6f3      	b.n	800d44e <__ssvfiscanf_r+0x4e>
 800d666:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d668:	4621      	mov	r1, r4
 800d66a:	4630      	mov	r0, r6
 800d66c:	4798      	blx	r3
 800d66e:	2800      	cmp	r0, #0
 800d670:	d0bb      	beq.n	800d5ea <__ssvfiscanf_r+0x1ea>
 800d672:	e79d      	b.n	800d5b0 <__ssvfiscanf_r+0x1b0>
 800d674:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d676:	3201      	adds	r2, #1
 800d678:	9245      	str	r2, [sp, #276]	; 0x114
 800d67a:	6862      	ldr	r2, [r4, #4]
 800d67c:	3a01      	subs	r2, #1
 800d67e:	2a00      	cmp	r2, #0
 800d680:	6062      	str	r2, [r4, #4]
 800d682:	dd02      	ble.n	800d68a <__ssvfiscanf_r+0x28a>
 800d684:	3301      	adds	r3, #1
 800d686:	6023      	str	r3, [r4, #0]
 800d688:	e7b2      	b.n	800d5f0 <__ssvfiscanf_r+0x1f0>
 800d68a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d68c:	4621      	mov	r1, r4
 800d68e:	4630      	mov	r0, r6
 800d690:	4798      	blx	r3
 800d692:	2800      	cmp	r0, #0
 800d694:	d0ac      	beq.n	800d5f0 <__ssvfiscanf_r+0x1f0>
 800d696:	e78b      	b.n	800d5b0 <__ssvfiscanf_r+0x1b0>
 800d698:	2b04      	cmp	r3, #4
 800d69a:	dc0f      	bgt.n	800d6bc <__ssvfiscanf_r+0x2bc>
 800d69c:	466b      	mov	r3, sp
 800d69e:	4622      	mov	r2, r4
 800d6a0:	a941      	add	r1, sp, #260	; 0x104
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	f000 fb52 	bl	800dd4c <_scanf_i>
 800d6a8:	e7b0      	b.n	800d60c <__ssvfiscanf_r+0x20c>
 800d6aa:	bf00      	nop
 800d6ac:	0800d34d 	.word	0x0800d34d
 800d6b0:	0800d3c7 	.word	0x0800d3c7
 800d6b4:	0800ed1e 	.word	0x0800ed1e
 800d6b8:	0800ecd5 	.word	0x0800ecd5
 800d6bc:	4b0b      	ldr	r3, [pc, #44]	; (800d6ec <__ssvfiscanf_r+0x2ec>)
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f43f aec5 	beq.w	800d44e <__ssvfiscanf_r+0x4e>
 800d6c4:	466b      	mov	r3, sp
 800d6c6:	4622      	mov	r2, r4
 800d6c8:	a941      	add	r1, sp, #260	; 0x104
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	e79c      	b.n	800d60c <__ssvfiscanf_r+0x20c>
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d6d8:	bf18      	it	ne
 800d6da:	f04f 30ff 	movne.w	r0, #4294967295
 800d6de:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6e6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d6e8:	e7f9      	b.n	800d6de <__ssvfiscanf_r+0x2de>
 800d6ea:	bf00      	nop
 800d6ec:	00000000 	.word	0x00000000

0800d6f0 <__sfputc_r>:
 800d6f0:	6893      	ldr	r3, [r2, #8]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	b410      	push	{r4}
 800d6f8:	6093      	str	r3, [r2, #8]
 800d6fa:	da08      	bge.n	800d70e <__sfputc_r+0x1e>
 800d6fc:	6994      	ldr	r4, [r2, #24]
 800d6fe:	42a3      	cmp	r3, r4
 800d700:	db01      	blt.n	800d706 <__sfputc_r+0x16>
 800d702:	290a      	cmp	r1, #10
 800d704:	d103      	bne.n	800d70e <__sfputc_r+0x1e>
 800d706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d70a:	f000 bd34 	b.w	800e176 <__swbuf_r>
 800d70e:	6813      	ldr	r3, [r2, #0]
 800d710:	1c58      	adds	r0, r3, #1
 800d712:	6010      	str	r0, [r2, #0]
 800d714:	7019      	strb	r1, [r3, #0]
 800d716:	4608      	mov	r0, r1
 800d718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <__sfputs_r>:
 800d71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d720:	4606      	mov	r6, r0
 800d722:	460f      	mov	r7, r1
 800d724:	4614      	mov	r4, r2
 800d726:	18d5      	adds	r5, r2, r3
 800d728:	42ac      	cmp	r4, r5
 800d72a:	d101      	bne.n	800d730 <__sfputs_r+0x12>
 800d72c:	2000      	movs	r0, #0
 800d72e:	e007      	b.n	800d740 <__sfputs_r+0x22>
 800d730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d734:	463a      	mov	r2, r7
 800d736:	4630      	mov	r0, r6
 800d738:	f7ff ffda 	bl	800d6f0 <__sfputc_r>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d1f3      	bne.n	800d728 <__sfputs_r+0xa>
 800d740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d744 <_vfiprintf_r>:
 800d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d748:	460d      	mov	r5, r1
 800d74a:	b09d      	sub	sp, #116	; 0x74
 800d74c:	4614      	mov	r4, r2
 800d74e:	4698      	mov	r8, r3
 800d750:	4606      	mov	r6, r0
 800d752:	b118      	cbz	r0, 800d75c <_vfiprintf_r+0x18>
 800d754:	6a03      	ldr	r3, [r0, #32]
 800d756:	b90b      	cbnz	r3, 800d75c <_vfiprintf_r+0x18>
 800d758:	f7ff f9f8 	bl	800cb4c <__sinit>
 800d75c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d75e:	07d9      	lsls	r1, r3, #31
 800d760:	d405      	bmi.n	800d76e <_vfiprintf_r+0x2a>
 800d762:	89ab      	ldrh	r3, [r5, #12]
 800d764:	059a      	lsls	r2, r3, #22
 800d766:	d402      	bmi.n	800d76e <_vfiprintf_r+0x2a>
 800d768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d76a:	f7ff fb88 	bl	800ce7e <__retarget_lock_acquire_recursive>
 800d76e:	89ab      	ldrh	r3, [r5, #12]
 800d770:	071b      	lsls	r3, r3, #28
 800d772:	d501      	bpl.n	800d778 <_vfiprintf_r+0x34>
 800d774:	692b      	ldr	r3, [r5, #16]
 800d776:	b99b      	cbnz	r3, 800d7a0 <_vfiprintf_r+0x5c>
 800d778:	4629      	mov	r1, r5
 800d77a:	4630      	mov	r0, r6
 800d77c:	f000 fd38 	bl	800e1f0 <__swsetup_r>
 800d780:	b170      	cbz	r0, 800d7a0 <_vfiprintf_r+0x5c>
 800d782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d784:	07dc      	lsls	r4, r3, #31
 800d786:	d504      	bpl.n	800d792 <_vfiprintf_r+0x4e>
 800d788:	f04f 30ff 	mov.w	r0, #4294967295
 800d78c:	b01d      	add	sp, #116	; 0x74
 800d78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d792:	89ab      	ldrh	r3, [r5, #12]
 800d794:	0598      	lsls	r0, r3, #22
 800d796:	d4f7      	bmi.n	800d788 <_vfiprintf_r+0x44>
 800d798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d79a:	f7ff fb71 	bl	800ce80 <__retarget_lock_release_recursive>
 800d79e:	e7f3      	b.n	800d788 <_vfiprintf_r+0x44>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a4:	2320      	movs	r3, #32
 800d7a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7ae:	2330      	movs	r3, #48	; 0x30
 800d7b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d964 <_vfiprintf_r+0x220>
 800d7b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7b8:	f04f 0901 	mov.w	r9, #1
 800d7bc:	4623      	mov	r3, r4
 800d7be:	469a      	mov	sl, r3
 800d7c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7c4:	b10a      	cbz	r2, 800d7ca <_vfiprintf_r+0x86>
 800d7c6:	2a25      	cmp	r2, #37	; 0x25
 800d7c8:	d1f9      	bne.n	800d7be <_vfiprintf_r+0x7a>
 800d7ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d7ce:	d00b      	beq.n	800d7e8 <_vfiprintf_r+0xa4>
 800d7d0:	465b      	mov	r3, fp
 800d7d2:	4622      	mov	r2, r4
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	4630      	mov	r0, r6
 800d7d8:	f7ff ffa1 	bl	800d71e <__sfputs_r>
 800d7dc:	3001      	adds	r0, #1
 800d7de:	f000 80a9 	beq.w	800d934 <_vfiprintf_r+0x1f0>
 800d7e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7e4:	445a      	add	r2, fp
 800d7e6:	9209      	str	r2, [sp, #36]	; 0x24
 800d7e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	f000 80a1 	beq.w	800d934 <_vfiprintf_r+0x1f0>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7fc:	f10a 0a01 	add.w	sl, sl, #1
 800d800:	9304      	str	r3, [sp, #16]
 800d802:	9307      	str	r3, [sp, #28]
 800d804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d808:	931a      	str	r3, [sp, #104]	; 0x68
 800d80a:	4654      	mov	r4, sl
 800d80c:	2205      	movs	r2, #5
 800d80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d812:	4854      	ldr	r0, [pc, #336]	; (800d964 <_vfiprintf_r+0x220>)
 800d814:	f7f2 fd14 	bl	8000240 <memchr>
 800d818:	9a04      	ldr	r2, [sp, #16]
 800d81a:	b9d8      	cbnz	r0, 800d854 <_vfiprintf_r+0x110>
 800d81c:	06d1      	lsls	r1, r2, #27
 800d81e:	bf44      	itt	mi
 800d820:	2320      	movmi	r3, #32
 800d822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d826:	0713      	lsls	r3, r2, #28
 800d828:	bf44      	itt	mi
 800d82a:	232b      	movmi	r3, #43	; 0x2b
 800d82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d830:	f89a 3000 	ldrb.w	r3, [sl]
 800d834:	2b2a      	cmp	r3, #42	; 0x2a
 800d836:	d015      	beq.n	800d864 <_vfiprintf_r+0x120>
 800d838:	9a07      	ldr	r2, [sp, #28]
 800d83a:	4654      	mov	r4, sl
 800d83c:	2000      	movs	r0, #0
 800d83e:	f04f 0c0a 	mov.w	ip, #10
 800d842:	4621      	mov	r1, r4
 800d844:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d848:	3b30      	subs	r3, #48	; 0x30
 800d84a:	2b09      	cmp	r3, #9
 800d84c:	d94d      	bls.n	800d8ea <_vfiprintf_r+0x1a6>
 800d84e:	b1b0      	cbz	r0, 800d87e <_vfiprintf_r+0x13a>
 800d850:	9207      	str	r2, [sp, #28]
 800d852:	e014      	b.n	800d87e <_vfiprintf_r+0x13a>
 800d854:	eba0 0308 	sub.w	r3, r0, r8
 800d858:	fa09 f303 	lsl.w	r3, r9, r3
 800d85c:	4313      	orrs	r3, r2
 800d85e:	9304      	str	r3, [sp, #16]
 800d860:	46a2      	mov	sl, r4
 800d862:	e7d2      	b.n	800d80a <_vfiprintf_r+0xc6>
 800d864:	9b03      	ldr	r3, [sp, #12]
 800d866:	1d19      	adds	r1, r3, #4
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	9103      	str	r1, [sp, #12]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	bfbb      	ittet	lt
 800d870:	425b      	neglt	r3, r3
 800d872:	f042 0202 	orrlt.w	r2, r2, #2
 800d876:	9307      	strge	r3, [sp, #28]
 800d878:	9307      	strlt	r3, [sp, #28]
 800d87a:	bfb8      	it	lt
 800d87c:	9204      	strlt	r2, [sp, #16]
 800d87e:	7823      	ldrb	r3, [r4, #0]
 800d880:	2b2e      	cmp	r3, #46	; 0x2e
 800d882:	d10c      	bne.n	800d89e <_vfiprintf_r+0x15a>
 800d884:	7863      	ldrb	r3, [r4, #1]
 800d886:	2b2a      	cmp	r3, #42	; 0x2a
 800d888:	d134      	bne.n	800d8f4 <_vfiprintf_r+0x1b0>
 800d88a:	9b03      	ldr	r3, [sp, #12]
 800d88c:	1d1a      	adds	r2, r3, #4
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	9203      	str	r2, [sp, #12]
 800d892:	2b00      	cmp	r3, #0
 800d894:	bfb8      	it	lt
 800d896:	f04f 33ff 	movlt.w	r3, #4294967295
 800d89a:	3402      	adds	r4, #2
 800d89c:	9305      	str	r3, [sp, #20]
 800d89e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d974 <_vfiprintf_r+0x230>
 800d8a2:	7821      	ldrb	r1, [r4, #0]
 800d8a4:	2203      	movs	r2, #3
 800d8a6:	4650      	mov	r0, sl
 800d8a8:	f7f2 fcca 	bl	8000240 <memchr>
 800d8ac:	b138      	cbz	r0, 800d8be <_vfiprintf_r+0x17a>
 800d8ae:	9b04      	ldr	r3, [sp, #16]
 800d8b0:	eba0 000a 	sub.w	r0, r0, sl
 800d8b4:	2240      	movs	r2, #64	; 0x40
 800d8b6:	4082      	lsls	r2, r0
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	3401      	adds	r4, #1
 800d8bc:	9304      	str	r3, [sp, #16]
 800d8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c2:	4829      	ldr	r0, [pc, #164]	; (800d968 <_vfiprintf_r+0x224>)
 800d8c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8c8:	2206      	movs	r2, #6
 800d8ca:	f7f2 fcb9 	bl	8000240 <memchr>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d03f      	beq.n	800d952 <_vfiprintf_r+0x20e>
 800d8d2:	4b26      	ldr	r3, [pc, #152]	; (800d96c <_vfiprintf_r+0x228>)
 800d8d4:	bb1b      	cbnz	r3, 800d91e <_vfiprintf_r+0x1da>
 800d8d6:	9b03      	ldr	r3, [sp, #12]
 800d8d8:	3307      	adds	r3, #7
 800d8da:	f023 0307 	bic.w	r3, r3, #7
 800d8de:	3308      	adds	r3, #8
 800d8e0:	9303      	str	r3, [sp, #12]
 800d8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8e4:	443b      	add	r3, r7
 800d8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d8e8:	e768      	b.n	800d7bc <_vfiprintf_r+0x78>
 800d8ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8ee:	460c      	mov	r4, r1
 800d8f0:	2001      	movs	r0, #1
 800d8f2:	e7a6      	b.n	800d842 <_vfiprintf_r+0xfe>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	3401      	adds	r4, #1
 800d8f8:	9305      	str	r3, [sp, #20]
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	f04f 0c0a 	mov.w	ip, #10
 800d900:	4620      	mov	r0, r4
 800d902:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d906:	3a30      	subs	r2, #48	; 0x30
 800d908:	2a09      	cmp	r2, #9
 800d90a:	d903      	bls.n	800d914 <_vfiprintf_r+0x1d0>
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d0c6      	beq.n	800d89e <_vfiprintf_r+0x15a>
 800d910:	9105      	str	r1, [sp, #20]
 800d912:	e7c4      	b.n	800d89e <_vfiprintf_r+0x15a>
 800d914:	fb0c 2101 	mla	r1, ip, r1, r2
 800d918:	4604      	mov	r4, r0
 800d91a:	2301      	movs	r3, #1
 800d91c:	e7f0      	b.n	800d900 <_vfiprintf_r+0x1bc>
 800d91e:	ab03      	add	r3, sp, #12
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	462a      	mov	r2, r5
 800d924:	4b12      	ldr	r3, [pc, #72]	; (800d970 <_vfiprintf_r+0x22c>)
 800d926:	a904      	add	r1, sp, #16
 800d928:	4630      	mov	r0, r6
 800d92a:	f3af 8000 	nop.w
 800d92e:	4607      	mov	r7, r0
 800d930:	1c78      	adds	r0, r7, #1
 800d932:	d1d6      	bne.n	800d8e2 <_vfiprintf_r+0x19e>
 800d934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d936:	07d9      	lsls	r1, r3, #31
 800d938:	d405      	bmi.n	800d946 <_vfiprintf_r+0x202>
 800d93a:	89ab      	ldrh	r3, [r5, #12]
 800d93c:	059a      	lsls	r2, r3, #22
 800d93e:	d402      	bmi.n	800d946 <_vfiprintf_r+0x202>
 800d940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d942:	f7ff fa9d 	bl	800ce80 <__retarget_lock_release_recursive>
 800d946:	89ab      	ldrh	r3, [r5, #12]
 800d948:	065b      	lsls	r3, r3, #25
 800d94a:	f53f af1d 	bmi.w	800d788 <_vfiprintf_r+0x44>
 800d94e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d950:	e71c      	b.n	800d78c <_vfiprintf_r+0x48>
 800d952:	ab03      	add	r3, sp, #12
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	462a      	mov	r2, r5
 800d958:	4b05      	ldr	r3, [pc, #20]	; (800d970 <_vfiprintf_r+0x22c>)
 800d95a:	a904      	add	r1, sp, #16
 800d95c:	4630      	mov	r0, r6
 800d95e:	f000 f879 	bl	800da54 <_printf_i>
 800d962:	e7e4      	b.n	800d92e <_vfiprintf_r+0x1ea>
 800d964:	0800eccf 	.word	0x0800eccf
 800d968:	0800ecd9 	.word	0x0800ecd9
 800d96c:	00000000 	.word	0x00000000
 800d970:	0800d71f 	.word	0x0800d71f
 800d974:	0800ecd5 	.word	0x0800ecd5

0800d978 <_printf_common>:
 800d978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d97c:	4616      	mov	r6, r2
 800d97e:	4699      	mov	r9, r3
 800d980:	688a      	ldr	r2, [r1, #8]
 800d982:	690b      	ldr	r3, [r1, #16]
 800d984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d988:	4293      	cmp	r3, r2
 800d98a:	bfb8      	it	lt
 800d98c:	4613      	movlt	r3, r2
 800d98e:	6033      	str	r3, [r6, #0]
 800d990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d994:	4607      	mov	r7, r0
 800d996:	460c      	mov	r4, r1
 800d998:	b10a      	cbz	r2, 800d99e <_printf_common+0x26>
 800d99a:	3301      	adds	r3, #1
 800d99c:	6033      	str	r3, [r6, #0]
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	0699      	lsls	r1, r3, #26
 800d9a2:	bf42      	ittt	mi
 800d9a4:	6833      	ldrmi	r3, [r6, #0]
 800d9a6:	3302      	addmi	r3, #2
 800d9a8:	6033      	strmi	r3, [r6, #0]
 800d9aa:	6825      	ldr	r5, [r4, #0]
 800d9ac:	f015 0506 	ands.w	r5, r5, #6
 800d9b0:	d106      	bne.n	800d9c0 <_printf_common+0x48>
 800d9b2:	f104 0a19 	add.w	sl, r4, #25
 800d9b6:	68e3      	ldr	r3, [r4, #12]
 800d9b8:	6832      	ldr	r2, [r6, #0]
 800d9ba:	1a9b      	subs	r3, r3, r2
 800d9bc:	42ab      	cmp	r3, r5
 800d9be:	dc26      	bgt.n	800da0e <_printf_common+0x96>
 800d9c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9c4:	1e13      	subs	r3, r2, #0
 800d9c6:	6822      	ldr	r2, [r4, #0]
 800d9c8:	bf18      	it	ne
 800d9ca:	2301      	movne	r3, #1
 800d9cc:	0692      	lsls	r2, r2, #26
 800d9ce:	d42b      	bmi.n	800da28 <_printf_common+0xb0>
 800d9d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9d4:	4649      	mov	r1, r9
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	47c0      	blx	r8
 800d9da:	3001      	adds	r0, #1
 800d9dc:	d01e      	beq.n	800da1c <_printf_common+0xa4>
 800d9de:	6823      	ldr	r3, [r4, #0]
 800d9e0:	6922      	ldr	r2, [r4, #16]
 800d9e2:	f003 0306 	and.w	r3, r3, #6
 800d9e6:	2b04      	cmp	r3, #4
 800d9e8:	bf02      	ittt	eq
 800d9ea:	68e5      	ldreq	r5, [r4, #12]
 800d9ec:	6833      	ldreq	r3, [r6, #0]
 800d9ee:	1aed      	subeq	r5, r5, r3
 800d9f0:	68a3      	ldr	r3, [r4, #8]
 800d9f2:	bf0c      	ite	eq
 800d9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9f8:	2500      	movne	r5, #0
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	bfc4      	itt	gt
 800d9fe:	1a9b      	subgt	r3, r3, r2
 800da00:	18ed      	addgt	r5, r5, r3
 800da02:	2600      	movs	r6, #0
 800da04:	341a      	adds	r4, #26
 800da06:	42b5      	cmp	r5, r6
 800da08:	d11a      	bne.n	800da40 <_printf_common+0xc8>
 800da0a:	2000      	movs	r0, #0
 800da0c:	e008      	b.n	800da20 <_printf_common+0xa8>
 800da0e:	2301      	movs	r3, #1
 800da10:	4652      	mov	r2, sl
 800da12:	4649      	mov	r1, r9
 800da14:	4638      	mov	r0, r7
 800da16:	47c0      	blx	r8
 800da18:	3001      	adds	r0, #1
 800da1a:	d103      	bne.n	800da24 <_printf_common+0xac>
 800da1c:	f04f 30ff 	mov.w	r0, #4294967295
 800da20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da24:	3501      	adds	r5, #1
 800da26:	e7c6      	b.n	800d9b6 <_printf_common+0x3e>
 800da28:	18e1      	adds	r1, r4, r3
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	2030      	movs	r0, #48	; 0x30
 800da2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da32:	4422      	add	r2, r4
 800da34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da3c:	3302      	adds	r3, #2
 800da3e:	e7c7      	b.n	800d9d0 <_printf_common+0x58>
 800da40:	2301      	movs	r3, #1
 800da42:	4622      	mov	r2, r4
 800da44:	4649      	mov	r1, r9
 800da46:	4638      	mov	r0, r7
 800da48:	47c0      	blx	r8
 800da4a:	3001      	adds	r0, #1
 800da4c:	d0e6      	beq.n	800da1c <_printf_common+0xa4>
 800da4e:	3601      	adds	r6, #1
 800da50:	e7d9      	b.n	800da06 <_printf_common+0x8e>
	...

0800da54 <_printf_i>:
 800da54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da58:	7e0f      	ldrb	r7, [r1, #24]
 800da5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da5c:	2f78      	cmp	r7, #120	; 0x78
 800da5e:	4691      	mov	r9, r2
 800da60:	4680      	mov	r8, r0
 800da62:	460c      	mov	r4, r1
 800da64:	469a      	mov	sl, r3
 800da66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da6a:	d807      	bhi.n	800da7c <_printf_i+0x28>
 800da6c:	2f62      	cmp	r7, #98	; 0x62
 800da6e:	d80a      	bhi.n	800da86 <_printf_i+0x32>
 800da70:	2f00      	cmp	r7, #0
 800da72:	f000 80d4 	beq.w	800dc1e <_printf_i+0x1ca>
 800da76:	2f58      	cmp	r7, #88	; 0x58
 800da78:	f000 80c0 	beq.w	800dbfc <_printf_i+0x1a8>
 800da7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da84:	e03a      	b.n	800dafc <_printf_i+0xa8>
 800da86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da8a:	2b15      	cmp	r3, #21
 800da8c:	d8f6      	bhi.n	800da7c <_printf_i+0x28>
 800da8e:	a101      	add	r1, pc, #4	; (adr r1, 800da94 <_printf_i+0x40>)
 800da90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da94:	0800daed 	.word	0x0800daed
 800da98:	0800db01 	.word	0x0800db01
 800da9c:	0800da7d 	.word	0x0800da7d
 800daa0:	0800da7d 	.word	0x0800da7d
 800daa4:	0800da7d 	.word	0x0800da7d
 800daa8:	0800da7d 	.word	0x0800da7d
 800daac:	0800db01 	.word	0x0800db01
 800dab0:	0800da7d 	.word	0x0800da7d
 800dab4:	0800da7d 	.word	0x0800da7d
 800dab8:	0800da7d 	.word	0x0800da7d
 800dabc:	0800da7d 	.word	0x0800da7d
 800dac0:	0800dc05 	.word	0x0800dc05
 800dac4:	0800db2d 	.word	0x0800db2d
 800dac8:	0800dbbf 	.word	0x0800dbbf
 800dacc:	0800da7d 	.word	0x0800da7d
 800dad0:	0800da7d 	.word	0x0800da7d
 800dad4:	0800dc27 	.word	0x0800dc27
 800dad8:	0800da7d 	.word	0x0800da7d
 800dadc:	0800db2d 	.word	0x0800db2d
 800dae0:	0800da7d 	.word	0x0800da7d
 800dae4:	0800da7d 	.word	0x0800da7d
 800dae8:	0800dbc7 	.word	0x0800dbc7
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	1d1a      	adds	r2, r3, #4
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	602a      	str	r2, [r5, #0]
 800daf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800daf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dafc:	2301      	movs	r3, #1
 800dafe:	e09f      	b.n	800dc40 <_printf_i+0x1ec>
 800db00:	6820      	ldr	r0, [r4, #0]
 800db02:	682b      	ldr	r3, [r5, #0]
 800db04:	0607      	lsls	r7, r0, #24
 800db06:	f103 0104 	add.w	r1, r3, #4
 800db0a:	6029      	str	r1, [r5, #0]
 800db0c:	d501      	bpl.n	800db12 <_printf_i+0xbe>
 800db0e:	681e      	ldr	r6, [r3, #0]
 800db10:	e003      	b.n	800db1a <_printf_i+0xc6>
 800db12:	0646      	lsls	r6, r0, #25
 800db14:	d5fb      	bpl.n	800db0e <_printf_i+0xba>
 800db16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800db1a:	2e00      	cmp	r6, #0
 800db1c:	da03      	bge.n	800db26 <_printf_i+0xd2>
 800db1e:	232d      	movs	r3, #45	; 0x2d
 800db20:	4276      	negs	r6, r6
 800db22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db26:	485a      	ldr	r0, [pc, #360]	; (800dc90 <_printf_i+0x23c>)
 800db28:	230a      	movs	r3, #10
 800db2a:	e012      	b.n	800db52 <_printf_i+0xfe>
 800db2c:	682b      	ldr	r3, [r5, #0]
 800db2e:	6820      	ldr	r0, [r4, #0]
 800db30:	1d19      	adds	r1, r3, #4
 800db32:	6029      	str	r1, [r5, #0]
 800db34:	0605      	lsls	r5, r0, #24
 800db36:	d501      	bpl.n	800db3c <_printf_i+0xe8>
 800db38:	681e      	ldr	r6, [r3, #0]
 800db3a:	e002      	b.n	800db42 <_printf_i+0xee>
 800db3c:	0641      	lsls	r1, r0, #25
 800db3e:	d5fb      	bpl.n	800db38 <_printf_i+0xe4>
 800db40:	881e      	ldrh	r6, [r3, #0]
 800db42:	4853      	ldr	r0, [pc, #332]	; (800dc90 <_printf_i+0x23c>)
 800db44:	2f6f      	cmp	r7, #111	; 0x6f
 800db46:	bf0c      	ite	eq
 800db48:	2308      	moveq	r3, #8
 800db4a:	230a      	movne	r3, #10
 800db4c:	2100      	movs	r1, #0
 800db4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db52:	6865      	ldr	r5, [r4, #4]
 800db54:	60a5      	str	r5, [r4, #8]
 800db56:	2d00      	cmp	r5, #0
 800db58:	bfa2      	ittt	ge
 800db5a:	6821      	ldrge	r1, [r4, #0]
 800db5c:	f021 0104 	bicge.w	r1, r1, #4
 800db60:	6021      	strge	r1, [r4, #0]
 800db62:	b90e      	cbnz	r6, 800db68 <_printf_i+0x114>
 800db64:	2d00      	cmp	r5, #0
 800db66:	d04b      	beq.n	800dc00 <_printf_i+0x1ac>
 800db68:	4615      	mov	r5, r2
 800db6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800db6e:	fb03 6711 	mls	r7, r3, r1, r6
 800db72:	5dc7      	ldrb	r7, [r0, r7]
 800db74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db78:	4637      	mov	r7, r6
 800db7a:	42bb      	cmp	r3, r7
 800db7c:	460e      	mov	r6, r1
 800db7e:	d9f4      	bls.n	800db6a <_printf_i+0x116>
 800db80:	2b08      	cmp	r3, #8
 800db82:	d10b      	bne.n	800db9c <_printf_i+0x148>
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	07de      	lsls	r6, r3, #31
 800db88:	d508      	bpl.n	800db9c <_printf_i+0x148>
 800db8a:	6923      	ldr	r3, [r4, #16]
 800db8c:	6861      	ldr	r1, [r4, #4]
 800db8e:	4299      	cmp	r1, r3
 800db90:	bfde      	ittt	le
 800db92:	2330      	movle	r3, #48	; 0x30
 800db94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db9c:	1b52      	subs	r2, r2, r5
 800db9e:	6122      	str	r2, [r4, #16]
 800dba0:	f8cd a000 	str.w	sl, [sp]
 800dba4:	464b      	mov	r3, r9
 800dba6:	aa03      	add	r2, sp, #12
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4640      	mov	r0, r8
 800dbac:	f7ff fee4 	bl	800d978 <_printf_common>
 800dbb0:	3001      	adds	r0, #1
 800dbb2:	d14a      	bne.n	800dc4a <_printf_i+0x1f6>
 800dbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb8:	b004      	add	sp, #16
 800dbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbbe:	6823      	ldr	r3, [r4, #0]
 800dbc0:	f043 0320 	orr.w	r3, r3, #32
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	4833      	ldr	r0, [pc, #204]	; (800dc94 <_printf_i+0x240>)
 800dbc8:	2778      	movs	r7, #120	; 0x78
 800dbca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	6829      	ldr	r1, [r5, #0]
 800dbd2:	061f      	lsls	r7, r3, #24
 800dbd4:	f851 6b04 	ldr.w	r6, [r1], #4
 800dbd8:	d402      	bmi.n	800dbe0 <_printf_i+0x18c>
 800dbda:	065f      	lsls	r7, r3, #25
 800dbdc:	bf48      	it	mi
 800dbde:	b2b6      	uxthmi	r6, r6
 800dbe0:	07df      	lsls	r7, r3, #31
 800dbe2:	bf48      	it	mi
 800dbe4:	f043 0320 	orrmi.w	r3, r3, #32
 800dbe8:	6029      	str	r1, [r5, #0]
 800dbea:	bf48      	it	mi
 800dbec:	6023      	strmi	r3, [r4, #0]
 800dbee:	b91e      	cbnz	r6, 800dbf8 <_printf_i+0x1a4>
 800dbf0:	6823      	ldr	r3, [r4, #0]
 800dbf2:	f023 0320 	bic.w	r3, r3, #32
 800dbf6:	6023      	str	r3, [r4, #0]
 800dbf8:	2310      	movs	r3, #16
 800dbfa:	e7a7      	b.n	800db4c <_printf_i+0xf8>
 800dbfc:	4824      	ldr	r0, [pc, #144]	; (800dc90 <_printf_i+0x23c>)
 800dbfe:	e7e4      	b.n	800dbca <_printf_i+0x176>
 800dc00:	4615      	mov	r5, r2
 800dc02:	e7bd      	b.n	800db80 <_printf_i+0x12c>
 800dc04:	682b      	ldr	r3, [r5, #0]
 800dc06:	6826      	ldr	r6, [r4, #0]
 800dc08:	6961      	ldr	r1, [r4, #20]
 800dc0a:	1d18      	adds	r0, r3, #4
 800dc0c:	6028      	str	r0, [r5, #0]
 800dc0e:	0635      	lsls	r5, r6, #24
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	d501      	bpl.n	800dc18 <_printf_i+0x1c4>
 800dc14:	6019      	str	r1, [r3, #0]
 800dc16:	e002      	b.n	800dc1e <_printf_i+0x1ca>
 800dc18:	0670      	lsls	r0, r6, #25
 800dc1a:	d5fb      	bpl.n	800dc14 <_printf_i+0x1c0>
 800dc1c:	8019      	strh	r1, [r3, #0]
 800dc1e:	2300      	movs	r3, #0
 800dc20:	6123      	str	r3, [r4, #16]
 800dc22:	4615      	mov	r5, r2
 800dc24:	e7bc      	b.n	800dba0 <_printf_i+0x14c>
 800dc26:	682b      	ldr	r3, [r5, #0]
 800dc28:	1d1a      	adds	r2, r3, #4
 800dc2a:	602a      	str	r2, [r5, #0]
 800dc2c:	681d      	ldr	r5, [r3, #0]
 800dc2e:	6862      	ldr	r2, [r4, #4]
 800dc30:	2100      	movs	r1, #0
 800dc32:	4628      	mov	r0, r5
 800dc34:	f7f2 fb04 	bl	8000240 <memchr>
 800dc38:	b108      	cbz	r0, 800dc3e <_printf_i+0x1ea>
 800dc3a:	1b40      	subs	r0, r0, r5
 800dc3c:	6060      	str	r0, [r4, #4]
 800dc3e:	6863      	ldr	r3, [r4, #4]
 800dc40:	6123      	str	r3, [r4, #16]
 800dc42:	2300      	movs	r3, #0
 800dc44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc48:	e7aa      	b.n	800dba0 <_printf_i+0x14c>
 800dc4a:	6923      	ldr	r3, [r4, #16]
 800dc4c:	462a      	mov	r2, r5
 800dc4e:	4649      	mov	r1, r9
 800dc50:	4640      	mov	r0, r8
 800dc52:	47d0      	blx	sl
 800dc54:	3001      	adds	r0, #1
 800dc56:	d0ad      	beq.n	800dbb4 <_printf_i+0x160>
 800dc58:	6823      	ldr	r3, [r4, #0]
 800dc5a:	079b      	lsls	r3, r3, #30
 800dc5c:	d413      	bmi.n	800dc86 <_printf_i+0x232>
 800dc5e:	68e0      	ldr	r0, [r4, #12]
 800dc60:	9b03      	ldr	r3, [sp, #12]
 800dc62:	4298      	cmp	r0, r3
 800dc64:	bfb8      	it	lt
 800dc66:	4618      	movlt	r0, r3
 800dc68:	e7a6      	b.n	800dbb8 <_printf_i+0x164>
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	4632      	mov	r2, r6
 800dc6e:	4649      	mov	r1, r9
 800dc70:	4640      	mov	r0, r8
 800dc72:	47d0      	blx	sl
 800dc74:	3001      	adds	r0, #1
 800dc76:	d09d      	beq.n	800dbb4 <_printf_i+0x160>
 800dc78:	3501      	adds	r5, #1
 800dc7a:	68e3      	ldr	r3, [r4, #12]
 800dc7c:	9903      	ldr	r1, [sp, #12]
 800dc7e:	1a5b      	subs	r3, r3, r1
 800dc80:	42ab      	cmp	r3, r5
 800dc82:	dcf2      	bgt.n	800dc6a <_printf_i+0x216>
 800dc84:	e7eb      	b.n	800dc5e <_printf_i+0x20a>
 800dc86:	2500      	movs	r5, #0
 800dc88:	f104 0619 	add.w	r6, r4, #25
 800dc8c:	e7f5      	b.n	800dc7a <_printf_i+0x226>
 800dc8e:	bf00      	nop
 800dc90:	0800ece0 	.word	0x0800ece0
 800dc94:	0800ecf1 	.word	0x0800ecf1

0800dc98 <_scanf_chars>:
 800dc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc9c:	4615      	mov	r5, r2
 800dc9e:	688a      	ldr	r2, [r1, #8]
 800dca0:	4680      	mov	r8, r0
 800dca2:	460c      	mov	r4, r1
 800dca4:	b932      	cbnz	r2, 800dcb4 <_scanf_chars+0x1c>
 800dca6:	698a      	ldr	r2, [r1, #24]
 800dca8:	2a00      	cmp	r2, #0
 800dcaa:	bf0c      	ite	eq
 800dcac:	2201      	moveq	r2, #1
 800dcae:	f04f 32ff 	movne.w	r2, #4294967295
 800dcb2:	608a      	str	r2, [r1, #8]
 800dcb4:	6822      	ldr	r2, [r4, #0]
 800dcb6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800dd48 <_scanf_chars+0xb0>
 800dcba:	06d1      	lsls	r1, r2, #27
 800dcbc:	bf5f      	itttt	pl
 800dcbe:	681a      	ldrpl	r2, [r3, #0]
 800dcc0:	1d11      	addpl	r1, r2, #4
 800dcc2:	6019      	strpl	r1, [r3, #0]
 800dcc4:	6816      	ldrpl	r6, [r2, #0]
 800dcc6:	2700      	movs	r7, #0
 800dcc8:	69a0      	ldr	r0, [r4, #24]
 800dcca:	b188      	cbz	r0, 800dcf0 <_scanf_chars+0x58>
 800dccc:	2801      	cmp	r0, #1
 800dcce:	d107      	bne.n	800dce0 <_scanf_chars+0x48>
 800dcd0:	682a      	ldr	r2, [r5, #0]
 800dcd2:	7811      	ldrb	r1, [r2, #0]
 800dcd4:	6962      	ldr	r2, [r4, #20]
 800dcd6:	5c52      	ldrb	r2, [r2, r1]
 800dcd8:	b952      	cbnz	r2, 800dcf0 <_scanf_chars+0x58>
 800dcda:	2f00      	cmp	r7, #0
 800dcdc:	d031      	beq.n	800dd42 <_scanf_chars+0xaa>
 800dcde:	e022      	b.n	800dd26 <_scanf_chars+0x8e>
 800dce0:	2802      	cmp	r0, #2
 800dce2:	d120      	bne.n	800dd26 <_scanf_chars+0x8e>
 800dce4:	682b      	ldr	r3, [r5, #0]
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800dcec:	071b      	lsls	r3, r3, #28
 800dcee:	d41a      	bmi.n	800dd26 <_scanf_chars+0x8e>
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	06da      	lsls	r2, r3, #27
 800dcf4:	bf5e      	ittt	pl
 800dcf6:	682b      	ldrpl	r3, [r5, #0]
 800dcf8:	781b      	ldrbpl	r3, [r3, #0]
 800dcfa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dcfe:	682a      	ldr	r2, [r5, #0]
 800dd00:	686b      	ldr	r3, [r5, #4]
 800dd02:	3201      	adds	r2, #1
 800dd04:	602a      	str	r2, [r5, #0]
 800dd06:	68a2      	ldr	r2, [r4, #8]
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	3a01      	subs	r2, #1
 800dd0c:	606b      	str	r3, [r5, #4]
 800dd0e:	3701      	adds	r7, #1
 800dd10:	60a2      	str	r2, [r4, #8]
 800dd12:	b142      	cbz	r2, 800dd26 <_scanf_chars+0x8e>
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	dcd7      	bgt.n	800dcc8 <_scanf_chars+0x30>
 800dd18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dd1c:	4629      	mov	r1, r5
 800dd1e:	4640      	mov	r0, r8
 800dd20:	4798      	blx	r3
 800dd22:	2800      	cmp	r0, #0
 800dd24:	d0d0      	beq.n	800dcc8 <_scanf_chars+0x30>
 800dd26:	6823      	ldr	r3, [r4, #0]
 800dd28:	f013 0310 	ands.w	r3, r3, #16
 800dd2c:	d105      	bne.n	800dd3a <_scanf_chars+0xa2>
 800dd2e:	68e2      	ldr	r2, [r4, #12]
 800dd30:	3201      	adds	r2, #1
 800dd32:	60e2      	str	r2, [r4, #12]
 800dd34:	69a2      	ldr	r2, [r4, #24]
 800dd36:	b102      	cbz	r2, 800dd3a <_scanf_chars+0xa2>
 800dd38:	7033      	strb	r3, [r6, #0]
 800dd3a:	6923      	ldr	r3, [r4, #16]
 800dd3c:	443b      	add	r3, r7
 800dd3e:	6123      	str	r3, [r4, #16]
 800dd40:	2000      	movs	r0, #0
 800dd42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd46:	bf00      	nop
 800dd48:	0800ed1e 	.word	0x0800ed1e

0800dd4c <_scanf_i>:
 800dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd50:	4698      	mov	r8, r3
 800dd52:	4b74      	ldr	r3, [pc, #464]	; (800df24 <_scanf_i+0x1d8>)
 800dd54:	460c      	mov	r4, r1
 800dd56:	4682      	mov	sl, r0
 800dd58:	4616      	mov	r6, r2
 800dd5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd5e:	b087      	sub	sp, #28
 800dd60:	ab03      	add	r3, sp, #12
 800dd62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dd66:	4b70      	ldr	r3, [pc, #448]	; (800df28 <_scanf_i+0x1dc>)
 800dd68:	69a1      	ldr	r1, [r4, #24]
 800dd6a:	4a70      	ldr	r2, [pc, #448]	; (800df2c <_scanf_i+0x1e0>)
 800dd6c:	2903      	cmp	r1, #3
 800dd6e:	bf18      	it	ne
 800dd70:	461a      	movne	r2, r3
 800dd72:	68a3      	ldr	r3, [r4, #8]
 800dd74:	9201      	str	r2, [sp, #4]
 800dd76:	1e5a      	subs	r2, r3, #1
 800dd78:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dd7c:	bf88      	it	hi
 800dd7e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dd82:	4627      	mov	r7, r4
 800dd84:	bf82      	ittt	hi
 800dd86:	eb03 0905 	addhi.w	r9, r3, r5
 800dd8a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dd8e:	60a3      	strhi	r3, [r4, #8]
 800dd90:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dd94:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800dd98:	bf98      	it	ls
 800dd9a:	f04f 0900 	movls.w	r9, #0
 800dd9e:	6023      	str	r3, [r4, #0]
 800dda0:	463d      	mov	r5, r7
 800dda2:	f04f 0b00 	mov.w	fp, #0
 800dda6:	6831      	ldr	r1, [r6, #0]
 800dda8:	ab03      	add	r3, sp, #12
 800ddaa:	7809      	ldrb	r1, [r1, #0]
 800ddac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ddb0:	2202      	movs	r2, #2
 800ddb2:	f7f2 fa45 	bl	8000240 <memchr>
 800ddb6:	b328      	cbz	r0, 800de04 <_scanf_i+0xb8>
 800ddb8:	f1bb 0f01 	cmp.w	fp, #1
 800ddbc:	d159      	bne.n	800de72 <_scanf_i+0x126>
 800ddbe:	6862      	ldr	r2, [r4, #4]
 800ddc0:	b92a      	cbnz	r2, 800ddce <_scanf_i+0x82>
 800ddc2:	6822      	ldr	r2, [r4, #0]
 800ddc4:	2308      	movs	r3, #8
 800ddc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddca:	6063      	str	r3, [r4, #4]
 800ddcc:	6022      	str	r2, [r4, #0]
 800ddce:	6822      	ldr	r2, [r4, #0]
 800ddd0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ddd4:	6022      	str	r2, [r4, #0]
 800ddd6:	68a2      	ldr	r2, [r4, #8]
 800ddd8:	1e51      	subs	r1, r2, #1
 800ddda:	60a1      	str	r1, [r4, #8]
 800dddc:	b192      	cbz	r2, 800de04 <_scanf_i+0xb8>
 800ddde:	6832      	ldr	r2, [r6, #0]
 800dde0:	1c51      	adds	r1, r2, #1
 800dde2:	6031      	str	r1, [r6, #0]
 800dde4:	7812      	ldrb	r2, [r2, #0]
 800dde6:	f805 2b01 	strb.w	r2, [r5], #1
 800ddea:	6872      	ldr	r2, [r6, #4]
 800ddec:	3a01      	subs	r2, #1
 800ddee:	2a00      	cmp	r2, #0
 800ddf0:	6072      	str	r2, [r6, #4]
 800ddf2:	dc07      	bgt.n	800de04 <_scanf_i+0xb8>
 800ddf4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ddf8:	4631      	mov	r1, r6
 800ddfa:	4650      	mov	r0, sl
 800ddfc:	4790      	blx	r2
 800ddfe:	2800      	cmp	r0, #0
 800de00:	f040 8085 	bne.w	800df0e <_scanf_i+0x1c2>
 800de04:	f10b 0b01 	add.w	fp, fp, #1
 800de08:	f1bb 0f03 	cmp.w	fp, #3
 800de0c:	d1cb      	bne.n	800dda6 <_scanf_i+0x5a>
 800de0e:	6863      	ldr	r3, [r4, #4]
 800de10:	b90b      	cbnz	r3, 800de16 <_scanf_i+0xca>
 800de12:	230a      	movs	r3, #10
 800de14:	6063      	str	r3, [r4, #4]
 800de16:	6863      	ldr	r3, [r4, #4]
 800de18:	4945      	ldr	r1, [pc, #276]	; (800df30 <_scanf_i+0x1e4>)
 800de1a:	6960      	ldr	r0, [r4, #20]
 800de1c:	1ac9      	subs	r1, r1, r3
 800de1e:	f000 f937 	bl	800e090 <__sccl>
 800de22:	f04f 0b00 	mov.w	fp, #0
 800de26:	68a3      	ldr	r3, [r4, #8]
 800de28:	6822      	ldr	r2, [r4, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d03d      	beq.n	800deaa <_scanf_i+0x15e>
 800de2e:	6831      	ldr	r1, [r6, #0]
 800de30:	6960      	ldr	r0, [r4, #20]
 800de32:	f891 c000 	ldrb.w	ip, [r1]
 800de36:	f810 000c 	ldrb.w	r0, [r0, ip]
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d035      	beq.n	800deaa <_scanf_i+0x15e>
 800de3e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800de42:	d124      	bne.n	800de8e <_scanf_i+0x142>
 800de44:	0510      	lsls	r0, r2, #20
 800de46:	d522      	bpl.n	800de8e <_scanf_i+0x142>
 800de48:	f10b 0b01 	add.w	fp, fp, #1
 800de4c:	f1b9 0f00 	cmp.w	r9, #0
 800de50:	d003      	beq.n	800de5a <_scanf_i+0x10e>
 800de52:	3301      	adds	r3, #1
 800de54:	f109 39ff 	add.w	r9, r9, #4294967295
 800de58:	60a3      	str	r3, [r4, #8]
 800de5a:	6873      	ldr	r3, [r6, #4]
 800de5c:	3b01      	subs	r3, #1
 800de5e:	2b00      	cmp	r3, #0
 800de60:	6073      	str	r3, [r6, #4]
 800de62:	dd1b      	ble.n	800de9c <_scanf_i+0x150>
 800de64:	6833      	ldr	r3, [r6, #0]
 800de66:	3301      	adds	r3, #1
 800de68:	6033      	str	r3, [r6, #0]
 800de6a:	68a3      	ldr	r3, [r4, #8]
 800de6c:	3b01      	subs	r3, #1
 800de6e:	60a3      	str	r3, [r4, #8]
 800de70:	e7d9      	b.n	800de26 <_scanf_i+0xda>
 800de72:	f1bb 0f02 	cmp.w	fp, #2
 800de76:	d1ae      	bne.n	800ddd6 <_scanf_i+0x8a>
 800de78:	6822      	ldr	r2, [r4, #0]
 800de7a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800de7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800de82:	d1bf      	bne.n	800de04 <_scanf_i+0xb8>
 800de84:	2310      	movs	r3, #16
 800de86:	6063      	str	r3, [r4, #4]
 800de88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de8c:	e7a2      	b.n	800ddd4 <_scanf_i+0x88>
 800de8e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800de92:	6022      	str	r2, [r4, #0]
 800de94:	780b      	ldrb	r3, [r1, #0]
 800de96:	f805 3b01 	strb.w	r3, [r5], #1
 800de9a:	e7de      	b.n	800de5a <_scanf_i+0x10e>
 800de9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dea0:	4631      	mov	r1, r6
 800dea2:	4650      	mov	r0, sl
 800dea4:	4798      	blx	r3
 800dea6:	2800      	cmp	r0, #0
 800dea8:	d0df      	beq.n	800de6a <_scanf_i+0x11e>
 800deaa:	6823      	ldr	r3, [r4, #0]
 800deac:	05d9      	lsls	r1, r3, #23
 800deae:	d50d      	bpl.n	800decc <_scanf_i+0x180>
 800deb0:	42bd      	cmp	r5, r7
 800deb2:	d909      	bls.n	800dec8 <_scanf_i+0x17c>
 800deb4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800deb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800debc:	4632      	mov	r2, r6
 800debe:	4650      	mov	r0, sl
 800dec0:	4798      	blx	r3
 800dec2:	f105 39ff 	add.w	r9, r5, #4294967295
 800dec6:	464d      	mov	r5, r9
 800dec8:	42bd      	cmp	r5, r7
 800deca:	d028      	beq.n	800df1e <_scanf_i+0x1d2>
 800decc:	6822      	ldr	r2, [r4, #0]
 800dece:	f012 0210 	ands.w	r2, r2, #16
 800ded2:	d113      	bne.n	800defc <_scanf_i+0x1b0>
 800ded4:	702a      	strb	r2, [r5, #0]
 800ded6:	6863      	ldr	r3, [r4, #4]
 800ded8:	9e01      	ldr	r6, [sp, #4]
 800deda:	4639      	mov	r1, r7
 800dedc:	4650      	mov	r0, sl
 800dede:	47b0      	blx	r6
 800dee0:	f8d8 3000 	ldr.w	r3, [r8]
 800dee4:	6821      	ldr	r1, [r4, #0]
 800dee6:	1d1a      	adds	r2, r3, #4
 800dee8:	f8c8 2000 	str.w	r2, [r8]
 800deec:	f011 0f20 	tst.w	r1, #32
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	d00f      	beq.n	800df14 <_scanf_i+0x1c8>
 800def4:	6018      	str	r0, [r3, #0]
 800def6:	68e3      	ldr	r3, [r4, #12]
 800def8:	3301      	adds	r3, #1
 800defa:	60e3      	str	r3, [r4, #12]
 800defc:	6923      	ldr	r3, [r4, #16]
 800defe:	1bed      	subs	r5, r5, r7
 800df00:	445d      	add	r5, fp
 800df02:	442b      	add	r3, r5
 800df04:	6123      	str	r3, [r4, #16]
 800df06:	2000      	movs	r0, #0
 800df08:	b007      	add	sp, #28
 800df0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0e:	f04f 0b00 	mov.w	fp, #0
 800df12:	e7ca      	b.n	800deaa <_scanf_i+0x15e>
 800df14:	07ca      	lsls	r2, r1, #31
 800df16:	bf4c      	ite	mi
 800df18:	8018      	strhmi	r0, [r3, #0]
 800df1a:	6018      	strpl	r0, [r3, #0]
 800df1c:	e7eb      	b.n	800def6 <_scanf_i+0x1aa>
 800df1e:	2001      	movs	r0, #1
 800df20:	e7f2      	b.n	800df08 <_scanf_i+0x1bc>
 800df22:	bf00      	nop
 800df24:	0800ec44 	.word	0x0800ec44
 800df28:	0800e5c9 	.word	0x0800e5c9
 800df2c:	0800e4e1 	.word	0x0800e4e1
 800df30:	0800ed12 	.word	0x0800ed12

0800df34 <__sflush_r>:
 800df34:	898a      	ldrh	r2, [r1, #12]
 800df36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df3a:	4605      	mov	r5, r0
 800df3c:	0710      	lsls	r0, r2, #28
 800df3e:	460c      	mov	r4, r1
 800df40:	d458      	bmi.n	800dff4 <__sflush_r+0xc0>
 800df42:	684b      	ldr	r3, [r1, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	dc05      	bgt.n	800df54 <__sflush_r+0x20>
 800df48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	dc02      	bgt.n	800df54 <__sflush_r+0x20>
 800df4e:	2000      	movs	r0, #0
 800df50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df56:	2e00      	cmp	r6, #0
 800df58:	d0f9      	beq.n	800df4e <__sflush_r+0x1a>
 800df5a:	2300      	movs	r3, #0
 800df5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df60:	682f      	ldr	r7, [r5, #0]
 800df62:	6a21      	ldr	r1, [r4, #32]
 800df64:	602b      	str	r3, [r5, #0]
 800df66:	d032      	beq.n	800dfce <__sflush_r+0x9a>
 800df68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df6a:	89a3      	ldrh	r3, [r4, #12]
 800df6c:	075a      	lsls	r2, r3, #29
 800df6e:	d505      	bpl.n	800df7c <__sflush_r+0x48>
 800df70:	6863      	ldr	r3, [r4, #4]
 800df72:	1ac0      	subs	r0, r0, r3
 800df74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df76:	b10b      	cbz	r3, 800df7c <__sflush_r+0x48>
 800df78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df7a:	1ac0      	subs	r0, r0, r3
 800df7c:	2300      	movs	r3, #0
 800df7e:	4602      	mov	r2, r0
 800df80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df82:	6a21      	ldr	r1, [r4, #32]
 800df84:	4628      	mov	r0, r5
 800df86:	47b0      	blx	r6
 800df88:	1c43      	adds	r3, r0, #1
 800df8a:	89a3      	ldrh	r3, [r4, #12]
 800df8c:	d106      	bne.n	800df9c <__sflush_r+0x68>
 800df8e:	6829      	ldr	r1, [r5, #0]
 800df90:	291d      	cmp	r1, #29
 800df92:	d82b      	bhi.n	800dfec <__sflush_r+0xb8>
 800df94:	4a29      	ldr	r2, [pc, #164]	; (800e03c <__sflush_r+0x108>)
 800df96:	410a      	asrs	r2, r1
 800df98:	07d6      	lsls	r6, r2, #31
 800df9a:	d427      	bmi.n	800dfec <__sflush_r+0xb8>
 800df9c:	2200      	movs	r2, #0
 800df9e:	6062      	str	r2, [r4, #4]
 800dfa0:	04d9      	lsls	r1, r3, #19
 800dfa2:	6922      	ldr	r2, [r4, #16]
 800dfa4:	6022      	str	r2, [r4, #0]
 800dfa6:	d504      	bpl.n	800dfb2 <__sflush_r+0x7e>
 800dfa8:	1c42      	adds	r2, r0, #1
 800dfaa:	d101      	bne.n	800dfb0 <__sflush_r+0x7c>
 800dfac:	682b      	ldr	r3, [r5, #0]
 800dfae:	b903      	cbnz	r3, 800dfb2 <__sflush_r+0x7e>
 800dfb0:	6560      	str	r0, [r4, #84]	; 0x54
 800dfb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfb4:	602f      	str	r7, [r5, #0]
 800dfb6:	2900      	cmp	r1, #0
 800dfb8:	d0c9      	beq.n	800df4e <__sflush_r+0x1a>
 800dfba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfbe:	4299      	cmp	r1, r3
 800dfc0:	d002      	beq.n	800dfc8 <__sflush_r+0x94>
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	f7fe ff72 	bl	800ceac <_free_r>
 800dfc8:	2000      	movs	r0, #0
 800dfca:	6360      	str	r0, [r4, #52]	; 0x34
 800dfcc:	e7c0      	b.n	800df50 <__sflush_r+0x1c>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	47b0      	blx	r6
 800dfd4:	1c41      	adds	r1, r0, #1
 800dfd6:	d1c8      	bne.n	800df6a <__sflush_r+0x36>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d0c5      	beq.n	800df6a <__sflush_r+0x36>
 800dfde:	2b1d      	cmp	r3, #29
 800dfe0:	d001      	beq.n	800dfe6 <__sflush_r+0xb2>
 800dfe2:	2b16      	cmp	r3, #22
 800dfe4:	d101      	bne.n	800dfea <__sflush_r+0xb6>
 800dfe6:	602f      	str	r7, [r5, #0]
 800dfe8:	e7b1      	b.n	800df4e <__sflush_r+0x1a>
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dff0:	81a3      	strh	r3, [r4, #12]
 800dff2:	e7ad      	b.n	800df50 <__sflush_r+0x1c>
 800dff4:	690f      	ldr	r7, [r1, #16]
 800dff6:	2f00      	cmp	r7, #0
 800dff8:	d0a9      	beq.n	800df4e <__sflush_r+0x1a>
 800dffa:	0793      	lsls	r3, r2, #30
 800dffc:	680e      	ldr	r6, [r1, #0]
 800dffe:	bf08      	it	eq
 800e000:	694b      	ldreq	r3, [r1, #20]
 800e002:	600f      	str	r7, [r1, #0]
 800e004:	bf18      	it	ne
 800e006:	2300      	movne	r3, #0
 800e008:	eba6 0807 	sub.w	r8, r6, r7
 800e00c:	608b      	str	r3, [r1, #8]
 800e00e:	f1b8 0f00 	cmp.w	r8, #0
 800e012:	dd9c      	ble.n	800df4e <__sflush_r+0x1a>
 800e014:	6a21      	ldr	r1, [r4, #32]
 800e016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e018:	4643      	mov	r3, r8
 800e01a:	463a      	mov	r2, r7
 800e01c:	4628      	mov	r0, r5
 800e01e:	47b0      	blx	r6
 800e020:	2800      	cmp	r0, #0
 800e022:	dc06      	bgt.n	800e032 <__sflush_r+0xfe>
 800e024:	89a3      	ldrh	r3, [r4, #12]
 800e026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e02a:	81a3      	strh	r3, [r4, #12]
 800e02c:	f04f 30ff 	mov.w	r0, #4294967295
 800e030:	e78e      	b.n	800df50 <__sflush_r+0x1c>
 800e032:	4407      	add	r7, r0
 800e034:	eba8 0800 	sub.w	r8, r8, r0
 800e038:	e7e9      	b.n	800e00e <__sflush_r+0xda>
 800e03a:	bf00      	nop
 800e03c:	dfbffffe 	.word	0xdfbffffe

0800e040 <_fflush_r>:
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	690b      	ldr	r3, [r1, #16]
 800e044:	4605      	mov	r5, r0
 800e046:	460c      	mov	r4, r1
 800e048:	b913      	cbnz	r3, 800e050 <_fflush_r+0x10>
 800e04a:	2500      	movs	r5, #0
 800e04c:	4628      	mov	r0, r5
 800e04e:	bd38      	pop	{r3, r4, r5, pc}
 800e050:	b118      	cbz	r0, 800e05a <_fflush_r+0x1a>
 800e052:	6a03      	ldr	r3, [r0, #32]
 800e054:	b90b      	cbnz	r3, 800e05a <_fflush_r+0x1a>
 800e056:	f7fe fd79 	bl	800cb4c <__sinit>
 800e05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d0f3      	beq.n	800e04a <_fflush_r+0xa>
 800e062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e064:	07d0      	lsls	r0, r2, #31
 800e066:	d404      	bmi.n	800e072 <_fflush_r+0x32>
 800e068:	0599      	lsls	r1, r3, #22
 800e06a:	d402      	bmi.n	800e072 <_fflush_r+0x32>
 800e06c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e06e:	f7fe ff06 	bl	800ce7e <__retarget_lock_acquire_recursive>
 800e072:	4628      	mov	r0, r5
 800e074:	4621      	mov	r1, r4
 800e076:	f7ff ff5d 	bl	800df34 <__sflush_r>
 800e07a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e07c:	07da      	lsls	r2, r3, #31
 800e07e:	4605      	mov	r5, r0
 800e080:	d4e4      	bmi.n	800e04c <_fflush_r+0xc>
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	059b      	lsls	r3, r3, #22
 800e086:	d4e1      	bmi.n	800e04c <_fflush_r+0xc>
 800e088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e08a:	f7fe fef9 	bl	800ce80 <__retarget_lock_release_recursive>
 800e08e:	e7dd      	b.n	800e04c <_fflush_r+0xc>

0800e090 <__sccl>:
 800e090:	b570      	push	{r4, r5, r6, lr}
 800e092:	780b      	ldrb	r3, [r1, #0]
 800e094:	4604      	mov	r4, r0
 800e096:	2b5e      	cmp	r3, #94	; 0x5e
 800e098:	bf0b      	itete	eq
 800e09a:	784b      	ldrbeq	r3, [r1, #1]
 800e09c:	1c4a      	addne	r2, r1, #1
 800e09e:	1c8a      	addeq	r2, r1, #2
 800e0a0:	2100      	movne	r1, #0
 800e0a2:	bf08      	it	eq
 800e0a4:	2101      	moveq	r1, #1
 800e0a6:	3801      	subs	r0, #1
 800e0a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e0ac:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e0b0:	42a8      	cmp	r0, r5
 800e0b2:	d1fb      	bne.n	800e0ac <__sccl+0x1c>
 800e0b4:	b90b      	cbnz	r3, 800e0ba <__sccl+0x2a>
 800e0b6:	1e50      	subs	r0, r2, #1
 800e0b8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ba:	f081 0101 	eor.w	r1, r1, #1
 800e0be:	54e1      	strb	r1, [r4, r3]
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e0c8:	2d2d      	cmp	r5, #45	; 0x2d
 800e0ca:	d005      	beq.n	800e0d8 <__sccl+0x48>
 800e0cc:	2d5d      	cmp	r5, #93	; 0x5d
 800e0ce:	d016      	beq.n	800e0fe <__sccl+0x6e>
 800e0d0:	2d00      	cmp	r5, #0
 800e0d2:	d0f1      	beq.n	800e0b8 <__sccl+0x28>
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	e7f2      	b.n	800e0be <__sccl+0x2e>
 800e0d8:	7846      	ldrb	r6, [r0, #1]
 800e0da:	2e5d      	cmp	r6, #93	; 0x5d
 800e0dc:	d0fa      	beq.n	800e0d4 <__sccl+0x44>
 800e0de:	42b3      	cmp	r3, r6
 800e0e0:	dcf8      	bgt.n	800e0d4 <__sccl+0x44>
 800e0e2:	3002      	adds	r0, #2
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	3201      	adds	r2, #1
 800e0e8:	4296      	cmp	r6, r2
 800e0ea:	54a1      	strb	r1, [r4, r2]
 800e0ec:	dcfb      	bgt.n	800e0e6 <__sccl+0x56>
 800e0ee:	1af2      	subs	r2, r6, r3
 800e0f0:	3a01      	subs	r2, #1
 800e0f2:	1c5d      	adds	r5, r3, #1
 800e0f4:	42b3      	cmp	r3, r6
 800e0f6:	bfa8      	it	ge
 800e0f8:	2200      	movge	r2, #0
 800e0fa:	18ab      	adds	r3, r5, r2
 800e0fc:	e7e1      	b.n	800e0c2 <__sccl+0x32>
 800e0fe:	4610      	mov	r0, r2
 800e100:	e7da      	b.n	800e0b8 <__sccl+0x28>

0800e102 <__submore>:
 800e102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e106:	460c      	mov	r4, r1
 800e108:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e10a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e10e:	4299      	cmp	r1, r3
 800e110:	d11d      	bne.n	800e14e <__submore+0x4c>
 800e112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e116:	f7fe ff35 	bl	800cf84 <_malloc_r>
 800e11a:	b918      	cbnz	r0, 800e124 <__submore+0x22>
 800e11c:	f04f 30ff 	mov.w	r0, #4294967295
 800e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e128:	63a3      	str	r3, [r4, #56]	; 0x38
 800e12a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e12e:	6360      	str	r0, [r4, #52]	; 0x34
 800e130:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e134:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e138:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e13c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e140:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e144:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e148:	6020      	str	r0, [r4, #0]
 800e14a:	2000      	movs	r0, #0
 800e14c:	e7e8      	b.n	800e120 <__submore+0x1e>
 800e14e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e150:	0077      	lsls	r7, r6, #1
 800e152:	463a      	mov	r2, r7
 800e154:	f000 f912 	bl	800e37c <_realloc_r>
 800e158:	4605      	mov	r5, r0
 800e15a:	2800      	cmp	r0, #0
 800e15c:	d0de      	beq.n	800e11c <__submore+0x1a>
 800e15e:	eb00 0806 	add.w	r8, r0, r6
 800e162:	4601      	mov	r1, r0
 800e164:	4632      	mov	r2, r6
 800e166:	4640      	mov	r0, r8
 800e168:	f7fe fe8b 	bl	800ce82 <memcpy>
 800e16c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e170:	f8c4 8000 	str.w	r8, [r4]
 800e174:	e7e9      	b.n	800e14a <__submore+0x48>

0800e176 <__swbuf_r>:
 800e176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e178:	460e      	mov	r6, r1
 800e17a:	4614      	mov	r4, r2
 800e17c:	4605      	mov	r5, r0
 800e17e:	b118      	cbz	r0, 800e188 <__swbuf_r+0x12>
 800e180:	6a03      	ldr	r3, [r0, #32]
 800e182:	b90b      	cbnz	r3, 800e188 <__swbuf_r+0x12>
 800e184:	f7fe fce2 	bl	800cb4c <__sinit>
 800e188:	69a3      	ldr	r3, [r4, #24]
 800e18a:	60a3      	str	r3, [r4, #8]
 800e18c:	89a3      	ldrh	r3, [r4, #12]
 800e18e:	071a      	lsls	r2, r3, #28
 800e190:	d525      	bpl.n	800e1de <__swbuf_r+0x68>
 800e192:	6923      	ldr	r3, [r4, #16]
 800e194:	b31b      	cbz	r3, 800e1de <__swbuf_r+0x68>
 800e196:	6823      	ldr	r3, [r4, #0]
 800e198:	6922      	ldr	r2, [r4, #16]
 800e19a:	1a98      	subs	r0, r3, r2
 800e19c:	6963      	ldr	r3, [r4, #20]
 800e19e:	b2f6      	uxtb	r6, r6
 800e1a0:	4283      	cmp	r3, r0
 800e1a2:	4637      	mov	r7, r6
 800e1a4:	dc04      	bgt.n	800e1b0 <__swbuf_r+0x3a>
 800e1a6:	4621      	mov	r1, r4
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	f7ff ff49 	bl	800e040 <_fflush_r>
 800e1ae:	b9e0      	cbnz	r0, 800e1ea <__swbuf_r+0x74>
 800e1b0:	68a3      	ldr	r3, [r4, #8]
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	60a3      	str	r3, [r4, #8]
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	1c5a      	adds	r2, r3, #1
 800e1ba:	6022      	str	r2, [r4, #0]
 800e1bc:	701e      	strb	r6, [r3, #0]
 800e1be:	6962      	ldr	r2, [r4, #20]
 800e1c0:	1c43      	adds	r3, r0, #1
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d004      	beq.n	800e1d0 <__swbuf_r+0x5a>
 800e1c6:	89a3      	ldrh	r3, [r4, #12]
 800e1c8:	07db      	lsls	r3, r3, #31
 800e1ca:	d506      	bpl.n	800e1da <__swbuf_r+0x64>
 800e1cc:	2e0a      	cmp	r6, #10
 800e1ce:	d104      	bne.n	800e1da <__swbuf_r+0x64>
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	f7ff ff34 	bl	800e040 <_fflush_r>
 800e1d8:	b938      	cbnz	r0, 800e1ea <__swbuf_r+0x74>
 800e1da:	4638      	mov	r0, r7
 800e1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1de:	4621      	mov	r1, r4
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	f000 f805 	bl	800e1f0 <__swsetup_r>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d0d5      	beq.n	800e196 <__swbuf_r+0x20>
 800e1ea:	f04f 37ff 	mov.w	r7, #4294967295
 800e1ee:	e7f4      	b.n	800e1da <__swbuf_r+0x64>

0800e1f0 <__swsetup_r>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	4b2a      	ldr	r3, [pc, #168]	; (800e29c <__swsetup_r+0xac>)
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	6818      	ldr	r0, [r3, #0]
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	b118      	cbz	r0, 800e204 <__swsetup_r+0x14>
 800e1fc:	6a03      	ldr	r3, [r0, #32]
 800e1fe:	b90b      	cbnz	r3, 800e204 <__swsetup_r+0x14>
 800e200:	f7fe fca4 	bl	800cb4c <__sinit>
 800e204:	89a3      	ldrh	r3, [r4, #12]
 800e206:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e20a:	0718      	lsls	r0, r3, #28
 800e20c:	d422      	bmi.n	800e254 <__swsetup_r+0x64>
 800e20e:	06d9      	lsls	r1, r3, #27
 800e210:	d407      	bmi.n	800e222 <__swsetup_r+0x32>
 800e212:	2309      	movs	r3, #9
 800e214:	602b      	str	r3, [r5, #0]
 800e216:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e21a:	81a3      	strh	r3, [r4, #12]
 800e21c:	f04f 30ff 	mov.w	r0, #4294967295
 800e220:	e034      	b.n	800e28c <__swsetup_r+0x9c>
 800e222:	0758      	lsls	r0, r3, #29
 800e224:	d512      	bpl.n	800e24c <__swsetup_r+0x5c>
 800e226:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e228:	b141      	cbz	r1, 800e23c <__swsetup_r+0x4c>
 800e22a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e22e:	4299      	cmp	r1, r3
 800e230:	d002      	beq.n	800e238 <__swsetup_r+0x48>
 800e232:	4628      	mov	r0, r5
 800e234:	f7fe fe3a 	bl	800ceac <_free_r>
 800e238:	2300      	movs	r3, #0
 800e23a:	6363      	str	r3, [r4, #52]	; 0x34
 800e23c:	89a3      	ldrh	r3, [r4, #12]
 800e23e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e242:	81a3      	strh	r3, [r4, #12]
 800e244:	2300      	movs	r3, #0
 800e246:	6063      	str	r3, [r4, #4]
 800e248:	6923      	ldr	r3, [r4, #16]
 800e24a:	6023      	str	r3, [r4, #0]
 800e24c:	89a3      	ldrh	r3, [r4, #12]
 800e24e:	f043 0308 	orr.w	r3, r3, #8
 800e252:	81a3      	strh	r3, [r4, #12]
 800e254:	6923      	ldr	r3, [r4, #16]
 800e256:	b94b      	cbnz	r3, 800e26c <__swsetup_r+0x7c>
 800e258:	89a3      	ldrh	r3, [r4, #12]
 800e25a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e25e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e262:	d003      	beq.n	800e26c <__swsetup_r+0x7c>
 800e264:	4621      	mov	r1, r4
 800e266:	4628      	mov	r0, r5
 800e268:	f000 f9d6 	bl	800e618 <__smakebuf_r>
 800e26c:	89a0      	ldrh	r0, [r4, #12]
 800e26e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e272:	f010 0301 	ands.w	r3, r0, #1
 800e276:	d00a      	beq.n	800e28e <__swsetup_r+0x9e>
 800e278:	2300      	movs	r3, #0
 800e27a:	60a3      	str	r3, [r4, #8]
 800e27c:	6963      	ldr	r3, [r4, #20]
 800e27e:	425b      	negs	r3, r3
 800e280:	61a3      	str	r3, [r4, #24]
 800e282:	6923      	ldr	r3, [r4, #16]
 800e284:	b943      	cbnz	r3, 800e298 <__swsetup_r+0xa8>
 800e286:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e28a:	d1c4      	bne.n	800e216 <__swsetup_r+0x26>
 800e28c:	bd38      	pop	{r3, r4, r5, pc}
 800e28e:	0781      	lsls	r1, r0, #30
 800e290:	bf58      	it	pl
 800e292:	6963      	ldrpl	r3, [r4, #20]
 800e294:	60a3      	str	r3, [r4, #8]
 800e296:	e7f4      	b.n	800e282 <__swsetup_r+0x92>
 800e298:	2000      	movs	r0, #0
 800e29a:	e7f7      	b.n	800e28c <__swsetup_r+0x9c>
 800e29c:	20000164 	.word	0x20000164

0800e2a0 <memmove>:
 800e2a0:	4288      	cmp	r0, r1
 800e2a2:	b510      	push	{r4, lr}
 800e2a4:	eb01 0402 	add.w	r4, r1, r2
 800e2a8:	d902      	bls.n	800e2b0 <memmove+0x10>
 800e2aa:	4284      	cmp	r4, r0
 800e2ac:	4623      	mov	r3, r4
 800e2ae:	d807      	bhi.n	800e2c0 <memmove+0x20>
 800e2b0:	1e43      	subs	r3, r0, #1
 800e2b2:	42a1      	cmp	r1, r4
 800e2b4:	d008      	beq.n	800e2c8 <memmove+0x28>
 800e2b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2be:	e7f8      	b.n	800e2b2 <memmove+0x12>
 800e2c0:	4402      	add	r2, r0
 800e2c2:	4601      	mov	r1, r0
 800e2c4:	428a      	cmp	r2, r1
 800e2c6:	d100      	bne.n	800e2ca <memmove+0x2a>
 800e2c8:	bd10      	pop	{r4, pc}
 800e2ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2d2:	e7f7      	b.n	800e2c4 <memmove+0x24>

0800e2d4 <_raise_r>:
 800e2d4:	291f      	cmp	r1, #31
 800e2d6:	b538      	push	{r3, r4, r5, lr}
 800e2d8:	4604      	mov	r4, r0
 800e2da:	460d      	mov	r5, r1
 800e2dc:	d904      	bls.n	800e2e8 <_raise_r+0x14>
 800e2de:	2316      	movs	r3, #22
 800e2e0:	6003      	str	r3, [r0, #0]
 800e2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e2ea:	b112      	cbz	r2, 800e2f2 <_raise_r+0x1e>
 800e2ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2f0:	b94b      	cbnz	r3, 800e306 <_raise_r+0x32>
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 f830 	bl	800e358 <_getpid_r>
 800e2f8:	462a      	mov	r2, r5
 800e2fa:	4601      	mov	r1, r0
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e302:	f000 b817 	b.w	800e334 <_kill_r>
 800e306:	2b01      	cmp	r3, #1
 800e308:	d00a      	beq.n	800e320 <_raise_r+0x4c>
 800e30a:	1c59      	adds	r1, r3, #1
 800e30c:	d103      	bne.n	800e316 <_raise_r+0x42>
 800e30e:	2316      	movs	r3, #22
 800e310:	6003      	str	r3, [r0, #0]
 800e312:	2001      	movs	r0, #1
 800e314:	e7e7      	b.n	800e2e6 <_raise_r+0x12>
 800e316:	2400      	movs	r4, #0
 800e318:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e31c:	4628      	mov	r0, r5
 800e31e:	4798      	blx	r3
 800e320:	2000      	movs	r0, #0
 800e322:	e7e0      	b.n	800e2e6 <_raise_r+0x12>

0800e324 <raise>:
 800e324:	4b02      	ldr	r3, [pc, #8]	; (800e330 <raise+0xc>)
 800e326:	4601      	mov	r1, r0
 800e328:	6818      	ldr	r0, [r3, #0]
 800e32a:	f7ff bfd3 	b.w	800e2d4 <_raise_r>
 800e32e:	bf00      	nop
 800e330:	20000164 	.word	0x20000164

0800e334 <_kill_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4d07      	ldr	r5, [pc, #28]	; (800e354 <_kill_r+0x20>)
 800e338:	2300      	movs	r3, #0
 800e33a:	4604      	mov	r4, r0
 800e33c:	4608      	mov	r0, r1
 800e33e:	4611      	mov	r1, r2
 800e340:	602b      	str	r3, [r5, #0]
 800e342:	f7f2 fd77 	bl	8000e34 <_kill>
 800e346:	1c43      	adds	r3, r0, #1
 800e348:	d102      	bne.n	800e350 <_kill_r+0x1c>
 800e34a:	682b      	ldr	r3, [r5, #0]
 800e34c:	b103      	cbz	r3, 800e350 <_kill_r+0x1c>
 800e34e:	6023      	str	r3, [r4, #0]
 800e350:	bd38      	pop	{r3, r4, r5, pc}
 800e352:	bf00      	nop
 800e354:	20002334 	.word	0x20002334

0800e358 <_getpid_r>:
 800e358:	f7f2 bd64 	b.w	8000e24 <_getpid>

0800e35c <_sbrk_r>:
 800e35c:	b538      	push	{r3, r4, r5, lr}
 800e35e:	4d06      	ldr	r5, [pc, #24]	; (800e378 <_sbrk_r+0x1c>)
 800e360:	2300      	movs	r3, #0
 800e362:	4604      	mov	r4, r0
 800e364:	4608      	mov	r0, r1
 800e366:	602b      	str	r3, [r5, #0]
 800e368:	f7f2 fdec 	bl	8000f44 <_sbrk>
 800e36c:	1c43      	adds	r3, r0, #1
 800e36e:	d102      	bne.n	800e376 <_sbrk_r+0x1a>
 800e370:	682b      	ldr	r3, [r5, #0]
 800e372:	b103      	cbz	r3, 800e376 <_sbrk_r+0x1a>
 800e374:	6023      	str	r3, [r4, #0]
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	20002334 	.word	0x20002334

0800e37c <_realloc_r>:
 800e37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e380:	4680      	mov	r8, r0
 800e382:	4614      	mov	r4, r2
 800e384:	460e      	mov	r6, r1
 800e386:	b921      	cbnz	r1, 800e392 <_realloc_r+0x16>
 800e388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e38c:	4611      	mov	r1, r2
 800e38e:	f7fe bdf9 	b.w	800cf84 <_malloc_r>
 800e392:	b92a      	cbnz	r2, 800e3a0 <_realloc_r+0x24>
 800e394:	f7fe fd8a 	bl	800ceac <_free_r>
 800e398:	4625      	mov	r5, r4
 800e39a:	4628      	mov	r0, r5
 800e39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a0:	f000 f998 	bl	800e6d4 <_malloc_usable_size_r>
 800e3a4:	4284      	cmp	r4, r0
 800e3a6:	4607      	mov	r7, r0
 800e3a8:	d802      	bhi.n	800e3b0 <_realloc_r+0x34>
 800e3aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3ae:	d812      	bhi.n	800e3d6 <_realloc_r+0x5a>
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	f7fe fde6 	bl	800cf84 <_malloc_r>
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d0ed      	beq.n	800e39a <_realloc_r+0x1e>
 800e3be:	42bc      	cmp	r4, r7
 800e3c0:	4622      	mov	r2, r4
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	bf28      	it	cs
 800e3c6:	463a      	movcs	r2, r7
 800e3c8:	f7fe fd5b 	bl	800ce82 <memcpy>
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	4640      	mov	r0, r8
 800e3d0:	f7fe fd6c 	bl	800ceac <_free_r>
 800e3d4:	e7e1      	b.n	800e39a <_realloc_r+0x1e>
 800e3d6:	4635      	mov	r5, r6
 800e3d8:	e7df      	b.n	800e39a <_realloc_r+0x1e>
	...

0800e3dc <_strtol_l.constprop.0>:
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e2:	d001      	beq.n	800e3e8 <_strtol_l.constprop.0+0xc>
 800e3e4:	2b24      	cmp	r3, #36	; 0x24
 800e3e6:	d906      	bls.n	800e3f6 <_strtol_l.constprop.0+0x1a>
 800e3e8:	f7fe fd1e 	bl	800ce28 <__errno>
 800e3ec:	2316      	movs	r3, #22
 800e3ee:	6003      	str	r3, [r0, #0]
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e4dc <_strtol_l.constprop.0+0x100>
 800e3fa:	460d      	mov	r5, r1
 800e3fc:	462e      	mov	r6, r5
 800e3fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e402:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e406:	f017 0708 	ands.w	r7, r7, #8
 800e40a:	d1f7      	bne.n	800e3fc <_strtol_l.constprop.0+0x20>
 800e40c:	2c2d      	cmp	r4, #45	; 0x2d
 800e40e:	d132      	bne.n	800e476 <_strtol_l.constprop.0+0x9a>
 800e410:	782c      	ldrb	r4, [r5, #0]
 800e412:	2701      	movs	r7, #1
 800e414:	1cb5      	adds	r5, r6, #2
 800e416:	2b00      	cmp	r3, #0
 800e418:	d05b      	beq.n	800e4d2 <_strtol_l.constprop.0+0xf6>
 800e41a:	2b10      	cmp	r3, #16
 800e41c:	d109      	bne.n	800e432 <_strtol_l.constprop.0+0x56>
 800e41e:	2c30      	cmp	r4, #48	; 0x30
 800e420:	d107      	bne.n	800e432 <_strtol_l.constprop.0+0x56>
 800e422:	782c      	ldrb	r4, [r5, #0]
 800e424:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e428:	2c58      	cmp	r4, #88	; 0x58
 800e42a:	d14d      	bne.n	800e4c8 <_strtol_l.constprop.0+0xec>
 800e42c:	786c      	ldrb	r4, [r5, #1]
 800e42e:	2310      	movs	r3, #16
 800e430:	3502      	adds	r5, #2
 800e432:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e436:	f108 38ff 	add.w	r8, r8, #4294967295
 800e43a:	f04f 0e00 	mov.w	lr, #0
 800e43e:	fbb8 f9f3 	udiv	r9, r8, r3
 800e442:	4676      	mov	r6, lr
 800e444:	fb03 8a19 	mls	sl, r3, r9, r8
 800e448:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e44c:	f1bc 0f09 	cmp.w	ip, #9
 800e450:	d816      	bhi.n	800e480 <_strtol_l.constprop.0+0xa4>
 800e452:	4664      	mov	r4, ip
 800e454:	42a3      	cmp	r3, r4
 800e456:	dd24      	ble.n	800e4a2 <_strtol_l.constprop.0+0xc6>
 800e458:	f1be 3fff 	cmp.w	lr, #4294967295
 800e45c:	d008      	beq.n	800e470 <_strtol_l.constprop.0+0x94>
 800e45e:	45b1      	cmp	r9, r6
 800e460:	d31c      	bcc.n	800e49c <_strtol_l.constprop.0+0xc0>
 800e462:	d101      	bne.n	800e468 <_strtol_l.constprop.0+0x8c>
 800e464:	45a2      	cmp	sl, r4
 800e466:	db19      	blt.n	800e49c <_strtol_l.constprop.0+0xc0>
 800e468:	fb06 4603 	mla	r6, r6, r3, r4
 800e46c:	f04f 0e01 	mov.w	lr, #1
 800e470:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e474:	e7e8      	b.n	800e448 <_strtol_l.constprop.0+0x6c>
 800e476:	2c2b      	cmp	r4, #43	; 0x2b
 800e478:	bf04      	itt	eq
 800e47a:	782c      	ldrbeq	r4, [r5, #0]
 800e47c:	1cb5      	addeq	r5, r6, #2
 800e47e:	e7ca      	b.n	800e416 <_strtol_l.constprop.0+0x3a>
 800e480:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e484:	f1bc 0f19 	cmp.w	ip, #25
 800e488:	d801      	bhi.n	800e48e <_strtol_l.constprop.0+0xb2>
 800e48a:	3c37      	subs	r4, #55	; 0x37
 800e48c:	e7e2      	b.n	800e454 <_strtol_l.constprop.0+0x78>
 800e48e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e492:	f1bc 0f19 	cmp.w	ip, #25
 800e496:	d804      	bhi.n	800e4a2 <_strtol_l.constprop.0+0xc6>
 800e498:	3c57      	subs	r4, #87	; 0x57
 800e49a:	e7db      	b.n	800e454 <_strtol_l.constprop.0+0x78>
 800e49c:	f04f 3eff 	mov.w	lr, #4294967295
 800e4a0:	e7e6      	b.n	800e470 <_strtol_l.constprop.0+0x94>
 800e4a2:	f1be 3fff 	cmp.w	lr, #4294967295
 800e4a6:	d105      	bne.n	800e4b4 <_strtol_l.constprop.0+0xd8>
 800e4a8:	2322      	movs	r3, #34	; 0x22
 800e4aa:	6003      	str	r3, [r0, #0]
 800e4ac:	4646      	mov	r6, r8
 800e4ae:	b942      	cbnz	r2, 800e4c2 <_strtol_l.constprop.0+0xe6>
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	e79e      	b.n	800e3f2 <_strtol_l.constprop.0+0x16>
 800e4b4:	b107      	cbz	r7, 800e4b8 <_strtol_l.constprop.0+0xdc>
 800e4b6:	4276      	negs	r6, r6
 800e4b8:	2a00      	cmp	r2, #0
 800e4ba:	d0f9      	beq.n	800e4b0 <_strtol_l.constprop.0+0xd4>
 800e4bc:	f1be 0f00 	cmp.w	lr, #0
 800e4c0:	d000      	beq.n	800e4c4 <_strtol_l.constprop.0+0xe8>
 800e4c2:	1e69      	subs	r1, r5, #1
 800e4c4:	6011      	str	r1, [r2, #0]
 800e4c6:	e7f3      	b.n	800e4b0 <_strtol_l.constprop.0+0xd4>
 800e4c8:	2430      	movs	r4, #48	; 0x30
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1b1      	bne.n	800e432 <_strtol_l.constprop.0+0x56>
 800e4ce:	2308      	movs	r3, #8
 800e4d0:	e7af      	b.n	800e432 <_strtol_l.constprop.0+0x56>
 800e4d2:	2c30      	cmp	r4, #48	; 0x30
 800e4d4:	d0a5      	beq.n	800e422 <_strtol_l.constprop.0+0x46>
 800e4d6:	230a      	movs	r3, #10
 800e4d8:	e7ab      	b.n	800e432 <_strtol_l.constprop.0+0x56>
 800e4da:	bf00      	nop
 800e4dc:	0800ed1e 	.word	0x0800ed1e

0800e4e0 <_strtol_r>:
 800e4e0:	f7ff bf7c 	b.w	800e3dc <_strtol_l.constprop.0>

0800e4e4 <_strtoul_l.constprop.0>:
 800e4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4e8:	4f36      	ldr	r7, [pc, #216]	; (800e5c4 <_strtoul_l.constprop.0+0xe0>)
 800e4ea:	4686      	mov	lr, r0
 800e4ec:	460d      	mov	r5, r1
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4f4:	5d3e      	ldrb	r6, [r7, r4]
 800e4f6:	f016 0608 	ands.w	r6, r6, #8
 800e4fa:	d1f8      	bne.n	800e4ee <_strtoul_l.constprop.0+0xa>
 800e4fc:	2c2d      	cmp	r4, #45	; 0x2d
 800e4fe:	d130      	bne.n	800e562 <_strtoul_l.constprop.0+0x7e>
 800e500:	782c      	ldrb	r4, [r5, #0]
 800e502:	2601      	movs	r6, #1
 800e504:	1c85      	adds	r5, r0, #2
 800e506:	2b00      	cmp	r3, #0
 800e508:	d057      	beq.n	800e5ba <_strtoul_l.constprop.0+0xd6>
 800e50a:	2b10      	cmp	r3, #16
 800e50c:	d109      	bne.n	800e522 <_strtoul_l.constprop.0+0x3e>
 800e50e:	2c30      	cmp	r4, #48	; 0x30
 800e510:	d107      	bne.n	800e522 <_strtoul_l.constprop.0+0x3e>
 800e512:	7828      	ldrb	r0, [r5, #0]
 800e514:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e518:	2858      	cmp	r0, #88	; 0x58
 800e51a:	d149      	bne.n	800e5b0 <_strtoul_l.constprop.0+0xcc>
 800e51c:	786c      	ldrb	r4, [r5, #1]
 800e51e:	2310      	movs	r3, #16
 800e520:	3502      	adds	r5, #2
 800e522:	f04f 38ff 	mov.w	r8, #4294967295
 800e526:	2700      	movs	r7, #0
 800e528:	fbb8 f8f3 	udiv	r8, r8, r3
 800e52c:	fb03 f908 	mul.w	r9, r3, r8
 800e530:	ea6f 0909 	mvn.w	r9, r9
 800e534:	4638      	mov	r0, r7
 800e536:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e53a:	f1bc 0f09 	cmp.w	ip, #9
 800e53e:	d815      	bhi.n	800e56c <_strtoul_l.constprop.0+0x88>
 800e540:	4664      	mov	r4, ip
 800e542:	42a3      	cmp	r3, r4
 800e544:	dd23      	ble.n	800e58e <_strtoul_l.constprop.0+0xaa>
 800e546:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e54a:	d007      	beq.n	800e55c <_strtoul_l.constprop.0+0x78>
 800e54c:	4580      	cmp	r8, r0
 800e54e:	d31b      	bcc.n	800e588 <_strtoul_l.constprop.0+0xa4>
 800e550:	d101      	bne.n	800e556 <_strtoul_l.constprop.0+0x72>
 800e552:	45a1      	cmp	r9, r4
 800e554:	db18      	blt.n	800e588 <_strtoul_l.constprop.0+0xa4>
 800e556:	fb00 4003 	mla	r0, r0, r3, r4
 800e55a:	2701      	movs	r7, #1
 800e55c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e560:	e7e9      	b.n	800e536 <_strtoul_l.constprop.0+0x52>
 800e562:	2c2b      	cmp	r4, #43	; 0x2b
 800e564:	bf04      	itt	eq
 800e566:	782c      	ldrbeq	r4, [r5, #0]
 800e568:	1c85      	addeq	r5, r0, #2
 800e56a:	e7cc      	b.n	800e506 <_strtoul_l.constprop.0+0x22>
 800e56c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e570:	f1bc 0f19 	cmp.w	ip, #25
 800e574:	d801      	bhi.n	800e57a <_strtoul_l.constprop.0+0x96>
 800e576:	3c37      	subs	r4, #55	; 0x37
 800e578:	e7e3      	b.n	800e542 <_strtoul_l.constprop.0+0x5e>
 800e57a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e57e:	f1bc 0f19 	cmp.w	ip, #25
 800e582:	d804      	bhi.n	800e58e <_strtoul_l.constprop.0+0xaa>
 800e584:	3c57      	subs	r4, #87	; 0x57
 800e586:	e7dc      	b.n	800e542 <_strtoul_l.constprop.0+0x5e>
 800e588:	f04f 37ff 	mov.w	r7, #4294967295
 800e58c:	e7e6      	b.n	800e55c <_strtoul_l.constprop.0+0x78>
 800e58e:	1c7b      	adds	r3, r7, #1
 800e590:	d106      	bne.n	800e5a0 <_strtoul_l.constprop.0+0xbc>
 800e592:	2322      	movs	r3, #34	; 0x22
 800e594:	f8ce 3000 	str.w	r3, [lr]
 800e598:	4638      	mov	r0, r7
 800e59a:	b932      	cbnz	r2, 800e5aa <_strtoul_l.constprop.0+0xc6>
 800e59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5a0:	b106      	cbz	r6, 800e5a4 <_strtoul_l.constprop.0+0xc0>
 800e5a2:	4240      	negs	r0, r0
 800e5a4:	2a00      	cmp	r2, #0
 800e5a6:	d0f9      	beq.n	800e59c <_strtoul_l.constprop.0+0xb8>
 800e5a8:	b107      	cbz	r7, 800e5ac <_strtoul_l.constprop.0+0xc8>
 800e5aa:	1e69      	subs	r1, r5, #1
 800e5ac:	6011      	str	r1, [r2, #0]
 800e5ae:	e7f5      	b.n	800e59c <_strtoul_l.constprop.0+0xb8>
 800e5b0:	2430      	movs	r4, #48	; 0x30
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1b5      	bne.n	800e522 <_strtoul_l.constprop.0+0x3e>
 800e5b6:	2308      	movs	r3, #8
 800e5b8:	e7b3      	b.n	800e522 <_strtoul_l.constprop.0+0x3e>
 800e5ba:	2c30      	cmp	r4, #48	; 0x30
 800e5bc:	d0a9      	beq.n	800e512 <_strtoul_l.constprop.0+0x2e>
 800e5be:	230a      	movs	r3, #10
 800e5c0:	e7af      	b.n	800e522 <_strtoul_l.constprop.0+0x3e>
 800e5c2:	bf00      	nop
 800e5c4:	0800ed1e 	.word	0x0800ed1e

0800e5c8 <_strtoul_r>:
 800e5c8:	f7ff bf8c 	b.w	800e4e4 <_strtoul_l.constprop.0>

0800e5cc <__swhatbuf_r>:
 800e5cc:	b570      	push	{r4, r5, r6, lr}
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5d4:	2900      	cmp	r1, #0
 800e5d6:	b096      	sub	sp, #88	; 0x58
 800e5d8:	4615      	mov	r5, r2
 800e5da:	461e      	mov	r6, r3
 800e5dc:	da0d      	bge.n	800e5fa <__swhatbuf_r+0x2e>
 800e5de:	89a3      	ldrh	r3, [r4, #12]
 800e5e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e5e4:	f04f 0100 	mov.w	r1, #0
 800e5e8:	bf0c      	ite	eq
 800e5ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e5ee:	2340      	movne	r3, #64	; 0x40
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	6031      	str	r1, [r6, #0]
 800e5f4:	602b      	str	r3, [r5, #0]
 800e5f6:	b016      	add	sp, #88	; 0x58
 800e5f8:	bd70      	pop	{r4, r5, r6, pc}
 800e5fa:	466a      	mov	r2, sp
 800e5fc:	f000 f848 	bl	800e690 <_fstat_r>
 800e600:	2800      	cmp	r0, #0
 800e602:	dbec      	blt.n	800e5de <__swhatbuf_r+0x12>
 800e604:	9901      	ldr	r1, [sp, #4]
 800e606:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e60a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e60e:	4259      	negs	r1, r3
 800e610:	4159      	adcs	r1, r3
 800e612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e616:	e7eb      	b.n	800e5f0 <__swhatbuf_r+0x24>

0800e618 <__smakebuf_r>:
 800e618:	898b      	ldrh	r3, [r1, #12]
 800e61a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e61c:	079d      	lsls	r5, r3, #30
 800e61e:	4606      	mov	r6, r0
 800e620:	460c      	mov	r4, r1
 800e622:	d507      	bpl.n	800e634 <__smakebuf_r+0x1c>
 800e624:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	6123      	str	r3, [r4, #16]
 800e62c:	2301      	movs	r3, #1
 800e62e:	6163      	str	r3, [r4, #20]
 800e630:	b002      	add	sp, #8
 800e632:	bd70      	pop	{r4, r5, r6, pc}
 800e634:	ab01      	add	r3, sp, #4
 800e636:	466a      	mov	r2, sp
 800e638:	f7ff ffc8 	bl	800e5cc <__swhatbuf_r>
 800e63c:	9900      	ldr	r1, [sp, #0]
 800e63e:	4605      	mov	r5, r0
 800e640:	4630      	mov	r0, r6
 800e642:	f7fe fc9f 	bl	800cf84 <_malloc_r>
 800e646:	b948      	cbnz	r0, 800e65c <__smakebuf_r+0x44>
 800e648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e64c:	059a      	lsls	r2, r3, #22
 800e64e:	d4ef      	bmi.n	800e630 <__smakebuf_r+0x18>
 800e650:	f023 0303 	bic.w	r3, r3, #3
 800e654:	f043 0302 	orr.w	r3, r3, #2
 800e658:	81a3      	strh	r3, [r4, #12]
 800e65a:	e7e3      	b.n	800e624 <__smakebuf_r+0xc>
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	6020      	str	r0, [r4, #0]
 800e660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e664:	81a3      	strh	r3, [r4, #12]
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	6163      	str	r3, [r4, #20]
 800e66a:	9b01      	ldr	r3, [sp, #4]
 800e66c:	6120      	str	r0, [r4, #16]
 800e66e:	b15b      	cbz	r3, 800e688 <__smakebuf_r+0x70>
 800e670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e674:	4630      	mov	r0, r6
 800e676:	f000 f81d 	bl	800e6b4 <_isatty_r>
 800e67a:	b128      	cbz	r0, 800e688 <__smakebuf_r+0x70>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	f023 0303 	bic.w	r3, r3, #3
 800e682:	f043 0301 	orr.w	r3, r3, #1
 800e686:	81a3      	strh	r3, [r4, #12]
 800e688:	89a3      	ldrh	r3, [r4, #12]
 800e68a:	431d      	orrs	r5, r3
 800e68c:	81a5      	strh	r5, [r4, #12]
 800e68e:	e7cf      	b.n	800e630 <__smakebuf_r+0x18>

0800e690 <_fstat_r>:
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4d07      	ldr	r5, [pc, #28]	; (800e6b0 <_fstat_r+0x20>)
 800e694:	2300      	movs	r3, #0
 800e696:	4604      	mov	r4, r0
 800e698:	4608      	mov	r0, r1
 800e69a:	4611      	mov	r1, r2
 800e69c:	602b      	str	r3, [r5, #0]
 800e69e:	f7f2 fc28 	bl	8000ef2 <_fstat>
 800e6a2:	1c43      	adds	r3, r0, #1
 800e6a4:	d102      	bne.n	800e6ac <_fstat_r+0x1c>
 800e6a6:	682b      	ldr	r3, [r5, #0]
 800e6a8:	b103      	cbz	r3, 800e6ac <_fstat_r+0x1c>
 800e6aa:	6023      	str	r3, [r4, #0]
 800e6ac:	bd38      	pop	{r3, r4, r5, pc}
 800e6ae:	bf00      	nop
 800e6b0:	20002334 	.word	0x20002334

0800e6b4 <_isatty_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	4d06      	ldr	r5, [pc, #24]	; (800e6d0 <_isatty_r+0x1c>)
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	4608      	mov	r0, r1
 800e6be:	602b      	str	r3, [r5, #0]
 800e6c0:	f7f2 fc27 	bl	8000f12 <_isatty>
 800e6c4:	1c43      	adds	r3, r0, #1
 800e6c6:	d102      	bne.n	800e6ce <_isatty_r+0x1a>
 800e6c8:	682b      	ldr	r3, [r5, #0]
 800e6ca:	b103      	cbz	r3, 800e6ce <_isatty_r+0x1a>
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	bd38      	pop	{r3, r4, r5, pc}
 800e6d0:	20002334 	.word	0x20002334

0800e6d4 <_malloc_usable_size_r>:
 800e6d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6d8:	1f18      	subs	r0, r3, #4
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bfbc      	itt	lt
 800e6de:	580b      	ldrlt	r3, [r1, r0]
 800e6e0:	18c0      	addlt	r0, r0, r3
 800e6e2:	4770      	bx	lr

0800e6e4 <sqrtf>:
 800e6e4:	b508      	push	{r3, lr}
 800e6e6:	ed2d 8b02 	vpush	{d8}
 800e6ea:	eeb0 8a40 	vmov.f32	s16, s0
 800e6ee:	f000 f817 	bl	800e720 <__ieee754_sqrtf>
 800e6f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800e6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6fa:	d60c      	bvs.n	800e716 <sqrtf+0x32>
 800e6fc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e71c <sqrtf+0x38>
 800e700:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e708:	d505      	bpl.n	800e716 <sqrtf+0x32>
 800e70a:	f7fe fb8d 	bl	800ce28 <__errno>
 800e70e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e712:	2321      	movs	r3, #33	; 0x21
 800e714:	6003      	str	r3, [r0, #0]
 800e716:	ecbd 8b02 	vpop	{d8}
 800e71a:	bd08      	pop	{r3, pc}
 800e71c:	00000000 	.word	0x00000000

0800e720 <__ieee754_sqrtf>:
 800e720:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e724:	4770      	bx	lr
	...

0800e728 <_init>:
 800e728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e72a:	bf00      	nop
 800e72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e72e:	bc08      	pop	{r3}
 800e730:	469e      	mov	lr, r3
 800e732:	4770      	bx	lr

0800e734 <_fini>:
 800e734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e736:	bf00      	nop
 800e738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e73a:	bc08      	pop	{r3}
 800e73c:	469e      	mov	lr, r3
 800e73e:	4770      	bx	lr
