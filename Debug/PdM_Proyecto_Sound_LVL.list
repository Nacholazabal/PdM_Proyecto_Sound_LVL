
PdM_Proyecto_Sound_LVL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d20c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800d3dc  0800d3dc  0001d3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7b0  0800d7b0  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7b0  0800d7b0  0001d7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7b8  0800d7b8  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7b8  0800d7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7bc  0800d7bc  0001d7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800d7c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000221c  20000168  0800d928  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20002384  0800d928  00022384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ac0  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005164  00000000  00000000  00040c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb0  00000000  00000000  00045e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001618  00000000  00000000  00047ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299c5  00000000  00000000  000490c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027ffa  00000000  00000000  00072a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8d5c  00000000  00000000  0009aa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081d4  00000000  00000000  001837e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0018b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d3c4 	.word	0x0800d3c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	0800d3c4 	.word	0x0800d3c4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd64 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f814 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9ca 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f9a8 	bl	8000940 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 f97c 	bl	80008ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005f4:	f000 f878 	bl	80006e8 <MX_ADC1_Init>
  MX_SPI3_Init();
 80005f8:	f000 f8f6 	bl	80007e8 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80005fc:	f00a ffe6 	bl	800b5cc <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000600:	f000 f8c4 	bl	800078c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000604:	f000 f926 	bl	8000854 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  project_main();
 8000608:	f00a ffd9 	bl	800b5be <project_main>
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x30>
	...

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00b fec7 	bl	800c3b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <SystemClock_Config+0xd0>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd4>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000688:	2348      	movs	r3, #72	; 0x48
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f004 fafd 	bl	8004c9c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a8:	f000 fa10 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 fc73 	bl	8003fb4 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006d4:	f000 f9fa 	bl	8000acc <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC1_Init+0x9c>)
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <MX_ADC1_Init+0xa0>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC1_Init+0x9c>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC1_Init+0x9c>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC1_Init+0x9c>)
 800072a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000738:	2201      	movs	r2, #1
 800073a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ADC1_Init+0x9c>)
 800073e:	2201      	movs	r2, #1
 8000740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <MX_ADC1_Init+0x9c>)
 800074c:	f000 fd44 	bl	80011d8 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000756:	f000 f9b9 	bl	8000acc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075a:	2301      	movs	r3, #1
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_ADC1_Init+0x9c>)
 800076c:	f000 fe9c 	bl	80014a8 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000776:	f000 f9a9 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000184 	.word	0x20000184
 8000788:	40012000 	.word	0x40012000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f002 f811 	bl	80027f0 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f97a 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000022c 	.word	0x2000022c
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_SPI3_Init+0x64>)
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <MX_SPI3_Init+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI3_Init+0x64>)
 80007f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI3_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_SPI3_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI3_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI3_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI3_Init+0x64>)
 8000814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000818:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI3_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_SPI3_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI3_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_SPI3_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI3_Init+0x64>)
 8000834:	220a      	movs	r2, #10
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_SPI3_Init+0x64>)
 800083a:	f004 fccd 	bl	80051d8 <HAL_SPI_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000844:	f000 f942 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000280 	.word	0x20000280
 8000850:	40003c00 	.word	0x40003c00

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_TIM2_Init+0x94>)
 800087a:	2253      	movs	r2, #83	; 0x53
 800087c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000886:	f240 32e7 	movw	r2, #999	; 0x3e7
 800088a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_TIM2_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_TIM2_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000898:	4813      	ldr	r0, [pc, #76]	; (80008e8 <MX_TIM2_Init+0x94>)
 800089a:	f005 fa6f 	bl	8005d7c <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008a4:	f000 f912 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_TIM2_Init+0x94>)
 80008b6:	f005 fb19 	bl	8005eec <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 f904 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008c4:	2320      	movs	r3, #32
 80008c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_TIM2_Init+0x94>)
 80008d2:	f005 fd19 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008dc:	f000 f8f6 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200002d8 	.word	0x200002d8

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f005 fd6c 	bl	8006400 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f8cd 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000320 	.word	0x20000320
 800093c:	40004400 	.word	0x40004400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <MX_DMA_Init+0x3c>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2038      	movs	r0, #56	; 0x38
 8000968:	f001 f929 	bl	8001bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800096c:	2038      	movs	r0, #56	; 0x38
 800096e:	f001 f942 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b48      	ldr	r3, [pc, #288]	; (8000abc <MX_GPIO_Init+0x13c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a47      	ldr	r2, [pc, #284]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b45      	ldr	r3, [pc, #276]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a40      	ldr	r2, [pc, #256]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a39      	ldr	r2, [pc, #228]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b33      	ldr	r3, [pc, #204]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a32      	ldr	r2, [pc, #200]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009f4:	f043 0308 	orr.w	r3, r3, #8
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b30      	ldr	r3, [pc, #192]	; (8000abc <MX_GPIO_Init+0x13c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <MX_GPIO_Init+0x13c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <MX_GPIO_Init+0x13c>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <MX_GPIO_Init+0x13c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <MX_GPIO_Init+0x140>)
 8000a28:	f001 feae 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a32:	4824      	ldr	r0, [pc, #144]	; (8000ac4 <MX_GPIO_Init+0x144>)
 8000a34:	f001 fea8 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x148>)
 8000a3e:	f001 fea3 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a48:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <MX_GPIO_Init+0x144>)
 8000a5a:	f001 fce9 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0x140>)
 8000a76:	f001 fcdb 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <MX_GPIO_Init+0x144>)
 8000a94:	f001 fccc 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_GPIO_Init+0x148>)
 8000ab0:	f001 fcbe 	bl	8002430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020800 	.word	0x40020800
 8000ac8:	40020c00 	.word	0x40020c00

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b16:	2007      	movs	r0, #7
 8000b18:	f001 f846 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a2f      	ldr	r2, [pc, #188]	; (8000c04 <HAL_ADC_MspInit+0xdc>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d157      	bne.n	8000bfa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a2d      	ldr	r2, [pc, #180]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <HAL_ADC_MspInit+0xe0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b86:	2303      	movs	r3, #3
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	481d      	ldr	r0, [pc, #116]	; (8000c0c <HAL_ADC_MspInit+0xe4>)
 8000b96:	f001 fc4b 	bl	8002430 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <HAL_ADC_MspInit+0xec>)
 8000b9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bc0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000be0:	f001 f824 	bl	8001c2c <HAL_DMA_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000bea:	f7ff ff6f 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_ADC_MspInit+0xe8>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40012000 	.word	0x40012000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	200001cc 	.word	0x200001cc
 8000c14:	40026410 	.word	0x40026410

08000c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12c      	bne.n	8000c94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <HAL_I2C_MspInit+0x8c>)
 8000c74:	f001 fbdc 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400

08000ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_SPI_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12c      	bne.n	8000d24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d14:	2306      	movs	r3, #6
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_SPI_MspInit+0x8c>)
 8000d20:	f001 fb86 	bl	8002430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40003c00 	.word	0x40003c00
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800

08000d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d48:	d10d      	bne.n	8000d66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_TIM_Base_MspInit+0x3c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_TIM_Base_MspInit+0x3c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_TIM_Base_MspInit+0x3c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_UART_MspInit+0x94>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d133      	bne.n	8000e02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de2:	2307      	movs	r3, #7
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <HAL_UART_MspInit+0x9c>)
 8000dee:	f001 fb1f 	bl	8002430 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2026      	movs	r0, #38	; 0x26
 8000df8:	f000 fee1 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dfc:	2026      	movs	r0, #38	; 0x26
 8000dfe:	f000 fefa 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	; 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40004400 	.word	0x40004400
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020000 	.word	0x40020000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f974 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <USART2_IRQHandler+0x10>)
 8000e72:	f005 fba1 	bl	80065b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000320 	.word	0x20000320

08000e80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA2_Stream0_IRQHandler+0x10>)
 8000e86:	f001 f869 	bl	8001f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001cc 	.word	0x200001cc

08000e94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <OTG_FS_IRQHandler+0x10>)
 8000e9a:	f001 ff38 	bl	8002d0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20001b34 	.word	0x20001b34

08000ea8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return 1;
 8000eac:	2301      	movs	r3, #1
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_kill>:

int _kill(int pid, int sig)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ec2:	f00b fac5 	bl	800c450 <__errno>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2216      	movs	r2, #22
 8000eca:	601a      	str	r2, [r3, #0]
  return -1;
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_exit>:

void _exit (int status)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ffe7 	bl	8000eb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eea:	e7fe      	b.n	8000eea <_exit+0x12>

08000eec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e00a      	b.n	8000f14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000efe:	f3af 8000 	nop.w
 8000f02:	4601      	mov	r1, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	60ba      	str	r2, [r7, #8]
 8000f0a:	b2ca      	uxtb	r2, r1
 8000f0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf0      	blt.n	8000efe <_read+0x12>
  }

  return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e009      	b.n	8000f4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf1      	blt.n	8000f38 <_write+0x12>
  }
  return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_close>:

int _close(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f86:	605a      	str	r2, [r3, #4]
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_isatty>:

int _isatty(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f00b fa2a 	bl	800c450 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20020000 	.word	0x20020000
 8001028:	00000400 	.word	0x00000400
 800102c:	20000368 	.word	0x20000368
 8001030:	20002388 	.word	0x20002388

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800105c:	f7ff ffea 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	; (80010a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001086:	f00b f9e9 	bl	800c45c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff faa7 	bl	80005dc <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800109c:	0800d7c0 	.word	0x0800d7c0
  ldr r2, =_sbss
 80010a0:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80010a4:	20002384 	.word	0x20002384

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 fd67 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fcfa 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fd7f 	bl	8001c12 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 fd47 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	2000036c 	.word	0x2000036c

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000036c 	.word	0x2000036c

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008

080011d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e033      	b.n	8001256 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d109      	bne.n	800120a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fc96 	bl	8000b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 0310 	and.w	r3, r3, #16
 8001212:	2b00      	cmp	r3, #0
 8001214:	d118      	bne.n	8001248 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800121e:	f023 0302 	bic.w	r3, r3, #2
 8001222:	f043 0202 	orr.w	r2, r3, #2
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fa6e 	bl	800170c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f023 0303 	bic.w	r3, r3, #3
 800123e:	f043 0201 	orr.w	r2, r3, #1
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
 8001246:	e001      	b.n	800124c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_ADC_Start_DMA+0x1e>
 800127a:	2302      	movs	r3, #2
 800127c:	e0e9      	b.n	8001452 <HAL_ADC_Start_DMA+0x1f2>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b01      	cmp	r3, #1
 8001292:	d018      	beq.n	80012c6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0201 	orr.w	r2, r2, #1
 80012a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012a4:	4b6d      	ldr	r3, [pc, #436]	; (800145c <HAL_ADC_Start_DMA+0x1fc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a6d      	ldr	r2, [pc, #436]	; (8001460 <HAL_ADC_Start_DMA+0x200>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0c9a      	lsrs	r2, r3, #18
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	3b01      	subs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d4:	d107      	bne.n	80012e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012e4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	f040 80a1 	bne.w	8001438 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001320:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001334:	d106      	bne.n	8001344 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f023 0206 	bic.w	r2, r3, #6
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	645a      	str	r2, [r3, #68]	; 0x44
 8001342:	e002      	b.n	800134a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_ADC_Start_DMA+0x204>)
 8001354:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	4a43      	ldr	r2, [pc, #268]	; (8001468 <HAL_ADC_Start_DMA+0x208>)
 800135c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	4a42      	ldr	r2, [pc, #264]	; (800146c <HAL_ADC_Start_DMA+0x20c>)
 8001364:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	4a41      	ldr	r2, [pc, #260]	; (8001470 <HAL_ADC_Start_DMA+0x210>)
 800136c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001376:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001386:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001396:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	334c      	adds	r3, #76	; 0x4c
 80013a2:	4619      	mov	r1, r3
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f000 fcee 	bl	8001d88 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d12a      	bne.n	800140e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2d      	ldr	r2, [pc, #180]	; (8001474 <HAL_ADC_Start_DMA+0x214>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d015      	beq.n	80013ee <HAL_ADC_Start_DMA+0x18e>
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <HAL_ADC_Start_DMA+0x218>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d105      	bne.n	80013d8 <HAL_ADC_Start_DMA+0x178>
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_ADC_Start_DMA+0x204>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00a      	beq.n	80013ee <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_ADC_Start_DMA+0x21c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d136      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <HAL_ADC_Start_DMA+0x204>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d130      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d129      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e020      	b.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a18      	ldr	r2, [pc, #96]	; (8001474 <HAL_ADC_Start_DMA+0x214>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d11b      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d114      	bne.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	e00b      	b.n	8001450 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f043 0210 	orr.w	r2, r3, #16
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000000 	.word	0x20000000
 8001460:	431bde83 	.word	0x431bde83
 8001464:	40012300 	.word	0x40012300
 8001468:	08001905 	.word	0x08001905
 800146c:	080019bf 	.word	0x080019bf
 8001470:	080019db 	.word	0x080019db
 8001474:	40012000 	.word	0x40012000
 8001478:	40012100 	.word	0x40012100
 800147c:	40012200 	.word	0x40012200

08001480 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e113      	b.n	80016ec <HAL_ADC_ConfigChannel+0x244>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d925      	bls.n	8001520 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68d9      	ldr	r1, [r3, #12]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	3b1e      	subs	r3, #30
 80014ea:	2207      	movs	r2, #7
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43da      	mvns	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	400a      	ands	r2, r1
 80014f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68d9      	ldr	r1, [r3, #12]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	4603      	mov	r3, r0
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4403      	add	r3, r0
 8001512:	3b1e      	subs	r3, #30
 8001514:	409a      	lsls	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	e022      	b.n	8001566 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6919      	ldr	r1, [r3, #16]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	b29b      	uxth	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	2207      	movs	r2, #7
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	4603      	mov	r3, r0
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4403      	add	r3, r0
 800155c:	409a      	lsls	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b06      	cmp	r3, #6
 800156c:	d824      	bhi.n	80015b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b05      	subs	r3, #5
 8001580:	221f      	movs	r2, #31
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	400a      	ands	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b05      	subs	r3, #5
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
 80015b6:	e04c      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b0c      	cmp	r3, #12
 80015be:	d824      	bhi.n	800160a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	3b23      	subs	r3, #35	; 0x23
 80015d2:	221f      	movs	r2, #31
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43da      	mvns	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	400a      	ands	r2, r1
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b23      	subs	r3, #35	; 0x23
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	631a      	str	r2, [r3, #48]	; 0x30
 8001608:	e023      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	3b41      	subs	r3, #65	; 0x41
 800161c:	221f      	movs	r2, #31
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	400a      	ands	r2, r1
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	3b41      	subs	r3, #65	; 0x41
 8001646:	fa00 f203 	lsl.w	r2, r0, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_ADC_ConfigChannel+0x250>)
 8001654:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a28      	ldr	r2, [pc, #160]	; (80016fc <HAL_ADC_ConfigChannel+0x254>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d10f      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1d8>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b12      	cmp	r3, #18
 8001666:	d10b      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_ADC_ConfigChannel+0x254>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12b      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x23a>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_ADC_ConfigChannel+0x258>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d003      	beq.n	800169c <HAL_ADC_ConfigChannel+0x1f4>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b11      	cmp	r3, #17
 800169a:	d122      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a11      	ldr	r2, [pc, #68]	; (8001700 <HAL_ADC_ConfigChannel+0x258>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d111      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_ADC_ConfigChannel+0x25c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_ADC_ConfigChannel+0x260>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	0c9a      	lsrs	r2, r3, #18
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016d4:	e002      	b.n	80016dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3b01      	subs	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40012300 	.word	0x40012300
 80016fc:	40012000 	.word	0x40012000
 8001700:	10000012 	.word	0x10000012
 8001704:	20000000 	.word	0x20000000
 8001708:	431bde83 	.word	0x431bde83

0800170c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <ADC_Init+0x1f0>)
 8001716:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	431a      	orrs	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	021a      	lsls	r2, r3, #8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6899      	ldr	r1, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	4a58      	ldr	r2, [pc, #352]	; (8001900 <ADC_Init+0x1f4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d022      	beq.n	80017ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6899      	ldr	r1, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6899      	ldr	r1, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	e00f      	b.n	800180a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001808:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0202 	bic.w	r2, r2, #2
 8001818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7e1b      	ldrb	r3, [r3, #24]
 8001824:	005a      	lsls	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01b      	beq.n	8001870 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001846:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001856:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6859      	ldr	r1, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	3b01      	subs	r3, #1
 8001864:	035a      	lsls	r2, r3, #13
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	e007      	b.n	8001880 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800187e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	3b01      	subs	r3, #1
 800189c:	051a      	lsls	r2, r3, #20
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6899      	ldr	r1, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018c2:	025a      	lsls	r2, r3, #9
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6899      	ldr	r1, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	029a      	lsls	r2, r3, #10
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	609a      	str	r2, [r3, #8]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40012300 	.word	0x40012300
 8001900:	0f000001 	.word	0x0f000001

08001904 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800191a:	2b00      	cmp	r3, #0
 800191c:	d13c      	bne.n	8001998 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d12b      	bne.n	8001990 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	d127      	bne.n	8001990 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001958:	2b00      	cmp	r3, #0
 800195a:	d119      	bne.n	8001990 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0220 	bic.w	r2, r2, #32
 800196a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f009 fa75 	bl	800ae80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001996:	e00e      	b.n	80019b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fd75 	bl	8001494 <HAL_ADC_ErrorCallback>
}
 80019aa:	e004      	b.n	80019b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	4798      	blx	r3
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff fd57 	bl	8001480 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f043 0204 	orr.w	r2, r3, #4
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fd4a 	bl	8001494 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a00:	bf00      	nop
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <__NVIC_EnableIRQ+0x38>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff29 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff3e 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff31 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa2 	bl	8001b64 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff fa9e 	bl	8001178 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e099      	b.n	8001d7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c68:	e00f      	b.n	8001c8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c6a:	f7ff fa85 	bl	8001178 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d908      	bls.n	8001c8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e078      	b.n	8001d7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e8      	bne.n	8001c6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_DMA_Init+0x158>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d107      	bne.n	8001cf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	4313      	orrs	r3, r2
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f023 0307 	bic.w	r3, r3, #7
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d117      	bne.n	8001d4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00e      	beq.n	8001d4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fb01 	bl	8002338 <DMA_CheckFifoParam>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e016      	b.n	8001d7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fab8 	bl	80022cc <DMA_CalcBaseAndBitshift>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	223f      	movs	r2, #63	; 0x3f
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	f010803f 	.word	0xf010803f

08001d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_DMA_Start_IT+0x26>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e040      	b.n	8001e30 <HAL_DMA_Start_IT+0xa8>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d12f      	bne.n	8001e22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 fa4a 	bl	8002270 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	223f      	movs	r2, #63	; 0x3f
 8001de2:	409a      	lsls	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0216 	orr.w	r2, r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0208 	orr.w	r2, r2, #8
 8001e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e005      	b.n	8001e2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e46:	f7ff f997 	bl	8001178 <HAL_GetTick>
 8001e4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d008      	beq.n	8001e6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e052      	b.n	8001f10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0216 	bic.w	r2, r2, #22
 8001e78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d103      	bne.n	8001e9a <HAL_DMA_Abort+0x62>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0208 	bic.w	r2, r2, #8
 8001ea8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eba:	e013      	b.n	8001ee4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ebc:	f7ff f95c 	bl	8001178 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d90c      	bls.n	8001ee4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e015      	b.n	8001f10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1e4      	bne.n	8001ebc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	223f      	movs	r2, #63	; 0x3f
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d004      	beq.n	8001f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00c      	b.n	8001f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2205      	movs	r2, #5
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f68:	4b8e      	ldr	r3, [pc, #568]	; (80021a4 <HAL_DMA_IRQHandler+0x248>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a8e      	ldr	r2, [pc, #568]	; (80021a8 <HAL_DMA_IRQHandler+0x24c>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a9b      	lsrs	r3, r3, #10
 8001f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	2208      	movs	r2, #8
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01a      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0204 	bic.w	r2, r2, #4
 8001fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	2201      	movs	r2, #1
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d012      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00b      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2201      	movs	r2, #1
 8001fec:	409a      	lsls	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0202 	orr.w	r2, r3, #2
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2204      	movs	r2, #4
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d012      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00b      	beq.n	8002034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002020:	2204      	movs	r2, #4
 8002022:	409a      	lsls	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f043 0204 	orr.w	r2, r3, #4
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2210      	movs	r2, #16
 800203a:	409a      	lsls	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d043      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03c      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	2210      	movs	r2, #16
 8002058:	409a      	lsls	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d018      	beq.n	800209e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d108      	bne.n	800208c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d024      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
 800208a:	e01f      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
 800209c:	e016      	b.n	80020cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0208 	bic.w	r2, r2, #8
 80020ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	2220      	movs	r2, #32
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 808f 	beq.w	80021fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8087 	beq.w	80021fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2220      	movs	r2, #32
 80020f4:	409a      	lsls	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b05      	cmp	r3, #5
 8002104:	d136      	bne.n	8002174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0216 	bic.w	r2, r2, #22
 8002114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <HAL_DMA_IRQHandler+0x1da>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0208 	bic.w	r2, r2, #8
 8002144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214a:	223f      	movs	r2, #63	; 0x3f
 800214c:	409a      	lsls	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002166:	2b00      	cmp	r3, #0
 8002168:	d07e      	beq.n	8002268 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
        }
        return;
 8002172:	e079      	b.n	8002268 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01d      	beq.n	80021be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10d      	bne.n	80021ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	2b00      	cmp	r3, #0
 8002196:	d031      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e02c      	b.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000
 80021a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d023      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
 80021bc:	e01e      	b.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10f      	bne.n	80021ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0210 	bic.w	r2, r2, #16
 80021da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	2b00      	cmp	r3, #0
 8002202:	d032      	beq.n	800226a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d022      	beq.n	8002256 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2205      	movs	r2, #5
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	3301      	adds	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	429a      	cmp	r2, r3
 8002232:	d307      	bcc.n	8002244 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f2      	bne.n	8002228 <HAL_DMA_IRQHandler+0x2cc>
 8002242:	e000      	b.n	8002246 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002244:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
 8002266:	e000      	b.n	800226a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002268:	bf00      	nop
    }
  }
}
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800228c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d108      	bne.n	80022b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022ae:	e007      	b.n	80022c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b10      	subs	r3, #16
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <DMA_CalcBaseAndBitshift+0x64>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e6:	4a13      	ldr	r2, [pc, #76]	; (8002334 <DMA_CalcBaseAndBitshift+0x68>)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d909      	bls.n	800230e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	; 0x58
 800230c:	e007      	b.n	800231e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	aaaaaaab 	.word	0xaaaaaaab
 8002334:	0800d720 	.word	0x0800d720

08002338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11f      	bne.n	8002392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d856      	bhi.n	8002406 <DMA_CheckFifoParam+0xce>
 8002358:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <DMA_CheckFifoParam+0x28>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002371 	.word	0x08002371
 8002364:	08002383 	.word	0x08002383
 8002368:	08002371 	.word	0x08002371
 800236c:	08002407 	.word	0x08002407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d046      	beq.n	800240a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002380:	e043      	b.n	800240a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800238a:	d140      	bne.n	800240e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e03d      	b.n	800240e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239a:	d121      	bne.n	80023e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d837      	bhi.n	8002412 <DMA_CheckFifoParam+0xda>
 80023a2:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <DMA_CheckFifoParam+0x70>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023bf 	.word	0x080023bf
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	080023d1 	.word	0x080023d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e030      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d025      	beq.n	8002416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e022      	b.n	8002416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023de:	e01c      	b.n	800241a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d903      	bls.n	80023ee <DMA_CheckFifoParam+0xb6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ec:	e018      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      break;
 80023f2:	e015      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      break;
 8002404:	e00b      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 8002406:	bf00      	nop
 8002408:	e00a      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e008      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e006      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e004      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;   
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
    }
  } 
  
  return status; 
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e165      	b.n	8002718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	f040 8154 	bne.w	8002712 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d005      	beq.n	8002482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	2b02      	cmp	r3, #2
 8002480:	d130      	bne.n	80024e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 0201 	and.w	r2, r3, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d017      	beq.n	8002520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d123      	bne.n	8002574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	08da      	lsrs	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3208      	adds	r2, #8
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80ae 	beq.w	8002712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_GPIO_Init+0x300>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a5c      	ldr	r2, [pc, #368]	; (8002730 <HAL_GPIO_Init+0x300>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b5a      	ldr	r3, [pc, #360]	; (8002730 <HAL_GPIO_Init+0x300>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d2:	4a58      	ldr	r2, [pc, #352]	; (8002734 <HAL_GPIO_Init+0x304>)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	3302      	adds	r3, #2
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4f      	ldr	r2, [pc, #316]	; (8002738 <HAL_GPIO_Init+0x308>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d025      	beq.n	800264a <HAL_GPIO_Init+0x21a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4e      	ldr	r2, [pc, #312]	; (800273c <HAL_GPIO_Init+0x30c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <HAL_GPIO_Init+0x216>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4d      	ldr	r2, [pc, #308]	; (8002740 <HAL_GPIO_Init+0x310>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x212>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4c      	ldr	r2, [pc, #304]	; (8002744 <HAL_GPIO_Init+0x314>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x20e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4b      	ldr	r2, [pc, #300]	; (8002748 <HAL_GPIO_Init+0x318>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x20a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4a      	ldr	r2, [pc, #296]	; (800274c <HAL_GPIO_Init+0x31c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x206>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a49      	ldr	r2, [pc, #292]	; (8002750 <HAL_GPIO_Init+0x320>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x202>
 800262e:	2306      	movs	r3, #6
 8002630:	e00c      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002632:	2307      	movs	r3, #7
 8002634:	e00a      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <HAL_GPIO_Init+0x21c>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x21c>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <HAL_GPIO_Init+0x21c>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_GPIO_Init+0x21c>
 800264a:	2300      	movs	r3, #0
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	f002 0203 	and.w	r2, r2, #3
 8002652:	0092      	lsls	r2, r2, #2
 8002654:	4093      	lsls	r3, r2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265c:	4935      	ldr	r1, [pc, #212]	; (8002734 <HAL_GPIO_Init+0x304>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266a:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <HAL_GPIO_Init+0x324>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268e:	4a31      	ldr	r2, [pc, #196]	; (8002754 <HAL_GPIO_Init+0x324>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <HAL_GPIO_Init+0x324>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b8:	4a26      	ldr	r2, [pc, #152]	; (8002754 <HAL_GPIO_Init+0x324>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_GPIO_Init+0x324>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e2:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_GPIO_Init+0x324>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_GPIO_Init+0x324>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800270c:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_GPIO_Init+0x324>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3301      	adds	r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	f67f ae96 	bls.w	800244c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40013800 	.word	0x40013800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	40020800 	.word	0x40020800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40021000 	.word	0x40021000
 800274c:	40021400 	.word	0x40021400
 8002750:	40021800 	.word	0x40021800
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e001      	b.n	800277a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
 8002794:	4613      	mov	r3, r2
 8002796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002798:	787b      	ldrb	r3, [r7, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a4:	e003      	b.n	80027ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	041a      	lsls	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	619a      	str	r2, [r3, #24]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027cc:	887a      	ldrh	r2, [r7, #2]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	041a      	lsls	r2, r3, #16
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	400b      	ands	r3, r1
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e12b      	b.n	8002a5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe f9fe 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	; 0x24
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002842:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002852:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002854:	f001 fca0 	bl	8004198 <HAL_RCC_GetPCLK1Freq>
 8002858:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a81      	ldr	r2, [pc, #516]	; (8002a64 <HAL_I2C_Init+0x274>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d807      	bhi.n	8002874 <HAL_I2C_Init+0x84>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a80      	ldr	r2, [pc, #512]	; (8002a68 <HAL_I2C_Init+0x278>)
 8002868:	4293      	cmp	r3, r2
 800286a:	bf94      	ite	ls
 800286c:	2301      	movls	r3, #1
 800286e:	2300      	movhi	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	e006      	b.n	8002882 <HAL_I2C_Init+0x92>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a7d      	ldr	r2, [pc, #500]	; (8002a6c <HAL_I2C_Init+0x27c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	bf94      	ite	ls
 800287c:	2301      	movls	r3, #1
 800287e:	2300      	movhi	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0e7      	b.n	8002a5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4a78      	ldr	r2, [pc, #480]	; (8002a70 <HAL_I2C_Init+0x280>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9b      	lsrs	r3, r3, #18
 8002894:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a6a      	ldr	r2, [pc, #424]	; (8002a64 <HAL_I2C_Init+0x274>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d802      	bhi.n	80028c4 <HAL_I2C_Init+0xd4>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3301      	adds	r3, #1
 80028c2:	e009      	b.n	80028d8 <HAL_I2C_Init+0xe8>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	4a69      	ldr	r2, [pc, #420]	; (8002a74 <HAL_I2C_Init+0x284>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	3301      	adds	r3, #1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	430b      	orrs	r3, r1
 80028de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	495c      	ldr	r1, [pc, #368]	; (8002a64 <HAL_I2C_Init+0x274>)
 80028f4:	428b      	cmp	r3, r1
 80028f6:	d819      	bhi.n	800292c <HAL_I2C_Init+0x13c>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e59      	subs	r1, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	fbb1 f3f3 	udiv	r3, r1, r3
 8002906:	1c59      	adds	r1, r3, #1
 8002908:	f640 73fc 	movw	r3, #4092	; 0xffc
 800290c:	400b      	ands	r3, r1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_I2C_Init+0x138>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e59      	subs	r1, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	e051      	b.n	80029cc <HAL_I2C_Init+0x1dc>
 8002928:	2304      	movs	r3, #4
 800292a:	e04f      	b.n	80029cc <HAL_I2C_Init+0x1dc>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d111      	bne.n	8002958 <HAL_I2C_Init+0x168>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e58      	subs	r0, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	440b      	add	r3, r1
 8002942:	fbb0 f3f3 	udiv	r3, r0, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e012      	b.n	800297e <HAL_I2C_Init+0x18e>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	0099      	lsls	r1, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Init+0x196>
 8002982:	2301      	movs	r3, #1
 8002984:	e022      	b.n	80029cc <HAL_I2C_Init+0x1dc>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10e      	bne.n	80029ac <HAL_I2C_Init+0x1bc>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1e58      	subs	r0, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	440b      	add	r3, r1
 800299c:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029aa:	e00f      	b.n	80029cc <HAL_I2C_Init+0x1dc>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	0099      	lsls	r1, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	6809      	ldr	r1, [r1, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6911      	ldr	r1, [r2, #16]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68d2      	ldr	r2, [r2, #12]
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	000186a0 	.word	0x000186a0
 8002a68:	001e847f 	.word	0x001e847f
 8002a6c:	003d08ff 	.word	0x003d08ff
 8002a70:	431bde83 	.word	0x431bde83
 8002a74:	10624dd3 	.word	0x10624dd3

08002a78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e108      	b.n	8002c9c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f008 ff8d 	bl	800b9c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2203      	movs	r2, #3
 8002aae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab8:	d102      	bne.n	8002ac0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 fdb4 	bl	8007632 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7c1a      	ldrb	r2, [r3, #16]
 8002ad2:	f88d 2000 	strb.w	r2, [sp]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ada:	f004 fc93 	bl	8007404 <USB_CoreInit>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0d5      	b.n	8002c9c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 fdac 	bl	8007654 <USB_SetCurrentMode>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0c6      	b.n	8002c9c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	e04a      	b.n	8002baa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3315      	adds	r3, #21
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	3314      	adds	r3, #20
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	b298      	uxth	r0, r3
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	332e      	adds	r3, #46	; 0x2e
 8002b50:	4602      	mov	r2, r0
 8002b52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3318      	adds	r3, #24
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	331c      	adds	r3, #28
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	3320      	adds	r3, #32
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3324      	adds	r3, #36	; 0x24
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	791b      	ldrb	r3, [r3, #4]
 8002bae:	7bfa      	ldrb	r2, [r7, #15]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3af      	bcc.n	8002b14 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e044      	b.n	8002c44 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	3301      	adds	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	791b      	ldrb	r3, [r3, #4]
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d3b5      	bcc.n	8002bba <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7c1a      	ldrb	r2, [r3, #16]
 8002c56:	f88d 2000 	strb.w	r2, [sp]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5e:	f004 fd45 	bl	80076ec <USB_DevInit>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e013      	b.n	8002c9c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7b1b      	ldrb	r3, [r3, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f001 f96e 	bl	8003f6c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 fd82 	bl	800879e <USB_DevDisconnect>

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_PCD_Start+0x1c>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e022      	b.n	8002d06 <HAL_PCD_Start+0x62>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 fc8f 	bl	8007610 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f005 fd30 	bl	800875c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d0e:	b590      	push	{r4, r7, lr}
 8002d10:	b08d      	sub	sp, #52	; 0x34
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f005 fdee 	bl	8008906 <USB_GetMode>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 84b9 	bne.w	80036a4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f005 fd52 	bl	80087e0 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 84af 	beq.w	80036a2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f005 fd3f 	bl	80087e0 <USB_ReadInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d107      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f002 0202 	and.w	r2, r2, #2
 8002d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f005 fd2d 	bl	80087e0 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d161      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0210 	bic.w	r2, r2, #16
 8002d9e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	0c5b      	lsrs	r3, r3, #17
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d124      	bne.n	8002e16 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d035      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	6a38      	ldr	r0, [r7, #32]
 8002dec:	f005 fb64 	bl	80084b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dfc:	441a      	add	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0e:	441a      	add	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	615a      	str	r2, [r3, #20]
 8002e14:	e016      	b.n	8002e44 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	0c5b      	lsrs	r3, r3, #17
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d110      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002e28:	2208      	movs	r2, #8
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6a38      	ldr	r0, [r7, #32]
 8002e2e:	f005 fb43 	bl	80084b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e3e:	441a      	add	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0210 	orr.w	r2, r2, #16
 8002e52:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f005 fcc1 	bl	80087e0 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e68:	f040 80a7 	bne.w	8002fba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f005 fcc6 	bl	8008806 <USB_ReadDevAllOutEpInterrupt>
 8002e7a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e7c:	e099      	b.n	8002fb2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 808e 	beq.w	8002fa6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f005 fcea 	bl	800886e <USB_ReadDevOutEPInterrupt>
 8002e9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fed0 	bl	8003c60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2308      	movs	r3, #8
 8002eda:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 ffa6 	bl	8003e30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	2310      	movs	r3, #16
 8002efe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d030      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d109      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f28:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	78db      	ldrb	r3, [r3, #3]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f008 fe51 	bl	800bbfc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f66:	461a      	mov	r2, r3
 8002f68:	2302      	movs	r3, #2
 8002f6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f82:	461a      	mov	r2, r3
 8002f84:	2320      	movs	r3, #32
 8002f86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	3301      	adds	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f af62 	bne.w	8002e7e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f005 fc0e 	bl	80087e0 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fce:	f040 80db 	bne.w	8003188 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f005 fc2f 	bl	800883a <USB_ReadDevAllInEpInterrupt>
 8002fdc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fe2:	e0cd      	b.n	8003180 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80c2 	beq.w	8003174 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f005 fc55 	bl	80088aa <USB_ReadDevInEPInterrupt>
 8003000:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d057      	beq.n	80030bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	2201      	movs	r2, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43db      	mvns	r3, r3
 8003026:	69f9      	ldr	r1, [r7, #28]
 8003028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800302c:	4013      	ands	r3, r2
 800302e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303c:	461a      	mov	r2, r3
 800303e:	2301      	movs	r3, #1
 8003040:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	799b      	ldrb	r3, [r3, #6]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d132      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3320      	adds	r3, #32
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4403      	add	r3, r0
 800306a:	331c      	adds	r3, #28
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4419      	add	r1, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4403      	add	r3, r0
 800307e:	3320      	adds	r3, #32
 8003080:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d113      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x3a2>
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	3324      	adds	r3, #36	; 0x24
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80030a8:	461a      	mov	r2, r3
 80030aa:	2101      	movs	r1, #1
 80030ac:	f005 fc5c 	bl	8008968 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f008 fd1b 	bl	800baf2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d2:	461a      	mov	r2, r3
 80030d4:	2308      	movs	r3, #8
 80030d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ee:	461a      	mov	r2, r3
 80030f0:	2310      	movs	r3, #16
 80030f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310a:	461a      	mov	r2, r3
 800310c:	2340      	movs	r3, #64	; 0x40
 800310e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d023      	beq.n	8003162 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800311a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311c:	6a38      	ldr	r0, [r7, #32]
 800311e:	f004 fc43 	bl	80079a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	3310      	adds	r3, #16
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	78db      	ldrb	r3, [r3, #3]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	b2db      	uxtb	r3, r3
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f008 fd68 	bl	800bc20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315c:	461a      	mov	r2, r3
 800315e:	2302      	movs	r3, #2
 8003160:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800316c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fcea 	bl	8003b48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	3301      	adds	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	f47f af2e 	bne.w	8002fe4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f005 fb27 	bl	80087e0 <USB_ReadInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800319c:	d122      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d108      	bne.n	80031ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031c4:	2100      	movs	r1, #0
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f008 fee2 	bl	800bf90 <HAL_PCDEx_LPM_Callback>
 80031cc:	e002      	b.n	80031d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f008 fd06 	bl	800bbe0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f005 faf9 	bl	80087e0 <USB_ReadInterrupts>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f8:	d112      	bne.n	8003220 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d102      	bne.n	8003210 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f008 fcc2 	bl	800bb94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800321e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f005 fadb 	bl	80087e0 <USB_ReadInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003234:	d121      	bne.n	800327a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003244:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800324c:	2b00      	cmp	r3, #0
 800324e:	d111      	bne.n	8003274 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800326a:	2101      	movs	r1, #1
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f008 fe8f 	bl	800bf90 <HAL_PCDEx_LPM_Callback>
 8003272:	e002      	b.n	800327a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f008 fc8d 	bl	800bb94 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f005 faae 	bl	80087e0 <USB_ReadInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328e:	f040 80b7 	bne.w	8003400 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2110      	movs	r1, #16
 80032ac:	4618      	mov	r0, r3
 80032ae:	f004 fb7b 	bl	80079a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b6:	e046      	b.n	8003346 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c4:	461a      	mov	r2, r3
 80032c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032dc:	0151      	lsls	r1, r2, #5
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	440a      	add	r2, r1
 80032e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f8:	461a      	mov	r2, r3
 80032fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003310:	0151      	lsls	r1, r2, #5
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	440a      	add	r2, r1
 8003316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800331a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800331e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003330:	0151      	lsls	r1, r2, #5
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	440a      	add	r2, r1
 8003336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800333a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800333e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	3301      	adds	r3, #1
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	791b      	ldrb	r3, [r3, #4]
 800334a:	461a      	mov	r2, r3
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	4293      	cmp	r3, r2
 8003350:	d3b2      	bcc.n	80032b8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003360:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003364:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7bdb      	ldrb	r3, [r3, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800337e:	f043 030b 	orr.w	r3, r3, #11
 8003382:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003394:	f043 030b 	orr.w	r3, r3, #11
 8003398:	6453      	str	r3, [r2, #68]	; 0x44
 800339a:	e015      	b.n	80033c8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c2:	f043 030b 	orr.w	r3, r3, #11
 80033c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033ea:	461a      	mov	r2, r3
 80033ec:	f005 fabc 	bl	8008968 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80033fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f005 f9eb 	bl	80087e0 <USB_ReadInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003414:	d123      	bne.n	800345e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f005 fa81 	bl	8008922 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fb38 	bl	8007a9a <USB_GetDevSpeed>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681c      	ldr	r4, [r3, #0]
 8003436:	f000 fea3 	bl	8004180 <HAL_RCC_GetHCLKFreq>
 800343a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003440:	461a      	mov	r2, r3
 8003442:	4620      	mov	r0, r4
 8003444:	f004 f842 	bl	80074cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f008 fb7a 	bl	800bb42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800345c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f005 f9bc 	bl	80087e0 <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b08      	cmp	r3, #8
 8003470:	d10a      	bne.n	8003488 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f008 fb57 	bl	800bb26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f002 0208 	and.w	r2, r2, #8
 8003486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f005 f9a7 	bl	80087e0 <USB_ReadInterrupts>
 8003492:	4603      	mov	r3, r0
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b80      	cmp	r3, #128	; 0x80
 800349a:	d123      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034a8:	2301      	movs	r3, #1
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
 80034ac:	e014      	b.n	80034d8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	f203 2357 	addw	r3, r3, #599	; 0x257
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d105      	bne.n	80034d2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4619      	mov	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fb0a 	bl	8003ae6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	3301      	adds	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	791b      	ldrb	r3, [r3, #4]
 80034dc:	461a      	mov	r2, r3
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d3e4      	bcc.n	80034ae <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f005 f979 	bl	80087e0 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f8:	d13c      	bne.n	8003574 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034fa:	2301      	movs	r3, #1
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
 80034fe:	e02b      	b.n	8003558 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3318      	adds	r3, #24
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d115      	bne.n	8003552 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003526:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003528:	2b00      	cmp	r3, #0
 800352a:	da12      	bge.n	8003552 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3317      	adds	r3, #23
 800353c:	2201      	movs	r2, #1
 800353e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003548:	b2db      	uxtb	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 faca 	bl	8003ae6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	3301      	adds	r3, #1
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	791b      	ldrb	r3, [r3, #4]
 800355c:	461a      	mov	r2, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	4293      	cmp	r3, r2
 8003562:	d3cd      	bcc.n	8003500 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f005 f931 	bl	80087e0 <USB_ReadInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003588:	d156      	bne.n	8003638 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800358a:	2301      	movs	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	e045      	b.n	800361c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d12e      	bne.n	8003616 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da2b      	bge.n	8003616 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80035ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d121      	bne.n	8003616 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800360e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003612:	6053      	str	r3, [r2, #4]
            break;
 8003614:	e008      	b.n	8003628 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	3301      	adds	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	791b      	ldrb	r3, [r3, #4]
 8003620:	461a      	mov	r2, r3
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	4293      	cmp	r3, r2
 8003626:	d3b3      	bcc.n	8003590 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f005 f8cf 	bl	80087e0 <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d10a      	bne.n	8003664 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f008 faf8 	bl	800bc44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f005 f8b9 	bl	80087e0 <USB_ReadInterrupts>
 800366e:	4603      	mov	r3, r0
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d115      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f008 fae8 	bl	800bc60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	e000      	b.n	80036a4 <HAL_PCD_IRQHandler+0x996>
      return;
 80036a2:	bf00      	nop
    }
  }
}
 80036a4:	3734      	adds	r7, #52	; 0x34
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}

080036aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_PCD_SetAddress+0x1a>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e012      	b.n	80036ea <HAL_PCD_SetAddress+0x40>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 f818 	bl	8008710 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	4608      	mov	r0, r1
 80036fc:	4611      	mov	r1, r2
 80036fe:	461a      	mov	r2, r3
 8003700:	4603      	mov	r3, r0
 8003702:	70fb      	strb	r3, [r7, #3]
 8003704:	460b      	mov	r3, r1
 8003706:	803b      	strh	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da0f      	bge.n	8003738 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	3310      	adds	r3, #16
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	3304      	adds	r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	705a      	strb	r2, [r3, #1]
 8003736:	e00f      	b.n	8003758 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f003 020f 	and.w	r2, r3, #15
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	b2da      	uxtb	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003764:	883b      	ldrh	r3, [r7, #0]
 8003766:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	78ba      	ldrb	r2, [r7, #2]
 8003772:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003786:	78bb      	ldrb	r3, [r7, #2]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d102      	bne.n	8003792 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_PCD_EP_Open+0xae>
 800379c:	2302      	movs	r3, #2
 800379e:	e00e      	b.n	80037be <HAL_PCD_EP_Open+0xcc>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68f9      	ldr	r1, [r7, #12]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f004 f998 	bl	8007ae4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80037bc:	7afb      	ldrb	r3, [r7, #11]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	460b      	mov	r3, r1
 80037d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	da0f      	bge.n	80037fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	3310      	adds	r3, #16
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	705a      	strb	r2, [r3, #1]
 80037f8:	e00f      	b.n	800381a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	4413      	add	r3, r2
 8003810:	3304      	adds	r3, #4
 8003812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_PCD_EP_Close+0x6e>
 8003830:	2302      	movs	r3, #2
 8003832:	e00e      	b.n	8003852 <HAL_PCD_EP_Close+0x8c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	4618      	mov	r0, r3
 8003844:	f004 f9d6 	bl	8007bf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	460b      	mov	r3, r1
 8003868:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800386a:	7afb      	ldrb	r3, [r7, #11]
 800386c:	f003 020f 	and.w	r2, r3, #15
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	3304      	adds	r3, #4
 8003882:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2200      	movs	r2, #0
 8003894:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2200      	movs	r2, #0
 800389a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800389c:	7afb      	ldrb	r3, [r7, #11]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	799b      	ldrb	r3, [r3, #6]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d102      	bne.n	80038b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	799b      	ldrb	r3, [r3, #6]
 80038be:	461a      	mov	r2, r3
 80038c0:	6979      	ldr	r1, [r7, #20]
 80038c2:	f004 fa73 	bl	8007dac <USB_EPStartXfer>

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	f003 020f 	and.w	r2, r3, #15
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	460b      	mov	r3, r1
 800390e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003910:	7afb      	ldrb	r3, [r7, #11]
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	3310      	adds	r3, #16
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2201      	movs	r2, #1
 800393e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003940:	7afb      	ldrb	r3, [r7, #11]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	b2da      	uxtb	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	799b      	ldrb	r3, [r3, #6]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d102      	bne.n	800395a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	799b      	ldrb	r3, [r3, #6]
 8003962:	461a      	mov	r2, r3
 8003964:	6979      	ldr	r1, [r7, #20]
 8003966:	f004 fa21 	bl	8007dac <USB_EPStartXfer>

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	7912      	ldrb	r2, [r2, #4]
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e04f      	b.n	8003a32 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003996:	2b00      	cmp	r3, #0
 8003998:	da0f      	bge.n	80039ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	f003 020f 	and.w	r2, r3, #15
 80039a0:	4613      	mov	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3310      	adds	r3, #16
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	3304      	adds	r3, #4
 80039b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	705a      	strb	r2, [r3, #1]
 80039b8:	e00d      	b.n	80039d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	4413      	add	r3, r2
 80039cc:	3304      	adds	r3, #4
 80039ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_PCD_EP_SetStall+0x82>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e01d      	b.n	8003a32 <HAL_PCD_EP_SetStall+0xbe>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f004 fdaf 	bl	8008568 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d109      	bne.n	8003a28 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7999      	ldrb	r1, [r3, #6]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a22:	461a      	mov	r2, r3
 8003a24:	f004 ffa0 	bl	8008968 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	7912      	ldrb	r2, [r2, #4]
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d901      	bls.n	8003a58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e042      	b.n	8003ade <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	da0f      	bge.n	8003a80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	3310      	adds	r3, #16
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	4413      	add	r3, r2
 8003a74:	3304      	adds	r3, #4
 8003a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	705a      	strb	r2, [r3, #1]
 8003a7e:	e00f      	b.n	8003aa0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	f003 020f 	and.w	r2, r3, #15
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	3304      	adds	r3, #4
 8003a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_PCD_EP_ClrStall+0x86>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e00e      	b.n	8003ade <HAL_PCD_EP_ClrStall+0xa4>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f004 fdb8 	bl	8008644 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da0c      	bge.n	8003b14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	3310      	adds	r3, #16
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e00c      	b.n	8003b2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 020f 	and.w	r2, r3, #15
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68f9      	ldr	r1, [r7, #12]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f004 fbd7 	bl	80082e8 <USB_EPStopXfer>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	; 0x28
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	3310      	adds	r3, #16
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d901      	bls.n	8003b80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e06b      	b.n	8003c58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d902      	bls.n	8003b9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	3303      	adds	r3, #3
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba4:	e02a      	b.n	8003bfc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d902      	bls.n	8003bc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3303      	adds	r3, #3
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	68d9      	ldr	r1, [r3, #12]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	4603      	mov	r3, r0
 8003bde:	6978      	ldr	r0, [r7, #20]
 8003be0:	f004 fc2c 	bl	800843c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	441a      	add	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	441a      	add	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d809      	bhi.n	8003c26 <PCD_WriteEmptyTxFifo+0xde>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	695a      	ldr	r2, [r3, #20]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d203      	bcs.n	8003c26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1bf      	bne.n	8003ba6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d811      	bhi.n	8003c56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	2201      	movs	r2, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	6939      	ldr	r1, [r7, #16]
 8003c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c52:	4013      	ands	r3, r2
 8003c54:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	333c      	adds	r3, #60	; 0x3c
 8003c78:	3304      	adds	r3, #4
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	799b      	ldrb	r3, [r3, #6]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d17b      	bne.n	8003d8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4a61      	ldr	r2, [pc, #388]	; (8003e28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	f240 80b9 	bls.w	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80b3 	beq.w	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc8:	6093      	str	r3, [r2, #8]
 8003cca:	e0a7      	b.n	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	6093      	str	r3, [r2, #8]
 8003ce8:	e098      	b.n	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 8093 	bne.w	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	4a4b      	ldr	r2, [pc, #300]	; (8003e28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d90f      	bls.n	8003d1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	461a      	mov	r2, r3
 8003d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1a:	6093      	str	r3, [r2, #8]
 8003d1c:	e07e      	b.n	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4413      	add	r3, r2
 8003d30:	3304      	adds	r3, #4
 8003d32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	0159      	lsls	r1, r3, #5
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	440b      	add	r3, r1
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4a:	1ad2      	subs	r2, r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d114      	bne.n	8003d80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	f004 fdfc 	bl	8008968 <USB_EP0_OutStart>
 8003d70:	e006      	b.n	8003d80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f007 fe98 	bl	800babc <HAL_PCD_DataOutStageCallback>
 8003d8c:	e046      	b.n	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d124      	bne.n	8003de0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dac:	461a      	mov	r2, r3
 8003dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db2:	6093      	str	r3, [r2, #8]
 8003db4:	e032      	b.n	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2320      	movs	r3, #32
 8003dd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f007 fe6f 	bl	800babc <HAL_PCD_DataOutStageCallback>
 8003dde:	e01d      	b.n	8003e1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d114      	bne.n	8003e10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d108      	bne.n	8003e10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e08:	461a      	mov	r2, r3
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	f004 fdac 	bl	8008968 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	4619      	mov	r1, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f007 fe50 	bl	800babc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	4f54300a 	.word	0x4f54300a
 8003e2c:	4f54310a 	.word	0x4f54310a

08003e30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	333c      	adds	r3, #60	; 0x3c
 8003e48:	3304      	adds	r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d90e      	bls.n	8003e84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d009      	beq.n	8003e84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f007 fe07 	bl	800ba98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d90c      	bls.n	8003eac <PCD_EP_OutSetupPacket_int+0x7c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	799b      	ldrb	r3, [r3, #6]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	f004 fd5e 	bl	8008968 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	4f54300a 	.word	0x4f54300a

08003ebc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eda:	883b      	ldrh	r3, [r7, #0]
 8003edc:	0419      	lsls	r1, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee8:	e028      	b.n	8003f3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	e00d      	b.n	8003f1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	3340      	adds	r3, #64	; 0x40
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4413      	add	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	3301      	adds	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3ec      	bcc.n	8003efe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f24:	883b      	ldrh	r3, [r7, #0]
 8003f26:	0418      	lsls	r0, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6819      	ldr	r1, [r3, #0]
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	4302      	orrs	r2, r0
 8003f34:	3340      	adds	r3, #64	; 0x40
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	f043 0303 	orr.w	r3, r3, #3
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0cc      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b68      	ldr	r3, [pc, #416]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d90c      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b65      	ldr	r3, [pc, #404]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a58      	ldr	r2, [pc, #352]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004012:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004020:	4b53      	ldr	r3, [pc, #332]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a52      	ldr	r2, [pc, #328]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b50      	ldr	r3, [pc, #320]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	494d      	ldr	r1, [pc, #308]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d044      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d119      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d003      	beq.n	8004072 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	2b03      	cmp	r3, #3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e067      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4934      	ldr	r1, [pc, #208]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fd f868 	bl	8001178 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fd f864 	bl	8001178 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e04f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d20c      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b22      	ldr	r3, [pc, #136]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e032      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b19      	ldr	r3, [pc, #100]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4916      	ldr	r1, [pc, #88]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	490e      	ldr	r1, [pc, #56]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800413a:	f000 fb7f 	bl	800483c <HAL_RCC_GetSysClockFreq>
 800413e:	4602      	mov	r2, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	490a      	ldr	r1, [pc, #40]	; (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	5ccb      	ldrb	r3, [r1, r3]
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fc ffc8 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00
 8004170:	40023800 	.word	0x40023800
 8004174:	0800d708 	.word	0x0800d708
 8004178:	20000000 	.word	0x20000000
 800417c:	20000004 	.word	0x20000004

08004180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <HAL_RCC_GetHCLKFreq+0x14>)
 8004186:	681b      	ldr	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000000 	.word	0x20000000

08004198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800419c:	f7ff fff0 	bl	8004180 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	0a9b      	lsrs	r3, r3, #10
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4903      	ldr	r1, [pc, #12]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	0800d718 	.word	0x0800d718

080041c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041c4:	f7ff ffdc 	bl	8004180 <HAL_RCC_GetHCLKFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	0b5b      	lsrs	r3, r3, #13
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	4903      	ldr	r1, [pc, #12]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40023800 	.word	0x40023800
 80041e4:	0800d718 	.word	0x0800d718

080041e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08c      	sub	sp, #48	; 0x30
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004220:	4b6f      	ldr	r3, [pc, #444]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004226:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	496c      	ldr	r1, [pc, #432]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800423e:	2301      	movs	r3, #1
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d010      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800424e:	4b64      	ldr	r3, [pc, #400]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004254:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	4960      	ldr	r1, [pc, #384]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800426c:	2301      	movs	r3, #1
 800426e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d017      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800427c:	4b58      	ldr	r3, [pc, #352]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800427e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	4955      	ldr	r1, [pc, #340]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800429a:	d101      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800429c:	2301      	movs	r3, #1
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042b8:	4b49      	ldr	r3, [pc, #292]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	4946      	ldr	r1, [pc, #280]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d6:	d101      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80042d8:	2301      	movs	r3, #1
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80042e4:	2301      	movs	r3, #1
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 808a 	beq.w	800440a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a38      	ldr	r2, [pc, #224]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b36      	ldr	r3, [pc, #216]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004312:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800431e:	f7fc ff2b 	bl	8001178 <HAL_GetTick>
 8004322:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fc ff27 	bl	8001178 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e278      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004338:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004344:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d02f      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	429a      	cmp	r2, r3
 8004360:	d028      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004362:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004378:	4a19      	ldr	r2, [pc, #100]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800437e:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b01      	cmp	r3, #1
 8004388:	d114      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800438a:	f7fc fef5 	bl	8001178 <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fc fef1 	bl	8001178 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e240      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ee      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c0:	d114      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x204>
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	4902      	ldr	r1, [pc, #8]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]
 80043dc:	e00c      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80043de:	bf00      	nop
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40007000 	.word	0x40007000
 80043e8:	42470e40 	.word	0x42470e40
 80043ec:	4b4a      	ldr	r3, [pc, #296]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a49      	ldr	r2, [pc, #292]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043f6:	6093      	str	r3, [r2, #8]
 80043f8:	4b47      	ldr	r3, [pc, #284]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004404:	4944      	ldr	r1, [pc, #272]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004406:	4313      	orrs	r3, r2
 8004408:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	d004      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800441c:	4b3f      	ldr	r3, [pc, #252]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800441e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800442c:	4b3a      	ldr	r3, [pc, #232]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800442e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004432:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	4937      	ldr	r1, [pc, #220]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800444e:	4b32      	ldr	r3, [pc, #200]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004454:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445c:	492e      	ldr	r1, [pc, #184]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d011      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004470:	4b29      	ldr	r3, [pc, #164]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004476:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	4926      	ldr	r1, [pc, #152]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800448e:	d101      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004490:	2301      	movs	r3, #1
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	491a      	ldr	r1, [pc, #104]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d011      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80044c2:	4b15      	ldr	r3, [pc, #84]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	4911      	ldr	r1, [pc, #68]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e0:	d101      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80044e2:	2301      	movs	r3, #1
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d005      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f4:	f040 80ff 	bne.w	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044f8:	4b09      	ldr	r3, [pc, #36]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044fe:	f7fc fe3b 	bl	8001178 <HAL_GetTick>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004504:	e00e      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004506:	f7fc fe37 	bl	8001178 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d907      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e188      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004518:	40023800 	.word	0x40023800
 800451c:	424711e0 	.word	0x424711e0
 8004520:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004524:	4b7e      	ldr	r3, [pc, #504]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ea      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800454c:	2b00      	cmp	r3, #0
 800454e:	d028      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d124      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004558:	4b71      	ldr	r3, [pc, #452]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800455a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	3301      	adds	r3, #1
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800456a:	4b6d      	ldr	r3, [pc, #436]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	0e1b      	lsrs	r3, r3, #24
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	019b      	lsls	r3, r3, #6
 8004582:	431a      	orrs	r2, r3
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	3b01      	subs	r3, #1
 800458a:	041b      	lsls	r3, r3, #16
 800458c:	431a      	orrs	r2, r3
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	061b      	lsls	r3, r3, #24
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	071b      	lsls	r3, r3, #28
 800459a:	4961      	ldr	r1, [pc, #388]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d035      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045cc:	d130      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80045ce:	4b54      	ldr	r3, [pc, #336]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045e0:	4b4f      	ldr	r3, [pc, #316]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e6:	0f1b      	lsrs	r3, r3, #28
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	019b      	lsls	r3, r3, #6
 80045f8:	431a      	orrs	r2, r3
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	3b01      	subs	r3, #1
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	431a      	orrs	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	071b      	lsls	r3, r3, #28
 8004610:	4943      	ldr	r1, [pc, #268]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800461a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800461e:	f023 021f 	bic.w	r2, r3, #31
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	493d      	ldr	r1, [pc, #244]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004638:	2b00      	cmp	r3, #0
 800463a:	d029      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004644:	d124      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004646:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	3301      	adds	r3, #1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	0f1b      	lsrs	r3, r3, #28
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	019b      	lsls	r3, r3, #6
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	3b01      	subs	r3, #1
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	431a      	orrs	r2, r3
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	431a      	orrs	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	071b      	lsls	r3, r3, #28
 8004688:	4925      	ldr	r1, [pc, #148]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004698:	2b00      	cmp	r3, #0
 800469a:	d016      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	3b01      	subs	r3, #1
 80046b0:	041b      	lsls	r3, r3, #16
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	071b      	lsls	r3, r3, #28
 80046c2:	4917      	ldr	r1, [pc, #92]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046d0:	f7fc fd52 	bl	8001178 <HAL_GetTick>
 80046d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046d8:	f7fc fd4e 	bl	8001178 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e09f      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	f040 8095 	bne.w	8004828 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046fe:	4b0a      	ldr	r3, [pc, #40]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004704:	f7fc fd38 	bl	8001178 <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800470a:	e00f      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800470c:	f7fc fd34 	bl	8001178 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d908      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e085      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800
 8004724:	42470068 	.word	0x42470068
 8004728:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800472c:	4b41      	ldr	r3, [pc, #260]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004738:	d0e8      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004756:	2b00      	cmp	r3, #0
 8004758:	d02b      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475e:	2b00      	cmp	r3, #0
 8004760:	d127      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	3301      	adds	r3, #1
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699a      	ldr	r2, [r3, #24]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	431a      	orrs	r2, r3
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	4928      	ldr	r1, [pc, #160]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004798:	4b26      	ldr	r3, [pc, #152]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800479a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	3b01      	subs	r3, #1
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	4922      	ldr	r1, [pc, #136]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01d      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c6:	d118      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047c8:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	0e1b      	lsrs	r3, r3, #24
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	019b      	lsls	r3, r3, #6
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	3b01      	subs	r3, #1
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	061b      	lsls	r3, r3, #24
 80047f2:	4910      	ldr	r1, [pc, #64]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004800:	f7fc fcba 	bl	8001178 <HAL_GetTick>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004808:	f7fc fcb6 	bl	8001178 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e007      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004826:	d1ef      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3730      	adds	r7, #48	; 0x30
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800
 8004838:	42470070 	.word	0x42470070

0800483c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800483c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004840:	b0ae      	sub	sp, #184	; 0xb8
 8004842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004862:	4bcb      	ldr	r3, [pc, #812]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b0c      	cmp	r3, #12
 800486c:	f200 8206 	bhi.w	8004c7c <HAL_RCC_GetSysClockFreq+0x440>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	080048ad 	.word	0x080048ad
 800487c:	08004c7d 	.word	0x08004c7d
 8004880:	08004c7d 	.word	0x08004c7d
 8004884:	08004c7d 	.word	0x08004c7d
 8004888:	080048b5 	.word	0x080048b5
 800488c:	08004c7d 	.word	0x08004c7d
 8004890:	08004c7d 	.word	0x08004c7d
 8004894:	08004c7d 	.word	0x08004c7d
 8004898:	080048bd 	.word	0x080048bd
 800489c:	08004c7d 	.word	0x08004c7d
 80048a0:	08004c7d 	.word	0x08004c7d
 80048a4:	08004c7d 	.word	0x08004c7d
 80048a8:	08004aad 	.word	0x08004aad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ac:	4bb9      	ldr	r3, [pc, #740]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x358>)
 80048ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048b2:	e1e7      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b4:	4bb8      	ldr	r3, [pc, #736]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x35c>)
 80048b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048ba:	e1e3      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048bc:	4bb4      	ldr	r3, [pc, #720]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x354>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c8:	4bb1      	ldr	r3, [pc, #708]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d071      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d4:	4bae      	ldr	r3, [pc, #696]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x354>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80048e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490c:	0150      	lsls	r0, r2, #5
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4621      	mov	r1, r4
 8004914:	1a51      	subs	r1, r2, r1
 8004916:	6439      	str	r1, [r7, #64]	; 0x40
 8004918:	4629      	mov	r1, r5
 800491a:	eb63 0301 	sbc.w	r3, r3, r1
 800491e:	647b      	str	r3, [r7, #68]	; 0x44
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800492c:	4649      	mov	r1, r9
 800492e:	018b      	lsls	r3, r1, #6
 8004930:	4641      	mov	r1, r8
 8004932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004936:	4641      	mov	r1, r8
 8004938:	018a      	lsls	r2, r1, #6
 800493a:	4641      	mov	r1, r8
 800493c:	1a51      	subs	r1, r2, r1
 800493e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004940:	4649      	mov	r1, r9
 8004942:	eb63 0301 	sbc.w	r3, r3, r1
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004954:	4649      	mov	r1, r9
 8004956:	00cb      	lsls	r3, r1, #3
 8004958:	4641      	mov	r1, r8
 800495a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495e:	4641      	mov	r1, r8
 8004960:	00ca      	lsls	r2, r1, #3
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	4603      	mov	r3, r0
 8004968:	4622      	mov	r2, r4
 800496a:	189b      	adds	r3, r3, r2
 800496c:	633b      	str	r3, [r7, #48]	; 0x30
 800496e:	462b      	mov	r3, r5
 8004970:	460a      	mov	r2, r1
 8004972:	eb42 0303 	adc.w	r3, r2, r3
 8004976:	637b      	str	r3, [r7, #52]	; 0x34
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004984:	4629      	mov	r1, r5
 8004986:	024b      	lsls	r3, r1, #9
 8004988:	4621      	mov	r1, r4
 800498a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800498e:	4621      	mov	r1, r4
 8004990:	024a      	lsls	r2, r1, #9
 8004992:	4610      	mov	r0, r2
 8004994:	4619      	mov	r1, r3
 8004996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800499a:	2200      	movs	r2, #0
 800499c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80049a8:	f7fb fc9a 	bl	80002e0 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049b6:	e067      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b8:	4b75      	ldr	r3, [pc, #468]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	099b      	lsrs	r3, r3, #6
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049c4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80049c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80049d2:	2300      	movs	r3, #0
 80049d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80049da:	4622      	mov	r2, r4
 80049dc:	462b      	mov	r3, r5
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	0159      	lsls	r1, r3, #5
 80049e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ec:	0150      	lsls	r0, r2, #5
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4621      	mov	r1, r4
 80049f4:	1a51      	subs	r1, r2, r1
 80049f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80049f8:	4629      	mov	r1, r5
 80049fa:	eb63 0301 	sbc.w	r3, r3, r1
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	018b      	lsls	r3, r1, #6
 8004a10:	4641      	mov	r1, r8
 8004a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a16:	4641      	mov	r1, r8
 8004a18:	018a      	lsls	r2, r1, #6
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a20:	4649      	mov	r1, r9
 8004a22:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a3a:	4692      	mov	sl, r2
 8004a3c:	469b      	mov	fp, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	eb1a 0303 	adds.w	r3, sl, r3
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	462b      	mov	r3, r5
 8004a48:	eb4b 0303 	adc.w	r3, fp, r3
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	028b      	lsls	r3, r1, #10
 8004a5e:	4621      	mov	r1, r4
 8004a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a64:	4621      	mov	r1, r4
 8004a66:	028a      	lsls	r2, r1, #10
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a70:	2200      	movs	r2, #0
 8004a72:	673b      	str	r3, [r7, #112]	; 0x70
 8004a74:	677a      	str	r2, [r7, #116]	; 0x74
 8004a76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004a7a:	f7fb fc31 	bl	80002e0 <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4613      	mov	r3, r2
 8004a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a88:	4b41      	ldr	r3, [pc, #260]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	3301      	adds	r3, #1
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8004a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004aaa:	e0eb      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aac:	4b38      	ldr	r3, [pc, #224]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab8:	4b35      	ldr	r3, [pc, #212]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d06b      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac4:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	099b      	lsrs	r3, r3, #6
 8004aca:	2200      	movs	r2, #0
 8004acc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ace:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ad8:	2300      	movs	r3, #0
 8004ada:	667b      	str	r3, [r7, #100]	; 0x64
 8004adc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	462b      	mov	r3, r5
 8004ae4:	f04f 0000 	mov.w	r0, #0
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	0159      	lsls	r1, r3, #5
 8004aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af2:	0150      	lsls	r0, r2, #5
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4621      	mov	r1, r4
 8004afa:	1a51      	subs	r1, r2, r1
 8004afc:	61b9      	str	r1, [r7, #24]
 8004afe:	4629      	mov	r1, r5
 8004b00:	eb63 0301 	sbc.w	r3, r3, r1
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004b12:	4659      	mov	r1, fp
 8004b14:	018b      	lsls	r3, r1, #6
 8004b16:	4651      	mov	r1, sl
 8004b18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	018a      	lsls	r2, r1, #6
 8004b20:	4651      	mov	r1, sl
 8004b22:	ebb2 0801 	subs.w	r8, r2, r1
 8004b26:	4659      	mov	r1, fp
 8004b28:	eb63 0901 	sbc.w	r9, r3, r1
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b40:	4690      	mov	r8, r2
 8004b42:	4699      	mov	r9, r3
 8004b44:	4623      	mov	r3, r4
 8004b46:	eb18 0303 	adds.w	r3, r8, r3
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	eb49 0303 	adc.w	r3, r9, r3
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b60:	4629      	mov	r1, r5
 8004b62:	024b      	lsls	r3, r1, #9
 8004b64:	4621      	mov	r1, r4
 8004b66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	024a      	lsls	r2, r1, #9
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b76:	2200      	movs	r2, #0
 8004b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004b7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b80:	f7fb fbae 	bl	80002e0 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4613      	mov	r3, r2
 8004b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b8e:	e065      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0x420>
 8004b90:	40023800 	.word	0x40023800
 8004b94:	00f42400 	.word	0x00f42400
 8004b98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b9c:	4b3d      	ldr	r3, [pc, #244]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bac:	653b      	str	r3, [r7, #80]	; 0x50
 8004bae:	2300      	movs	r3, #0
 8004bb0:	657b      	str	r3, [r7, #84]	; 0x54
 8004bb2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	464b      	mov	r3, r9
 8004bba:	f04f 0000 	mov.w	r0, #0
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	0159      	lsls	r1, r3, #5
 8004bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc8:	0150      	lsls	r0, r2, #5
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4641      	mov	r1, r8
 8004bd0:	1a51      	subs	r1, r2, r1
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004be8:	4659      	mov	r1, fp
 8004bea:	018b      	lsls	r3, r1, #6
 8004bec:	4651      	mov	r1, sl
 8004bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	018a      	lsls	r2, r1, #6
 8004bf6:	4651      	mov	r1, sl
 8004bf8:	1a54      	subs	r4, r2, r1
 8004bfa:	4659      	mov	r1, fp
 8004bfc:	eb63 0501 	sbc.w	r5, r3, r1
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	00eb      	lsls	r3, r5, #3
 8004c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c0e:	00e2      	lsls	r2, r4, #3
 8004c10:	4614      	mov	r4, r2
 8004c12:	461d      	mov	r5, r3
 8004c14:	4643      	mov	r3, r8
 8004c16:	18e3      	adds	r3, r4, r3
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	eb45 0303 	adc.w	r3, r5, r3
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c2e:	4629      	mov	r1, r5
 8004c30:	028b      	lsls	r3, r1, #10
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c38:	4621      	mov	r1, r4
 8004c3a:	028a      	lsls	r2, r1, #10
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c44:	2200      	movs	r2, #0
 8004c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004c4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c4e:	f7fb fb47 	bl	80002e0 <__aeabi_uldivmod>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4613      	mov	r3, r2
 8004c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	0f1b      	lsrs	r3, r3, #28
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8004c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c7a:	e003      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	37b8      	adds	r7, #184	; 0xb8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800
 8004c98:	00f42400 	.word	0x00f42400

08004c9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e28d      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 8083 	beq.w	8004dc2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cbc:	4b94      	ldr	r3, [pc, #592]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 030c 	and.w	r3, r3, #12
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d019      	beq.n	8004cfc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004cc8:	4b91      	ldr	r3, [pc, #580]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 030c 	and.w	r3, r3, #12
        || \
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d106      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004cd4:	4b8e      	ldr	r3, [pc, #568]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce0:	d00c      	beq.n	8004cfc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ce2:	4b8b      	ldr	r3, [pc, #556]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004cea:	2b0c      	cmp	r3, #12
 8004cec:	d112      	bne.n	8004d14 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cee:	4b88      	ldr	r3, [pc, #544]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cfa:	d10b      	bne.n	8004d14 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfc:	4b84      	ldr	r3, [pc, #528]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d05b      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x124>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d157      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e25a      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1c:	d106      	bne.n	8004d2c <HAL_RCC_OscConfig+0x90>
 8004d1e:	4b7c      	ldr	r3, [pc, #496]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7b      	ldr	r2, [pc, #492]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e01d      	b.n	8004d68 <HAL_RCC_OscConfig+0xcc>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0xb4>
 8004d36:	4b76      	ldr	r3, [pc, #472]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a75      	ldr	r2, [pc, #468]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b73      	ldr	r3, [pc, #460]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a72      	ldr	r2, [pc, #456]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCC_OscConfig+0xcc>
 8004d50:	4b6f      	ldr	r3, [pc, #444]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a6e      	ldr	r2, [pc, #440]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b6c      	ldr	r3, [pc, #432]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a6b      	ldr	r2, [pc, #428]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d013      	beq.n	8004d98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fc fa02 	bl	8001178 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fc f9fe 	bl	8001178 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	; 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e21f      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8a:	4b61      	ldr	r3, [pc, #388]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0xdc>
 8004d96:	e014      	b.n	8004dc2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fc f9ee 	bl	8001178 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fc f9ea 	bl	8001178 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e20b      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db2:	4b57      	ldr	r3, [pc, #348]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x104>
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d06f      	beq.n	8004eae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004dce:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d017      	beq.n	8004e0a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004dda:	4b4d      	ldr	r3, [pc, #308]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 030c 	and.w	r3, r3, #12
        || \
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d105      	bne.n	8004df2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004de6:	4b4a      	ldr	r3, [pc, #296]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004df2:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004dfa:	2b0c      	cmp	r3, #12
 8004dfc:	d11c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dfe:	4b44      	ldr	r3, [pc, #272]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d116      	bne.n	8004e38 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0a:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_RCC_OscConfig+0x186>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e1d3      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e22:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4937      	ldr	r1, [pc, #220]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e36:	e03a      	b.n	8004eae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d020      	beq.n	8004e82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e40:	4b34      	ldr	r3, [pc, #208]	; (8004f14 <HAL_RCC_OscConfig+0x278>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e46:	f7fc f997 	bl	8001178 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4e:	f7fc f993 	bl	8001178 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e1b4      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e60:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6c:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4925      	ldr	r1, [pc, #148]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	600b      	str	r3, [r1, #0]
 8004e80:	e015      	b.n	8004eae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e82:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <HAL_RCC_OscConfig+0x278>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fc f976 	bl	8001178 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e90:	f7fc f972 	bl	8001178 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e193      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d036      	beq.n	8004f28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d016      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fc f956 	bl	8001178 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed0:	f7fc f952 	bl	8001178 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e173      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x234>
 8004eee:	e01b      	b.n	8004f28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <HAL_RCC_OscConfig+0x27c>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef6:	f7fc f93f 	bl	8001178 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004efc:	e00e      	b.n	8004f1c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004efe:	f7fc f93b 	bl	8001178 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d907      	bls.n	8004f1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e15c      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
 8004f10:	40023800 	.word	0x40023800
 8004f14:	42470000 	.word	0x42470000
 8004f18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f1c:	4b8a      	ldr	r3, [pc, #552]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ea      	bne.n	8004efe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8097 	beq.w	8005064 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f3a:	4b83      	ldr	r3, [pc, #524]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10f      	bne.n	8004f66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	4b7f      	ldr	r3, [pc, #508]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	4a7e      	ldr	r2, [pc, #504]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f54:	6413      	str	r3, [r2, #64]	; 0x40
 8004f56:	4b7c      	ldr	r3, [pc, #496]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f62:	2301      	movs	r3, #1
 8004f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f66:	4b79      	ldr	r3, [pc, #484]	; (800514c <HAL_RCC_OscConfig+0x4b0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d118      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f72:	4b76      	ldr	r3, [pc, #472]	; (800514c <HAL_RCC_OscConfig+0x4b0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a75      	ldr	r2, [pc, #468]	; (800514c <HAL_RCC_OscConfig+0x4b0>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7e:	f7fc f8fb 	bl	8001178 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f86:	f7fc f8f7 	bl	8001178 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e118      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f98:	4b6c      	ldr	r3, [pc, #432]	; (800514c <HAL_RCC_OscConfig+0x4b0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d106      	bne.n	8004fba <HAL_RCC_OscConfig+0x31e>
 8004fac:	4b66      	ldr	r3, [pc, #408]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	4a65      	ldr	r2, [pc, #404]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb8:	e01c      	b.n	8004ff4 <HAL_RCC_OscConfig+0x358>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCC_OscConfig+0x340>
 8004fc2:	4b61      	ldr	r3, [pc, #388]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	4a60      	ldr	r2, [pc, #384]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fc8:	f043 0304 	orr.w	r3, r3, #4
 8004fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fce:	4b5e      	ldr	r3, [pc, #376]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	4a5d      	ldr	r2, [pc, #372]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fda:	e00b      	b.n	8004ff4 <HAL_RCC_OscConfig+0x358>
 8004fdc:	4b5a      	ldr	r3, [pc, #360]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	4a59      	ldr	r2, [pc, #356]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8004fe8:	4b57      	ldr	r3, [pc, #348]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fec:	4a56      	ldr	r2, [pc, #344]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8004fee:	f023 0304 	bic.w	r3, r3, #4
 8004ff2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d015      	beq.n	8005028 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fc f8bc 	bl	8001178 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005002:	e00a      	b.n	800501a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005004:	f7fc f8b8 	bl	8001178 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0d7      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501a:	4b4b      	ldr	r3, [pc, #300]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0ee      	beq.n	8005004 <HAL_RCC_OscConfig+0x368>
 8005026:	e014      	b.n	8005052 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fc f8a6 	bl	8001178 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502e:	e00a      	b.n	8005046 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005030:	f7fc f8a2 	bl	8001178 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e0c1      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005046:	4b40      	ldr	r3, [pc, #256]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8005048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1ee      	bne.n	8005030 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005052:	7dfb      	ldrb	r3, [r7, #23]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d105      	bne.n	8005064 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005058:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	4a3a      	ldr	r2, [pc, #232]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 800505e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005062:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80ad 	beq.w	80051c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b08      	cmp	r3, #8
 8005078:	d060      	beq.n	800513c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d145      	bne.n	800510e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005082:	4b33      	ldr	r3, [pc, #204]	; (8005150 <HAL_RCC_OscConfig+0x4b4>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fc f876 	bl	8001178 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005090:	f7fc f872 	bl	8001178 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e093      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a2:	4b29      	ldr	r3, [pc, #164]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f0      	bne.n	8005090 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	019b      	lsls	r3, r3, #6
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	3b01      	subs	r3, #1
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	061b      	lsls	r3, r3, #24
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	071b      	lsls	r3, r3, #28
 80050da:	491b      	ldr	r1, [pc, #108]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCC_OscConfig+0x4b4>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e6:	f7fc f847 	bl	8001178 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ee:	f7fc f843 	bl	8001178 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e064      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005100:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCC_OscConfig+0x452>
 800510c:	e05c      	b.n	80051c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b10      	ldr	r3, [pc, #64]	; (8005150 <HAL_RCC_OscConfig+0x4b4>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fc f830 	bl	8001178 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7fc f82c 	bl	8001178 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e04d      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <HAL_RCC_OscConfig+0x4ac>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x480>
 800513a:	e045      	b.n	80051c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d107      	bne.n	8005154 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e040      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
 8005148:	40023800 	.word	0x40023800
 800514c:	40007000 	.word	0x40007000
 8005150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <HAL_RCC_OscConfig+0x538>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d030      	beq.n	80051c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d129      	bne.n	80051c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517a:	429a      	cmp	r2, r3
 800517c:	d122      	bne.n	80051c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005184:	4013      	ands	r3, r2
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800518a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800518c:	4293      	cmp	r3, r2
 800518e:	d119      	bne.n	80051c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	3b01      	subs	r3, #1
 800519e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d10f      	bne.n	80051c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d107      	bne.n	80051c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40023800 	.word	0x40023800

080051d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e07b      	b.n	80052e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d108      	bne.n	8005204 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fa:	d009      	beq.n	8005210 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	61da      	str	r2, [r3, #28]
 8005202:	e005      	b.n	8005210 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fb fd3c 	bl	8000ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005246:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005294:	ea42 0103 	orr.w	r1, r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	0c1b      	lsrs	r3, r3, #16
 80052ae:	f003 0104 	and.w	r1, r3, #4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0210 	and.w	r2, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b088      	sub	sp, #32
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	603b      	str	r3, [r7, #0]
 80052f6:	4613      	mov	r3, r2
 80052f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052fa:	f7fb ff3d 	bl	8001178 <HAL_GetTick>
 80052fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	d001      	beq.n	8005314 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
 8005312:	e12a      	b.n	800556a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_SPI_Transmit+0x36>
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e122      	b.n	800556a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_SPI_Transmit+0x48>
 800532e:	2302      	movs	r3, #2
 8005330:	e11b      	b.n	800556a <HAL_SPI_Transmit+0x280>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2203      	movs	r2, #3
 800533e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005380:	d10f      	bne.n	80053a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005390:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d007      	beq.n	80053c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c8:	d152      	bne.n	8005470 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <HAL_SPI_Transmit+0xee>
 80053d2:	8b7b      	ldrh	r3, [r7, #26]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d145      	bne.n	8005464 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	881a      	ldrh	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	1c9a      	adds	r2, r3, #2
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053fc:	e032      	b.n	8005464 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b02      	cmp	r3, #2
 800540a:	d112      	bne.n	8005432 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	881a      	ldrh	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	1c9a      	adds	r2, r3, #2
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005430:	e018      	b.n	8005464 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005432:	f7fb fea1 	bl	8001178 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d803      	bhi.n	800544a <HAL_SPI_Transmit+0x160>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d102      	bne.n	8005450 <HAL_SPI_Transmit+0x166>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e082      	b.n	800556a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1c7      	bne.n	80053fe <HAL_SPI_Transmit+0x114>
 800546e:	e053      	b.n	8005518 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_SPI_Transmit+0x194>
 8005478:	8b7b      	ldrh	r3, [r7, #26]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d147      	bne.n	800550e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	330c      	adds	r3, #12
 8005488:	7812      	ldrb	r2, [r2, #0]
 800548a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054a4:	e033      	b.n	800550e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d113      	bne.n	80054dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	7812      	ldrb	r2, [r2, #0]
 80054c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80054da:	e018      	b.n	800550e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054dc:	f7fb fe4c 	bl	8001178 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d803      	bhi.n	80054f4 <HAL_SPI_Transmit+0x20a>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d102      	bne.n	80054fa <HAL_SPI_Transmit+0x210>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e02d      	b.n	800556a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1c6      	bne.n	80054a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fbd9 	bl	8005cd4 <SPI_EndRxTxTransaction>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2220      	movs	r2, #32
 800552c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005568:	2300      	movs	r3, #0
  }
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b088      	sub	sp, #32
 8005576:	af02      	add	r7, sp, #8
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	603b      	str	r3, [r7, #0]
 800557e:	4613      	mov	r3, r2
 8005580:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d001      	beq.n	8005592 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800558e:	2302      	movs	r3, #2
 8005590:	e104      	b.n	800579c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559a:	d112      	bne.n	80055c2 <HAL_SPI_Receive+0x50>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10e      	bne.n	80055c2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2204      	movs	r2, #4
 80055a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	4613      	mov	r3, r2
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f8f3 	bl	80057a4 <HAL_SPI_TransmitReceive>
 80055be:	4603      	mov	r3, r0
 80055c0:	e0ec      	b.n	800579c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055c2:	f7fb fdd9 	bl	8001178 <HAL_GetTick>
 80055c6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_SPI_Receive+0x62>
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0e1      	b.n	800579c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d101      	bne.n	80055e6 <HAL_SPI_Receive+0x74>
 80055e2:	2302      	movs	r3, #2
 80055e4:	e0da      	b.n	800579c <HAL_SPI_Receive+0x22a>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2204      	movs	r2, #4
 80055f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	88fa      	ldrh	r2, [r7, #6]
 8005606:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005634:	d10f      	bne.n	8005656 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005644:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005654:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d007      	beq.n	8005674 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005672:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d170      	bne.n	800575e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800567c:	e035      	b.n	80056ea <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b01      	cmp	r3, #1
 800568a:	d115      	bne.n	80056b8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f103 020c 	add.w	r2, r3, #12
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	7812      	ldrb	r2, [r2, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056b6:	e018      	b.n	80056ea <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b8:	f7fb fd5e 	bl	8001178 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d803      	bhi.n	80056d0 <HAL_SPI_Receive+0x15e>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d102      	bne.n	80056d6 <HAL_SPI_Receive+0x164>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e058      	b.n	800579c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1c4      	bne.n	800567e <HAL_SPI_Receive+0x10c>
 80056f4:	e038      	b.n	8005768 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	d113      	bne.n	800572c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	b292      	uxth	r2, r2
 8005710:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	1c9a      	adds	r2, r3, #2
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005720:	b29b      	uxth	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	87da      	strh	r2, [r3, #62]	; 0x3e
 800572a:	e018      	b.n	800575e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572c:	f7fb fd24 	bl	8001178 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d803      	bhi.n	8005744 <HAL_SPI_Receive+0x1d2>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d102      	bne.n	800574a <HAL_SPI_Receive+0x1d8>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d109      	bne.n	800575e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e01e      	b.n	800579c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1c6      	bne.n	80056f6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fa4b 	bl	8005c08 <SPI_EndRxTransaction>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800579a:	2300      	movs	r3, #0
  }
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	; 0x28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057b2:	2301      	movs	r3, #1
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057b6:	f7fb fcdf 	bl	8001178 <HAL_GetTick>
 80057ba:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80057ca:	887b      	ldrh	r3, [r7, #2]
 80057cc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057ce:	7ffb      	ldrb	r3, [r7, #31]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d00c      	beq.n	80057ee <HAL_SPI_TransmitReceive+0x4a>
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057da:	d106      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x46>
 80057e4:	7ffb      	ldrb	r3, [r7, #31]
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d001      	beq.n	80057ee <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
 80057ec:	e17f      	b.n	8005aee <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_SPI_TransmitReceive+0x5c>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_SPI_TransmitReceive+0x5c>
 80057fa:	887b      	ldrh	r3, [r7, #2]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e174      	b.n	8005aee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x6e>
 800580e:	2302      	movs	r3, #2
 8005810:	e16d      	b.n	8005aee <HAL_SPI_TransmitReceive+0x34a>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b04      	cmp	r3, #4
 8005824:	d003      	beq.n	800582e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2205      	movs	r2, #5
 800582a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	887a      	ldrh	r2, [r7, #2]
 800583e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	887a      	ldrh	r2, [r7, #2]
 8005844:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	887a      	ldrh	r2, [r7, #2]
 8005856:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d007      	beq.n	8005882 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005880:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588a:	d17e      	bne.n	800598a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_SPI_TransmitReceive+0xf6>
 8005894:	8afb      	ldrh	r3, [r7, #22]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d16c      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	881a      	ldrh	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	1c9a      	adds	r2, r3, #2
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058be:	e059      	b.n	8005974 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d11b      	bne.n	8005906 <HAL_SPI_TransmitReceive+0x162>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d016      	beq.n	8005906 <HAL_SPI_TransmitReceive+0x162>
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d113      	bne.n	8005906 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	881a      	ldrh	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	1c9a      	adds	r2, r3, #2
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b01      	cmp	r3, #1
 8005912:	d119      	bne.n	8005948 <HAL_SPI_TransmitReceive+0x1a4>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d014      	beq.n	8005948 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	b292      	uxth	r2, r2
 800592a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	1c9a      	adds	r2, r3, #2
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005944:	2301      	movs	r3, #1
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005948:	f7fb fc16 	bl	8001178 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005954:	429a      	cmp	r2, r3
 8005956:	d80d      	bhi.n	8005974 <HAL_SPI_TransmitReceive+0x1d0>
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d009      	beq.n	8005974 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e0bc      	b.n	8005aee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1a0      	bne.n	80058c0 <HAL_SPI_TransmitReceive+0x11c>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d19b      	bne.n	80058c0 <HAL_SPI_TransmitReceive+0x11c>
 8005988:	e082      	b.n	8005a90 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x1f4>
 8005992:	8afb      	ldrh	r3, [r7, #22]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d171      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	7812      	ldrb	r2, [r2, #0]
 80059a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059be:	e05d      	b.n	8005a7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d11c      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x264>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d017      	beq.n	8005a08 <HAL_SPI_TransmitReceive+0x264>
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d114      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	7812      	ldrb	r2, [r2, #0]
 80059ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d119      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x2a6>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d014      	beq.n	8005a4a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a46:	2301      	movs	r3, #1
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a4a:	f7fb fb95 	bl	8001178 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d803      	bhi.n	8005a62 <HAL_SPI_TransmitReceive+0x2be>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d102      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x2c4>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e038      	b.n	8005aee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d19c      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x21c>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d197      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a90:	6a3a      	ldr	r2, [r7, #32]
 8005a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f91d 	bl	8005cd4 <SPI_EndRxTxTransaction>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e01d      	b.n	8005aee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005aec:	2300      	movs	r3, #0
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	; 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	4613      	mov	r3, r2
 8005b06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b08:	f7fb fb36 	bl	8001178 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	4413      	add	r3, r2
 8005b16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b18:	f7fb fb2e 	bl	8001178 <HAL_GetTick>
 8005b1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b1e:	4b39      	ldr	r3, [pc, #228]	; (8005c04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	015b      	lsls	r3, r3, #5
 8005b24:	0d1b      	lsrs	r3, r3, #20
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b2e:	e054      	b.n	8005bda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d050      	beq.n	8005bda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b38:	f7fb fb1e 	bl	8001178 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d902      	bls.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d13d      	bne.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b66:	d111      	bne.n	8005b8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b70:	d004      	beq.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7a:	d107      	bne.n	8005b8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b94:	d10f      	bne.n	8005bb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e017      	b.n	8005bfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4013      	ands	r3, r2
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	bf0c      	ite	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	2300      	movne	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d19b      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3720      	adds	r7, #32
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000000 	.word	0x20000000

08005c08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1c:	d111      	bne.n	8005c42 <SPI_EndRxTransaction+0x3a>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c26:	d004      	beq.n	8005c32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c30:	d107      	bne.n	8005c42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4a:	d12a      	bne.n	8005ca2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c54:	d012      	beq.n	8005c7c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff ff49 	bl	8005af8 <SPI_WaitFlagStateUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d02d      	beq.n	8005cc8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e026      	b.n	8005cca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2200      	movs	r2, #0
 8005c84:	2101      	movs	r1, #1
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7ff ff36 	bl	8005af8 <SPI_WaitFlagStateUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01a      	beq.n	8005cc8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e013      	b.n	8005cca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2101      	movs	r1, #1
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f7ff ff23 	bl	8005af8 <SPI_WaitFlagStateUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e000      	b.n	8005cca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b088      	sub	sp, #32
 8005cd8:	af02      	add	r7, sp, #8
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	2102      	movs	r1, #2
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f7ff ff04 	bl	8005af8 <SPI_WaitFlagStateUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	f043 0220 	orr.w	r2, r3, #32
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e032      	b.n	8005d6c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d06:	4b1b      	ldr	r3, [pc, #108]	; (8005d74 <SPI_EndRxTxTransaction+0xa0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1b      	ldr	r2, [pc, #108]	; (8005d78 <SPI_EndRxTxTransaction+0xa4>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	0d5b      	lsrs	r3, r3, #21
 8005d12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d24:	d112      	bne.n	8005d4c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2180      	movs	r1, #128	; 0x80
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff fee1 	bl	8005af8 <SPI_WaitFlagStateUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d016      	beq.n	8005d6a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e00f      	b.n	8005d6c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d0f2      	beq.n	8005d4c <SPI_EndRxTxTransaction+0x78>
 8005d66:	e000      	b.n	8005d6a <SPI_EndRxTxTransaction+0x96>
        break;
 8005d68:	bf00      	nop
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000000 	.word	0x20000000
 8005d78:	165e9f81 	.word	0x165e9f81

08005d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e041      	b.n	8005e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fa ffc8 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f000 f95e 	bl	800607c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d001      	beq.n	8005e34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e046      	b.n	8005ec2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a23      	ldr	r2, [pc, #140]	; (8005ed0 <HAL_TIM_Base_Start+0xb4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d022      	beq.n	8005e8c <HAL_TIM_Base_Start+0x70>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4e:	d01d      	beq.n	8005e8c <HAL_TIM_Base_Start+0x70>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <HAL_TIM_Base_Start+0xb8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d018      	beq.n	8005e8c <HAL_TIM_Base_Start+0x70>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ed8 <HAL_TIM_Base_Start+0xbc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <HAL_TIM_Base_Start+0x70>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1c      	ldr	r2, [pc, #112]	; (8005edc <HAL_TIM_Base_Start+0xc0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_TIM_Base_Start+0x70>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1b      	ldr	r2, [pc, #108]	; (8005ee0 <HAL_TIM_Base_Start+0xc4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_TIM_Base_Start+0x70>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <HAL_TIM_Base_Start+0xc8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIM_Base_Start+0x70>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <HAL_TIM_Base_Start+0xcc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d111      	bne.n	8005eb0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b06      	cmp	r3, #6
 8005e9c:	d010      	beq.n	8005ec0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	e007      	b.n	8005ec0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40010400 	.word	0x40010400
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40001800 	.word	0x40001800

08005eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_TIM_ConfigClockSource+0x1c>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e0b4      	b.n	8006072 <HAL_TIM_ConfigClockSource+0x186>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f40:	d03e      	beq.n	8005fc0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f46:	f200 8087 	bhi.w	8006058 <HAL_TIM_ConfigClockSource+0x16c>
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4e:	f000 8086 	beq.w	800605e <HAL_TIM_ConfigClockSource+0x172>
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f56:	d87f      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x16c>
 8005f58:	2b70      	cmp	r3, #112	; 0x70
 8005f5a:	d01a      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0xa6>
 8005f5c:	2b70      	cmp	r3, #112	; 0x70
 8005f5e:	d87b      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x16c>
 8005f60:	2b60      	cmp	r3, #96	; 0x60
 8005f62:	d050      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0x11a>
 8005f64:	2b60      	cmp	r3, #96	; 0x60
 8005f66:	d877      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x16c>
 8005f68:	2b50      	cmp	r3, #80	; 0x50
 8005f6a:	d03c      	beq.n	8005fe6 <HAL_TIM_ConfigClockSource+0xfa>
 8005f6c:	2b50      	cmp	r3, #80	; 0x50
 8005f6e:	d873      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d058      	beq.n	8006026 <HAL_TIM_ConfigClockSource+0x13a>
 8005f74:	2b40      	cmp	r3, #64	; 0x40
 8005f76:	d86f      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b30      	cmp	r3, #48	; 0x30
 8005f7a:	d064      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x15a>
 8005f7c:	2b30      	cmp	r3, #48	; 0x30
 8005f7e:	d86b      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d060      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x15a>
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d867      	bhi.n	8006058 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d05c      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x15a>
 8005f8c:	2b10      	cmp	r3, #16
 8005f8e:	d05a      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0x15a>
 8005f90:	e062      	b.n	8006058 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fa2:	f000 f991 	bl	80062c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	609a      	str	r2, [r3, #8]
      break;
 8005fbe:	e04f      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd0:	f000 f97a 	bl	80062c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fe2:	609a      	str	r2, [r3, #8]
      break;
 8005fe4:	e03c      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f000 f8ee 	bl	80061d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2150      	movs	r1, #80	; 0x50
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 f947 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8006004:	e02c      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006012:	461a      	mov	r2, r3
 8006014:	f000 f90d 	bl	8006232 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2160      	movs	r1, #96	; 0x60
 800601e:	4618      	mov	r0, r3
 8006020:	f000 f937 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8006024:	e01c      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006032:	461a      	mov	r2, r3
 8006034:	f000 f8ce 	bl	80061d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2140      	movs	r1, #64	; 0x40
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f927 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8006044:	e00c      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f000 f91e 	bl	8006292 <TIM_ITRx_SetConfig>
      break;
 8006056:	e003      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
      break;
 800605c:	e000      	b.n	8006060 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800605e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006070:	7bfb      	ldrb	r3, [r7, #15]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a46      	ldr	r2, [pc, #280]	; (80061a8 <TIM_Base_SetConfig+0x12c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d00f      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a43      	ldr	r2, [pc, #268]	; (80061ac <TIM_Base_SetConfig+0x130>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00b      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a42      	ldr	r2, [pc, #264]	; (80061b0 <TIM_Base_SetConfig+0x134>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a41      	ldr	r2, [pc, #260]	; (80061b4 <TIM_Base_SetConfig+0x138>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a40      	ldr	r2, [pc, #256]	; (80061b8 <TIM_Base_SetConfig+0x13c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d108      	bne.n	80060ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a35      	ldr	r2, [pc, #212]	; (80061a8 <TIM_Base_SetConfig+0x12c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d02b      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d027      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a32      	ldr	r2, [pc, #200]	; (80061ac <TIM_Base_SetConfig+0x130>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d023      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a31      	ldr	r2, [pc, #196]	; (80061b0 <TIM_Base_SetConfig+0x134>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01f      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a30      	ldr	r2, [pc, #192]	; (80061b4 <TIM_Base_SetConfig+0x138>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01b      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a2f      	ldr	r2, [pc, #188]	; (80061b8 <TIM_Base_SetConfig+0x13c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d017      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a2e      	ldr	r2, [pc, #184]	; (80061bc <TIM_Base_SetConfig+0x140>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a2d      	ldr	r2, [pc, #180]	; (80061c0 <TIM_Base_SetConfig+0x144>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00f      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2c      	ldr	r2, [pc, #176]	; (80061c4 <TIM_Base_SetConfig+0x148>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00b      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a2b      	ldr	r2, [pc, #172]	; (80061c8 <TIM_Base_SetConfig+0x14c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d007      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2a      	ldr	r2, [pc, #168]	; (80061cc <TIM_Base_SetConfig+0x150>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a29      	ldr	r2, [pc, #164]	; (80061d0 <TIM_Base_SetConfig+0x154>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d108      	bne.n	8006140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <TIM_Base_SetConfig+0x12c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_Base_SetConfig+0xf8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <TIM_Base_SetConfig+0x13c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d103      	bne.n	800617c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b01      	cmp	r3, #1
 800618c:	d105      	bne.n	800619a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f023 0201 	bic.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	611a      	str	r2, [r3, #16]
  }
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	40010000 	.word	0x40010000
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800
 80061b4:	40000c00 	.word	0x40000c00
 80061b8:	40010400 	.word	0x40010400
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40014400 	.word	0x40014400
 80061c4:	40014800 	.word	0x40014800
 80061c8:	40001800 	.word	0x40001800
 80061cc:	40001c00 	.word	0x40001c00
 80061d0:	40002000 	.word	0x40002000

080061d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f023 0201 	bic.w	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f023 030a 	bic.w	r3, r3, #10
 8006210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006232:	b480      	push	{r7}
 8006234:	b087      	sub	sp, #28
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	f023 0210 	bic.w	r2, r3, #16
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800625c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	031b      	lsls	r3, r3, #12
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800626e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	621a      	str	r2, [r3, #32]
}
 8006286:	bf00      	nop
 8006288:	371c      	adds	r7, #28
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006292:	b480      	push	{r7}
 8006294:	b085      	sub	sp, #20
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f043 0307 	orr.w	r3, r3, #7
 80062b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	609a      	str	r2, [r3, #8]
}
 80062bc:	bf00      	nop
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b087      	sub	sp, #28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	021a      	lsls	r2, r3, #8
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	609a      	str	r2, [r3, #8]
}
 80062fc:	bf00      	nop
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e05a      	b.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a21      	ldr	r2, [pc, #132]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d022      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636c:	d01d      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d018      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a18      	ldr	r2, [pc, #96]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a15      	ldr	r2, [pc, #84]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d10c      	bne.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00
 80063f4:	40010400 	.word	0x40010400
 80063f8:	40014000 	.word	0x40014000
 80063fc:	40001800 	.word	0x40001800

08006400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e042      	b.n	8006498 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fa fca6 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2224      	movs	r2, #36	; 0x24
 8006430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fd69 	bl	8006f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af02      	add	r7, sp, #8
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	4613      	mov	r3, r2
 80064ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d175      	bne.n	80065ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_UART_Transmit+0x2c>
 80064c6:	88fb      	ldrh	r3, [r7, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e06e      	b.n	80065ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2221      	movs	r2, #33	; 0x21
 80064da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064de:	f7fa fe4b 	bl	8001178 <HAL_GetTick>
 80064e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	88fa      	ldrh	r2, [r7, #6]
 80064e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f8:	d108      	bne.n	800650c <HAL_UART_Transmit+0x6c>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	e003      	b.n	8006514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006514:	e02e      	b.n	8006574 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2200      	movs	r2, #0
 800651e:	2180      	movs	r1, #128	; 0x80
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fb05 	bl	8006b30 <UART_WaitOnFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e03a      	b.n	80065ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10b      	bne.n	8006556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800654c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	3302      	adds	r3, #2
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	e007      	b.n	8006566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	781a      	ldrb	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	3301      	adds	r3, #1
 8006564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1cb      	bne.n	8006516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2200      	movs	r2, #0
 8006586:	2140      	movs	r1, #64	; 0x40
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fad1 	bl	8006b30 <UART_WaitOnFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d005      	beq.n	80065a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e006      	b.n	80065ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	e000      	b.n	80065ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80065ac:	2302      	movs	r3, #2
  }
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3720      	adds	r7, #32
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b0ba      	sub	sp, #232	; 0xe8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065de:	2300      	movs	r3, #0
 80065e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80065f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10f      	bne.n	800661e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_UART_IRQHandler+0x66>
 800660a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fbc2 	bl	8006da0 <UART_Receive_IT>
      return;
 800661c:	e25b      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800661e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 80de 	beq.w	80067e4 <HAL_UART_IRQHandler+0x22c>
 8006628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006638:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80d1 	beq.w	80067e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <HAL_UART_IRQHandler+0xae>
 800664e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	f043 0201 	orr.w	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <HAL_UART_IRQHandler+0xd2>
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	f043 0202 	orr.w	r2, r3, #2
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <HAL_UART_IRQHandler+0xf6>
 8006696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	f043 0204 	orr.w	r2, r3, #4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d011      	beq.n	80066de <HAL_UART_IRQHandler+0x126>
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	f043 0208 	orr.w	r2, r3, #8
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 81f2 	beq.w	8006acc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d008      	beq.n	8006706 <HAL_UART_IRQHandler+0x14e>
 80066f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fb4d 	bl	8006da0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	bf0c      	ite	eq
 8006714:	2301      	moveq	r3, #1
 8006716:	2300      	movne	r3, #0
 8006718:	b2db      	uxtb	r3, r3
 800671a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <HAL_UART_IRQHandler+0x17a>
 800672a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800672e:	2b00      	cmp	r3, #0
 8006730:	d04f      	beq.n	80067d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa55 	bl	8006be2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d141      	bne.n	80067ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3314      	adds	r3, #20
 800674c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800675c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3314      	adds	r3, #20
 800676e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800677e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800678a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1d9      	bne.n	8006746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d013      	beq.n	80067c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679e:	4a7e      	ldr	r2, [pc, #504]	; (8006998 <HAL_UART_IRQHandler+0x3e0>)
 80067a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fb fbb6 	bl	8001f18 <HAL_DMA_Abort_IT>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d016      	beq.n	80067e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067bc:	4610      	mov	r0, r2
 80067be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c0:	e00e      	b.n	80067e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f99e 	bl	8006b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	e00a      	b.n	80067e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f99a 	bl	8006b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d0:	e006      	b.n	80067e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f996 	bl	8006b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80067de:	e175      	b.n	8006acc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e0:	bf00      	nop
    return;
 80067e2:	e173      	b.n	8006acc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	f040 814f 	bne.w	8006a8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8148 	beq.w	8006a8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8141 	beq.w	8006a8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	f040 80b6 	bne.w	800699c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800683c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8145 	beq.w	8006ad0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800684a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800684e:	429a      	cmp	r2, r3
 8006850:	f080 813e 	bcs.w	8006ad0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800685a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006866:	f000 8088 	beq.w	800697a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	330c      	adds	r3, #12
 8006870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	330c      	adds	r3, #12
 8006892:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800689a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1d9      	bne.n	800686a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3314      	adds	r3, #20
 80068bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3314      	adds	r3, #20
 80068d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e1      	bne.n	80068b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3314      	adds	r3, #20
 80068f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006916:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006918:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800691c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e3      	bne.n	80068f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800694a:	f023 0310 	bic.w	r3, r3, #16
 800694e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800695c:	65ba      	str	r2, [r7, #88]	; 0x58
 800695e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800696a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e3      	bne.n	8006938 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006974:	4618      	mov	r0, r3
 8006976:	f7fb fa5f 	bl	8001e38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006988:	b29b      	uxth	r3, r3
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	b29b      	uxth	r3, r3
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f8c1 	bl	8006b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006996:	e09b      	b.n	8006ad0 <HAL_UART_IRQHandler+0x518>
 8006998:	08006ca9 	.word	0x08006ca9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 808e 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80069b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8089 	beq.w	8006ad4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	330c      	adds	r3, #12
 80069e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069e6:	647a      	str	r2, [r7, #68]	; 0x44
 80069e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e3      	bne.n	80069c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3314      	adds	r3, #20
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	623b      	str	r3, [r7, #32]
   return(result);
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	f023 0301 	bic.w	r3, r3, #1
 8006a10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3314      	adds	r3, #20
 8006a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a1e:	633a      	str	r2, [r7, #48]	; 0x30
 8006a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e3      	bne.n	80069fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	330c      	adds	r3, #12
 8006a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0310 	bic.w	r3, r3, #16
 8006a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a64:	61fa      	str	r2, [r7, #28]
 8006a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a68:	69b9      	ldr	r1, [r7, #24]
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	e841 2300 	strex	r3, r2, [r1]
 8006a70:	617b      	str	r3, [r7, #20]
   return(result);
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e3      	bne.n	8006a40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f847 	bl	8006b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a8a:	e023      	b.n	8006ad4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d009      	beq.n	8006aac <HAL_UART_IRQHandler+0x4f4>
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f913 	bl	8006cd0 <UART_Transmit_IT>
    return;
 8006aaa:	e014      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
 8006ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f953 	bl	8006d70 <UART_EndTransmit_IT>
    return;
 8006aca:	e004      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006acc:	bf00      	nop
 8006ace:	e002      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ad0:	bf00      	nop
 8006ad2:	e000      	b.n	8006ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ad4:	bf00      	nop
  }
}
 8006ad6:	37e8      	adds	r7, #232	; 0xe8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b40:	e03b      	b.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b48:	d037      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4a:	f7fa fb15 	bl	8001178 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	6a3a      	ldr	r2, [r7, #32]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d302      	bcc.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e03a      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d023      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d020      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b40      	cmp	r3, #64	; 0x40
 8006b7c:	d01d      	beq.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d116      	bne.n	8006bba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f81d 	bl	8006be2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2208      	movs	r2, #8
 8006bac:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e00f      	b.n	8006bda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d0b4      	beq.n	8006b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b095      	sub	sp, #84	; 0x54
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c0a:	643a      	str	r2, [r7, #64]	; 0x40
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3314      	adds	r3, #20
 8006c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d119      	bne.n	8006c8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f023 0310 	bic.w	r3, r3, #16
 8006c70:	647b      	str	r3, [r7, #68]	; 0x44
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	330c      	adds	r3, #12
 8006c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c7a:	61ba      	str	r2, [r7, #24]
 8006c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7e:	6979      	ldr	r1, [r7, #20]
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	613b      	str	r3, [r7, #16]
   return(result);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e5      	bne.n	8006c5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c9c:	bf00      	nop
 8006c9e:	3754      	adds	r7, #84	; 0x54
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7ff ff1e 	bl	8006b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b21      	cmp	r3, #33	; 0x21
 8006ce2:	d13e      	bne.n	8006d62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cec:	d114      	bne.n	8006d18 <UART_Transmit_IT+0x48>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d110      	bne.n	8006d18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	1c9a      	adds	r2, r3, #2
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	621a      	str	r2, [r3, #32]
 8006d16:	e008      	b.n	8006d2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	1c59      	adds	r1, r3, #1
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6211      	str	r1, [r2, #32]
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4619      	mov	r1, r3
 8006d38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10f      	bne.n	8006d5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e000      	b.n	8006d64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
  }
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fea3 	bl	8006adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3708      	adds	r7, #8
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08c      	sub	sp, #48	; 0x30
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b22      	cmp	r3, #34	; 0x22
 8006db2:	f040 80ae 	bne.w	8006f12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbe:	d117      	bne.n	8006df0 <UART_Receive_IT+0x50>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d113      	bne.n	8006df0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	1c9a      	adds	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	629a      	str	r2, [r3, #40]	; 0x28
 8006dee:	e026      	b.n	8006e3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e02:	d007      	beq.n	8006e14 <UART_Receive_IT+0x74>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <UART_Receive_IT+0x82>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e008      	b.n	8006e34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d15d      	bne.n	8006f0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0220 	bic.w	r2, r2, #32
 8006e60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d135      	bne.n	8006f04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	330c      	adds	r3, #12
 8006ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	613b      	str	r3, [r7, #16]
   return(result);
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	f023 0310 	bic.w	r3, r3, #16
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ebe:	623a      	str	r2, [r7, #32]
 8006ec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	69f9      	ldr	r1, [r7, #28]
 8006ec4:	6a3a      	ldr	r2, [r7, #32]
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e5      	bne.n	8006e9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0310 	and.w	r3, r3, #16
 8006edc:	2b10      	cmp	r3, #16
 8006ede:	d10a      	bne.n	8006ef6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff fe0b 	bl	8006b18 <HAL_UARTEx_RxEventCallback>
 8006f02:	e002      	b.n	8006f0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff fdf3 	bl	8006af0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e002      	b.n	8006f14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e000      	b.n	8006f14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f12:	2302      	movs	r3, #2
  }
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3730      	adds	r7, #48	; 0x30
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f20:	b0c0      	sub	sp, #256	; 0x100
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f38:	68d9      	ldr	r1, [r3, #12]
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	ea40 0301 	orr.w	r3, r0, r1
 8006f44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f74:	f021 010c 	bic.w	r1, r1, #12
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f82:	430b      	orrs	r3, r1
 8006f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f96:	6999      	ldr	r1, [r3, #24]
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	ea40 0301 	orr.w	r3, r0, r1
 8006fa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b8f      	ldr	r3, [pc, #572]	; (80071e8 <UART_SetConfig+0x2cc>)
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d005      	beq.n	8006fbc <UART_SetConfig+0xa0>
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b8d      	ldr	r3, [pc, #564]	; (80071ec <UART_SetConfig+0x2d0>)
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d104      	bne.n	8006fc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fbc:	f7fd f900 	bl	80041c0 <HAL_RCC_GetPCLK2Freq>
 8006fc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006fc4:	e003      	b.n	8006fce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fc6:	f7fd f8e7 	bl	8004198 <HAL_RCC_GetPCLK1Freq>
 8006fca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd8:	f040 810c 	bne.w	80071f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fe6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006fea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006fee:	4622      	mov	r2, r4
 8006ff0:	462b      	mov	r3, r5
 8006ff2:	1891      	adds	r1, r2, r2
 8006ff4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ff6:	415b      	adcs	r3, r3
 8006ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ffa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ffe:	4621      	mov	r1, r4
 8007000:	eb12 0801 	adds.w	r8, r2, r1
 8007004:	4629      	mov	r1, r5
 8007006:	eb43 0901 	adc.w	r9, r3, r1
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800701a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800701e:	4690      	mov	r8, r2
 8007020:	4699      	mov	r9, r3
 8007022:	4623      	mov	r3, r4
 8007024:	eb18 0303 	adds.w	r3, r8, r3
 8007028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800702c:	462b      	mov	r3, r5
 800702e:	eb49 0303 	adc.w	r3, r9, r3
 8007032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007042:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800704a:	460b      	mov	r3, r1
 800704c:	18db      	adds	r3, r3, r3
 800704e:	653b      	str	r3, [r7, #80]	; 0x50
 8007050:	4613      	mov	r3, r2
 8007052:	eb42 0303 	adc.w	r3, r2, r3
 8007056:	657b      	str	r3, [r7, #84]	; 0x54
 8007058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800705c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007060:	f7f9 f93e 	bl	80002e0 <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4b61      	ldr	r3, [pc, #388]	; (80071f0 <UART_SetConfig+0x2d4>)
 800706a:	fba3 2302 	umull	r2, r3, r3, r2
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	011c      	lsls	r4, r3, #4
 8007072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007076:	2200      	movs	r2, #0
 8007078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800707c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	1891      	adds	r1, r2, r2
 800708a:	64b9      	str	r1, [r7, #72]	; 0x48
 800708c:	415b      	adcs	r3, r3
 800708e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007094:	4641      	mov	r1, r8
 8007096:	eb12 0a01 	adds.w	sl, r2, r1
 800709a:	4649      	mov	r1, r9
 800709c:	eb43 0b01 	adc.w	fp, r3, r1
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070b4:	4692      	mov	sl, r2
 80070b6:	469b      	mov	fp, r3
 80070b8:	4643      	mov	r3, r8
 80070ba:	eb1a 0303 	adds.w	r3, sl, r3
 80070be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070c2:	464b      	mov	r3, r9
 80070c4:	eb4b 0303 	adc.w	r3, fp, r3
 80070c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80070dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80070e0:	460b      	mov	r3, r1
 80070e2:	18db      	adds	r3, r3, r3
 80070e4:	643b      	str	r3, [r7, #64]	; 0x40
 80070e6:	4613      	mov	r3, r2
 80070e8:	eb42 0303 	adc.w	r3, r2, r3
 80070ec:	647b      	str	r3, [r7, #68]	; 0x44
 80070ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80070f6:	f7f9 f8f3 	bl	80002e0 <__aeabi_uldivmod>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	4b3b      	ldr	r3, [pc, #236]	; (80071f0 <UART_SetConfig+0x2d4>)
 8007102:	fba3 2301 	umull	r2, r3, r3, r1
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	2264      	movs	r2, #100	; 0x64
 800710a:	fb02 f303 	mul.w	r3, r2, r3
 800710e:	1acb      	subs	r3, r1, r3
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007116:	4b36      	ldr	r3, [pc, #216]	; (80071f0 <UART_SetConfig+0x2d4>)
 8007118:	fba3 2302 	umull	r2, r3, r3, r2
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007124:	441c      	add	r4, r3
 8007126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800712a:	2200      	movs	r2, #0
 800712c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007130:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007138:	4642      	mov	r2, r8
 800713a:	464b      	mov	r3, r9
 800713c:	1891      	adds	r1, r2, r2
 800713e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007140:	415b      	adcs	r3, r3
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007148:	4641      	mov	r1, r8
 800714a:	1851      	adds	r1, r2, r1
 800714c:	6339      	str	r1, [r7, #48]	; 0x30
 800714e:	4649      	mov	r1, r9
 8007150:	414b      	adcs	r3, r1
 8007152:	637b      	str	r3, [r7, #52]	; 0x34
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007160:	4659      	mov	r1, fp
 8007162:	00cb      	lsls	r3, r1, #3
 8007164:	4651      	mov	r1, sl
 8007166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800716a:	4651      	mov	r1, sl
 800716c:	00ca      	lsls	r2, r1, #3
 800716e:	4610      	mov	r0, r2
 8007170:	4619      	mov	r1, r3
 8007172:	4603      	mov	r3, r0
 8007174:	4642      	mov	r2, r8
 8007176:	189b      	adds	r3, r3, r2
 8007178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800717c:	464b      	mov	r3, r9
 800717e:	460a      	mov	r2, r1
 8007180:	eb42 0303 	adc.w	r3, r2, r3
 8007184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007194:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800719c:	460b      	mov	r3, r1
 800719e:	18db      	adds	r3, r3, r3
 80071a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071a2:	4613      	mov	r3, r2
 80071a4:	eb42 0303 	adc.w	r3, r2, r3
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071b2:	f7f9 f895 	bl	80002e0 <__aeabi_uldivmod>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <UART_SetConfig+0x2d4>)
 80071bc:	fba3 1302 	umull	r1, r3, r3, r2
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	2164      	movs	r1, #100	; 0x64
 80071c4:	fb01 f303 	mul.w	r3, r1, r3
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	3332      	adds	r3, #50	; 0x32
 80071ce:	4a08      	ldr	r2, [pc, #32]	; (80071f0 <UART_SetConfig+0x2d4>)
 80071d0:	fba2 2303 	umull	r2, r3, r2, r3
 80071d4:	095b      	lsrs	r3, r3, #5
 80071d6:	f003 0207 	and.w	r2, r3, #7
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4422      	add	r2, r4
 80071e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071e4:	e106      	b.n	80073f4 <UART_SetConfig+0x4d8>
 80071e6:	bf00      	nop
 80071e8:	40011000 	.word	0x40011000
 80071ec:	40011400 	.word	0x40011400
 80071f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007206:	4642      	mov	r2, r8
 8007208:	464b      	mov	r3, r9
 800720a:	1891      	adds	r1, r2, r2
 800720c:	6239      	str	r1, [r7, #32]
 800720e:	415b      	adcs	r3, r3
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
 8007212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007216:	4641      	mov	r1, r8
 8007218:	1854      	adds	r4, r2, r1
 800721a:	4649      	mov	r1, r9
 800721c:	eb43 0501 	adc.w	r5, r3, r1
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	00eb      	lsls	r3, r5, #3
 800722a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800722e:	00e2      	lsls	r2, r4, #3
 8007230:	4614      	mov	r4, r2
 8007232:	461d      	mov	r5, r3
 8007234:	4643      	mov	r3, r8
 8007236:	18e3      	adds	r3, r4, r3
 8007238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800723c:	464b      	mov	r3, r9
 800723e:	eb45 0303 	adc.w	r3, r5, r3
 8007242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007256:	f04f 0200 	mov.w	r2, #0
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007262:	4629      	mov	r1, r5
 8007264:	008b      	lsls	r3, r1, #2
 8007266:	4621      	mov	r1, r4
 8007268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800726c:	4621      	mov	r1, r4
 800726e:	008a      	lsls	r2, r1, #2
 8007270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007274:	f7f9 f834 	bl	80002e0 <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4b60      	ldr	r3, [pc, #384]	; (8007400 <UART_SetConfig+0x4e4>)
 800727e:	fba3 2302 	umull	r2, r3, r3, r2
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	011c      	lsls	r4, r3, #4
 8007286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800728a:	2200      	movs	r2, #0
 800728c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007290:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007298:	4642      	mov	r2, r8
 800729a:	464b      	mov	r3, r9
 800729c:	1891      	adds	r1, r2, r2
 800729e:	61b9      	str	r1, [r7, #24]
 80072a0:	415b      	adcs	r3, r3
 80072a2:	61fb      	str	r3, [r7, #28]
 80072a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a8:	4641      	mov	r1, r8
 80072aa:	1851      	adds	r1, r2, r1
 80072ac:	6139      	str	r1, [r7, #16]
 80072ae:	4649      	mov	r1, r9
 80072b0:	414b      	adcs	r3, r1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072c0:	4659      	mov	r1, fp
 80072c2:	00cb      	lsls	r3, r1, #3
 80072c4:	4651      	mov	r1, sl
 80072c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ca:	4651      	mov	r1, sl
 80072cc:	00ca      	lsls	r2, r1, #3
 80072ce:	4610      	mov	r0, r2
 80072d0:	4619      	mov	r1, r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	4642      	mov	r2, r8
 80072d6:	189b      	adds	r3, r3, r2
 80072d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072dc:	464b      	mov	r3, r9
 80072de:	460a      	mov	r2, r1
 80072e0:	eb42 0303 	adc.w	r3, r2, r3
 80072e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80072f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007300:	4649      	mov	r1, r9
 8007302:	008b      	lsls	r3, r1, #2
 8007304:	4641      	mov	r1, r8
 8007306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800730a:	4641      	mov	r1, r8
 800730c:	008a      	lsls	r2, r1, #2
 800730e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007312:	f7f8 ffe5 	bl	80002e0 <__aeabi_uldivmod>
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4611      	mov	r1, r2
 800731c:	4b38      	ldr	r3, [pc, #224]	; (8007400 <UART_SetConfig+0x4e4>)
 800731e:	fba3 2301 	umull	r2, r3, r3, r1
 8007322:	095b      	lsrs	r3, r3, #5
 8007324:	2264      	movs	r2, #100	; 0x64
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	1acb      	subs	r3, r1, r3
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	3332      	adds	r3, #50	; 0x32
 8007330:	4a33      	ldr	r2, [pc, #204]	; (8007400 <UART_SetConfig+0x4e4>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	095b      	lsrs	r3, r3, #5
 8007338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800733c:	441c      	add	r4, r3
 800733e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007342:	2200      	movs	r2, #0
 8007344:	673b      	str	r3, [r7, #112]	; 0x70
 8007346:	677a      	str	r2, [r7, #116]	; 0x74
 8007348:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800734c:	4642      	mov	r2, r8
 800734e:	464b      	mov	r3, r9
 8007350:	1891      	adds	r1, r2, r2
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	415b      	adcs	r3, r3
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800735c:	4641      	mov	r1, r8
 800735e:	1851      	adds	r1, r2, r1
 8007360:	6039      	str	r1, [r7, #0]
 8007362:	4649      	mov	r1, r9
 8007364:	414b      	adcs	r3, r1
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007374:	4659      	mov	r1, fp
 8007376:	00cb      	lsls	r3, r1, #3
 8007378:	4651      	mov	r1, sl
 800737a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800737e:	4651      	mov	r1, sl
 8007380:	00ca      	lsls	r2, r1, #3
 8007382:	4610      	mov	r0, r2
 8007384:	4619      	mov	r1, r3
 8007386:	4603      	mov	r3, r0
 8007388:	4642      	mov	r2, r8
 800738a:	189b      	adds	r3, r3, r2
 800738c:	66bb      	str	r3, [r7, #104]	; 0x68
 800738e:	464b      	mov	r3, r9
 8007390:	460a      	mov	r2, r1
 8007392:	eb42 0303 	adc.w	r3, r2, r3
 8007396:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	663b      	str	r3, [r7, #96]	; 0x60
 80073a2:	667a      	str	r2, [r7, #100]	; 0x64
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	f04f 0300 	mov.w	r3, #0
 80073ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073b0:	4649      	mov	r1, r9
 80073b2:	008b      	lsls	r3, r1, #2
 80073b4:	4641      	mov	r1, r8
 80073b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ba:	4641      	mov	r1, r8
 80073bc:	008a      	lsls	r2, r1, #2
 80073be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073c2:	f7f8 ff8d 	bl	80002e0 <__aeabi_uldivmod>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4b0d      	ldr	r3, [pc, #52]	; (8007400 <UART_SetConfig+0x4e4>)
 80073cc:	fba3 1302 	umull	r1, r3, r3, r2
 80073d0:	095b      	lsrs	r3, r3, #5
 80073d2:	2164      	movs	r1, #100	; 0x64
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	3332      	adds	r3, #50	; 0x32
 80073de:	4a08      	ldr	r2, [pc, #32]	; (8007400 <UART_SetConfig+0x4e4>)
 80073e0:	fba2 2303 	umull	r2, r3, r2, r3
 80073e4:	095b      	lsrs	r3, r3, #5
 80073e6:	f003 020f 	and.w	r2, r3, #15
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4422      	add	r2, r4
 80073f2:	609a      	str	r2, [r3, #8]
}
 80073f4:	bf00      	nop
 80073f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80073fa:	46bd      	mov	sp, r7
 80073fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007400:	51eb851f 	.word	0x51eb851f

08007404 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007404:	b084      	sub	sp, #16
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	f107 001c 	add.w	r0, r7, #28
 8007412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007416:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800741a:	2b01      	cmp	r3, #1
 800741c:	d123      	bne.n	8007466 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007446:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800744a:	2b01      	cmp	r3, #1
 800744c:	d105      	bne.n	800745a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 fae2 	bl	8008a24 <USB_CoreReset>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	e01b      	b.n	800749e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fad6 	bl	8008a24 <USB_CoreReset>
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800747c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	639a      	str	r2, [r3, #56]	; 0x38
 8007490:	e005      	b.n	800749e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800749e:	7fbb      	ldrb	r3, [r7, #30]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d10b      	bne.n	80074bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f043 0206 	orr.w	r2, r3, #6
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f043 0220 	orr.w	r2, r3, #32
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074c8:	b004      	add	sp, #16
 80074ca:	4770      	bx	lr

080074cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d165      	bne.n	80075ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4a41      	ldr	r2, [pc, #260]	; (80075e8 <USB_SetTurnaroundTime+0x11c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d906      	bls.n	80074f6 <USB_SetTurnaroundTime+0x2a>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4a40      	ldr	r2, [pc, #256]	; (80075ec <USB_SetTurnaroundTime+0x120>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d202      	bcs.n	80074f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80074f0:	230f      	movs	r3, #15
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e062      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4a3c      	ldr	r2, [pc, #240]	; (80075ec <USB_SetTurnaroundTime+0x120>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d306      	bcc.n	800750c <USB_SetTurnaroundTime+0x40>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4a3b      	ldr	r2, [pc, #236]	; (80075f0 <USB_SetTurnaroundTime+0x124>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d202      	bcs.n	800750c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007506:	230e      	movs	r3, #14
 8007508:	617b      	str	r3, [r7, #20]
 800750a:	e057      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4a38      	ldr	r2, [pc, #224]	; (80075f0 <USB_SetTurnaroundTime+0x124>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d306      	bcc.n	8007522 <USB_SetTurnaroundTime+0x56>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4a37      	ldr	r2, [pc, #220]	; (80075f4 <USB_SetTurnaroundTime+0x128>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d202      	bcs.n	8007522 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800751c:	230d      	movs	r3, #13
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	e04c      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	4a33      	ldr	r2, [pc, #204]	; (80075f4 <USB_SetTurnaroundTime+0x128>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d306      	bcc.n	8007538 <USB_SetTurnaroundTime+0x6c>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	4a32      	ldr	r2, [pc, #200]	; (80075f8 <USB_SetTurnaroundTime+0x12c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d802      	bhi.n	8007538 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007532:	230c      	movs	r3, #12
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	e041      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4a2f      	ldr	r2, [pc, #188]	; (80075f8 <USB_SetTurnaroundTime+0x12c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d906      	bls.n	800754e <USB_SetTurnaroundTime+0x82>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4a2e      	ldr	r2, [pc, #184]	; (80075fc <USB_SetTurnaroundTime+0x130>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d802      	bhi.n	800754e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007548:	230b      	movs	r3, #11
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e036      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4a2a      	ldr	r2, [pc, #168]	; (80075fc <USB_SetTurnaroundTime+0x130>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d906      	bls.n	8007564 <USB_SetTurnaroundTime+0x98>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	4a29      	ldr	r2, [pc, #164]	; (8007600 <USB_SetTurnaroundTime+0x134>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d802      	bhi.n	8007564 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800755e:	230a      	movs	r3, #10
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e02b      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4a26      	ldr	r2, [pc, #152]	; (8007600 <USB_SetTurnaroundTime+0x134>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d906      	bls.n	800757a <USB_SetTurnaroundTime+0xae>
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4a25      	ldr	r2, [pc, #148]	; (8007604 <USB_SetTurnaroundTime+0x138>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d202      	bcs.n	800757a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007574:	2309      	movs	r3, #9
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	e020      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	4a21      	ldr	r2, [pc, #132]	; (8007604 <USB_SetTurnaroundTime+0x138>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d306      	bcc.n	8007590 <USB_SetTurnaroundTime+0xc4>
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4a20      	ldr	r2, [pc, #128]	; (8007608 <USB_SetTurnaroundTime+0x13c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d802      	bhi.n	8007590 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800758a:	2308      	movs	r3, #8
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e015      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4a1d      	ldr	r2, [pc, #116]	; (8007608 <USB_SetTurnaroundTime+0x13c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d906      	bls.n	80075a6 <USB_SetTurnaroundTime+0xda>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4a1c      	ldr	r2, [pc, #112]	; (800760c <USB_SetTurnaroundTime+0x140>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d202      	bcs.n	80075a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075a0:	2307      	movs	r3, #7
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e00a      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075a6:	2306      	movs	r3, #6
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	e007      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075b2:	2309      	movs	r3, #9
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	e001      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075b8:	2309      	movs	r3, #9
 80075ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	029b      	lsls	r3, r3, #10
 80075d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80075d4:	431a      	orrs	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	00d8acbf 	.word	0x00d8acbf
 80075ec:	00e4e1c0 	.word	0x00e4e1c0
 80075f0:	00f42400 	.word	0x00f42400
 80075f4:	01067380 	.word	0x01067380
 80075f8:	011a499f 	.word	0x011a499f
 80075fc:	01312cff 	.word	0x01312cff
 8007600:	014ca43f 	.word	0x014ca43f
 8007604:	016e3600 	.word	0x016e3600
 8007608:	01a6ab1f 	.word	0x01a6ab1f
 800760c:	01e84800 	.word	0x01e84800

08007610 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f043 0201 	orr.w	r2, r3, #1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f023 0201 	bic.w	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d115      	bne.n	80076a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007682:	200a      	movs	r0, #10
 8007684:	f7f9 fd84 	bl	8001190 <HAL_Delay>
      ms += 10U;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	330a      	adds	r3, #10
 800768c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 f939 	bl	8008906 <USB_GetMode>
 8007694:	4603      	mov	r3, r0
 8007696:	2b01      	cmp	r3, #1
 8007698:	d01e      	beq.n	80076d8 <USB_SetCurrentMode+0x84>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2bc7      	cmp	r3, #199	; 0xc7
 800769e:	d9f0      	bls.n	8007682 <USB_SetCurrentMode+0x2e>
 80076a0:	e01a      	b.n	80076d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d115      	bne.n	80076d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076b4:	200a      	movs	r0, #10
 80076b6:	f7f9 fd6b 	bl	8001190 <HAL_Delay>
      ms += 10U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	330a      	adds	r3, #10
 80076be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 f920 	bl	8008906 <USB_GetMode>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <USB_SetCurrentMode+0x84>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2bc7      	cmp	r3, #199	; 0xc7
 80076d0:	d9f0      	bls.n	80076b4 <USB_SetCurrentMode+0x60>
 80076d2:	e001      	b.n	80076d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e005      	b.n	80076e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2bc8      	cmp	r3, #200	; 0xc8
 80076dc:	d101      	bne.n	80076e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076ec:	b084      	sub	sp, #16
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b086      	sub	sp, #24
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007706:	2300      	movs	r3, #0
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	e009      	b.n	8007720 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3340      	adds	r3, #64	; 0x40
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	2200      	movs	r2, #0
 8007718:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	3301      	adds	r3, #1
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b0e      	cmp	r3, #14
 8007724:	d9f2      	bls.n	800770c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007726:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800772a:	2b00      	cmp	r3, #0
 800772c:	d11c      	bne.n	8007768 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800773c:	f043 0302 	orr.w	r3, r3, #2
 8007740:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	e005      	b.n	8007774 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800777a:	461a      	mov	r2, r3
 800777c:	2300      	movs	r3, #0
 800777e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007780:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007784:	2b01      	cmp	r3, #1
 8007786:	d10d      	bne.n	80077a4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007790:	2100      	movs	r1, #0
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f968 	bl	8007a68 <USB_SetDevSpeed>
 8007798:	e008      	b.n	80077ac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800779a:	2101      	movs	r1, #1
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f963 	bl	8007a68 <USB_SetDevSpeed>
 80077a2:	e003      	b.n	80077ac <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077a4:	2103      	movs	r1, #3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f95e 	bl	8007a68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077ac:	2110      	movs	r1, #16
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f8fa 	bl	80079a8 <USB_FlushTxFifo>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f924 	bl	8007a0c <USB_FlushRxFifo>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d001      	beq.n	80077ce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d4:	461a      	mov	r2, r3
 80077d6:	2300      	movs	r3, #0
 80077d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e0:	461a      	mov	r2, r3
 80077e2:	2300      	movs	r3, #0
 80077e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ec:	461a      	mov	r2, r3
 80077ee:	2300      	movs	r3, #0
 80077f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077f2:	2300      	movs	r3, #0
 80077f4:	613b      	str	r3, [r7, #16]
 80077f6:	e043      	b.n	8007880 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800780a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800780e:	d118      	bne.n	8007842 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10a      	bne.n	800782c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007822:	461a      	mov	r2, r3
 8007824:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	e013      	b.n	8007854 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	461a      	mov	r2, r3
 800783a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	e008      	b.n	8007854 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784e:	461a      	mov	r2, r3
 8007850:	2300      	movs	r3, #0
 8007852:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	461a      	mov	r2, r3
 8007862:	2300      	movs	r3, #0
 8007864:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007872:	461a      	mov	r2, r3
 8007874:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007878:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	3301      	adds	r3, #1
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007884:	461a      	mov	r2, r3
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	4293      	cmp	r3, r2
 800788a:	d3b5      	bcc.n	80077f8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800788c:	2300      	movs	r3, #0
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	e043      	b.n	800791a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a8:	d118      	bne.n	80078dc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078bc:	461a      	mov	r2, r3
 80078be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	e013      	b.n	80078ee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d2:	461a      	mov	r2, r3
 80078d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078d8:	6013      	str	r3, [r2, #0]
 80078da:	e008      	b.n	80078ee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	461a      	mov	r2, r3
 80078ea:	2300      	movs	r3, #0
 80078ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fa:	461a      	mov	r2, r3
 80078fc:	2300      	movs	r3, #0
 80078fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790c:	461a      	mov	r2, r3
 800790e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007912:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	3301      	adds	r3, #1
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800791e:	461a      	mov	r2, r3
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	4293      	cmp	r3, r2
 8007924:	d3b5      	bcc.n	8007892 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007938:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007946:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007948:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800794c:	2b00      	cmp	r3, #0
 800794e:	d105      	bne.n	800795c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	f043 0210 	orr.w	r2, r3, #16
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699a      	ldr	r2, [r3, #24]
 8007960:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <USB_DevInit+0x2b8>)
 8007962:	4313      	orrs	r3, r2
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007968:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	f043 0208 	orr.w	r2, r3, #8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800797c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007980:	2b01      	cmp	r3, #1
 8007982:	d107      	bne.n	8007994 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800798c:	f043 0304 	orr.w	r3, r3, #4
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007994:	7dfb      	ldrb	r3, [r7, #23]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079a0:	b004      	add	sp, #16
 80079a2:	4770      	bx	lr
 80079a4:	803c3800 	.word	0x803c3800

080079a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80079c2:	d901      	bls.n	80079c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e01b      	b.n	8007a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	daf2      	bge.n	80079b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	019b      	lsls	r3, r3, #6
 80079d8:	f043 0220 	orr.w	r2, r3, #32
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3301      	adds	r3, #1
 80079e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80079ec:	d901      	bls.n	80079f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e006      	b.n	8007a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b20      	cmp	r3, #32
 80079fc:	d0f0      	beq.n	80079e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007a24:	d901      	bls.n	8007a2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e018      	b.n	8007a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	daf2      	bge.n	8007a18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2210      	movs	r2, #16
 8007a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007a48:	d901      	bls.n	8007a4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e006      	b.n	8007a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	2b10      	cmp	r3, #16
 8007a58:	d0f0      	beq.n	8007a3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	68f9      	ldr	r1, [r7, #12]
 8007a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b087      	sub	sp, #28
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 0306 	and.w	r3, r3, #6
 8007ab2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d102      	bne.n	8007ac0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007aba:	2300      	movs	r3, #0
 8007abc:	75fb      	strb	r3, [r7, #23]
 8007abe:	e00a      	b.n	8007ad6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d002      	beq.n	8007acc <USB_GetDevSpeed+0x32>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b06      	cmp	r3, #6
 8007aca:	d102      	bne.n	8007ad2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007acc:	2302      	movs	r3, #2
 8007ace:	75fb      	strb	r3, [r7, #23]
 8007ad0:	e001      	b.n	8007ad6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007ad2:	230f      	movs	r3, #15
 8007ad4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d13a      	bne.n	8007b76 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	f003 030f 	and.w	r3, r3, #15
 8007b10:	2101      	movs	r1, #1
 8007b12:	fa01 f303 	lsl.w	r3, r1, r3
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d155      	bne.n	8007be4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	791b      	ldrb	r3, [r3, #4]
 8007b52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	059b      	lsls	r3, r3, #22
 8007b5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	e036      	b.n	8007be4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7c:	69da      	ldr	r2, [r3, #28]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	2101      	movs	r1, #1
 8007b88:	fa01 f303 	lsl.w	r3, r1, r3
 8007b8c:	041b      	lsls	r3, r3, #16
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b94:	4313      	orrs	r3, r2
 8007b96:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	015a      	lsls	r2, r3, #5
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d11a      	bne.n	8007be4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	791b      	ldrb	r3, [r3, #4]
 8007bc8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bca:	430b      	orrs	r3, r1
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
	...

08007bf4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	785b      	ldrb	r3, [r3, #1]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d161      	bne.n	8007cd4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c26:	d11f      	bne.n	8007c68 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c46:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	0151      	lsls	r1, r2, #5
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	440a      	add	r2, r1
 8007c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f003 030f 	and.w	r3, r3, #15
 8007c78:	2101      	movs	r1, #1
 8007c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	43db      	mvns	r3, r3
 8007c82:	68f9      	ldr	r1, [r7, #12]
 8007c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c88:	4013      	ands	r3, r2
 8007c8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f003 030f 	and.w	r3, r3, #15
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	43db      	mvns	r3, r3
 8007ca6:	68f9      	ldr	r1, [r7, #12]
 8007ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cac:	4013      	ands	r3, r2
 8007cae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	0159      	lsls	r1, r3, #5
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	440b      	add	r3, r1
 8007cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4b35      	ldr	r3, [pc, #212]	; (8007da4 <USB_DeactivateEndpoint+0x1b0>)
 8007cce:	4013      	ands	r3, r2
 8007cd0:	600b      	str	r3, [r1, #0]
 8007cd2:	e060      	b.n	8007d96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cea:	d11f      	bne.n	8007d2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	0151      	lsls	r1, r2, #5
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	440a      	add	r2, r1
 8007d02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 030f 	and.w	r3, r3, #15
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d42:	041b      	lsls	r3, r3, #16
 8007d44:	43db      	mvns	r3, r3
 8007d46:	68f9      	ldr	r1, [r7, #12]
 8007d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d56:	69da      	ldr	r2, [r3, #28]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	f003 030f 	and.w	r3, r3, #15
 8007d60:	2101      	movs	r1, #1
 8007d62:	fa01 f303 	lsl.w	r3, r1, r3
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	68f9      	ldr	r1, [r7, #12]
 8007d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d70:	4013      	ands	r3, r2
 8007d72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	0159      	lsls	r1, r3, #5
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	440b      	add	r3, r1
 8007d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <USB_DeactivateEndpoint+0x1b4>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	ec337800 	.word	0xec337800
 8007da8:	eff37800 	.word	0xeff37800

08007dac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	; 0x28
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	f040 8180 	bne.w	80080ce <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d132      	bne.n	8007e3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007df4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	0151      	lsls	r1, r2, #5
 8007e0c:	69fa      	ldr	r2, [r7, #28]
 8007e0e:	440a      	add	r2, r1
 8007e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	0151      	lsls	r1, r2, #5
 8007e2c:	69fa      	ldr	r2, [r7, #28]
 8007e2e:	440a      	add	r2, r1
 8007e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e34:	0cdb      	lsrs	r3, r3, #19
 8007e36:	04db      	lsls	r3, r3, #19
 8007e38:	6113      	str	r3, [r2, #16]
 8007e3a:	e098      	b.n	8007f6e <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	69fa      	ldr	r2, [r7, #28]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e56:	0cdb      	lsrs	r3, r3, #19
 8007e58:	04db      	lsls	r3, r3, #19
 8007e5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e7e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d11a      	bne.n	8007ebc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d903      	bls.n	8007e9a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	0151      	lsls	r1, r2, #5
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	440a      	add	r2, r1
 8007eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eb8:	6113      	str	r3, [r2, #16]
 8007eba:	e045      	b.n	8007f48 <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	1e5a      	subs	r2, r3, #1
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	8afb      	ldrh	r3, [r7, #22]
 8007ee2:	04db      	lsls	r3, r3, #19
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4ba4      	ldr	r3, [pc, #656]	; (8008178 <USB_EPStartXfer+0x3cc>)
 8007ee8:	400b      	ands	r3, r1
 8007eea:	69b9      	ldr	r1, [r7, #24]
 8007eec:	0148      	lsls	r0, r1, #5
 8007eee:	69f9      	ldr	r1, [r7, #28]
 8007ef0:	4401      	add	r1, r0
 8007ef2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	791b      	ldrb	r3, [r3, #4]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d122      	bne.n	8007f48 <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	015a      	lsls	r2, r3, #5
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	4413      	add	r3, r2
 8007f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	0151      	lsls	r1, r2, #5
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	440a      	add	r2, r1
 8007f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007f20:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	8afb      	ldrh	r3, [r7, #22]
 8007f32:	075b      	lsls	r3, r3, #29
 8007f34:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8007f38:	69b9      	ldr	r1, [r7, #24]
 8007f3a:	0148      	lsls	r0, r1, #5
 8007f3c:	69f9      	ldr	r1, [r7, #28]
 8007f3e:	4401      	add	r1, r0
 8007f40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f44:	4313      	orrs	r3, r2
 8007f46:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f5e:	69b9      	ldr	r1, [r7, #24]
 8007f60:	0148      	lsls	r0, r1, #5
 8007f62:	69f9      	ldr	r1, [r7, #28]
 8007f64:	4401      	add	r1, r0
 8007f66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d14b      	bne.n	800800c <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d009      	beq.n	8007f90 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	461a      	mov	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	791b      	ldrb	r3, [r3, #4]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d128      	bne.n	8007fea <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d110      	bne.n	8007fca <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	e00f      	b.n	8007fea <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	0151      	lsls	r1, r2, #5
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	440a      	add	r2, r1
 8007fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fe8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	69fa      	ldr	r2, [r7, #28]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008004:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e165      	b.n	80082d8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	0151      	lsls	r1, r2, #5
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	440a      	add	r2, r1
 8008022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008026:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800802a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	791b      	ldrb	r3, [r3, #4]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d015      	beq.n	8008060 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 814d 	beq.w	80082d8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 030f 	and.w	r3, r3, #15
 800804e:	2101      	movs	r1, #1
 8008050:	fa01 f303 	lsl.w	r3, r1, r3
 8008054:	69f9      	ldr	r1, [r7, #28]
 8008056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800805a:	4313      	orrs	r3, r2
 800805c:	634b      	str	r3, [r1, #52]	; 0x34
 800805e:	e13b      	b.n	80082d8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806c:	2b00      	cmp	r3, #0
 800806e:	d110      	bne.n	8008092 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69ba      	ldr	r2, [r7, #24]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	69fa      	ldr	r2, [r7, #28]
 8008084:	440a      	add	r2, r1
 8008086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	e00f      	b.n	80080b2 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	68d9      	ldr	r1, [r3, #12]
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	781a      	ldrb	r2, [r3, #0]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	b298      	uxth	r0, r3
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4603      	mov	r3, r0
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f9b8 	bl	800843c <USB_WritePacket>
 80080cc:	e104      	b.n	80082d8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e8:	0cdb      	lsrs	r3, r3, #19
 80080ea:	04db      	lsls	r3, r3, #19
 80080ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	0151      	lsls	r1, r2, #5
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	440a      	add	r2, r1
 8008104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008108:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800810c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008110:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d131      	bne.n	800817c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008146:	69b9      	ldr	r1, [r7, #24]
 8008148:	0148      	lsls	r0, r1, #5
 800814a:	69f9      	ldr	r1, [r7, #28]
 800814c:	4401      	add	r1, r0
 800814e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008152:	4313      	orrs	r3, r2
 8008154:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	0151      	lsls	r1, r2, #5
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	440a      	add	r2, r1
 800816c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008174:	6113      	str	r3, [r2, #16]
 8008176:	e061      	b.n	800823c <USB_EPStartXfer+0x490>
 8008178:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d123      	bne.n	80081cc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008190:	691a      	ldr	r2, [r3, #16]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800819a:	69b9      	ldr	r1, [r7, #24]
 800819c:	0148      	lsls	r0, r1, #5
 800819e:	69f9      	ldr	r1, [r7, #28]
 80081a0:	4401      	add	r1, r0
 80081a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081a6:	4313      	orrs	r3, r2
 80081a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	0151      	lsls	r1, r2, #5
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	440a      	add	r2, r1
 80081c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081c8:	6113      	str	r3, [r2, #16]
 80081ca:	e037      	b.n	800823c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	4413      	add	r3, r2
 80081d6:	1e5a      	subs	r2, r3, #1
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	8afa      	ldrh	r2, [r7, #22]
 80081e8:	fb03 f202 	mul.w	r2, r3, r2
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	8afb      	ldrh	r3, [r7, #22]
 8008200:	04d9      	lsls	r1, r3, #19
 8008202:	4b38      	ldr	r3, [pc, #224]	; (80082e4 <USB_EPStartXfer+0x538>)
 8008204:	400b      	ands	r3, r1
 8008206:	69b9      	ldr	r1, [r7, #24]
 8008208:	0148      	lsls	r0, r1, #5
 800820a:	69f9      	ldr	r1, [r7, #28]
 800820c:	4401      	add	r1, r0
 800820e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008212:	4313      	orrs	r3, r2
 8008214:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	4413      	add	r3, r2
 800821e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008222:	691a      	ldr	r2, [r3, #16]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800822c:	69b9      	ldr	r1, [r7, #24]
 800822e:	0148      	lsls	r0, r1, #5
 8008230:	69f9      	ldr	r1, [r7, #28]
 8008232:	4401      	add	r1, r0
 8008234:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008238:	4313      	orrs	r3, r2
 800823a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d10d      	bne.n	800825e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	68d9      	ldr	r1, [r3, #12]
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825a:	460a      	mov	r2, r1
 800825c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	791b      	ldrb	r3, [r3, #4]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d128      	bne.n	80082b8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008272:	2b00      	cmp	r3, #0
 8008274:	d110      	bne.n	8008298 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	0151      	lsls	r1, r2, #5
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	440a      	add	r2, r1
 800828c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008290:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	e00f      	b.n	80082b8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	0151      	lsls	r1, r2, #5
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	440a      	add	r2, r1
 80082ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80082d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3720      	adds	r7, #32
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	1ff80000 	.word	0x1ff80000

080082e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d14a      	bne.n	800839c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800831a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800831e:	f040 8086 	bne.w	800842e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	7812      	ldrb	r2, [r2, #0]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008340:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008344:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	7812      	ldrb	r2, [r2, #0]
 800835a:	0151      	lsls	r1, r2, #5
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	440a      	add	r2, r1
 8008360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008368:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3301      	adds	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f242 7210 	movw	r2, #10000	; 0x2710
 8008376:	4293      	cmp	r3, r2
 8008378:	d902      	bls.n	8008380 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	75fb      	strb	r3, [r7, #23]
          break;
 800837e:	e056      	b.n	800842e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008398:	d0e7      	beq.n	800836a <USB_EPStopXfer+0x82>
 800839a:	e048      	b.n	800842e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083b4:	d13b      	bne.n	800842e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	7812      	ldrb	r2, [r2, #0]
 80083ca:	0151      	lsls	r1, r2, #5
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	440a      	add	r2, r1
 80083d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	7812      	ldrb	r2, [r2, #0]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3301      	adds	r3, #1
 8008402:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f242 7210 	movw	r2, #10000	; 0x2710
 800840a:	4293      	cmp	r3, r2
 800840c:	d902      	bls.n	8008414 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
          break;
 8008412:	e00c      	b.n	800842e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800842c:	d0e7      	beq.n	80083fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800842e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008430:	4618      	mov	r0, r3
 8008432:	371c      	adds	r7, #28
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800843c:	b480      	push	{r7}
 800843e:	b089      	sub	sp, #36	; 0x24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4611      	mov	r1, r2
 8008448:	461a      	mov	r2, r3
 800844a:	460b      	mov	r3, r1
 800844c:	71fb      	strb	r3, [r7, #7]
 800844e:	4613      	mov	r3, r2
 8008450:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800845a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800845e:	2b00      	cmp	r3, #0
 8008460:	d123      	bne.n	80084aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008462:	88bb      	ldrh	r3, [r7, #4]
 8008464:	3303      	adds	r3, #3
 8008466:	089b      	lsrs	r3, r3, #2
 8008468:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800846a:	2300      	movs	r3, #0
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	e018      	b.n	80084a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	031a      	lsls	r2, r3, #12
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	4413      	add	r3, r2
 8008478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847c:	461a      	mov	r2, r3
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	3301      	adds	r3, #1
 8008488:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	3301      	adds	r3, #1
 800848e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	3301      	adds	r3, #1
 8008494:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	3301      	adds	r3, #1
 800849a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	3301      	adds	r3, #1
 80084a0:	61bb      	str	r3, [r7, #24]
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d3e2      	bcc.n	8008470 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3724      	adds	r7, #36	; 0x24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b08b      	sub	sp, #44	; 0x2c
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	089b      	lsrs	r3, r3, #2
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80084de:	2300      	movs	r3, #0
 80084e0:	623b      	str	r3, [r7, #32]
 80084e2:	e014      	b.n	800850e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	3301      	adds	r3, #1
 80084f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	3301      	adds	r3, #1
 80084fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	3301      	adds	r3, #1
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	3301      	adds	r3, #1
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	3301      	adds	r3, #1
 800850c:	623b      	str	r3, [r7, #32]
 800850e:	6a3a      	ldr	r2, [r7, #32]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	429a      	cmp	r2, r3
 8008514:	d3e6      	bcc.n	80084e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008516:	8bfb      	ldrh	r3, [r7, #30]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01e      	beq.n	800855a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008526:	461a      	mov	r2, r3
 8008528:	f107 0310 	add.w	r3, r7, #16
 800852c:	6812      	ldr	r2, [r2, #0]
 800852e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	fa22 f303 	lsr.w	r3, r2, r3
 800853c:	b2da      	uxtb	r2, r3
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	701a      	strb	r2, [r3, #0]
      i++;
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	3301      	adds	r3, #1
 8008546:	623b      	str	r3, [r7, #32]
      pDest++;
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	3301      	adds	r3, #1
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800854e:	8bfb      	ldrh	r3, [r7, #30]
 8008550:	3b01      	subs	r3, #1
 8008552:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008554:	8bfb      	ldrh	r3, [r7, #30]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1ea      	bne.n	8008530 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800855c:	4618      	mov	r0, r3
 800855e:	372c      	adds	r7, #44	; 0x2c
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	785b      	ldrb	r3, [r3, #1]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d12c      	bne.n	80085de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4413      	add	r3, r2
 800858c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	db12      	blt.n	80085bc <USB_EPSetStall+0x54>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00f      	beq.n	80085bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	0151      	lsls	r1, r2, #5
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	440a      	add	r2, r1
 80085b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	e02b      	b.n	8008636 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	db12      	blt.n	8008616 <USB_EPSetStall+0xae>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00f      	beq.n	8008616 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	440a      	add	r2, r1
 800860c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008610:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008614:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	4413      	add	r3, r2
 800861e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	0151      	lsls	r1, r2, #5
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	440a      	add	r2, r1
 800862c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008634:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	785b      	ldrb	r3, [r3, #1]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d128      	bne.n	80086b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	440a      	add	r2, r1
 8008676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800867a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800867e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	791b      	ldrb	r3, [r3, #4]
 8008684:	2b03      	cmp	r3, #3
 8008686:	d003      	beq.n	8008690 <USB_EPClearStall+0x4c>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	791b      	ldrb	r3, [r3, #4]
 800868c:	2b02      	cmp	r3, #2
 800868e:	d138      	bne.n	8008702 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	0151      	lsls	r1, r2, #5
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	440a      	add	r2, r1
 80086a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	e027      	b.n	8008702 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	0151      	lsls	r1, r2, #5
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	440a      	add	r2, r1
 80086c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	791b      	ldrb	r3, [r3, #4]
 80086d6:	2b03      	cmp	r3, #3
 80086d8:	d003      	beq.n	80086e2 <USB_EPClearStall+0x9e>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	791b      	ldrb	r3, [r3, #4]
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d10f      	bne.n	8008702 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008700:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800872e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008732:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008744:	68f9      	ldr	r1, [r7, #12]
 8008746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800874a:	4313      	orrs	r3, r2
 800874c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008776:	f023 0303 	bic.w	r3, r3, #3
 800877a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	68fa      	ldr	r2, [r7, #12]
 8008786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800878a:	f023 0302 	bic.w	r3, r3, #2
 800878e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800879e:	b480      	push	{r7}
 80087a0:	b085      	sub	sp, #20
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087b8:	f023 0303 	bic.w	r3, r3, #3
 80087bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087cc:	f043 0302 	orr.w	r3, r3, #2
 80087d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4013      	ands	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087f8:	68fb      	ldr	r3, [r7, #12]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	4013      	ands	r3, r2
 8008828:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	0c1b      	lsrs	r3, r3, #16
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800883a:	b480      	push	{r7}
 800883c:	b085      	sub	sp, #20
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	4013      	ands	r3, r2
 800885c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	b29b      	uxth	r3, r3
}
 8008862:	4618      	mov	r0, r3
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800886e:	b480      	push	{r7}
 8008870:	b085      	sub	sp, #20
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	4013      	ands	r3, r2
 800889a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800889c:	68bb      	ldr	r3, [r7, #8]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b087      	sub	sp, #28
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	460b      	mov	r3, r1
 80088b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	f003 030f 	and.w	r3, r3, #15
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	fa22 f303 	lsr.w	r3, r2, r3
 80088da:	01db      	lsls	r3, r3, #7
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	4013      	ands	r3, r2
 80088f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088f8:	68bb      	ldr	r3, [r7, #8]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	371c      	adds	r7, #28
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	f003 0301 	and.w	r3, r3, #1
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008922:	b480      	push	{r7}
 8008924:	b085      	sub	sp, #20
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800893c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008940:	f023 0307 	bic.w	r3, r3, #7
 8008944:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008958:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	460b      	mov	r3, r1
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	333c      	adds	r3, #60	; 0x3c
 800897e:	3304      	adds	r3, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	4a26      	ldr	r2, [pc, #152]	; (8008a20 <USB_EP0_OutStart+0xb8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d90a      	bls.n	80089a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800899c:	d101      	bne.n	80089a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	e037      	b.n	8008a12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a8:	461a      	mov	r2, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d0:	f043 0318 	orr.w	r3, r3, #24
 80089d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80089e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089ea:	7afb      	ldrb	r3, [r7, #11]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d10f      	bne.n	8008a10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f6:	461a      	mov	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008a0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	371c      	adds	r7, #28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	4f54300a 	.word	0x4f54300a

08008a24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a3c:	d901      	bls.n	8008a42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e01b      	b.n	8008a7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	daf2      	bge.n	8008a30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f043 0201 	orr.w	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008a66:	d901      	bls.n	8008a6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e006      	b.n	8008a7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d0f0      	beq.n	8008a5a <USB_CoreReset+0x36>

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
	...

08008a88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a98:	f003 fac8 	bl	800c02c <USBD_static_malloc>
 8008a9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d109      	bne.n	8008ab8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	32b0      	adds	r2, #176	; 0xb0
 8008aae:	2100      	movs	r1, #0
 8008ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e0d4      	b.n	8008c62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008ab8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008abc:	2100      	movs	r1, #0
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f003 fc77 	bl	800c3b2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	32b0      	adds	r2, #176	; 0xb0
 8008ace:	68f9      	ldr	r1, [r7, #12]
 8008ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	32b0      	adds	r2, #176	; 0xb0
 8008ade:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7c1b      	ldrb	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d138      	bne.n	8008b62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008af0:	4b5e      	ldr	r3, [pc, #376]	; (8008c6c <USBD_CDC_Init+0x1e4>)
 8008af2:	7819      	ldrb	r1, [r3, #0]
 8008af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008af8:	2202      	movs	r2, #2
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f003 f925 	bl	800bd4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b00:	4b5a      	ldr	r3, [pc, #360]	; (8008c6c <USBD_CDC_Init+0x1e4>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	f003 020f 	and.w	r2, r3, #15
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	3324      	adds	r3, #36	; 0x24
 8008b16:	2201      	movs	r2, #1
 8008b18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b1a:	4b55      	ldr	r3, [pc, #340]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008b1c:	7819      	ldrb	r1, [r3, #0]
 8008b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b22:	2202      	movs	r2, #2
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f003 f910 	bl	800bd4a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b2a:	4b51      	ldr	r3, [pc, #324]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	f003 020f 	and.w	r2, r3, #15
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b42:	2201      	movs	r2, #1
 8008b44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b46:	4b4b      	ldr	r3, [pc, #300]	; (8008c74 <USBD_CDC_Init+0x1ec>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	f003 020f 	and.w	r2, r3, #15
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	3326      	adds	r3, #38	; 0x26
 8008b5c:	2210      	movs	r2, #16
 8008b5e:	801a      	strh	r2, [r3, #0]
 8008b60:	e035      	b.n	8008bce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b62:	4b42      	ldr	r3, [pc, #264]	; (8008c6c <USBD_CDC_Init+0x1e4>)
 8008b64:	7819      	ldrb	r1, [r3, #0]
 8008b66:	2340      	movs	r3, #64	; 0x40
 8008b68:	2202      	movs	r2, #2
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f003 f8ed 	bl	800bd4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b70:	4b3e      	ldr	r3, [pc, #248]	; (8008c6c <USBD_CDC_Init+0x1e4>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 020f 	and.w	r2, r3, #15
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	3324      	adds	r3, #36	; 0x24
 8008b86:	2201      	movs	r2, #1
 8008b88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b8a:	4b39      	ldr	r3, [pc, #228]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008b8c:	7819      	ldrb	r1, [r3, #0]
 8008b8e:	2340      	movs	r3, #64	; 0x40
 8008b90:	2202      	movs	r2, #2
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f003 f8d9 	bl	800bd4a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b98:	4b35      	ldr	r3, [pc, #212]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	f003 020f 	and.w	r2, r3, #15
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008bb4:	4b2f      	ldr	r3, [pc, #188]	; (8008c74 <USBD_CDC_Init+0x1ec>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 020f 	and.w	r2, r3, #15
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	3326      	adds	r3, #38	; 0x26
 8008bca:	2210      	movs	r2, #16
 8008bcc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bce:	4b29      	ldr	r3, [pc, #164]	; (8008c74 <USBD_CDC_Init+0x1ec>)
 8008bd0:	7819      	ldrb	r1, [r3, #0]
 8008bd2:	2308      	movs	r3, #8
 8008bd4:	2203      	movs	r2, #3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f003 f8b7 	bl	800bd4a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008bdc:	4b25      	ldr	r3, [pc, #148]	; (8008c74 <USBD_CDC_Init+0x1ec>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	6879      	ldr	r1, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	440b      	add	r3, r1
 8008bf0:	3324      	adds	r3, #36	; 0x24
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	33b0      	adds	r3, #176	; 0xb0
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e018      	b.n	8008c62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7c1b      	ldrb	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c38:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008c3a:	7819      	ldrb	r1, [r3, #0]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f003 f96e 	bl	800bf28 <USBD_LL_PrepareReceive>
 8008c4c:	e008      	b.n	8008c60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c4e:	4b08      	ldr	r3, [pc, #32]	; (8008c70 <USBD_CDC_Init+0x1e8>)
 8008c50:	7819      	ldrb	r1, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c58:	2340      	movs	r3, #64	; 0x40
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f003 f964 	bl	800bf28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000093 	.word	0x20000093
 8008c70:	20000094 	.word	0x20000094
 8008c74:	20000095 	.word	0x20000095

08008c78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	460b      	mov	r3, r1
 8008c82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008c84:	4b3a      	ldr	r3, [pc, #232]	; (8008d70 <USBD_CDC_DeInit+0xf8>)
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f003 f883 	bl	800bd96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008c90:	4b37      	ldr	r3, [pc, #220]	; (8008d70 <USBD_CDC_DeInit+0xf8>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	f003 020f 	and.w	r2, r3, #15
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	3324      	adds	r3, #36	; 0x24
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008caa:	4b32      	ldr	r3, [pc, #200]	; (8008d74 <USBD_CDC_DeInit+0xfc>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f003 f870 	bl	800bd96 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008cb6:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <USBD_CDC_DeInit+0xfc>)
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	f003 020f 	and.w	r2, r3, #15
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cce:	2200      	movs	r2, #0
 8008cd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008cd2:	4b29      	ldr	r3, [pc, #164]	; (8008d78 <USBD_CDC_DeInit+0x100>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f003 f85c 	bl	800bd96 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008cde:	4b26      	ldr	r3, [pc, #152]	; (8008d78 <USBD_CDC_DeInit+0x100>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	f003 020f 	and.w	r2, r3, #15
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	3324      	adds	r3, #36	; 0x24
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008cf8:	4b1f      	ldr	r3, [pc, #124]	; (8008d78 <USBD_CDC_DeInit+0x100>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	f003 020f 	and.w	r2, r3, #15
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	3326      	adds	r3, #38	; 0x26
 8008d0e:	2200      	movs	r2, #0
 8008d10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	32b0      	adds	r2, #176	; 0xb0
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01f      	beq.n	8008d64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	33b0      	adds	r3, #176	; 0xb0
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	32b0      	adds	r2, #176	; 0xb0
 8008d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f003 f97e 	bl	800c048 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	32b0      	adds	r2, #176	; 0xb0
 8008d56:	2100      	movs	r1, #0
 8008d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000093 	.word	0x20000093
 8008d74:	20000094 	.word	0x20000094
 8008d78:	20000095 	.word	0x20000095

08008d7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	32b0      	adds	r2, #176	; 0xb0
 8008d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e0bf      	b.n	8008f2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d050      	beq.n	8008e5a <USBD_CDC_Setup+0xde>
 8008db8:	2b20      	cmp	r3, #32
 8008dba:	f040 80af 	bne.w	8008f1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	88db      	ldrh	r3, [r3, #6]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d03a      	beq.n	8008e3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b25b      	sxtb	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	da1b      	bge.n	8008e08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	33b0      	adds	r3, #176	; 0xb0
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008de6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	88d2      	ldrh	r2, [r2, #6]
 8008dec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	88db      	ldrh	r3, [r3, #6]
 8008df2:	2b07      	cmp	r3, #7
 8008df4:	bf28      	it	cs
 8008df6:	2307      	movcs	r3, #7
 8008df8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	89fa      	ldrh	r2, [r7, #14]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 fd7f 	bl	800a904 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008e06:	e090      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	785a      	ldrb	r2, [r3, #1]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	88db      	ldrh	r3, [r3, #6]
 8008e16:	2b3f      	cmp	r3, #63	; 0x3f
 8008e18:	d803      	bhi.n	8008e22 <USBD_CDC_Setup+0xa6>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	88db      	ldrh	r3, [r3, #6]
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	e000      	b.n	8008e24 <USBD_CDC_Setup+0xa8>
 8008e22:	2240      	movs	r2, #64	; 0x40
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008e2a:	6939      	ldr	r1, [r7, #16]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008e32:	461a      	mov	r2, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 fd91 	bl	800a95c <USBD_CtlPrepareRx>
      break;
 8008e3a:	e076      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	33b0      	adds	r3, #176	; 0xb0
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	7850      	ldrb	r0, [r2, #1]
 8008e52:	2200      	movs	r2, #0
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	4798      	blx	r3
      break;
 8008e58:	e067      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	2b0b      	cmp	r3, #11
 8008e60:	d851      	bhi.n	8008f06 <USBD_CDC_Setup+0x18a>
 8008e62:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <USBD_CDC_Setup+0xec>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e99 	.word	0x08008e99
 8008e6c:	08008f15 	.word	0x08008f15
 8008e70:	08008f07 	.word	0x08008f07
 8008e74:	08008f07 	.word	0x08008f07
 8008e78:	08008f07 	.word	0x08008f07
 8008e7c:	08008f07 	.word	0x08008f07
 8008e80:	08008f07 	.word	0x08008f07
 8008e84:	08008f07 	.word	0x08008f07
 8008e88:	08008f07 	.word	0x08008f07
 8008e8c:	08008f07 	.word	0x08008f07
 8008e90:	08008ec3 	.word	0x08008ec3
 8008e94:	08008eed 	.word	0x08008eed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d107      	bne.n	8008eb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ea4:	f107 030a 	add.w	r3, r7, #10
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 fd29 	bl	800a904 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eb2:	e032      	b.n	8008f1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f001 fca7 	bl	800a80a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	75fb      	strb	r3, [r7, #23]
          break;
 8008ec0:	e02b      	b.n	8008f1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d107      	bne.n	8008ede <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ece:	f107 030d 	add.w	r3, r7, #13
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fd14 	bl	800a904 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008edc:	e01d      	b.n	8008f1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 fc92 	bl	800a80a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	75fb      	strb	r3, [r7, #23]
          break;
 8008eea:	e016      	b.n	8008f1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d00f      	beq.n	8008f18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008ef8:	6839      	ldr	r1, [r7, #0]
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fc85 	bl	800a80a <USBD_CtlError>
            ret = USBD_FAIL;
 8008f00:	2303      	movs	r3, #3
 8008f02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f04:	e008      	b.n	8008f18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 fc7e 	bl	800a80a <USBD_CtlError>
          ret = USBD_FAIL;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	75fb      	strb	r3, [r7, #23]
          break;
 8008f12:	e002      	b.n	8008f1a <USBD_CDC_Setup+0x19e>
          break;
 8008f14:	bf00      	nop
 8008f16:	e008      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>
          break;
 8008f18:	bf00      	nop
      }
      break;
 8008f1a:	e006      	b.n	8008f2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 fc73 	bl	800a80a <USBD_CtlError>
      ret = USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	75fb      	strb	r3, [r7, #23]
      break;
 8008f28:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	32b0      	adds	r2, #176	; 0xb0
 8008f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e065      	b.n	800902a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	32b0      	adds	r2, #176	; 0xb0
 8008f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	f003 020f 	and.w	r2, r3, #15
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4613      	mov	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	440b      	add	r3, r1
 8008f80:	3318      	adds	r3, #24
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d02f      	beq.n	8008fe8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008f88:	78fb      	ldrb	r3, [r7, #3]
 8008f8a:	f003 020f 	and.w	r2, r3, #15
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	78fb      	ldrb	r3, [r7, #3]
 8008fa0:	f003 010f 	and.w	r1, r3, #15
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	440b      	add	r3, r1
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4403      	add	r3, r0
 8008fb0:	331c      	adds	r3, #28
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fb8:	fb01 f303 	mul.w	r3, r1, r3
 8008fbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d112      	bne.n	8008fe8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	f003 020f 	and.w	r2, r3, #15
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	3318      	adds	r3, #24
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fda:	78f9      	ldrb	r1, [r7, #3]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	2200      	movs	r2, #0
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f002 ff80 	bl	800bee6 <USBD_LL_Transmit>
 8008fe6:	e01f      	b.n	8009028 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	33b0      	adds	r3, #176	; 0xb0
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d010      	beq.n	8009028 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	33b0      	adds	r3, #176	; 0xb0
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	460b      	mov	r3, r1
 800903c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	32b0      	adds	r2, #176	; 0xb0
 8009048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	32b0      	adds	r2, #176	; 0xb0
 8009058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009060:	2303      	movs	r3, #3
 8009062:	e01a      	b.n	800909a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f002 ff7e 	bl	800bf6a <USBD_LL_GetRxDataSize>
 800906e:	4602      	mov	r2, r0
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	33b0      	adds	r3, #176	; 0xb0
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009094:	4611      	mov	r1, r2
 8009096:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	32b0      	adds	r2, #176	; 0xb0
 80090b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e025      	b.n	8009110 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	33b0      	adds	r3, #176	; 0xb0
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d01a      	beq.n	800910e <USBD_CDC_EP0_RxReady+0x6c>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80090de:	2bff      	cmp	r3, #255	; 0xff
 80090e0:	d015      	beq.n	800910e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	33b0      	adds	r3, #176	; 0xb0
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80090fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009102:	b292      	uxth	r2, r2
 8009104:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	22ff      	movs	r2, #255	; 0xff
 800910a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009120:	2182      	movs	r1, #130	; 0x82
 8009122:	4818      	ldr	r0, [pc, #96]	; (8009184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009124:	f000 fd0f 	bl	8009b46 <USBD_GetEpDesc>
 8009128:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800912a:	2101      	movs	r1, #1
 800912c:	4815      	ldr	r0, [pc, #84]	; (8009184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800912e:	f000 fd0a 	bl	8009b46 <USBD_GetEpDesc>
 8009132:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009134:	2181      	movs	r1, #129	; 0x81
 8009136:	4813      	ldr	r0, [pc, #76]	; (8009184 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009138:	f000 fd05 	bl	8009b46 <USBD_GetEpDesc>
 800913c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2210      	movs	r2, #16
 8009148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d006      	beq.n	800915e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	2200      	movs	r2, #0
 8009154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009158:	711a      	strb	r2, [r3, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d006      	beq.n	8009172 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800916c:	711a      	strb	r2, [r3, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2243      	movs	r2, #67	; 0x43
 8009176:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009178:	4b02      	ldr	r3, [pc, #8]	; (8009184 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20000050 	.word	0x20000050

08009188 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009190:	2182      	movs	r1, #130	; 0x82
 8009192:	4818      	ldr	r0, [pc, #96]	; (80091f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009194:	f000 fcd7 	bl	8009b46 <USBD_GetEpDesc>
 8009198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800919a:	2101      	movs	r1, #1
 800919c:	4815      	ldr	r0, [pc, #84]	; (80091f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800919e:	f000 fcd2 	bl	8009b46 <USBD_GetEpDesc>
 80091a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091a4:	2181      	movs	r1, #129	; 0x81
 80091a6:	4813      	ldr	r0, [pc, #76]	; (80091f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091a8:	f000 fccd 	bl	8009b46 <USBD_GetEpDesc>
 80091ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2210      	movs	r2, #16
 80091b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d006      	beq.n	80091ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2200      	movs	r2, #0
 80091c4:	711a      	strb	r2, [r3, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f042 0202 	orr.w	r2, r2, #2
 80091cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d006      	beq.n	80091e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	711a      	strb	r2, [r3, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f042 0202 	orr.w	r2, r2, #2
 80091e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2243      	movs	r2, #67	; 0x43
 80091e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091e8:	4b02      	ldr	r3, [pc, #8]	; (80091f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20000050 	.word	0x20000050

080091f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009200:	2182      	movs	r1, #130	; 0x82
 8009202:	4818      	ldr	r0, [pc, #96]	; (8009264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009204:	f000 fc9f 	bl	8009b46 <USBD_GetEpDesc>
 8009208:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800920a:	2101      	movs	r1, #1
 800920c:	4815      	ldr	r0, [pc, #84]	; (8009264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800920e:	f000 fc9a 	bl	8009b46 <USBD_GetEpDesc>
 8009212:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009214:	2181      	movs	r1, #129	; 0x81
 8009216:	4813      	ldr	r0, [pc, #76]	; (8009264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009218:	f000 fc95 	bl	8009b46 <USBD_GetEpDesc>
 800921c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2210      	movs	r2, #16
 8009228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d006      	beq.n	800923e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	2200      	movs	r2, #0
 8009234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009238:	711a      	strb	r2, [r3, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d006      	beq.n	8009252 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800924c:	711a      	strb	r2, [r3, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2243      	movs	r2, #67	; 0x43
 8009256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009258:	4b02      	ldr	r3, [pc, #8]	; (8009264 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800925a:	4618      	mov	r0, r3
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000050 	.word	0x20000050

08009268 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	220a      	movs	r2, #10
 8009274:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009276:	4b03      	ldr	r3, [pc, #12]	; (8009284 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009278:	4618      	mov	r0, r3
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	2000000c 	.word	0x2000000c

08009288 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009298:	2303      	movs	r3, #3
 800929a:	e009      	b.n	80092b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	33b0      	adds	r3, #176	; 0xb0
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	32b0      	adds	r2, #176	; 0xb0
 80092d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d101      	bne.n	80092e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80092de:	2303      	movs	r3, #3
 80092e0:	e008      	b.n	80092f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	32b0      	adds	r2, #176	; 0xb0
 8009314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009318:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009320:	2303      	movs	r3, #3
 8009322:	e004      	b.n	800932e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	32b0      	adds	r2, #176	; 0xb0
 800934e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009352:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	32b0      	adds	r2, #176	; 0xb0
 800935e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009366:	2303      	movs	r3, #3
 8009368:	e018      	b.n	800939c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	7c1b      	ldrb	r3, [r3, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009372:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <USBD_CDC_ReceivePacket+0x68>)
 8009374:	7819      	ldrb	r1, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800937c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f002 fdd1 	bl	800bf28 <USBD_LL_PrepareReceive>
 8009386:	e008      	b.n	800939a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009388:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <USBD_CDC_ReceivePacket+0x68>)
 800938a:	7819      	ldrb	r1, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f002 fdc7 	bl	800bf28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000094 	.word	0x20000094

080093a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d101      	bne.n	80093c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80093bc:	2303      	movs	r3, #3
 80093be:	e01f      	b.n	8009400 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	79fa      	ldrb	r2, [r7, #7]
 80093f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f002 fc41 	bl	800bc7c <USBD_LL_Init>
 80093fa:	4603      	mov	r3, r0
 80093fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800941c:	2303      	movs	r3, #3
 800941e:	e025      	b.n	800946c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	32ae      	adds	r2, #174	; 0xae
 8009432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00f      	beq.n	800945c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	32ae      	adds	r2, #174	; 0xae
 8009446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	f107 020e 	add.w	r2, r7, #14
 8009450:	4610      	mov	r0, r2
 8009452:	4798      	blx	r3
 8009454:	4602      	mov	r2, r0
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009462:	1c5a      	adds	r2, r3, #1
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f002 fc49 	bl	800bd14 <USBD_LL_Start>
 8009482:	4603      	mov	r3, r0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009494:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009496:	4618      	mov	r0, r3
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d009      	beq.n	80094d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	4611      	mov	r1, r2
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	78fa      	ldrb	r2, [r7, #3]
 80094f4:	4611      	mov	r1, r2
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009500:	2303      	movs	r3, #3
 8009502:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	4618      	mov	r0, r3
 8009522:	f001 f938 	bl	800a796 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009534:	461a      	mov	r2, r3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009542:	f003 031f 	and.w	r3, r3, #31
 8009546:	2b02      	cmp	r3, #2
 8009548:	d01a      	beq.n	8009580 <USBD_LL_SetupStage+0x72>
 800954a:	2b02      	cmp	r3, #2
 800954c:	d822      	bhi.n	8009594 <USBD_LL_SetupStage+0x86>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <USBD_LL_SetupStage+0x4a>
 8009552:	2b01      	cmp	r3, #1
 8009554:	d00a      	beq.n	800956c <USBD_LL_SetupStage+0x5e>
 8009556:	e01d      	b.n	8009594 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fb65 	bl	8009c30 <USBD_StdDevReq>
 8009566:	4603      	mov	r3, r0
 8009568:	73fb      	strb	r3, [r7, #15]
      break;
 800956a:	e020      	b.n	80095ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fbcd 	bl	8009d14 <USBD_StdItfReq>
 800957a:	4603      	mov	r3, r0
 800957c:	73fb      	strb	r3, [r7, #15]
      break;
 800957e:	e016      	b.n	80095ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fc2f 	bl	8009dec <USBD_StdEPReq>
 800958e:	4603      	mov	r3, r0
 8009590:	73fb      	strb	r3, [r7, #15]
      break;
 8009592:	e00c      	b.n	80095ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800959a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f002 fc16 	bl	800bdd4 <USBD_LL_StallEP>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]
      break;
 80095ac:	bf00      	nop
  }

  return ret;
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	460b      	mov	r3, r1
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80095ca:	7afb      	ldrb	r3, [r7, #11]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d16e      	bne.n	80096ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095de:	2b03      	cmp	r3, #3
 80095e0:	f040 8098 	bne.w	8009714 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	689a      	ldr	r2, [r3, #8]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d913      	bls.n	8009618 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	1ad2      	subs	r2, r2, r3
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	4293      	cmp	r3, r2
 8009608:	bf28      	it	cs
 800960a:	4613      	movcs	r3, r2
 800960c:	461a      	mov	r2, r3
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f001 f9c0 	bl	800a996 <USBD_CtlContinueRx>
 8009616:	e07d      	b.n	8009714 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800961e:	f003 031f 	and.w	r3, r3, #31
 8009622:	2b02      	cmp	r3, #2
 8009624:	d014      	beq.n	8009650 <USBD_LL_DataOutStage+0x98>
 8009626:	2b02      	cmp	r3, #2
 8009628:	d81d      	bhi.n	8009666 <USBD_LL_DataOutStage+0xae>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <USBD_LL_DataOutStage+0x7c>
 800962e:	2b01      	cmp	r3, #1
 8009630:	d003      	beq.n	800963a <USBD_LL_DataOutStage+0x82>
 8009632:	e018      	b.n	8009666 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	75bb      	strb	r3, [r7, #22]
            break;
 8009638:	e018      	b.n	800966c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009640:	b2db      	uxtb	r3, r3
 8009642:	4619      	mov	r1, r3
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 fa64 	bl	8009b12 <USBD_CoreFindIF>
 800964a:	4603      	mov	r3, r0
 800964c:	75bb      	strb	r3, [r7, #22]
            break;
 800964e:	e00d      	b.n	800966c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009656:	b2db      	uxtb	r3, r3
 8009658:	4619      	mov	r1, r3
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f000 fa66 	bl	8009b2c <USBD_CoreFindEP>
 8009660:	4603      	mov	r3, r0
 8009662:	75bb      	strb	r3, [r7, #22]
            break;
 8009664:	e002      	b.n	800966c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	75bb      	strb	r3, [r7, #22]
            break;
 800966a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800966c:	7dbb      	ldrb	r3, [r7, #22]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d119      	bne.n	80096a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b03      	cmp	r3, #3
 800967c:	d113      	bne.n	80096a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800967e:	7dba      	ldrb	r2, [r7, #22]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	32ae      	adds	r2, #174	; 0xae
 8009684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800968e:	7dba      	ldrb	r2, [r7, #22]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009696:	7dba      	ldrb	r2, [r7, #22]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	32ae      	adds	r2, #174	; 0xae
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f001 f986 	bl	800a9b8 <USBD_CtlSendStatus>
 80096ac:	e032      	b.n	8009714 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80096ae:	7afb      	ldrb	r3, [r7, #11]
 80096b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	4619      	mov	r1, r3
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 fa37 	bl	8009b2c <USBD_CoreFindEP>
 80096be:	4603      	mov	r3, r0
 80096c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096c2:	7dbb      	ldrb	r3, [r7, #22]
 80096c4:	2bff      	cmp	r3, #255	; 0xff
 80096c6:	d025      	beq.n	8009714 <USBD_LL_DataOutStage+0x15c>
 80096c8:	7dbb      	ldrb	r3, [r7, #22]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d122      	bne.n	8009714 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d117      	bne.n	800970a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80096da:	7dba      	ldrb	r2, [r7, #22]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	32ae      	adds	r2, #174	; 0xae
 80096e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00f      	beq.n	800970a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80096ea:	7dba      	ldrb	r2, [r7, #22]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80096f2:	7dba      	ldrb	r2, [r7, #22]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	32ae      	adds	r2, #174	; 0xae
 80096f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	7afa      	ldrb	r2, [r7, #11]
 8009700:	4611      	mov	r1, r2
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	4798      	blx	r3
 8009706:	4603      	mov	r3, r0
 8009708:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	e000      	b.n	8009716 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3718      	adds	r7, #24
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b086      	sub	sp, #24
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	460b      	mov	r3, r1
 8009728:	607a      	str	r2, [r7, #4]
 800972a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d16f      	bne.n	8009812 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3314      	adds	r3, #20
 8009736:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800973e:	2b02      	cmp	r3, #2
 8009740:	d15a      	bne.n	80097f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	429a      	cmp	r2, r3
 800974c:	d914      	bls.n	8009778 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	689a      	ldr	r2, [r3, #8]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	1ad2      	subs	r2, r2, r3
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	461a      	mov	r2, r3
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f001 f8e8 	bl	800a93a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800976a:	2300      	movs	r3, #0
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f002 fbd9 	bl	800bf28 <USBD_LL_PrepareReceive>
 8009776:	e03f      	b.n	80097f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	429a      	cmp	r2, r3
 8009782:	d11c      	bne.n	80097be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800978c:	429a      	cmp	r2, r3
 800978e:	d316      	bcc.n	80097be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	685a      	ldr	r2, [r3, #4]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800979a:	429a      	cmp	r2, r3
 800979c:	d20f      	bcs.n	80097be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800979e:	2200      	movs	r2, #0
 80097a0:	2100      	movs	r1, #0
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f001 f8c9 	bl	800a93a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097b0:	2300      	movs	r3, #0
 80097b2:	2200      	movs	r2, #0
 80097b4:	2100      	movs	r1, #0
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f002 fbb6 	bl	800bf28 <USBD_LL_PrepareReceive>
 80097bc:	e01c      	b.n	80097f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d10f      	bne.n	80097ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d009      	beq.n	80097ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80097ea:	2180      	movs	r1, #128	; 0x80
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f002 faf1 	bl	800bdd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f001 f8f3 	bl	800a9de <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d03a      	beq.n	8009878 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f7ff fe42 	bl	800948c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009810:	e032      	b.n	8009878 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009812:	7afb      	ldrb	r3, [r7, #11]
 8009814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009818:	b2db      	uxtb	r3, r3
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f000 f985 	bl	8009b2c <USBD_CoreFindEP>
 8009822:	4603      	mov	r3, r0
 8009824:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009826:	7dfb      	ldrb	r3, [r7, #23]
 8009828:	2bff      	cmp	r3, #255	; 0xff
 800982a:	d025      	beq.n	8009878 <USBD_LL_DataInStage+0x15a>
 800982c:	7dfb      	ldrb	r3, [r7, #23]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d122      	bne.n	8009878 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b03      	cmp	r3, #3
 800983c:	d11c      	bne.n	8009878 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800983e:	7dfa      	ldrb	r2, [r7, #23]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	32ae      	adds	r2, #174	; 0xae
 8009844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d014      	beq.n	8009878 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800984e:	7dfa      	ldrb	r2, [r7, #23]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009856:	7dfa      	ldrb	r2, [r7, #23]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	32ae      	adds	r2, #174	; 0xae
 800985c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	7afa      	ldrb	r2, [r7, #11]
 8009864:	4611      	mov	r1, r2
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	4798      	blx	r3
 800986a:	4603      	mov	r3, r0
 800986c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800986e:	7dbb      	ldrb	r3, [r7, #22]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009874:	7dbb      	ldrb	r3, [r7, #22]
 8009876:	e000      	b.n	800987a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d014      	beq.n	80098e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00e      	beq.n	80098e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	6852      	ldr	r2, [r2, #4]
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	4611      	mov	r1, r2
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	4798      	blx	r3
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80098e4:	2303      	movs	r3, #3
 80098e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098e8:	2340      	movs	r3, #64	; 0x40
 80098ea:	2200      	movs	r2, #0
 80098ec:	2100      	movs	r1, #0
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f002 fa2b 	bl	800bd4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2240      	movs	r2, #64	; 0x40
 8009900:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009904:	2340      	movs	r3, #64	; 0x40
 8009906:	2200      	movs	r2, #0
 8009908:	2180      	movs	r1, #128	; 0x80
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f002 fa1d 	bl	800bd4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2240      	movs	r2, #64	; 0x40
 800991a:	621a      	str	r2, [r3, #32]

  return ret;
 800991c:	7bfb      	ldrb	r3, [r7, #15]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	78fa      	ldrb	r2, [r7, #3]
 8009936:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b04      	cmp	r3, #4
 8009958:	d006      	beq.n	8009968 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009960:	b2da      	uxtb	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2204      	movs	r2, #4
 800996c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b04      	cmp	r3, #4
 8009990:	d106      	bne.n	80099a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009998:	b2da      	uxtb	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b03      	cmp	r3, #3
 80099c0:	d110      	bne.n	80099e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00b      	beq.n	80099e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d005      	beq.n	80099e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	32ae      	adds	r2, #174	; 0xae
 8009a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e01c      	b.n	8009a4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d115      	bne.n	8009a48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	32ae      	adds	r2, #174	; 0xae
 8009a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00b      	beq.n	8009a48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	32ae      	adds	r2, #174	; 0xae
 8009a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	78fa      	ldrb	r2, [r7, #3]
 8009a42:	4611      	mov	r1, r2
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	32ae      	adds	r2, #174	; 0xae
 8009a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e01c      	b.n	8009aae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b03      	cmp	r3, #3
 8009a7e:	d115      	bne.n	8009aac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	32ae      	adds	r2, #174	; 0xae
 8009a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00b      	beq.n	8009aac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	32ae      	adds	r2, #174	; 0xae
 8009a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa4:	78fa      	ldrb	r2, [r7, #3]
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00e      	beq.n	8009b08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	6852      	ldr	r2, [r2, #4]
 8009af6:	b2d2      	uxtb	r2, r2
 8009af8:	4611      	mov	r1, r2
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	4798      	blx	r3
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009b04:	2303      	movs	r3, #3
 8009b06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b083      	sub	sp, #12
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b086      	sub	sp, #24
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	885b      	ldrh	r3, [r3, #2]
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d920      	bls.n	8009bb0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009b76:	e013      	b.n	8009ba0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009b78:	f107 030a 	add.w	r3, r7, #10
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6978      	ldr	r0, [r7, #20]
 8009b80:	f000 f81b 	bl	8009bba <USBD_GetNextDesc>
 8009b84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	785b      	ldrb	r3, [r3, #1]
 8009b8a:	2b05      	cmp	r3, #5
 8009b8c:	d108      	bne.n	8009ba0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	789b      	ldrb	r3, [r3, #2]
 8009b96:	78fa      	ldrb	r2, [r7, #3]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d008      	beq.n	8009bae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	885b      	ldrh	r3, [r3, #2]
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	897b      	ldrh	r3, [r7, #10]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d8e5      	bhi.n	8009b78 <USBD_GetEpDesc+0x32>
 8009bac:	e000      	b.n	8009bb0 <USBD_GetEpDesc+0x6a>
          break;
 8009bae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009bb0:	693b      	ldr	r3, [r7, #16]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	881a      	ldrh	r2, [r3, #0]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	4413      	add	r3, r2
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	461a      	mov	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4413      	add	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009be6:	68fb      	ldr	r3, [r7, #12]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c12:	8a3b      	ldrh	r3, [r7, #16]
 8009c14:	021b      	lsls	r3, r3, #8
 8009c16:	b21a      	sxth	r2, r3
 8009c18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	b21b      	sxth	r3, r3
 8009c20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c22:	89fb      	ldrh	r3, [r7, #14]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	371c      	adds	r7, #28
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c46:	2b40      	cmp	r3, #64	; 0x40
 8009c48:	d005      	beq.n	8009c56 <USBD_StdDevReq+0x26>
 8009c4a:	2b40      	cmp	r3, #64	; 0x40
 8009c4c:	d857      	bhi.n	8009cfe <USBD_StdDevReq+0xce>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00f      	beq.n	8009c72 <USBD_StdDevReq+0x42>
 8009c52:	2b20      	cmp	r3, #32
 8009c54:	d153      	bne.n	8009cfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	32ae      	adds	r2, #174	; 0xae
 8009c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	4798      	blx	r3
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c70:	e04a      	b.n	8009d08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	2b09      	cmp	r3, #9
 8009c78:	d83b      	bhi.n	8009cf2 <USBD_StdDevReq+0xc2>
 8009c7a:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <USBD_StdDevReq+0x50>)
 8009c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c80:	08009cd5 	.word	0x08009cd5
 8009c84:	08009ce9 	.word	0x08009ce9
 8009c88:	08009cf3 	.word	0x08009cf3
 8009c8c:	08009cdf 	.word	0x08009cdf
 8009c90:	08009cf3 	.word	0x08009cf3
 8009c94:	08009cb3 	.word	0x08009cb3
 8009c98:	08009ca9 	.word	0x08009ca9
 8009c9c:	08009cf3 	.word	0x08009cf3
 8009ca0:	08009ccb 	.word	0x08009ccb
 8009ca4:	08009cbd 	.word	0x08009cbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fa3c 	bl	800a128 <USBD_GetDescriptor>
          break;
 8009cb0:	e024      	b.n	8009cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009cb2:	6839      	ldr	r1, [r7, #0]
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 fbcb 	bl	800a450 <USBD_SetAddress>
          break;
 8009cba:	e01f      	b.n	8009cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fc0a 	bl	800a4d8 <USBD_SetConfig>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]
          break;
 8009cc8:	e018      	b.n	8009cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fcad 	bl	800a62c <USBD_GetConfig>
          break;
 8009cd2:	e013      	b.n	8009cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009cd4:	6839      	ldr	r1, [r7, #0]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fcde 	bl	800a698 <USBD_GetStatus>
          break;
 8009cdc:	e00e      	b.n	8009cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fd0d 	bl	800a700 <USBD_SetFeature>
          break;
 8009ce6:	e009      	b.n	8009cfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fd31 	bl	800a752 <USBD_ClrFeature>
          break;
 8009cf0:	e004      	b.n	8009cfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fd88 	bl	800a80a <USBD_CtlError>
          break;
 8009cfa:	bf00      	nop
      }
      break;
 8009cfc:	e004      	b.n	8009d08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fd82 	bl	800a80a <USBD_CtlError>
      break;
 8009d06:	bf00      	nop
  }

  return ret;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop

08009d14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d2a:	2b40      	cmp	r3, #64	; 0x40
 8009d2c:	d005      	beq.n	8009d3a <USBD_StdItfReq+0x26>
 8009d2e:	2b40      	cmp	r3, #64	; 0x40
 8009d30:	d852      	bhi.n	8009dd8 <USBD_StdItfReq+0xc4>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d001      	beq.n	8009d3a <USBD_StdItfReq+0x26>
 8009d36:	2b20      	cmp	r3, #32
 8009d38:	d14e      	bne.n	8009dd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d840      	bhi.n	8009dca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	889b      	ldrh	r3, [r3, #4]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d836      	bhi.n	8009dc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	889b      	ldrh	r3, [r3, #4]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7ff fed9 	bl	8009b12 <USBD_CoreFindIF>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	2bff      	cmp	r3, #255	; 0xff
 8009d68:	d01d      	beq.n	8009da6 <USBD_StdItfReq+0x92>
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d11a      	bne.n	8009da6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009d70:	7bba      	ldrb	r2, [r7, #14]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	32ae      	adds	r2, #174	; 0xae
 8009d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00f      	beq.n	8009da0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009d80:	7bba      	ldrb	r2, [r7, #14]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d88:	7bba      	ldrb	r2, [r7, #14]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	32ae      	adds	r2, #174	; 0xae
 8009d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	4798      	blx	r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d9e:	e004      	b.n	8009daa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009da0:	2303      	movs	r3, #3
 8009da2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009da4:	e001      	b.n	8009daa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009da6:	2303      	movs	r3, #3
 8009da8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	88db      	ldrh	r3, [r3, #6]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d110      	bne.n	8009dd4 <USBD_StdItfReq+0xc0>
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10d      	bne.n	8009dd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fdfd 	bl	800a9b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009dbe:	e009      	b.n	8009dd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fd21 	bl	800a80a <USBD_CtlError>
          break;
 8009dc8:	e004      	b.n	8009dd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fd1c 	bl	800a80a <USBD_CtlError>
          break;
 8009dd2:	e000      	b.n	8009dd6 <USBD_StdItfReq+0xc2>
          break;
 8009dd4:	bf00      	nop
      }
      break;
 8009dd6:	e004      	b.n	8009de2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 fd15 	bl	800a80a <USBD_CtlError>
      break;
 8009de0:	bf00      	nop
  }

  return ret;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	889b      	ldrh	r3, [r3, #4]
 8009dfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	d007      	beq.n	8009e1c <USBD_StdEPReq+0x30>
 8009e0c:	2b40      	cmp	r3, #64	; 0x40
 8009e0e:	f200 817f 	bhi.w	800a110 <USBD_StdEPReq+0x324>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d02a      	beq.n	8009e6c <USBD_StdEPReq+0x80>
 8009e16:	2b20      	cmp	r3, #32
 8009e18:	f040 817a 	bne.w	800a110 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7ff fe83 	bl	8009b2c <USBD_CoreFindEP>
 8009e26:	4603      	mov	r3, r0
 8009e28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e2a:	7b7b      	ldrb	r3, [r7, #13]
 8009e2c:	2bff      	cmp	r3, #255	; 0xff
 8009e2e:	f000 8174 	beq.w	800a11a <USBD_StdEPReq+0x32e>
 8009e32:	7b7b      	ldrb	r3, [r7, #13]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 8170 	bne.w	800a11a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009e3a:	7b7a      	ldrb	r2, [r7, #13]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009e42:	7b7a      	ldrb	r2, [r7, #13]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	32ae      	adds	r2, #174	; 0xae
 8009e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f000 8163 	beq.w	800a11a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009e54:	7b7a      	ldrb	r2, [r7, #13]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	32ae      	adds	r2, #174	; 0xae
 8009e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	4798      	blx	r3
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e6a:	e156      	b.n	800a11a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	785b      	ldrb	r3, [r3, #1]
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d008      	beq.n	8009e86 <USBD_StdEPReq+0x9a>
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	f300 8145 	bgt.w	800a104 <USBD_StdEPReq+0x318>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 809b 	beq.w	8009fb6 <USBD_StdEPReq+0x1ca>
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d03c      	beq.n	8009efe <USBD_StdEPReq+0x112>
 8009e84:	e13e      	b.n	800a104 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d002      	beq.n	8009e98 <USBD_StdEPReq+0xac>
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d016      	beq.n	8009ec4 <USBD_StdEPReq+0xd8>
 8009e96:	e02c      	b.n	8009ef2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00d      	beq.n	8009eba <USBD_StdEPReq+0xce>
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b80      	cmp	r3, #128	; 0x80
 8009ea2:	d00a      	beq.n	8009eba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f001 ff93 	bl	800bdd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eae:	2180      	movs	r1, #128	; 0x80
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f001 ff8f 	bl	800bdd4 <USBD_LL_StallEP>
 8009eb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009eb8:	e020      	b.n	8009efc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fca4 	bl	800a80a <USBD_CtlError>
              break;
 8009ec2:	e01b      	b.n	8009efc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	885b      	ldrh	r3, [r3, #2]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10e      	bne.n	8009eea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00b      	beq.n	8009eea <USBD_StdEPReq+0xfe>
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	2b80      	cmp	r3, #128	; 0x80
 8009ed6:	d008      	beq.n	8009eea <USBD_StdEPReq+0xfe>
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	88db      	ldrh	r3, [r3, #6]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d104      	bne.n	8009eea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f001 ff75 	bl	800bdd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fd64 	bl	800a9b8 <USBD_CtlSendStatus>

              break;
 8009ef0:	e004      	b.n	8009efc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ef2:	6839      	ldr	r1, [r7, #0]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fc88 	bl	800a80a <USBD_CtlError>
              break;
 8009efa:	bf00      	nop
          }
          break;
 8009efc:	e107      	b.n	800a10e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d002      	beq.n	8009f10 <USBD_StdEPReq+0x124>
 8009f0a:	2b03      	cmp	r3, #3
 8009f0c:	d016      	beq.n	8009f3c <USBD_StdEPReq+0x150>
 8009f0e:	e04b      	b.n	8009fa8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00d      	beq.n	8009f32 <USBD_StdEPReq+0x146>
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	2b80      	cmp	r3, #128	; 0x80
 8009f1a:	d00a      	beq.n	8009f32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 ff57 	bl	800bdd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f26:	2180      	movs	r1, #128	; 0x80
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 ff53 	bl	800bdd4 <USBD_LL_StallEP>
 8009f2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f30:	e040      	b.n	8009fb4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fc68 	bl	800a80a <USBD_CtlError>
              break;
 8009f3a:	e03b      	b.n	8009fb4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	885b      	ldrh	r3, [r3, #2]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d136      	bne.n	8009fb2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d004      	beq.n	8009f58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	4619      	mov	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f001 ff5d 	bl	800be12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fd2d 	bl	800a9b8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f5e:	7bbb      	ldrb	r3, [r7, #14]
 8009f60:	4619      	mov	r1, r3
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7ff fde2 	bl	8009b2c <USBD_CoreFindEP>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f6c:	7b7b      	ldrb	r3, [r7, #13]
 8009f6e:	2bff      	cmp	r3, #255	; 0xff
 8009f70:	d01f      	beq.n	8009fb2 <USBD_StdEPReq+0x1c6>
 8009f72:	7b7b      	ldrb	r3, [r7, #13]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d11c      	bne.n	8009fb2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009f78:	7b7a      	ldrb	r2, [r7, #13]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009f80:	7b7a      	ldrb	r2, [r7, #13]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	32ae      	adds	r2, #174	; 0xae
 8009f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d010      	beq.n	8009fb2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f90:	7b7a      	ldrb	r2, [r7, #13]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	32ae      	adds	r2, #174	; 0xae
 8009f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	4798      	blx	r3
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009fa6:	e004      	b.n	8009fb2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fc2d 	bl	800a80a <USBD_CtlError>
              break;
 8009fb0:	e000      	b.n	8009fb4 <USBD_StdEPReq+0x1c8>
              break;
 8009fb2:	bf00      	nop
          }
          break;
 8009fb4:	e0ab      	b.n	800a10e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d002      	beq.n	8009fc8 <USBD_StdEPReq+0x1dc>
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d032      	beq.n	800a02c <USBD_StdEPReq+0x240>
 8009fc6:	e097      	b.n	800a0f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d007      	beq.n	8009fde <USBD_StdEPReq+0x1f2>
 8009fce:	7bbb      	ldrb	r3, [r7, #14]
 8009fd0:	2b80      	cmp	r3, #128	; 0x80
 8009fd2:	d004      	beq.n	8009fde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fc17 	bl	800a80a <USBD_CtlError>
                break;
 8009fdc:	e091      	b.n	800a102 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	da0b      	bge.n	8009ffe <USBD_StdEPReq+0x212>
 8009fe6:	7bbb      	ldrb	r3, [r7, #14]
 8009fe8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	3310      	adds	r3, #16
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	3304      	adds	r3, #4
 8009ffc:	e00b      	b.n	800a016 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ffe:	7bbb      	ldrb	r3, [r7, #14]
 800a000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	4413      	add	r3, r2
 800a014:	3304      	adds	r3, #4
 800a016:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2202      	movs	r2, #2
 800a022:	4619      	mov	r1, r3
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fc6d 	bl	800a904 <USBD_CtlSendData>
              break;
 800a02a:	e06a      	b.n	800a102 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a02c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a030:	2b00      	cmp	r3, #0
 800a032:	da11      	bge.n	800a058 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a034:	7bbb      	ldrb	r3, [r7, #14]
 800a036:	f003 020f 	and.w	r2, r3, #15
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	4613      	mov	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	440b      	add	r3, r1
 800a046:	3324      	adds	r3, #36	; 0x24
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d117      	bne.n	800a07e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fbda 	bl	800a80a <USBD_CtlError>
                  break;
 800a056:	e054      	b.n	800a102 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	f003 020f 	and.w	r2, r3, #15
 800a05e:	6879      	ldr	r1, [r7, #4]
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d104      	bne.n	800a07e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fbc7 	bl	800a80a <USBD_CtlError>
                  break;
 800a07c:	e041      	b.n	800a102 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a07e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a082:	2b00      	cmp	r3, #0
 800a084:	da0b      	bge.n	800a09e <USBD_StdEPReq+0x2b2>
 800a086:	7bbb      	ldrb	r3, [r7, #14]
 800a088:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	3310      	adds	r3, #16
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	4413      	add	r3, r2
 800a09a:	3304      	adds	r3, #4
 800a09c:	e00b      	b.n	800a0b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3304      	adds	r3, #4
 800a0b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <USBD_StdEPReq+0x2d8>
 800a0be:	7bbb      	ldrb	r3, [r7, #14]
 800a0c0:	2b80      	cmp	r3, #128	; 0x80
 800a0c2:	d103      	bne.n	800a0cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	e00e      	b.n	800a0ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0cc:	7bbb      	ldrb	r3, [r7, #14]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f001 febd 	bl	800be50 <USBD_LL_IsStallEP>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	e002      	b.n	800a0ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fc07 	bl	800a904 <USBD_CtlSendData>
              break;
 800a0f6:	e004      	b.n	800a102 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fb85 	bl	800a80a <USBD_CtlError>
              break;
 800a100:	bf00      	nop
          }
          break;
 800a102:	e004      	b.n	800a10e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fb7f 	bl	800a80a <USBD_CtlError>
          break;
 800a10c:	bf00      	nop
      }
      break;
 800a10e:	e005      	b.n	800a11c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fb79 	bl	800a80a <USBD_CtlError>
      break;
 800a118:	e000      	b.n	800a11c <USBD_StdEPReq+0x330>
      break;
 800a11a:	bf00      	nop
  }

  return ret;
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	885b      	ldrh	r3, [r3, #2]
 800a142:	0a1b      	lsrs	r3, r3, #8
 800a144:	b29b      	uxth	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	2b0e      	cmp	r3, #14
 800a14a:	f200 8152 	bhi.w	800a3f2 <USBD_GetDescriptor+0x2ca>
 800a14e:	a201      	add	r2, pc, #4	; (adr r2, 800a154 <USBD_GetDescriptor+0x2c>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a1c5 	.word	0x0800a1c5
 800a158:	0800a1dd 	.word	0x0800a1dd
 800a15c:	0800a21d 	.word	0x0800a21d
 800a160:	0800a3f3 	.word	0x0800a3f3
 800a164:	0800a3f3 	.word	0x0800a3f3
 800a168:	0800a393 	.word	0x0800a393
 800a16c:	0800a3bf 	.word	0x0800a3bf
 800a170:	0800a3f3 	.word	0x0800a3f3
 800a174:	0800a3f3 	.word	0x0800a3f3
 800a178:	0800a3f3 	.word	0x0800a3f3
 800a17c:	0800a3f3 	.word	0x0800a3f3
 800a180:	0800a3f3 	.word	0x0800a3f3
 800a184:	0800a3f3 	.word	0x0800a3f3
 800a188:	0800a3f3 	.word	0x0800a3f3
 800a18c:	0800a191 	.word	0x0800a191
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00b      	beq.n	800a1b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	7c12      	ldrb	r2, [r2, #16]
 800a1a8:	f107 0108 	add.w	r1, r7, #8
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4798      	blx	r3
 800a1b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1b2:	e126      	b.n	800a402 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fb27 	bl	800a80a <USBD_CtlError>
        err++;
 800a1bc:	7afb      	ldrb	r3, [r7, #11]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	72fb      	strb	r3, [r7, #11]
      break;
 800a1c2:	e11e      	b.n	800a402 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f107 0108 	add.w	r1, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
      break;
 800a1da:	e112      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	7c1b      	ldrb	r3, [r3, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10d      	bne.n	800a200 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ec:	f107 0208 	add.w	r2, r7, #8
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	4798      	blx	r3
 800a1f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1fe:	e100      	b.n	800a402 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	f107 0208 	add.w	r2, r7, #8
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
 800a210:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3301      	adds	r3, #1
 800a216:	2202      	movs	r2, #2
 800a218:	701a      	strb	r2, [r3, #0]
      break;
 800a21a:	e0f2      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	885b      	ldrh	r3, [r3, #2]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b05      	cmp	r3, #5
 800a224:	f200 80ac 	bhi.w	800a380 <USBD_GetDescriptor+0x258>
 800a228:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <USBD_GetDescriptor+0x108>)
 800a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22e:	bf00      	nop
 800a230:	0800a249 	.word	0x0800a249
 800a234:	0800a27d 	.word	0x0800a27d
 800a238:	0800a2b1 	.word	0x0800a2b1
 800a23c:	0800a2e5 	.word	0x0800a2e5
 800a240:	0800a319 	.word	0x0800a319
 800a244:	0800a34d 	.word	0x0800a34d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00b      	beq.n	800a26c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	7c12      	ldrb	r2, [r2, #16]
 800a260:	f107 0108 	add.w	r1, r7, #8
 800a264:	4610      	mov	r0, r2
 800a266:	4798      	blx	r3
 800a268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a26a:	e091      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 facb 	bl	800a80a <USBD_CtlError>
            err++;
 800a274:	7afb      	ldrb	r3, [r7, #11]
 800a276:	3301      	adds	r3, #1
 800a278:	72fb      	strb	r3, [r7, #11]
          break;
 800a27a:	e089      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00b      	beq.n	800a2a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	7c12      	ldrb	r2, [r2, #16]
 800a294:	f107 0108 	add.w	r1, r7, #8
 800a298:	4610      	mov	r0, r2
 800a29a:	4798      	blx	r3
 800a29c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a29e:	e077      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fab1 	bl	800a80a <USBD_CtlError>
            err++;
 800a2a8:	7afb      	ldrb	r3, [r7, #11]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ae:	e06f      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00b      	beq.n	800a2d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	7c12      	ldrb	r2, [r2, #16]
 800a2c8:	f107 0108 	add.w	r1, r7, #8
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	4798      	blx	r3
 800a2d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2d2:	e05d      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2d4:	6839      	ldr	r1, [r7, #0]
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fa97 	bl	800a80a <USBD_CtlError>
            err++;
 800a2dc:	7afb      	ldrb	r3, [r7, #11]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2e2:	e055      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	7c12      	ldrb	r2, [r2, #16]
 800a2fc:	f107 0108 	add.w	r1, r7, #8
 800a300:	4610      	mov	r0, r2
 800a302:	4798      	blx	r3
 800a304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a306:	e043      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fa7d 	bl	800a80a <USBD_CtlError>
            err++;
 800a310:	7afb      	ldrb	r3, [r7, #11]
 800a312:	3301      	adds	r3, #1
 800a314:	72fb      	strb	r3, [r7, #11]
          break;
 800a316:	e03b      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00b      	beq.n	800a33c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	7c12      	ldrb	r2, [r2, #16]
 800a330:	f107 0108 	add.w	r1, r7, #8
 800a334:	4610      	mov	r0, r2
 800a336:	4798      	blx	r3
 800a338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a33a:	e029      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fa63 	bl	800a80a <USBD_CtlError>
            err++;
 800a344:	7afb      	ldrb	r3, [r7, #11]
 800a346:	3301      	adds	r3, #1
 800a348:	72fb      	strb	r3, [r7, #11]
          break;
 800a34a:	e021      	b.n	800a390 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00b      	beq.n	800a370 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	7c12      	ldrb	r2, [r2, #16]
 800a364:	f107 0108 	add.w	r1, r7, #8
 800a368:	4610      	mov	r0, r2
 800a36a:	4798      	blx	r3
 800a36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a36e:	e00f      	b.n	800a390 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa49 	bl	800a80a <USBD_CtlError>
            err++;
 800a378:	7afb      	ldrb	r3, [r7, #11]
 800a37a:	3301      	adds	r3, #1
 800a37c:	72fb      	strb	r3, [r7, #11]
          break;
 800a37e:	e007      	b.n	800a390 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fa41 	bl	800a80a <USBD_CtlError>
          err++;
 800a388:	7afb      	ldrb	r3, [r7, #11]
 800a38a:	3301      	adds	r3, #1
 800a38c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a38e:	bf00      	nop
      }
      break;
 800a390:	e037      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	7c1b      	ldrb	r3, [r3, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a2:	f107 0208 	add.w	r2, r7, #8
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	4798      	blx	r3
 800a3aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3ac:	e029      	b.n	800a402 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fa2a 	bl	800a80a <USBD_CtlError>
        err++;
 800a3b6:	7afb      	ldrb	r3, [r7, #11]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	72fb      	strb	r3, [r7, #11]
      break;
 800a3bc:	e021      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	7c1b      	ldrb	r3, [r3, #16]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10d      	bne.n	800a3e2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ce:	f107 0208 	add.w	r2, r7, #8
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	4798      	blx	r3
 800a3d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	2207      	movs	r2, #7
 800a3de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3e0:	e00f      	b.n	800a402 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fa10 	bl	800a80a <USBD_CtlError>
        err++;
 800a3ea:	7afb      	ldrb	r3, [r7, #11]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a3f0:	e007      	b.n	800a402 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fa08 	bl	800a80a <USBD_CtlError>
      err++;
 800a3fa:	7afb      	ldrb	r3, [r7, #11]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	72fb      	strb	r3, [r7, #11]
      break;
 800a400:	bf00      	nop
  }

  if (err != 0U)
 800a402:	7afb      	ldrb	r3, [r7, #11]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11e      	bne.n	800a446 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	88db      	ldrh	r3, [r3, #6]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d016      	beq.n	800a43e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a410:	893b      	ldrh	r3, [r7, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00e      	beq.n	800a434 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	88da      	ldrh	r2, [r3, #6]
 800a41a:	893b      	ldrh	r3, [r7, #8]
 800a41c:	4293      	cmp	r3, r2
 800a41e:	bf28      	it	cs
 800a420:	4613      	movcs	r3, r2
 800a422:	b29b      	uxth	r3, r3
 800a424:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a426:	893b      	ldrh	r3, [r7, #8]
 800a428:	461a      	mov	r2, r3
 800a42a:	68f9      	ldr	r1, [r7, #12]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fa69 	bl	800a904 <USBD_CtlSendData>
 800a432:	e009      	b.n	800a448 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a434:	6839      	ldr	r1, [r7, #0]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f9e7 	bl	800a80a <USBD_CtlError>
 800a43c:	e004      	b.n	800a448 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 faba 	bl	800a9b8 <USBD_CtlSendStatus>
 800a444:	e000      	b.n	800a448 <USBD_GetDescriptor+0x320>
    return;
 800a446:	bf00      	nop
  }
}
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop

0800a450 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	889b      	ldrh	r3, [r3, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d131      	bne.n	800a4c6 <USBD_SetAddress+0x76>
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	88db      	ldrh	r3, [r3, #6]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d12d      	bne.n	800a4c6 <USBD_SetAddress+0x76>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	885b      	ldrh	r3, [r3, #2]
 800a46e:	2b7f      	cmp	r3, #127	; 0x7f
 800a470:	d829      	bhi.n	800a4c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	885b      	ldrh	r3, [r3, #2]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b03      	cmp	r3, #3
 800a488:	d104      	bne.n	800a494 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f9bc 	bl	800a80a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a492:	e01d      	b.n	800a4d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	7bfa      	ldrb	r2, [r7, #15]
 800a498:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f001 fd01 	bl	800bea8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fa86 	bl	800a9b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d004      	beq.n	800a4bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ba:	e009      	b.n	800a4d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c4:	e004      	b.n	800a4d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f99e 	bl	800a80a <USBD_CtlError>
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	885b      	ldrh	r3, [r3, #2]
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	4b4e      	ldr	r3, [pc, #312]	; (800a628 <USBD_SetConfig+0x150>)
 800a4ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4f0:	4b4d      	ldr	r3, [pc, #308]	; (800a628 <USBD_SetConfig+0x150>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d905      	bls.n	800a504 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f985 	bl	800a80a <USBD_CtlError>
    return USBD_FAIL;
 800a500:	2303      	movs	r3, #3
 800a502:	e08c      	b.n	800a61e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d002      	beq.n	800a516 <USBD_SetConfig+0x3e>
 800a510:	2b03      	cmp	r3, #3
 800a512:	d029      	beq.n	800a568 <USBD_SetConfig+0x90>
 800a514:	e075      	b.n	800a602 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a516:	4b44      	ldr	r3, [pc, #272]	; (800a628 <USBD_SetConfig+0x150>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d020      	beq.n	800a560 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a51e:	4b42      	ldr	r3, [pc, #264]	; (800a628 <USBD_SetConfig+0x150>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a528:	4b3f      	ldr	r3, [pc, #252]	; (800a628 <USBD_SetConfig+0x150>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7fe ffb7 	bl	80094a2 <USBD_SetClassConfig>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a538:	7bfb      	ldrb	r3, [r7, #15]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d008      	beq.n	800a550 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f962 	bl	800a80a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2202      	movs	r2, #2
 800a54a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a54e:	e065      	b.n	800a61c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fa31 	bl	800a9b8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2203      	movs	r2, #3
 800a55a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a55e:	e05d      	b.n	800a61c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fa29 	bl	800a9b8 <USBD_CtlSendStatus>
      break;
 800a566:	e059      	b.n	800a61c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a568:	4b2f      	ldr	r3, [pc, #188]	; (800a628 <USBD_SetConfig+0x150>)
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d112      	bne.n	800a596 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2202      	movs	r2, #2
 800a574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a578:	4b2b      	ldr	r3, [pc, #172]	; (800a628 <USBD_SetConfig+0x150>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a582:	4b29      	ldr	r3, [pc, #164]	; (800a628 <USBD_SetConfig+0x150>)
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	4619      	mov	r1, r3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7fe ffa6 	bl	80094da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fa12 	bl	800a9b8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a594:	e042      	b.n	800a61c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a596:	4b24      	ldr	r3, [pc, #144]	; (800a628 <USBD_SetConfig+0x150>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d02a      	beq.n	800a5fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7fe ff94 	bl	80094da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a5b2:	4b1d      	ldr	r3, [pc, #116]	; (800a628 <USBD_SetConfig+0x150>)
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a5bc:	4b1a      	ldr	r3, [pc, #104]	; (800a628 <USBD_SetConfig+0x150>)
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7fe ff6d 	bl	80094a2 <USBD_SetClassConfig>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00f      	beq.n	800a5f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f918 	bl	800a80a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7fe ff79 	bl	80094da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a5f0:	e014      	b.n	800a61c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f9e0 	bl	800a9b8 <USBD_CtlSendStatus>
      break;
 800a5f8:	e010      	b.n	800a61c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f9dc 	bl	800a9b8 <USBD_CtlSendStatus>
      break;
 800a600:	e00c      	b.n	800a61c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f900 	bl	800a80a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a60a:	4b07      	ldr	r3, [pc, #28]	; (800a628 <USBD_SetConfig+0x150>)
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	4619      	mov	r1, r3
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7fe ff62 	bl	80094da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a616:	2303      	movs	r3, #3
 800a618:	73fb      	strb	r3, [r7, #15]
      break;
 800a61a:	bf00      	nop
  }

  return ret;
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20000370 	.word	0x20000370

0800a62c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	88db      	ldrh	r3, [r3, #6]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d004      	beq.n	800a648 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f8e2 	bl	800a80a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a646:	e023      	b.n	800a690 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b02      	cmp	r3, #2
 800a652:	dc02      	bgt.n	800a65a <USBD_GetConfig+0x2e>
 800a654:	2b00      	cmp	r3, #0
 800a656:	dc03      	bgt.n	800a660 <USBD_GetConfig+0x34>
 800a658:	e015      	b.n	800a686 <USBD_GetConfig+0x5a>
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d00b      	beq.n	800a676 <USBD_GetConfig+0x4a>
 800a65e:	e012      	b.n	800a686 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	3308      	adds	r3, #8
 800a66a:	2201      	movs	r2, #1
 800a66c:	4619      	mov	r1, r3
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f948 	bl	800a904 <USBD_CtlSendData>
        break;
 800a674:	e00c      	b.n	800a690 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3304      	adds	r3, #4
 800a67a:	2201      	movs	r2, #1
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f940 	bl	800a904 <USBD_CtlSendData>
        break;
 800a684:	e004      	b.n	800a690 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f8be 	bl	800a80a <USBD_CtlError>
        break;
 800a68e:	bf00      	nop
}
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d81e      	bhi.n	800a6ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	88db      	ldrh	r3, [r3, #6]
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d004      	beq.n	800a6c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f8a5 	bl	800a80a <USBD_CtlError>
        break;
 800a6c0:	e01a      	b.n	800a6f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d005      	beq.n	800a6de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f043 0202 	orr.w	r2, r3, #2
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	330c      	adds	r3, #12
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f90c 	bl	800a904 <USBD_CtlSendData>
      break;
 800a6ec:	e004      	b.n	800a6f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f88a 	bl	800a80a <USBD_CtlError>
      break;
 800a6f6:	bf00      	nop
  }
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	885b      	ldrh	r3, [r3, #2]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d107      	bne.n	800a722 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f94c 	bl	800a9b8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a720:	e013      	b.n	800a74a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	885b      	ldrh	r3, [r3, #2]
 800a726:	2b02      	cmp	r3, #2
 800a728:	d10b      	bne.n	800a742 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	889b      	ldrh	r3, [r3, #4]
 800a72e:	0a1b      	lsrs	r3, r3, #8
 800a730:	b29b      	uxth	r3, r3
 800a732:	b2da      	uxtb	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f93c 	bl	800a9b8 <USBD_CtlSendStatus>
}
 800a740:	e003      	b.n	800a74a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f860 	bl	800a80a <USBD_CtlError>
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a762:	b2db      	uxtb	r3, r3
 800a764:	3b01      	subs	r3, #1
 800a766:	2b02      	cmp	r3, #2
 800a768:	d80b      	bhi.n	800a782 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	885b      	ldrh	r3, [r3, #2]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d10c      	bne.n	800a78c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f91c 	bl	800a9b8 <USBD_CtlSendStatus>
      }
      break;
 800a780:	e004      	b.n	800a78c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f840 	bl	800a80a <USBD_CtlError>
      break;
 800a78a:	e000      	b.n	800a78e <USBD_ClrFeature+0x3c>
      break;
 800a78c:	bf00      	nop
  }
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b084      	sub	sp, #16
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	781a      	ldrb	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	781a      	ldrb	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff fa17 	bl	8009bf4 <SWAPBYTE>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7ff fa0a 	bl	8009bf4 <SWAPBYTE>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f7ff f9fd 	bl	8009bf4 <SWAPBYTE>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	80da      	strh	r2, [r3, #6]
}
 800a802:	bf00      	nop
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a814:	2180      	movs	r1, #128	; 0x80
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 fadc 	bl	800bdd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a81c:	2100      	movs	r1, #0
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 fad8 	bl	800bdd4 <USBD_LL_StallEP>
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d042      	beq.n	800a8c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a846:	6938      	ldr	r0, [r7, #16]
 800a848:	f000 f842 	bl	800a8d0 <USBD_GetLen>
 800a84c:	4603      	mov	r3, r0
 800a84e:	3301      	adds	r3, #1
 800a850:	005b      	lsls	r3, r3, #1
 800a852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a856:	d808      	bhi.n	800a86a <USBD_GetString+0x3e>
 800a858:	6938      	ldr	r0, [r7, #16]
 800a85a:	f000 f839 	bl	800a8d0 <USBD_GetLen>
 800a85e:	4603      	mov	r3, r0
 800a860:	3301      	adds	r3, #1
 800a862:	b29b      	uxth	r3, r3
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	b29a      	uxth	r2, r3
 800a868:	e001      	b.n	800a86e <USBD_GetString+0x42>
 800a86a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	68ba      	ldr	r2, [r7, #8]
 800a876:	4413      	add	r3, r2
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	7812      	ldrb	r2, [r2, #0]
 800a87c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a87e:	7dfb      	ldrb	r3, [r7, #23]
 800a880:	3301      	adds	r3, #1
 800a882:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a884:	7dfb      	ldrb	r3, [r7, #23]
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	4413      	add	r3, r2
 800a88a:	2203      	movs	r2, #3
 800a88c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a88e:	7dfb      	ldrb	r3, [r7, #23]
 800a890:	3301      	adds	r3, #1
 800a892:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a894:	e013      	b.n	800a8be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a896:	7dfb      	ldrb	r3, [r7, #23]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	4413      	add	r3, r2
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	7812      	ldrb	r2, [r2, #0]
 800a8a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	613b      	str	r3, [r7, #16]
    idx++;
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a8ae:	7dfb      	ldrb	r3, [r7, #23]
 800a8b0:	68ba      	ldr	r2, [r7, #8]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d1e7      	bne.n	800a896 <USBD_GetString+0x6a>
 800a8c6:	e000      	b.n	800a8ca <USBD_GetString+0x9e>
    return;
 800a8c8:	bf00      	nop
  }
}
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a8e0:	e005      	b.n	800a8ee <USBD_GetLen+0x1e>
  {
    len++;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1f5      	bne.n	800a8e2 <USBD_GetLen+0x12>
  }

  return len;
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2202      	movs	r2, #2
 800a914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	2100      	movs	r1, #0
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f001 fadb 	bl	800bee6 <USBD_LL_Transmit>

  return USBD_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68ba      	ldr	r2, [r7, #8]
 800a94a:	2100      	movs	r1, #0
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f001 faca 	bl	800bee6 <USBD_LL_Transmit>

  return USBD_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2203      	movs	r2, #3
 800a96c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	2100      	movs	r1, #0
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f001 face 	bl	800bf28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f001 fabd 	bl	800bf28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2204      	movs	r2, #4
 800a9c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f001 fa89 	bl	800bee6 <USBD_LL_Transmit>

  return USBD_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3708      	adds	r7, #8
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2205      	movs	r2, #5
 800a9ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 fa97 	bl	800bf28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <delayInit>:
#include <API_delay.h>
#include <stm32f4xx_hal.h>

void delayInit(delay_t* delay, tick_t duration){
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
	assert(delay);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d105      	bne.n	800aa20 <delayInit+0x1c>
 800aa14:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <delayInit+0x3c>)
 800aa16:	4a0b      	ldr	r2, [pc, #44]	; (800aa44 <delayInit+0x40>)
 800aa18:	2105      	movs	r1, #5
 800aa1a:	480b      	ldr	r0, [pc, #44]	; (800aa48 <delayInit+0x44>)
 800aa1c:	f001 fb4a 	bl	800c0b4 <__assert_func>

	delay->startTime = HAL_GetTick();
 800aa20:	f7f6 fbaa 	bl	8001178 <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	609a      	str	r2, [r3, #8]
}
 800aa36:	bf00      	nop
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	0800d3dc 	.word	0x0800d3dc
 800aa44:	0800d728 	.word	0x0800d728
 800aa48:	0800d3e4 	.word	0x0800d3e4

0800aa4c <delayRead>:

bool_t delayRead(delay_t* delay){
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
	assert(delay);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d105      	bne.n	800aa66 <delayRead+0x1a>
 800aa5a:	4b16      	ldr	r3, [pc, #88]	; (800aab4 <delayRead+0x68>)
 800aa5c:	4a16      	ldr	r2, [pc, #88]	; (800aab8 <delayRead+0x6c>)
 800aa5e:	210d      	movs	r1, #13
 800aa60:	4816      	ldr	r0, [pc, #88]	; (800aabc <delayRead+0x70>)
 800aa62:	f001 fb27 	bl	800c0b4 <__assert_func>

	tick_t Current_time = HAL_GetTick();
 800aa66:	f7f6 fb87 	bl	8001178 <HAL_GetTick>
 800aa6a:	60b8      	str	r0, [r7, #8]
	bool_t Done = false;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	73fb      	strb	r3, [r7, #15]

	if(!delay->running){
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d106      	bne.n	800aa86 <delayRead+0x3a>
		delay->startTime = Current_time;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	601a      	str	r2, [r3, #0]
		delay->running = true;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	609a      	str	r2, [r3, #8]
 800aa84:	e011      	b.n	800aaaa <delayRead+0x5e>
	}else{
		// Done is TRUE when the duration has elapsed
		// Done is FALSE when theres time remaining
		Done = (Current_time - delay->startTime) >= delay->duration;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	1ad2      	subs	r2, r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	bf2c      	ite	cs
 800aa96:	2301      	movcs	r3, #1
 800aa98:	2300      	movcc	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]
		// If it's done, it should stop running
		delay->running = !Done;
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	f083 0301 	eor.w	r3, r3, #1
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	609a      	str	r2, [r3, #8]
	}
	return Done;
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	0800d3dc 	.word	0x0800d3dc
 800aab8:	0800d734 	.word	0x0800d734
 800aabc:	0800d3e4 	.word	0x0800d3e4

0800aac0 <app_entry_point>:
 * @brief Entry point for the application.
 *
 * This function implements the main loop of the state machine.
 */
void app_entry_point(void)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	af00      	add	r7, sp, #0
    application_state = INITIALIZING;
 800aac4:	4b15      	ldr	r3, [pc, #84]	; (800ab1c <app_entry_point+0x5c>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (application_state) {
 800aaca:	4b14      	ldr	r3, [pc, #80]	; (800ab1c <app_entry_point+0x5c>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b05      	cmp	r3, #5
 800aad0:	d820      	bhi.n	800ab14 <app_entry_point+0x54>
 800aad2:	a201      	add	r2, pc, #4	; (adr r2, 800aad8 <app_entry_point+0x18>)
 800aad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad8:	0800aaf1 	.word	0x0800aaf1
 800aadc:	0800aaf7 	.word	0x0800aaf7
 800aae0:	0800aafd 	.word	0x0800aafd
 800aae4:	0800ab03 	.word	0x0800ab03
 800aae8:	0800ab09 	.word	0x0800ab09
 800aaec:	0800ab0f 	.word	0x0800ab0f
            case INITIALIZING:
                on_initializing();
 800aaf0:	f000 f816 	bl	800ab20 <on_initializing>
                break;
 800aaf4:	e011      	b.n	800ab1a <app_entry_point+0x5a>
            case IDLE:
                on_idle();
 800aaf6:	f000 f83f 	bl	800ab78 <on_idle>
                break;
 800aafa:	e00e      	b.n	800ab1a <app_entry_point+0x5a>
            case MONITORING:
                on_monitoring();
 800aafc:	f000 f86c 	bl	800abd8 <on_monitoring>
                break;
 800ab00:	e00b      	b.n	800ab1a <app_entry_point+0x5a>
            case LOGGING:
                on_logging();
 800ab02:	f000 f88d 	bl	800ac20 <on_logging>
                break;
 800ab06:	e008      	b.n	800ab1a <app_entry_point+0x5a>
            case USB_COMMAND:
                on_usb_command();
 800ab08:	f000 f896 	bl	800ac38 <on_usb_command>
                break;
 800ab0c:	e005      	b.n	800ab1a <app_entry_point+0x5a>
            case SECURITY:
                on_security();
 800ab0e:	f000 f943 	bl	800ad98 <on_security>
                break;
 800ab12:	e002      	b.n	800ab1a <app_entry_point+0x5a>
            case APP_ERROR:
            default:
                on_app_error();
 800ab14:	f000 f9b0 	bl	800ae78 <on_app_error>
                break;
 800ab18:	bf00      	nop
        switch (application_state) {
 800ab1a:	e7d6      	b.n	800aaca <app_entry_point+0xa>
 800ab1c:	20000380 	.word	0x20000380

0800ab20 <on_initializing>:
 *
 * Initializes all necessary modules and peripherals (e.g., button, mic, OLED, SD, USB).
 * After the initialization completes, transitions to IDLE state.
 */
static void on_initializing(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	af00      	add	r7, sp, #0
    // Initialize the button driver (debouncing state machine and HAL interface)
    button_init();
 800ab24:	f000 f9f8 	bl	800af18 <button_init>

    usb_cdc_init();
 800ab28:	f000 fb24 	bl	800b174 <usb_cdc_init>

    debug_uart_init();
 800ab2c:	f000 faf8 	bl	800b120 <debug_uart_init>
    debug_uart_print("App initialized\r\n");
 800ab30:	480b      	ldr	r0, [pc, #44]	; (800ab60 <on_initializing+0x40>)
 800ab32:	f000 fafd 	bl	800b130 <debug_uart_print>
    rfid_init();
 800ab36:	f000 fa8b 	bl	800b050 <rfid_init>
    // TODO: Initialize other drivers (mic, oled, SD, USB, etc.)
    // kick off the timer so it will fire at 64 Hz
    HAL_TIM_Base_Start(&htim2);
 800ab3a:	480a      	ldr	r0, [pc, #40]	; (800ab64 <on_initializing+0x44>)
 800ab3c:	f7fb f96e 	bl	8005e1c <HAL_TIM_Base_Start>

    // start ADC in circular‑DMA — now each TIM2 TRGO will fire one conversion
    HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_dma_buffer,ADC_BUFFER_SIZE);
 800ab40:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab44:	4908      	ldr	r1, [pc, #32]	; (800ab68 <on_initializing+0x48>)
 800ab46:	4809      	ldr	r0, [pc, #36]	; (800ab6c <on_initializing+0x4c>)
 800ab48:	f7f6 fb8a 	bl	8001260 <HAL_ADC_Start_DMA>
    // Once all peripheral initialization is completed, transition to IDLE.
    delayInit(&delay_monitor, 500);
 800ab4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ab50:	4807      	ldr	r0, [pc, #28]	; (800ab70 <on_initializing+0x50>)
 800ab52:	f7ff ff57 	bl	800aa04 <delayInit>
    application_state = IDLE;
 800ab56:	4b07      	ldr	r3, [pc, #28]	; (800ab74 <on_initializing+0x54>)
 800ab58:	2201      	movs	r2, #1
 800ab5a:	701a      	strb	r2, [r3, #0]
}
 800ab5c:	bf00      	nop
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	0800d404 	.word	0x0800d404
 800ab64:	200002d8 	.word	0x200002d8
 800ab68:	20000388 	.word	0x20000388
 800ab6c:	20000184 	.word	0x20000184
 800ab70:	20000374 	.word	0x20000374
 800ab74:	20000380 	.word	0x20000380

0800ab78 <on_idle>:
 * In the IDLE state, the system polls the button and listens for USB commands.
 * When a complete button press (press-release) is detected, the state transitions
 * to RECORDING.
 */
static void on_idle(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
	    // ─── catch the DMA flag first ───
    if (delayRead(&delay_monitor)) {
 800ab7c:	4811      	ldr	r0, [pc, #68]	; (800abc4 <on_idle+0x4c>)
 800ab7e:	f7ff ff65 	bl	800aa4c <delayRead>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d006      	beq.n	800ab96 <on_idle+0x1e>
	    debug_uart_print("MONITORING\r\n");
 800ab88:	480f      	ldr	r0, [pc, #60]	; (800abc8 <on_idle+0x50>)
 800ab8a:	f000 fad1 	bl	800b130 <debug_uart_print>
	    application_state = MONITORING;
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <on_idle+0x54>)
 800ab90:	2202      	movs	r2, #2
 800ab92:	701a      	strb	r2, [r3, #0]
	    return;             // don’t run the rest of IDLE
 800ab94:	e015      	b.n	800abc2 <on_idle+0x4a>
    }
    // Update the button's debounce logic
    button_update();
 800ab96:	f000 f9df 	bl	800af58 <button_update>

    // Process any button event as needed (e.g., button press triggers recording)
    if (button_was_pressed()) {
 800ab9a:	f000 fa45 	bl	800b028 <button_was_pressed>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d003      	beq.n	800abac <on_idle+0x34>
        // For demonstration, toggle LED to indicate button event.
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800aba4:	2120      	movs	r1, #32
 800aba6:	480a      	ldr	r0, [pc, #40]	; (800abd0 <on_idle+0x58>)
 800aba8:	f7f7 fe07 	bl	80027ba <HAL_GPIO_TogglePin>
        // Optionally, transition to another state:
        // application_state = RECORDING;
    }

    // Poll USB CDC for a complete command
    if (usb_cdc_isCommandPending()) {
 800abac:	f000 fb3c 	bl	800b228 <usb_cdc_isCommandPending>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <on_idle+0x4a>
    	debug_uart_print("COMMAND PENDING\r\n");
 800abb6:	4807      	ldr	r0, [pc, #28]	; (800abd4 <on_idle+0x5c>)
 800abb8:	f000 faba 	bl	800b130 <debug_uart_print>
        // Transition to the USB_COMMAND state for processing the command.
        application_state = USB_COMMAND;
 800abbc:	4b03      	ldr	r3, [pc, #12]	; (800abcc <on_idle+0x54>)
 800abbe:	2204      	movs	r2, #4
 800abc0:	701a      	strb	r2, [r3, #0]
    }

}
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	20000374 	.word	0x20000374
 800abc8:	0800d418 	.word	0x0800d418
 800abcc:	20000380 	.word	0x20000380
 800abd0:	40020000 	.word	0x40020000
 800abd4:	0800d428 	.word	0x0800d428

0800abd8 <on_monitoring>:
 *
 * After the recording is stopped (either by fixed duration or button press),
 * the state transitions to PROCESSING.
 */
static void on_monitoring(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b090      	sub	sp, #64	; 0x40
 800abdc:	af00      	add	r7, sp, #0
    // Read the precomputed envelope
    char msg[64];
    sprintf(msg, "ENV = %u counts\r\n", envelope);
 800abde:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <on_monitoring+0x38>)
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	461a      	mov	r2, r3
 800abe6:	463b      	mov	r3, r7
 800abe8:	490a      	ldr	r1, [pc, #40]	; (800ac14 <on_monitoring+0x3c>)
 800abea:	4618      	mov	r0, r3
 800abec:	f001 fb54 	bl	800c298 <siprintf>
    debug_uart_print(msg);
 800abf0:	463b      	mov	r3, r7
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fa9c 	bl	800b130 <debug_uart_print>

    // Restart the 500 ms timer
    delayInit(&delay_monitor, 500);
 800abf8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800abfc:	4806      	ldr	r0, [pc, #24]	; (800ac18 <on_monitoring+0x40>)
 800abfe:	f7ff ff01 	bl	800aa04 <delayInit>
    application_state = IDLE;
 800ac02:	4b06      	ldr	r3, [pc, #24]	; (800ac1c <on_monitoring+0x44>)
 800ac04:	2201      	movs	r2, #1
 800ac06:	701a      	strb	r2, [r3, #0]
}
 800ac08:	bf00      	nop
 800ac0a:	3740      	adds	r7, #64	; 0x40
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	20000588 	.word	0x20000588
 800ac14:	0800d43c 	.word	0x0800d43c
 800ac18:	20000374 	.word	0x20000374
 800ac1c:	20000380 	.word	0x20000380

0800ac20 <on_logging>:
 *
 * In this state, the recorded audio data (from RAM) is saved to the SD card using SPI + FatFs.
 * Once the data is saved, the system transitions back to the IDLE state.
 */
static void on_logging(void)
{
 800ac20:	b480      	push	{r7}
 800ac22:	af00      	add	r7, sp, #0
    // TODO: Implement saving of audio data to the SD card.

    // After processing, return to the IDLE state.
    application_state = IDLE;
 800ac24:	4b03      	ldr	r3, [pc, #12]	; (800ac34 <on_logging+0x14>)
 800ac26:	2201      	movs	r2, #1
 800ac28:	701a      	strb	r2, [r3, #0]
}
 800ac2a:	bf00      	nop
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	20000380 	.word	0x20000380

0800ac38 <on_usb_command>:
 * @brief Handles the USB_COMMAND state.
 *
 * Processes USB CDC commands (e.g., list files, send file, delete file).
 * After executing a command, the state transitions back to the IDLE state.
 */
void on_usb_command(void) {
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
    const char* cmd = usb_cdc_getCommand();
 800ac3e:	f000 faff 	bl	800b240 <usb_cdc_getCommand>
 800ac42:	6078      	str	r0, [r7, #4]

    // --- Si estamos esperando validación RFID ---
    if (sec_request.pending) {
 800ac44:	4b43      	ldr	r3, [pc, #268]	; (800ad54 <on_usb_command+0x11c>)
 800ac46:	789b      	ldrb	r3, [r3, #2]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d003      	beq.n	800ac54 <on_usb_command+0x1c>
        debug_uart_print("COMMAND PENDING\r\n");
 800ac4c:	4842      	ldr	r0, [pc, #264]	; (800ad58 <on_usb_command+0x120>)
 800ac4e:	f000 fa6f 	bl	800b130 <debug_uart_print>
        return; // NO BORRAR COMANDO TODAVÍA, esperá a resolver SECURITY
 800ac52:	e07c      	b.n	800ad4e <on_usb_command+0x116>
    }

    // --- Si SECURITY ya resolvió una solicitud anterior ---
    if (sec_request.action != SECURITY_NONE) {
 800ac54:	4b3f      	ldr	r3, [pc, #252]	; (800ad54 <on_usb_command+0x11c>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d025      	beq.n	800aca8 <on_usb_command+0x70>
        if (sec_request.result) {
 800ac5c:	4b3d      	ldr	r3, [pc, #244]	; (800ad54 <on_usb_command+0x11c>)
 800ac5e:	785b      	ldrb	r3, [r3, #1]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d012      	beq.n	800ac8a <on_usb_command+0x52>
            if (sec_request.action == SECURITY_AUTHENTICATE) {
 800ac64:	4b3b      	ldr	r3, [pc, #236]	; (800ad54 <on_usb_command+0x11c>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d106      	bne.n	800ac7a <on_usb_command+0x42>
                debug_uart_print("RFID autorizado correctamente para cambiar threshold\r\n");
 800ac6c:	483b      	ldr	r0, [pc, #236]	; (800ad5c <on_usb_command+0x124>)
 800ac6e:	f000 fa5f 	bl	800b130 <debug_uart_print>
                debug_uart_print("Nuevo threshold aplicado (simulado)\r\n");
 800ac72:	483b      	ldr	r0, [pc, #236]	; (800ad60 <on_usb_command+0x128>)
 800ac74:	f000 fa5c 	bl	800b130 <debug_uart_print>
 800ac78:	e00a      	b.n	800ac90 <on_usb_command+0x58>
            } else if (sec_request.action == SECURITY_REGISTER) {
 800ac7a:	4b36      	ldr	r3, [pc, #216]	; (800ad54 <on_usb_command+0x11c>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d106      	bne.n	800ac90 <on_usb_command+0x58>
                debug_uart_print("Tarjeta registrada correctamente\r\n");
 800ac82:	4838      	ldr	r0, [pc, #224]	; (800ad64 <on_usb_command+0x12c>)
 800ac84:	f000 fa54 	bl	800b130 <debug_uart_print>
 800ac88:	e002      	b.n	800ac90 <on_usb_command+0x58>
            }
        } else {
            debug_uart_print("Acción cancelada: RFID no autorizado\r\n");
 800ac8a:	4837      	ldr	r0, [pc, #220]	; (800ad68 <on_usb_command+0x130>)
 800ac8c:	f000 fa50 	bl	800b130 <debug_uart_print>
        }

        sec_request.action = SECURITY_NONE;
 800ac90:	4b30      	ldr	r3, [pc, #192]	; (800ad54 <on_usb_command+0x11c>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	701a      	strb	r2, [r3, #0]
        sec_request.pending = false;
 800ac96:	4b2f      	ldr	r3, [pc, #188]	; (800ad54 <on_usb_command+0x11c>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	709a      	strb	r2, [r3, #2]
        application_state = IDLE;
 800ac9c:	4b33      	ldr	r3, [pc, #204]	; (800ad6c <on_usb_command+0x134>)
 800ac9e:	2201      	movs	r2, #1
 800aca0:	701a      	strb	r2, [r3, #0]
        usb_cdc_clearCommand();
 800aca2:	f000 fad7 	bl	800b254 <usb_cdc_clearCommand>
        return;
 800aca6:	e052      	b.n	800ad4e <on_usb_command+0x116>
    }

    // --- Procesar comando recibido ---
    if (strcmp(cmd, USB_CMD_LED_ON) == 0) {
 800aca8:	4931      	ldr	r1, [pc, #196]	; (800ad70 <on_usb_command+0x138>)
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7f5 fab0 	bl	8000210 <strcmp>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10b      	bne.n	800acce <on_usb_command+0x96>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800acb6:	2201      	movs	r2, #1
 800acb8:	2120      	movs	r1, #32
 800acba:	482e      	ldr	r0, [pc, #184]	; (800ad74 <on_usb_command+0x13c>)
 800acbc:	f7f7 fd64 	bl	8002788 <HAL_GPIO_WritePin>
        debug_uart_print("LED encendido\r\n");
 800acc0:	482d      	ldr	r0, [pc, #180]	; (800ad78 <on_usb_command+0x140>)
 800acc2:	f000 fa35 	bl	800b130 <debug_uart_print>
        application_state = IDLE;
 800acc6:	4b29      	ldr	r3, [pc, #164]	; (800ad6c <on_usb_command+0x134>)
 800acc8:	2201      	movs	r2, #1
 800acca:	701a      	strb	r2, [r3, #0]
 800accc:	e03d      	b.n	800ad4a <on_usb_command+0x112>

    } else if (strcmp(cmd, USB_CMD_LED_OFF) == 0) {
 800acce:	492b      	ldr	r1, [pc, #172]	; (800ad7c <on_usb_command+0x144>)
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7f5 fa9d 	bl	8000210 <strcmp>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10b      	bne.n	800acf4 <on_usb_command+0xbc>
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800acdc:	2200      	movs	r2, #0
 800acde:	2120      	movs	r1, #32
 800ace0:	4824      	ldr	r0, [pc, #144]	; (800ad74 <on_usb_command+0x13c>)
 800ace2:	f7f7 fd51 	bl	8002788 <HAL_GPIO_WritePin>
        debug_uart_print("LED apagado\r\n");
 800ace6:	4826      	ldr	r0, [pc, #152]	; (800ad80 <on_usb_command+0x148>)
 800ace8:	f000 fa22 	bl	800b130 <debug_uart_print>
        application_state = IDLE;
 800acec:	4b1f      	ldr	r3, [pc, #124]	; (800ad6c <on_usb_command+0x134>)
 800acee:	2201      	movs	r2, #1
 800acf0:	701a      	strb	r2, [r3, #0]
 800acf2:	e02a      	b.n	800ad4a <on_usb_command+0x112>

    } else if (strcmp(cmd, USB_CMD_CHANGE_THRESHOLD) == 0) {
 800acf4:	4923      	ldr	r1, [pc, #140]	; (800ad84 <on_usb_command+0x14c>)
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7f5 fa8a 	bl	8000210 <strcmp>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10c      	bne.n	800ad1c <on_usb_command+0xe4>
        debug_uart_print("Requiere autenticación para cambiar threshold\r\n");
 800ad02:	4821      	ldr	r0, [pc, #132]	; (800ad88 <on_usb_command+0x150>)
 800ad04:	f000 fa14 	bl	800b130 <debug_uart_print>
        sec_request.action = SECURITY_AUTHENTICATE;
 800ad08:	4b12      	ldr	r3, [pc, #72]	; (800ad54 <on_usb_command+0x11c>)
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	701a      	strb	r2, [r3, #0]
        sec_request.pending = true;
 800ad0e:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <on_usb_command+0x11c>)
 800ad10:	2201      	movs	r2, #1
 800ad12:	709a      	strb	r2, [r3, #2]
        application_state = SECURITY;
 800ad14:	4b15      	ldr	r3, [pc, #84]	; (800ad6c <on_usb_command+0x134>)
 800ad16:	2205      	movs	r2, #5
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	e016      	b.n	800ad4a <on_usb_command+0x112>

    } else if (strcmp(cmd, USB_COMMAND_REGISTER_RFID) == 0) {
 800ad1c:	491b      	ldr	r1, [pc, #108]	; (800ad8c <on_usb_command+0x154>)
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7f5 fa76 	bl	8000210 <strcmp>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10c      	bne.n	800ad44 <on_usb_command+0x10c>
        debug_uart_print("Registrar tarjeta\r\n");
 800ad2a:	4819      	ldr	r0, [pc, #100]	; (800ad90 <on_usb_command+0x158>)
 800ad2c:	f000 fa00 	bl	800b130 <debug_uart_print>
        sec_request.action = SECURITY_REGISTER;
 800ad30:	4b08      	ldr	r3, [pc, #32]	; (800ad54 <on_usb_command+0x11c>)
 800ad32:	2201      	movs	r2, #1
 800ad34:	701a      	strb	r2, [r3, #0]
        sec_request.pending = true;
 800ad36:	4b07      	ldr	r3, [pc, #28]	; (800ad54 <on_usb_command+0x11c>)
 800ad38:	2201      	movs	r2, #1
 800ad3a:	709a      	strb	r2, [r3, #2]
        application_state = SECURITY;
 800ad3c:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <on_usb_command+0x134>)
 800ad3e:	2205      	movs	r2, #5
 800ad40:	701a      	strb	r2, [r3, #0]
 800ad42:	e002      	b.n	800ad4a <on_usb_command+0x112>

    } else {
        debug_uart_print("Comando desconocido\r\n");
 800ad44:	4813      	ldr	r0, [pc, #76]	; (800ad94 <on_usb_command+0x15c>)
 800ad46:	f000 f9f3 	bl	800b130 <debug_uart_print>
    }

    usb_cdc_clearCommand();
 800ad4a:	f000 fa83 	bl	800b254 <usb_cdc_clearCommand>
}
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	20000384 	.word	0x20000384
 800ad58:	0800d428 	.word	0x0800d428
 800ad5c:	0800d450 	.word	0x0800d450
 800ad60:	0800d488 	.word	0x0800d488
 800ad64:	0800d4b0 	.word	0x0800d4b0
 800ad68:	0800d4d4 	.word	0x0800d4d4
 800ad6c:	20000380 	.word	0x20000380
 800ad70:	0800d4fc 	.word	0x0800d4fc
 800ad74:	40020000 	.word	0x40020000
 800ad78:	0800d504 	.word	0x0800d504
 800ad7c:	0800d514 	.word	0x0800d514
 800ad80:	0800d51c 	.word	0x0800d51c
 800ad84:	0800d52c 	.word	0x0800d52c
 800ad88:	0800d534 	.word	0x0800d534
 800ad8c:	0800d568 	.word	0x0800d568
 800ad90:	0800d574 	.word	0x0800d574
 800ad94:	0800d588 	.word	0x0800d588

0800ad98 <on_security>:


void on_security(void) {
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
	    // Si no hay pedido pendiente, salir
	    if (!sec_request.pending) {
 800ad9e:	4b2f      	ldr	r3, [pc, #188]	; (800ae5c <on_security+0xc4>)
 800ada0:	789b      	ldrb	r3, [r3, #2]
 800ada2:	f083 0301 	eor.w	r3, r3, #1
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <on_security+0x1c>
	    	application_state = IDLE;
 800adac:	4b2c      	ldr	r3, [pc, #176]	; (800ae60 <on_security+0xc8>)
 800adae:	2201      	movs	r2, #1
 800adb0:	701a      	strb	r2, [r3, #0]
 800adb2:	e050      	b.n	800ae56 <on_security+0xbe>
	        return;
	    }

	    // Buffer para UID leído
	    uint8_t uid[10];
	    size_t uid_len = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	603b      	str	r3, [r7, #0]

	    // Intentar leer tarjeta
	    if (!rfid_read_uid(uid, &uid_len)) {
 800adb8:	463a      	mov	r2, r7
 800adba:	1d3b      	adds	r3, r7, #4
 800adbc:	4611      	mov	r1, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 f94d 	bl	800b05e <rfid_read_uid>
 800adc4:	4603      	mov	r3, r0
 800adc6:	f083 0301 	eor.w	r3, r3, #1
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d006      	beq.n	800adde <on_security+0x46>
	        debug_uart_print("Fallo al leer tarjeta RFID\r\n");
 800add0:	4824      	ldr	r0, [pc, #144]	; (800ae64 <on_security+0xcc>)
 800add2:	f000 f9ad 	bl	800b130 <debug_uart_print>
	        sec_request.result = false;
 800add6:	4b21      	ldr	r3, [pc, #132]	; (800ae5c <on_security+0xc4>)
 800add8:	2200      	movs	r2, #0
 800adda:	705a      	strb	r2, [r3, #1]
 800addc:	e032      	b.n	800ae44 <on_security+0xac>
	    } else {
	        switch (sec_request.action) {
 800adde:	4b1f      	ldr	r3, [pc, #124]	; (800ae5c <on_security+0xc4>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d002      	beq.n	800adec <on_security+0x54>
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d016      	beq.n	800ae18 <on_security+0x80>
	                }
	                break;

	            default:
	                // Seguridad sin acción válida
	                break;
 800adea:	e02b      	b.n	800ae44 <on_security+0xac>
	                sec_request.result = rfid_register_card(uid, uid_len);
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	1d3b      	adds	r3, r7, #4
 800adf0:	4611      	mov	r1, r2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 f942 	bl	800b07c <rfid_register_card>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	4b17      	ldr	r3, [pc, #92]	; (800ae5c <on_security+0xc4>)
 800adfe:	705a      	strb	r2, [r3, #1]
	                if (sec_request.result) {
 800ae00:	4b16      	ldr	r3, [pc, #88]	; (800ae5c <on_security+0xc4>)
 800ae02:	785b      	ldrb	r3, [r3, #1]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d003      	beq.n	800ae10 <on_security+0x78>
	                    debug_uart_print("Tarjeta registrada con éxito\r\n");
 800ae08:	4817      	ldr	r0, [pc, #92]	; (800ae68 <on_security+0xd0>)
 800ae0a:	f000 f991 	bl	800b130 <debug_uart_print>
	                break;
 800ae0e:	e019      	b.n	800ae44 <on_security+0xac>
	                    debug_uart_print("Error al registrar tarjeta (ya existe?)\r\n");
 800ae10:	4816      	ldr	r0, [pc, #88]	; (800ae6c <on_security+0xd4>)
 800ae12:	f000 f98d 	bl	800b130 <debug_uart_print>
	                break;
 800ae16:	e015      	b.n	800ae44 <on_security+0xac>
	                sec_request.result = rfid_authenticate(uid, uid_len);
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	1d3b      	adds	r3, r7, #4
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 f952 	bl	800b0c8 <rfid_authenticate>
 800ae24:	4603      	mov	r3, r0
 800ae26:	461a      	mov	r2, r3
 800ae28:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <on_security+0xc4>)
 800ae2a:	705a      	strb	r2, [r3, #1]
	                if (sec_request.result) {
 800ae2c:	4b0b      	ldr	r3, [pc, #44]	; (800ae5c <on_security+0xc4>)
 800ae2e:	785b      	ldrb	r3, [r3, #1]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <on_security+0xa4>
	                    debug_uart_print("RFID autorizado\r\n");
 800ae34:	480e      	ldr	r0, [pc, #56]	; (800ae70 <on_security+0xd8>)
 800ae36:	f000 f97b 	bl	800b130 <debug_uart_print>
	                break;
 800ae3a:	e002      	b.n	800ae42 <on_security+0xaa>
	                    debug_uart_print("RFID no autorizado\r\n");
 800ae3c:	480d      	ldr	r0, [pc, #52]	; (800ae74 <on_security+0xdc>)
 800ae3e:	f000 f977 	bl	800b130 <debug_uart_print>
	                break;
 800ae42:	bf00      	nop
	        }
	    }

	    // Limpiar solicitud y volver a IDLE
	    sec_request.pending = false;
 800ae44:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <on_security+0xc4>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	709a      	strb	r2, [r3, #2]
	    sec_request.action = SECURITY_NONE;
 800ae4a:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <on_security+0xc4>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	701a      	strb	r2, [r3, #0]
	    application_state = IDLE;
 800ae50:	4b03      	ldr	r3, [pc, #12]	; (800ae60 <on_security+0xc8>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	701a      	strb	r2, [r3, #0]
}
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	20000384 	.word	0x20000384
 800ae60:	20000380 	.word	0x20000380
 800ae64:	0800d5a0 	.word	0x0800d5a0
 800ae68:	0800d5c0 	.word	0x0800d5c0
 800ae6c:	0800d5e0 	.word	0x0800d5e0
 800ae70:	0800d60c 	.word	0x0800d60c
 800ae74:	0800d620 	.word	0x0800d620

0800ae78 <on_app_error>:
 *
 * In case of errors (e.g., SD initialization failure, DMA error), the system enters
 * the ERROR state and can provide visual or debugging cues.
 */
static void on_app_error(void)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
    // TODO: Implement error handling (e.g., blink an LED to indicate error).
    while (1) {
 800ae7c:	e7fe      	b.n	800ae7c <on_app_error+0x4>
	...

0800ae80 <HAL_ADC_ConvCpltCallback>:
    // Update the debouncing state machine in the button driver.
    button_update();
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b089      	sub	sp, #36	; 0x24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a1f      	ldr	r2, [pc, #124]	; (800af0c <HAL_ADC_ConvCpltCallback+0x8c>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d135      	bne.n	800aefe <HAL_ADC_ConvCpltCallback+0x7e>
        // 1) Compute DC bias
        uint32_t sum = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800ae96:	2300      	movs	r3, #0
 800ae98:	61bb      	str	r3, [r7, #24]
 800ae9a:	e00a      	b.n	800aeb2 <HAL_ADC_ConvCpltCallback+0x32>
            sum += adc_dma_buffer[i];
 800ae9c:	4a1c      	ldr	r2, [pc, #112]	; (800af10 <HAL_ADC_ConvCpltCallback+0x90>)
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea4:	461a      	mov	r2, r3
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	4413      	add	r3, r2
 800aeaa:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	61bb      	str	r3, [r7, #24]
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	2bff      	cmp	r3, #255	; 0xff
 800aeb6:	ddf1      	ble.n	800ae9c <HAL_ADC_ConvCpltCallback+0x1c>
        }
        uint16_t bias = sum / ADC_BUFFER_SIZE;
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	0a1b      	lsrs	r3, r3, #8
 800aebc:	81fb      	strh	r3, [r7, #14]

        // 2) Compute mean absolute deviation (“envelope”)
        uint32_t abs_sum = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800aec2:	2300      	movs	r3, #0
 800aec4:	613b      	str	r3, [r7, #16]
 800aec6:	e012      	b.n	800aeee <HAL_ADC_ConvCpltCallback+0x6e>
            int32_t d = (int32_t)adc_dma_buffer[i] - (int32_t)bias;
 800aec8:	4a11      	ldr	r2, [pc, #68]	; (800af10 <HAL_ADC_ConvCpltCallback+0x90>)
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aed0:	461a      	mov	r2, r3
 800aed2:	89fb      	ldrh	r3, [r7, #14]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	60bb      	str	r3, [r7, #8]
            abs_sum += (d < 0 ? -d : d);
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	bfb8      	it	lt
 800aede:	425b      	neglt	r3, r3
 800aee0:	461a      	mov	r2, r3
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	4413      	add	r3, r2
 800aee6:	617b      	str	r3, [r7, #20]
        for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	3301      	adds	r3, #1
 800aeec:	613b      	str	r3, [r7, #16]
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	2bff      	cmp	r3, #255	; 0xff
 800aef2:	dde9      	ble.n	800aec8 <HAL_ADC_ConvCpltCallback+0x48>
        }
        envelope = abs_sum / ADC_BUFFER_SIZE;
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	0a1b      	lsrs	r3, r3, #8
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	4b06      	ldr	r3, [pc, #24]	; (800af14 <HAL_ADC_ConvCpltCallback+0x94>)
 800aefc:	801a      	strh	r2, [r3, #0]
    }
}
 800aefe:	bf00      	nop
 800af00:	3724      	adds	r7, #36	; 0x24
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	40012000 	.word	0x40012000
 800af10:	20000388 	.word	0x20000388
 800af14:	20000588 	.word	0x20000588

0800af18 <button_init>:
static bool_t button_flag;  ///< Flag set when a complete press-release is detected

/**
 * @brief Initializes the button state machine.
 */
void button_init(void) {
 800af18:	b580      	push	{r7, lr}
 800af1a:	af00      	add	r7, sp, #0
    current_state = BUTTON_UP;
 800af1c:	4b05      	ldr	r3, [pc, #20]	; (800af34 <button_init+0x1c>)
 800af1e:	2200      	movs	r2, #0
 800af20:	701a      	strb	r2, [r3, #0]
    delayInit(&delay_debounce, DEBOUNCE_PERIOD_MS);
 800af22:	2128      	movs	r1, #40	; 0x28
 800af24:	4804      	ldr	r0, [pc, #16]	; (800af38 <button_init+0x20>)
 800af26:	f7ff fd6d 	bl	800aa04 <delayInit>
    button_flag = false;
 800af2a:	4b04      	ldr	r3, [pc, #16]	; (800af3c <button_init+0x24>)
 800af2c:	2200      	movs	r2, #0
 800af2e:	701a      	strb	r2, [r3, #0]
}
 800af30:	bf00      	nop
 800af32:	bd80      	pop	{r7, pc}
 800af34:	2000058a 	.word	0x2000058a
 800af38:	2000058c 	.word	0x2000058c
 800af3c:	20000598 	.word	0x20000598

0800af40 <on_button_released>:

/**
 * @brief Internal function called when a valid button release is confirmed.
 */
static void on_button_released(void) {
 800af40:	b480      	push	{r7}
 800af42:	af00      	add	r7, sp, #0
    button_flag = true;
 800af44:	4b03      	ldr	r3, [pc, #12]	; (800af54 <on_button_released+0x14>)
 800af46:	2201      	movs	r2, #1
 800af48:	701a      	strb	r2, [r3, #0]
}
 800af4a:	bf00      	nop
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	20000598 	.word	0x20000598

0800af58 <button_update>:
 * @brief Updates the debouncing state machine.
 *
 * This function reads the button status using port_button_read() and updates the
 * state machine. It should be called in the main loop periodically.
 */
void button_update(void) {
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
    bool_t button_status = port_button_read();  // true = pressed; false = released
 800af5e:	f000 f989 	bl	800b274 <port_button_read>
 800af62:	4603      	mov	r3, r0
 800af64:	71fb      	strb	r3, [r7, #7]
    switch (current_state) {
 800af66:	4b2e      	ldr	r3, [pc, #184]	; (800b020 <button_update+0xc8>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d84a      	bhi.n	800b004 <button_update+0xac>
 800af6e:	a201      	add	r2, pc, #4	; (adr r2, 800af74 <button_update+0x1c>)
 800af70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af74:	0800af85 	.word	0x0800af85
 800af78:	0800af9b 	.word	0x0800af9b
 800af7c:	0800afbd 	.word	0x0800afbd
 800af80:	0800afd9 	.word	0x0800afd9
        case BUTTON_UP:
            if (button_status == true) {
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d03f      	beq.n	800b00a <button_update+0xb2>
                current_state = BUTTON_FALLING;
 800af8a:	4b25      	ldr	r3, [pc, #148]	; (800b020 <button_update+0xc8>)
 800af8c:	2201      	movs	r2, #1
 800af8e:	701a      	strb	r2, [r3, #0]
                delayInit(&delay_debounce, DEBOUNCE_PERIOD_MS);
 800af90:	2128      	movs	r1, #40	; 0x28
 800af92:	4824      	ldr	r0, [pc, #144]	; (800b024 <button_update+0xcc>)
 800af94:	f7ff fd36 	bl	800aa04 <delayInit>
            }
            break;
 800af98:	e037      	b.n	800b00a <button_update+0xb2>
        case BUTTON_FALLING:
            if (delayRead(&delay_debounce)) {
 800af9a:	4822      	ldr	r0, [pc, #136]	; (800b024 <button_update+0xcc>)
 800af9c:	f7ff fd56 	bl	800aa4c <delayRead>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d033      	beq.n	800b00e <button_update+0xb6>
                if (button_status == true) {
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <button_update+0x5c>
                    current_state = BUTTON_DOWN;
 800afac:	4b1c      	ldr	r3, [pc, #112]	; (800b020 <button_update+0xc8>)
 800afae:	2202      	movs	r2, #2
 800afb0:	701a      	strb	r2, [r3, #0]
                } else {
                    current_state = BUTTON_UP;
                }
            }
            break;
 800afb2:	e02c      	b.n	800b00e <button_update+0xb6>
                    current_state = BUTTON_UP;
 800afb4:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <button_update+0xc8>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	701a      	strb	r2, [r3, #0]
            break;
 800afba:	e028      	b.n	800b00e <button_update+0xb6>
        case BUTTON_DOWN:
            if (button_status == false) {
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	f083 0301 	eor.w	r3, r3, #1
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d024      	beq.n	800b012 <button_update+0xba>
                current_state = BUTTON_RAISING;
 800afc8:	4b15      	ldr	r3, [pc, #84]	; (800b020 <button_update+0xc8>)
 800afca:	2203      	movs	r2, #3
 800afcc:	701a      	strb	r2, [r3, #0]
                delayInit(&delay_debounce, DEBOUNCE_PERIOD_MS);
 800afce:	2128      	movs	r1, #40	; 0x28
 800afd0:	4814      	ldr	r0, [pc, #80]	; (800b024 <button_update+0xcc>)
 800afd2:	f7ff fd17 	bl	800aa04 <delayInit>
            }
            break;
 800afd6:	e01c      	b.n	800b012 <button_update+0xba>
        case BUTTON_RAISING:
            if (delayRead(&delay_debounce)) {
 800afd8:	4812      	ldr	r0, [pc, #72]	; (800b024 <button_update+0xcc>)
 800afda:	f7ff fd37 	bl	800aa4c <delayRead>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d018      	beq.n	800b016 <button_update+0xbe>
                if (button_status == false) {
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	f083 0301 	eor.w	r3, r3, #1
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d005      	beq.n	800affc <button_update+0xa4>
                    on_button_released();
 800aff0:	f7ff ffa6 	bl	800af40 <on_button_released>
                    current_state = BUTTON_UP;
 800aff4:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <button_update+0xc8>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	701a      	strb	r2, [r3, #0]
                } else {
                    current_state = BUTTON_DOWN;
                }
            }
            break;
 800affa:	e00c      	b.n	800b016 <button_update+0xbe>
                    current_state = BUTTON_DOWN;
 800affc:	4b08      	ldr	r3, [pc, #32]	; (800b020 <button_update+0xc8>)
 800affe:	2202      	movs	r2, #2
 800b000:	701a      	strb	r2, [r3, #0]
            break;
 800b002:	e008      	b.n	800b016 <button_update+0xbe>
        default:
            button_init();
 800b004:	f7ff ff88 	bl	800af18 <button_init>
            break;
 800b008:	e006      	b.n	800b018 <button_update+0xc0>
            break;
 800b00a:	bf00      	nop
 800b00c:	e004      	b.n	800b018 <button_update+0xc0>
            break;
 800b00e:	bf00      	nop
 800b010:	e002      	b.n	800b018 <button_update+0xc0>
            break;
 800b012:	bf00      	nop
 800b014:	e000      	b.n	800b018 <button_update+0xc0>
            break;
 800b016:	bf00      	nop
    }
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	2000058a 	.word	0x2000058a
 800b024:	2000058c 	.word	0x2000058c

0800b028 <button_was_pressed>:
 *
 * Returns true once per complete cycle (press and release) and resets the flag.
 *
 * @return true if an event is detected; false otherwise.
 */
bool_t button_was_pressed(void) {
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
    if (button_flag) {
 800b02c:	4b07      	ldr	r3, [pc, #28]	; (800b04c <button_was_pressed+0x24>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <button_was_pressed+0x16>
        button_flag = false;
 800b034:	4b05      	ldr	r3, [pc, #20]	; (800b04c <button_was_pressed+0x24>)
 800b036:	2200      	movs	r2, #0
 800b038:	701a      	strb	r2, [r3, #0]
        return true;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e000      	b.n	800b040 <button_was_pressed+0x18>
    }
    return false;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	20000598 	.word	0x20000598

0800b050 <rfid_init>:
#include <string.h>

static uint8_t registered_cards[RFID_MAX_CARDS][RFID_UID_MAX_LEN];
static size_t  registered_count = 0;

bool rfid_init(void) {
 800b050:	b580      	push	{r7, lr}
 800b052:	af00      	add	r7, sp, #0
    return port_rfid_init();
 800b054:	f000 fa5e 	bl	800b514 <port_rfid_init>
 800b058:	4603      	mov	r3, r0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <rfid_read_uid>:

bool rfid_read_uid(uint8_t *uid, size_t *uid_len) {
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	6039      	str	r1, [r7, #0]
    return port_rfid_read_uid(uid, uid_len);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fa7c 	bl	800b568 <port_rfid_read_uid>
 800b070:	4603      	mov	r3, r0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
	...

0800b07c <rfid_register_card>:

bool rfid_register_card(const uint8_t *uid, size_t uid_len) {
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
    if (uid_len > RFID_UID_MAX_LEN || registered_count >= RFID_MAX_CARDS) {
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2b05      	cmp	r3, #5
 800b08a:	d803      	bhi.n	800b094 <rfid_register_card+0x18>
 800b08c:	4b0c      	ldr	r3, [pc, #48]	; (800b0c0 <rfid_register_card+0x44>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b09      	cmp	r3, #9
 800b092:	d901      	bls.n	800b098 <rfid_register_card+0x1c>
        return false;
 800b094:	2300      	movs	r3, #0
 800b096:	e00f      	b.n	800b0b8 <rfid_register_card+0x3c>
    }
    memcpy(registered_cards[registered_count++], uid, uid_len);
 800b098:	4b09      	ldr	r3, [pc, #36]	; (800b0c0 <rfid_register_card+0x44>)
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	1c53      	adds	r3, r2, #1
 800b09e:	4908      	ldr	r1, [pc, #32]	; (800b0c0 <rfid_register_card+0x44>)
 800b0a0:	600b      	str	r3, [r1, #0]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	4a06      	ldr	r2, [pc, #24]	; (800b0c4 <rfid_register_card+0x48>)
 800b0aa:	4413      	add	r3, r2
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f001 f9fa 	bl	800c4aa <memcpy>
    return true;
 800b0b6:	2301      	movs	r3, #1
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	200005d0 	.word	0x200005d0
 800b0c4:	2000059c 	.word	0x2000059c

0800b0c8 <rfid_authenticate>:

bool rfid_authenticate(const uint8_t *uid, size_t uid_len) {
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < registered_count; i++) {
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	e015      	b.n	800b104 <rfid_authenticate+0x3c>
        if (uid_len == RFID_UID_MAX_LEN &&
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2b05      	cmp	r3, #5
 800b0dc:	d10f      	bne.n	800b0fe <rfid_authenticate+0x36>
            memcmp(registered_cards[i], uid, uid_len) == 0) {
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	4a0c      	ldr	r2, [pc, #48]	; (800b118 <rfid_authenticate+0x50>)
 800b0e8:	4413      	add	r3, r2
 800b0ea:	683a      	ldr	r2, [r7, #0]
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f001 f935 	bl	800c35e <memcmp>
 800b0f4:	4603      	mov	r3, r0
        if (uid_len == RFID_UID_MAX_LEN &&
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <rfid_authenticate+0x36>
            return true;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e008      	b.n	800b110 <rfid_authenticate+0x48>
    for (size_t i = 0; i < registered_count; i++) {
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3301      	adds	r3, #1
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	4b05      	ldr	r3, [pc, #20]	; (800b11c <rfid_authenticate+0x54>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d3e4      	bcc.n	800b0d8 <rfid_authenticate+0x10>
        }
    }
    return false;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	2000059c 	.word	0x2000059c
 800b11c:	200005d0 	.word	0x200005d0

0800b120 <debug_uart_init>:

// External declaration of the UART handle (defined in main.c or generated by CubeMX)
extern UART_HandleTypeDef huart2;

void debug_uart_init(void)
{
 800b120:	b480      	push	{r7}
 800b122:	af00      	add	r7, sp, #0
    // In most cases, initialization for UART2 is handled by CubeMX.
    // This function exists for logical consistency.
}
 800b124:	bf00      	nop
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
	...

0800b130 <debug_uart_print>:

int debug_uart_print(const char* msg)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
    if (msg == 0) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d102      	bne.n	800b144 <debug_uart_print+0x14>
        return -1;
 800b13e:	f04f 33ff 	mov.w	r3, #4294967295
 800b142:	e011      	b.n	800b168 <debug_uart_print+0x38>
    }

    uint16_t len = (uint16_t)strlen(msg);
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7f5 f86d 	bl	8000224 <strlen>
 800b14a:	4603      	mov	r3, r0
 800b14c:	81fb      	strh	r3, [r7, #14]
    // Transmit the string over UART2 with a timeout of 100 ms.
    if (HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100) == HAL_OK)
 800b14e:	89fa      	ldrh	r2, [r7, #14]
 800b150:	2364      	movs	r3, #100	; 0x64
 800b152:	6879      	ldr	r1, [r7, #4]
 800b154:	4806      	ldr	r0, [pc, #24]	; (800b170 <debug_uart_print+0x40>)
 800b156:	f7fb f9a3 	bl	80064a0 <HAL_UART_Transmit>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d101      	bne.n	800b164 <debug_uart_print+0x34>
    {
        return 0;
 800b160:	2300      	movs	r3, #0
 800b162:	e001      	b.n	800b168 <debug_uart_print+0x38>
    }
    return -1;
 800b164:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	20000320 	.word	0x20000320

0800b174 <usb_cdc_init>:
static char usb_cmd_buffer[USB_CMD_BUFFER_SIZE] = { 0 };

/**
 * @brief Initializes the USB CDC driver.
 */
void usb_cdc_init(void) {
 800b174:	b580      	push	{r7, lr}
 800b176:	af00      	add	r7, sp, #0
	command_pending = false;
 800b178:	4b04      	ldr	r3, [pc, #16]	; (800b18c <usb_cdc_init+0x18>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	701a      	strb	r2, [r3, #0]
	memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800b17e:	2280      	movs	r2, #128	; 0x80
 800b180:	2100      	movs	r1, #0
 800b182:	4803      	ldr	r0, [pc, #12]	; (800b190 <usb_cdc_init+0x1c>)
 800b184:	f001 f915 	bl	800c3b2 <memset>
}
 800b188:	bf00      	nop
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	200005d4 	.word	0x200005d4
 800b190:	200005d8 	.word	0x200005d8

0800b194 <usb_cdc_receiveCallback>:
 * It copies data into the command buffer and marks a command as pending.
 *
 * @param Buf Pointer to the received data buffer.
 * @param Len Number of bytes received.
 */
void usb_cdc_receiveCallback(uint8_t *Buf, uint32_t Len) {
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
	debug_uart_print("usb_cdc_receiveCallback()\r\n");
 800b19e:	481e      	ldr	r0, [pc, #120]	; (800b218 <usb_cdc_receiveCallback+0x84>)
 800b1a0:	f7ff ffc6 	bl	800b130 <debug_uart_print>
	debug_uart_print((char*) Buf);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7ff ffc3 	bl	800b130 <debug_uart_print>
	debug_uart_print("\r\n");
 800b1aa:	481c      	ldr	r0, [pc, #112]	; (800b21c <usb_cdc_receiveCallback+0x88>)
 800b1ac:	f7ff ffc0 	bl	800b130 <debug_uart_print>
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800b1b0:	e002      	b.n	800b1b8 <usb_cdc_receiveCallback+0x24>
		Len--;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	603b      	str	r3, [r7, #0]
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00d      	beq.n	800b1da <usb_cdc_receiveCallback+0x46>
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	2b0d      	cmp	r3, #13
 800b1ca:	d0f2      	beq.n	800b1b2 <usb_cdc_receiveCallback+0x1e>
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	2b0a      	cmp	r3, #10
 800b1d8:	d0eb      	beq.n	800b1b2 <usb_cdc_receiveCallback+0x1e>
	}
	if (!command_pending && Len < USB_CMD_BUFFER_SIZE) {
 800b1da:	4b11      	ldr	r3, [pc, #68]	; (800b220 <usb_cdc_receiveCallback+0x8c>)
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f083 0301 	eor.w	r3, r3, #1
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d011      	beq.n	800b20e <usb_cdc_receiveCallback+0x7a>
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	2b7f      	cmp	r3, #127	; 0x7f
 800b1ee:	d80e      	bhi.n	800b20e <usb_cdc_receiveCallback+0x7a>
		memcpy(usb_cmd_buffer, Buf, Len);
 800b1f0:	683a      	ldr	r2, [r7, #0]
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	480b      	ldr	r0, [pc, #44]	; (800b224 <usb_cdc_receiveCallback+0x90>)
 800b1f6:	f001 f958 	bl	800c4aa <memcpy>
		// Null-terminate the string safely.
		usb_cmd_buffer[Len < USB_CMD_BUFFER_SIZE ? Len : USB_CMD_BUFFER_SIZE - 1] =
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	2b7f      	cmp	r3, #127	; 0x7f
 800b1fe:	bf28      	it	cs
 800b200:	237f      	movcs	r3, #127	; 0x7f
 800b202:	4a08      	ldr	r2, [pc, #32]	; (800b224 <usb_cdc_receiveCallback+0x90>)
 800b204:	2100      	movs	r1, #0
 800b206:	54d1      	strb	r1, [r2, r3]
				'\0';
		command_pending = true;
 800b208:	4b05      	ldr	r3, [pc, #20]	; (800b220 <usb_cdc_receiveCallback+0x8c>)
 800b20a:	2201      	movs	r2, #1
 800b20c:	701a      	strb	r2, [r3, #0]
	}
	// If a command is already pending, new data is discarded.
}
 800b20e:	bf00      	nop
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	0800d638 	.word	0x0800d638
 800b21c:	0800d654 	.word	0x0800d654
 800b220:	200005d4 	.word	0x200005d4
 800b224:	200005d8 	.word	0x200005d8

0800b228 <usb_cdc_isCommandPending>:
/**
 * @brief Checks if there is a pending USB CDC command.
 *
 * @return true if there is a pending command, false otherwise.
 */
bool usb_cdc_isCommandPending(void) {
 800b228:	b480      	push	{r7}
 800b22a:	af00      	add	r7, sp, #0
	return command_pending;
 800b22c:	4b03      	ldr	r3, [pc, #12]	; (800b23c <usb_cdc_isCommandPending+0x14>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	b2db      	uxtb	r3, r3
}
 800b232:	4618      	mov	r0, r3
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	200005d4 	.word	0x200005d4

0800b240 <usb_cdc_getCommand>:
/**
 * @brief Retrieves the buffered USB CDC command.
 *
 * @return Pointer to the null-terminated command string.
 */
const char* usb_cdc_getCommand(void) {
 800b240:	b480      	push	{r7}
 800b242:	af00      	add	r7, sp, #0
	return usb_cmd_buffer;
 800b244:	4b02      	ldr	r3, [pc, #8]	; (800b250 <usb_cdc_getCommand+0x10>)
}
 800b246:	4618      	mov	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	200005d8 	.word	0x200005d8

0800b254 <usb_cdc_clearCommand>:

/**
 * @brief Clears the current USB CDC command.
 */
void usb_cdc_clearCommand(void) {
 800b254:	b580      	push	{r7, lr}
 800b256:	af00      	add	r7, sp, #0
	command_pending = false;
 800b258:	4b04      	ldr	r3, [pc, #16]	; (800b26c <usb_cdc_clearCommand+0x18>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	701a      	strb	r2, [r3, #0]
	memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800b25e:	2280      	movs	r2, #128	; 0x80
 800b260:	2100      	movs	r1, #0
 800b262:	4803      	ldr	r0, [pc, #12]	; (800b270 <usb_cdc_clearCommand+0x1c>)
 800b264:	f001 f8a5 	bl	800c3b2 <memset>
}
 800b268:	bf00      	nop
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	200005d4 	.word	0x200005d4
 800b270:	200005d8 	.word	0x200005d8

0800b274 <port_button_read>:
 * Uses HAL_GPIO_ReadPin to retrieve the button state. If the button is active-low,
 * the logic is inverted so that the function returns true when the button is pressed.
 *
 * @return true if the button is pressed, false if released.
 */
bool_t port_button_read(void) {
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 800b27a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b27e:	4807      	ldr	r0, [pc, #28]	; (800b29c <port_button_read+0x28>)
 800b280:	f7f7 fa6a 	bl	8002758 <HAL_GPIO_ReadPin>
 800b284:	4603      	mov	r3, r0
 800b286:	71fb      	strb	r3, [r7, #7]
    return BUTTON_PULL_LOW ? (pin_state == GPIO_PIN_RESET) : (pin_state == GPIO_PIN_SET);
 800b288:	79fb      	ldrb	r3, [r7, #7]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bf0c      	ite	eq
 800b28e:	2301      	moveq	r3, #1
 800b290:	2300      	movne	r3, #0
 800b292:	b2db      	uxtb	r3, r3
}
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	40020800 	.word	0x40020800

0800b2a0 <_cs_low>:
// PICC commands
#define PICC_ANTICOLL       0x93
#define PICC_ANTICOLL_NVB   0x20

// Helpers to select/deselect
static inline void _cs_low(void)  { HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN, GPIO_PIN_RESET); }
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2104      	movs	r1, #4
 800b2a8:	4802      	ldr	r0, [pc, #8]	; (800b2b4 <_cs_low+0x14>)
 800b2aa:	f7f7 fa6d 	bl	8002788 <HAL_GPIO_WritePin>
 800b2ae:	bf00      	nop
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	40020c00 	.word	0x40020c00

0800b2b8 <_cs_high>:
static inline void _cs_high(void) { HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN, GPIO_PIN_SET); }
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	2201      	movs	r2, #1
 800b2be:	2104      	movs	r1, #4
 800b2c0:	4802      	ldr	r0, [pc, #8]	; (800b2cc <_cs_high+0x14>)
 800b2c2:	f7f7 fa61 	bl	8002788 <HAL_GPIO_WritePin>
 800b2c6:	bf00      	nop
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	40020c00 	.word	0x40020c00

0800b2d0 <port_rfid_write_reg>:

/**
 * @brief Write to a RC522 register over SPI.
 */
bool port_rfid_write_reg(uint8_t reg, uint8_t val) {
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	460a      	mov	r2, r1
 800b2da:	71fb      	strb	r3, [r7, #7]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (reg << 1) & 0x7E;
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	73fb      	strb	r3, [r7, #15]
    _cs_low();
 800b2ee:	f7ff ffd7 	bl	800b2a0 <_cs_low>
    HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800b2f2:	f107 010f 	add.w	r1, r7, #15
 800b2f6:	2364      	movs	r3, #100	; 0x64
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	4808      	ldr	r0, [pc, #32]	; (800b31c <port_rfid_write_reg+0x4c>)
 800b2fc:	f7f9 fff5 	bl	80052ea <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &val,  1, 100);
 800b300:	1db9      	adds	r1, r7, #6
 800b302:	2364      	movs	r3, #100	; 0x64
 800b304:	2201      	movs	r2, #1
 800b306:	4805      	ldr	r0, [pc, #20]	; (800b31c <port_rfid_write_reg+0x4c>)
 800b308:	f7f9 ffef 	bl	80052ea <HAL_SPI_Transmit>
    _cs_high();
 800b30c:	f7ff ffd4 	bl	800b2b8 <_cs_high>
    return true;
 800b310:	2301      	movs	r3, #1
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20000280 	.word	0x20000280

0800b320 <port_rfid_read_reg>:

/**
 * @brief Read from a RC522 register over SPI.
 */
uint8_t port_rfid_read_reg(uint8_t reg) {
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	4603      	mov	r3, r0
 800b328:	71fb      	strb	r3, [r7, #7]
    uint8_t addr = ((reg << 1) & 0x7E) | 0x80;
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	b25b      	sxtb	r3, r3
 800b330:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b334:	b25b      	sxtb	r3, r3
 800b336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b33a:	b25b      	sxtb	r3, r3
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	73fb      	strb	r3, [r7, #15]
    uint8_t val  = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	73bb      	strb	r3, [r7, #14]
    _cs_low();
 800b344:	f7ff ffac 	bl	800b2a0 <_cs_low>
    HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800b348:	f107 010f 	add.w	r1, r7, #15
 800b34c:	2364      	movs	r3, #100	; 0x64
 800b34e:	2201      	movs	r2, #1
 800b350:	4808      	ldr	r0, [pc, #32]	; (800b374 <port_rfid_read_reg+0x54>)
 800b352:	f7f9 ffca 	bl	80052ea <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &val,  1, 100);
 800b356:	f107 010e 	add.w	r1, r7, #14
 800b35a:	2364      	movs	r3, #100	; 0x64
 800b35c:	2201      	movs	r2, #1
 800b35e:	4805      	ldr	r0, [pc, #20]	; (800b374 <port_rfid_read_reg+0x54>)
 800b360:	f7fa f907 	bl	8005572 <HAL_SPI_Receive>
    _cs_high();
 800b364:	f7ff ffa8 	bl	800b2b8 <_cs_high>
    return val;
 800b368:	7bbb      	ldrb	r3, [r7, #14]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20000280 	.word	0x20000280

0800b378 <port_rfid_command>:

/**
 * @brief Send a command + data through RC522 FIFO and await a response.
 */
bool port_rfid_command(const uint8_t *cmd, size_t cmd_len, uint8_t *response, size_t *resp_len) {
 800b378:	b590      	push	{r4, r7, lr}
 800b37a:	b09b      	sub	sp, #108	; 0x6c
 800b37c:	af02      	add	r7, sp, #8
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	603b      	str	r3, [r7, #0]
    // Idle & clear IRQ flags
    port_rfid_write_reg(REG_COMMAND, CMD_IDLE);
 800b386:	2100      	movs	r1, #0
 800b388:	2001      	movs	r0, #1
 800b38a:	f7ff ffa1 	bl	800b2d0 <port_rfid_write_reg>
    port_rfid_write_reg(REG_COM_I_FLAG, 0x7F);
 800b38e:	217f      	movs	r1, #127	; 0x7f
 800b390:	2004      	movs	r0, #4
 800b392:	f7ff ff9d 	bl	800b2d0 <port_rfid_write_reg>
    // Flush FIFO
    port_rfid_write_reg(REG_FIFO_LEVEL, 0x80);
 800b396:	2180      	movs	r1, #128	; 0x80
 800b398:	200a      	movs	r0, #10
 800b39a:	f7ff ff99 	bl	800b2d0 <port_rfid_write_reg>

    // Write data into FIFO
    for (size_t i = 0; i < cmd_len; i++) {
 800b39e:	2300      	movs	r3, #0
 800b3a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3a2:	e00a      	b.n	800b3ba <port_rfid_command+0x42>
        port_rfid_write_reg(REG_FIFO_DATA, cmd[i]);
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3a8:	4413      	add	r3, r2
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	2009      	movs	r0, #9
 800b3b0:	f7ff ff8e 	bl	800b2d0 <port_rfid_write_reg>
    for (size_t i = 0; i < cmd_len; i++) {
 800b3b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d3f0      	bcc.n	800b3a4 <port_rfid_command+0x2c>
    }
    // Execute Transceive
    port_rfid_write_reg(REG_COMMAND, CMD_TRANSCEIVE);
 800b3c2:	210c      	movs	r1, #12
 800b3c4:	2001      	movs	r0, #1
 800b3c6:	f7ff ff83 	bl	800b2d0 <port_rfid_write_reg>
    // Start sending
    port_rfid_write_reg(REG_BIT_FRAMING, 0x80);
 800b3ca:	2180      	movs	r1, #128	; 0x80
 800b3cc:	200d      	movs	r0, #13
 800b3ce:	f7ff ff7f 	bl	800b2d0 <port_rfid_write_reg>

    // Wait for completion (ComIrq bit 0x30)
    uint8_t irq;
    uint32_t deadline = HAL_GetTick() + 100;
 800b3d2:	f7f5 fed1 	bl	8001178 <HAL_GetTick>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	3364      	adds	r3, #100	; 0x64
 800b3da:	657b      	str	r3, [r7, #84]	; 0x54
    do {
        irq = port_rfid_read_reg(REG_COM_I_FLAG);
 800b3dc:	2004      	movs	r0, #4
 800b3de:	f7ff ff9f 	bl	800b320 <port_rfid_read_reg>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    } while (!(irq & 0x30) && HAL_GetTick() < deadline);
 800b3e8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b3ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d105      	bne.n	800b400 <port_rfid_command+0x88>
 800b3f4:	f7f5 fec0 	bl	8001178 <HAL_GetTick>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d8ed      	bhi.n	800b3dc <port_rfid_command+0x64>

    // Stop sending
    port_rfid_write_reg(REG_BIT_FRAMING, 0x00);
 800b400:	2100      	movs	r1, #0
 800b402:	200d      	movs	r0, #13
 800b404:	f7ff ff64 	bl	800b2d0 <port_rfid_write_reg>

    // Check for errors
    uint8_t error = port_rfid_read_reg(REG_ERROR);
 800b408:	2006      	movs	r0, #6
 800b40a:	f7ff ff89 	bl	800b320 <port_rfid_read_reg>
 800b40e:	4603      	mov	r3, r0
 800b410:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
    if (error & 0x1B) {
 800b414:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800b418:	f003 031b 	and.w	r3, r3, #27
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <port_rfid_command+0xac>
        return false;
 800b420:	2300      	movs	r3, #0
 800b422:	e040      	b.n	800b4a6 <port_rfid_command+0x12e>
    }

    // Read how many bytes in FIFO
    uint8_t count = port_rfid_read_reg(REG_FIFO_LEVEL);
 800b424:	200a      	movs	r0, #10
 800b426:	f7ff ff7b 	bl	800b320 <port_rfid_read_reg>
 800b42a:	4603      	mov	r3, r0
 800b42c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    if (count == 0 || count > *resp_len) {
 800b430:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800b434:	2b00      	cmp	r3, #0
 800b436:	d005      	beq.n	800b444 <port_rfid_command+0xcc>
 800b438:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	429a      	cmp	r2, r3
 800b442:	d913      	bls.n	800b46c <port_rfid_command+0xf4>
    	char buf[64];
    	sprintf(buf, "IRQ=0x%02X ERR=0x%02X FIFO=%d\r\n", irq, error, count);
 800b444:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800b448:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 800b44c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800b450:	f107 0010 	add.w	r0, r7, #16
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	460b      	mov	r3, r1
 800b458:	4915      	ldr	r1, [pc, #84]	; (800b4b0 <port_rfid_command+0x138>)
 800b45a:	f000 ff1d 	bl	800c298 <siprintf>
    	debug_uart_print(buf);
 800b45e:	f107 0310 	add.w	r3, r7, #16
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff fe64 	bl	800b130 <debug_uart_print>

        return false;
 800b468:	2300      	movs	r3, #0
 800b46a:	e01c      	b.n	800b4a6 <port_rfid_command+0x12e>
    }

    // Read out FIFO
    for (uint8_t i = 0; i < count; i++) {
 800b46c:	2300      	movs	r3, #0
 800b46e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800b472:	e00d      	b.n	800b490 <port_rfid_command+0x118>
        response[i] = port_rfid_read_reg(REG_FIFO_DATA);
 800b474:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	18d4      	adds	r4, r2, r3
 800b47c:	2009      	movs	r0, #9
 800b47e:	f7ff ff4f 	bl	800b320 <port_rfid_read_reg>
 800b482:	4603      	mov	r3, r0
 800b484:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < count; i++) {
 800b486:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b48a:	3301      	adds	r3, #1
 800b48c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800b490:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800b494:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800b498:	429a      	cmp	r2, r3
 800b49a:	d3eb      	bcc.n	800b474 <port_rfid_command+0xfc>
    }
    *resp_len = count;
 800b49c:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	601a      	str	r2, [r3, #0]
    return true;
 800b4a4:	2301      	movs	r3, #1
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3764      	adds	r7, #100	; 0x64
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd90      	pop	{r4, r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	0800d658 	.word	0x0800d658

0800b4b4 <port_rfid_requestA>:

bool port_rfid_requestA(void) {
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b094      	sub	sp, #80	; 0x50
 800b4b8:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x26;  // REQA (7-bit, pero lo mandamos como 8 bits)
 800b4ba:	2326      	movs	r3, #38	; 0x26
 800b4bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    uint8_t response[10];
    size_t  response_len = sizeof(response);
 800b4c0:	230a      	movs	r3, #10
 800b4c2:	643b      	str	r3, [r7, #64]	; 0x40

    if (!port_rfid_command(&cmd, 1, response, &response_len)) {
 800b4c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b4c8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b4cc:	f107 004f 	add.w	r0, r7, #79	; 0x4f
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	f7ff ff51 	bl	800b378 <port_rfid_command>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f083 0301 	eor.w	r3, r3, #1
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d004      	beq.n	800b4ec <port_rfid_requestA+0x38>
        debug_uart_print("REQA failed\r\n");
 800b4e2:	480a      	ldr	r0, [pc, #40]	; (800b50c <port_rfid_requestA+0x58>)
 800b4e4:	f7ff fe24 	bl	800b130 <debug_uart_print>
        return false;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	e00a      	b.n	800b502 <port_rfid_requestA+0x4e>
    }

    char buf[64];
    sprintf(buf, "REQA OK, got %u bytes\r\n", (unsigned int)response_len);
 800b4ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4ee:	463b      	mov	r3, r7
 800b4f0:	4907      	ldr	r1, [pc, #28]	; (800b510 <port_rfid_requestA+0x5c>)
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 fed0 	bl	800c298 <siprintf>
    debug_uart_print(buf);
 800b4f8:	463b      	mov	r3, r7
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff fe18 	bl	800b130 <debug_uart_print>
    return true;
 800b500:	2301      	movs	r3, #1
}
 800b502:	4618      	mov	r0, r3
 800b504:	3750      	adds	r7, #80	; 0x50
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	0800d678 	.word	0x0800d678
 800b510:	0800d688 	.word	0x0800d688

0800b514 <port_rfid_init>:

/**
 * @brief Initialize the RC522 chip.
 */
bool port_rfid_init(void) {
 800b514:	b580      	push	{r7, lr}
 800b516:	b092      	sub	sp, #72	; 0x48
 800b518:	af00      	add	r7, sp, #0
    // Ensure CS is high
    _cs_high();
 800b51a:	f7ff fecd 	bl	800b2b8 <_cs_high>
    HAL_Delay(50);
 800b51e:	2032      	movs	r0, #50	; 0x32
 800b520:	f7f5 fe36 	bl	8001190 <HAL_Delay>

    // Reset via command
    port_rfid_write_reg(REG_COMMAND, CMD_IDLE);
 800b524:	2100      	movs	r1, #0
 800b526:	2001      	movs	r0, #1
 800b528:	f7ff fed2 	bl	800b2d0 <port_rfid_write_reg>
    // Turn on antenna: TxControlReg bit 0x03
    port_rfid_write_reg(REG_TX_CONTROL, 0x03);
 800b52c:	2103      	movs	r1, #3
 800b52e:	2014      	movs	r0, #20
 800b530:	f7ff fece 	bl	800b2d0 <port_rfid_write_reg>

    uint8_t version = port_rfid_read_reg(RFID_REG_VERSION);
 800b534:	2037      	movs	r0, #55	; 0x37
 800b536:	f7ff fef3 	bl	800b320 <port_rfid_read_reg>
 800b53a:	4603      	mov	r3, r0
 800b53c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    char buf[64];
    sprintf(buf, "Versión chip RFID: 0x%02X\r\n", version);
 800b540:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800b544:	1d3b      	adds	r3, r7, #4
 800b546:	4907      	ldr	r1, [pc, #28]	; (800b564 <port_rfid_init+0x50>)
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fea5 	bl	800c298 <siprintf>
    debug_uart_print(buf);
 800b54e:	1d3b      	adds	r3, r7, #4
 800b550:	4618      	mov	r0, r3
 800b552:	f7ff fded 	bl	800b130 <debug_uart_print>

    port_rfid_requestA();
 800b556:	f7ff ffad 	bl	800b4b4 <port_rfid_requestA>

    return true;
 800b55a:	2301      	movs	r3, #1
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3748      	adds	r7, #72	; 0x48
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	0800d6a0 	.word	0x0800d6a0

0800b568 <port_rfid_read_uid>:

/**
 * @brief Read one UID via anti‐collision cascade.
 */
bool port_rfid_read_uid(uint8_t *uid, size_t *uid_len) {
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
    uint8_t cmd[] = { PICC_ANTICOLL, PICC_ANTICOLL_NVB };
 800b572:	f242 0393 	movw	r3, #8339	; 0x2093
 800b576:	83bb      	strh	r3, [r7, #28]
    uint8_t resp[10];
    size_t resp_sz = sizeof(resp);
 800b578:	230a      	movs	r3, #10
 800b57a:	60fb      	str	r3, [r7, #12]

    if (!port_rfid_command(cmd, sizeof(cmd), resp, &resp_sz)) {
 800b57c:	f107 030c 	add.w	r3, r7, #12
 800b580:	f107 0210 	add.w	r2, r7, #16
 800b584:	f107 001c 	add.w	r0, r7, #28
 800b588:	2102      	movs	r1, #2
 800b58a:	f7ff fef5 	bl	800b378 <port_rfid_command>
 800b58e:	4603      	mov	r3, r0
 800b590:	f083 0301 	eor.w	r3, r3, #1
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <port_rfid_read_uid+0x36>
        return false;
 800b59a:	2300      	movs	r3, #0
 800b59c:	e00b      	b.n	800b5b6 <port_rfid_read_uid+0x4e>
    }

    if (resp_sz < 5) {
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b04      	cmp	r3, #4
 800b5a2:	d801      	bhi.n	800b5a8 <port_rfid_read_uid+0x40>
        return false;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	e006      	b.n	800b5b6 <port_rfid_read_uid+0x4e>
 800b5a8:	693a      	ldr	r2, [r7, #16]
    }

    memcpy(uid, resp, 4);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	601a      	str	r2, [r3, #0]
    *uid_len = 4;
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2204      	movs	r2, #4
 800b5b2:	601a      	str	r2, [r3, #0]
    return true;
 800b5b4:	2301      	movs	r3, #1
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3720      	adds	r7, #32
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <project_main>:
// === Public variable definitions ================================================================================= //
// === Private variable definitions ================================================================================ //
// === Private function implementation ============================================================================= //
// === Public function implementation ============================================================================== //

void project_main() { app_entry_point(); }
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	f7ff fa7d 	bl	800aac0 <app_entry_point>
 800b5c6:	bf00      	nop
 800b5c8:	bd80      	pop	{r7, pc}
	...

0800b5cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4912      	ldr	r1, [pc, #72]	; (800b61c <MX_USB_DEVICE_Init+0x50>)
 800b5d4:	4812      	ldr	r0, [pc, #72]	; (800b620 <MX_USB_DEVICE_Init+0x54>)
 800b5d6:	f7fd fee7 	bl	80093a8 <USBD_Init>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d001      	beq.n	800b5e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b5e0:	f7f5 fa74 	bl	8000acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b5e4:	490f      	ldr	r1, [pc, #60]	; (800b624 <MX_USB_DEVICE_Init+0x58>)
 800b5e6:	480e      	ldr	r0, [pc, #56]	; (800b620 <MX_USB_DEVICE_Init+0x54>)
 800b5e8:	f7fd ff0e 	bl	8009408 <USBD_RegisterClass>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b5f2:	f7f5 fa6b 	bl	8000acc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b5f6:	490c      	ldr	r1, [pc, #48]	; (800b628 <MX_USB_DEVICE_Init+0x5c>)
 800b5f8:	4809      	ldr	r0, [pc, #36]	; (800b620 <MX_USB_DEVICE_Init+0x54>)
 800b5fa:	f7fd fe45 	bl	8009288 <USBD_CDC_RegisterInterface>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d001      	beq.n	800b608 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b604:	f7f5 fa62 	bl	8000acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b608:	4805      	ldr	r0, [pc, #20]	; (800b620 <MX_USB_DEVICE_Init+0x54>)
 800b60a:	f7fd ff33 	bl	8009474 <USBD_Start>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d001      	beq.n	800b618 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b614:	f7f5 fa5a 	bl	8000acc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b618:	bf00      	nop
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	200000ac 	.word	0x200000ac
 800b620:	20000658 	.word	0x20000658
 800b624:	20000018 	.word	0x20000018
 800b628:	20000098 	.word	0x20000098

0800b62c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b630:	2200      	movs	r2, #0
 800b632:	4905      	ldr	r1, [pc, #20]	; (800b648 <CDC_Init_FS+0x1c>)
 800b634:	4805      	ldr	r0, [pc, #20]	; (800b64c <CDC_Init_FS+0x20>)
 800b636:	f7fd fe41 	bl	80092bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b63a:	4905      	ldr	r1, [pc, #20]	; (800b650 <CDC_Init_FS+0x24>)
 800b63c:	4803      	ldr	r0, [pc, #12]	; (800b64c <CDC_Init_FS+0x20>)
 800b63e:	f7fd fe5f 	bl	8009300 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b642:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b644:	4618      	mov	r0, r3
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20001134 	.word	0x20001134
 800b64c:	20000658 	.word	0x20000658
 800b650:	20000934 	.word	0x20000934

0800b654 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b654:	b480      	push	{r7}
 800b656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b658:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	6039      	str	r1, [r7, #0]
 800b66e:	71fb      	strb	r3, [r7, #7]
 800b670:	4613      	mov	r3, r2
 800b672:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b674:	79fb      	ldrb	r3, [r7, #7]
 800b676:	2b23      	cmp	r3, #35	; 0x23
 800b678:	d84a      	bhi.n	800b710 <CDC_Control_FS+0xac>
 800b67a:	a201      	add	r2, pc, #4	; (adr r2, 800b680 <CDC_Control_FS+0x1c>)
 800b67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b680:	0800b711 	.word	0x0800b711
 800b684:	0800b711 	.word	0x0800b711
 800b688:	0800b711 	.word	0x0800b711
 800b68c:	0800b711 	.word	0x0800b711
 800b690:	0800b711 	.word	0x0800b711
 800b694:	0800b711 	.word	0x0800b711
 800b698:	0800b711 	.word	0x0800b711
 800b69c:	0800b711 	.word	0x0800b711
 800b6a0:	0800b711 	.word	0x0800b711
 800b6a4:	0800b711 	.word	0x0800b711
 800b6a8:	0800b711 	.word	0x0800b711
 800b6ac:	0800b711 	.word	0x0800b711
 800b6b0:	0800b711 	.word	0x0800b711
 800b6b4:	0800b711 	.word	0x0800b711
 800b6b8:	0800b711 	.word	0x0800b711
 800b6bc:	0800b711 	.word	0x0800b711
 800b6c0:	0800b711 	.word	0x0800b711
 800b6c4:	0800b711 	.word	0x0800b711
 800b6c8:	0800b711 	.word	0x0800b711
 800b6cc:	0800b711 	.word	0x0800b711
 800b6d0:	0800b711 	.word	0x0800b711
 800b6d4:	0800b711 	.word	0x0800b711
 800b6d8:	0800b711 	.word	0x0800b711
 800b6dc:	0800b711 	.word	0x0800b711
 800b6e0:	0800b711 	.word	0x0800b711
 800b6e4:	0800b711 	.word	0x0800b711
 800b6e8:	0800b711 	.word	0x0800b711
 800b6ec:	0800b711 	.word	0x0800b711
 800b6f0:	0800b711 	.word	0x0800b711
 800b6f4:	0800b711 	.word	0x0800b711
 800b6f8:	0800b711 	.word	0x0800b711
 800b6fc:	0800b711 	.word	0x0800b711
 800b700:	0800b711 	.word	0x0800b711
 800b704:	0800b711 	.word	0x0800b711
 800b708:	0800b711 	.word	0x0800b711
 800b70c:	0800b711 	.word	0x0800b711
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b710:	bf00      	nop
  }

  return (USBD_OK);
 800b712:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b714:	4618      	mov	r0, r3
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > 0) {
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d005      	beq.n	800b73e <CDC_Receive_FS+0x1e>
	    usb_cdc_receiveCallback(Buf, *Len);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4619      	mov	r1, r3
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff fd2b 	bl	800b194 <usb_cdc_receiveCallback>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b73e:	6879      	ldr	r1, [r7, #4]
 800b740:	4805      	ldr	r0, [pc, #20]	; (800b758 <CDC_Receive_FS+0x38>)
 800b742:	f7fd fddd 	bl	8009300 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b746:	4804      	ldr	r0, [pc, #16]	; (800b758 <CDC_Receive_FS+0x38>)
 800b748:	f7fd fdf8 	bl	800933c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b74c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20000658 	.word	0x20000658

0800b75c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b087      	sub	sp, #28
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	4613      	mov	r3, r2
 800b768:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b76e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b772:	4618      	mov	r0, r3
 800b774:	371c      	adds	r7, #28
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
	...

0800b780 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	6039      	str	r1, [r7, #0]
 800b78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	2212      	movs	r2, #18
 800b790:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b792:	4b03      	ldr	r3, [pc, #12]	; (800b7a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b794:	4618      	mov	r0, r3
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	200000cc 	.word	0x200000cc

0800b7a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	6039      	str	r1, [r7, #0]
 800b7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	2204      	movs	r2, #4
 800b7b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7b6:	4b03      	ldr	r3, [pc, #12]	; (800b7c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	200000ec 	.word	0x200000ec

0800b7c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	6039      	str	r1, [r7, #0]
 800b7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7d4:	79fb      	ldrb	r3, [r7, #7]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d105      	bne.n	800b7e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7da:	683a      	ldr	r2, [r7, #0]
 800b7dc:	4907      	ldr	r1, [pc, #28]	; (800b7fc <USBD_FS_ProductStrDescriptor+0x34>)
 800b7de:	4808      	ldr	r0, [pc, #32]	; (800b800 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7e0:	f7ff f824 	bl	800a82c <USBD_GetString>
 800b7e4:	e004      	b.n	800b7f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	4904      	ldr	r1, [pc, #16]	; (800b7fc <USBD_FS_ProductStrDescriptor+0x34>)
 800b7ea:	4805      	ldr	r0, [pc, #20]	; (800b800 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7ec:	f7ff f81e 	bl	800a82c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7f0:	4b02      	ldr	r3, [pc, #8]	; (800b7fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	20001934 	.word	0x20001934
 800b800:	0800d6c0 	.word	0x0800d6c0

0800b804 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	4603      	mov	r3, r0
 800b80c:	6039      	str	r1, [r7, #0]
 800b80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	4904      	ldr	r1, [pc, #16]	; (800b824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b814:	4804      	ldr	r0, [pc, #16]	; (800b828 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b816:	f7ff f809 	bl	800a82c <USBD_GetString>
  return USBD_StrDesc;
 800b81a:	4b02      	ldr	r3, [pc, #8]	; (800b824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20001934 	.word	0x20001934
 800b828:	0800d6d8 	.word	0x0800d6d8

0800b82c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	6039      	str	r1, [r7, #0]
 800b836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	221a      	movs	r2, #26
 800b83c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b83e:	f000 f855 	bl	800b8ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b842:	4b02      	ldr	r3, [pc, #8]	; (800b84c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b844:	4618      	mov	r0, r3
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	200000f0 	.word	0x200000f0

0800b850 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	6039      	str	r1, [r7, #0]
 800b85a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d105      	bne.n	800b86e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	4907      	ldr	r1, [pc, #28]	; (800b884 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b866:	4808      	ldr	r0, [pc, #32]	; (800b888 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b868:	f7fe ffe0 	bl	800a82c <USBD_GetString>
 800b86c:	e004      	b.n	800b878 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b86e:	683a      	ldr	r2, [r7, #0]
 800b870:	4904      	ldr	r1, [pc, #16]	; (800b884 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b872:	4805      	ldr	r0, [pc, #20]	; (800b888 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b874:	f7fe ffda 	bl	800a82c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b878:	4b02      	ldr	r3, [pc, #8]	; (800b884 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20001934 	.word	0x20001934
 800b888:	0800d6ec 	.word	0x0800d6ec

0800b88c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	6039      	str	r1, [r7, #0]
 800b896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b898:	79fb      	ldrb	r3, [r7, #7]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d105      	bne.n	800b8aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	4907      	ldr	r1, [pc, #28]	; (800b8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8a2:	4808      	ldr	r0, [pc, #32]	; (800b8c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8a4:	f7fe ffc2 	bl	800a82c <USBD_GetString>
 800b8a8:	e004      	b.n	800b8b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	4904      	ldr	r1, [pc, #16]	; (800b8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8ae:	4805      	ldr	r0, [pc, #20]	; (800b8c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8b0:	f7fe ffbc 	bl	800a82c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8b4:	4b02      	ldr	r3, [pc, #8]	; (800b8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20001934 	.word	0x20001934
 800b8c4:	0800d6f8 	.word	0x0800d6f8

0800b8c8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	6039      	str	r1, [r7, #0]
 800b8d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	220c      	movs	r2, #12
 800b8d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b8da:	4b03      	ldr	r3, [pc, #12]	; (800b8e8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	200000e0 	.word	0x200000e0

0800b8ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b8f2:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <Get_SerialNum+0x44>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b8f8:	4b0e      	ldr	r3, [pc, #56]	; (800b934 <Get_SerialNum+0x48>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b8fe:	4b0e      	ldr	r3, [pc, #56]	; (800b938 <Get_SerialNum+0x4c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4413      	add	r3, r2
 800b90a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d009      	beq.n	800b926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b912:	2208      	movs	r2, #8
 800b914:	4909      	ldr	r1, [pc, #36]	; (800b93c <Get_SerialNum+0x50>)
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f000 f814 	bl	800b944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b91c:	2204      	movs	r2, #4
 800b91e:	4908      	ldr	r1, [pc, #32]	; (800b940 <Get_SerialNum+0x54>)
 800b920:	68b8      	ldr	r0, [r7, #8]
 800b922:	f000 f80f 	bl	800b944 <IntToUnicode>
  }
}
 800b926:	bf00      	nop
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	1fff7a10 	.word	0x1fff7a10
 800b934:	1fff7a14 	.word	0x1fff7a14
 800b938:	1fff7a18 	.word	0x1fff7a18
 800b93c:	200000f2 	.word	0x200000f2
 800b940:	20000102 	.word	0x20000102

0800b944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b944:	b480      	push	{r7}
 800b946:	b087      	sub	sp, #28
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	4613      	mov	r3, r2
 800b950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b956:	2300      	movs	r3, #0
 800b958:	75fb      	strb	r3, [r7, #23]
 800b95a:	e027      	b.n	800b9ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	0f1b      	lsrs	r3, r3, #28
 800b960:	2b09      	cmp	r3, #9
 800b962:	d80b      	bhi.n	800b97c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	0f1b      	lsrs	r3, r3, #28
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	4619      	mov	r1, r3
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	440b      	add	r3, r1
 800b974:	3230      	adds	r2, #48	; 0x30
 800b976:	b2d2      	uxtb	r2, r2
 800b978:	701a      	strb	r2, [r3, #0]
 800b97a:	e00a      	b.n	800b992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	0f1b      	lsrs	r3, r3, #28
 800b980:	b2da      	uxtb	r2, r3
 800b982:	7dfb      	ldrb	r3, [r7, #23]
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	4619      	mov	r1, r3
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	440b      	add	r3, r1
 800b98c:	3237      	adds	r2, #55	; 0x37
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	011b      	lsls	r3, r3, #4
 800b996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b998:	7dfb      	ldrb	r3, [r7, #23]
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	3301      	adds	r3, #1
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	75fb      	strb	r3, [r7, #23]
 800b9ac:	7dfa      	ldrb	r2, [r7, #23]
 800b9ae:	79fb      	ldrb	r3, [r7, #7]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d3d3      	bcc.n	800b95c <IntToUnicode+0x18>
  }
}
 800b9b4:	bf00      	nop
 800b9b6:	bf00      	nop
 800b9b8:	371c      	adds	r7, #28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b0a0      	sub	sp, #128	; 0x80
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	605a      	str	r2, [r3, #4]
 800b9d6:	609a      	str	r2, [r3, #8]
 800b9d8:	60da      	str	r2, [r3, #12]
 800b9da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b9dc:	f107 0310 	add.w	r3, r7, #16
 800b9e0:	225c      	movs	r2, #92	; 0x5c
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 fce4 	bl	800c3b2 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9f2:	d149      	bne.n	800ba88 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b9f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b9fe:	f107 0310 	add.w	r3, r7, #16
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7f8 fbf0 	bl	80041e8 <HAL_RCCEx_PeriphCLKConfig>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800ba0e:	f7f5 f85d 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba12:	2300      	movs	r3, #0
 800ba14:	60fb      	str	r3, [r7, #12]
 800ba16:	4b1e      	ldr	r3, [pc, #120]	; (800ba90 <HAL_PCD_MspInit+0xcc>)
 800ba18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba1a:	4a1d      	ldr	r2, [pc, #116]	; (800ba90 <HAL_PCD_MspInit+0xcc>)
 800ba1c:	f043 0301 	orr.w	r3, r3, #1
 800ba20:	6313      	str	r3, [r2, #48]	; 0x30
 800ba22:	4b1b      	ldr	r3, [pc, #108]	; (800ba90 <HAL_PCD_MspInit+0xcc>)
 800ba24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	60fb      	str	r3, [r7, #12]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ba2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ba32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba34:	2302      	movs	r3, #2
 800ba36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba40:	230a      	movs	r3, #10
 800ba42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4812      	ldr	r0, [pc, #72]	; (800ba94 <HAL_PCD_MspInit+0xd0>)
 800ba4c:	f7f6 fcf0 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba50:	4b0f      	ldr	r3, [pc, #60]	; (800ba90 <HAL_PCD_MspInit+0xcc>)
 800ba52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba54:	4a0e      	ldr	r2, [pc, #56]	; (800ba90 <HAL_PCD_MspInit+0xcc>)
 800ba56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba5a:	6353      	str	r3, [r2, #52]	; 0x34
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	60bb      	str	r3, [r7, #8]
 800ba60:	4b0b      	ldr	r3, [pc, #44]	; (800ba90 <HAL_PCD_MspInit+0xcc>)
 800ba62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba64:	4a0a      	ldr	r2, [pc, #40]	; (800ba90 <HAL_PCD_MspInit+0xcc>)
 800ba66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba6a:	6453      	str	r3, [r2, #68]	; 0x44
 800ba6c:	4b08      	ldr	r3, [pc, #32]	; (800ba90 <HAL_PCD_MspInit+0xcc>)
 800ba6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba74:	60bb      	str	r3, [r7, #8]
 800ba76:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba78:	2200      	movs	r2, #0
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	2043      	movs	r0, #67	; 0x43
 800ba7e:	f7f6 f89e 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba82:	2043      	movs	r0, #67	; 0x43
 800ba84:	f7f6 f8b7 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ba88:	bf00      	nop
 800ba8a:	3780      	adds	r7, #128	; 0x80
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	40023800 	.word	0x40023800
 800ba94:	40020000 	.word	0x40020000

0800ba98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f7fd fd2d 	bl	800950e <USBD_LL_SetupStage>
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800bace:	78fa      	ldrb	r2, [r7, #3]
 800bad0:	6879      	ldr	r1, [r7, #4]
 800bad2:	4613      	mov	r3, r2
 800bad4:	00db      	lsls	r3, r3, #3
 800bad6:	4413      	add	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	440b      	add	r3, r1
 800badc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	78fb      	ldrb	r3, [r7, #3]
 800bae4:	4619      	mov	r1, r3
 800bae6:	f7fd fd67 	bl	80095b8 <USBD_LL_DataOutStage>
}
 800baea:	bf00      	nop
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b082      	sub	sp, #8
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	460b      	mov	r3, r1
 800bafc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800bb04:	78fa      	ldrb	r2, [r7, #3]
 800bb06:	6879      	ldr	r1, [r7, #4]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	00db      	lsls	r3, r3, #3
 800bb0c:	4413      	add	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	440b      	add	r3, r1
 800bb12:	3320      	adds	r3, #32
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	f7fd fe00 	bl	800971e <USBD_LL_DataInStage>
}
 800bb1e:	bf00      	nop
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b082      	sub	sp, #8
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fd ff3a 	bl	80099ae <USBD_LL_SOF>
}
 800bb3a:	bf00      	nop
 800bb3c:	3708      	adds	r7, #8
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	79db      	ldrb	r3, [r3, #7]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bb56:	2300      	movs	r3, #0
 800bb58:	73fb      	strb	r3, [r7, #15]
 800bb5a:	e008      	b.n	800bb6e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	79db      	ldrb	r3, [r3, #7]
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d102      	bne.n	800bb6a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bb64:	2301      	movs	r3, #1
 800bb66:	73fb      	strb	r3, [r7, #15]
 800bb68:	e001      	b.n	800bb6e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bb6a:	f7f4 ffaf 	bl	8000acc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bb74:	7bfa      	ldrb	r2, [r7, #15]
 800bb76:	4611      	mov	r1, r2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7fd fed4 	bl	8009926 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fd fe7c 	bl	8009882 <USBD_LL_Reset>
}
 800bb8a:	bf00      	nop
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
	...

0800bb94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fd fecf 	bl	8009946 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	6812      	ldr	r2, [r2, #0]
 800bbb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbba:	f043 0301 	orr.w	r3, r3, #1
 800bbbe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	7adb      	ldrb	r3, [r3, #11]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d005      	beq.n	800bbd4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbc8:	4b04      	ldr	r3, [pc, #16]	; (800bbdc <HAL_PCD_SuspendCallback+0x48>)
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	4a03      	ldr	r2, [pc, #12]	; (800bbdc <HAL_PCD_SuspendCallback+0x48>)
 800bbce:	f043 0306 	orr.w	r3, r3, #6
 800bbd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bbd4:	bf00      	nop
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	e000ed00 	.word	0xe000ed00

0800bbe0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fd fec5 	bl	800997e <USBD_LL_Resume>
}
 800bbf4:	bf00      	nop
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	460b      	mov	r3, r1
 800bc06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bc0e:	78fa      	ldrb	r2, [r7, #3]
 800bc10:	4611      	mov	r1, r2
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fd ff1d 	bl	8009a52 <USBD_LL_IsoOUTIncomplete>
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bc32:	78fa      	ldrb	r2, [r7, #3]
 800bc34:	4611      	mov	r1, r2
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fd fed9 	bl	80099ee <USBD_LL_IsoINIncomplete>
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fd ff2f 	bl	8009ab6 <USBD_LL_DevConnected>
}
 800bc58:	bf00      	nop
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fd ff2c 	bl	8009acc <USBD_LL_DevDisconnected>
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d13c      	bne.n	800bd06 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bc8c:	4a20      	ldr	r2, [pc, #128]	; (800bd10 <USBD_LL_Init+0x94>)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a1e      	ldr	r2, [pc, #120]	; (800bd10 <USBD_LL_Init+0x94>)
 800bc98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc9c:	4b1c      	ldr	r3, [pc, #112]	; (800bd10 <USBD_LL_Init+0x94>)
 800bc9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bca2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bca4:	4b1a      	ldr	r3, [pc, #104]	; (800bd10 <USBD_LL_Init+0x94>)
 800bca6:	2206      	movs	r2, #6
 800bca8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bcaa:	4b19      	ldr	r3, [pc, #100]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcac:	2202      	movs	r2, #2
 800bcae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bcb0:	4b17      	ldr	r3, [pc, #92]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bcb6:	4b16      	ldr	r3, [pc, #88]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcb8:	2202      	movs	r2, #2
 800bcba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bcbc:	4b14      	ldr	r3, [pc, #80]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bcc2:	4b13      	ldr	r3, [pc, #76]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bcc8:	4b11      	ldr	r3, [pc, #68]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bcce:	4b10      	ldr	r3, [pc, #64]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bcd4:	4b0e      	ldr	r3, [pc, #56]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bcda:	480d      	ldr	r0, [pc, #52]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcdc:	f7f6 fecc 	bl	8002a78 <HAL_PCD_Init>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bce6:	f7f4 fef1 	bl	8000acc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bcea:	2180      	movs	r1, #128	; 0x80
 800bcec:	4808      	ldr	r0, [pc, #32]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcee:	f7f8 f92c 	bl	8003f4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bcf2:	2240      	movs	r2, #64	; 0x40
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	4806      	ldr	r0, [pc, #24]	; (800bd10 <USBD_LL_Init+0x94>)
 800bcf8:	f7f8 f8e0 	bl	8003ebc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bcfc:	2280      	movs	r2, #128	; 0x80
 800bcfe:	2101      	movs	r1, #1
 800bd00:	4803      	ldr	r0, [pc, #12]	; (800bd10 <USBD_LL_Init+0x94>)
 800bd02:	f7f8 f8db 	bl	8003ebc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20001b34 	.word	0x20001b34

0800bd14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7f6 ffba 	bl	8002ca4 <HAL_PCD_Start>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f000 f990 	bl	800c05c <USBD_Get_USB_Status>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd40:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	4608      	mov	r0, r1
 800bd54:	4611      	mov	r1, r2
 800bd56:	461a      	mov	r2, r3
 800bd58:	4603      	mov	r3, r0
 800bd5a:	70fb      	strb	r3, [r7, #3]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	70bb      	strb	r3, [r7, #2]
 800bd60:	4613      	mov	r3, r2
 800bd62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd72:	78bb      	ldrb	r3, [r7, #2]
 800bd74:	883a      	ldrh	r2, [r7, #0]
 800bd76:	78f9      	ldrb	r1, [r7, #3]
 800bd78:	f7f7 fcbb 	bl	80036f2 <HAL_PCD_EP_Open>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 f96a 	bl	800c05c <USBD_Get_USB_Status>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	460b      	mov	r3, r1
 800bda0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda2:	2300      	movs	r3, #0
 800bda4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdb0:	78fa      	ldrb	r2, [r7, #3]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f7 fd06 	bl	80037c6 <HAL_PCD_EP_Close>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f000 f94b 	bl	800c05c <USBD_Get_USB_Status>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdca:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3710      	adds	r7, #16
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde0:	2300      	movs	r3, #0
 800bde2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bdee:	78fa      	ldrb	r2, [r7, #3]
 800bdf0:	4611      	mov	r1, r2
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7f7 fdbe 	bl	8003974 <HAL_PCD_EP_SetStall>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdfc:	7bfb      	ldrb	r3, [r7, #15]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 f92c 	bl	800c05c <USBD_Get_USB_Status>
 800be04:	4603      	mov	r3, r0
 800be06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be08:	7bbb      	ldrb	r3, [r7, #14]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	460b      	mov	r3, r1
 800be1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be22:	2300      	movs	r3, #0
 800be24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be2c:	78fa      	ldrb	r2, [r7, #3]
 800be2e:	4611      	mov	r1, r2
 800be30:	4618      	mov	r0, r3
 800be32:	f7f7 fe02 	bl	8003a3a <HAL_PCD_EP_ClrStall>
 800be36:	4603      	mov	r3, r0
 800be38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 f90d 	bl	800c05c <USBD_Get_USB_Status>
 800be42:	4603      	mov	r3, r0
 800be44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be46:	7bbb      	ldrb	r3, [r7, #14]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	460b      	mov	r3, r1
 800be5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	da0b      	bge.n	800be84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be6c:	78fb      	ldrb	r3, [r7, #3]
 800be6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be72:	68f9      	ldr	r1, [r7, #12]
 800be74:	4613      	mov	r3, r2
 800be76:	00db      	lsls	r3, r3, #3
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	440b      	add	r3, r1
 800be7e:	3316      	adds	r3, #22
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	e00b      	b.n	800be9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be84:	78fb      	ldrb	r3, [r7, #3]
 800be86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be8a:	68f9      	ldr	r1, [r7, #12]
 800be8c:	4613      	mov	r3, r2
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	4413      	add	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	440b      	add	r3, r1
 800be96:	f203 2356 	addw	r3, r3, #598	; 0x256
 800be9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3714      	adds	r7, #20
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr

0800bea8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	460b      	mov	r3, r1
 800beb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bec2:	78fa      	ldrb	r2, [r7, #3]
 800bec4:	4611      	mov	r1, r2
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7f7 fbef 	bl	80036aa <HAL_PCD_SetAddress>
 800becc:	4603      	mov	r3, r0
 800bece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bed0:	7bfb      	ldrb	r3, [r7, #15]
 800bed2:	4618      	mov	r0, r3
 800bed4:	f000 f8c2 	bl	800c05c <USBD_Get_USB_Status>
 800bed8:	4603      	mov	r3, r0
 800beda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bedc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b086      	sub	sp, #24
 800beea:	af00      	add	r7, sp, #0
 800beec:	60f8      	str	r0, [r7, #12]
 800beee:	607a      	str	r2, [r7, #4]
 800bef0:	603b      	str	r3, [r7, #0]
 800bef2:	460b      	mov	r3, r1
 800bef4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef6:	2300      	movs	r3, #0
 800bef8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befa:	2300      	movs	r3, #0
 800befc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf04:	7af9      	ldrb	r1, [r7, #11]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	f7f7 fcf9 	bl	8003900 <HAL_PCD_EP_Transmit>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 f8a1 	bl	800c05c <USBD_Get_USB_Status>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf1e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3718      	adds	r7, #24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	607a      	str	r2, [r7, #4]
 800bf32:	603b      	str	r3, [r7, #0]
 800bf34:	460b      	mov	r3, r1
 800bf36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf46:	7af9      	ldrb	r1, [r7, #11]
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	f7f7 fc85 	bl	800385a <HAL_PCD_EP_Receive>
 800bf50:	4603      	mov	r3, r0
 800bf52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf54:	7dfb      	ldrb	r3, [r7, #23]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 f880 	bl	800c05c <USBD_Get_USB_Status>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf60:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3718      	adds	r7, #24
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b082      	sub	sp, #8
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
 800bf72:	460b      	mov	r3, r1
 800bf74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf7c:	78fa      	ldrb	r2, [r7, #3]
 800bf7e:	4611      	mov	r1, r2
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7f7 fca5 	bl	80038d0 <HAL_PCD_EP_GetRxCount>
 800bf86:	4603      	mov	r3, r0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bf9c:	78fb      	ldrb	r3, [r7, #3]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d002      	beq.n	800bfa8 <HAL_PCDEx_LPM_Callback+0x18>
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d01f      	beq.n	800bfe6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bfa6:	e03b      	b.n	800c020 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	7adb      	ldrb	r3, [r3, #11]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d007      	beq.n	800bfc0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800bfb0:	f7f4 fb2e 	bl	8000610 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfb4:	4b1c      	ldr	r3, [pc, #112]	; (800c028 <HAL_PCDEx_LPM_Callback+0x98>)
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	4a1b      	ldr	r2, [pc, #108]	; (800c028 <HAL_PCDEx_LPM_Callback+0x98>)
 800bfba:	f023 0306 	bic.w	r3, r3, #6
 800bfbe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	6812      	ldr	r2, [r2, #0]
 800bfce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfd2:	f023 0301 	bic.w	r3, r3, #1
 800bfd6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fd fccd 	bl	800997e <USBD_LL_Resume>
    break;
 800bfe4:	e01c      	b.n	800c020 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	6812      	ldr	r2, [r2, #0]
 800bff4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bff8:	f043 0301 	orr.w	r3, r3, #1
 800bffc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c004:	4618      	mov	r0, r3
 800c006:	f7fd fc9e 	bl	8009946 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	7adb      	ldrb	r3, [r3, #11]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d005      	beq.n	800c01e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c012:	4b05      	ldr	r3, [pc, #20]	; (800c028 <HAL_PCDEx_LPM_Callback+0x98>)
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	4a04      	ldr	r2, [pc, #16]	; (800c028 <HAL_PCDEx_LPM_Callback+0x98>)
 800c018:	f043 0306 	orr.w	r3, r3, #6
 800c01c:	6113      	str	r3, [r2, #16]
    break;
 800c01e:	bf00      	nop
}
 800c020:	bf00      	nop
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	e000ed00 	.word	0xe000ed00

0800c02c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c034:	4b03      	ldr	r3, [pc, #12]	; (800c044 <USBD_static_malloc+0x18>)
}
 800c036:	4618      	mov	r0, r3
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20002018 	.word	0x20002018

0800c048 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]

}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	4603      	mov	r3, r0
 800c064:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c06a:	79fb      	ldrb	r3, [r7, #7]
 800c06c:	2b03      	cmp	r3, #3
 800c06e:	d817      	bhi.n	800c0a0 <USBD_Get_USB_Status+0x44>
 800c070:	a201      	add	r2, pc, #4	; (adr r2, 800c078 <USBD_Get_USB_Status+0x1c>)
 800c072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c076:	bf00      	nop
 800c078:	0800c089 	.word	0x0800c089
 800c07c:	0800c08f 	.word	0x0800c08f
 800c080:	0800c095 	.word	0x0800c095
 800c084:	0800c09b 	.word	0x0800c09b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	73fb      	strb	r3, [r7, #15]
    break;
 800c08c:	e00b      	b.n	800c0a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c08e:	2303      	movs	r3, #3
 800c090:	73fb      	strb	r3, [r7, #15]
    break;
 800c092:	e008      	b.n	800c0a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c094:	2301      	movs	r3, #1
 800c096:	73fb      	strb	r3, [r7, #15]
    break;
 800c098:	e005      	b.n	800c0a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c09a:	2303      	movs	r3, #3
 800c09c:	73fb      	strb	r3, [r7, #15]
    break;
 800c09e:	e002      	b.n	800c0a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a4:	bf00      	nop
  }
  return usb_status;
 800c0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <__assert_func>:
 800c0b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0b6:	4614      	mov	r4, r2
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	4b09      	ldr	r3, [pc, #36]	; (800c0e0 <__assert_func+0x2c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4605      	mov	r5, r0
 800c0c0:	68d8      	ldr	r0, [r3, #12]
 800c0c2:	b14c      	cbz	r4, 800c0d8 <__assert_func+0x24>
 800c0c4:	4b07      	ldr	r3, [pc, #28]	; (800c0e4 <__assert_func+0x30>)
 800c0c6:	9100      	str	r1, [sp, #0]
 800c0c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0cc:	4906      	ldr	r1, [pc, #24]	; (800c0e8 <__assert_func+0x34>)
 800c0ce:	462b      	mov	r3, r5
 800c0d0:	f000 f8b2 	bl	800c238 <fiprintf>
 800c0d4:	f000 f9f7 	bl	800c4c6 <abort>
 800c0d8:	4b04      	ldr	r3, [pc, #16]	; (800c0ec <__assert_func+0x38>)
 800c0da:	461c      	mov	r4, r3
 800c0dc:	e7f3      	b.n	800c0c6 <__assert_func+0x12>
 800c0de:	bf00      	nop
 800c0e0:	20000164 	.word	0x20000164
 800c0e4:	0800d73e 	.word	0x0800d73e
 800c0e8:	0800d74b 	.word	0x0800d74b
 800c0ec:	0800d779 	.word	0x0800d779

0800c0f0 <std>:
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	b510      	push	{r4, lr}
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	e9c0 3300 	strd	r3, r3, [r0]
 800c0fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0fe:	6083      	str	r3, [r0, #8]
 800c100:	8181      	strh	r1, [r0, #12]
 800c102:	6643      	str	r3, [r0, #100]	; 0x64
 800c104:	81c2      	strh	r2, [r0, #14]
 800c106:	6183      	str	r3, [r0, #24]
 800c108:	4619      	mov	r1, r3
 800c10a:	2208      	movs	r2, #8
 800c10c:	305c      	adds	r0, #92	; 0x5c
 800c10e:	f000 f950 	bl	800c3b2 <memset>
 800c112:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <std+0x58>)
 800c114:	6263      	str	r3, [r4, #36]	; 0x24
 800c116:	4b0d      	ldr	r3, [pc, #52]	; (800c14c <std+0x5c>)
 800c118:	62a3      	str	r3, [r4, #40]	; 0x28
 800c11a:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <std+0x60>)
 800c11c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c11e:	4b0d      	ldr	r3, [pc, #52]	; (800c154 <std+0x64>)
 800c120:	6323      	str	r3, [r4, #48]	; 0x30
 800c122:	4b0d      	ldr	r3, [pc, #52]	; (800c158 <std+0x68>)
 800c124:	6224      	str	r4, [r4, #32]
 800c126:	429c      	cmp	r4, r3
 800c128:	d006      	beq.n	800c138 <std+0x48>
 800c12a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c12e:	4294      	cmp	r4, r2
 800c130:	d002      	beq.n	800c138 <std+0x48>
 800c132:	33d0      	adds	r3, #208	; 0xd0
 800c134:	429c      	cmp	r4, r3
 800c136:	d105      	bne.n	800c144 <std+0x54>
 800c138:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c140:	f000 b9b0 	b.w	800c4a4 <__retarget_lock_init_recursive>
 800c144:	bd10      	pop	{r4, pc}
 800c146:	bf00      	nop
 800c148:	0800c2d9 	.word	0x0800c2d9
 800c14c:	0800c2fb 	.word	0x0800c2fb
 800c150:	0800c333 	.word	0x0800c333
 800c154:	0800c357 	.word	0x0800c357
 800c158:	20002238 	.word	0x20002238

0800c15c <stdio_exit_handler>:
 800c15c:	4a02      	ldr	r2, [pc, #8]	; (800c168 <stdio_exit_handler+0xc>)
 800c15e:	4903      	ldr	r1, [pc, #12]	; (800c16c <stdio_exit_handler+0x10>)
 800c160:	4803      	ldr	r0, [pc, #12]	; (800c170 <stdio_exit_handler+0x14>)
 800c162:	f000 b87b 	b.w	800c25c <_fwalk_sglue>
 800c166:	bf00      	nop
 800c168:	2000010c 	.word	0x2000010c
 800c16c:	0800d029 	.word	0x0800d029
 800c170:	20000118 	.word	0x20000118

0800c174 <cleanup_stdio>:
 800c174:	6841      	ldr	r1, [r0, #4]
 800c176:	4b0c      	ldr	r3, [pc, #48]	; (800c1a8 <cleanup_stdio+0x34>)
 800c178:	4299      	cmp	r1, r3
 800c17a:	b510      	push	{r4, lr}
 800c17c:	4604      	mov	r4, r0
 800c17e:	d001      	beq.n	800c184 <cleanup_stdio+0x10>
 800c180:	f000 ff52 	bl	800d028 <_fflush_r>
 800c184:	68a1      	ldr	r1, [r4, #8]
 800c186:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <cleanup_stdio+0x38>)
 800c188:	4299      	cmp	r1, r3
 800c18a:	d002      	beq.n	800c192 <cleanup_stdio+0x1e>
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 ff4b 	bl	800d028 <_fflush_r>
 800c192:	68e1      	ldr	r1, [r4, #12]
 800c194:	4b06      	ldr	r3, [pc, #24]	; (800c1b0 <cleanup_stdio+0x3c>)
 800c196:	4299      	cmp	r1, r3
 800c198:	d004      	beq.n	800c1a4 <cleanup_stdio+0x30>
 800c19a:	4620      	mov	r0, r4
 800c19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1a0:	f000 bf42 	b.w	800d028 <_fflush_r>
 800c1a4:	bd10      	pop	{r4, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20002238 	.word	0x20002238
 800c1ac:	200022a0 	.word	0x200022a0
 800c1b0:	20002308 	.word	0x20002308

0800c1b4 <global_stdio_init.part.0>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	4b0b      	ldr	r3, [pc, #44]	; (800c1e4 <global_stdio_init.part.0+0x30>)
 800c1b8:	4c0b      	ldr	r4, [pc, #44]	; (800c1e8 <global_stdio_init.part.0+0x34>)
 800c1ba:	4a0c      	ldr	r2, [pc, #48]	; (800c1ec <global_stdio_init.part.0+0x38>)
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	4620      	mov	r0, r4
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	2104      	movs	r1, #4
 800c1c4:	f7ff ff94 	bl	800c0f0 <std>
 800c1c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	2109      	movs	r1, #9
 800c1d0:	f7ff ff8e 	bl	800c0f0 <std>
 800c1d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c1d8:	2202      	movs	r2, #2
 800c1da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1de:	2112      	movs	r1, #18
 800c1e0:	f7ff bf86 	b.w	800c0f0 <std>
 800c1e4:	20002370 	.word	0x20002370
 800c1e8:	20002238 	.word	0x20002238
 800c1ec:	0800c15d 	.word	0x0800c15d

0800c1f0 <__sfp_lock_acquire>:
 800c1f0:	4801      	ldr	r0, [pc, #4]	; (800c1f8 <__sfp_lock_acquire+0x8>)
 800c1f2:	f000 b958 	b.w	800c4a6 <__retarget_lock_acquire_recursive>
 800c1f6:	bf00      	nop
 800c1f8:	20002379 	.word	0x20002379

0800c1fc <__sfp_lock_release>:
 800c1fc:	4801      	ldr	r0, [pc, #4]	; (800c204 <__sfp_lock_release+0x8>)
 800c1fe:	f000 b953 	b.w	800c4a8 <__retarget_lock_release_recursive>
 800c202:	bf00      	nop
 800c204:	20002379 	.word	0x20002379

0800c208 <__sinit>:
 800c208:	b510      	push	{r4, lr}
 800c20a:	4604      	mov	r4, r0
 800c20c:	f7ff fff0 	bl	800c1f0 <__sfp_lock_acquire>
 800c210:	6a23      	ldr	r3, [r4, #32]
 800c212:	b11b      	cbz	r3, 800c21c <__sinit+0x14>
 800c214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c218:	f7ff bff0 	b.w	800c1fc <__sfp_lock_release>
 800c21c:	4b04      	ldr	r3, [pc, #16]	; (800c230 <__sinit+0x28>)
 800c21e:	6223      	str	r3, [r4, #32]
 800c220:	4b04      	ldr	r3, [pc, #16]	; (800c234 <__sinit+0x2c>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1f5      	bne.n	800c214 <__sinit+0xc>
 800c228:	f7ff ffc4 	bl	800c1b4 <global_stdio_init.part.0>
 800c22c:	e7f2      	b.n	800c214 <__sinit+0xc>
 800c22e:	bf00      	nop
 800c230:	0800c175 	.word	0x0800c175
 800c234:	20002370 	.word	0x20002370

0800c238 <fiprintf>:
 800c238:	b40e      	push	{r1, r2, r3}
 800c23a:	b503      	push	{r0, r1, lr}
 800c23c:	4601      	mov	r1, r0
 800c23e:	ab03      	add	r3, sp, #12
 800c240:	4805      	ldr	r0, [pc, #20]	; (800c258 <fiprintf+0x20>)
 800c242:	f853 2b04 	ldr.w	r2, [r3], #4
 800c246:	6800      	ldr	r0, [r0, #0]
 800c248:	9301      	str	r3, [sp, #4]
 800c24a:	f000 fbbd 	bl	800c9c8 <_vfiprintf_r>
 800c24e:	b002      	add	sp, #8
 800c250:	f85d eb04 	ldr.w	lr, [sp], #4
 800c254:	b003      	add	sp, #12
 800c256:	4770      	bx	lr
 800c258:	20000164 	.word	0x20000164

0800c25c <_fwalk_sglue>:
 800c25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c260:	4607      	mov	r7, r0
 800c262:	4688      	mov	r8, r1
 800c264:	4614      	mov	r4, r2
 800c266:	2600      	movs	r6, #0
 800c268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c26c:	f1b9 0901 	subs.w	r9, r9, #1
 800c270:	d505      	bpl.n	800c27e <_fwalk_sglue+0x22>
 800c272:	6824      	ldr	r4, [r4, #0]
 800c274:	2c00      	cmp	r4, #0
 800c276:	d1f7      	bne.n	800c268 <_fwalk_sglue+0xc>
 800c278:	4630      	mov	r0, r6
 800c27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c27e:	89ab      	ldrh	r3, [r5, #12]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d907      	bls.n	800c294 <_fwalk_sglue+0x38>
 800c284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c288:	3301      	adds	r3, #1
 800c28a:	d003      	beq.n	800c294 <_fwalk_sglue+0x38>
 800c28c:	4629      	mov	r1, r5
 800c28e:	4638      	mov	r0, r7
 800c290:	47c0      	blx	r8
 800c292:	4306      	orrs	r6, r0
 800c294:	3568      	adds	r5, #104	; 0x68
 800c296:	e7e9      	b.n	800c26c <_fwalk_sglue+0x10>

0800c298 <siprintf>:
 800c298:	b40e      	push	{r1, r2, r3}
 800c29a:	b500      	push	{lr}
 800c29c:	b09c      	sub	sp, #112	; 0x70
 800c29e:	ab1d      	add	r3, sp, #116	; 0x74
 800c2a0:	9002      	str	r0, [sp, #8]
 800c2a2:	9006      	str	r0, [sp, #24]
 800c2a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2a8:	4809      	ldr	r0, [pc, #36]	; (800c2d0 <siprintf+0x38>)
 800c2aa:	9107      	str	r1, [sp, #28]
 800c2ac:	9104      	str	r1, [sp, #16]
 800c2ae:	4909      	ldr	r1, [pc, #36]	; (800c2d4 <siprintf+0x3c>)
 800c2b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2b4:	9105      	str	r1, [sp, #20]
 800c2b6:	6800      	ldr	r0, [r0, #0]
 800c2b8:	9301      	str	r3, [sp, #4]
 800c2ba:	a902      	add	r1, sp, #8
 800c2bc:	f000 fa5c 	bl	800c778 <_svfiprintf_r>
 800c2c0:	9b02      	ldr	r3, [sp, #8]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	701a      	strb	r2, [r3, #0]
 800c2c6:	b01c      	add	sp, #112	; 0x70
 800c2c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2cc:	b003      	add	sp, #12
 800c2ce:	4770      	bx	lr
 800c2d0:	20000164 	.word	0x20000164
 800c2d4:	ffff0208 	.word	0xffff0208

0800c2d8 <__sread>:
 800c2d8:	b510      	push	{r4, lr}
 800c2da:	460c      	mov	r4, r1
 800c2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e0:	f000 f892 	bl	800c408 <_read_r>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	bfab      	itete	ge
 800c2e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2ea:	89a3      	ldrhlt	r3, [r4, #12]
 800c2ec:	181b      	addge	r3, r3, r0
 800c2ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2f2:	bfac      	ite	ge
 800c2f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2f6:	81a3      	strhlt	r3, [r4, #12]
 800c2f8:	bd10      	pop	{r4, pc}

0800c2fa <__swrite>:
 800c2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2fe:	461f      	mov	r7, r3
 800c300:	898b      	ldrh	r3, [r1, #12]
 800c302:	05db      	lsls	r3, r3, #23
 800c304:	4605      	mov	r5, r0
 800c306:	460c      	mov	r4, r1
 800c308:	4616      	mov	r6, r2
 800c30a:	d505      	bpl.n	800c318 <__swrite+0x1e>
 800c30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c310:	2302      	movs	r3, #2
 800c312:	2200      	movs	r2, #0
 800c314:	f000 f866 	bl	800c3e4 <_lseek_r>
 800c318:	89a3      	ldrh	r3, [r4, #12]
 800c31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c322:	81a3      	strh	r3, [r4, #12]
 800c324:	4632      	mov	r2, r6
 800c326:	463b      	mov	r3, r7
 800c328:	4628      	mov	r0, r5
 800c32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c32e:	f000 b87d 	b.w	800c42c <_write_r>

0800c332 <__sseek>:
 800c332:	b510      	push	{r4, lr}
 800c334:	460c      	mov	r4, r1
 800c336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c33a:	f000 f853 	bl	800c3e4 <_lseek_r>
 800c33e:	1c43      	adds	r3, r0, #1
 800c340:	89a3      	ldrh	r3, [r4, #12]
 800c342:	bf15      	itete	ne
 800c344:	6560      	strne	r0, [r4, #84]	; 0x54
 800c346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c34a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c34e:	81a3      	strheq	r3, [r4, #12]
 800c350:	bf18      	it	ne
 800c352:	81a3      	strhne	r3, [r4, #12]
 800c354:	bd10      	pop	{r4, pc}

0800c356 <__sclose>:
 800c356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35a:	f000 b833 	b.w	800c3c4 <_close_r>

0800c35e <memcmp>:
 800c35e:	b510      	push	{r4, lr}
 800c360:	3901      	subs	r1, #1
 800c362:	4402      	add	r2, r0
 800c364:	4290      	cmp	r0, r2
 800c366:	d101      	bne.n	800c36c <memcmp+0xe>
 800c368:	2000      	movs	r0, #0
 800c36a:	e005      	b.n	800c378 <memcmp+0x1a>
 800c36c:	7803      	ldrb	r3, [r0, #0]
 800c36e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c372:	42a3      	cmp	r3, r4
 800c374:	d001      	beq.n	800c37a <memcmp+0x1c>
 800c376:	1b18      	subs	r0, r3, r4
 800c378:	bd10      	pop	{r4, pc}
 800c37a:	3001      	adds	r0, #1
 800c37c:	e7f2      	b.n	800c364 <memcmp+0x6>

0800c37e <memmove>:
 800c37e:	4288      	cmp	r0, r1
 800c380:	b510      	push	{r4, lr}
 800c382:	eb01 0402 	add.w	r4, r1, r2
 800c386:	d902      	bls.n	800c38e <memmove+0x10>
 800c388:	4284      	cmp	r4, r0
 800c38a:	4623      	mov	r3, r4
 800c38c:	d807      	bhi.n	800c39e <memmove+0x20>
 800c38e:	1e43      	subs	r3, r0, #1
 800c390:	42a1      	cmp	r1, r4
 800c392:	d008      	beq.n	800c3a6 <memmove+0x28>
 800c394:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c398:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c39c:	e7f8      	b.n	800c390 <memmove+0x12>
 800c39e:	4402      	add	r2, r0
 800c3a0:	4601      	mov	r1, r0
 800c3a2:	428a      	cmp	r2, r1
 800c3a4:	d100      	bne.n	800c3a8 <memmove+0x2a>
 800c3a6:	bd10      	pop	{r4, pc}
 800c3a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3b0:	e7f7      	b.n	800c3a2 <memmove+0x24>

0800c3b2 <memset>:
 800c3b2:	4402      	add	r2, r0
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d100      	bne.n	800c3bc <memset+0xa>
 800c3ba:	4770      	bx	lr
 800c3bc:	f803 1b01 	strb.w	r1, [r3], #1
 800c3c0:	e7f9      	b.n	800c3b6 <memset+0x4>
	...

0800c3c4 <_close_r>:
 800c3c4:	b538      	push	{r3, r4, r5, lr}
 800c3c6:	4d06      	ldr	r5, [pc, #24]	; (800c3e0 <_close_r+0x1c>)
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	602b      	str	r3, [r5, #0]
 800c3d0:	f7f4 fdc5 	bl	8000f5e <_close>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d102      	bne.n	800c3de <_close_r+0x1a>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	b103      	cbz	r3, 800c3de <_close_r+0x1a>
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	20002374 	.word	0x20002374

0800c3e4 <_lseek_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4d07      	ldr	r5, [pc, #28]	; (800c404 <_lseek_r+0x20>)
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	4608      	mov	r0, r1
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	602a      	str	r2, [r5, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	f7f4 fdda 	bl	8000fac <_lseek>
 800c3f8:	1c43      	adds	r3, r0, #1
 800c3fa:	d102      	bne.n	800c402 <_lseek_r+0x1e>
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	b103      	cbz	r3, 800c402 <_lseek_r+0x1e>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	bd38      	pop	{r3, r4, r5, pc}
 800c404:	20002374 	.word	0x20002374

0800c408 <_read_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	; (800c428 <_read_r+0x20>)
 800c40c:	4604      	mov	r4, r0
 800c40e:	4608      	mov	r0, r1
 800c410:	4611      	mov	r1, r2
 800c412:	2200      	movs	r2, #0
 800c414:	602a      	str	r2, [r5, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	f7f4 fd68 	bl	8000eec <_read>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_read_r+0x1e>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_read_r+0x1e>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	20002374 	.word	0x20002374

0800c42c <_write_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4d07      	ldr	r5, [pc, #28]	; (800c44c <_write_r+0x20>)
 800c430:	4604      	mov	r4, r0
 800c432:	4608      	mov	r0, r1
 800c434:	4611      	mov	r1, r2
 800c436:	2200      	movs	r2, #0
 800c438:	602a      	str	r2, [r5, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	f7f4 fd73 	bl	8000f26 <_write>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_write_r+0x1e>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_write_r+0x1e>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	20002374 	.word	0x20002374

0800c450 <__errno>:
 800c450:	4b01      	ldr	r3, [pc, #4]	; (800c458 <__errno+0x8>)
 800c452:	6818      	ldr	r0, [r3, #0]
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	20000164 	.word	0x20000164

0800c45c <__libc_init_array>:
 800c45c:	b570      	push	{r4, r5, r6, lr}
 800c45e:	4d0d      	ldr	r5, [pc, #52]	; (800c494 <__libc_init_array+0x38>)
 800c460:	4c0d      	ldr	r4, [pc, #52]	; (800c498 <__libc_init_array+0x3c>)
 800c462:	1b64      	subs	r4, r4, r5
 800c464:	10a4      	asrs	r4, r4, #2
 800c466:	2600      	movs	r6, #0
 800c468:	42a6      	cmp	r6, r4
 800c46a:	d109      	bne.n	800c480 <__libc_init_array+0x24>
 800c46c:	4d0b      	ldr	r5, [pc, #44]	; (800c49c <__libc_init_array+0x40>)
 800c46e:	4c0c      	ldr	r4, [pc, #48]	; (800c4a0 <__libc_init_array+0x44>)
 800c470:	f000 ffa8 	bl	800d3c4 <_init>
 800c474:	1b64      	subs	r4, r4, r5
 800c476:	10a4      	asrs	r4, r4, #2
 800c478:	2600      	movs	r6, #0
 800c47a:	42a6      	cmp	r6, r4
 800c47c:	d105      	bne.n	800c48a <__libc_init_array+0x2e>
 800c47e:	bd70      	pop	{r4, r5, r6, pc}
 800c480:	f855 3b04 	ldr.w	r3, [r5], #4
 800c484:	4798      	blx	r3
 800c486:	3601      	adds	r6, #1
 800c488:	e7ee      	b.n	800c468 <__libc_init_array+0xc>
 800c48a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c48e:	4798      	blx	r3
 800c490:	3601      	adds	r6, #1
 800c492:	e7f2      	b.n	800c47a <__libc_init_array+0x1e>
 800c494:	0800d7b8 	.word	0x0800d7b8
 800c498:	0800d7b8 	.word	0x0800d7b8
 800c49c:	0800d7b8 	.word	0x0800d7b8
 800c4a0:	0800d7bc 	.word	0x0800d7bc

0800c4a4 <__retarget_lock_init_recursive>:
 800c4a4:	4770      	bx	lr

0800c4a6 <__retarget_lock_acquire_recursive>:
 800c4a6:	4770      	bx	lr

0800c4a8 <__retarget_lock_release_recursive>:
 800c4a8:	4770      	bx	lr

0800c4aa <memcpy>:
 800c4aa:	440a      	add	r2, r1
 800c4ac:	4291      	cmp	r1, r2
 800c4ae:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4b2:	d100      	bne.n	800c4b6 <memcpy+0xc>
 800c4b4:	4770      	bx	lr
 800c4b6:	b510      	push	{r4, lr}
 800c4b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4c0:	4291      	cmp	r1, r2
 800c4c2:	d1f9      	bne.n	800c4b8 <memcpy+0xe>
 800c4c4:	bd10      	pop	{r4, pc}

0800c4c6 <abort>:
 800c4c6:	b508      	push	{r3, lr}
 800c4c8:	2006      	movs	r0, #6
 800c4ca:	f000 fe93 	bl	800d1f4 <raise>
 800c4ce:	2001      	movs	r0, #1
 800c4d0:	f7f4 fd02 	bl	8000ed8 <_exit>

0800c4d4 <_free_r>:
 800c4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4d6:	2900      	cmp	r1, #0
 800c4d8:	d044      	beq.n	800c564 <_free_r+0x90>
 800c4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4de:	9001      	str	r0, [sp, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f1a1 0404 	sub.w	r4, r1, #4
 800c4e6:	bfb8      	it	lt
 800c4e8:	18e4      	addlt	r4, r4, r3
 800c4ea:	f000 f8df 	bl	800c6ac <__malloc_lock>
 800c4ee:	4a1e      	ldr	r2, [pc, #120]	; (800c568 <_free_r+0x94>)
 800c4f0:	9801      	ldr	r0, [sp, #4]
 800c4f2:	6813      	ldr	r3, [r2, #0]
 800c4f4:	b933      	cbnz	r3, 800c504 <_free_r+0x30>
 800c4f6:	6063      	str	r3, [r4, #4]
 800c4f8:	6014      	str	r4, [r2, #0]
 800c4fa:	b003      	add	sp, #12
 800c4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c500:	f000 b8da 	b.w	800c6b8 <__malloc_unlock>
 800c504:	42a3      	cmp	r3, r4
 800c506:	d908      	bls.n	800c51a <_free_r+0x46>
 800c508:	6825      	ldr	r5, [r4, #0]
 800c50a:	1961      	adds	r1, r4, r5
 800c50c:	428b      	cmp	r3, r1
 800c50e:	bf01      	itttt	eq
 800c510:	6819      	ldreq	r1, [r3, #0]
 800c512:	685b      	ldreq	r3, [r3, #4]
 800c514:	1949      	addeq	r1, r1, r5
 800c516:	6021      	streq	r1, [r4, #0]
 800c518:	e7ed      	b.n	800c4f6 <_free_r+0x22>
 800c51a:	461a      	mov	r2, r3
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	b10b      	cbz	r3, 800c524 <_free_r+0x50>
 800c520:	42a3      	cmp	r3, r4
 800c522:	d9fa      	bls.n	800c51a <_free_r+0x46>
 800c524:	6811      	ldr	r1, [r2, #0]
 800c526:	1855      	adds	r5, r2, r1
 800c528:	42a5      	cmp	r5, r4
 800c52a:	d10b      	bne.n	800c544 <_free_r+0x70>
 800c52c:	6824      	ldr	r4, [r4, #0]
 800c52e:	4421      	add	r1, r4
 800c530:	1854      	adds	r4, r2, r1
 800c532:	42a3      	cmp	r3, r4
 800c534:	6011      	str	r1, [r2, #0]
 800c536:	d1e0      	bne.n	800c4fa <_free_r+0x26>
 800c538:	681c      	ldr	r4, [r3, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	6053      	str	r3, [r2, #4]
 800c53e:	440c      	add	r4, r1
 800c540:	6014      	str	r4, [r2, #0]
 800c542:	e7da      	b.n	800c4fa <_free_r+0x26>
 800c544:	d902      	bls.n	800c54c <_free_r+0x78>
 800c546:	230c      	movs	r3, #12
 800c548:	6003      	str	r3, [r0, #0]
 800c54a:	e7d6      	b.n	800c4fa <_free_r+0x26>
 800c54c:	6825      	ldr	r5, [r4, #0]
 800c54e:	1961      	adds	r1, r4, r5
 800c550:	428b      	cmp	r3, r1
 800c552:	bf04      	itt	eq
 800c554:	6819      	ldreq	r1, [r3, #0]
 800c556:	685b      	ldreq	r3, [r3, #4]
 800c558:	6063      	str	r3, [r4, #4]
 800c55a:	bf04      	itt	eq
 800c55c:	1949      	addeq	r1, r1, r5
 800c55e:	6021      	streq	r1, [r4, #0]
 800c560:	6054      	str	r4, [r2, #4]
 800c562:	e7ca      	b.n	800c4fa <_free_r+0x26>
 800c564:	b003      	add	sp, #12
 800c566:	bd30      	pop	{r4, r5, pc}
 800c568:	2000237c 	.word	0x2000237c

0800c56c <sbrk_aligned>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	4e0e      	ldr	r6, [pc, #56]	; (800c5a8 <sbrk_aligned+0x3c>)
 800c570:	460c      	mov	r4, r1
 800c572:	6831      	ldr	r1, [r6, #0]
 800c574:	4605      	mov	r5, r0
 800c576:	b911      	cbnz	r1, 800c57e <sbrk_aligned+0x12>
 800c578:	f000 fe58 	bl	800d22c <_sbrk_r>
 800c57c:	6030      	str	r0, [r6, #0]
 800c57e:	4621      	mov	r1, r4
 800c580:	4628      	mov	r0, r5
 800c582:	f000 fe53 	bl	800d22c <_sbrk_r>
 800c586:	1c43      	adds	r3, r0, #1
 800c588:	d00a      	beq.n	800c5a0 <sbrk_aligned+0x34>
 800c58a:	1cc4      	adds	r4, r0, #3
 800c58c:	f024 0403 	bic.w	r4, r4, #3
 800c590:	42a0      	cmp	r0, r4
 800c592:	d007      	beq.n	800c5a4 <sbrk_aligned+0x38>
 800c594:	1a21      	subs	r1, r4, r0
 800c596:	4628      	mov	r0, r5
 800c598:	f000 fe48 	bl	800d22c <_sbrk_r>
 800c59c:	3001      	adds	r0, #1
 800c59e:	d101      	bne.n	800c5a4 <sbrk_aligned+0x38>
 800c5a0:	f04f 34ff 	mov.w	r4, #4294967295
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
 800c5a8:	20002380 	.word	0x20002380

0800c5ac <_malloc_r>:
 800c5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5b0:	1ccd      	adds	r5, r1, #3
 800c5b2:	f025 0503 	bic.w	r5, r5, #3
 800c5b6:	3508      	adds	r5, #8
 800c5b8:	2d0c      	cmp	r5, #12
 800c5ba:	bf38      	it	cc
 800c5bc:	250c      	movcc	r5, #12
 800c5be:	2d00      	cmp	r5, #0
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	db01      	blt.n	800c5c8 <_malloc_r+0x1c>
 800c5c4:	42a9      	cmp	r1, r5
 800c5c6:	d905      	bls.n	800c5d4 <_malloc_r+0x28>
 800c5c8:	230c      	movs	r3, #12
 800c5ca:	603b      	str	r3, [r7, #0]
 800c5cc:	2600      	movs	r6, #0
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6a8 <_malloc_r+0xfc>
 800c5d8:	f000 f868 	bl	800c6ac <__malloc_lock>
 800c5dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c5e0:	461c      	mov	r4, r3
 800c5e2:	bb5c      	cbnz	r4, 800c63c <_malloc_r+0x90>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	f7ff ffc0 	bl	800c56c <sbrk_aligned>
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	d155      	bne.n	800c69e <_malloc_r+0xf2>
 800c5f2:	f8d8 4000 	ldr.w	r4, [r8]
 800c5f6:	4626      	mov	r6, r4
 800c5f8:	2e00      	cmp	r6, #0
 800c5fa:	d145      	bne.n	800c688 <_malloc_r+0xdc>
 800c5fc:	2c00      	cmp	r4, #0
 800c5fe:	d048      	beq.n	800c692 <_malloc_r+0xe6>
 800c600:	6823      	ldr	r3, [r4, #0]
 800c602:	4631      	mov	r1, r6
 800c604:	4638      	mov	r0, r7
 800c606:	eb04 0903 	add.w	r9, r4, r3
 800c60a:	f000 fe0f 	bl	800d22c <_sbrk_r>
 800c60e:	4581      	cmp	r9, r0
 800c610:	d13f      	bne.n	800c692 <_malloc_r+0xe6>
 800c612:	6821      	ldr	r1, [r4, #0]
 800c614:	1a6d      	subs	r5, r5, r1
 800c616:	4629      	mov	r1, r5
 800c618:	4638      	mov	r0, r7
 800c61a:	f7ff ffa7 	bl	800c56c <sbrk_aligned>
 800c61e:	3001      	adds	r0, #1
 800c620:	d037      	beq.n	800c692 <_malloc_r+0xe6>
 800c622:	6823      	ldr	r3, [r4, #0]
 800c624:	442b      	add	r3, r5
 800c626:	6023      	str	r3, [r4, #0]
 800c628:	f8d8 3000 	ldr.w	r3, [r8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d038      	beq.n	800c6a2 <_malloc_r+0xf6>
 800c630:	685a      	ldr	r2, [r3, #4]
 800c632:	42a2      	cmp	r2, r4
 800c634:	d12b      	bne.n	800c68e <_malloc_r+0xe2>
 800c636:	2200      	movs	r2, #0
 800c638:	605a      	str	r2, [r3, #4]
 800c63a:	e00f      	b.n	800c65c <_malloc_r+0xb0>
 800c63c:	6822      	ldr	r2, [r4, #0]
 800c63e:	1b52      	subs	r2, r2, r5
 800c640:	d41f      	bmi.n	800c682 <_malloc_r+0xd6>
 800c642:	2a0b      	cmp	r2, #11
 800c644:	d917      	bls.n	800c676 <_malloc_r+0xca>
 800c646:	1961      	adds	r1, r4, r5
 800c648:	42a3      	cmp	r3, r4
 800c64a:	6025      	str	r5, [r4, #0]
 800c64c:	bf18      	it	ne
 800c64e:	6059      	strne	r1, [r3, #4]
 800c650:	6863      	ldr	r3, [r4, #4]
 800c652:	bf08      	it	eq
 800c654:	f8c8 1000 	streq.w	r1, [r8]
 800c658:	5162      	str	r2, [r4, r5]
 800c65a:	604b      	str	r3, [r1, #4]
 800c65c:	4638      	mov	r0, r7
 800c65e:	f104 060b 	add.w	r6, r4, #11
 800c662:	f000 f829 	bl	800c6b8 <__malloc_unlock>
 800c666:	f026 0607 	bic.w	r6, r6, #7
 800c66a:	1d23      	adds	r3, r4, #4
 800c66c:	1af2      	subs	r2, r6, r3
 800c66e:	d0ae      	beq.n	800c5ce <_malloc_r+0x22>
 800c670:	1b9b      	subs	r3, r3, r6
 800c672:	50a3      	str	r3, [r4, r2]
 800c674:	e7ab      	b.n	800c5ce <_malloc_r+0x22>
 800c676:	42a3      	cmp	r3, r4
 800c678:	6862      	ldr	r2, [r4, #4]
 800c67a:	d1dd      	bne.n	800c638 <_malloc_r+0x8c>
 800c67c:	f8c8 2000 	str.w	r2, [r8]
 800c680:	e7ec      	b.n	800c65c <_malloc_r+0xb0>
 800c682:	4623      	mov	r3, r4
 800c684:	6864      	ldr	r4, [r4, #4]
 800c686:	e7ac      	b.n	800c5e2 <_malloc_r+0x36>
 800c688:	4634      	mov	r4, r6
 800c68a:	6876      	ldr	r6, [r6, #4]
 800c68c:	e7b4      	b.n	800c5f8 <_malloc_r+0x4c>
 800c68e:	4613      	mov	r3, r2
 800c690:	e7cc      	b.n	800c62c <_malloc_r+0x80>
 800c692:	230c      	movs	r3, #12
 800c694:	603b      	str	r3, [r7, #0]
 800c696:	4638      	mov	r0, r7
 800c698:	f000 f80e 	bl	800c6b8 <__malloc_unlock>
 800c69c:	e797      	b.n	800c5ce <_malloc_r+0x22>
 800c69e:	6025      	str	r5, [r4, #0]
 800c6a0:	e7dc      	b.n	800c65c <_malloc_r+0xb0>
 800c6a2:	605b      	str	r3, [r3, #4]
 800c6a4:	deff      	udf	#255	; 0xff
 800c6a6:	bf00      	nop
 800c6a8:	2000237c 	.word	0x2000237c

0800c6ac <__malloc_lock>:
 800c6ac:	4801      	ldr	r0, [pc, #4]	; (800c6b4 <__malloc_lock+0x8>)
 800c6ae:	f7ff befa 	b.w	800c4a6 <__retarget_lock_acquire_recursive>
 800c6b2:	bf00      	nop
 800c6b4:	20002378 	.word	0x20002378

0800c6b8 <__malloc_unlock>:
 800c6b8:	4801      	ldr	r0, [pc, #4]	; (800c6c0 <__malloc_unlock+0x8>)
 800c6ba:	f7ff bef5 	b.w	800c4a8 <__retarget_lock_release_recursive>
 800c6be:	bf00      	nop
 800c6c0:	20002378 	.word	0x20002378

0800c6c4 <__ssputs_r>:
 800c6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c8:	688e      	ldr	r6, [r1, #8]
 800c6ca:	461f      	mov	r7, r3
 800c6cc:	42be      	cmp	r6, r7
 800c6ce:	680b      	ldr	r3, [r1, #0]
 800c6d0:	4682      	mov	sl, r0
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	4690      	mov	r8, r2
 800c6d6:	d82c      	bhi.n	800c732 <__ssputs_r+0x6e>
 800c6d8:	898a      	ldrh	r2, [r1, #12]
 800c6da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6de:	d026      	beq.n	800c72e <__ssputs_r+0x6a>
 800c6e0:	6965      	ldr	r5, [r4, #20]
 800c6e2:	6909      	ldr	r1, [r1, #16]
 800c6e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6e8:	eba3 0901 	sub.w	r9, r3, r1
 800c6ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6f0:	1c7b      	adds	r3, r7, #1
 800c6f2:	444b      	add	r3, r9
 800c6f4:	106d      	asrs	r5, r5, #1
 800c6f6:	429d      	cmp	r5, r3
 800c6f8:	bf38      	it	cc
 800c6fa:	461d      	movcc	r5, r3
 800c6fc:	0553      	lsls	r3, r2, #21
 800c6fe:	d527      	bpl.n	800c750 <__ssputs_r+0x8c>
 800c700:	4629      	mov	r1, r5
 800c702:	f7ff ff53 	bl	800c5ac <_malloc_r>
 800c706:	4606      	mov	r6, r0
 800c708:	b360      	cbz	r0, 800c764 <__ssputs_r+0xa0>
 800c70a:	6921      	ldr	r1, [r4, #16]
 800c70c:	464a      	mov	r2, r9
 800c70e:	f7ff fecc 	bl	800c4aa <memcpy>
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c71c:	81a3      	strh	r3, [r4, #12]
 800c71e:	6126      	str	r6, [r4, #16]
 800c720:	6165      	str	r5, [r4, #20]
 800c722:	444e      	add	r6, r9
 800c724:	eba5 0509 	sub.w	r5, r5, r9
 800c728:	6026      	str	r6, [r4, #0]
 800c72a:	60a5      	str	r5, [r4, #8]
 800c72c:	463e      	mov	r6, r7
 800c72e:	42be      	cmp	r6, r7
 800c730:	d900      	bls.n	800c734 <__ssputs_r+0x70>
 800c732:	463e      	mov	r6, r7
 800c734:	6820      	ldr	r0, [r4, #0]
 800c736:	4632      	mov	r2, r6
 800c738:	4641      	mov	r1, r8
 800c73a:	f7ff fe20 	bl	800c37e <memmove>
 800c73e:	68a3      	ldr	r3, [r4, #8]
 800c740:	1b9b      	subs	r3, r3, r6
 800c742:	60a3      	str	r3, [r4, #8]
 800c744:	6823      	ldr	r3, [r4, #0]
 800c746:	4433      	add	r3, r6
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	2000      	movs	r0, #0
 800c74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c750:	462a      	mov	r2, r5
 800c752:	f000 fd7b 	bl	800d24c <_realloc_r>
 800c756:	4606      	mov	r6, r0
 800c758:	2800      	cmp	r0, #0
 800c75a:	d1e0      	bne.n	800c71e <__ssputs_r+0x5a>
 800c75c:	6921      	ldr	r1, [r4, #16]
 800c75e:	4650      	mov	r0, sl
 800c760:	f7ff feb8 	bl	800c4d4 <_free_r>
 800c764:	230c      	movs	r3, #12
 800c766:	f8ca 3000 	str.w	r3, [sl]
 800c76a:	89a3      	ldrh	r3, [r4, #12]
 800c76c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c770:	81a3      	strh	r3, [r4, #12]
 800c772:	f04f 30ff 	mov.w	r0, #4294967295
 800c776:	e7e9      	b.n	800c74c <__ssputs_r+0x88>

0800c778 <_svfiprintf_r>:
 800c778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	4698      	mov	r8, r3
 800c77e:	898b      	ldrh	r3, [r1, #12]
 800c780:	061b      	lsls	r3, r3, #24
 800c782:	b09d      	sub	sp, #116	; 0x74
 800c784:	4607      	mov	r7, r0
 800c786:	460d      	mov	r5, r1
 800c788:	4614      	mov	r4, r2
 800c78a:	d50e      	bpl.n	800c7aa <_svfiprintf_r+0x32>
 800c78c:	690b      	ldr	r3, [r1, #16]
 800c78e:	b963      	cbnz	r3, 800c7aa <_svfiprintf_r+0x32>
 800c790:	2140      	movs	r1, #64	; 0x40
 800c792:	f7ff ff0b 	bl	800c5ac <_malloc_r>
 800c796:	6028      	str	r0, [r5, #0]
 800c798:	6128      	str	r0, [r5, #16]
 800c79a:	b920      	cbnz	r0, 800c7a6 <_svfiprintf_r+0x2e>
 800c79c:	230c      	movs	r3, #12
 800c79e:	603b      	str	r3, [r7, #0]
 800c7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a4:	e0d0      	b.n	800c948 <_svfiprintf_r+0x1d0>
 800c7a6:	2340      	movs	r3, #64	; 0x40
 800c7a8:	616b      	str	r3, [r5, #20]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ae:	2320      	movs	r3, #32
 800c7b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7b8:	2330      	movs	r3, #48	; 0x30
 800c7ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c960 <_svfiprintf_r+0x1e8>
 800c7be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7c2:	f04f 0901 	mov.w	r9, #1
 800c7c6:	4623      	mov	r3, r4
 800c7c8:	469a      	mov	sl, r3
 800c7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ce:	b10a      	cbz	r2, 800c7d4 <_svfiprintf_r+0x5c>
 800c7d0:	2a25      	cmp	r2, #37	; 0x25
 800c7d2:	d1f9      	bne.n	800c7c8 <_svfiprintf_r+0x50>
 800c7d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c7d8:	d00b      	beq.n	800c7f2 <_svfiprintf_r+0x7a>
 800c7da:	465b      	mov	r3, fp
 800c7dc:	4622      	mov	r2, r4
 800c7de:	4629      	mov	r1, r5
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	f7ff ff6f 	bl	800c6c4 <__ssputs_r>
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	f000 80a9 	beq.w	800c93e <_svfiprintf_r+0x1c6>
 800c7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ee:	445a      	add	r2, fp
 800c7f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c7f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 80a1 	beq.w	800c93e <_svfiprintf_r+0x1c6>
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c806:	f10a 0a01 	add.w	sl, sl, #1
 800c80a:	9304      	str	r3, [sp, #16]
 800c80c:	9307      	str	r3, [sp, #28]
 800c80e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c812:	931a      	str	r3, [sp, #104]	; 0x68
 800c814:	4654      	mov	r4, sl
 800c816:	2205      	movs	r2, #5
 800c818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81c:	4850      	ldr	r0, [pc, #320]	; (800c960 <_svfiprintf_r+0x1e8>)
 800c81e:	f7f3 fd0f 	bl	8000240 <memchr>
 800c822:	9a04      	ldr	r2, [sp, #16]
 800c824:	b9d8      	cbnz	r0, 800c85e <_svfiprintf_r+0xe6>
 800c826:	06d0      	lsls	r0, r2, #27
 800c828:	bf44      	itt	mi
 800c82a:	2320      	movmi	r3, #32
 800c82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c830:	0711      	lsls	r1, r2, #28
 800c832:	bf44      	itt	mi
 800c834:	232b      	movmi	r3, #43	; 0x2b
 800c836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c83a:	f89a 3000 	ldrb.w	r3, [sl]
 800c83e:	2b2a      	cmp	r3, #42	; 0x2a
 800c840:	d015      	beq.n	800c86e <_svfiprintf_r+0xf6>
 800c842:	9a07      	ldr	r2, [sp, #28]
 800c844:	4654      	mov	r4, sl
 800c846:	2000      	movs	r0, #0
 800c848:	f04f 0c0a 	mov.w	ip, #10
 800c84c:	4621      	mov	r1, r4
 800c84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c852:	3b30      	subs	r3, #48	; 0x30
 800c854:	2b09      	cmp	r3, #9
 800c856:	d94d      	bls.n	800c8f4 <_svfiprintf_r+0x17c>
 800c858:	b1b0      	cbz	r0, 800c888 <_svfiprintf_r+0x110>
 800c85a:	9207      	str	r2, [sp, #28]
 800c85c:	e014      	b.n	800c888 <_svfiprintf_r+0x110>
 800c85e:	eba0 0308 	sub.w	r3, r0, r8
 800c862:	fa09 f303 	lsl.w	r3, r9, r3
 800c866:	4313      	orrs	r3, r2
 800c868:	9304      	str	r3, [sp, #16]
 800c86a:	46a2      	mov	sl, r4
 800c86c:	e7d2      	b.n	800c814 <_svfiprintf_r+0x9c>
 800c86e:	9b03      	ldr	r3, [sp, #12]
 800c870:	1d19      	adds	r1, r3, #4
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	9103      	str	r1, [sp, #12]
 800c876:	2b00      	cmp	r3, #0
 800c878:	bfbb      	ittet	lt
 800c87a:	425b      	neglt	r3, r3
 800c87c:	f042 0202 	orrlt.w	r2, r2, #2
 800c880:	9307      	strge	r3, [sp, #28]
 800c882:	9307      	strlt	r3, [sp, #28]
 800c884:	bfb8      	it	lt
 800c886:	9204      	strlt	r2, [sp, #16]
 800c888:	7823      	ldrb	r3, [r4, #0]
 800c88a:	2b2e      	cmp	r3, #46	; 0x2e
 800c88c:	d10c      	bne.n	800c8a8 <_svfiprintf_r+0x130>
 800c88e:	7863      	ldrb	r3, [r4, #1]
 800c890:	2b2a      	cmp	r3, #42	; 0x2a
 800c892:	d134      	bne.n	800c8fe <_svfiprintf_r+0x186>
 800c894:	9b03      	ldr	r3, [sp, #12]
 800c896:	1d1a      	adds	r2, r3, #4
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	9203      	str	r2, [sp, #12]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	bfb8      	it	lt
 800c8a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8a4:	3402      	adds	r4, #2
 800c8a6:	9305      	str	r3, [sp, #20]
 800c8a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c970 <_svfiprintf_r+0x1f8>
 800c8ac:	7821      	ldrb	r1, [r4, #0]
 800c8ae:	2203      	movs	r2, #3
 800c8b0:	4650      	mov	r0, sl
 800c8b2:	f7f3 fcc5 	bl	8000240 <memchr>
 800c8b6:	b138      	cbz	r0, 800c8c8 <_svfiprintf_r+0x150>
 800c8b8:	9b04      	ldr	r3, [sp, #16]
 800c8ba:	eba0 000a 	sub.w	r0, r0, sl
 800c8be:	2240      	movs	r2, #64	; 0x40
 800c8c0:	4082      	lsls	r2, r0
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	3401      	adds	r4, #1
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8cc:	4825      	ldr	r0, [pc, #148]	; (800c964 <_svfiprintf_r+0x1ec>)
 800c8ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8d2:	2206      	movs	r2, #6
 800c8d4:	f7f3 fcb4 	bl	8000240 <memchr>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d038      	beq.n	800c94e <_svfiprintf_r+0x1d6>
 800c8dc:	4b22      	ldr	r3, [pc, #136]	; (800c968 <_svfiprintf_r+0x1f0>)
 800c8de:	bb1b      	cbnz	r3, 800c928 <_svfiprintf_r+0x1b0>
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	3307      	adds	r3, #7
 800c8e4:	f023 0307 	bic.w	r3, r3, #7
 800c8e8:	3308      	adds	r3, #8
 800c8ea:	9303      	str	r3, [sp, #12]
 800c8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ee:	4433      	add	r3, r6
 800c8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f2:	e768      	b.n	800c7c6 <_svfiprintf_r+0x4e>
 800c8f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	e7a6      	b.n	800c84c <_svfiprintf_r+0xd4>
 800c8fe:	2300      	movs	r3, #0
 800c900:	3401      	adds	r4, #1
 800c902:	9305      	str	r3, [sp, #20]
 800c904:	4619      	mov	r1, r3
 800c906:	f04f 0c0a 	mov.w	ip, #10
 800c90a:	4620      	mov	r0, r4
 800c90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c910:	3a30      	subs	r2, #48	; 0x30
 800c912:	2a09      	cmp	r2, #9
 800c914:	d903      	bls.n	800c91e <_svfiprintf_r+0x1a6>
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0c6      	beq.n	800c8a8 <_svfiprintf_r+0x130>
 800c91a:	9105      	str	r1, [sp, #20]
 800c91c:	e7c4      	b.n	800c8a8 <_svfiprintf_r+0x130>
 800c91e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c922:	4604      	mov	r4, r0
 800c924:	2301      	movs	r3, #1
 800c926:	e7f0      	b.n	800c90a <_svfiprintf_r+0x192>
 800c928:	ab03      	add	r3, sp, #12
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	462a      	mov	r2, r5
 800c92e:	4b0f      	ldr	r3, [pc, #60]	; (800c96c <_svfiprintf_r+0x1f4>)
 800c930:	a904      	add	r1, sp, #16
 800c932:	4638      	mov	r0, r7
 800c934:	f3af 8000 	nop.w
 800c938:	1c42      	adds	r2, r0, #1
 800c93a:	4606      	mov	r6, r0
 800c93c:	d1d6      	bne.n	800c8ec <_svfiprintf_r+0x174>
 800c93e:	89ab      	ldrh	r3, [r5, #12]
 800c940:	065b      	lsls	r3, r3, #25
 800c942:	f53f af2d 	bmi.w	800c7a0 <_svfiprintf_r+0x28>
 800c946:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c948:	b01d      	add	sp, #116	; 0x74
 800c94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94e:	ab03      	add	r3, sp, #12
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	462a      	mov	r2, r5
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <_svfiprintf_r+0x1f4>)
 800c956:	a904      	add	r1, sp, #16
 800c958:	4638      	mov	r0, r7
 800c95a:	f000 f9bd 	bl	800ccd8 <_printf_i>
 800c95e:	e7eb      	b.n	800c938 <_svfiprintf_r+0x1c0>
 800c960:	0800d77a 	.word	0x0800d77a
 800c964:	0800d784 	.word	0x0800d784
 800c968:	00000000 	.word	0x00000000
 800c96c:	0800c6c5 	.word	0x0800c6c5
 800c970:	0800d780 	.word	0x0800d780

0800c974 <__sfputc_r>:
 800c974:	6893      	ldr	r3, [r2, #8]
 800c976:	3b01      	subs	r3, #1
 800c978:	2b00      	cmp	r3, #0
 800c97a:	b410      	push	{r4}
 800c97c:	6093      	str	r3, [r2, #8]
 800c97e:	da08      	bge.n	800c992 <__sfputc_r+0x1e>
 800c980:	6994      	ldr	r4, [r2, #24]
 800c982:	42a3      	cmp	r3, r4
 800c984:	db01      	blt.n	800c98a <__sfputc_r+0x16>
 800c986:	290a      	cmp	r1, #10
 800c988:	d103      	bne.n	800c992 <__sfputc_r+0x1e>
 800c98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c98e:	f000 bb73 	b.w	800d078 <__swbuf_r>
 800c992:	6813      	ldr	r3, [r2, #0]
 800c994:	1c58      	adds	r0, r3, #1
 800c996:	6010      	str	r0, [r2, #0]
 800c998:	7019      	strb	r1, [r3, #0]
 800c99a:	4608      	mov	r0, r1
 800c99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <__sfputs_r>:
 800c9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a4:	4606      	mov	r6, r0
 800c9a6:	460f      	mov	r7, r1
 800c9a8:	4614      	mov	r4, r2
 800c9aa:	18d5      	adds	r5, r2, r3
 800c9ac:	42ac      	cmp	r4, r5
 800c9ae:	d101      	bne.n	800c9b4 <__sfputs_r+0x12>
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	e007      	b.n	800c9c4 <__sfputs_r+0x22>
 800c9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b8:	463a      	mov	r2, r7
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7ff ffda 	bl	800c974 <__sfputc_r>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d1f3      	bne.n	800c9ac <__sfputs_r+0xa>
 800c9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9c8 <_vfiprintf_r>:
 800c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	460d      	mov	r5, r1
 800c9ce:	b09d      	sub	sp, #116	; 0x74
 800c9d0:	4614      	mov	r4, r2
 800c9d2:	4698      	mov	r8, r3
 800c9d4:	4606      	mov	r6, r0
 800c9d6:	b118      	cbz	r0, 800c9e0 <_vfiprintf_r+0x18>
 800c9d8:	6a03      	ldr	r3, [r0, #32]
 800c9da:	b90b      	cbnz	r3, 800c9e0 <_vfiprintf_r+0x18>
 800c9dc:	f7ff fc14 	bl	800c208 <__sinit>
 800c9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9e2:	07d9      	lsls	r1, r3, #31
 800c9e4:	d405      	bmi.n	800c9f2 <_vfiprintf_r+0x2a>
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	059a      	lsls	r2, r3, #22
 800c9ea:	d402      	bmi.n	800c9f2 <_vfiprintf_r+0x2a>
 800c9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ee:	f7ff fd5a 	bl	800c4a6 <__retarget_lock_acquire_recursive>
 800c9f2:	89ab      	ldrh	r3, [r5, #12]
 800c9f4:	071b      	lsls	r3, r3, #28
 800c9f6:	d501      	bpl.n	800c9fc <_vfiprintf_r+0x34>
 800c9f8:	692b      	ldr	r3, [r5, #16]
 800c9fa:	b99b      	cbnz	r3, 800ca24 <_vfiprintf_r+0x5c>
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f000 fb78 	bl	800d0f4 <__swsetup_r>
 800ca04:	b170      	cbz	r0, 800ca24 <_vfiprintf_r+0x5c>
 800ca06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca08:	07dc      	lsls	r4, r3, #31
 800ca0a:	d504      	bpl.n	800ca16 <_vfiprintf_r+0x4e>
 800ca0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca10:	b01d      	add	sp, #116	; 0x74
 800ca12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca16:	89ab      	ldrh	r3, [r5, #12]
 800ca18:	0598      	lsls	r0, r3, #22
 800ca1a:	d4f7      	bmi.n	800ca0c <_vfiprintf_r+0x44>
 800ca1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca1e:	f7ff fd43 	bl	800c4a8 <__retarget_lock_release_recursive>
 800ca22:	e7f3      	b.n	800ca0c <_vfiprintf_r+0x44>
 800ca24:	2300      	movs	r3, #0
 800ca26:	9309      	str	r3, [sp, #36]	; 0x24
 800ca28:	2320      	movs	r3, #32
 800ca2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca32:	2330      	movs	r3, #48	; 0x30
 800ca34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cbe8 <_vfiprintf_r+0x220>
 800ca38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca3c:	f04f 0901 	mov.w	r9, #1
 800ca40:	4623      	mov	r3, r4
 800ca42:	469a      	mov	sl, r3
 800ca44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca48:	b10a      	cbz	r2, 800ca4e <_vfiprintf_r+0x86>
 800ca4a:	2a25      	cmp	r2, #37	; 0x25
 800ca4c:	d1f9      	bne.n	800ca42 <_vfiprintf_r+0x7a>
 800ca4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ca52:	d00b      	beq.n	800ca6c <_vfiprintf_r+0xa4>
 800ca54:	465b      	mov	r3, fp
 800ca56:	4622      	mov	r2, r4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7ff ffa1 	bl	800c9a2 <__sfputs_r>
 800ca60:	3001      	adds	r0, #1
 800ca62:	f000 80a9 	beq.w	800cbb8 <_vfiprintf_r+0x1f0>
 800ca66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca68:	445a      	add	r2, fp
 800ca6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ca6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f000 80a1 	beq.w	800cbb8 <_vfiprintf_r+0x1f0>
 800ca76:	2300      	movs	r3, #0
 800ca78:	f04f 32ff 	mov.w	r2, #4294967295
 800ca7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca80:	f10a 0a01 	add.w	sl, sl, #1
 800ca84:	9304      	str	r3, [sp, #16]
 800ca86:	9307      	str	r3, [sp, #28]
 800ca88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ca8e:	4654      	mov	r4, sl
 800ca90:	2205      	movs	r2, #5
 800ca92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca96:	4854      	ldr	r0, [pc, #336]	; (800cbe8 <_vfiprintf_r+0x220>)
 800ca98:	f7f3 fbd2 	bl	8000240 <memchr>
 800ca9c:	9a04      	ldr	r2, [sp, #16]
 800ca9e:	b9d8      	cbnz	r0, 800cad8 <_vfiprintf_r+0x110>
 800caa0:	06d1      	lsls	r1, r2, #27
 800caa2:	bf44      	itt	mi
 800caa4:	2320      	movmi	r3, #32
 800caa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caaa:	0713      	lsls	r3, r2, #28
 800caac:	bf44      	itt	mi
 800caae:	232b      	movmi	r3, #43	; 0x2b
 800cab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cab4:	f89a 3000 	ldrb.w	r3, [sl]
 800cab8:	2b2a      	cmp	r3, #42	; 0x2a
 800caba:	d015      	beq.n	800cae8 <_vfiprintf_r+0x120>
 800cabc:	9a07      	ldr	r2, [sp, #28]
 800cabe:	4654      	mov	r4, sl
 800cac0:	2000      	movs	r0, #0
 800cac2:	f04f 0c0a 	mov.w	ip, #10
 800cac6:	4621      	mov	r1, r4
 800cac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cacc:	3b30      	subs	r3, #48	; 0x30
 800cace:	2b09      	cmp	r3, #9
 800cad0:	d94d      	bls.n	800cb6e <_vfiprintf_r+0x1a6>
 800cad2:	b1b0      	cbz	r0, 800cb02 <_vfiprintf_r+0x13a>
 800cad4:	9207      	str	r2, [sp, #28]
 800cad6:	e014      	b.n	800cb02 <_vfiprintf_r+0x13a>
 800cad8:	eba0 0308 	sub.w	r3, r0, r8
 800cadc:	fa09 f303 	lsl.w	r3, r9, r3
 800cae0:	4313      	orrs	r3, r2
 800cae2:	9304      	str	r3, [sp, #16]
 800cae4:	46a2      	mov	sl, r4
 800cae6:	e7d2      	b.n	800ca8e <_vfiprintf_r+0xc6>
 800cae8:	9b03      	ldr	r3, [sp, #12]
 800caea:	1d19      	adds	r1, r3, #4
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	9103      	str	r1, [sp, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	bfbb      	ittet	lt
 800caf4:	425b      	neglt	r3, r3
 800caf6:	f042 0202 	orrlt.w	r2, r2, #2
 800cafa:	9307      	strge	r3, [sp, #28]
 800cafc:	9307      	strlt	r3, [sp, #28]
 800cafe:	bfb8      	it	lt
 800cb00:	9204      	strlt	r2, [sp, #16]
 800cb02:	7823      	ldrb	r3, [r4, #0]
 800cb04:	2b2e      	cmp	r3, #46	; 0x2e
 800cb06:	d10c      	bne.n	800cb22 <_vfiprintf_r+0x15a>
 800cb08:	7863      	ldrb	r3, [r4, #1]
 800cb0a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb0c:	d134      	bne.n	800cb78 <_vfiprintf_r+0x1b0>
 800cb0e:	9b03      	ldr	r3, [sp, #12]
 800cb10:	1d1a      	adds	r2, r3, #4
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	9203      	str	r2, [sp, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	bfb8      	it	lt
 800cb1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb1e:	3402      	adds	r4, #2
 800cb20:	9305      	str	r3, [sp, #20]
 800cb22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cbf8 <_vfiprintf_r+0x230>
 800cb26:	7821      	ldrb	r1, [r4, #0]
 800cb28:	2203      	movs	r2, #3
 800cb2a:	4650      	mov	r0, sl
 800cb2c:	f7f3 fb88 	bl	8000240 <memchr>
 800cb30:	b138      	cbz	r0, 800cb42 <_vfiprintf_r+0x17a>
 800cb32:	9b04      	ldr	r3, [sp, #16]
 800cb34:	eba0 000a 	sub.w	r0, r0, sl
 800cb38:	2240      	movs	r2, #64	; 0x40
 800cb3a:	4082      	lsls	r2, r0
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	3401      	adds	r4, #1
 800cb40:	9304      	str	r3, [sp, #16]
 800cb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb46:	4829      	ldr	r0, [pc, #164]	; (800cbec <_vfiprintf_r+0x224>)
 800cb48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb4c:	2206      	movs	r2, #6
 800cb4e:	f7f3 fb77 	bl	8000240 <memchr>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d03f      	beq.n	800cbd6 <_vfiprintf_r+0x20e>
 800cb56:	4b26      	ldr	r3, [pc, #152]	; (800cbf0 <_vfiprintf_r+0x228>)
 800cb58:	bb1b      	cbnz	r3, 800cba2 <_vfiprintf_r+0x1da>
 800cb5a:	9b03      	ldr	r3, [sp, #12]
 800cb5c:	3307      	adds	r3, #7
 800cb5e:	f023 0307 	bic.w	r3, r3, #7
 800cb62:	3308      	adds	r3, #8
 800cb64:	9303      	str	r3, [sp, #12]
 800cb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb68:	443b      	add	r3, r7
 800cb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb6c:	e768      	b.n	800ca40 <_vfiprintf_r+0x78>
 800cb6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb72:	460c      	mov	r4, r1
 800cb74:	2001      	movs	r0, #1
 800cb76:	e7a6      	b.n	800cac6 <_vfiprintf_r+0xfe>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	3401      	adds	r4, #1
 800cb7c:	9305      	str	r3, [sp, #20]
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f04f 0c0a 	mov.w	ip, #10
 800cb84:	4620      	mov	r0, r4
 800cb86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb8a:	3a30      	subs	r2, #48	; 0x30
 800cb8c:	2a09      	cmp	r2, #9
 800cb8e:	d903      	bls.n	800cb98 <_vfiprintf_r+0x1d0>
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0c6      	beq.n	800cb22 <_vfiprintf_r+0x15a>
 800cb94:	9105      	str	r1, [sp, #20]
 800cb96:	e7c4      	b.n	800cb22 <_vfiprintf_r+0x15a>
 800cb98:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e7f0      	b.n	800cb84 <_vfiprintf_r+0x1bc>
 800cba2:	ab03      	add	r3, sp, #12
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	462a      	mov	r2, r5
 800cba8:	4b12      	ldr	r3, [pc, #72]	; (800cbf4 <_vfiprintf_r+0x22c>)
 800cbaa:	a904      	add	r1, sp, #16
 800cbac:	4630      	mov	r0, r6
 800cbae:	f3af 8000 	nop.w
 800cbb2:	4607      	mov	r7, r0
 800cbb4:	1c78      	adds	r0, r7, #1
 800cbb6:	d1d6      	bne.n	800cb66 <_vfiprintf_r+0x19e>
 800cbb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbba:	07d9      	lsls	r1, r3, #31
 800cbbc:	d405      	bmi.n	800cbca <_vfiprintf_r+0x202>
 800cbbe:	89ab      	ldrh	r3, [r5, #12]
 800cbc0:	059a      	lsls	r2, r3, #22
 800cbc2:	d402      	bmi.n	800cbca <_vfiprintf_r+0x202>
 800cbc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbc6:	f7ff fc6f 	bl	800c4a8 <__retarget_lock_release_recursive>
 800cbca:	89ab      	ldrh	r3, [r5, #12]
 800cbcc:	065b      	lsls	r3, r3, #25
 800cbce:	f53f af1d 	bmi.w	800ca0c <_vfiprintf_r+0x44>
 800cbd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbd4:	e71c      	b.n	800ca10 <_vfiprintf_r+0x48>
 800cbd6:	ab03      	add	r3, sp, #12
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	462a      	mov	r2, r5
 800cbdc:	4b05      	ldr	r3, [pc, #20]	; (800cbf4 <_vfiprintf_r+0x22c>)
 800cbde:	a904      	add	r1, sp, #16
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f000 f879 	bl	800ccd8 <_printf_i>
 800cbe6:	e7e4      	b.n	800cbb2 <_vfiprintf_r+0x1ea>
 800cbe8:	0800d77a 	.word	0x0800d77a
 800cbec:	0800d784 	.word	0x0800d784
 800cbf0:	00000000 	.word	0x00000000
 800cbf4:	0800c9a3 	.word	0x0800c9a3
 800cbf8:	0800d780 	.word	0x0800d780

0800cbfc <_printf_common>:
 800cbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc00:	4616      	mov	r6, r2
 800cc02:	4699      	mov	r9, r3
 800cc04:	688a      	ldr	r2, [r1, #8]
 800cc06:	690b      	ldr	r3, [r1, #16]
 800cc08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	bfb8      	it	lt
 800cc10:	4613      	movlt	r3, r2
 800cc12:	6033      	str	r3, [r6, #0]
 800cc14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc18:	4607      	mov	r7, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	b10a      	cbz	r2, 800cc22 <_printf_common+0x26>
 800cc1e:	3301      	adds	r3, #1
 800cc20:	6033      	str	r3, [r6, #0]
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	0699      	lsls	r1, r3, #26
 800cc26:	bf42      	ittt	mi
 800cc28:	6833      	ldrmi	r3, [r6, #0]
 800cc2a:	3302      	addmi	r3, #2
 800cc2c:	6033      	strmi	r3, [r6, #0]
 800cc2e:	6825      	ldr	r5, [r4, #0]
 800cc30:	f015 0506 	ands.w	r5, r5, #6
 800cc34:	d106      	bne.n	800cc44 <_printf_common+0x48>
 800cc36:	f104 0a19 	add.w	sl, r4, #25
 800cc3a:	68e3      	ldr	r3, [r4, #12]
 800cc3c:	6832      	ldr	r2, [r6, #0]
 800cc3e:	1a9b      	subs	r3, r3, r2
 800cc40:	42ab      	cmp	r3, r5
 800cc42:	dc26      	bgt.n	800cc92 <_printf_common+0x96>
 800cc44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc48:	1e13      	subs	r3, r2, #0
 800cc4a:	6822      	ldr	r2, [r4, #0]
 800cc4c:	bf18      	it	ne
 800cc4e:	2301      	movne	r3, #1
 800cc50:	0692      	lsls	r2, r2, #26
 800cc52:	d42b      	bmi.n	800ccac <_printf_common+0xb0>
 800cc54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc58:	4649      	mov	r1, r9
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	47c0      	blx	r8
 800cc5e:	3001      	adds	r0, #1
 800cc60:	d01e      	beq.n	800cca0 <_printf_common+0xa4>
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	6922      	ldr	r2, [r4, #16]
 800cc66:	f003 0306 	and.w	r3, r3, #6
 800cc6a:	2b04      	cmp	r3, #4
 800cc6c:	bf02      	ittt	eq
 800cc6e:	68e5      	ldreq	r5, [r4, #12]
 800cc70:	6833      	ldreq	r3, [r6, #0]
 800cc72:	1aed      	subeq	r5, r5, r3
 800cc74:	68a3      	ldr	r3, [r4, #8]
 800cc76:	bf0c      	ite	eq
 800cc78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc7c:	2500      	movne	r5, #0
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	bfc4      	itt	gt
 800cc82:	1a9b      	subgt	r3, r3, r2
 800cc84:	18ed      	addgt	r5, r5, r3
 800cc86:	2600      	movs	r6, #0
 800cc88:	341a      	adds	r4, #26
 800cc8a:	42b5      	cmp	r5, r6
 800cc8c:	d11a      	bne.n	800ccc4 <_printf_common+0xc8>
 800cc8e:	2000      	movs	r0, #0
 800cc90:	e008      	b.n	800cca4 <_printf_common+0xa8>
 800cc92:	2301      	movs	r3, #1
 800cc94:	4652      	mov	r2, sl
 800cc96:	4649      	mov	r1, r9
 800cc98:	4638      	mov	r0, r7
 800cc9a:	47c0      	blx	r8
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	d103      	bne.n	800cca8 <_printf_common+0xac>
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
 800cca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cca8:	3501      	adds	r5, #1
 800ccaa:	e7c6      	b.n	800cc3a <_printf_common+0x3e>
 800ccac:	18e1      	adds	r1, r4, r3
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	2030      	movs	r0, #48	; 0x30
 800ccb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ccb6:	4422      	add	r2, r4
 800ccb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ccbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ccc0:	3302      	adds	r3, #2
 800ccc2:	e7c7      	b.n	800cc54 <_printf_common+0x58>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	4622      	mov	r2, r4
 800ccc8:	4649      	mov	r1, r9
 800ccca:	4638      	mov	r0, r7
 800cccc:	47c0      	blx	r8
 800ccce:	3001      	adds	r0, #1
 800ccd0:	d0e6      	beq.n	800cca0 <_printf_common+0xa4>
 800ccd2:	3601      	adds	r6, #1
 800ccd4:	e7d9      	b.n	800cc8a <_printf_common+0x8e>
	...

0800ccd8 <_printf_i>:
 800ccd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccdc:	7e0f      	ldrb	r7, [r1, #24]
 800ccde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cce0:	2f78      	cmp	r7, #120	; 0x78
 800cce2:	4691      	mov	r9, r2
 800cce4:	4680      	mov	r8, r0
 800cce6:	460c      	mov	r4, r1
 800cce8:	469a      	mov	sl, r3
 800ccea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ccee:	d807      	bhi.n	800cd00 <_printf_i+0x28>
 800ccf0:	2f62      	cmp	r7, #98	; 0x62
 800ccf2:	d80a      	bhi.n	800cd0a <_printf_i+0x32>
 800ccf4:	2f00      	cmp	r7, #0
 800ccf6:	f000 80d4 	beq.w	800cea2 <_printf_i+0x1ca>
 800ccfa:	2f58      	cmp	r7, #88	; 0x58
 800ccfc:	f000 80c0 	beq.w	800ce80 <_printf_i+0x1a8>
 800cd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd08:	e03a      	b.n	800cd80 <_printf_i+0xa8>
 800cd0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd0e:	2b15      	cmp	r3, #21
 800cd10:	d8f6      	bhi.n	800cd00 <_printf_i+0x28>
 800cd12:	a101      	add	r1, pc, #4	; (adr r1, 800cd18 <_printf_i+0x40>)
 800cd14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd18:	0800cd71 	.word	0x0800cd71
 800cd1c:	0800cd85 	.word	0x0800cd85
 800cd20:	0800cd01 	.word	0x0800cd01
 800cd24:	0800cd01 	.word	0x0800cd01
 800cd28:	0800cd01 	.word	0x0800cd01
 800cd2c:	0800cd01 	.word	0x0800cd01
 800cd30:	0800cd85 	.word	0x0800cd85
 800cd34:	0800cd01 	.word	0x0800cd01
 800cd38:	0800cd01 	.word	0x0800cd01
 800cd3c:	0800cd01 	.word	0x0800cd01
 800cd40:	0800cd01 	.word	0x0800cd01
 800cd44:	0800ce89 	.word	0x0800ce89
 800cd48:	0800cdb1 	.word	0x0800cdb1
 800cd4c:	0800ce43 	.word	0x0800ce43
 800cd50:	0800cd01 	.word	0x0800cd01
 800cd54:	0800cd01 	.word	0x0800cd01
 800cd58:	0800ceab 	.word	0x0800ceab
 800cd5c:	0800cd01 	.word	0x0800cd01
 800cd60:	0800cdb1 	.word	0x0800cdb1
 800cd64:	0800cd01 	.word	0x0800cd01
 800cd68:	0800cd01 	.word	0x0800cd01
 800cd6c:	0800ce4b 	.word	0x0800ce4b
 800cd70:	682b      	ldr	r3, [r5, #0]
 800cd72:	1d1a      	adds	r2, r3, #4
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	602a      	str	r2, [r5, #0]
 800cd78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd80:	2301      	movs	r3, #1
 800cd82:	e09f      	b.n	800cec4 <_printf_i+0x1ec>
 800cd84:	6820      	ldr	r0, [r4, #0]
 800cd86:	682b      	ldr	r3, [r5, #0]
 800cd88:	0607      	lsls	r7, r0, #24
 800cd8a:	f103 0104 	add.w	r1, r3, #4
 800cd8e:	6029      	str	r1, [r5, #0]
 800cd90:	d501      	bpl.n	800cd96 <_printf_i+0xbe>
 800cd92:	681e      	ldr	r6, [r3, #0]
 800cd94:	e003      	b.n	800cd9e <_printf_i+0xc6>
 800cd96:	0646      	lsls	r6, r0, #25
 800cd98:	d5fb      	bpl.n	800cd92 <_printf_i+0xba>
 800cd9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cd9e:	2e00      	cmp	r6, #0
 800cda0:	da03      	bge.n	800cdaa <_printf_i+0xd2>
 800cda2:	232d      	movs	r3, #45	; 0x2d
 800cda4:	4276      	negs	r6, r6
 800cda6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdaa:	485a      	ldr	r0, [pc, #360]	; (800cf14 <_printf_i+0x23c>)
 800cdac:	230a      	movs	r3, #10
 800cdae:	e012      	b.n	800cdd6 <_printf_i+0xfe>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	6820      	ldr	r0, [r4, #0]
 800cdb4:	1d19      	adds	r1, r3, #4
 800cdb6:	6029      	str	r1, [r5, #0]
 800cdb8:	0605      	lsls	r5, r0, #24
 800cdba:	d501      	bpl.n	800cdc0 <_printf_i+0xe8>
 800cdbc:	681e      	ldr	r6, [r3, #0]
 800cdbe:	e002      	b.n	800cdc6 <_printf_i+0xee>
 800cdc0:	0641      	lsls	r1, r0, #25
 800cdc2:	d5fb      	bpl.n	800cdbc <_printf_i+0xe4>
 800cdc4:	881e      	ldrh	r6, [r3, #0]
 800cdc6:	4853      	ldr	r0, [pc, #332]	; (800cf14 <_printf_i+0x23c>)
 800cdc8:	2f6f      	cmp	r7, #111	; 0x6f
 800cdca:	bf0c      	ite	eq
 800cdcc:	2308      	moveq	r3, #8
 800cdce:	230a      	movne	r3, #10
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdd6:	6865      	ldr	r5, [r4, #4]
 800cdd8:	60a5      	str	r5, [r4, #8]
 800cdda:	2d00      	cmp	r5, #0
 800cddc:	bfa2      	ittt	ge
 800cdde:	6821      	ldrge	r1, [r4, #0]
 800cde0:	f021 0104 	bicge.w	r1, r1, #4
 800cde4:	6021      	strge	r1, [r4, #0]
 800cde6:	b90e      	cbnz	r6, 800cdec <_printf_i+0x114>
 800cde8:	2d00      	cmp	r5, #0
 800cdea:	d04b      	beq.n	800ce84 <_printf_i+0x1ac>
 800cdec:	4615      	mov	r5, r2
 800cdee:	fbb6 f1f3 	udiv	r1, r6, r3
 800cdf2:	fb03 6711 	mls	r7, r3, r1, r6
 800cdf6:	5dc7      	ldrb	r7, [r0, r7]
 800cdf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cdfc:	4637      	mov	r7, r6
 800cdfe:	42bb      	cmp	r3, r7
 800ce00:	460e      	mov	r6, r1
 800ce02:	d9f4      	bls.n	800cdee <_printf_i+0x116>
 800ce04:	2b08      	cmp	r3, #8
 800ce06:	d10b      	bne.n	800ce20 <_printf_i+0x148>
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	07de      	lsls	r6, r3, #31
 800ce0c:	d508      	bpl.n	800ce20 <_printf_i+0x148>
 800ce0e:	6923      	ldr	r3, [r4, #16]
 800ce10:	6861      	ldr	r1, [r4, #4]
 800ce12:	4299      	cmp	r1, r3
 800ce14:	bfde      	ittt	le
 800ce16:	2330      	movle	r3, #48	; 0x30
 800ce18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce20:	1b52      	subs	r2, r2, r5
 800ce22:	6122      	str	r2, [r4, #16]
 800ce24:	f8cd a000 	str.w	sl, [sp]
 800ce28:	464b      	mov	r3, r9
 800ce2a:	aa03      	add	r2, sp, #12
 800ce2c:	4621      	mov	r1, r4
 800ce2e:	4640      	mov	r0, r8
 800ce30:	f7ff fee4 	bl	800cbfc <_printf_common>
 800ce34:	3001      	adds	r0, #1
 800ce36:	d14a      	bne.n	800cece <_printf_i+0x1f6>
 800ce38:	f04f 30ff 	mov.w	r0, #4294967295
 800ce3c:	b004      	add	sp, #16
 800ce3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	f043 0320 	orr.w	r3, r3, #32
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	4833      	ldr	r0, [pc, #204]	; (800cf18 <_printf_i+0x240>)
 800ce4c:	2778      	movs	r7, #120	; 0x78
 800ce4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce52:	6823      	ldr	r3, [r4, #0]
 800ce54:	6829      	ldr	r1, [r5, #0]
 800ce56:	061f      	lsls	r7, r3, #24
 800ce58:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce5c:	d402      	bmi.n	800ce64 <_printf_i+0x18c>
 800ce5e:	065f      	lsls	r7, r3, #25
 800ce60:	bf48      	it	mi
 800ce62:	b2b6      	uxthmi	r6, r6
 800ce64:	07df      	lsls	r7, r3, #31
 800ce66:	bf48      	it	mi
 800ce68:	f043 0320 	orrmi.w	r3, r3, #32
 800ce6c:	6029      	str	r1, [r5, #0]
 800ce6e:	bf48      	it	mi
 800ce70:	6023      	strmi	r3, [r4, #0]
 800ce72:	b91e      	cbnz	r6, 800ce7c <_printf_i+0x1a4>
 800ce74:	6823      	ldr	r3, [r4, #0]
 800ce76:	f023 0320 	bic.w	r3, r3, #32
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	2310      	movs	r3, #16
 800ce7e:	e7a7      	b.n	800cdd0 <_printf_i+0xf8>
 800ce80:	4824      	ldr	r0, [pc, #144]	; (800cf14 <_printf_i+0x23c>)
 800ce82:	e7e4      	b.n	800ce4e <_printf_i+0x176>
 800ce84:	4615      	mov	r5, r2
 800ce86:	e7bd      	b.n	800ce04 <_printf_i+0x12c>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	6826      	ldr	r6, [r4, #0]
 800ce8c:	6961      	ldr	r1, [r4, #20]
 800ce8e:	1d18      	adds	r0, r3, #4
 800ce90:	6028      	str	r0, [r5, #0]
 800ce92:	0635      	lsls	r5, r6, #24
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	d501      	bpl.n	800ce9c <_printf_i+0x1c4>
 800ce98:	6019      	str	r1, [r3, #0]
 800ce9a:	e002      	b.n	800cea2 <_printf_i+0x1ca>
 800ce9c:	0670      	lsls	r0, r6, #25
 800ce9e:	d5fb      	bpl.n	800ce98 <_printf_i+0x1c0>
 800cea0:	8019      	strh	r1, [r3, #0]
 800cea2:	2300      	movs	r3, #0
 800cea4:	6123      	str	r3, [r4, #16]
 800cea6:	4615      	mov	r5, r2
 800cea8:	e7bc      	b.n	800ce24 <_printf_i+0x14c>
 800ceaa:	682b      	ldr	r3, [r5, #0]
 800ceac:	1d1a      	adds	r2, r3, #4
 800ceae:	602a      	str	r2, [r5, #0]
 800ceb0:	681d      	ldr	r5, [r3, #0]
 800ceb2:	6862      	ldr	r2, [r4, #4]
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	f7f3 f9c2 	bl	8000240 <memchr>
 800cebc:	b108      	cbz	r0, 800cec2 <_printf_i+0x1ea>
 800cebe:	1b40      	subs	r0, r0, r5
 800cec0:	6060      	str	r0, [r4, #4]
 800cec2:	6863      	ldr	r3, [r4, #4]
 800cec4:	6123      	str	r3, [r4, #16]
 800cec6:	2300      	movs	r3, #0
 800cec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cecc:	e7aa      	b.n	800ce24 <_printf_i+0x14c>
 800cece:	6923      	ldr	r3, [r4, #16]
 800ced0:	462a      	mov	r2, r5
 800ced2:	4649      	mov	r1, r9
 800ced4:	4640      	mov	r0, r8
 800ced6:	47d0      	blx	sl
 800ced8:	3001      	adds	r0, #1
 800ceda:	d0ad      	beq.n	800ce38 <_printf_i+0x160>
 800cedc:	6823      	ldr	r3, [r4, #0]
 800cede:	079b      	lsls	r3, r3, #30
 800cee0:	d413      	bmi.n	800cf0a <_printf_i+0x232>
 800cee2:	68e0      	ldr	r0, [r4, #12]
 800cee4:	9b03      	ldr	r3, [sp, #12]
 800cee6:	4298      	cmp	r0, r3
 800cee8:	bfb8      	it	lt
 800ceea:	4618      	movlt	r0, r3
 800ceec:	e7a6      	b.n	800ce3c <_printf_i+0x164>
 800ceee:	2301      	movs	r3, #1
 800cef0:	4632      	mov	r2, r6
 800cef2:	4649      	mov	r1, r9
 800cef4:	4640      	mov	r0, r8
 800cef6:	47d0      	blx	sl
 800cef8:	3001      	adds	r0, #1
 800cefa:	d09d      	beq.n	800ce38 <_printf_i+0x160>
 800cefc:	3501      	adds	r5, #1
 800cefe:	68e3      	ldr	r3, [r4, #12]
 800cf00:	9903      	ldr	r1, [sp, #12]
 800cf02:	1a5b      	subs	r3, r3, r1
 800cf04:	42ab      	cmp	r3, r5
 800cf06:	dcf2      	bgt.n	800ceee <_printf_i+0x216>
 800cf08:	e7eb      	b.n	800cee2 <_printf_i+0x20a>
 800cf0a:	2500      	movs	r5, #0
 800cf0c:	f104 0619 	add.w	r6, r4, #25
 800cf10:	e7f5      	b.n	800cefe <_printf_i+0x226>
 800cf12:	bf00      	nop
 800cf14:	0800d78b 	.word	0x0800d78b
 800cf18:	0800d79c 	.word	0x0800d79c

0800cf1c <__sflush_r>:
 800cf1c:	898a      	ldrh	r2, [r1, #12]
 800cf1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf22:	4605      	mov	r5, r0
 800cf24:	0710      	lsls	r0, r2, #28
 800cf26:	460c      	mov	r4, r1
 800cf28:	d458      	bmi.n	800cfdc <__sflush_r+0xc0>
 800cf2a:	684b      	ldr	r3, [r1, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	dc05      	bgt.n	800cf3c <__sflush_r+0x20>
 800cf30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	dc02      	bgt.n	800cf3c <__sflush_r+0x20>
 800cf36:	2000      	movs	r0, #0
 800cf38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf3e:	2e00      	cmp	r6, #0
 800cf40:	d0f9      	beq.n	800cf36 <__sflush_r+0x1a>
 800cf42:	2300      	movs	r3, #0
 800cf44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf48:	682f      	ldr	r7, [r5, #0]
 800cf4a:	6a21      	ldr	r1, [r4, #32]
 800cf4c:	602b      	str	r3, [r5, #0]
 800cf4e:	d032      	beq.n	800cfb6 <__sflush_r+0x9a>
 800cf50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	075a      	lsls	r2, r3, #29
 800cf56:	d505      	bpl.n	800cf64 <__sflush_r+0x48>
 800cf58:	6863      	ldr	r3, [r4, #4]
 800cf5a:	1ac0      	subs	r0, r0, r3
 800cf5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf5e:	b10b      	cbz	r3, 800cf64 <__sflush_r+0x48>
 800cf60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf62:	1ac0      	subs	r0, r0, r3
 800cf64:	2300      	movs	r3, #0
 800cf66:	4602      	mov	r2, r0
 800cf68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf6a:	6a21      	ldr	r1, [r4, #32]
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	47b0      	blx	r6
 800cf70:	1c43      	adds	r3, r0, #1
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	d106      	bne.n	800cf84 <__sflush_r+0x68>
 800cf76:	6829      	ldr	r1, [r5, #0]
 800cf78:	291d      	cmp	r1, #29
 800cf7a:	d82b      	bhi.n	800cfd4 <__sflush_r+0xb8>
 800cf7c:	4a29      	ldr	r2, [pc, #164]	; (800d024 <__sflush_r+0x108>)
 800cf7e:	410a      	asrs	r2, r1
 800cf80:	07d6      	lsls	r6, r2, #31
 800cf82:	d427      	bmi.n	800cfd4 <__sflush_r+0xb8>
 800cf84:	2200      	movs	r2, #0
 800cf86:	6062      	str	r2, [r4, #4]
 800cf88:	04d9      	lsls	r1, r3, #19
 800cf8a:	6922      	ldr	r2, [r4, #16]
 800cf8c:	6022      	str	r2, [r4, #0]
 800cf8e:	d504      	bpl.n	800cf9a <__sflush_r+0x7e>
 800cf90:	1c42      	adds	r2, r0, #1
 800cf92:	d101      	bne.n	800cf98 <__sflush_r+0x7c>
 800cf94:	682b      	ldr	r3, [r5, #0]
 800cf96:	b903      	cbnz	r3, 800cf9a <__sflush_r+0x7e>
 800cf98:	6560      	str	r0, [r4, #84]	; 0x54
 800cf9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf9c:	602f      	str	r7, [r5, #0]
 800cf9e:	2900      	cmp	r1, #0
 800cfa0:	d0c9      	beq.n	800cf36 <__sflush_r+0x1a>
 800cfa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfa6:	4299      	cmp	r1, r3
 800cfa8:	d002      	beq.n	800cfb0 <__sflush_r+0x94>
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f7ff fa92 	bl	800c4d4 <_free_r>
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	6360      	str	r0, [r4, #52]	; 0x34
 800cfb4:	e7c0      	b.n	800cf38 <__sflush_r+0x1c>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	4628      	mov	r0, r5
 800cfba:	47b0      	blx	r6
 800cfbc:	1c41      	adds	r1, r0, #1
 800cfbe:	d1c8      	bne.n	800cf52 <__sflush_r+0x36>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d0c5      	beq.n	800cf52 <__sflush_r+0x36>
 800cfc6:	2b1d      	cmp	r3, #29
 800cfc8:	d001      	beq.n	800cfce <__sflush_r+0xb2>
 800cfca:	2b16      	cmp	r3, #22
 800cfcc:	d101      	bne.n	800cfd2 <__sflush_r+0xb6>
 800cfce:	602f      	str	r7, [r5, #0]
 800cfd0:	e7b1      	b.n	800cf36 <__sflush_r+0x1a>
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfd8:	81a3      	strh	r3, [r4, #12]
 800cfda:	e7ad      	b.n	800cf38 <__sflush_r+0x1c>
 800cfdc:	690f      	ldr	r7, [r1, #16]
 800cfde:	2f00      	cmp	r7, #0
 800cfe0:	d0a9      	beq.n	800cf36 <__sflush_r+0x1a>
 800cfe2:	0793      	lsls	r3, r2, #30
 800cfe4:	680e      	ldr	r6, [r1, #0]
 800cfe6:	bf08      	it	eq
 800cfe8:	694b      	ldreq	r3, [r1, #20]
 800cfea:	600f      	str	r7, [r1, #0]
 800cfec:	bf18      	it	ne
 800cfee:	2300      	movne	r3, #0
 800cff0:	eba6 0807 	sub.w	r8, r6, r7
 800cff4:	608b      	str	r3, [r1, #8]
 800cff6:	f1b8 0f00 	cmp.w	r8, #0
 800cffa:	dd9c      	ble.n	800cf36 <__sflush_r+0x1a>
 800cffc:	6a21      	ldr	r1, [r4, #32]
 800cffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d000:	4643      	mov	r3, r8
 800d002:	463a      	mov	r2, r7
 800d004:	4628      	mov	r0, r5
 800d006:	47b0      	blx	r6
 800d008:	2800      	cmp	r0, #0
 800d00a:	dc06      	bgt.n	800d01a <__sflush_r+0xfe>
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d012:	81a3      	strh	r3, [r4, #12]
 800d014:	f04f 30ff 	mov.w	r0, #4294967295
 800d018:	e78e      	b.n	800cf38 <__sflush_r+0x1c>
 800d01a:	4407      	add	r7, r0
 800d01c:	eba8 0800 	sub.w	r8, r8, r0
 800d020:	e7e9      	b.n	800cff6 <__sflush_r+0xda>
 800d022:	bf00      	nop
 800d024:	dfbffffe 	.word	0xdfbffffe

0800d028 <_fflush_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	690b      	ldr	r3, [r1, #16]
 800d02c:	4605      	mov	r5, r0
 800d02e:	460c      	mov	r4, r1
 800d030:	b913      	cbnz	r3, 800d038 <_fflush_r+0x10>
 800d032:	2500      	movs	r5, #0
 800d034:	4628      	mov	r0, r5
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	b118      	cbz	r0, 800d042 <_fflush_r+0x1a>
 800d03a:	6a03      	ldr	r3, [r0, #32]
 800d03c:	b90b      	cbnz	r3, 800d042 <_fflush_r+0x1a>
 800d03e:	f7ff f8e3 	bl	800c208 <__sinit>
 800d042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d0f3      	beq.n	800d032 <_fflush_r+0xa>
 800d04a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d04c:	07d0      	lsls	r0, r2, #31
 800d04e:	d404      	bmi.n	800d05a <_fflush_r+0x32>
 800d050:	0599      	lsls	r1, r3, #22
 800d052:	d402      	bmi.n	800d05a <_fflush_r+0x32>
 800d054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d056:	f7ff fa26 	bl	800c4a6 <__retarget_lock_acquire_recursive>
 800d05a:	4628      	mov	r0, r5
 800d05c:	4621      	mov	r1, r4
 800d05e:	f7ff ff5d 	bl	800cf1c <__sflush_r>
 800d062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d064:	07da      	lsls	r2, r3, #31
 800d066:	4605      	mov	r5, r0
 800d068:	d4e4      	bmi.n	800d034 <_fflush_r+0xc>
 800d06a:	89a3      	ldrh	r3, [r4, #12]
 800d06c:	059b      	lsls	r3, r3, #22
 800d06e:	d4e1      	bmi.n	800d034 <_fflush_r+0xc>
 800d070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d072:	f7ff fa19 	bl	800c4a8 <__retarget_lock_release_recursive>
 800d076:	e7dd      	b.n	800d034 <_fflush_r+0xc>

0800d078 <__swbuf_r>:
 800d078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07a:	460e      	mov	r6, r1
 800d07c:	4614      	mov	r4, r2
 800d07e:	4605      	mov	r5, r0
 800d080:	b118      	cbz	r0, 800d08a <__swbuf_r+0x12>
 800d082:	6a03      	ldr	r3, [r0, #32]
 800d084:	b90b      	cbnz	r3, 800d08a <__swbuf_r+0x12>
 800d086:	f7ff f8bf 	bl	800c208 <__sinit>
 800d08a:	69a3      	ldr	r3, [r4, #24]
 800d08c:	60a3      	str	r3, [r4, #8]
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	071a      	lsls	r2, r3, #28
 800d092:	d525      	bpl.n	800d0e0 <__swbuf_r+0x68>
 800d094:	6923      	ldr	r3, [r4, #16]
 800d096:	b31b      	cbz	r3, 800d0e0 <__swbuf_r+0x68>
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	6922      	ldr	r2, [r4, #16]
 800d09c:	1a98      	subs	r0, r3, r2
 800d09e:	6963      	ldr	r3, [r4, #20]
 800d0a0:	b2f6      	uxtb	r6, r6
 800d0a2:	4283      	cmp	r3, r0
 800d0a4:	4637      	mov	r7, r6
 800d0a6:	dc04      	bgt.n	800d0b2 <__swbuf_r+0x3a>
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f7ff ffbc 	bl	800d028 <_fflush_r>
 800d0b0:	b9e0      	cbnz	r0, 800d0ec <__swbuf_r+0x74>
 800d0b2:	68a3      	ldr	r3, [r4, #8]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	60a3      	str	r3, [r4, #8]
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	6022      	str	r2, [r4, #0]
 800d0be:	701e      	strb	r6, [r3, #0]
 800d0c0:	6962      	ldr	r2, [r4, #20]
 800d0c2:	1c43      	adds	r3, r0, #1
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d004      	beq.n	800d0d2 <__swbuf_r+0x5a>
 800d0c8:	89a3      	ldrh	r3, [r4, #12]
 800d0ca:	07db      	lsls	r3, r3, #31
 800d0cc:	d506      	bpl.n	800d0dc <__swbuf_r+0x64>
 800d0ce:	2e0a      	cmp	r6, #10
 800d0d0:	d104      	bne.n	800d0dc <__swbuf_r+0x64>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f7ff ffa7 	bl	800d028 <_fflush_r>
 800d0da:	b938      	cbnz	r0, 800d0ec <__swbuf_r+0x74>
 800d0dc:	4638      	mov	r0, r7
 800d0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f000 f806 	bl	800d0f4 <__swsetup_r>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d0d5      	beq.n	800d098 <__swbuf_r+0x20>
 800d0ec:	f04f 37ff 	mov.w	r7, #4294967295
 800d0f0:	e7f4      	b.n	800d0dc <__swbuf_r+0x64>
	...

0800d0f4 <__swsetup_r>:
 800d0f4:	b538      	push	{r3, r4, r5, lr}
 800d0f6:	4b2a      	ldr	r3, [pc, #168]	; (800d1a0 <__swsetup_r+0xac>)
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	b118      	cbz	r0, 800d108 <__swsetup_r+0x14>
 800d100:	6a03      	ldr	r3, [r0, #32]
 800d102:	b90b      	cbnz	r3, 800d108 <__swsetup_r+0x14>
 800d104:	f7ff f880 	bl	800c208 <__sinit>
 800d108:	89a3      	ldrh	r3, [r4, #12]
 800d10a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d10e:	0718      	lsls	r0, r3, #28
 800d110:	d422      	bmi.n	800d158 <__swsetup_r+0x64>
 800d112:	06d9      	lsls	r1, r3, #27
 800d114:	d407      	bmi.n	800d126 <__swsetup_r+0x32>
 800d116:	2309      	movs	r3, #9
 800d118:	602b      	str	r3, [r5, #0]
 800d11a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d11e:	81a3      	strh	r3, [r4, #12]
 800d120:	f04f 30ff 	mov.w	r0, #4294967295
 800d124:	e034      	b.n	800d190 <__swsetup_r+0x9c>
 800d126:	0758      	lsls	r0, r3, #29
 800d128:	d512      	bpl.n	800d150 <__swsetup_r+0x5c>
 800d12a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d12c:	b141      	cbz	r1, 800d140 <__swsetup_r+0x4c>
 800d12e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d132:	4299      	cmp	r1, r3
 800d134:	d002      	beq.n	800d13c <__swsetup_r+0x48>
 800d136:	4628      	mov	r0, r5
 800d138:	f7ff f9cc 	bl	800c4d4 <_free_r>
 800d13c:	2300      	movs	r3, #0
 800d13e:	6363      	str	r3, [r4, #52]	; 0x34
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	2300      	movs	r3, #0
 800d14a:	6063      	str	r3, [r4, #4]
 800d14c:	6923      	ldr	r3, [r4, #16]
 800d14e:	6023      	str	r3, [r4, #0]
 800d150:	89a3      	ldrh	r3, [r4, #12]
 800d152:	f043 0308 	orr.w	r3, r3, #8
 800d156:	81a3      	strh	r3, [r4, #12]
 800d158:	6923      	ldr	r3, [r4, #16]
 800d15a:	b94b      	cbnz	r3, 800d170 <__swsetup_r+0x7c>
 800d15c:	89a3      	ldrh	r3, [r4, #12]
 800d15e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d166:	d003      	beq.n	800d170 <__swsetup_r+0x7c>
 800d168:	4621      	mov	r1, r4
 800d16a:	4628      	mov	r0, r5
 800d16c:	f000 f8c3 	bl	800d2f6 <__smakebuf_r>
 800d170:	89a0      	ldrh	r0, [r4, #12]
 800d172:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d176:	f010 0301 	ands.w	r3, r0, #1
 800d17a:	d00a      	beq.n	800d192 <__swsetup_r+0x9e>
 800d17c:	2300      	movs	r3, #0
 800d17e:	60a3      	str	r3, [r4, #8]
 800d180:	6963      	ldr	r3, [r4, #20]
 800d182:	425b      	negs	r3, r3
 800d184:	61a3      	str	r3, [r4, #24]
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	b943      	cbnz	r3, 800d19c <__swsetup_r+0xa8>
 800d18a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d18e:	d1c4      	bne.n	800d11a <__swsetup_r+0x26>
 800d190:	bd38      	pop	{r3, r4, r5, pc}
 800d192:	0781      	lsls	r1, r0, #30
 800d194:	bf58      	it	pl
 800d196:	6963      	ldrpl	r3, [r4, #20]
 800d198:	60a3      	str	r3, [r4, #8]
 800d19a:	e7f4      	b.n	800d186 <__swsetup_r+0x92>
 800d19c:	2000      	movs	r0, #0
 800d19e:	e7f7      	b.n	800d190 <__swsetup_r+0x9c>
 800d1a0:	20000164 	.word	0x20000164

0800d1a4 <_raise_r>:
 800d1a4:	291f      	cmp	r1, #31
 800d1a6:	b538      	push	{r3, r4, r5, lr}
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	460d      	mov	r5, r1
 800d1ac:	d904      	bls.n	800d1b8 <_raise_r+0x14>
 800d1ae:	2316      	movs	r3, #22
 800d1b0:	6003      	str	r3, [r0, #0]
 800d1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d1ba:	b112      	cbz	r2, 800d1c2 <_raise_r+0x1e>
 800d1bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1c0:	b94b      	cbnz	r3, 800d1d6 <_raise_r+0x32>
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f000 f830 	bl	800d228 <_getpid_r>
 800d1c8:	462a      	mov	r2, r5
 800d1ca:	4601      	mov	r1, r0
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1d2:	f000 b817 	b.w	800d204 <_kill_r>
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d00a      	beq.n	800d1f0 <_raise_r+0x4c>
 800d1da:	1c59      	adds	r1, r3, #1
 800d1dc:	d103      	bne.n	800d1e6 <_raise_r+0x42>
 800d1de:	2316      	movs	r3, #22
 800d1e0:	6003      	str	r3, [r0, #0]
 800d1e2:	2001      	movs	r0, #1
 800d1e4:	e7e7      	b.n	800d1b6 <_raise_r+0x12>
 800d1e6:	2400      	movs	r4, #0
 800d1e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	4798      	blx	r3
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e7e0      	b.n	800d1b6 <_raise_r+0x12>

0800d1f4 <raise>:
 800d1f4:	4b02      	ldr	r3, [pc, #8]	; (800d200 <raise+0xc>)
 800d1f6:	4601      	mov	r1, r0
 800d1f8:	6818      	ldr	r0, [r3, #0]
 800d1fa:	f7ff bfd3 	b.w	800d1a4 <_raise_r>
 800d1fe:	bf00      	nop
 800d200:	20000164 	.word	0x20000164

0800d204 <_kill_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4d07      	ldr	r5, [pc, #28]	; (800d224 <_kill_r+0x20>)
 800d208:	2300      	movs	r3, #0
 800d20a:	4604      	mov	r4, r0
 800d20c:	4608      	mov	r0, r1
 800d20e:	4611      	mov	r1, r2
 800d210:	602b      	str	r3, [r5, #0]
 800d212:	f7f3 fe51 	bl	8000eb8 <_kill>
 800d216:	1c43      	adds	r3, r0, #1
 800d218:	d102      	bne.n	800d220 <_kill_r+0x1c>
 800d21a:	682b      	ldr	r3, [r5, #0]
 800d21c:	b103      	cbz	r3, 800d220 <_kill_r+0x1c>
 800d21e:	6023      	str	r3, [r4, #0]
 800d220:	bd38      	pop	{r3, r4, r5, pc}
 800d222:	bf00      	nop
 800d224:	20002374 	.word	0x20002374

0800d228 <_getpid_r>:
 800d228:	f7f3 be3e 	b.w	8000ea8 <_getpid>

0800d22c <_sbrk_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4d06      	ldr	r5, [pc, #24]	; (800d248 <_sbrk_r+0x1c>)
 800d230:	2300      	movs	r3, #0
 800d232:	4604      	mov	r4, r0
 800d234:	4608      	mov	r0, r1
 800d236:	602b      	str	r3, [r5, #0]
 800d238:	f7f3 fec6 	bl	8000fc8 <_sbrk>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	d102      	bne.n	800d246 <_sbrk_r+0x1a>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	b103      	cbz	r3, 800d246 <_sbrk_r+0x1a>
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	20002374 	.word	0x20002374

0800d24c <_realloc_r>:
 800d24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d250:	4680      	mov	r8, r0
 800d252:	4614      	mov	r4, r2
 800d254:	460e      	mov	r6, r1
 800d256:	b921      	cbnz	r1, 800d262 <_realloc_r+0x16>
 800d258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d25c:	4611      	mov	r1, r2
 800d25e:	f7ff b9a5 	b.w	800c5ac <_malloc_r>
 800d262:	b92a      	cbnz	r2, 800d270 <_realloc_r+0x24>
 800d264:	f7ff f936 	bl	800c4d4 <_free_r>
 800d268:	4625      	mov	r5, r4
 800d26a:	4628      	mov	r0, r5
 800d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d270:	f000 f8a0 	bl	800d3b4 <_malloc_usable_size_r>
 800d274:	4284      	cmp	r4, r0
 800d276:	4607      	mov	r7, r0
 800d278:	d802      	bhi.n	800d280 <_realloc_r+0x34>
 800d27a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d27e:	d812      	bhi.n	800d2a6 <_realloc_r+0x5a>
 800d280:	4621      	mov	r1, r4
 800d282:	4640      	mov	r0, r8
 800d284:	f7ff f992 	bl	800c5ac <_malloc_r>
 800d288:	4605      	mov	r5, r0
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d0ed      	beq.n	800d26a <_realloc_r+0x1e>
 800d28e:	42bc      	cmp	r4, r7
 800d290:	4622      	mov	r2, r4
 800d292:	4631      	mov	r1, r6
 800d294:	bf28      	it	cs
 800d296:	463a      	movcs	r2, r7
 800d298:	f7ff f907 	bl	800c4aa <memcpy>
 800d29c:	4631      	mov	r1, r6
 800d29e:	4640      	mov	r0, r8
 800d2a0:	f7ff f918 	bl	800c4d4 <_free_r>
 800d2a4:	e7e1      	b.n	800d26a <_realloc_r+0x1e>
 800d2a6:	4635      	mov	r5, r6
 800d2a8:	e7df      	b.n	800d26a <_realloc_r+0x1e>

0800d2aa <__swhatbuf_r>:
 800d2aa:	b570      	push	{r4, r5, r6, lr}
 800d2ac:	460c      	mov	r4, r1
 800d2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b2:	2900      	cmp	r1, #0
 800d2b4:	b096      	sub	sp, #88	; 0x58
 800d2b6:	4615      	mov	r5, r2
 800d2b8:	461e      	mov	r6, r3
 800d2ba:	da0d      	bge.n	800d2d8 <__swhatbuf_r+0x2e>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d2c2:	f04f 0100 	mov.w	r1, #0
 800d2c6:	bf0c      	ite	eq
 800d2c8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d2cc:	2340      	movne	r3, #64	; 0x40
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	6031      	str	r1, [r6, #0]
 800d2d2:	602b      	str	r3, [r5, #0]
 800d2d4:	b016      	add	sp, #88	; 0x58
 800d2d6:	bd70      	pop	{r4, r5, r6, pc}
 800d2d8:	466a      	mov	r2, sp
 800d2da:	f000 f849 	bl	800d370 <_fstat_r>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	dbec      	blt.n	800d2bc <__swhatbuf_r+0x12>
 800d2e2:	9901      	ldr	r1, [sp, #4]
 800d2e4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d2e8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d2ec:	4259      	negs	r1, r3
 800d2ee:	4159      	adcs	r1, r3
 800d2f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2f4:	e7eb      	b.n	800d2ce <__swhatbuf_r+0x24>

0800d2f6 <__smakebuf_r>:
 800d2f6:	898b      	ldrh	r3, [r1, #12]
 800d2f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2fa:	079d      	lsls	r5, r3, #30
 800d2fc:	4606      	mov	r6, r0
 800d2fe:	460c      	mov	r4, r1
 800d300:	d507      	bpl.n	800d312 <__smakebuf_r+0x1c>
 800d302:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d306:	6023      	str	r3, [r4, #0]
 800d308:	6123      	str	r3, [r4, #16]
 800d30a:	2301      	movs	r3, #1
 800d30c:	6163      	str	r3, [r4, #20]
 800d30e:	b002      	add	sp, #8
 800d310:	bd70      	pop	{r4, r5, r6, pc}
 800d312:	ab01      	add	r3, sp, #4
 800d314:	466a      	mov	r2, sp
 800d316:	f7ff ffc8 	bl	800d2aa <__swhatbuf_r>
 800d31a:	9900      	ldr	r1, [sp, #0]
 800d31c:	4605      	mov	r5, r0
 800d31e:	4630      	mov	r0, r6
 800d320:	f7ff f944 	bl	800c5ac <_malloc_r>
 800d324:	b948      	cbnz	r0, 800d33a <__smakebuf_r+0x44>
 800d326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d32a:	059a      	lsls	r2, r3, #22
 800d32c:	d4ef      	bmi.n	800d30e <__smakebuf_r+0x18>
 800d32e:	f023 0303 	bic.w	r3, r3, #3
 800d332:	f043 0302 	orr.w	r3, r3, #2
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	e7e3      	b.n	800d302 <__smakebuf_r+0xc>
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	6020      	str	r0, [r4, #0]
 800d33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d342:	81a3      	strh	r3, [r4, #12]
 800d344:	9b00      	ldr	r3, [sp, #0]
 800d346:	6163      	str	r3, [r4, #20]
 800d348:	9b01      	ldr	r3, [sp, #4]
 800d34a:	6120      	str	r0, [r4, #16]
 800d34c:	b15b      	cbz	r3, 800d366 <__smakebuf_r+0x70>
 800d34e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d352:	4630      	mov	r0, r6
 800d354:	f000 f81e 	bl	800d394 <_isatty_r>
 800d358:	b128      	cbz	r0, 800d366 <__smakebuf_r+0x70>
 800d35a:	89a3      	ldrh	r3, [r4, #12]
 800d35c:	f023 0303 	bic.w	r3, r3, #3
 800d360:	f043 0301 	orr.w	r3, r3, #1
 800d364:	81a3      	strh	r3, [r4, #12]
 800d366:	89a3      	ldrh	r3, [r4, #12]
 800d368:	431d      	orrs	r5, r3
 800d36a:	81a5      	strh	r5, [r4, #12]
 800d36c:	e7cf      	b.n	800d30e <__smakebuf_r+0x18>
	...

0800d370 <_fstat_r>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	4d07      	ldr	r5, [pc, #28]	; (800d390 <_fstat_r+0x20>)
 800d374:	2300      	movs	r3, #0
 800d376:	4604      	mov	r4, r0
 800d378:	4608      	mov	r0, r1
 800d37a:	4611      	mov	r1, r2
 800d37c:	602b      	str	r3, [r5, #0]
 800d37e:	f7f3 fdfa 	bl	8000f76 <_fstat>
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	d102      	bne.n	800d38c <_fstat_r+0x1c>
 800d386:	682b      	ldr	r3, [r5, #0]
 800d388:	b103      	cbz	r3, 800d38c <_fstat_r+0x1c>
 800d38a:	6023      	str	r3, [r4, #0]
 800d38c:	bd38      	pop	{r3, r4, r5, pc}
 800d38e:	bf00      	nop
 800d390:	20002374 	.word	0x20002374

0800d394 <_isatty_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	4d06      	ldr	r5, [pc, #24]	; (800d3b0 <_isatty_r+0x1c>)
 800d398:	2300      	movs	r3, #0
 800d39a:	4604      	mov	r4, r0
 800d39c:	4608      	mov	r0, r1
 800d39e:	602b      	str	r3, [r5, #0]
 800d3a0:	f7f3 fdf9 	bl	8000f96 <_isatty>
 800d3a4:	1c43      	adds	r3, r0, #1
 800d3a6:	d102      	bne.n	800d3ae <_isatty_r+0x1a>
 800d3a8:	682b      	ldr	r3, [r5, #0]
 800d3aa:	b103      	cbz	r3, 800d3ae <_isatty_r+0x1a>
 800d3ac:	6023      	str	r3, [r4, #0]
 800d3ae:	bd38      	pop	{r3, r4, r5, pc}
 800d3b0:	20002374 	.word	0x20002374

0800d3b4 <_malloc_usable_size_r>:
 800d3b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3b8:	1f18      	subs	r0, r3, #4
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	bfbc      	itt	lt
 800d3be:	580b      	ldrlt	r3, [r1, r0]
 800d3c0:	18c0      	addlt	r0, r0, r3
 800d3c2:	4770      	bx	lr

0800d3c4 <_init>:
 800d3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c6:	bf00      	nop
 800d3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ca:	bc08      	pop	{r3}
 800d3cc:	469e      	mov	lr, r3
 800d3ce:	4770      	bx	lr

0800d3d0 <_fini>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	bf00      	nop
 800d3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3d6:	bc08      	pop	{r3}
 800d3d8:	469e      	mov	lr, r3
 800d3da:	4770      	bx	lr
