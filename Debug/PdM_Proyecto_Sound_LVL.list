
PdM_Proyecto_Sound_LVL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800bac8  0800bac8  0001bac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd5c  0800bd5c  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd5c  0800bd5c  0001bd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd64  0800bd64  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800bd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f60  20000168  0800bed4  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200020c8  0800bed4  000220c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aea9  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004923  00000000  00000000  0003b084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001718  00000000  00000000  0003f9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001193  00000000  00000000  000410c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028487  00000000  00000000  00042253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021962  00000000  00000000  0006a6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfd23  00000000  00000000  0008c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066d8  00000000  00000000  0016bd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00172438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bab0 	.word	0x0800bab0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	0800bab0 	.word	0x0800bab0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fc96 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f810 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 f95a 	bl	8000880 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f92e 	bl	800082c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d0:	f000 f876 	bl	80006c0 <MX_ADC1_Init>
  MX_SPI3_Init();
 80005d4:	f000 f8f4 	bl	80007c0 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80005d8:	f009 fd38 	bl	800a04c <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80005dc:	f000 f8c2 	bl	8000764 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  project_main();
 80005e0:	f009 fd2e 	bl	800a040 <project_main>
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x28>
	...

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	; 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00a fbe1 	bl	800adbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd4>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000660:	2348      	movs	r3, #72	; 0x48
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000668:	2303      	movs	r3, #3
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fd1d 	bl	80040b4 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000680:	f000 f9a4 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fe93 	bl	80033cc <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006ac:	f000 f98e 	bl	80009cc <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_ADC1_Init+0x98>)
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_ADC1_Init+0x98>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_ADC1_Init+0x98>)
 8000720:	f000 fc7c 	bl	800101c <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f94f 	bl	80009cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800072e:	2301      	movs	r3, #1
 8000730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC1_Init+0x98>)
 8000740:	f000 fcb0 	bl	80010a4 <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800074a:	f000 f93f 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000184 	.word	0x20000184
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2C1_Init+0x50>)
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_I2C1_Init+0x54>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000770:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_I2C1_Init+0x58>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_I2C1_Init+0x50>)
 80007a2:	f001 fa31 	bl	8001c08 <HAL_I2C_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ac:	f000 f90e 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200001cc 	.word	0x200001cc
 80007b8:	40005400 	.word	0x40005400
 80007bc:	000186a0 	.word	0x000186a0

080007c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_SPI3_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_SPI3_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI3_Init+0x64>)
 80007cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI3_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_SPI3_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI3_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI3_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI3_Init+0x64>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI3_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_SPI3_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI3_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_SPI3_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI3_Init+0x64>)
 800080c:	220a      	movs	r2, #10
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_SPI3_Init+0x64>)
 8000812:	f003 feed 	bl	80045f0 <HAL_SPI_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800081c:	f000 f8d6 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000220 	.word	0x20000220
 8000828:	40003c00 	.word	0x40003c00

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f004 fc96 	bl	8005194 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f8ad 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000278 	.word	0x20000278
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b48      	ldr	r3, [pc, #288]	; (80009bc <MX_GPIO_Init+0x13c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a47      	ldr	r2, [pc, #284]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a40      	ldr	r2, [pc, #256]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b3e      	ldr	r3, [pc, #248]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b3a      	ldr	r3, [pc, #232]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a39      	ldr	r2, [pc, #228]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b37      	ldr	r3, [pc, #220]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b33      	ldr	r3, [pc, #204]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a32      	ldr	r2, [pc, #200]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <MX_GPIO_Init+0x13c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_GPIO_Init+0x13c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a2b      	ldr	r2, [pc, #172]	; (80009bc <MX_GPIO_Init+0x13c>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_GPIO_Init+0x13c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	4826      	ldr	r0, [pc, #152]	; (80009c0 <MX_GPIO_Init+0x140>)
 8000928:	f001 f93a 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000932:	4824      	ldr	r0, [pc, #144]	; (80009c4 <MX_GPIO_Init+0x144>)
 8000934:	f001 f934 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2104      	movs	r1, #4
 800093c:	4822      	ldr	r0, [pc, #136]	; (80009c8 <MX_GPIO_Init+0x148>)
 800093e:	f001 f92f 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000948:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	481a      	ldr	r0, [pc, #104]	; (80009c4 <MX_GPIO_Init+0x144>)
 800095a:	f000 ff75 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800095e:	2320      	movs	r3, #32
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <MX_GPIO_Init+0x140>)
 8000976:	f000 ff67 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800097a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <MX_GPIO_Init+0x144>)
 8000994:	f000 ff58 	bl	8001848 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000998:	2304      	movs	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_GPIO_Init+0x148>)
 80009b0:	f000 ff4a 	bl	8001848 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a16:	2007      	movs	r0, #7
 8000a18:	f000 fe42 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_ADC_MspInit+0x7c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d127      	bne.n	8000a9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_ADC_MspInit+0x80>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <HAL_ADC_MspInit+0x80>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_ADC_MspInit+0x80>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <HAL_ADC_MspInit+0x80>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <HAL_ADC_MspInit+0x80>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <HAL_ADC_MspInit+0x80>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a82:	2302      	movs	r3, #2
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a86:	2303      	movs	r3, #3
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <HAL_ADC_MspInit+0x84>)
 8000a96:	f000 fed7 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40012000 	.word	0x40012000
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_I2C_MspInit+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12c      	bne.n	8000b2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_I2C_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_I2C_MspInit+0x88>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af4:	2312      	movs	r3, #18
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b00:	2304      	movs	r3, #4
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <HAL_I2C_MspInit+0x8c>)
 8000b0c:	f000 fe9c 	bl	8001848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_I2C_MspInit+0x88>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_I2C_MspInit+0x88>)
 8000b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_I2C_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40005400 	.word	0x40005400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020400 	.word	0x40020400

08000b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_SPI_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_SPI_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bac:	2306      	movs	r3, #6
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_SPI_MspInit+0x8c>)
 8000bb8:	f000 fe46 	bl	8001848 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40003c00 	.word	0x40003c00
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_UART_MspInit+0x94>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d133      	bne.n	8000c5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_UART_MspInit+0x98>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_UART_MspInit+0x9c>)
 8000c46:	f000 fdff 	bl	8001848 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2026      	movs	r0, #38	; 0x26
 8000c50:	f000 fd31 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c54:	2026      	movs	r0, #38	; 0x26
 8000c56:	f000 fd4a 	bl	80016ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004400 	.word	0x40004400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f96a 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <USART2_IRQHandler+0x10>)
 8000cca:	f004 fb3f 	bl	800534c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000278 	.word	0x20000278

08000cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <OTG_FS_IRQHandler+0x10>)
 8000cde:	f001 fa22 	bl	8002126 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20001878 	.word	0x20001878

08000cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return 1;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_kill>:

int _kill(int pid, int sig)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d06:	f00a f8a9 	bl	800ae5c <__errno>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2216      	movs	r2, #22
 8000d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_exit>:

void _exit (int status)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ffe7 	bl	8000cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d2e:	e7fe      	b.n	8000d2e <_exit+0x12>

08000d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e00a      	b.n	8000d58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d42:	f3af 8000 	nop.w
 8000d46:	4601      	mov	r1, r0
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf0      	blt.n	8000d42 <_read+0x12>
  }

  return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e009      	b.n	8000d90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbf1      	blt.n	8000d7c <_write+0x12>
  }
  return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_close>:

int _close(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dca:	605a      	str	r2, [r3, #4]
  return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_isatty>:

int _isatty(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f00a f80e 	bl	800ae5c <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20020000 	.word	0x20020000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	200002c0 	.word	0x200002c0
 8000e74:	200020c8 	.word	0x200020c8

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ea0:	f7ff ffea 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	; (8000ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f009 ffcd 	bl	800ae68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fb75 	bl	80005bc <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8000ee0:	0800bd6c 	.word	0x0800bd6c
  ldr r2, =_sbss
 8000ee4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000ee8:	200020c8 	.word	0x200020c8

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 fbc1 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fd58 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fbd9 	bl	800170a <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 fba1 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	200002c4 	.word	0x200002c4

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200002c4 	.word	0x200002c4

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e033      	b.n	800109a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	2b00      	cmp	r3, #0
 8001038:	d109      	bne.n	800104e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff fcf4 	bl	8000a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	d118      	bne.n	800108c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001062:	f023 0302 	bic.w	r3, r3, #2
 8001066:	f043 0202 	orr.w	r2, r3, #2
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f94a 	bl	8001308 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f023 0303 	bic.w	r3, r3, #3
 8001082:	f043 0201 	orr.w	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
 800108a:	e001      	b.n	8001090 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d101      	bne.n	80010c0 <HAL_ADC_ConfigChannel+0x1c>
 80010bc:	2302      	movs	r3, #2
 80010be:	e113      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x244>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b09      	cmp	r3, #9
 80010ce:	d925      	bls.n	800111c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68d9      	ldr	r1, [r3, #12]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	3b1e      	subs	r3, #30
 80010e6:	2207      	movs	r2, #7
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43da      	mvns	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	400a      	ands	r2, r1
 80010f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68d9      	ldr	r1, [r3, #12]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	4603      	mov	r3, r0
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4403      	add	r3, r0
 800110e:	3b1e      	subs	r3, #30
 8001110:	409a      	lsls	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	e022      	b.n	8001162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6919      	ldr	r1, [r3, #16]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	2207      	movs	r2, #7
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	400a      	ands	r2, r1
 800113e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6919      	ldr	r1, [r3, #16]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	4603      	mov	r3, r0
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4403      	add	r3, r0
 8001158:	409a      	lsls	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b06      	cmp	r3, #6
 8001168:	d824      	bhi.n	80011b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	3b05      	subs	r3, #5
 800117c:	221f      	movs	r2, #31
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	400a      	ands	r2, r1
 800118a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3b05      	subs	r3, #5
 80011a6:	fa00 f203 	lsl.w	r2, r0, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
 80011b2:	e04c      	b.n	800124e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	d824      	bhi.n	8001206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3b23      	subs	r3, #35	; 0x23
 80011ce:	221f      	movs	r2, #31
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43da      	mvns	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	400a      	ands	r2, r1
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	3b23      	subs	r3, #35	; 0x23
 80011f8:	fa00 f203 	lsl.w	r2, r0, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
 8001204:	e023      	b.n	800124e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b41      	subs	r3, #65	; 0x41
 8001218:	221f      	movs	r2, #31
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	400a      	ands	r2, r1
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3b41      	subs	r3, #65	; 0x41
 8001242:	fa00 f203 	lsl.w	r2, r0, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <HAL_ADC_ConfigChannel+0x250>)
 8001250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <HAL_ADC_ConfigChannel+0x254>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d10f      	bne.n	800127c <HAL_ADC_ConfigChannel+0x1d8>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b12      	cmp	r3, #18
 8001262:	d10b      	bne.n	800127c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_ADC_ConfigChannel+0x254>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12b      	bne.n	80012de <HAL_ADC_ConfigChannel+0x23a>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <HAL_ADC_ConfigChannel+0x258>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d003      	beq.n	8001298 <HAL_ADC_ConfigChannel+0x1f4>
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b11      	cmp	r3, #17
 8001296:	d122      	bne.n	80012de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <HAL_ADC_ConfigChannel+0x258>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d111      	bne.n	80012de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_ADC_ConfigChannel+0x25c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <HAL_ADC_ConfigChannel+0x260>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	0c9a      	lsrs	r2, r3, #18
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f9      	bne.n	80012d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40012300 	.word	0x40012300
 80012f8:	40012000 	.word	0x40012000
 80012fc:	10000012 	.word	0x10000012
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83

08001308 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001310:	4b79      	ldr	r3, [pc, #484]	; (80014f8 <ADC_Init+0x1f0>)
 8001312:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	431a      	orrs	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6859      	ldr	r1, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	021a      	lsls	r2, r3, #8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6899      	ldr	r1, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <ADC_Init+0x1f4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d022      	beq.n	80013e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6899      	ldr	r1, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6899      	ldr	r1, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e00f      	b.n	8001406 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001404:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0202 	bic.w	r2, r2, #2
 8001414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6899      	ldr	r1, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7e1b      	ldrb	r3, [r3, #24]
 8001420:	005a      	lsls	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01b      	beq.n	800146c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001442:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6859      	ldr	r1, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	3b01      	subs	r3, #1
 8001460:	035a      	lsls	r2, r3, #13
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	e007      	b.n	800147c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800147a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	3b01      	subs	r3, #1
 8001498:	051a      	lsls	r2, r3, #20
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6899      	ldr	r1, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014be:	025a      	lsls	r2, r3, #9
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6899      	ldr	r1, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	029a      	lsls	r2, r3, #10
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40012300 	.word	0x40012300
 80014fc:	0f000001 	.word	0x0f000001

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	; (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c8:	f7ff ff3e 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff ff8e 	bl	80015f4 <NVIC_EncodePriority>
 80016d8:	4602      	mov	r2, r0
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff31 	bl	8001564 <__NVIC_EnableIRQ>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffa2 	bl	800165c <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff fc44 	bl	8000fbc <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d008      	beq.n	8001754 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e052      	b.n	80017fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0216 	bic.w	r2, r2, #22
 8001762:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001772:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <HAL_DMA_Abort+0x62>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0208 	bic.w	r2, r2, #8
 8001792:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0201 	bic.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a4:	e013      	b.n	80017ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a6:	f7ff fc09 	bl	8000fbc <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d90c      	bls.n	80017ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2220      	movs	r2, #32
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e015      	b.n	80017fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e4      	bne.n	80017a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	223f      	movs	r2, #63	; 0x3f
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d004      	beq.n	8001820 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e00c      	b.n	800183a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2205      	movs	r2, #5
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	e165      	b.n	8001b30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	429a      	cmp	r2, r3
 800187e:	f040 8154 	bne.w	8001b2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d005      	beq.n	800189a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001896:	2b02      	cmp	r3, #2
 8001898:	d130      	bne.n	80018fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d0:	2201      	movs	r2, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 0201 	and.w	r2, r3, #1
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b03      	cmp	r3, #3
 8001906:	d017      	beq.n	8001938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	2203      	movs	r2, #3
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d123      	bne.n	800198c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	08da      	lsrs	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3208      	adds	r2, #8
 800194c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	69b9      	ldr	r1, [r7, #24]
 8001988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	2203      	movs	r2, #3
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0203 	and.w	r2, r3, #3
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80ae 	beq.w	8001b2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_GPIO_Init+0x300>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a5c      	ldr	r2, [pc, #368]	; (8001b48 <HAL_GPIO_Init+0x300>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b5a      	ldr	r3, [pc, #360]	; (8001b48 <HAL_GPIO_Init+0x300>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ea:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <HAL_GPIO_Init+0x304>)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4f      	ldr	r2, [pc, #316]	; (8001b50 <HAL_GPIO_Init+0x308>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d025      	beq.n	8001a62 <HAL_GPIO_Init+0x21a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4e      	ldr	r2, [pc, #312]	; (8001b54 <HAL_GPIO_Init+0x30c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01f      	beq.n	8001a5e <HAL_GPIO_Init+0x216>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4d      	ldr	r2, [pc, #308]	; (8001b58 <HAL_GPIO_Init+0x310>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_GPIO_Init+0x212>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_GPIO_Init+0x314>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0x20e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_GPIO_Init+0x318>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00d      	beq.n	8001a52 <HAL_GPIO_Init+0x20a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_GPIO_Init+0x31c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_GPIO_Init+0x206>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <HAL_GPIO_Init+0x320>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_GPIO_Init+0x202>
 8001a46:	2306      	movs	r3, #6
 8001a48:	e00c      	b.n	8001a64 <HAL_GPIO_Init+0x21c>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e00a      	b.n	8001a64 <HAL_GPIO_Init+0x21c>
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e008      	b.n	8001a64 <HAL_GPIO_Init+0x21c>
 8001a52:	2304      	movs	r3, #4
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x21c>
 8001a56:	2303      	movs	r3, #3
 8001a58:	e004      	b.n	8001a64 <HAL_GPIO_Init+0x21c>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_Init+0x21c>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x21c>
 8001a62:	2300      	movs	r3, #0
 8001a64:	69fa      	ldr	r2, [r7, #28]
 8001a66:	f002 0203 	and.w	r2, r2, #3
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a74:	4935      	ldr	r1, [pc, #212]	; (8001b4c <HAL_GPIO_Init+0x304>)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a82:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aa6:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aac:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad0:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b24:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <HAL_GPIO_Init+0x324>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	f67f ae96 	bls.w	8001864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3724      	adds	r7, #36	; 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40013800 	.word	0x40013800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020c00 	.word	0x40020c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40021400 	.word	0x40021400
 8001b68:	40021800 	.word	0x40021800
 8001b6c:	40013c00 	.word	0x40013c00

08001b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e001      	b.n	8001b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be4:	887a      	ldrh	r2, [r7, #2]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	041a      	lsls	r2, r3, #16
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	400b      	ands	r3, r1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e12b      	b.n	8001e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7fe ff3e 	bl	8000ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2224      	movs	r2, #36	; 0x24
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c6c:	f001 fca0 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8001c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a81      	ldr	r2, [pc, #516]	; (8001e7c <HAL_I2C_Init+0x274>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d807      	bhi.n	8001c8c <HAL_I2C_Init+0x84>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4a80      	ldr	r2, [pc, #512]	; (8001e80 <HAL_I2C_Init+0x278>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	bf94      	ite	ls
 8001c84:	2301      	movls	r3, #1
 8001c86:	2300      	movhi	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	e006      	b.n	8001c9a <HAL_I2C_Init+0x92>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a7d      	ldr	r2, [pc, #500]	; (8001e84 <HAL_I2C_Init+0x27c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	bf94      	ite	ls
 8001c94:	2301      	movls	r3, #1
 8001c96:	2300      	movhi	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0e7      	b.n	8001e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a78      	ldr	r2, [pc, #480]	; (8001e88 <HAL_I2C_Init+0x280>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	0c9b      	lsrs	r3, r3, #18
 8001cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a6a      	ldr	r2, [pc, #424]	; (8001e7c <HAL_I2C_Init+0x274>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d802      	bhi.n	8001cdc <HAL_I2C_Init+0xd4>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	e009      	b.n	8001cf0 <HAL_I2C_Init+0xe8>
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	4a69      	ldr	r2, [pc, #420]	; (8001e8c <HAL_I2C_Init+0x284>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	3301      	adds	r3, #1
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	495c      	ldr	r1, [pc, #368]	; (8001e7c <HAL_I2C_Init+0x274>)
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	d819      	bhi.n	8001d44 <HAL_I2C_Init+0x13c>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e59      	subs	r1, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d1e:	1c59      	adds	r1, r3, #1
 8001d20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d24:	400b      	ands	r3, r1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_I2C_Init+0x138>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1e59      	subs	r1, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3e:	e051      	b.n	8001de4 <HAL_I2C_Init+0x1dc>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e04f      	b.n	8001de4 <HAL_I2C_Init+0x1dc>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d111      	bne.n	8001d70 <HAL_I2C_Init+0x168>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1e58      	subs	r0, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	440b      	add	r3, r1
 8001d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e012      	b.n	8001d96 <HAL_I2C_Init+0x18e>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e58      	subs	r0, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	0099      	lsls	r1, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d86:	3301      	adds	r3, #1
 8001d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_I2C_Init+0x196>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e022      	b.n	8001de4 <HAL_I2C_Init+0x1dc>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10e      	bne.n	8001dc4 <HAL_I2C_Init+0x1bc>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1e58      	subs	r0, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6859      	ldr	r1, [r3, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	440b      	add	r3, r1
 8001db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc2:	e00f      	b.n	8001de4 <HAL_I2C_Init+0x1dc>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e58      	subs	r0, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	0099      	lsls	r1, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	6809      	ldr	r1, [r1, #0]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6911      	ldr	r1, [r2, #16]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68d2      	ldr	r2, [r2, #12]
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	000186a0 	.word	0x000186a0
 8001e80:	001e847f 	.word	0x001e847f
 8001e84:	003d08ff 	.word	0x003d08ff
 8001e88:	431bde83 	.word	0x431bde83
 8001e8c:	10624dd3 	.word	0x10624dd3

08001e90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e108      	b.n	80020b4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f008 fac1 	bl	800a444 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed0:	d102      	bne.n	8001ed8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 fa72 	bl	80063c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7c1a      	ldrb	r2, [r3, #16]
 8001eea:	f88d 2000 	strb.w	r2, [sp]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef2:	f004 f951 	bl	8006198 <USB_CoreInit>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0d5      	b.n	80020b4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fa6a 	bl	80063e8 <USB_SetCurrentMode>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0c6      	b.n	80020b4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	e04a      	b.n	8001fc2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	3315      	adds	r3, #21
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3314      	adds	r3, #20
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	b298      	uxth	r0, r3
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	332e      	adds	r3, #46	; 0x2e
 8001f68:	4602      	mov	r2, r0
 8001f6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3318      	adds	r3, #24
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	331c      	adds	r3, #28
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3320      	adds	r3, #32
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3324      	adds	r3, #36	; 0x24
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	791b      	ldrb	r3, [r3, #4]
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d3af      	bcc.n	8001f2c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e044      	b.n	800205c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	3301      	adds	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	791b      	ldrb	r3, [r3, #4]
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3b5      	bcc.n	8001fd2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7c1a      	ldrb	r2, [r3, #16]
 800206e:	f88d 2000 	strb.w	r2, [sp]
 8002072:	3304      	adds	r3, #4
 8002074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002076:	f004 fa03 	bl	8006480 <USB_DevInit>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e013      	b.n	80020b4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7b1b      	ldrb	r3, [r3, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f001 f96e 	bl	8003384 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fa40 	bl	8007532 <USB_DevDisconnect>

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_PCD_Start+0x1c>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e022      	b.n	800211e <HAL_PCD_Start+0x62>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d009      	beq.n	8002100 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f004 f94d 	bl	80063a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f005 f9ee 	bl	80074f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002126:	b590      	push	{r4, r7, lr}
 8002128:	b08d      	sub	sp, #52	; 0x34
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f005 faac 	bl	800769a <USB_GetMode>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	f040 84b9 	bne.w	8002abc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f005 fa10 	bl	8007574 <USB_ReadInterrupts>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 84af 	beq.w	8002aba <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f005 f9fd 	bl	8007574 <USB_ReadInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b02      	cmp	r3, #2
 8002182:	d107      	bne.n	8002194 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f002 0202 	and.w	r2, r2, #2
 8002192:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f005 f9eb 	bl	8007574 <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d161      	bne.n	800226c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0210 	bic.w	r2, r2, #16
 80021b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f003 020f 	and.w	r2, r3, #15
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	3304      	adds	r3, #4
 80021d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	0c5b      	lsrs	r3, r3, #17
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d124      	bne.n	800222e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d035      	beq.n	800225c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80021fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	6a38      	ldr	r0, [r7, #32]
 8002204:	f005 f822 	bl	800724c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002214:	441a      	add	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002226:	441a      	add	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	615a      	str	r2, [r3, #20]
 800222c:	e016      	b.n	800225c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	0c5b      	lsrs	r3, r3, #17
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	2b06      	cmp	r3, #6
 8002238:	d110      	bne.n	800225c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002240:	2208      	movs	r2, #8
 8002242:	4619      	mov	r1, r3
 8002244:	6a38      	ldr	r0, [r7, #32]
 8002246:	f005 f801 	bl	800724c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	441a      	add	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0210 	orr.w	r2, r2, #16
 800226a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f005 f97f 	bl	8007574 <USB_ReadInterrupts>
 8002276:	4603      	mov	r3, r0
 8002278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002280:	f040 80a7 	bne.w	80023d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f005 f984 	bl	800759a <USB_ReadDevAllOutEpInterrupt>
 8002292:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002294:	e099      	b.n	80023ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 808e 	beq.w	80023be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f005 f9a8 	bl	8007602 <USB_ReadDevOutEPInterrupt>
 80022b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00c      	beq.n	80022d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	461a      	mov	r2, r3
 80022cc:	2301      	movs	r3, #1
 80022ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fed0 	bl	8003078 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	461a      	mov	r2, r3
 80022f0:	2308      	movs	r3, #8
 80022f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80022f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 ffa6 	bl	8003248 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	461a      	mov	r2, r3
 8002314:	2310      	movs	r3, #16
 8002316:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d030      	beq.n	8002384 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232a:	2b80      	cmp	r3, #128	; 0x80
 800232c:	d109      	bne.n	8002342 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800233c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002340:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	78db      	ldrb	r3, [r3, #3]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d108      	bne.n	8002372 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2200      	movs	r2, #0
 8002364:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	b2db      	uxtb	r3, r3
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f008 f985 	bl	800a67c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237e:	461a      	mov	r2, r3
 8002380:	2302      	movs	r3, #2
 8002382:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239a:	461a      	mov	r2, r3
 800239c:	2320      	movs	r3, #32
 800239e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b6:	461a      	mov	r2, r3
 80023b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	085b      	lsrs	r3, r3, #1
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f af62 	bne.w	8002296 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f005 f8cc 	bl	8007574 <USB_ReadInterrupts>
 80023dc:	4603      	mov	r3, r0
 80023de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023e6:	f040 80db 	bne.w	80025a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f005 f8ed 	bl	80075ce <USB_ReadDevAllInEpInterrupt>
 80023f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023fa:	e0cd      	b.n	8002598 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80c2 	beq.w	800258c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f005 f913 	bl	800763e <USB_ReadDevInEPInterrupt>
 8002418:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d057      	beq.n	80024d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	2201      	movs	r2, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	69f9      	ldr	r1, [r7, #28]
 8002440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002444:	4013      	ands	r3, r2
 8002446:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002454:	461a      	mov	r2, r3
 8002456:	2301      	movs	r3, #1
 8002458:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	799b      	ldrb	r3, [r3, #6]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d132      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	3320      	adds	r3, #32
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4403      	add	r3, r0
 8002482:	331c      	adds	r3, #28
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4419      	add	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4403      	add	r3, r0
 8002496:	3320      	adds	r3, #32
 8002498:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d113      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x3a2>
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3324      	adds	r3, #36	; 0x24
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80024c0:	461a      	mov	r2, r3
 80024c2:	2101      	movs	r1, #1
 80024c4:	f005 f91a 	bl	80076fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f008 f84f 	bl	800a572 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ea:	461a      	mov	r2, r3
 80024ec:	2308      	movs	r3, #8
 80024ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002506:	461a      	mov	r2, r3
 8002508:	2310      	movs	r3, #16
 800250a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	4413      	add	r3, r2
 800251e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002522:	461a      	mov	r2, r3
 8002524:	2340      	movs	r3, #64	; 0x40
 8002526:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d023      	beq.n	800257a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002534:	6a38      	ldr	r0, [r7, #32]
 8002536:	f004 f901 	bl	800673c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	3310      	adds	r3, #16
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	3304      	adds	r3, #4
 800254c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	78db      	ldrb	r3, [r3, #3]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d108      	bne.n	8002568 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	b2db      	uxtb	r3, r3
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f008 f89c 	bl	800a6a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002574:	461a      	mov	r2, r3
 8002576:	2302      	movs	r3, #2
 8002578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fcea 	bl	8002f60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	3301      	adds	r3, #1
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	2b00      	cmp	r3, #0
 800259c:	f47f af2e 	bne.w	80023fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 ffe5 	bl	8007574 <USB_ReadInterrupts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025b4:	d122      	bne.n	80025fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d108      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025dc:	2100      	movs	r1, #0
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f008 fa16 	bl	800aa10 <HAL_PCDEx_LPM_Callback>
 80025e4:	e002      	b.n	80025ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f008 f83a 	bl	800a660 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695a      	ldr	r2, [r3, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f004 ffb7 	bl	8007574 <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002610:	d112      	bne.n	8002638 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f007 fff6 	bl	800a614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002636:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f004 ff99 	bl	8007574 <USB_ReadInterrupts>
 8002642:	4603      	mov	r3, r0
 8002644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264c:	d121      	bne.n	8002692 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800265c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002664:	2b00      	cmp	r3, #0
 8002666:	d111      	bne.n	800268c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	f003 020f 	and.w	r2, r3, #15
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002682:	2101      	movs	r1, #1
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f008 f9c3 	bl	800aa10 <HAL_PCDEx_LPM_Callback>
 800268a:	e002      	b.n	8002692 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f007 ffc1 	bl	800a614 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f004 ff6c 	bl	8007574 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a6:	f040 80b7 	bne.w	8002818 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2110      	movs	r1, #16
 80026c4:	4618      	mov	r0, r3
 80026c6:	f004 f839 	bl	800673c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ce:	e046      	b.n	800275e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026dc:	461a      	mov	r2, r3
 80026de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f4:	0151      	lsls	r1, r2, #5
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	440a      	add	r2, r1
 80026fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002702:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002710:	461a      	mov	r2, r3
 8002712:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002716:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002728:	0151      	lsls	r1, r2, #5
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	440a      	add	r2, r1
 800272e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002736:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002748:	0151      	lsls	r1, r2, #5
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	440a      	add	r2, r1
 800274e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002752:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002756:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	3301      	adds	r3, #1
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	791b      	ldrb	r3, [r3, #4]
 8002762:	461a      	mov	r2, r3
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	4293      	cmp	r3, r2
 8002768:	d3b2      	bcc.n	80026d0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002778:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800277c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7bdb      	ldrb	r3, [r3, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d016      	beq.n	80027b4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002796:	f043 030b 	orr.w	r3, r3, #11
 800279a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ac:	f043 030b 	orr.w	r3, r3, #11
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	e015      	b.n	80027e0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027da:	f043 030b 	orr.w	r3, r3, #11
 80027de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002802:	461a      	mov	r2, r3
 8002804:	f004 ff7a 	bl	80076fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f004 fea9 	bl	8007574 <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282c:	d123      	bne.n	8002876 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f004 ff3f 	bl	80076b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f003 fff6 	bl	800682e <USB_GetDevSpeed>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681c      	ldr	r4, [r3, #0]
 800284e:	f000 fea3 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 8002852:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002858:	461a      	mov	r2, r3
 800285a:	4620      	mov	r0, r4
 800285c:	f003 fd00 	bl	8006260 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f007 feae 	bl	800a5c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002874:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fe7a 	bl	8007574 <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b08      	cmp	r3, #8
 8002888:	d10a      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f007 fe8b 	bl	800a5a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f002 0208 	and.w	r2, r2, #8
 800289e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 fe65 	bl	8007574 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d123      	bne.n	80028fc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028c0:	2301      	movs	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	e014      	b.n	80028f0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	f203 2357 	addw	r3, r3, #599	; 0x257
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	4619      	mov	r1, r3
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fb0a 	bl	8002efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	3301      	adds	r3, #1
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	791b      	ldrb	r3, [r3, #4]
 80028f4:	461a      	mov	r2, r3
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d3e4      	bcc.n	80028c6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f004 fe37 	bl	8007574 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002910:	d13c      	bne.n	800298c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002912:	2301      	movs	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e02b      	b.n	8002970 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	3318      	adds	r3, #24
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d115      	bne.n	800296a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800293e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	da12      	bge.n	800296a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3317      	adds	r3, #23
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 faca 	bl	8002efe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	3301      	adds	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	791b      	ldrb	r3, [r3, #4]
 8002974:	461a      	mov	r2, r3
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	4293      	cmp	r3, r2
 800297a:	d3cd      	bcc.n	8002918 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800298a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f004 fdef 	bl	8007574 <USB_ReadInterrupts>
 8002996:	4603      	mov	r3, r0
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a0:	d156      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a2:	2301      	movs	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	e045      	b.n	8002a34 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d12e      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da2b      	bge.n	8002a2e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80029e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d121      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f203 2357 	addw	r3, r3, #599	; 0x257
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a2a:	6053      	str	r3, [r2, #4]
            break;
 8002a2c:	e008      	b.n	8002a40 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d3b3      	bcc.n	80029a8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 fd8d 	bl	8007574 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a64:	d10a      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f007 fe2c 	bl	800a6c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f004 fd77 	bl	8007574 <USB_ReadInterrupts>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d115      	bne.n	8002abc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f007 fe1c 	bl	800a6e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	e000      	b.n	8002abc <HAL_PCD_IRQHandler+0x996>
      return;
 8002aba:	bf00      	nop
    }
  }
}
 8002abc:	3734      	adds	r7, #52	; 0x34
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}

08002ac2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_PCD_SetAddress+0x1a>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e012      	b.n	8002b02 <HAL_PCD_SetAddress+0x40>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 fcd6 	bl	80074a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	4608      	mov	r0, r1
 8002b14:	4611      	mov	r1, r2
 8002b16:	461a      	mov	r2, r3
 8002b18:	4603      	mov	r3, r0
 8002b1a:	70fb      	strb	r3, [r7, #3]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	803b      	strh	r3, [r7, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	da0f      	bge.n	8002b50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3310      	adds	r3, #16
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	3304      	adds	r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	705a      	strb	r2, [r3, #1]
 8002b4e:	e00f      	b.n	8002b70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	3304      	adds	r3, #4
 8002b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002b7c:	883b      	ldrh	r3, [r7, #0]
 8002b7e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	78ba      	ldrb	r2, [r7, #2]
 8002b8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b9e:	78bb      	ldrb	r3, [r7, #2]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d102      	bne.n	8002baa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_PCD_EP_Open+0xae>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e00e      	b.n	8002bd6 <HAL_PCD_EP_Open+0xcc>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68f9      	ldr	r1, [r7, #12]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fe56 	bl	8006878 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da0f      	bge.n	8002c12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	f003 020f 	and.w	r2, r3, #15
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	3310      	adds	r3, #16
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	3304      	adds	r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	705a      	strb	r2, [r3, #1]
 8002c10:	e00f      	b.n	8002c32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_PCD_EP_Close+0x6e>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e00e      	b.n	8002c6a <HAL_PCD_EP_Close+0x8c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68f9      	ldr	r1, [r7, #12]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 fe94 	bl	8006988 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c82:	7afb      	ldrb	r3, [r7, #11]
 8002c84:	f003 020f 	and.w	r2, r3, #15
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	3304      	adds	r3, #4
 8002c9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb4:	7afb      	ldrb	r3, [r7, #11]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	799b      	ldrb	r3, [r3, #6]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	799b      	ldrb	r3, [r3, #6]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6979      	ldr	r1, [r7, #20]
 8002cda:	f003 ff31 	bl	8006b40 <USB_EPStartXfer>

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	460b      	mov	r3, r1
 8002d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	7afb      	ldrb	r3, [r7, #11]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3310      	adds	r3, #16
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2201      	movs	r2, #1
 8002d56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d58:	7afb      	ldrb	r3, [r7, #11]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	799b      	ldrb	r3, [r3, #6]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	799b      	ldrb	r3, [r3, #6]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6979      	ldr	r1, [r7, #20]
 8002d7e:	f003 fedf 	bl	8006b40 <USB_EPStartXfer>

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	7912      	ldrb	r2, [r2, #4]
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e04f      	b.n	8002e4a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da0f      	bge.n	8002dd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	f003 020f 	and.w	r2, r3, #15
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	3310      	adds	r3, #16
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	705a      	strb	r2, [r3, #1]
 8002dd0:	e00d      	b.n	8002dee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	3304      	adds	r3, #4
 8002de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_PCD_EP_SetStall+0x82>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e01d      	b.n	8002e4a <HAL_PCD_EP_SetStall+0xbe>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68f9      	ldr	r1, [r7, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 fa6d 	bl	80072fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d109      	bne.n	8002e40 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	7999      	ldrb	r1, [r3, #6]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f004 fc5e 	bl	80076fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	7912      	ldrb	r2, [r2, #4]
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e042      	b.n	8002ef6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	da0f      	bge.n	8002e98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	3310      	adds	r3, #16
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	705a      	strb	r2, [r3, #1]
 8002e96:	e00f      	b.n	8002eb8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_PCD_EP_ClrStall+0x86>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e00e      	b.n	8002ef6 <HAL_PCD_EP_ClrStall+0xa4>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68f9      	ldr	r1, [r7, #12]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fa76 	bl	80073d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da0c      	bge.n	8002f2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	3310      	adds	r3, #16
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e00c      	b.n	8002f46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 020f 	and.w	r2, r3, #15
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68f9      	ldr	r1, [r7, #12]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 f895 	bl	800707c <USB_EPStopXfer>
 8002f52:	4603      	mov	r3, r0
 8002f54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f56:	7afb      	ldrb	r3, [r7, #11]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	3310      	adds	r3, #16
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d901      	bls.n	8002f98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e06b      	b.n	8003070 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d902      	bls.n	8002fb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	3303      	adds	r3, #3
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fbc:	e02a      	b.n	8003014 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d902      	bls.n	8002fda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3303      	adds	r3, #3
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	6978      	ldr	r0, [r7, #20]
 8002ff8:	f004 f8ea 	bl	80071d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	441a      	add	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	441a      	add	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	429a      	cmp	r2, r3
 8003028:	d809      	bhi.n	800303e <PCD_WriteEmptyTxFifo+0xde>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003032:	429a      	cmp	r2, r3
 8003034:	d203      	bcs.n	800303e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1bf      	bne.n	8002fbe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	429a      	cmp	r2, r3
 8003048:	d811      	bhi.n	800306e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	2201      	movs	r2, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	43db      	mvns	r3, r3
 8003064:	6939      	ldr	r1, [r7, #16]
 8003066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800306a:	4013      	ands	r3, r2
 800306c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3720      	adds	r7, #32
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	333c      	adds	r3, #60	; 0x3c
 8003090:	3304      	adds	r3, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	799b      	ldrb	r3, [r3, #6]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d17b      	bne.n	80031a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d015      	beq.n	80030e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4a61      	ldr	r2, [pc, #388]	; (8003240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	f240 80b9 	bls.w	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80b3 	beq.w	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030da:	461a      	mov	r2, r3
 80030dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030e0:	6093      	str	r3, [r2, #8]
 80030e2:	e0a7      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	461a      	mov	r2, r3
 80030fc:	2320      	movs	r3, #32
 80030fe:	6093      	str	r3, [r2, #8]
 8003100:	e098      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	f040 8093 	bne.w	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	4a4b      	ldr	r2, [pc, #300]	; (8003240 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d90f      	bls.n	8003136 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312c:	461a      	mov	r2, r3
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	6093      	str	r3, [r2, #8]
 8003134:	e07e      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	0159      	lsls	r1, r3, #5
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	440b      	add	r3, r1
 8003158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	1ad2      	subs	r2, r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d114      	bne.n	8003198 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003180:	461a      	mov	r2, r3
 8003182:	2101      	movs	r1, #1
 8003184:	f004 faba 	bl	80076fc <USB_EP0_OutStart>
 8003188:	e006      	b.n	8003198 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	441a      	add	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f007 f9cc 	bl	800a53c <HAL_PCD_DataOutStageCallback>
 80031a4:	e046      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	4a26      	ldr	r2, [pc, #152]	; (8003244 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d124      	bne.n	80031f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c4:	461a      	mov	r2, r3
 80031c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ca:	6093      	str	r3, [r2, #8]
 80031cc:	e032      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e4:	461a      	mov	r2, r3
 80031e6:	2320      	movs	r3, #32
 80031e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f007 f9a3 	bl	800a53c <HAL_PCD_DataOutStageCallback>
 80031f6:	e01d      	b.n	8003234 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d114      	bne.n	8003228 <PCD_EP_OutXfrComplete_int+0x1b0>
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d108      	bne.n	8003228 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003220:	461a      	mov	r2, r3
 8003222:	2100      	movs	r1, #0
 8003224:	f004 fa6a 	bl	80076fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f007 f984 	bl	800a53c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	4f54300a 	.word	0x4f54300a
 8003244:	4f54310a 	.word	0x4f54310a

08003248 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	333c      	adds	r3, #60	; 0x3c
 8003260:	3304      	adds	r3, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d90e      	bls.n	800329c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f007 f93b 	bl	800a518 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d90c      	bls.n	80032c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	799b      	ldrb	r3, [r3, #6]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80032bc:	461a      	mov	r2, r3
 80032be:	2101      	movs	r1, #1
 80032c0:	f004 fa1c 	bl	80076fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	4f54300a 	.word	0x4f54300a

080032d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
 80032e0:	4613      	mov	r3, r2
 80032e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032f2:	883b      	ldrh	r3, [r7, #0]
 80032f4:	0419      	lsls	r1, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003300:	e028      	b.n	8003354 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e00d      	b.n	8003332 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	3340      	adds	r3, #64	; 0x40
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	4413      	add	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	3301      	adds	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	3b01      	subs	r3, #1
 8003338:	429a      	cmp	r2, r3
 800333a:	d3ec      	bcc.n	8003316 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800333c:	883b      	ldrh	r3, [r7, #0]
 800333e:	0418      	lsls	r0, r3, #16
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	3b01      	subs	r3, #1
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4302      	orrs	r2, r0
 800334c:	3340      	adds	r3, #64	; 0x40
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	887a      	ldrh	r2, [r7, #2]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b6:	f043 0303 	orr.w	r3, r3, #3
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0cc      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b68      	ldr	r3, [pc, #416]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d90c      	bls.n	8003408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b65      	ldr	r3, [pc, #404]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d044      	beq.n	80034ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d119      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003486:	2b03      	cmp	r3, #3
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e067      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4934      	ldr	r1, [pc, #208]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fd fd7e 	bl	8000fbc <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fd fd7a 	bl	8000fbc <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e04f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d20c      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003552:	f000 fb7f 	bl	8003c54 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fcde 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00
 8003588:	40023800 	.word	0x40023800
 800358c:	0800bcbc 	.word	0x0800bcbc
 8003590:	20000000 	.word	0x20000000
 8003594:	20000004 	.word	0x20000004

08003598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCC_GetHCLKFreq+0x14>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000000 	.word	0x20000000

080035b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b4:	f7ff fff0 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0a9b      	lsrs	r3, r3, #10
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	0800bccc 	.word	0x0800bccc

080035d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035dc:	f7ff ffdc 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	0b5b      	lsrs	r3, r3, #13
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	4903      	ldr	r1, [pc, #12]	; (80035fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ee:	5ccb      	ldrb	r3, [r1, r3]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40023800 	.word	0x40023800
 80035fc:	0800bccc 	.word	0x0800bccc

08003600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08c      	sub	sp, #48	; 0x30
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003638:	4b6f      	ldr	r3, [pc, #444]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800363a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800363e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	496c      	ldr	r1, [pc, #432]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003656:	2301      	movs	r3, #1
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d010      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003666:	4b64      	ldr	r3, [pc, #400]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	4960      	ldr	r1, [pc, #384]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003684:	2301      	movs	r3, #1
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d017      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003694:	4b58      	ldr	r3, [pc, #352]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800369a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4955      	ldr	r1, [pc, #340]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b2:	d101      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80036b4:	2301      	movs	r3, #1
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80036c0:	2301      	movs	r3, #1
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d017      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036d0:	4b49      	ldr	r3, [pc, #292]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	4946      	ldr	r1, [pc, #280]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ee:	d101      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80036f0:	2301      	movs	r3, #1
 80036f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80036fc:	2301      	movs	r3, #1
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 808a 	beq.w	8003822 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b39      	ldr	r3, [pc, #228]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a38      	ldr	r2, [pc, #224]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b36      	ldr	r3, [pc, #216]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800372a:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a33      	ldr	r2, [pc, #204]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003736:	f7fd fc41 	bl	8000fbc <HAL_GetTick>
 800373a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fd fc3d 	bl	8000fbc <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e278      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003750:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800375c:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003764:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003774:	6a3a      	ldr	r2, [r7, #32]
 8003776:	429a      	cmp	r2, r3
 8003778:	d028      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800377a:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003782:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003790:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003796:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d114      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fd fc0b 	bl	8000fbc <HAL_GetTick>
 80037a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fd fc07 	bl	8000fbc <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e240      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ee      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d8:	d114      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80037ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ee:	4902      	ldr	r1, [pc, #8]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]
 80037f4:	e00c      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40007000 	.word	0x40007000
 8003800:	42470e40 	.word	0x42470e40
 8003804:	4b4a      	ldr	r3, [pc, #296]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a49      	ldr	r2, [pc, #292]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800380a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800380e:	6093      	str	r3, [r2, #8]
 8003810:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	4944      	ldr	r1, [pc, #272]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800381e:	4313      	orrs	r3, r2
 8003820:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003834:	4b3f      	ldr	r3, [pc, #252]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003836:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003844:	4b3a      	ldr	r3, [pc, #232]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	4937      	ldr	r1, [pc, #220]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003866:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	492e      	ldr	r1, [pc, #184]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d011      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003888:	4b29      	ldr	r3, [pc, #164]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800388a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	4926      	ldr	r1, [pc, #152]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a6:	d101      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80038a8:	2301      	movs	r3, #1
 80038aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	491a      	ldr	r1, [pc, #104]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d011      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e8:	4911      	ldr	r1, [pc, #68]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f8:	d101      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80038fa:	2301      	movs	r3, #1
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	2b01      	cmp	r3, #1
 8003902:	d005      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800390c:	f040 80ff 	bne.w	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003910:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003916:	f7fd fb51 	bl	8000fbc <HAL_GetTick>
 800391a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800391c:	e00e      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800391e:	f7fd fb4d 	bl	8000fbc <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d907      	bls.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e188      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003930:	40023800 	.word	0x40023800
 8003934:	424711e0 	.word	0x424711e0
 8003938:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800393c:	4b7e      	ldr	r3, [pc, #504]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ea      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003964:	2b00      	cmp	r3, #0
 8003966:	d028      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d124      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003970:	4b71      	ldr	r3, [pc, #452]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	3301      	adds	r3, #1
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003982:	4b6d      	ldr	r3, [pc, #436]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003988:	0e1b      	lsrs	r3, r3, #24
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	431a      	orrs	r2, r3
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
 80039a4:	431a      	orrs	r2, r3
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	061b      	lsls	r3, r3, #24
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	071b      	lsls	r3, r3, #28
 80039b2:	4961      	ldr	r1, [pc, #388]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d004      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d035      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e4:	d130      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039e6:	4b54      	ldr	r3, [pc, #336]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	3301      	adds	r3, #1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039f8:	4b4f      	ldr	r3, [pc, #316]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fe:	0f1b      	lsrs	r3, r3, #28
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	019b      	lsls	r3, r3, #6
 8003a10:	431a      	orrs	r2, r3
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	3b01      	subs	r3, #1
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	431a      	orrs	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	071b      	lsls	r3, r3, #28
 8003a28:	4943      	ldr	r1, [pc, #268]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a30:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a36:	f023 021f 	bic.w	r2, r3, #31
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	493d      	ldr	r1, [pc, #244]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d029      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5c:	d124      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a5e:	4b36      	ldr	r3, [pc, #216]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a76:	0f1b      	lsrs	r3, r3, #28
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	019b      	lsls	r3, r3, #6
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	3b01      	subs	r3, #1
 8003a92:	041b      	lsls	r3, r3, #16
 8003a94:	431a      	orrs	r2, r3
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	071b      	lsls	r3, r3, #28
 8003aa0:	4925      	ldr	r1, [pc, #148]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d016      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	019b      	lsls	r3, r3, #6
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	071b      	lsls	r3, r3, #28
 8003ada:	4917      	ldr	r1, [pc, #92]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae8:	f7fd fa68 	bl	8000fbc <HAL_GetTick>
 8003aec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003af0:	f7fd fa64 	bl	8000fbc <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e09f      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f040 8095 	bne.w	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b1c:	f7fd fa4e 	bl	8000fbc <HAL_GetTick>
 8003b20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b22:	e00f      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b24:	f7fd fa4a 	bl	8000fbc <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d908      	bls.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e085      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	42470068 	.word	0x42470068
 8003b40:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b44:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b50:	d0e8      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02b      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d127      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003b7a:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	3301      	adds	r3, #1
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	431a      	orrs	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	061b      	lsls	r3, r3, #24
 8003ba8:	4928      	ldr	r1, [pc, #160]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bb0:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	4922      	ldr	r1, [pc, #136]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01d      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bde:	d118      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	0e1b      	lsrs	r3, r3, #24
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	019b      	lsls	r3, r3, #6
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	3b01      	subs	r3, #1
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	4910      	ldr	r1, [pc, #64]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c12:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c18:	f7fd f9d0 	bl	8000fbc <HAL_GetTick>
 8003c1c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c20:	f7fd f9cc 	bl	8000fbc <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e007      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c3e:	d1ef      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3730      	adds	r7, #48	; 0x30
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	42470070 	.word	0x42470070

08003c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c58:	b0ae      	sub	sp, #184	; 0xb8
 8003c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c7a:	4bcb      	ldr	r3, [pc, #812]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	f200 8206 	bhi.w	8004094 <HAL_RCC_GetSysClockFreq+0x440>
 8003c88:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003cc5 	.word	0x08003cc5
 8003c94:	08004095 	.word	0x08004095
 8003c98:	08004095 	.word	0x08004095
 8003c9c:	08004095 	.word	0x08004095
 8003ca0:	08003ccd 	.word	0x08003ccd
 8003ca4:	08004095 	.word	0x08004095
 8003ca8:	08004095 	.word	0x08004095
 8003cac:	08004095 	.word	0x08004095
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08004095 	.word	0x08004095
 8003cb8:	08004095 	.word	0x08004095
 8003cbc:	08004095 	.word	0x08004095
 8003cc0:	08003ec5 	.word	0x08003ec5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4bb9      	ldr	r3, [pc, #740]	; (8003fac <HAL_RCC_GetSysClockFreq+0x358>)
 8003cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cca:	e1e7      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ccc:	4bb8      	ldr	r3, [pc, #736]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cd2:	e1e3      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cd4:	4bb4      	ldr	r3, [pc, #720]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ce0:	4bb1      	ldr	r3, [pc, #708]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d071      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cec:	4bae      	ldr	r3, [pc, #696]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	099b      	lsrs	r3, r3, #6
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cf8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d12:	4622      	mov	r2, r4
 8003d14:	462b      	mov	r3, r5
 8003d16:	f04f 0000 	mov.w	r0, #0
 8003d1a:	f04f 0100 	mov.w	r1, #0
 8003d1e:	0159      	lsls	r1, r3, #5
 8003d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d24:	0150      	lsls	r0, r2, #5
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	1a51      	subs	r1, r2, r1
 8003d2e:	6439      	str	r1, [r7, #64]	; 0x40
 8003d30:	4629      	mov	r1, r5
 8003d32:	eb63 0301 	sbc.w	r3, r3, r1
 8003d36:	647b      	str	r3, [r7, #68]	; 0x44
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d44:	4649      	mov	r1, r9
 8003d46:	018b      	lsls	r3, r1, #6
 8003d48:	4641      	mov	r1, r8
 8003d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d4e:	4641      	mov	r1, r8
 8003d50:	018a      	lsls	r2, r1, #6
 8003d52:	4641      	mov	r1, r8
 8003d54:	1a51      	subs	r1, r2, r1
 8003d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d58:	4649      	mov	r1, r9
 8003d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	00cb      	lsls	r3, r1, #3
 8003d70:	4641      	mov	r1, r8
 8003d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d76:	4641      	mov	r1, r8
 8003d78:	00ca      	lsls	r2, r1, #3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4622      	mov	r2, r4
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
 8003d86:	462b      	mov	r3, r5
 8003d88:	460a      	mov	r2, r1
 8003d8a:	eb42 0303 	adc.w	r3, r2, r3
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	024b      	lsls	r3, r1, #9
 8003da0:	4621      	mov	r1, r4
 8003da2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003da6:	4621      	mov	r1, r4
 8003da8:	024a      	lsls	r2, r1, #9
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003db8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003dbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003dc0:	f7fc fa7e 	bl	80002c0 <__aeabi_uldivmod>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4613      	mov	r3, r2
 8003dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dce:	e067      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd0:	4b75      	ldr	r3, [pc, #468]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ddc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dea:	2300      	movs	r3, #0
 8003dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	f04f 0000 	mov.w	r0, #0
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	0159      	lsls	r1, r3, #5
 8003e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e04:	0150      	lsls	r0, r2, #5
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	1a51      	subs	r1, r2, r1
 8003e0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e10:	4629      	mov	r1, r5
 8003e12:	eb63 0301 	sbc.w	r3, r3, r1
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003e24:	4649      	mov	r1, r9
 8003e26:	018b      	lsls	r3, r1, #6
 8003e28:	4641      	mov	r1, r8
 8003e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e2e:	4641      	mov	r1, r8
 8003e30:	018a      	lsls	r2, r1, #6
 8003e32:	4641      	mov	r1, r8
 8003e34:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e38:	4649      	mov	r1, r9
 8003e3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e52:	4692      	mov	sl, r2
 8003e54:	469b      	mov	fp, r3
 8003e56:	4623      	mov	r3, r4
 8003e58:	eb1a 0303 	adds.w	r3, sl, r3
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	462b      	mov	r3, r5
 8003e60:	eb4b 0303 	adc.w	r3, fp, r3
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e72:	4629      	mov	r1, r5
 8003e74:	028b      	lsls	r3, r1, #10
 8003e76:	4621      	mov	r1, r4
 8003e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	028a      	lsls	r2, r1, #10
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e88:	2200      	movs	r2, #0
 8003e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e8c:	677a      	str	r2, [r7, #116]	; 0x74
 8003e8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e92:	f7fc fa15 	bl	80002c0 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ea0:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	0c1b      	lsrs	r3, r3, #16
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8003eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ec2:	e0eb      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec4:	4b38      	ldr	r3, [pc, #224]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ed0:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d06b      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003edc:	4b32      	ldr	r3, [pc, #200]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	099b      	lsrs	r3, r3, #6
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eee:	663b      	str	r3, [r7, #96]	; 0x60
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ef4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ef8:	4622      	mov	r2, r4
 8003efa:	462b      	mov	r3, r5
 8003efc:	f04f 0000 	mov.w	r0, #0
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	0159      	lsls	r1, r3, #5
 8003f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f0a:	0150      	lsls	r0, r2, #5
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4621      	mov	r1, r4
 8003f12:	1a51      	subs	r1, r2, r1
 8003f14:	61b9      	str	r1, [r7, #24]
 8003f16:	4629      	mov	r1, r5
 8003f18:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f2a:	4659      	mov	r1, fp
 8003f2c:	018b      	lsls	r3, r1, #6
 8003f2e:	4651      	mov	r1, sl
 8003f30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f34:	4651      	mov	r1, sl
 8003f36:	018a      	lsls	r2, r1, #6
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ebb2 0801 	subs.w	r8, r2, r1
 8003f3e:	4659      	mov	r1, fp
 8003f40:	eb63 0901 	sbc.w	r9, r3, r1
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f58:	4690      	mov	r8, r2
 8003f5a:	4699      	mov	r9, r3
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	eb18 0303 	adds.w	r3, r8, r3
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	462b      	mov	r3, r5
 8003f66:	eb49 0303 	adc.w	r3, r9, r3
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f78:	4629      	mov	r1, r5
 8003f7a:	024b      	lsls	r3, r1, #9
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f82:	4621      	mov	r1, r4
 8003f84:	024a      	lsls	r2, r1, #9
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f8e:	2200      	movs	r2, #0
 8003f90:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f98:	f7fc f992 	bl	80002c0 <__aeabi_uldivmod>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fa6:	e065      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x420>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	00f42400 	.word	0x00f42400
 8003fb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb4:	4b3d      	ldr	r3, [pc, #244]	; (80040ac <HAL_RCC_GetSysClockFreq+0x458>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fc4:	653b      	str	r3, [r7, #80]	; 0x50
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	657b      	str	r3, [r7, #84]	; 0x54
 8003fca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003fce:	4642      	mov	r2, r8
 8003fd0:	464b      	mov	r3, r9
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	0159      	lsls	r1, r3, #5
 8003fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe0:	0150      	lsls	r0, r2, #5
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	1a51      	subs	r1, r2, r1
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	4649      	mov	r1, r9
 8003fee:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004000:	4659      	mov	r1, fp
 8004002:	018b      	lsls	r3, r1, #6
 8004004:	4651      	mov	r1, sl
 8004006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400a:	4651      	mov	r1, sl
 800400c:	018a      	lsls	r2, r1, #6
 800400e:	4651      	mov	r1, sl
 8004010:	1a54      	subs	r4, r2, r1
 8004012:	4659      	mov	r1, fp
 8004014:	eb63 0501 	sbc.w	r5, r3, r1
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	00eb      	lsls	r3, r5, #3
 8004022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004026:	00e2      	lsls	r2, r4, #3
 8004028:	4614      	mov	r4, r2
 800402a:	461d      	mov	r5, r3
 800402c:	4643      	mov	r3, r8
 800402e:	18e3      	adds	r3, r4, r3
 8004030:	603b      	str	r3, [r7, #0]
 8004032:	464b      	mov	r3, r9
 8004034:	eb45 0303 	adc.w	r3, r5, r3
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004046:	4629      	mov	r1, r5
 8004048:	028b      	lsls	r3, r1, #10
 800404a:	4621      	mov	r1, r4
 800404c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004050:	4621      	mov	r1, r4
 8004052:	028a      	lsls	r2, r1, #10
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800405c:	2200      	movs	r2, #0
 800405e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004060:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004062:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004066:	f7fc f92b 	bl	80002c0 <__aeabi_uldivmod>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4613      	mov	r3, r2
 8004070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004074:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <HAL_RCC_GetSysClockFreq+0x458>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	0f1b      	lsrs	r3, r3, #28
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8004082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800408a:	fbb2 f3f3 	udiv	r3, r2, r3
 800408e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004092:	e003      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800409a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	37b8      	adds	r7, #184	; 0xb8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400

080040b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e28d      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8083 	beq.w	80041da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040d4:	4b94      	ldr	r3, [pc, #592]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 030c 	and.w	r3, r3, #12
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d019      	beq.n	8004114 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040e0:	4b91      	ldr	r3, [pc, #580]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d106      	bne.n	80040fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80040ec:	4b8e      	ldr	r3, [pc, #568]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f8:	d00c      	beq.n	8004114 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4b8b      	ldr	r3, [pc, #556]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	4b84      	ldr	r3, [pc, #528]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05b      	beq.n	80041d8 <HAL_RCC_OscConfig+0x124>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d157      	bne.n	80041d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e25a      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d106      	bne.n	8004144 <HAL_RCC_OscConfig+0x90>
 8004136:	4b7c      	ldr	r3, [pc, #496]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a7b      	ldr	r2, [pc, #492]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xcc>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0xb4>
 800414e:	4b76      	ldr	r3, [pc, #472]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a75      	ldr	r2, [pc, #468]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b73      	ldr	r3, [pc, #460]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a72      	ldr	r2, [pc, #456]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xcc>
 8004168:	4b6f      	ldr	r3, [pc, #444]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a6e      	ldr	r2, [pc, #440]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b6c      	ldr	r3, [pc, #432]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a6b      	ldr	r2, [pc, #428]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fc ff18 	bl	8000fbc <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7fc ff14 	bl	8000fbc <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e21f      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xdc>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fc ff04 	bl	8000fbc <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fc ff00 	bl	8000fbc <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e20b      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b57      	ldr	r3, [pc, #348]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x104>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d06f      	beq.n	80042c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80041e6:	4b50      	ldr	r3, [pc, #320]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d017      	beq.n	8004222 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041f2:	4b4d      	ldr	r3, [pc, #308]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d105      	bne.n	800420a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80041fe:	4b4a      	ldr	r3, [pc, #296]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420a:	4b47      	ldr	r3, [pc, #284]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d11c      	bne.n	8004250 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004216:	4b44      	ldr	r3, [pc, #272]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d116      	bne.n	8004250 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004222:	4b41      	ldr	r3, [pc, #260]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_RCC_OscConfig+0x186>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e1d3      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4937      	ldr	r1, [pc, #220]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	e03a      	b.n	80042c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d020      	beq.n	800429a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004258:	4b34      	ldr	r3, [pc, #208]	; (800432c <HAL_RCC_OscConfig+0x278>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fc fead 	bl	8000fbc <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004266:	f7fc fea9 	bl	8000fbc <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e1b4      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004278:	4b2b      	ldr	r3, [pc, #172]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b28      	ldr	r3, [pc, #160]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4925      	ldr	r1, [pc, #148]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]
 8004298:	e015      	b.n	80042c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCC_OscConfig+0x278>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fc fe8c 	bl	8000fbc <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a8:	f7fc fe88 	bl	8000fbc <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e193      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d036      	beq.n	8004340 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d016      	beq.n	8004308 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042da:	4b15      	ldr	r3, [pc, #84]	; (8004330 <HAL_RCC_OscConfig+0x27c>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fc fe6c 	bl	8000fbc <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e8:	f7fc fe68 	bl	8000fbc <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e173      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCC_OscConfig+0x274>)
 80042fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x234>
 8004306:	e01b      	b.n	8004340 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_RCC_OscConfig+0x27c>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7fc fe55 	bl	8000fbc <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004314:	e00e      	b.n	8004334 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004316:	f7fc fe51 	bl	8000fbc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d907      	bls.n	8004334 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e15c      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
 8004328:	40023800 	.word	0x40023800
 800432c:	42470000 	.word	0x42470000
 8004330:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004334:	4b8a      	ldr	r3, [pc, #552]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1ea      	bne.n	8004316 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8097 	beq.w	800447c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004352:	4b83      	ldr	r3, [pc, #524]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	4b7f      	ldr	r3, [pc, #508]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a7e      	ldr	r2, [pc, #504]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
 800436e:	4b7c      	ldr	r3, [pc, #496]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437a:	2301      	movs	r3, #1
 800437c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437e:	4b79      	ldr	r3, [pc, #484]	; (8004564 <HAL_RCC_OscConfig+0x4b0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d118      	bne.n	80043bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438a:	4b76      	ldr	r3, [pc, #472]	; (8004564 <HAL_RCC_OscConfig+0x4b0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a75      	ldr	r2, [pc, #468]	; (8004564 <HAL_RCC_OscConfig+0x4b0>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004396:	f7fc fe11 	bl	8000fbc <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439e:	f7fc fe0d 	bl	8000fbc <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e118      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b0:	4b6c      	ldr	r3, [pc, #432]	; (8004564 <HAL_RCC_OscConfig+0x4b0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d106      	bne.n	80043d2 <HAL_RCC_OscConfig+0x31e>
 80043c4:	4b66      	ldr	r3, [pc, #408]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4a65      	ldr	r2, [pc, #404]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	6713      	str	r3, [r2, #112]	; 0x70
 80043d0:	e01c      	b.n	800440c <HAL_RCC_OscConfig+0x358>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b05      	cmp	r3, #5
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x340>
 80043da:	4b61      	ldr	r3, [pc, #388]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	4a60      	ldr	r2, [pc, #384]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043e0:	f043 0304 	orr.w	r3, r3, #4
 80043e4:	6713      	str	r3, [r2, #112]	; 0x70
 80043e6:	4b5e      	ldr	r3, [pc, #376]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a5d      	ldr	r2, [pc, #372]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
 80043f2:	e00b      	b.n	800440c <HAL_RCC_OscConfig+0x358>
 80043f4:	4b5a      	ldr	r3, [pc, #360]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	4a59      	ldr	r2, [pc, #356]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004400:	4b57      	ldr	r3, [pc, #348]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	4a56      	ldr	r2, [pc, #344]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004406:	f023 0304 	bic.w	r3, r3, #4
 800440a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004414:	f7fc fdd2 	bl	8000fbc <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441a:	e00a      	b.n	8004432 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441c:	f7fc fdce 	bl	8000fbc <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	; 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e0d7      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004432:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0ee      	beq.n	800441c <HAL_RCC_OscConfig+0x368>
 800443e:	e014      	b.n	800446a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fc fdbc 	bl	8000fbc <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004446:	e00a      	b.n	800445e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004448:	f7fc fdb8 	bl	8000fbc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	f241 3288 	movw	r2, #5000	; 0x1388
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e0c1      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445e:	4b40      	ldr	r3, [pc, #256]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1ee      	bne.n	8004448 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d105      	bne.n	800447c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004470:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	4a3a      	ldr	r2, [pc, #232]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80ad 	beq.w	80045e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004486:	4b36      	ldr	r3, [pc, #216]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b08      	cmp	r3, #8
 8004490:	d060      	beq.n	8004554 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d145      	bne.n	8004526 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449a:	4b33      	ldr	r3, [pc, #204]	; (8004568 <HAL_RCC_OscConfig+0x4b4>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fc fd8c 	bl	8000fbc <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a8:	f7fc fd88 	bl	8000fbc <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e093      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ba:	4b29      	ldr	r3, [pc, #164]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69da      	ldr	r2, [r3, #28]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	3b01      	subs	r3, #1
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	061b      	lsls	r3, r3, #24
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	071b      	lsls	r3, r3, #28
 80044f2:	491b      	ldr	r1, [pc, #108]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_RCC_OscConfig+0x4b4>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fc fd5d 	bl	8000fbc <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7fc fd59 	bl	8000fbc <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e064      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004518:	4b11      	ldr	r3, [pc, #68]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x452>
 8004524:	e05c      	b.n	80045e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <HAL_RCC_OscConfig+0x4b4>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc fd46 	bl	8000fbc <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fc fd42 	bl	8000fbc <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e04d      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_RCC_OscConfig+0x4ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x480>
 8004552:	e045      	b.n	80045e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e040      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
 8004560:	40023800 	.word	0x40023800
 8004564:	40007000 	.word	0x40007000
 8004568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800456c:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_RCC_OscConfig+0x538>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d030      	beq.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d129      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d122      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800459c:	4013      	ands	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d119      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	3b01      	subs	r3, #1
 80045b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d10f      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800

080045f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e07b      	b.n	80046fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d108      	bne.n	800461c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004612:	d009      	beq.n	8004628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	61da      	str	r2, [r3, #28]
 800461a:	e005      	b.n	8004628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fc fa7c 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800465e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	ea42 0103 	orr.w	r1, r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0104 	and.w	r1, r3, #4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	f003 0210 	and.w	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b088      	sub	sp, #32
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004712:	f7fc fc53 	bl	8000fbc <HAL_GetTick>
 8004716:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d001      	beq.n	800472c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	e12a      	b.n	8004982 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_SPI_Transmit+0x36>
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e122      	b.n	8004982 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_SPI_Transmit+0x48>
 8004746:	2302      	movs	r3, #2
 8004748:	e11b      	b.n	8004982 <HAL_SPI_Transmit+0x280>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2203      	movs	r2, #3
 8004756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004798:	d10f      	bne.n	80047ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d007      	beq.n	80047d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e0:	d152      	bne.n	8004888 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_SPI_Transmit+0xee>
 80047ea:	8b7b      	ldrh	r3, [r7, #26]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d145      	bne.n	800487c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	881a      	ldrh	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004800:	1c9a      	adds	r2, r3, #2
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004814:	e032      	b.n	800487c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b02      	cmp	r3, #2
 8004822:	d112      	bne.n	800484a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	881a      	ldrh	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	1c9a      	adds	r2, r3, #2
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	86da      	strh	r2, [r3, #54]	; 0x36
 8004848:	e018      	b.n	800487c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800484a:	f7fc fbb7 	bl	8000fbc <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d803      	bhi.n	8004862 <HAL_SPI_Transmit+0x160>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d102      	bne.n	8004868 <HAL_SPI_Transmit+0x166>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e082      	b.n	8004982 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1c7      	bne.n	8004816 <HAL_SPI_Transmit+0x114>
 8004886:	e053      	b.n	8004930 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_SPI_Transmit+0x194>
 8004890:	8b7b      	ldrh	r3, [r7, #26]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d147      	bne.n	8004926 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	7812      	ldrb	r2, [r2, #0]
 80048a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048bc:	e033      	b.n	8004926 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d113      	bne.n	80048f4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	7812      	ldrb	r2, [r2, #0]
 80048d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80048f2:	e018      	b.n	8004926 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048f4:	f7fc fb62 	bl	8000fbc <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d803      	bhi.n	800490c <HAL_SPI_Transmit+0x20a>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d102      	bne.n	8004912 <HAL_SPI_Transmit+0x210>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e02d      	b.n	8004982 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1c6      	bne.n	80048be <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fbd9 	bl	80050ec <SPI_EndRxTxTransaction>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004980:	2300      	movs	r3, #0
  }
}
 8004982:	4618      	mov	r0, r3
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b088      	sub	sp, #32
 800498e:	af02      	add	r7, sp, #8
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d001      	beq.n	80049aa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80049a6:	2302      	movs	r3, #2
 80049a8:	e104      	b.n	8004bb4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b2:	d112      	bne.n	80049da <HAL_SPI_Receive+0x50>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10e      	bne.n	80049da <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2204      	movs	r2, #4
 80049c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	4613      	mov	r3, r2
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f8f3 	bl	8004bbc <HAL_SPI_TransmitReceive>
 80049d6:	4603      	mov	r3, r0
 80049d8:	e0ec      	b.n	8004bb4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049da:	f7fc faef 	bl	8000fbc <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_SPI_Receive+0x62>
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0e1      	b.n	8004bb4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_SPI_Receive+0x74>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e0da      	b.n	8004bb4 <HAL_SPI_Receive+0x22a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	88fa      	ldrh	r2, [r7, #6]
 8004a24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4c:	d10f      	bne.n	8004a6e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d007      	beq.n	8004a8c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d170      	bne.n	8004b76 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a94:	e035      	b.n	8004b02 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d115      	bne.n	8004ad0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f103 020c 	add.w	r2, r3, #12
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	7812      	ldrb	r2, [r2, #0]
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ace:	e018      	b.n	8004b02 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad0:	f7fc fa74 	bl	8000fbc <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d803      	bhi.n	8004ae8 <HAL_SPI_Receive+0x15e>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d102      	bne.n	8004aee <HAL_SPI_Receive+0x164>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e058      	b.n	8004bb4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1c4      	bne.n	8004a96 <HAL_SPI_Receive+0x10c>
 8004b0c:	e038      	b.n	8004b80 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d113      	bne.n	8004b44 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	b292      	uxth	r2, r2
 8004b28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	1c9a      	adds	r2, r3, #2
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b42:	e018      	b.n	8004b76 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b44:	f7fc fa3a 	bl	8000fbc <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d803      	bhi.n	8004b5c <HAL_SPI_Receive+0x1d2>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5a:	d102      	bne.n	8004b62 <HAL_SPI_Receive+0x1d8>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e01e      	b.n	8004bb4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1c6      	bne.n	8004b0e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	6839      	ldr	r1, [r7, #0]
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fa4b 	bl	8005020 <SPI_EndRxTransaction>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
  }
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08a      	sub	sp, #40	; 0x28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bce:	f7fc f9f5 	bl	8000fbc <HAL_GetTick>
 8004bd2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bda:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004be6:	7ffb      	ldrb	r3, [r7, #31]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d00c      	beq.n	8004c06 <HAL_SPI_TransmitReceive+0x4a>
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf2:	d106      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x46>
 8004bfc:	7ffb      	ldrb	r3, [r7, #31]
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d001      	beq.n	8004c06 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
 8004c04:	e17f      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_SPI_TransmitReceive+0x5c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_SPI_TransmitReceive+0x5c>
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e174      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_SPI_TransmitReceive+0x6e>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e16d      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x34a>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d003      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2205      	movs	r2, #5
 8004c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	887a      	ldrh	r2, [r7, #2]
 8004c56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	887a      	ldrh	r2, [r7, #2]
 8004c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	887a      	ldrh	r2, [r7, #2]
 8004c68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	887a      	ldrh	r2, [r7, #2]
 8004c6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d007      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca2:	d17e      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0xf6>
 8004cac:	8afb      	ldrh	r3, [r7, #22]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d16c      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	881a      	ldrh	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd6:	e059      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d11b      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x162>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d016      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x162>
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d113      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	881a      	ldrh	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	1c9a      	adds	r2, r3, #2
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3b01      	subs	r3, #1
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d119      	bne.n	8004d60 <HAL_SPI_TransmitReceive+0x1a4>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d014      	beq.n	8004d60 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	b292      	uxth	r2, r2
 8004d42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	1c9a      	adds	r2, r3, #2
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d60:	f7fc f92c 	bl	8000fbc <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d80d      	bhi.n	8004d8c <HAL_SPI_TransmitReceive+0x1d0>
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d009      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e0bc      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1a0      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x11c>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d19b      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x11c>
 8004da0:	e082      	b.n	8004ea8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_SPI_TransmitReceive+0x1f4>
 8004daa:	8afb      	ldrh	r3, [r7, #22]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d171      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dd6:	e05d      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d11c      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x264>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d017      	beq.n	8004e20 <HAL_SPI_TransmitReceive+0x264>
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d114      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	7812      	ldrb	r2, [r2, #0]
 8004e02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d119      	bne.n	8004e62 <HAL_SPI_TransmitReceive+0x2a6>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d014      	beq.n	8004e62 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e62:	f7fc f8ab 	bl	8000fbc <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d803      	bhi.n	8004e7a <HAL_SPI_TransmitReceive+0x2be>
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d102      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x2c4>
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e038      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d19c      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x21c>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d197      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f91d 	bl	80050ec <SPI_EndRxTxTransaction>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e01d      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004f04:	2300      	movs	r3, #0
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
	...

08004f10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f20:	f7fc f84c 	bl	8000fbc <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f30:	f7fc f844 	bl	8000fbc <HAL_GetTick>
 8004f34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	015b      	lsls	r3, r3, #5
 8004f3c:	0d1b      	lsrs	r3, r3, #20
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	fb02 f303 	mul.w	r3, r2, r3
 8004f44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f46:	e054      	b.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d050      	beq.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f50:	f7fc f834 	bl	8000fbc <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d902      	bls.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d13d      	bne.n	8004fe2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f7e:	d111      	bne.n	8004fa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f88:	d004      	beq.n	8004f94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f92:	d107      	bne.n	8004fa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fac:	d10f      	bne.n	8004fce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e017      	b.n	8005012 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	bf0c      	ite	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	2300      	movne	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	429a      	cmp	r2, r3
 800500e:	d19b      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000000 	.word	0x20000000

08005020 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005034:	d111      	bne.n	800505a <SPI_EndRxTransaction+0x3a>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800503e:	d004      	beq.n	800504a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005048:	d107      	bne.n	800505a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005058:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005062:	d12a      	bne.n	80050ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506c:	d012      	beq.n	8005094 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2200      	movs	r2, #0
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff ff49 	bl	8004f10 <SPI_WaitFlagStateUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d02d      	beq.n	80050e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f043 0220 	orr.w	r2, r3, #32
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e026      	b.n	80050e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2200      	movs	r2, #0
 800509c:	2101      	movs	r1, #1
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7ff ff36 	bl	8004f10 <SPI_WaitFlagStateUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d01a      	beq.n	80050e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	f043 0220 	orr.w	r2, r3, #32
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e013      	b.n	80050e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2101      	movs	r1, #1
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff ff23 	bl	8004f10 <SPI_WaitFlagStateUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e000      	b.n	80050e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2201      	movs	r2, #1
 8005100:	2102      	movs	r1, #2
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff ff04 	bl	8004f10 <SPI_WaitFlagStateUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005112:	f043 0220 	orr.w	r2, r3, #32
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e032      	b.n	8005184 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800511e:	4b1b      	ldr	r3, [pc, #108]	; (800518c <SPI_EndRxTxTransaction+0xa0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <SPI_EndRxTxTransaction+0xa4>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	0d5b      	lsrs	r3, r3, #21
 800512a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513c:	d112      	bne.n	8005164 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	; 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f7ff fee1 	bl	8004f10 <SPI_WaitFlagStateUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d016      	beq.n	8005182 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	f043 0220 	orr.w	r2, r3, #32
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e00f      	b.n	8005184 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	3b01      	subs	r3, #1
 800516e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b80      	cmp	r3, #128	; 0x80
 800517c:	d0f2      	beq.n	8005164 <SPI_EndRxTxTransaction+0x78>
 800517e:	e000      	b.n	8005182 <SPI_EndRxTxTransaction+0x96>
        break;
 8005180:	bf00      	nop
  }

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000000 	.word	0x20000000
 8005190:	165e9f81 	.word	0x165e9f81

08005194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e042      	b.n	800522c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fb fd08 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fd69 	bl	8005cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800520c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08a      	sub	sp, #40	; 0x28
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b20      	cmp	r3, #32
 8005252:	d175      	bne.n	8005340 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d002      	beq.n	8005260 <HAL_UART_Transmit+0x2c>
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e06e      	b.n	8005342 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2221      	movs	r2, #33	; 0x21
 800526e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005272:	f7fb fea3 	bl	8000fbc <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528c:	d108      	bne.n	80052a0 <HAL_UART_Transmit+0x6c>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e003      	b.n	80052a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a8:	e02e      	b.n	8005308 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2200      	movs	r2, #0
 80052b2:	2180      	movs	r1, #128	; 0x80
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fb05 	bl	80058c4 <UART_WaitOnFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e03a      	b.n	8005342 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	3302      	adds	r3, #2
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e007      	b.n	80052fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	3301      	adds	r3, #1
 80052f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1cb      	bne.n	80052aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	2140      	movs	r1, #64	; 0x40
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fad1 	bl	80058c4 <UART_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e006      	b.n	8005342 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	e000      	b.n	8005342 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005340:	2302      	movs	r3, #2
  }
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b0ba      	sub	sp, #232	; 0xe8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005378:	2300      	movs	r3, #0
 800537a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800538a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10f      	bne.n	80053b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_UART_IRQHandler+0x66>
 800539e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fbc2 	bl	8005b34 <UART_Receive_IT>
      return;
 80053b0:	e25b      	b.n	800586a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80de 	beq.w	8005578 <HAL_UART_IRQHandler+0x22c>
 80053bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80d1 	beq.w	8005578 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_UART_IRQHandler+0xae>
 80053e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	f043 0201 	orr.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_UART_IRQHandler+0xd2>
 8005406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	f043 0202 	orr.w	r2, r3, #2
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <HAL_UART_IRQHandler+0xf6>
 800542a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	f043 0204 	orr.w	r2, r3, #4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d011      	beq.n	8005472 <HAL_UART_IRQHandler+0x126>
 800544e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d105      	bne.n	8005466 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546a:	f043 0208 	orr.w	r2, r3, #8
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 81f2 	beq.w	8005860 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800547c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_UART_IRQHandler+0x14e>
 8005488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fb4d 	bl	8005b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	bf0c      	ite	eq
 80054a8:	2301      	moveq	r3, #1
 80054aa:	2300      	movne	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <HAL_UART_IRQHandler+0x17a>
 80054be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d04f      	beq.n	8005566 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa55 	bl	8005976 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b40      	cmp	r3, #64	; 0x40
 80054d8:	d141      	bne.n	800555e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3314      	adds	r3, #20
 80054e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3314      	adds	r3, #20
 8005502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800550a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800551e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1d9      	bne.n	80054da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d013      	beq.n	8005556 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	4a7e      	ldr	r2, [pc, #504]	; (800572c <HAL_UART_IRQHandler+0x3e0>)
 8005534:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553a:	4618      	mov	r0, r3
 800553c:	f7fc f961 	bl	8001802 <HAL_DMA_Abort_IT>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005550:	4610      	mov	r0, r2
 8005552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005554:	e00e      	b.n	8005574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f99e 	bl	8005898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555c:	e00a      	b.n	8005574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f99a 	bl	8005898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	e006      	b.n	8005574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f996 	bl	8005898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005572:	e175      	b.n	8005860 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005574:	bf00      	nop
    return;
 8005576:	e173      	b.n	8005860 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	2b01      	cmp	r3, #1
 800557e:	f040 814f 	bne.w	8005820 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 8148 	beq.w	8005820 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8141 	beq.w	8005820 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055be:	2b40      	cmp	r3, #64	; 0x40
 80055c0:	f040 80b6 	bne.w	8005730 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8145 	beq.w	8005864 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055e2:	429a      	cmp	r2, r3
 80055e4:	f080 813e 	bcs.w	8005864 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fa:	f000 8088 	beq.w	800570e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800561c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800562a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800562e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005636:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1d9      	bne.n	80055fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3314      	adds	r3, #20
 8005650:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800565a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3314      	adds	r3, #20
 800566a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800566e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005672:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005676:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1e1      	bne.n	800564a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3314      	adds	r3, #20
 800568c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3314      	adds	r3, #20
 80056a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e3      	bne.n	8005686 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056de:	f023 0310 	bic.w	r3, r3, #16
 80056e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	330c      	adds	r3, #12
 80056ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80056f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e3      	bne.n	80056cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005708:	4618      	mov	r0, r3
 800570a:	f7fc f80a 	bl	8001722 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800571c:	b29b      	uxth	r3, r3
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	b29b      	uxth	r3, r3
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f8c1 	bl	80058ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800572a:	e09b      	b.n	8005864 <HAL_UART_IRQHandler+0x518>
 800572c:	08005a3d 	.word	0x08005a3d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005738:	b29b      	uxth	r3, r3
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005744:	b29b      	uxth	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 808e 	beq.w	8005868 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800574c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8089 	beq.w	8005868 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800576c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800577a:	647a      	str	r2, [r7, #68]	; 0x44
 800577c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e3      	bne.n	8005756 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3314      	adds	r3, #20
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	623b      	str	r3, [r7, #32]
   return(result);
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057b2:	633a      	str	r2, [r7, #48]	; 0x30
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e3      	bne.n	800578e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0310 	bic.w	r3, r3, #16
 80057ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057f8:	61fa      	str	r2, [r7, #28]
 80057fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	69b9      	ldr	r1, [r7, #24]
 80057fe:	69fa      	ldr	r2, [r7, #28]
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	617b      	str	r3, [r7, #20]
   return(result);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e3      	bne.n	80057d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005812:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005816:	4619      	mov	r1, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f847 	bl	80058ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800581e:	e023      	b.n	8005868 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d009      	beq.n	8005840 <HAL_UART_IRQHandler+0x4f4>
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f913 	bl	8005a64 <UART_Transmit_IT>
    return;
 800583e:	e014      	b.n	800586a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00e      	beq.n	800586a <HAL_UART_IRQHandler+0x51e>
 800584c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f953 	bl	8005b04 <UART_EndTransmit_IT>
    return;
 800585e:	e004      	b.n	800586a <HAL_UART_IRQHandler+0x51e>
    return;
 8005860:	bf00      	nop
 8005862:	e002      	b.n	800586a <HAL_UART_IRQHandler+0x51e>
      return;
 8005864:	bf00      	nop
 8005866:	e000      	b.n	800586a <HAL_UART_IRQHandler+0x51e>
      return;
 8005868:	bf00      	nop
  }
}
 800586a:	37e8      	adds	r7, #232	; 0xe8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	460b      	mov	r3, r1
 80058b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d4:	e03b      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058d6:	6a3b      	ldr	r3, [r7, #32]
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d037      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058de:	f7fb fb6d 	bl	8000fbc <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d302      	bcc.n	80058f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e03a      	b.n	800596e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d023      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b80      	cmp	r3, #128	; 0x80
 800590a:	d020      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b40      	cmp	r3, #64	; 0x40
 8005910:	d01d      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b08      	cmp	r3, #8
 800591e:	d116      	bne.n	800594e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f81d 	bl	8005976 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2208      	movs	r2, #8
 8005940:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e00f      	b.n	800596e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	429a      	cmp	r2, r3
 800596a:	d0b4      	beq.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005976:	b480      	push	{r7}
 8005978:	b095      	sub	sp, #84	; 0x54
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800599e:	643a      	str	r2, [r7, #64]	; 0x40
 80059a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3314      	adds	r3, #20
 80059b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3314      	adds	r3, #20
 80059d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d119      	bne.n	8005a22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0310 	bic.w	r3, r3, #16
 8005a04:	647b      	str	r3, [r7, #68]	; 0x44
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a0e:	61ba      	str	r2, [r7, #24]
 8005a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6979      	ldr	r1, [r7, #20]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e5      	bne.n	80059ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a30:	bf00      	nop
 8005a32:	3754      	adds	r7, #84	; 0x54
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff ff1e 	bl	8005898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b21      	cmp	r3, #33	; 0x21
 8005a76:	d13e      	bne.n	8005af6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a80:	d114      	bne.n	8005aac <UART_Transmit_IT+0x48>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d110      	bne.n	8005aac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	1c9a      	adds	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	621a      	str	r2, [r3, #32]
 8005aaa:	e008      	b.n	8005abe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	1c59      	adds	r1, r3, #1
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6211      	str	r1, [r2, #32]
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	4619      	mov	r1, r3
 8005acc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10f      	bne.n	8005af2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68da      	ldr	r2, [r3, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ae0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	e000      	b.n	8005af8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
  }
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fea3 	bl	8005870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08c      	sub	sp, #48	; 0x30
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b22      	cmp	r3, #34	; 0x22
 8005b46:	f040 80ae 	bne.w	8005ca6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b52:	d117      	bne.n	8005b84 <UART_Receive_IT+0x50>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d113      	bne.n	8005b84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	1c9a      	adds	r2, r3, #2
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	629a      	str	r2, [r3, #40]	; 0x28
 8005b82:	e026      	b.n	8005bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	d007      	beq.n	8005ba8 <UART_Receive_IT+0x74>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <UART_Receive_IT+0x82>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	701a      	strb	r2, [r3, #0]
 8005bb4:	e008      	b.n	8005bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4619      	mov	r1, r3
 8005be0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d15d      	bne.n	8005ca2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0220 	bic.w	r2, r2, #32
 8005bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d135      	bne.n	8005c98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	330c      	adds	r3, #12
 8005c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	613b      	str	r3, [r7, #16]
   return(result);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f023 0310 	bic.w	r3, r3, #16
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c52:	623a      	str	r2, [r7, #32]
 8005c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	69f9      	ldr	r1, [r7, #28]
 8005c58:	6a3a      	ldr	r2, [r7, #32]
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e5      	bne.n	8005c32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d10a      	bne.n	8005c8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff fe0b 	bl	80058ac <HAL_UARTEx_RxEventCallback>
 8005c96:	e002      	b.n	8005c9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff fdf3 	bl	8005884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e002      	b.n	8005ca8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e000      	b.n	8005ca8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ca6:	2302      	movs	r3, #2
  }
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3730      	adds	r7, #48	; 0x30
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb4:	b0c0      	sub	sp, #256	; 0x100
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ccc:	68d9      	ldr	r1, [r3, #12]
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	ea40 0301 	orr.w	r3, r0, r1
 8005cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d08:	f021 010c 	bic.w	r1, r1, #12
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d16:	430b      	orrs	r3, r1
 8005d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2a:	6999      	ldr	r1, [r3, #24]
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	ea40 0301 	orr.w	r3, r0, r1
 8005d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	4b8f      	ldr	r3, [pc, #572]	; (8005f7c <UART_SetConfig+0x2cc>)
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d005      	beq.n	8005d50 <UART_SetConfig+0xa0>
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b8d      	ldr	r3, [pc, #564]	; (8005f80 <UART_SetConfig+0x2d0>)
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d104      	bne.n	8005d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d50:	f7fd fc42 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
 8005d54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d58:	e003      	b.n	8005d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d5a:	f7fd fc29 	bl	80035b0 <HAL_RCC_GetPCLK1Freq>
 8005d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6c:	f040 810c 	bne.w	8005f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d82:	4622      	mov	r2, r4
 8005d84:	462b      	mov	r3, r5
 8005d86:	1891      	adds	r1, r2, r2
 8005d88:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d8a:	415b      	adcs	r3, r3
 8005d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d92:	4621      	mov	r1, r4
 8005d94:	eb12 0801 	adds.w	r8, r2, r1
 8005d98:	4629      	mov	r1, r5
 8005d9a:	eb43 0901 	adc.w	r9, r3, r1
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005db2:	4690      	mov	r8, r2
 8005db4:	4699      	mov	r9, r3
 8005db6:	4623      	mov	r3, r4
 8005db8:	eb18 0303 	adds.w	r3, r8, r3
 8005dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	eb49 0303 	adc.w	r3, r9, r3
 8005dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005dde:	460b      	mov	r3, r1
 8005de0:	18db      	adds	r3, r3, r3
 8005de2:	653b      	str	r3, [r7, #80]	; 0x50
 8005de4:	4613      	mov	r3, r2
 8005de6:	eb42 0303 	adc.w	r3, r2, r3
 8005dea:	657b      	str	r3, [r7, #84]	; 0x54
 8005dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005df4:	f7fa fa64 	bl	80002c0 <__aeabi_uldivmod>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4b61      	ldr	r3, [pc, #388]	; (8005f84 <UART_SetConfig+0x2d4>)
 8005dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	011c      	lsls	r4, r3, #4
 8005e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	1891      	adds	r1, r2, r2
 8005e1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e20:	415b      	adcs	r3, r3
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e28:	4641      	mov	r1, r8
 8005e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e2e:	4649      	mov	r1, r9
 8005e30:	eb43 0b01 	adc.w	fp, r3, r1
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e48:	4692      	mov	sl, r2
 8005e4a:	469b      	mov	fp, r3
 8005e4c:	4643      	mov	r3, r8
 8005e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8005e52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e56:	464b      	mov	r3, r9
 8005e58:	eb4b 0303 	adc.w	r3, fp, r3
 8005e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e74:	460b      	mov	r3, r1
 8005e76:	18db      	adds	r3, r3, r3
 8005e78:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	eb42 0303 	adc.w	r3, r2, r3
 8005e80:	647b      	str	r3, [r7, #68]	; 0x44
 8005e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e8a:	f7fa fa19 	bl	80002c0 <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4611      	mov	r1, r2
 8005e94:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <UART_SetConfig+0x2d4>)
 8005e96:	fba3 2301 	umull	r2, r3, r3, r1
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	2264      	movs	r2, #100	; 0x64
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	1acb      	subs	r3, r1, r3
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eaa:	4b36      	ldr	r3, [pc, #216]	; (8005f84 <UART_SetConfig+0x2d4>)
 8005eac:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eb8:	441c      	add	r4, r3
 8005eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ecc:	4642      	mov	r2, r8
 8005ece:	464b      	mov	r3, r9
 8005ed0:	1891      	adds	r1, r2, r2
 8005ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ed4:	415b      	adcs	r3, r3
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005edc:	4641      	mov	r1, r8
 8005ede:	1851      	adds	r1, r2, r1
 8005ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	414b      	adcs	r3, r1
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	00cb      	lsls	r3, r1, #3
 8005ef8:	4651      	mov	r1, sl
 8005efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005efe:	4651      	mov	r1, sl
 8005f00:	00ca      	lsls	r2, r1, #3
 8005f02:	4610      	mov	r0, r2
 8005f04:	4619      	mov	r1, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	4642      	mov	r2, r8
 8005f0a:	189b      	adds	r3, r3, r2
 8005f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f10:	464b      	mov	r3, r9
 8005f12:	460a      	mov	r2, r1
 8005f14:	eb42 0303 	adc.w	r3, r2, r3
 8005f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f30:	460b      	mov	r3, r1
 8005f32:	18db      	adds	r3, r3, r3
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f36:	4613      	mov	r3, r2
 8005f38:	eb42 0303 	adc.w	r3, r2, r3
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f46:	f7fa f9bb 	bl	80002c0 <__aeabi_uldivmod>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <UART_SetConfig+0x2d4>)
 8005f50:	fba3 1302 	umull	r1, r3, r3, r2
 8005f54:	095b      	lsrs	r3, r3, #5
 8005f56:	2164      	movs	r1, #100	; 0x64
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	3332      	adds	r3, #50	; 0x32
 8005f62:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <UART_SetConfig+0x2d4>)
 8005f64:	fba2 2303 	umull	r2, r3, r2, r3
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	f003 0207 	and.w	r2, r3, #7
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4422      	add	r2, r4
 8005f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f78:	e106      	b.n	8006188 <UART_SetConfig+0x4d8>
 8005f7a:	bf00      	nop
 8005f7c:	40011000 	.word	0x40011000
 8005f80:	40011400 	.word	0x40011400
 8005f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f9a:	4642      	mov	r2, r8
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	1891      	adds	r1, r2, r2
 8005fa0:	6239      	str	r1, [r7, #32]
 8005fa2:	415b      	adcs	r3, r3
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005faa:	4641      	mov	r1, r8
 8005fac:	1854      	adds	r4, r2, r1
 8005fae:	4649      	mov	r1, r9
 8005fb0:	eb43 0501 	adc.w	r5, r3, r1
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	00eb      	lsls	r3, r5, #3
 8005fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fc2:	00e2      	lsls	r2, r4, #3
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	4643      	mov	r3, r8
 8005fca:	18e3      	adds	r3, r4, r3
 8005fcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	eb45 0303 	adc.w	r3, r5, r3
 8005fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fe6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	008b      	lsls	r3, r1, #2
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006000:	4621      	mov	r1, r4
 8006002:	008a      	lsls	r2, r1, #2
 8006004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006008:	f7fa f95a 	bl	80002c0 <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4b60      	ldr	r3, [pc, #384]	; (8006194 <UART_SetConfig+0x4e4>)
 8006012:	fba3 2302 	umull	r2, r3, r3, r2
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	011c      	lsls	r4, r3, #4
 800601a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800601e:	2200      	movs	r2, #0
 8006020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800602c:	4642      	mov	r2, r8
 800602e:	464b      	mov	r3, r9
 8006030:	1891      	adds	r1, r2, r2
 8006032:	61b9      	str	r1, [r7, #24]
 8006034:	415b      	adcs	r3, r3
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800603c:	4641      	mov	r1, r8
 800603e:	1851      	adds	r1, r2, r1
 8006040:	6139      	str	r1, [r7, #16]
 8006042:	4649      	mov	r1, r9
 8006044:	414b      	adcs	r3, r1
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006054:	4659      	mov	r1, fp
 8006056:	00cb      	lsls	r3, r1, #3
 8006058:	4651      	mov	r1, sl
 800605a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800605e:	4651      	mov	r1, sl
 8006060:	00ca      	lsls	r2, r1, #3
 8006062:	4610      	mov	r0, r2
 8006064:	4619      	mov	r1, r3
 8006066:	4603      	mov	r3, r0
 8006068:	4642      	mov	r2, r8
 800606a:	189b      	adds	r3, r3, r2
 800606c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006070:	464b      	mov	r3, r9
 8006072:	460a      	mov	r2, r1
 8006074:	eb42 0303 	adc.w	r3, r2, r3
 8006078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	67bb      	str	r3, [r7, #120]	; 0x78
 8006086:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006094:	4649      	mov	r1, r9
 8006096:	008b      	lsls	r3, r1, #2
 8006098:	4641      	mov	r1, r8
 800609a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800609e:	4641      	mov	r1, r8
 80060a0:	008a      	lsls	r2, r1, #2
 80060a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060a6:	f7fa f90b 	bl	80002c0 <__aeabi_uldivmod>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	4b38      	ldr	r3, [pc, #224]	; (8006194 <UART_SetConfig+0x4e4>)
 80060b2:	fba3 2301 	umull	r2, r3, r3, r1
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	2264      	movs	r2, #100	; 0x64
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	1acb      	subs	r3, r1, r3
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	3332      	adds	r3, #50	; 0x32
 80060c4:	4a33      	ldr	r2, [pc, #204]	; (8006194 <UART_SetConfig+0x4e4>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d0:	441c      	add	r4, r3
 80060d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060d6:	2200      	movs	r2, #0
 80060d8:	673b      	str	r3, [r7, #112]	; 0x70
 80060da:	677a      	str	r2, [r7, #116]	; 0x74
 80060dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060e0:	4642      	mov	r2, r8
 80060e2:	464b      	mov	r3, r9
 80060e4:	1891      	adds	r1, r2, r2
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	415b      	adcs	r3, r3
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060f0:	4641      	mov	r1, r8
 80060f2:	1851      	adds	r1, r2, r1
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	4649      	mov	r1, r9
 80060f8:	414b      	adcs	r3, r1
 80060fa:	607b      	str	r3, [r7, #4]
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006108:	4659      	mov	r1, fp
 800610a:	00cb      	lsls	r3, r1, #3
 800610c:	4651      	mov	r1, sl
 800610e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006112:	4651      	mov	r1, sl
 8006114:	00ca      	lsls	r2, r1, #3
 8006116:	4610      	mov	r0, r2
 8006118:	4619      	mov	r1, r3
 800611a:	4603      	mov	r3, r0
 800611c:	4642      	mov	r2, r8
 800611e:	189b      	adds	r3, r3, r2
 8006120:	66bb      	str	r3, [r7, #104]	; 0x68
 8006122:	464b      	mov	r3, r9
 8006124:	460a      	mov	r2, r1
 8006126:	eb42 0303 	adc.w	r3, r2, r3
 800612a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	663b      	str	r3, [r7, #96]	; 0x60
 8006136:	667a      	str	r2, [r7, #100]	; 0x64
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006144:	4649      	mov	r1, r9
 8006146:	008b      	lsls	r3, r1, #2
 8006148:	4641      	mov	r1, r8
 800614a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800614e:	4641      	mov	r1, r8
 8006150:	008a      	lsls	r2, r1, #2
 8006152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006156:	f7fa f8b3 	bl	80002c0 <__aeabi_uldivmod>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <UART_SetConfig+0x4e4>)
 8006160:	fba3 1302 	umull	r1, r3, r3, r2
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	2164      	movs	r1, #100	; 0x64
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	3332      	adds	r3, #50	; 0x32
 8006172:	4a08      	ldr	r2, [pc, #32]	; (8006194 <UART_SetConfig+0x4e4>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	f003 020f 	and.w	r2, r3, #15
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4422      	add	r2, r4
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800618e:	46bd      	mov	sp, r7
 8006190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006194:	51eb851f 	.word	0x51eb851f

08006198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006198:	b084      	sub	sp, #16
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	f107 001c 	add.w	r0, r7, #28
 80061a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d123      	bne.n	80061fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d105      	bne.n	80061ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fae2 	bl	80077b8 <USB_CoreReset>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]
 80061f8:	e01b      	b.n	8006232 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fad6 	bl	80077b8 <USB_CoreReset>
 800620c:	4603      	mov	r3, r0
 800620e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006210:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	639a      	str	r2, [r3, #56]	; 0x38
 8006224:	e005      	b.n	8006232 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006232:	7fbb      	ldrb	r3, [r7, #30]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d10b      	bne.n	8006250 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f043 0206 	orr.w	r2, r3, #6
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f043 0220 	orr.w	r2, r3, #32
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800625c:	b004      	add	sp, #16
 800625e:	4770      	bx	lr

08006260 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d165      	bne.n	8006340 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4a41      	ldr	r2, [pc, #260]	; (800637c <USB_SetTurnaroundTime+0x11c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d906      	bls.n	800628a <USB_SetTurnaroundTime+0x2a>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a40      	ldr	r2, [pc, #256]	; (8006380 <USB_SetTurnaroundTime+0x120>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d202      	bcs.n	800628a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006284:	230f      	movs	r3, #15
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e062      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	4a3c      	ldr	r2, [pc, #240]	; (8006380 <USB_SetTurnaroundTime+0x120>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d306      	bcc.n	80062a0 <USB_SetTurnaroundTime+0x40>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a3b      	ldr	r2, [pc, #236]	; (8006384 <USB_SetTurnaroundTime+0x124>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d202      	bcs.n	80062a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800629a:	230e      	movs	r3, #14
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	e057      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4a38      	ldr	r2, [pc, #224]	; (8006384 <USB_SetTurnaroundTime+0x124>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d306      	bcc.n	80062b6 <USB_SetTurnaroundTime+0x56>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a37      	ldr	r2, [pc, #220]	; (8006388 <USB_SetTurnaroundTime+0x128>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d202      	bcs.n	80062b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062b0:	230d      	movs	r3, #13
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	e04c      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4a33      	ldr	r2, [pc, #204]	; (8006388 <USB_SetTurnaroundTime+0x128>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d306      	bcc.n	80062cc <USB_SetTurnaroundTime+0x6c>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a32      	ldr	r2, [pc, #200]	; (800638c <USB_SetTurnaroundTime+0x12c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d802      	bhi.n	80062cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062c6:	230c      	movs	r3, #12
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e041      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a2f      	ldr	r2, [pc, #188]	; (800638c <USB_SetTurnaroundTime+0x12c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d906      	bls.n	80062e2 <USB_SetTurnaroundTime+0x82>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a2e      	ldr	r2, [pc, #184]	; (8006390 <USB_SetTurnaroundTime+0x130>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d802      	bhi.n	80062e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062dc:	230b      	movs	r3, #11
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	e036      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a2a      	ldr	r2, [pc, #168]	; (8006390 <USB_SetTurnaroundTime+0x130>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d906      	bls.n	80062f8 <USB_SetTurnaroundTime+0x98>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4a29      	ldr	r2, [pc, #164]	; (8006394 <USB_SetTurnaroundTime+0x134>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d802      	bhi.n	80062f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062f2:	230a      	movs	r3, #10
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e02b      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a26      	ldr	r2, [pc, #152]	; (8006394 <USB_SetTurnaroundTime+0x134>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d906      	bls.n	800630e <USB_SetTurnaroundTime+0xae>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a25      	ldr	r2, [pc, #148]	; (8006398 <USB_SetTurnaroundTime+0x138>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d202      	bcs.n	800630e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006308:	2309      	movs	r3, #9
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e020      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a21      	ldr	r2, [pc, #132]	; (8006398 <USB_SetTurnaroundTime+0x138>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d306      	bcc.n	8006324 <USB_SetTurnaroundTime+0xc4>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4a20      	ldr	r2, [pc, #128]	; (800639c <USB_SetTurnaroundTime+0x13c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d802      	bhi.n	8006324 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800631e:	2308      	movs	r3, #8
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e015      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a1d      	ldr	r2, [pc, #116]	; (800639c <USB_SetTurnaroundTime+0x13c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d906      	bls.n	800633a <USB_SetTurnaroundTime+0xda>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <USB_SetTurnaroundTime+0x140>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d202      	bcs.n	800633a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006334:	2307      	movs	r3, #7
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e00a      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800633a:	2306      	movs	r3, #6
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	e007      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006346:	2309      	movs	r3, #9
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e001      	b.n	8006350 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800634c:	2309      	movs	r3, #9
 800634e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	029b      	lsls	r3, r3, #10
 8006364:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006368:	431a      	orrs	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	00d8acbf 	.word	0x00d8acbf
 8006380:	00e4e1c0 	.word	0x00e4e1c0
 8006384:	00f42400 	.word	0x00f42400
 8006388:	01067380 	.word	0x01067380
 800638c:	011a499f 	.word	0x011a499f
 8006390:	01312cff 	.word	0x01312cff
 8006394:	014ca43f 	.word	0x014ca43f
 8006398:	016e3600 	.word	0x016e3600
 800639c:	01a6ab1f 	.word	0x01a6ab1f
 80063a0:	01e84800 	.word	0x01e84800

080063a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f043 0201 	orr.w	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f023 0201 	bic.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d115      	bne.n	8006436 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006416:	200a      	movs	r0, #10
 8006418:	f7fa fddc 	bl	8000fd4 <HAL_Delay>
      ms += 10U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	330a      	adds	r3, #10
 8006420:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f939 	bl	800769a <USB_GetMode>
 8006428:	4603      	mov	r3, r0
 800642a:	2b01      	cmp	r3, #1
 800642c:	d01e      	beq.n	800646c <USB_SetCurrentMode+0x84>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2bc7      	cmp	r3, #199	; 0xc7
 8006432:	d9f0      	bls.n	8006416 <USB_SetCurrentMode+0x2e>
 8006434:	e01a      	b.n	800646c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d115      	bne.n	8006468 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006448:	200a      	movs	r0, #10
 800644a:	f7fa fdc3 	bl	8000fd4 <HAL_Delay>
      ms += 10U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	330a      	adds	r3, #10
 8006452:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 f920 	bl	800769a <USB_GetMode>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <USB_SetCurrentMode+0x84>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2bc7      	cmp	r3, #199	; 0xc7
 8006464:	d9f0      	bls.n	8006448 <USB_SetCurrentMode+0x60>
 8006466:	e001      	b.n	800646c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e005      	b.n	8006478 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2bc8      	cmp	r3, #200	; 0xc8
 8006470:	d101      	bne.n	8006476 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006480:	b084      	sub	sp, #16
 8006482:	b580      	push	{r7, lr}
 8006484:	b086      	sub	sp, #24
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800648e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	e009      	b.n	80064b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	3340      	adds	r3, #64	; 0x40
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	2200      	movs	r2, #0
 80064ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	3301      	adds	r3, #1
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b0e      	cmp	r3, #14
 80064b8:	d9f2      	bls.n	80064a0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11c      	bne.n	80064fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064d0:	f043 0302 	orr.w	r3, r3, #2
 80064d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e005      	b.n	8006508 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800650e:	461a      	mov	r2, r3
 8006510:	2300      	movs	r3, #0
 8006512:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006514:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006518:	2b01      	cmp	r3, #1
 800651a:	d10d      	bne.n	8006538 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800651c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006520:	2b00      	cmp	r3, #0
 8006522:	d104      	bne.n	800652e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006524:	2100      	movs	r1, #0
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f968 	bl	80067fc <USB_SetDevSpeed>
 800652c:	e008      	b.n	8006540 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800652e:	2101      	movs	r1, #1
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f963 	bl	80067fc <USB_SetDevSpeed>
 8006536:	e003      	b.n	8006540 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006538:	2103      	movs	r1, #3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f95e 	bl	80067fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006540:	2110      	movs	r1, #16
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f8fa 	bl	800673c <USB_FlushTxFifo>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f924 	bl	80067a0 <USB_FlushRxFifo>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006568:	461a      	mov	r2, r3
 800656a:	2300      	movs	r3, #0
 800656c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006574:	461a      	mov	r2, r3
 8006576:	2300      	movs	r3, #0
 8006578:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006580:	461a      	mov	r2, r3
 8006582:	2300      	movs	r3, #0
 8006584:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006586:	2300      	movs	r3, #0
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	e043      	b.n	8006614 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a2:	d118      	bne.n	80065d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b6:	461a      	mov	r2, r3
 80065b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e013      	b.n	80065e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	461a      	mov	r2, r3
 80065ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	e008      	b.n	80065e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e2:	461a      	mov	r2, r3
 80065e4:	2300      	movs	r3, #0
 80065e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	461a      	mov	r2, r3
 80065f6:	2300      	movs	r3, #0
 80065f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006606:	461a      	mov	r2, r3
 8006608:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800660c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	3301      	adds	r3, #1
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006618:	461a      	mov	r2, r3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4293      	cmp	r3, r2
 800661e:	d3b5      	bcc.n	800658c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	e043      	b.n	80066ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800663c:	d118      	bne.n	8006670 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	461a      	mov	r2, r3
 8006652:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	e013      	b.n	8006682 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	461a      	mov	r2, r3
 8006668:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	e008      	b.n	8006682 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	461a      	mov	r2, r3
 800667e:	2300      	movs	r3, #0
 8006680:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	461a      	mov	r2, r3
 8006690:	2300      	movs	r3, #0
 8006692:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a0:	461a      	mov	r2, r3
 80066a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	3301      	adds	r3, #1
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066b2:	461a      	mov	r2, r3
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d3b5      	bcc.n	8006626 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f043 0210 	orr.w	r2, r3, #16
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	4b10      	ldr	r3, [pc, #64]	; (8006738 <USB_DevInit+0x2b8>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f043 0208 	orr.w	r2, r3, #8
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006710:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006714:	2b01      	cmp	r3, #1
 8006716:	d107      	bne.n	8006728 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006720:	f043 0304 	orr.w	r3, r3, #4
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006728:	7dfb      	ldrb	r3, [r7, #23]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006734:	b004      	add	sp, #16
 8006736:	4770      	bx	lr
 8006738:	803c3800 	.word	0x803c3800

0800673c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006756:	d901      	bls.n	800675c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e01b      	b.n	8006794 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	daf2      	bge.n	800674a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	019b      	lsls	r3, r3, #6
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3301      	adds	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006780:	d901      	bls.n	8006786 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e006      	b.n	8006794 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b20      	cmp	r3, #32
 8006790:	d0f0      	beq.n	8006774 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80067b8:	d901      	bls.n	80067be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e018      	b.n	80067f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	daf2      	bge.n	80067ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2210      	movs	r2, #16
 80067ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80067dc:	d901      	bls.n	80067e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e006      	b.n	80067f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0310 	and.w	r3, r3, #16
 80067ea:	2b10      	cmp	r3, #16
 80067ec:	d0f0      	beq.n	80067d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800681c:	4313      	orrs	r3, r2
 800681e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800682e:	b480      	push	{r7}
 8006830:	b087      	sub	sp, #28
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0306 	and.w	r3, r3, #6
 8006846:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800684e:	2300      	movs	r3, #0
 8006850:	75fb      	strb	r3, [r7, #23]
 8006852:	e00a      	b.n	800686a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b02      	cmp	r3, #2
 8006858:	d002      	beq.n	8006860 <USB_GetDevSpeed+0x32>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b06      	cmp	r3, #6
 800685e:	d102      	bne.n	8006866 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006860:	2302      	movs	r3, #2
 8006862:	75fb      	strb	r3, [r7, #23]
 8006864:	e001      	b.n	800686a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006866:	230f      	movs	r3, #15
 8006868:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800686a:	7dfb      	ldrb	r3, [r7, #23]
}
 800686c:	4618      	mov	r0, r3
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d13a      	bne.n	800690a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689a:	69da      	ldr	r2, [r3, #28]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	2101      	movs	r1, #1
 80068a6:	fa01 f303 	lsl.w	r3, r1, r3
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	68f9      	ldr	r1, [r7, #12]
 80068ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068b2:	4313      	orrs	r3, r2
 80068b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d155      	bne.n	8006978 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	791b      	ldrb	r3, [r3, #4]
 80068e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	059b      	lsls	r3, r3, #22
 80068ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068f0:	4313      	orrs	r3, r2
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e036      	b.n	8006978 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006910:	69da      	ldr	r2, [r3, #28]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	2101      	movs	r1, #1
 800691c:	fa01 f303 	lsl.w	r3, r1, r3
 8006920:	041b      	lsls	r3, r3, #16
 8006922:	68f9      	ldr	r1, [r7, #12]
 8006924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006928:	4313      	orrs	r3, r2
 800692a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d11a      	bne.n	8006978 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	791b      	ldrb	r3, [r3, #4]
 800695c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800695e:	430b      	orrs	r3, r1
 8006960:	4313      	orrs	r3, r2
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	440a      	add	r2, r1
 800696a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006976:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
	...

08006988 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d161      	bne.n	8006a68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ba:	d11f      	bne.n	80069fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	0151      	lsls	r1, r2, #5
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	440a      	add	r2, r1
 80069f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	f003 030f 	and.w	r3, r3, #15
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	43db      	mvns	r3, r3
 8006a16:	68f9      	ldr	r1, [r7, #12]
 8006a18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a26:	69da      	ldr	r2, [r3, #28]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f003 030f 	and.w	r3, r3, #15
 8006a30:	2101      	movs	r1, #1
 8006a32:	fa01 f303 	lsl.w	r3, r1, r3
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	68f9      	ldr	r1, [r7, #12]
 8006a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a40:	4013      	ands	r3, r2
 8006a42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	0159      	lsls	r1, r3, #5
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	440b      	add	r3, r1
 8006a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4b35      	ldr	r3, [pc, #212]	; (8006b38 <USB_DeactivateEndpoint+0x1b0>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	600b      	str	r3, [r1, #0]
 8006a66:	e060      	b.n	8006b2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a7e:	d11f      	bne.n	8006ac0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006abe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aea:	69da      	ldr	r2, [r3, #28]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	f003 030f 	and.w	r3, r3, #15
 8006af4:	2101      	movs	r1, #1
 8006af6:	fa01 f303 	lsl.w	r3, r1, r3
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	43db      	mvns	r3, r3
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b04:	4013      	ands	r3, r2
 8006b06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	0159      	lsls	r1, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	440b      	add	r3, r1
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	4619      	mov	r1, r3
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <USB_DeactivateEndpoint+0x1b4>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	ec337800 	.word	0xec337800
 8006b3c:	eff37800 	.word	0xeff37800

08006b40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08a      	sub	sp, #40	; 0x28
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	785b      	ldrb	r3, [r3, #1]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	f040 8180 	bne.w	8006e62 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d132      	bne.n	8006bd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	0151      	lsls	r1, r2, #5
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	440a      	add	r2, r1
 8006b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	69ba      	ldr	r2, [r7, #24]
 8006b9e:	0151      	lsls	r1, r2, #5
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	440a      	add	r2, r1
 8006ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	0151      	lsls	r1, r2, #5
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc8:	0cdb      	lsrs	r3, r3, #19
 8006bca:	04db      	lsls	r3, r3, #19
 8006bcc:	6113      	str	r3, [r2, #16]
 8006bce:	e098      	b.n	8006d02 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	0151      	lsls	r1, r2, #5
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	440a      	add	r2, r1
 8006be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bea:	0cdb      	lsrs	r3, r3, #19
 8006bec:	04db      	lsls	r3, r3, #19
 8006bee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c12:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d11a      	bne.n	8006c50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d903      	bls.n	8006c2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c4c:	6113      	str	r3, [r2, #16]
 8006c4e:	e045      	b.n	8006cdc <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	4413      	add	r3, r2
 8006c5a:	1e5a      	subs	r2, r3, #1
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c64:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	8afb      	ldrh	r3, [r7, #22]
 8006c76:	04db      	lsls	r3, r3, #19
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4ba4      	ldr	r3, [pc, #656]	; (8006f0c <USB_EPStartXfer+0x3cc>)
 8006c7c:	400b      	ands	r3, r1
 8006c7e:	69b9      	ldr	r1, [r7, #24]
 8006c80:	0148      	lsls	r0, r1, #5
 8006c82:	69f9      	ldr	r1, [r7, #28]
 8006c84:	4401      	add	r1, r0
 8006c86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	791b      	ldrb	r3, [r3, #4]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d122      	bne.n	8006cdc <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	69fa      	ldr	r2, [r7, #28]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006cb4:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc2:	691a      	ldr	r2, [r3, #16]
 8006cc4:	8afb      	ldrh	r3, [r7, #22]
 8006cc6:	075b      	lsls	r3, r3, #29
 8006cc8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8006ccc:	69b9      	ldr	r1, [r7, #24]
 8006cce:	0148      	lsls	r0, r1, #5
 8006cd0:	69f9      	ldr	r1, [r7, #28]
 8006cd2:	4401      	add	r1, r0
 8006cd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf2:	69b9      	ldr	r1, [r7, #24]
 8006cf4:	0148      	lsls	r0, r1, #5
 8006cf6:	69f9      	ldr	r1, [r7, #28]
 8006cf8:	4401      	add	r1, r0
 8006cfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d14b      	bne.n	8006da0 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	791b      	ldrb	r3, [r3, #4]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d128      	bne.n	8006d7e <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d110      	bne.n	8006d5e <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	e00f      	b.n	8006d7e <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e165      	b.n	800706c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dbe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	791b      	ldrb	r3, [r3, #4]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d015      	beq.n	8006df4 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 814d 	beq.w	800706c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	f003 030f 	and.w	r3, r3, #15
 8006de2:	2101      	movs	r1, #1
 8006de4:	fa01 f303 	lsl.w	r3, r1, r3
 8006de8:	69f9      	ldr	r1, [r7, #28]
 8006dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dee:	4313      	orrs	r3, r2
 8006df0:	634b      	str	r3, [r1, #52]	; 0x34
 8006df2:	e13b      	b.n	800706c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d110      	bne.n	8006e26 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	0151      	lsls	r1, r2, #5
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	440a      	add	r2, r1
 8006e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	e00f      	b.n	8006e46 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	68d9      	ldr	r1, [r3, #12]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	781a      	ldrb	r2, [r3, #0]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	b298      	uxth	r0, r3
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	4603      	mov	r3, r0
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f9b8 	bl	80071d0 <USB_WritePacket>
 8006e60:	e104      	b.n	800706c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e7c:	0cdb      	lsrs	r3, r3, #19
 8006e7e:	04db      	lsls	r3, r3, #19
 8006e80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	0151      	lsls	r1, r2, #5
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	440a      	add	r2, r1
 8006e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ea0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ea4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d131      	bne.n	8006f10 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eda:	69b9      	ldr	r1, [r7, #24]
 8006edc:	0148      	lsls	r0, r1, #5
 8006ede:	69f9      	ldr	r1, [r7, #28]
 8006ee0:	4401      	add	r1, r0
 8006ee2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f08:	6113      	str	r3, [r2, #16]
 8006f0a:	e061      	b.n	8006fd0 <USB_EPStartXfer+0x490>
 8006f0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d123      	bne.n	8006f60 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f2e:	69b9      	ldr	r1, [r7, #24]
 8006f30:	0148      	lsls	r0, r1, #5
 8006f32:	69f9      	ldr	r1, [r7, #28]
 8006f34:	4401      	add	r1, r0
 8006f36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f5c:	6113      	str	r3, [r2, #16]
 8006f5e:	e037      	b.n	8006fd0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4413      	add	r3, r2
 8006f6a:	1e5a      	subs	r2, r3, #1
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f74:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	8afa      	ldrh	r2, [r7, #22]
 8006f7c:	fb03 f202 	mul.w	r2, r3, r2
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	8afb      	ldrh	r3, [r7, #22]
 8006f94:	04d9      	lsls	r1, r3, #19
 8006f96:	4b38      	ldr	r3, [pc, #224]	; (8007078 <USB_EPStartXfer+0x538>)
 8006f98:	400b      	ands	r3, r1
 8006f9a:	69b9      	ldr	r1, [r7, #24]
 8006f9c:	0148      	lsls	r0, r1, #5
 8006f9e:	69f9      	ldr	r1, [r7, #28]
 8006fa0:	4401      	add	r1, r0
 8006fa2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fc0:	69b9      	ldr	r1, [r7, #24]
 8006fc2:	0148      	lsls	r0, r1, #5
 8006fc4:	69f9      	ldr	r1, [r7, #28]
 8006fc6:	4401      	add	r1, r0
 8006fc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d10d      	bne.n	8006ff2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d009      	beq.n	8006ff2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	68d9      	ldr	r1, [r3, #12]
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fee:	460a      	mov	r2, r1
 8006ff0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	791b      	ldrb	r3, [r3, #4]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d128      	bne.n	800704c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007006:	2b00      	cmp	r3, #0
 8007008:	d110      	bne.n	800702c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	e00f      	b.n	800704c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800704a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007066:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800706a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	1ff80000 	.word	0x1ff80000

0800707c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	785b      	ldrb	r3, [r3, #1]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d14a      	bne.n	8007130 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b2:	f040 8086 	bne.w	80071c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	7812      	ldrb	r2, [r2, #0]
 80070ca:	0151      	lsls	r1, r2, #5
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	440a      	add	r2, r1
 80070d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	7812      	ldrb	r2, [r2, #0]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3301      	adds	r3, #1
 8007102:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f242 7210 	movw	r2, #10000	; 0x2710
 800710a:	4293      	cmp	r3, r2
 800710c:	d902      	bls.n	8007114 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	75fb      	strb	r3, [r7, #23]
          break;
 8007112:	e056      	b.n	80071c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800712c:	d0e7      	beq.n	80070fe <USB_EPStopXfer+0x82>
 800712e:	e048      	b.n	80071c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007148:	d13b      	bne.n	80071c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	7812      	ldrb	r2, [r2, #0]
 800715e:	0151      	lsls	r1, r2, #5
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	440a      	add	r2, r1
 8007164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007168:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800716c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	7812      	ldrb	r2, [r2, #0]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007190:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f242 7210 	movw	r2, #10000	; 0x2710
 800719e:	4293      	cmp	r3, r2
 80071a0:	d902      	bls.n	80071a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	75fb      	strb	r3, [r7, #23]
          break;
 80071a6:	e00c      	b.n	80071c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c0:	d0e7      	beq.n	8007192 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b089      	sub	sp, #36	; 0x24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	4611      	mov	r1, r2
 80071dc:	461a      	mov	r2, r3
 80071de:	460b      	mov	r3, r1
 80071e0:	71fb      	strb	r3, [r7, #7]
 80071e2:	4613      	mov	r3, r2
 80071e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d123      	bne.n	800723e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071f6:	88bb      	ldrh	r3, [r7, #4]
 80071f8:	3303      	adds	r3, #3
 80071fa:	089b      	lsrs	r3, r3, #2
 80071fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071fe:	2300      	movs	r3, #0
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	e018      	b.n	8007236 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	031a      	lsls	r2, r3, #12
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007210:	461a      	mov	r2, r3
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	3301      	adds	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	3301      	adds	r3, #1
 8007222:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	3301      	adds	r3, #1
 8007228:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	3301      	adds	r3, #1
 800722e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	3301      	adds	r3, #1
 8007234:	61bb      	str	r3, [r7, #24]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	429a      	cmp	r2, r3
 800723c:	d3e2      	bcc.n	8007204 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3724      	adds	r7, #36	; 0x24
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800724c:	b480      	push	{r7}
 800724e:	b08b      	sub	sp, #44	; 0x2c
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	089b      	lsrs	r3, r3, #2
 8007266:	b29b      	uxth	r3, r3
 8007268:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	f003 0303 	and.w	r3, r3, #3
 8007270:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007272:	2300      	movs	r3, #0
 8007274:	623b      	str	r3, [r7, #32]
 8007276:	e014      	b.n	80072a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	601a      	str	r2, [r3, #0]
    pDest++;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	3301      	adds	r3, #1
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	3301      	adds	r3, #1
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	3301      	adds	r3, #1
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	3301      	adds	r3, #1
 800729a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	3301      	adds	r3, #1
 80072a0:	623b      	str	r3, [r7, #32]
 80072a2:	6a3a      	ldr	r2, [r7, #32]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d3e6      	bcc.n	8007278 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80072aa:	8bfb      	ldrh	r3, [r7, #30]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01e      	beq.n	80072ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ba:	461a      	mov	r2, r3
 80072bc:	f107 0310 	add.w	r3, r7, #16
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	fa22 f303 	lsr.w	r3, r2, r3
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	701a      	strb	r2, [r3, #0]
      i++;
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	3301      	adds	r3, #1
 80072da:	623b      	str	r3, [r7, #32]
      pDest++;
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	3301      	adds	r3, #1
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80072e2:	8bfb      	ldrh	r3, [r7, #30]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072e8:	8bfb      	ldrh	r3, [r7, #30]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1ea      	bne.n	80072c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	372c      	adds	r7, #44	; 0x2c
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d12c      	bne.n	8007372 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	db12      	blt.n	8007350 <USB_EPSetStall+0x54>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00f      	beq.n	8007350 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	0151      	lsls	r1, r2, #5
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	440a      	add	r2, r1
 8007346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800734e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	e02b      	b.n	80073ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	db12      	blt.n	80073aa <USB_EPSetStall+0xae>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00f      	beq.n	80073aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	785b      	ldrb	r3, [r3, #1]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d128      	bne.n	8007446 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007412:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	791b      	ldrb	r3, [r3, #4]
 8007418:	2b03      	cmp	r3, #3
 800741a:	d003      	beq.n	8007424 <USB_EPClearStall+0x4c>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	791b      	ldrb	r3, [r3, #4]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d138      	bne.n	8007496 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	0151      	lsls	r1, r2, #5
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	440a      	add	r2, r1
 800743a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	e027      	b.n	8007496 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007460:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007464:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	791b      	ldrb	r3, [r3, #4]
 800746a:	2b03      	cmp	r3, #3
 800746c:	d003      	beq.n	8007476 <USB_EPClearStall+0x9e>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	791b      	ldrb	r3, [r3, #4]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d10f      	bne.n	8007496 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	0151      	lsls	r1, r2, #5
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	440a      	add	r2, r1
 800748c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007494:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80074c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80074d8:	68f9      	ldr	r1, [r7, #12]
 80074da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074de:	4313      	orrs	r3, r2
 80074e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800750a:	f023 0303 	bic.w	r3, r3, #3
 800750e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800751e:	f023 0302 	bic.w	r3, r3, #2
 8007522:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007532:	b480      	push	{r7}
 8007534:	b085      	sub	sp, #20
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800754c:	f023 0303 	bic.w	r3, r3, #3
 8007550:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007560:	f043 0302 	orr.w	r3, r3, #2
 8007564:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4013      	ands	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800758c:	68fb      	ldr	r3, [r7, #12]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800759a:	b480      	push	{r7}
 800759c:	b085      	sub	sp, #20
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	0c1b      	lsrs	r3, r3, #16
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	4013      	ands	r3, r2
 80075f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	b29b      	uxth	r3, r3
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007612:	78fb      	ldrb	r3, [r7, #3]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	4013      	ands	r3, r2
 800762e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007630:	68bb      	ldr	r3, [r7, #8]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800763e:	b480      	push	{r7}
 8007640:	b087      	sub	sp, #28
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	460b      	mov	r3, r1
 8007648:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007660:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	fa22 f303 	lsr.w	r3, r2, r3
 800766e:	01db      	lsls	r3, r3, #7
 8007670:	b2db      	uxtb	r3, r3
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	4013      	ands	r3, r2
 800768a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800768c:	68bb      	ldr	r3, [r7, #8]
}
 800768e:	4618      	mov	r0, r3
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	f003 0301 	and.w	r3, r3, #1
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b085      	sub	sp, #20
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076d4:	f023 0307 	bic.w	r3, r3, #7
 80076d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	460b      	mov	r3, r1
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	333c      	adds	r3, #60	; 0x3c
 8007712:	3304      	adds	r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	4a26      	ldr	r2, [pc, #152]	; (80077b4 <USB_EP0_OutStart+0xb8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d90a      	bls.n	8007736 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800772c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007730:	d101      	bne.n	8007736 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	e037      	b.n	80077a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	461a      	mov	r2, r3
 800773e:	2300      	movs	r3, #0
 8007740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007764:	f043 0318 	orr.w	r3, r3, #24
 8007768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007778:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800777c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d10f      	bne.n	80077a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778a:	461a      	mov	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80077a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	4f54300a 	.word	0x4f54300a

080077b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80077d0:	d901      	bls.n	80077d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e01b      	b.n	800780e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	daf2      	bge.n	80077c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f043 0201 	orr.w	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80077fa:	d901      	bls.n	8007800 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e006      	b.n	800780e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b01      	cmp	r3, #1
 800780a:	d0f0      	beq.n	80077ee <USB_CoreReset+0x36>

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
	...

0800781c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007828:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800782c:	f003 f93e 	bl	800aaac <USBD_static_malloc>
 8007830:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d109      	bne.n	800784c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	32b0      	adds	r2, #176	; 0xb0
 8007842:	2100      	movs	r1, #0
 8007844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007848:	2302      	movs	r3, #2
 800784a:	e0d4      	b.n	80079f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800784c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007850:	2100      	movs	r1, #0
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f003 fab3 	bl	800adbe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	32b0      	adds	r2, #176	; 0xb0
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32b0      	adds	r2, #176	; 0xb0
 8007872:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	7c1b      	ldrb	r3, [r3, #16]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d138      	bne.n	80078f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007884:	4b5e      	ldr	r3, [pc, #376]	; (8007a00 <USBD_CDC_Init+0x1e4>)
 8007886:	7819      	ldrb	r1, [r3, #0]
 8007888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800788c:	2202      	movs	r2, #2
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f002 ff9b 	bl	800a7ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007894:	4b5a      	ldr	r3, [pc, #360]	; (8007a00 <USBD_CDC_Init+0x1e4>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	f003 020f 	and.w	r2, r3, #15
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	440b      	add	r3, r1
 80078a8:	3324      	adds	r3, #36	; 0x24
 80078aa:	2201      	movs	r2, #1
 80078ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078ae:	4b55      	ldr	r3, [pc, #340]	; (8007a04 <USBD_CDC_Init+0x1e8>)
 80078b0:	7819      	ldrb	r1, [r3, #0]
 80078b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b6:	2202      	movs	r2, #2
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f002 ff86 	bl	800a7ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078be:	4b51      	ldr	r3, [pc, #324]	; (8007a04 <USBD_CDC_Init+0x1e8>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f003 020f 	and.w	r2, r3, #15
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	440b      	add	r3, r1
 80078d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078d6:	2201      	movs	r2, #1
 80078d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078da:	4b4b      	ldr	r3, [pc, #300]	; (8007a08 <USBD_CDC_Init+0x1ec>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	f003 020f 	and.w	r2, r3, #15
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	3326      	adds	r3, #38	; 0x26
 80078f0:	2210      	movs	r2, #16
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	e035      	b.n	8007962 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078f6:	4b42      	ldr	r3, [pc, #264]	; (8007a00 <USBD_CDC_Init+0x1e4>)
 80078f8:	7819      	ldrb	r1, [r3, #0]
 80078fa:	2340      	movs	r3, #64	; 0x40
 80078fc:	2202      	movs	r2, #2
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f002 ff63 	bl	800a7ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007904:	4b3e      	ldr	r3, [pc, #248]	; (8007a00 <USBD_CDC_Init+0x1e4>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f003 020f 	and.w	r2, r3, #15
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	440b      	add	r3, r1
 8007918:	3324      	adds	r3, #36	; 0x24
 800791a:	2201      	movs	r2, #1
 800791c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800791e:	4b39      	ldr	r3, [pc, #228]	; (8007a04 <USBD_CDC_Init+0x1e8>)
 8007920:	7819      	ldrb	r1, [r3, #0]
 8007922:	2340      	movs	r3, #64	; 0x40
 8007924:	2202      	movs	r2, #2
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f002 ff4f 	bl	800a7ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800792c:	4b35      	ldr	r3, [pc, #212]	; (8007a04 <USBD_CDC_Init+0x1e8>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	f003 020f 	and.w	r2, r3, #15
 8007934:	6879      	ldr	r1, [r7, #4]
 8007936:	4613      	mov	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007944:	2201      	movs	r2, #1
 8007946:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007948:	4b2f      	ldr	r3, [pc, #188]	; (8007a08 <USBD_CDC_Init+0x1ec>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	f003 020f 	and.w	r2, r3, #15
 8007950:	6879      	ldr	r1, [r7, #4]
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	440b      	add	r3, r1
 800795c:	3326      	adds	r3, #38	; 0x26
 800795e:	2210      	movs	r2, #16
 8007960:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007962:	4b29      	ldr	r3, [pc, #164]	; (8007a08 <USBD_CDC_Init+0x1ec>)
 8007964:	7819      	ldrb	r1, [r3, #0]
 8007966:	2308      	movs	r3, #8
 8007968:	2203      	movs	r2, #3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f002 ff2d 	bl	800a7ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007970:	4b25      	ldr	r3, [pc, #148]	; (8007a08 <USBD_CDC_Init+0x1ec>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f003 020f 	and.w	r2, r3, #15
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	440b      	add	r3, r1
 8007984:	3324      	adds	r3, #36	; 0x24
 8007986:	2201      	movs	r2, #1
 8007988:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	33b0      	adds	r3, #176	; 0xb0
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80079c0:	2302      	movs	r3, #2
 80079c2:	e018      	b.n	80079f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7c1b      	ldrb	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079cc:	4b0d      	ldr	r3, [pc, #52]	; (8007a04 <USBD_CDC_Init+0x1e8>)
 80079ce:	7819      	ldrb	r1, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f002 ffe4 	bl	800a9a8 <USBD_LL_PrepareReceive>
 80079e0:	e008      	b.n	80079f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <USBD_CDC_Init+0x1e8>)
 80079e4:	7819      	ldrb	r1, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079ec:	2340      	movs	r3, #64	; 0x40
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f002 ffda 	bl	800a9a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000093 	.word	0x20000093
 8007a04:	20000094 	.word	0x20000094
 8007a08:	20000095 	.word	0x20000095

08007a0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007a18:	4b3a      	ldr	r3, [pc, #232]	; (8007b04 <USBD_CDC_DeInit+0xf8>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f002 fef9 	bl	800a816 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007a24:	4b37      	ldr	r3, [pc, #220]	; (8007b04 <USBD_CDC_DeInit+0xf8>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	f003 020f 	and.w	r2, r3, #15
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	440b      	add	r3, r1
 8007a38:	3324      	adds	r3, #36	; 0x24
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007a3e:	4b32      	ldr	r3, [pc, #200]	; (8007b08 <USBD_CDC_DeInit+0xfc>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f002 fee6 	bl	800a816 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a4a:	4b2f      	ldr	r3, [pc, #188]	; (8007b08 <USBD_CDC_DeInit+0xfc>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	f003 020f 	and.w	r2, r3, #15
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	440b      	add	r3, r1
 8007a5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a62:	2200      	movs	r2, #0
 8007a64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a66:	4b29      	ldr	r3, [pc, #164]	; (8007b0c <USBD_CDC_DeInit+0x100>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f002 fed2 	bl	800a816 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a72:	4b26      	ldr	r3, [pc, #152]	; (8007b0c <USBD_CDC_DeInit+0x100>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	f003 020f 	and.w	r2, r3, #15
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	3324      	adds	r3, #36	; 0x24
 8007a88:	2200      	movs	r2, #0
 8007a8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a8c:	4b1f      	ldr	r3, [pc, #124]	; (8007b0c <USBD_CDC_DeInit+0x100>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	3326      	adds	r3, #38	; 0x26
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	32b0      	adds	r2, #176	; 0xb0
 8007ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01f      	beq.n	8007af8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	33b0      	adds	r3, #176	; 0xb0
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	32b0      	adds	r2, #176	; 0xb0
 8007ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f002 fff4 	bl	800aac8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	32b0      	adds	r2, #176	; 0xb0
 8007aea:	2100      	movs	r1, #0
 8007aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000093 	.word	0x20000093
 8007b08:	20000094 	.word	0x20000094
 8007b0c:	20000095 	.word	0x20000095

08007b10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	32b0      	adds	r2, #176	; 0xb0
 8007b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d101      	bne.n	8007b40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e0bf      	b.n	8007cc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d050      	beq.n	8007bee <USBD_CDC_Setup+0xde>
 8007b4c:	2b20      	cmp	r3, #32
 8007b4e:	f040 80af 	bne.w	8007cb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	88db      	ldrh	r3, [r3, #6]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d03a      	beq.n	8007bd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	b25b      	sxtb	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	da1b      	bge.n	8007b9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	33b0      	adds	r3, #176	; 0xb0
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	88d2      	ldrh	r2, [r2, #6]
 8007b80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	88db      	ldrh	r3, [r3, #6]
 8007b86:	2b07      	cmp	r3, #7
 8007b88:	bf28      	it	cs
 8007b8a:	2307      	movcs	r3, #7
 8007b8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	89fa      	ldrh	r2, [r7, #14]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 fd7f 	bl	8009698 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b9a:	e090      	b.n	8007cbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	785a      	ldrb	r2, [r3, #1]
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	88db      	ldrh	r3, [r3, #6]
 8007baa:	2b3f      	cmp	r3, #63	; 0x3f
 8007bac:	d803      	bhi.n	8007bb6 <USBD_CDC_Setup+0xa6>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	88db      	ldrh	r3, [r3, #6]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	e000      	b.n	8007bb8 <USBD_CDC_Setup+0xa8>
 8007bb6:	2240      	movs	r2, #64	; 0x40
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007bbe:	6939      	ldr	r1, [r7, #16]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 fd91 	bl	80096f0 <USBD_CtlPrepareRx>
      break;
 8007bce:	e076      	b.n	8007cbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	33b0      	adds	r3, #176	; 0xb0
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	7850      	ldrb	r0, [r2, #1]
 8007be6:	2200      	movs	r2, #0
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	4798      	blx	r3
      break;
 8007bec:	e067      	b.n	8007cbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	785b      	ldrb	r3, [r3, #1]
 8007bf2:	2b0b      	cmp	r3, #11
 8007bf4:	d851      	bhi.n	8007c9a <USBD_CDC_Setup+0x18a>
 8007bf6:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <USBD_CDC_Setup+0xec>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c2d 	.word	0x08007c2d
 8007c00:	08007ca9 	.word	0x08007ca9
 8007c04:	08007c9b 	.word	0x08007c9b
 8007c08:	08007c9b 	.word	0x08007c9b
 8007c0c:	08007c9b 	.word	0x08007c9b
 8007c10:	08007c9b 	.word	0x08007c9b
 8007c14:	08007c9b 	.word	0x08007c9b
 8007c18:	08007c9b 	.word	0x08007c9b
 8007c1c:	08007c9b 	.word	0x08007c9b
 8007c20:	08007c9b 	.word	0x08007c9b
 8007c24:	08007c57 	.word	0x08007c57
 8007c28:	08007c81 	.word	0x08007c81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d107      	bne.n	8007c48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c38:	f107 030a 	add.w	r3, r7, #10
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 fd29 	bl	8009698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c46:	e032      	b.n	8007cae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fca7 	bl	800959e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c50:	2303      	movs	r3, #3
 8007c52:	75fb      	strb	r3, [r7, #23]
          break;
 8007c54:	e02b      	b.n	8007cae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d107      	bne.n	8007c72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c62:	f107 030d 	add.w	r3, r7, #13
 8007c66:	2201      	movs	r2, #1
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fd14 	bl	8009698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c70:	e01d      	b.n	8007cae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 fc92 	bl	800959e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c7e:	e016      	b.n	8007cae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d00f      	beq.n	8007cac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f001 fc85 	bl	800959e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c94:	2303      	movs	r3, #3
 8007c96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c98:	e008      	b.n	8007cac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f001 fc7e 	bl	800959e <USBD_CtlError>
          ret = USBD_FAIL;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ca6:	e002      	b.n	8007cae <USBD_CDC_Setup+0x19e>
          break;
 8007ca8:	bf00      	nop
 8007caa:	e008      	b.n	8007cbe <USBD_CDC_Setup+0x1ae>
          break;
 8007cac:	bf00      	nop
      }
      break;
 8007cae:	e006      	b.n	8007cbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fc73 	bl	800959e <USBD_CtlError>
      ret = USBD_FAIL;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	75fb      	strb	r3, [r7, #23]
      break;
 8007cbc:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	32b0      	adds	r2, #176	; 0xb0
 8007ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e065      	b.n	8007dbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	32b0      	adds	r2, #176	; 0xb0
 8007cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	f003 020f 	and.w	r2, r3, #15
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	3318      	adds	r3, #24
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d02f      	beq.n	8007d7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	f003 020f 	and.w	r2, r3, #15
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	3318      	adds	r3, #24
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	f003 010f 	and.w	r1, r3, #15
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	440b      	add	r3, r1
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4403      	add	r3, r0
 8007d44:	331c      	adds	r3, #28
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d112      	bne.n	8007d7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	f003 020f 	and.w	r2, r3, #15
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	440b      	add	r3, r1
 8007d68:	3318      	adds	r3, #24
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d6e:	78f9      	ldrb	r1, [r7, #3]
 8007d70:	2300      	movs	r3, #0
 8007d72:	2200      	movs	r2, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f002 fdf6 	bl	800a966 <USBD_LL_Transmit>
 8007d7a:	e01f      	b.n	8007dbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	33b0      	adds	r3, #176	; 0xb0
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d010      	beq.n	8007dbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	33b0      	adds	r3, #176	; 0xb0
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007db8:	78fa      	ldrb	r2, [r7, #3]
 8007dba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	32b0      	adds	r2, #176	; 0xb0
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	32b0      	adds	r2, #176	; 0xb0
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e01a      	b.n	8007e2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f002 fdf4 	bl	800a9ea <USBD_LL_GetRxDataSize>
 8007e02:	4602      	mov	r2, r0
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	33b0      	adds	r3, #176	; 0xb0
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e28:	4611      	mov	r1, r2
 8007e2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	32b0      	adds	r2, #176	; 0xb0
 8007e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e025      	b.n	8007ea4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	33b0      	adds	r3, #176	; 0xb0
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01a      	beq.n	8007ea2 <USBD_CDC_EP0_RxReady+0x6c>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e72:	2bff      	cmp	r3, #255	; 0xff
 8007e74:	d015      	beq.n	8007ea2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	33b0      	adds	r3, #176	; 0xb0
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e96:	b292      	uxth	r2, r2
 8007e98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	22ff      	movs	r2, #255	; 0xff
 8007e9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007eb4:	2182      	movs	r1, #130	; 0x82
 8007eb6:	4818      	ldr	r0, [pc, #96]	; (8007f18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007eb8:	f000 fd0f 	bl	80088da <USBD_GetEpDesc>
 8007ebc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	4815      	ldr	r0, [pc, #84]	; (8007f18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ec2:	f000 fd0a 	bl	80088da <USBD_GetEpDesc>
 8007ec6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ec8:	2181      	movs	r1, #129	; 0x81
 8007eca:	4813      	ldr	r0, [pc, #76]	; (8007f18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ecc:	f000 fd05 	bl	80088da <USBD_GetEpDesc>
 8007ed0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2210      	movs	r2, #16
 8007edc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d006      	beq.n	8007ef2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eec:	711a      	strb	r2, [r3, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d006      	beq.n	8007f06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f00:	711a      	strb	r2, [r3, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2243      	movs	r2, #67	; 0x43
 8007f0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f0c:	4b02      	ldr	r3, [pc, #8]	; (8007f18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20000050 	.word	0x20000050

08007f1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f24:	2182      	movs	r1, #130	; 0x82
 8007f26:	4818      	ldr	r0, [pc, #96]	; (8007f88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f28:	f000 fcd7 	bl	80088da <USBD_GetEpDesc>
 8007f2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f2e:	2101      	movs	r1, #1
 8007f30:	4815      	ldr	r0, [pc, #84]	; (8007f88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f32:	f000 fcd2 	bl	80088da <USBD_GetEpDesc>
 8007f36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f38:	2181      	movs	r1, #129	; 0x81
 8007f3a:	4813      	ldr	r0, [pc, #76]	; (8007f88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f3c:	f000 fccd 	bl	80088da <USBD_GetEpDesc>
 8007f40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2210      	movs	r2, #16
 8007f4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d006      	beq.n	8007f62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	2200      	movs	r2, #0
 8007f58:	711a      	strb	r2, [r3, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f042 0202 	orr.w	r2, r2, #2
 8007f60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d006      	beq.n	8007f76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	711a      	strb	r2, [r3, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f042 0202 	orr.w	r2, r2, #2
 8007f74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2243      	movs	r2, #67	; 0x43
 8007f7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000050 	.word	0x20000050

08007f8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f94:	2182      	movs	r1, #130	; 0x82
 8007f96:	4818      	ldr	r0, [pc, #96]	; (8007ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f98:	f000 fc9f 	bl	80088da <USBD_GetEpDesc>
 8007f9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	4815      	ldr	r0, [pc, #84]	; (8007ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fa2:	f000 fc9a 	bl	80088da <USBD_GetEpDesc>
 8007fa6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fa8:	2181      	movs	r1, #129	; 0x81
 8007faa:	4813      	ldr	r0, [pc, #76]	; (8007ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fac:	f000 fc95 	bl	80088da <USBD_GetEpDesc>
 8007fb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	2210      	movs	r2, #16
 8007fbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d006      	beq.n	8007fd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fcc:	711a      	strb	r2, [r3, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d006      	beq.n	8007fe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fe0:	711a      	strb	r2, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2243      	movs	r2, #67	; 0x43
 8007fea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fec:	4b02      	ldr	r3, [pc, #8]	; (8007ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000050 	.word	0x20000050

08007ffc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	220a      	movs	r2, #10
 8008008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	2000000c 	.word	0x2000000c

0800801c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800802c:	2303      	movs	r3, #3
 800802e:	e009      	b.n	8008044 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	33b0      	adds	r3, #176	; 0xb0
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	32b0      	adds	r2, #176	; 0xb0
 8008066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008072:	2303      	movs	r3, #3
 8008074:	e008      	b.n	8008088 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	371c      	adds	r7, #28
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	32b0      	adds	r2, #176	; 0xb0
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e004      	b.n	80080c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32b0      	adds	r2, #176	; 0xb0
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	32b0      	adds	r2, #176	; 0xb0
 80080f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e018      	b.n	8008130 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7c1b      	ldrb	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10a      	bne.n	800811c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008106:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <USBD_CDC_ReceivePacket+0x68>)
 8008108:	7819      	ldrb	r1, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f002 fc47 	bl	800a9a8 <USBD_LL_PrepareReceive>
 800811a:	e008      	b.n	800812e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800811c:	4b06      	ldr	r3, [pc, #24]	; (8008138 <USBD_CDC_ReceivePacket+0x68>)
 800811e:	7819      	ldrb	r1, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008126:	2340      	movs	r3, #64	; 0x40
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f002 fc3d 	bl	800a9a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	20000094 	.word	0x20000094

0800813c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008150:	2303      	movs	r3, #3
 8008152:	e01f      	b.n	8008194 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	79fa      	ldrb	r2, [r7, #7]
 8008186:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f002 fab7 	bl	800a6fc <USBD_LL_Init>
 800818e:	4603      	mov	r3, r0
 8008190:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e025      	b.n	8008200 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	32ae      	adds	r2, #174	; 0xae
 80081c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00f      	beq.n	80081f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	32ae      	adds	r2, #174	; 0xae
 80081da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e0:	f107 020e 	add.w	r2, r7, #14
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
 80081e8:	4602      	mov	r2, r0
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f002 fabf 	bl	800a794 <USBD_LL_Start>
 8008216:	4603      	mov	r3, r0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d009      	beq.n	8008264 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	4611      	mov	r1, r2
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	4798      	blx	r3
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	78fa      	ldrb	r2, [r7, #3]
 8008288:	4611      	mov	r1, r2
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 f938 	bl	800952a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082c8:	461a      	mov	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d01a      	beq.n	8008314 <USBD_LL_SetupStage+0x72>
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d822      	bhi.n	8008328 <USBD_LL_SetupStage+0x86>
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <USBD_LL_SetupStage+0x4a>
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d00a      	beq.n	8008300 <USBD_LL_SetupStage+0x5e>
 80082ea:	e01d      	b.n	8008328 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fb65 	bl	80089c4 <USBD_StdDevReq>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]
      break;
 80082fe:	e020      	b.n	8008342 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fbcd 	bl	8008aa8 <USBD_StdItfReq>
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]
      break;
 8008312:	e016      	b.n	8008342 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fc2f 	bl	8008b80 <USBD_StdEPReq>
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]
      break;
 8008326:	e00c      	b.n	8008342 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800832e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008332:	b2db      	uxtb	r3, r3
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f002 fa8c 	bl	800a854 <USBD_LL_StallEP>
 800833c:	4603      	mov	r3, r0
 800833e:	73fb      	strb	r3, [r7, #15]
      break;
 8008340:	bf00      	nop
  }

  return ret;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	460b      	mov	r3, r1
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800835e:	7afb      	ldrb	r3, [r7, #11]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d16e      	bne.n	8008442 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800836a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008372:	2b03      	cmp	r3, #3
 8008374:	f040 8098 	bne.w	80084a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	429a      	cmp	r2, r3
 8008382:	d913      	bls.n	80083ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	1ad2      	subs	r2, r2, r3
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	4293      	cmp	r3, r2
 800839c:	bf28      	it	cs
 800839e:	4613      	movcs	r3, r2
 80083a0:	461a      	mov	r2, r3
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f001 f9c0 	bl	800972a <USBD_CtlContinueRx>
 80083aa:	e07d      	b.n	80084a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083b2:	f003 031f 	and.w	r3, r3, #31
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d014      	beq.n	80083e4 <USBD_LL_DataOutStage+0x98>
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d81d      	bhi.n	80083fa <USBD_LL_DataOutStage+0xae>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <USBD_LL_DataOutStage+0x7c>
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d003      	beq.n	80083ce <USBD_LL_DataOutStage+0x82>
 80083c6:	e018      	b.n	80083fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	75bb      	strb	r3, [r7, #22]
            break;
 80083cc:	e018      	b.n	8008400 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	4619      	mov	r1, r3
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fa64 	bl	80088a6 <USBD_CoreFindIF>
 80083de:	4603      	mov	r3, r0
 80083e0:	75bb      	strb	r3, [r7, #22]
            break;
 80083e2:	e00d      	b.n	8008400 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	4619      	mov	r1, r3
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fa66 	bl	80088c0 <USBD_CoreFindEP>
 80083f4:	4603      	mov	r3, r0
 80083f6:	75bb      	strb	r3, [r7, #22]
            break;
 80083f8:	e002      	b.n	8008400 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75bb      	strb	r3, [r7, #22]
            break;
 80083fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008400:	7dbb      	ldrb	r3, [r7, #22]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d119      	bne.n	800843a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b03      	cmp	r3, #3
 8008410:	d113      	bne.n	800843a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008412:	7dba      	ldrb	r2, [r7, #22]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	32ae      	adds	r2, #174	; 0xae
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008422:	7dba      	ldrb	r2, [r7, #22]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800842a:	7dba      	ldrb	r2, [r7, #22]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	32ae      	adds	r2, #174	; 0xae
 8008430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f001 f986 	bl	800974c <USBD_CtlSendStatus>
 8008440:	e032      	b.n	80084a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008448:	b2db      	uxtb	r3, r3
 800844a:	4619      	mov	r1, r3
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 fa37 	bl	80088c0 <USBD_CoreFindEP>
 8008452:	4603      	mov	r3, r0
 8008454:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008456:	7dbb      	ldrb	r3, [r7, #22]
 8008458:	2bff      	cmp	r3, #255	; 0xff
 800845a:	d025      	beq.n	80084a8 <USBD_LL_DataOutStage+0x15c>
 800845c:	7dbb      	ldrb	r3, [r7, #22]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d122      	bne.n	80084a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b03      	cmp	r3, #3
 800846c:	d117      	bne.n	800849e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800846e:	7dba      	ldrb	r2, [r7, #22]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	32ae      	adds	r2, #174	; 0xae
 8008474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00f      	beq.n	800849e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800847e:	7dba      	ldrb	r2, [r7, #22]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008486:	7dba      	ldrb	r2, [r7, #22]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	32ae      	adds	r2, #174	; 0xae
 800848c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	7afa      	ldrb	r2, [r7, #11]
 8008494:	4611      	mov	r1, r2
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	4798      	blx	r3
 800849a:	4603      	mov	r3, r0
 800849c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800849e:	7dfb      	ldrb	r3, [r7, #23]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	e000      	b.n	80084aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	460b      	mov	r3, r1
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d16f      	bne.n	80085a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3314      	adds	r3, #20
 80084ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d15a      	bne.n	800858c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d914      	bls.n	800850c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	1ad2      	subs	r2, r2, r3
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	461a      	mov	r2, r3
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f001 f8e8 	bl	80096ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084fe:	2300      	movs	r3, #0
 8008500:	2200      	movs	r2, #0
 8008502:	2100      	movs	r1, #0
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f002 fa4f 	bl	800a9a8 <USBD_LL_PrepareReceive>
 800850a:	e03f      	b.n	800858c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	429a      	cmp	r2, r3
 8008516:	d11c      	bne.n	8008552 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008520:	429a      	cmp	r2, r3
 8008522:	d316      	bcc.n	8008552 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800852e:	429a      	cmp	r2, r3
 8008530:	d20f      	bcs.n	8008552 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008532:	2200      	movs	r2, #0
 8008534:	2100      	movs	r1, #0
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f001 f8c9 	bl	80096ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008544:	2300      	movs	r3, #0
 8008546:	2200      	movs	r2, #0
 8008548:	2100      	movs	r1, #0
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f002 fa2c 	bl	800a9a8 <USBD_LL_PrepareReceive>
 8008550:	e01c      	b.n	800858c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b03      	cmp	r3, #3
 800855c:	d10f      	bne.n	800857e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800857e:	2180      	movs	r1, #128	; 0x80
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f002 f967 	bl	800a854 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f001 f8f3 	bl	8009772 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d03a      	beq.n	800860c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fe42 	bl	8008220 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085a4:	e032      	b.n	800860c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80085a6:	7afb      	ldrb	r3, [r7, #11]
 80085a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	4619      	mov	r1, r3
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 f985 	bl	80088c0 <USBD_CoreFindEP>
 80085b6:	4603      	mov	r3, r0
 80085b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	2bff      	cmp	r3, #255	; 0xff
 80085be:	d025      	beq.n	800860c <USBD_LL_DataInStage+0x15a>
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d122      	bne.n	800860c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d11c      	bne.n	800860c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80085d2:	7dfa      	ldrb	r2, [r7, #23]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	32ae      	adds	r2, #174	; 0xae
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d014      	beq.n	800860c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80085e2:	7dfa      	ldrb	r2, [r7, #23]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80085ea:	7dfa      	ldrb	r2, [r7, #23]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	32ae      	adds	r2, #174	; 0xae
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	7afa      	ldrb	r2, [r7, #11]
 80085f8:	4611      	mov	r1, r2
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	4798      	blx	r3
 80085fe:	4603      	mov	r3, r0
 8008600:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008602:	7dbb      	ldrb	r3, [r7, #22]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008608:	7dbb      	ldrb	r3, [r7, #22]
 800860a:	e000      	b.n	800860e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800864e:	2b00      	cmp	r3, #0
 8008650:	d014      	beq.n	800867c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00e      	beq.n	800867c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6852      	ldr	r2, [r2, #4]
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	4611      	mov	r1, r2
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008678:	2303      	movs	r3, #3
 800867a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800867c:	2340      	movs	r3, #64	; 0x40
 800867e:	2200      	movs	r2, #0
 8008680:	2100      	movs	r1, #0
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f002 f8a1 	bl	800a7ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2240      	movs	r2, #64	; 0x40
 8008694:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008698:	2340      	movs	r3, #64	; 0x40
 800869a:	2200      	movs	r2, #0
 800869c:	2180      	movs	r1, #128	; 0x80
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f002 f893 	bl	800a7ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2240      	movs	r2, #64	; 0x40
 80086ae:	621a      	str	r2, [r3, #32]

  return ret;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	78fa      	ldrb	r2, [r7, #3]
 80086ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d006      	beq.n	80086fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2204      	movs	r2, #4
 8008700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b04      	cmp	r3, #4
 8008724:	d106      	bne.n	8008734 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800872c:	b2da      	uxtb	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008750:	b2db      	uxtb	r3, r3
 8008752:	2b03      	cmp	r3, #3
 8008754:	d110      	bne.n	8008778 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00b      	beq.n	8008778 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	32ae      	adds	r2, #174	; 0xae
 8008798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e01c      	b.n	80087de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d115      	bne.n	80087dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	32ae      	adds	r2, #174	; 0xae
 80087ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	32ae      	adds	r2, #174	; 0xae
 80087ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	78fa      	ldrb	r2, [r7, #3]
 80087d6:	4611      	mov	r1, r2
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	32ae      	adds	r2, #174	; 0xae
 80087fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008804:	2303      	movs	r3, #3
 8008806:	e01c      	b.n	8008842 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880e:	b2db      	uxtb	r3, r3
 8008810:	2b03      	cmp	r3, #3
 8008812:	d115      	bne.n	8008840 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	32ae      	adds	r2, #174	; 0xae
 800881e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00b      	beq.n	8008840 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	32ae      	adds	r2, #174	; 0xae
 8008832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	78fa      	ldrb	r2, [r7, #3]
 800883a:	4611      	mov	r1, r2
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008868:	2300      	movs	r3, #0
 800886a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00e      	beq.n	800889c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	6852      	ldr	r2, [r2, #4]
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	4611      	mov	r1, r2
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008898:	2303      	movs	r3, #3
 800889a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	460b      	mov	r3, r1
 80088b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b086      	sub	sp, #24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	885b      	ldrh	r3, [r3, #2]
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	429a      	cmp	r2, r3
 8008900:	d920      	bls.n	8008944 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800890a:	e013      	b.n	8008934 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800890c:	f107 030a 	add.w	r3, r7, #10
 8008910:	4619      	mov	r1, r3
 8008912:	6978      	ldr	r0, [r7, #20]
 8008914:	f000 f81b 	bl	800894e <USBD_GetNextDesc>
 8008918:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	785b      	ldrb	r3, [r3, #1]
 800891e:	2b05      	cmp	r3, #5
 8008920:	d108      	bne.n	8008934 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	789b      	ldrb	r3, [r3, #2]
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	429a      	cmp	r2, r3
 800892e:	d008      	beq.n	8008942 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008930:	2300      	movs	r3, #0
 8008932:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	885b      	ldrh	r3, [r3, #2]
 8008938:	b29a      	uxth	r2, r3
 800893a:	897b      	ldrh	r3, [r7, #10]
 800893c:	429a      	cmp	r2, r3
 800893e:	d8e5      	bhi.n	800890c <USBD_GetEpDesc+0x32>
 8008940:	e000      	b.n	8008944 <USBD_GetEpDesc+0x6a>
          break;
 8008942:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008944:	693b      	ldr	r3, [r7, #16]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800894e:	b480      	push	{r7}
 8008950:	b085      	sub	sp, #20
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	881a      	ldrh	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	b29b      	uxth	r3, r3
 8008966:	4413      	add	r3, r2
 8008968:	b29a      	uxth	r2, r3
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4413      	add	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800897a:	68fb      	ldr	r3, [r7, #12]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3714      	adds	r7, #20
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	3301      	adds	r3, #1
 800899e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089a6:	8a3b      	ldrh	r3, [r7, #16]
 80089a8:	021b      	lsls	r3, r3, #8
 80089aa:	b21a      	sxth	r2, r3
 80089ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	b21b      	sxth	r3, r3
 80089b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089b6:	89fb      	ldrh	r3, [r7, #14]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089da:	2b40      	cmp	r3, #64	; 0x40
 80089dc:	d005      	beq.n	80089ea <USBD_StdDevReq+0x26>
 80089de:	2b40      	cmp	r3, #64	; 0x40
 80089e0:	d857      	bhi.n	8008a92 <USBD_StdDevReq+0xce>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00f      	beq.n	8008a06 <USBD_StdDevReq+0x42>
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d153      	bne.n	8008a92 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	32ae      	adds	r2, #174	; 0xae
 80089f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	4798      	blx	r3
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]
      break;
 8008a04:	e04a      	b.n	8008a9c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	2b09      	cmp	r3, #9
 8008a0c:	d83b      	bhi.n	8008a86 <USBD_StdDevReq+0xc2>
 8008a0e:	a201      	add	r2, pc, #4	; (adr r2, 8008a14 <USBD_StdDevReq+0x50>)
 8008a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a14:	08008a69 	.word	0x08008a69
 8008a18:	08008a7d 	.word	0x08008a7d
 8008a1c:	08008a87 	.word	0x08008a87
 8008a20:	08008a73 	.word	0x08008a73
 8008a24:	08008a87 	.word	0x08008a87
 8008a28:	08008a47 	.word	0x08008a47
 8008a2c:	08008a3d 	.word	0x08008a3d
 8008a30:	08008a87 	.word	0x08008a87
 8008a34:	08008a5f 	.word	0x08008a5f
 8008a38:	08008a51 	.word	0x08008a51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fa3c 	bl	8008ebc <USBD_GetDescriptor>
          break;
 8008a44:	e024      	b.n	8008a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fbcb 	bl	80091e4 <USBD_SetAddress>
          break;
 8008a4e:	e01f      	b.n	8008a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc0a 	bl	800926c <USBD_SetConfig>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]
          break;
 8008a5c:	e018      	b.n	8008a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fcad 	bl	80093c0 <USBD_GetConfig>
          break;
 8008a66:	e013      	b.n	8008a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fcde 	bl	800942c <USBD_GetStatus>
          break;
 8008a70:	e00e      	b.n	8008a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fd0d 	bl	8009494 <USBD_SetFeature>
          break;
 8008a7a:	e009      	b.n	8008a90 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fd31 	bl	80094e6 <USBD_ClrFeature>
          break;
 8008a84:	e004      	b.n	8008a90 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fd88 	bl	800959e <USBD_CtlError>
          break;
 8008a8e:	bf00      	nop
      }
      break;
 8008a90:	e004      	b.n	8008a9c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fd82 	bl	800959e <USBD_CtlError>
      break;
 8008a9a:	bf00      	nop
  }

  return ret;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop

08008aa8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008abe:	2b40      	cmp	r3, #64	; 0x40
 8008ac0:	d005      	beq.n	8008ace <USBD_StdItfReq+0x26>
 8008ac2:	2b40      	cmp	r3, #64	; 0x40
 8008ac4:	d852      	bhi.n	8008b6c <USBD_StdItfReq+0xc4>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <USBD_StdItfReq+0x26>
 8008aca:	2b20      	cmp	r3, #32
 8008acc:	d14e      	bne.n	8008b6c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d840      	bhi.n	8008b5e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	889b      	ldrh	r3, [r3, #4]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d836      	bhi.n	8008b54 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	889b      	ldrh	r3, [r3, #4]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff fed9 	bl	80088a6 <USBD_CoreFindIF>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	2bff      	cmp	r3, #255	; 0xff
 8008afc:	d01d      	beq.n	8008b3a <USBD_StdItfReq+0x92>
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d11a      	bne.n	8008b3a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b04:	7bba      	ldrb	r2, [r7, #14]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	32ae      	adds	r2, #174	; 0xae
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00f      	beq.n	8008b34 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b14:	7bba      	ldrb	r2, [r7, #14]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b1c:	7bba      	ldrb	r2, [r7, #14]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32ae      	adds	r2, #174	; 0xae
 8008b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	4798      	blx	r3
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b32:	e004      	b.n	8008b3e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b34:	2303      	movs	r3, #3
 8008b36:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b38:	e001      	b.n	8008b3e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	88db      	ldrh	r3, [r3, #6]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d110      	bne.n	8008b68 <USBD_StdItfReq+0xc0>
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10d      	bne.n	8008b68 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fdfd 	bl	800974c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b52:	e009      	b.n	8008b68 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fd21 	bl	800959e <USBD_CtlError>
          break;
 8008b5c:	e004      	b.n	8008b68 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fd1c 	bl	800959e <USBD_CtlError>
          break;
 8008b66:	e000      	b.n	8008b6a <USBD_StdItfReq+0xc2>
          break;
 8008b68:	bf00      	nop
      }
      break;
 8008b6a:	e004      	b.n	8008b76 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fd15 	bl	800959e <USBD_CtlError>
      break;
 8008b74:	bf00      	nop
  }

  return ret;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	889b      	ldrh	r3, [r3, #4]
 8008b92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b9c:	2b40      	cmp	r3, #64	; 0x40
 8008b9e:	d007      	beq.n	8008bb0 <USBD_StdEPReq+0x30>
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	f200 817f 	bhi.w	8008ea4 <USBD_StdEPReq+0x324>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d02a      	beq.n	8008c00 <USBD_StdEPReq+0x80>
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	f040 817a 	bne.w	8008ea4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7ff fe83 	bl	80088c0 <USBD_CoreFindEP>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bbe:	7b7b      	ldrb	r3, [r7, #13]
 8008bc0:	2bff      	cmp	r3, #255	; 0xff
 8008bc2:	f000 8174 	beq.w	8008eae <USBD_StdEPReq+0x32e>
 8008bc6:	7b7b      	ldrb	r3, [r7, #13]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f040 8170 	bne.w	8008eae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008bce:	7b7a      	ldrb	r2, [r7, #13]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008bd6:	7b7a      	ldrb	r2, [r7, #13]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	32ae      	adds	r2, #174	; 0xae
 8008bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 8163 	beq.w	8008eae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008be8:	7b7a      	ldrb	r2, [r7, #13]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	32ae      	adds	r2, #174	; 0xae
 8008bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008bfe:	e156      	b.n	8008eae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	785b      	ldrb	r3, [r3, #1]
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d008      	beq.n	8008c1a <USBD_StdEPReq+0x9a>
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	f300 8145 	bgt.w	8008e98 <USBD_StdEPReq+0x318>
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 809b 	beq.w	8008d4a <USBD_StdEPReq+0x1ca>
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d03c      	beq.n	8008c92 <USBD_StdEPReq+0x112>
 8008c18:	e13e      	b.n	8008e98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d002      	beq.n	8008c2c <USBD_StdEPReq+0xac>
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d016      	beq.n	8008c58 <USBD_StdEPReq+0xd8>
 8008c2a:	e02c      	b.n	8008c86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00d      	beq.n	8008c4e <USBD_StdEPReq+0xce>
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	2b80      	cmp	r3, #128	; 0x80
 8008c36:	d00a      	beq.n	8008c4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 fe09 	bl	800a854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c42:	2180      	movs	r1, #128	; 0x80
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 fe05 	bl	800a854 <USBD_LL_StallEP>
 8008c4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c4c:	e020      	b.n	8008c90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fca4 	bl	800959e <USBD_CtlError>
              break;
 8008c56:	e01b      	b.n	8008c90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	885b      	ldrh	r3, [r3, #2]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10e      	bne.n	8008c7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00b      	beq.n	8008c7e <USBD_StdEPReq+0xfe>
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	2b80      	cmp	r3, #128	; 0x80
 8008c6a:	d008      	beq.n	8008c7e <USBD_StdEPReq+0xfe>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	88db      	ldrh	r3, [r3, #6]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d104      	bne.n	8008c7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 fdeb 	bl	800a854 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fd64 	bl	800974c <USBD_CtlSendStatus>

              break;
 8008c84:	e004      	b.n	8008c90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fc88 	bl	800959e <USBD_CtlError>
              break;
 8008c8e:	bf00      	nop
          }
          break;
 8008c90:	e107      	b.n	8008ea2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d002      	beq.n	8008ca4 <USBD_StdEPReq+0x124>
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d016      	beq.n	8008cd0 <USBD_StdEPReq+0x150>
 8008ca2:	e04b      	b.n	8008d3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ca4:	7bbb      	ldrb	r3, [r7, #14]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00d      	beq.n	8008cc6 <USBD_StdEPReq+0x146>
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	2b80      	cmp	r3, #128	; 0x80
 8008cae:	d00a      	beq.n	8008cc6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 fdcd 	bl	800a854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cba:	2180      	movs	r1, #128	; 0x80
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 fdc9 	bl	800a854 <USBD_LL_StallEP>
 8008cc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cc4:	e040      	b.n	8008d48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fc68 	bl	800959e <USBD_CtlError>
              break;
 8008cce:	e03b      	b.n	8008d48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	885b      	ldrh	r3, [r3, #2]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d136      	bne.n	8008d46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 fdd3 	bl	800a892 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fd2d 	bl	800974c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff fde2 	bl	80088c0 <USBD_CoreFindEP>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d00:	7b7b      	ldrb	r3, [r7, #13]
 8008d02:	2bff      	cmp	r3, #255	; 0xff
 8008d04:	d01f      	beq.n	8008d46 <USBD_StdEPReq+0x1c6>
 8008d06:	7b7b      	ldrb	r3, [r7, #13]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d11c      	bne.n	8008d46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d0c:	7b7a      	ldrb	r2, [r7, #13]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d14:	7b7a      	ldrb	r2, [r7, #13]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	32ae      	adds	r2, #174	; 0xae
 8008d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d010      	beq.n	8008d46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d24:	7b7a      	ldrb	r2, [r7, #13]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	32ae      	adds	r2, #174	; 0xae
 8008d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	4798      	blx	r3
 8008d36:	4603      	mov	r3, r0
 8008d38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d3a:	e004      	b.n	8008d46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fc2d 	bl	800959e <USBD_CtlError>
              break;
 8008d44:	e000      	b.n	8008d48 <USBD_StdEPReq+0x1c8>
              break;
 8008d46:	bf00      	nop
          }
          break;
 8008d48:	e0ab      	b.n	8008ea2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d002      	beq.n	8008d5c <USBD_StdEPReq+0x1dc>
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d032      	beq.n	8008dc0 <USBD_StdEPReq+0x240>
 8008d5a:	e097      	b.n	8008e8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <USBD_StdEPReq+0x1f2>
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	2b80      	cmp	r3, #128	; 0x80
 8008d66:	d004      	beq.n	8008d72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fc17 	bl	800959e <USBD_CtlError>
                break;
 8008d70:	e091      	b.n	8008e96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da0b      	bge.n	8008d92 <USBD_StdEPReq+0x212>
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	3310      	adds	r3, #16
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	3304      	adds	r3, #4
 8008d90:	e00b      	b.n	8008daa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d98:	4613      	mov	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	4413      	add	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4413      	add	r3, r2
 8008da8:	3304      	adds	r3, #4
 8008daa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2202      	movs	r2, #2
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fc6d 	bl	8009698 <USBD_CtlSendData>
              break;
 8008dbe:	e06a      	b.n	8008e96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	da11      	bge.n	8008dec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	f003 020f 	and.w	r2, r3, #15
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	440b      	add	r3, r1
 8008dda:	3324      	adds	r3, #36	; 0x24
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d117      	bne.n	8008e12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fbda 	bl	800959e <USBD_CtlError>
                  break;
 8008dea:	e054      	b.n	8008e96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	f003 020f 	and.w	r2, r3, #15
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	4613      	mov	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	440b      	add	r3, r1
 8008dfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fbc7 	bl	800959e <USBD_CtlError>
                  break;
 8008e10:	e041      	b.n	8008e96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	da0b      	bge.n	8008e32 <USBD_StdEPReq+0x2b2>
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e20:	4613      	mov	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	3310      	adds	r3, #16
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3304      	adds	r3, #4
 8008e30:	e00b      	b.n	8008e4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	4413      	add	r3, r2
 8008e48:	3304      	adds	r3, #4
 8008e4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <USBD_StdEPReq+0x2d8>
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	2b80      	cmp	r3, #128	; 0x80
 8008e56:	d103      	bne.n	8008e60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	e00e      	b.n	8008e7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f001 fd33 	bl	800a8d0 <USBD_LL_IsStallEP>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d003      	beq.n	8008e78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2201      	movs	r2, #1
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	e002      	b.n	8008e7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2202      	movs	r2, #2
 8008e82:	4619      	mov	r1, r3
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fc07 	bl	8009698 <USBD_CtlSendData>
              break;
 8008e8a:	e004      	b.n	8008e96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fb85 	bl	800959e <USBD_CtlError>
              break;
 8008e94:	bf00      	nop
          }
          break;
 8008e96:	e004      	b.n	8008ea2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fb7f 	bl	800959e <USBD_CtlError>
          break;
 8008ea0:	bf00      	nop
      }
      break;
 8008ea2:	e005      	b.n	8008eb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fb79 	bl	800959e <USBD_CtlError>
      break;
 8008eac:	e000      	b.n	8008eb0 <USBD_StdEPReq+0x330>
      break;
 8008eae:	bf00      	nop
  }

  return ret;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	885b      	ldrh	r3, [r3, #2]
 8008ed6:	0a1b      	lsrs	r3, r3, #8
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	3b01      	subs	r3, #1
 8008edc:	2b0e      	cmp	r3, #14
 8008ede:	f200 8152 	bhi.w	8009186 <USBD_GetDescriptor+0x2ca>
 8008ee2:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <USBD_GetDescriptor+0x2c>)
 8008ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee8:	08008f59 	.word	0x08008f59
 8008eec:	08008f71 	.word	0x08008f71
 8008ef0:	08008fb1 	.word	0x08008fb1
 8008ef4:	08009187 	.word	0x08009187
 8008ef8:	08009187 	.word	0x08009187
 8008efc:	08009127 	.word	0x08009127
 8008f00:	08009153 	.word	0x08009153
 8008f04:	08009187 	.word	0x08009187
 8008f08:	08009187 	.word	0x08009187
 8008f0c:	08009187 	.word	0x08009187
 8008f10:	08009187 	.word	0x08009187
 8008f14:	08009187 	.word	0x08009187
 8008f18:	08009187 	.word	0x08009187
 8008f1c:	08009187 	.word	0x08009187
 8008f20:	08008f25 	.word	0x08008f25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	7c12      	ldrb	r2, [r2, #16]
 8008f3c:	f107 0108 	add.w	r1, r7, #8
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
 8008f44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f46:	e126      	b.n	8009196 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fb27 	bl	800959e <USBD_CtlError>
        err++;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	3301      	adds	r3, #1
 8008f54:	72fb      	strb	r3, [r7, #11]
      break;
 8008f56:	e11e      	b.n	8009196 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	7c12      	ldrb	r2, [r2, #16]
 8008f64:	f107 0108 	add.w	r1, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
      break;
 8008f6e:	e112      	b.n	8009196 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7c1b      	ldrb	r3, [r3, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10d      	bne.n	8008f94 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f80:	f107 0208 	add.w	r2, r7, #8
 8008f84:	4610      	mov	r0, r2
 8008f86:	4798      	blx	r3
 8008f88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	2202      	movs	r2, #2
 8008f90:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f92:	e100      	b.n	8009196 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	f107 0208 	add.w	r2, r7, #8
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
 8008fa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	2202      	movs	r2, #2
 8008fac:	701a      	strb	r2, [r3, #0]
      break;
 8008fae:	e0f2      	b.n	8009196 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	885b      	ldrh	r3, [r3, #2]
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b05      	cmp	r3, #5
 8008fb8:	f200 80ac 	bhi.w	8009114 <USBD_GetDescriptor+0x258>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <USBD_GetDescriptor+0x108>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008fdd 	.word	0x08008fdd
 8008fc8:	08009011 	.word	0x08009011
 8008fcc:	08009045 	.word	0x08009045
 8008fd0:	08009079 	.word	0x08009079
 8008fd4:	080090ad 	.word	0x080090ad
 8008fd8:	080090e1 	.word	0x080090e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00b      	beq.n	8009000 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	7c12      	ldrb	r2, [r2, #16]
 8008ff4:	f107 0108 	add.w	r1, r7, #8
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4798      	blx	r3
 8008ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ffe:	e091      	b.n	8009124 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 facb 	bl	800959e <USBD_CtlError>
            err++;
 8009008:	7afb      	ldrb	r3, [r7, #11]
 800900a:	3301      	adds	r3, #1
 800900c:	72fb      	strb	r3, [r7, #11]
          break;
 800900e:	e089      	b.n	8009124 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00b      	beq.n	8009034 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	7c12      	ldrb	r2, [r2, #16]
 8009028:	f107 0108 	add.w	r1, r7, #8
 800902c:	4610      	mov	r0, r2
 800902e:	4798      	blx	r3
 8009030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009032:	e077      	b.n	8009124 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fab1 	bl	800959e <USBD_CtlError>
            err++;
 800903c:	7afb      	ldrb	r3, [r7, #11]
 800903e:	3301      	adds	r3, #1
 8009040:	72fb      	strb	r3, [r7, #11]
          break;
 8009042:	e06f      	b.n	8009124 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	7c12      	ldrb	r2, [r2, #16]
 800905c:	f107 0108 	add.w	r1, r7, #8
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
 8009064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009066:	e05d      	b.n	8009124 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fa97 	bl	800959e <USBD_CtlError>
            err++;
 8009070:	7afb      	ldrb	r3, [r7, #11]
 8009072:	3301      	adds	r3, #1
 8009074:	72fb      	strb	r3, [r7, #11]
          break;
 8009076:	e055      	b.n	8009124 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	7c12      	ldrb	r2, [r2, #16]
 8009090:	f107 0108 	add.w	r1, r7, #8
 8009094:	4610      	mov	r0, r2
 8009096:	4798      	blx	r3
 8009098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800909a:	e043      	b.n	8009124 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa7d 	bl	800959e <USBD_CtlError>
            err++;
 80090a4:	7afb      	ldrb	r3, [r7, #11]
 80090a6:	3301      	adds	r3, #1
 80090a8:	72fb      	strb	r3, [r7, #11]
          break;
 80090aa:	e03b      	b.n	8009124 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00b      	beq.n	80090d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	7c12      	ldrb	r2, [r2, #16]
 80090c4:	f107 0108 	add.w	r1, r7, #8
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
 80090cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ce:	e029      	b.n	8009124 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa63 	bl	800959e <USBD_CtlError>
            err++;
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	3301      	adds	r3, #1
 80090dc:	72fb      	strb	r3, [r7, #11]
          break;
 80090de:	e021      	b.n	8009124 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7c12      	ldrb	r2, [r2, #16]
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009102:	e00f      	b.n	8009124 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa49 	bl	800959e <USBD_CtlError>
            err++;
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	3301      	adds	r3, #1
 8009110:	72fb      	strb	r3, [r7, #11]
          break;
 8009112:	e007      	b.n	8009124 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa41 	bl	800959e <USBD_CtlError>
          err++;
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	3301      	adds	r3, #1
 8009120:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009122:	bf00      	nop
      }
      break;
 8009124:	e037      	b.n	8009196 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7c1b      	ldrb	r3, [r3, #16]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009136:	f107 0208 	add.w	r2, r7, #8
 800913a:	4610      	mov	r0, r2
 800913c:	4798      	blx	r3
 800913e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009140:	e029      	b.n	8009196 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa2a 	bl	800959e <USBD_CtlError>
        err++;
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	3301      	adds	r3, #1
 800914e:	72fb      	strb	r3, [r7, #11]
      break;
 8009150:	e021      	b.n	8009196 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	7c1b      	ldrb	r3, [r3, #16]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10d      	bne.n	8009176 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	f107 0208 	add.w	r2, r7, #8
 8009166:	4610      	mov	r0, r2
 8009168:	4798      	blx	r3
 800916a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3301      	adds	r3, #1
 8009170:	2207      	movs	r2, #7
 8009172:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009174:	e00f      	b.n	8009196 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa10 	bl	800959e <USBD_CtlError>
        err++;
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	3301      	adds	r3, #1
 8009182:	72fb      	strb	r3, [r7, #11]
      break;
 8009184:	e007      	b.n	8009196 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fa08 	bl	800959e <USBD_CtlError>
      err++;
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	3301      	adds	r3, #1
 8009192:	72fb      	strb	r3, [r7, #11]
      break;
 8009194:	bf00      	nop
  }

  if (err != 0U)
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d11e      	bne.n	80091da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	88db      	ldrh	r3, [r3, #6]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d016      	beq.n	80091d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80091a4:	893b      	ldrh	r3, [r7, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00e      	beq.n	80091c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	88da      	ldrh	r2, [r3, #6]
 80091ae:	893b      	ldrh	r3, [r7, #8]
 80091b0:	4293      	cmp	r3, r2
 80091b2:	bf28      	it	cs
 80091b4:	4613      	movcs	r3, r2
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091ba:	893b      	ldrh	r3, [r7, #8]
 80091bc:	461a      	mov	r2, r3
 80091be:	68f9      	ldr	r1, [r7, #12]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa69 	bl	8009698 <USBD_CtlSendData>
 80091c6:	e009      	b.n	80091dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f9e7 	bl	800959e <USBD_CtlError>
 80091d0:	e004      	b.n	80091dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 faba 	bl	800974c <USBD_CtlSendStatus>
 80091d8:	e000      	b.n	80091dc <USBD_GetDescriptor+0x320>
    return;
 80091da:	bf00      	nop
  }
}
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop

080091e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	889b      	ldrh	r3, [r3, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d131      	bne.n	800925a <USBD_SetAddress+0x76>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	88db      	ldrh	r3, [r3, #6]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d12d      	bne.n	800925a <USBD_SetAddress+0x76>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	885b      	ldrh	r3, [r3, #2]
 8009202:	2b7f      	cmp	r3, #127	; 0x7f
 8009204:	d829      	bhi.n	800925a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	885b      	ldrh	r3, [r3, #2]
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009210:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b03      	cmp	r3, #3
 800921c:	d104      	bne.n	8009228 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f9bc 	bl	800959e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009226:	e01d      	b.n	8009264 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	7bfa      	ldrb	r2, [r7, #15]
 800922c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 fb77 	bl	800a928 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fa86 	bl	800974c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d004      	beq.n	8009250 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2202      	movs	r2, #2
 800924a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924e:	e009      	b.n	8009264 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009258:	e004      	b.n	8009264 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f99e 	bl	800959e <USBD_CtlError>
  }
}
 8009262:	bf00      	nop
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	885b      	ldrh	r3, [r3, #2]
 800927e:	b2da      	uxtb	r2, r3
 8009280:	4b4e      	ldr	r3, [pc, #312]	; (80093bc <USBD_SetConfig+0x150>)
 8009282:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009284:	4b4d      	ldr	r3, [pc, #308]	; (80093bc <USBD_SetConfig+0x150>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d905      	bls.n	8009298 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f985 	bl	800959e <USBD_CtlError>
    return USBD_FAIL;
 8009294:	2303      	movs	r3, #3
 8009296:	e08c      	b.n	80093b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d002      	beq.n	80092aa <USBD_SetConfig+0x3e>
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d029      	beq.n	80092fc <USBD_SetConfig+0x90>
 80092a8:	e075      	b.n	8009396 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092aa:	4b44      	ldr	r3, [pc, #272]	; (80093bc <USBD_SetConfig+0x150>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d020      	beq.n	80092f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80092b2:	4b42      	ldr	r3, [pc, #264]	; (80093bc <USBD_SetConfig+0x150>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092bc:	4b3f      	ldr	r3, [pc, #252]	; (80093bc <USBD_SetConfig+0x150>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7fe ffb7 	bl	8008236 <USBD_SetClassConfig>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d008      	beq.n	80092e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80092d2:	6839      	ldr	r1, [r7, #0]
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f962 	bl	800959e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2202      	movs	r2, #2
 80092de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092e2:	e065      	b.n	80093b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fa31 	bl	800974c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2203      	movs	r2, #3
 80092ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092f2:	e05d      	b.n	80093b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fa29 	bl	800974c <USBD_CtlSendStatus>
      break;
 80092fa:	e059      	b.n	80093b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092fc:	4b2f      	ldr	r3, [pc, #188]	; (80093bc <USBD_SetConfig+0x150>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d112      	bne.n	800932a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800930c:	4b2b      	ldr	r3, [pc, #172]	; (80093bc <USBD_SetConfig+0x150>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009316:	4b29      	ldr	r3, [pc, #164]	; (80093bc <USBD_SetConfig+0x150>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	4619      	mov	r1, r3
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7fe ffa6 	bl	800826e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa12 	bl	800974c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009328:	e042      	b.n	80093b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800932a:	4b24      	ldr	r3, [pc, #144]	; (80093bc <USBD_SetConfig+0x150>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	429a      	cmp	r2, r3
 8009336:	d02a      	beq.n	800938e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	b2db      	uxtb	r3, r3
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7fe ff94 	bl	800826e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009346:	4b1d      	ldr	r3, [pc, #116]	; (80093bc <USBD_SetConfig+0x150>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009350:	4b1a      	ldr	r3, [pc, #104]	; (80093bc <USBD_SetConfig+0x150>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7fe ff6d 	bl	8008236 <USBD_SetClassConfig>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00f      	beq.n	8009386 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f918 	bl	800959e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	b2db      	uxtb	r3, r3
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fe ff79 	bl	800826e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009384:	e014      	b.n	80093b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f9e0 	bl	800974c <USBD_CtlSendStatus>
      break;
 800938c:	e010      	b.n	80093b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f9dc 	bl	800974c <USBD_CtlSendStatus>
      break;
 8009394:	e00c      	b.n	80093b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f900 	bl	800959e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800939e:	4b07      	ldr	r3, [pc, #28]	; (80093bc <USBD_SetConfig+0x150>)
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7fe ff62 	bl	800826e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80093aa:	2303      	movs	r3, #3
 80093ac:	73fb      	strb	r3, [r7, #15]
      break;
 80093ae:	bf00      	nop
  }

  return ret;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	200002c8 	.word	0x200002c8

080093c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	88db      	ldrh	r3, [r3, #6]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d004      	beq.n	80093dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8e2 	bl	800959e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093da:	e023      	b.n	8009424 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	dc02      	bgt.n	80093ee <USBD_GetConfig+0x2e>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dc03      	bgt.n	80093f4 <USBD_GetConfig+0x34>
 80093ec:	e015      	b.n	800941a <USBD_GetConfig+0x5a>
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d00b      	beq.n	800940a <USBD_GetConfig+0x4a>
 80093f2:	e012      	b.n	800941a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3308      	adds	r3, #8
 80093fe:	2201      	movs	r2, #1
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f948 	bl	8009698 <USBD_CtlSendData>
        break;
 8009408:	e00c      	b.n	8009424 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3304      	adds	r3, #4
 800940e:	2201      	movs	r2, #1
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f940 	bl	8009698 <USBD_CtlSendData>
        break;
 8009418:	e004      	b.n	8009424 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f8be 	bl	800959e <USBD_CtlError>
        break;
 8009422:	bf00      	nop
}
 8009424:	bf00      	nop
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800943c:	b2db      	uxtb	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	2b02      	cmp	r3, #2
 8009442:	d81e      	bhi.n	8009482 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	88db      	ldrh	r3, [r3, #6]
 8009448:	2b02      	cmp	r3, #2
 800944a:	d004      	beq.n	8009456 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f8a5 	bl	800959e <USBD_CtlError>
        break;
 8009454:	e01a      	b.n	800948c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009462:	2b00      	cmp	r3, #0
 8009464:	d005      	beq.n	8009472 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f043 0202 	orr.w	r2, r3, #2
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	330c      	adds	r3, #12
 8009476:	2202      	movs	r2, #2
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f90c 	bl	8009698 <USBD_CtlSendData>
      break;
 8009480:	e004      	b.n	800948c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f88a 	bl	800959e <USBD_CtlError>
      break;
 800948a:	bf00      	nop
  }
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d107      	bne.n	80094b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f94c 	bl	800974c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80094b4:	e013      	b.n	80094de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	885b      	ldrh	r3, [r3, #2]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d10b      	bne.n	80094d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	889b      	ldrh	r3, [r3, #4]
 80094c2:	0a1b      	lsrs	r3, r3, #8
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f93c 	bl	800974c <USBD_CtlSendStatus>
}
 80094d4:	e003      	b.n	80094de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f860 	bl	800959e <USBD_CtlError>
}
 80094de:	bf00      	nop
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	3b01      	subs	r3, #1
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d80b      	bhi.n	8009516 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	885b      	ldrh	r3, [r3, #2]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d10c      	bne.n	8009520 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f91c 	bl	800974c <USBD_CtlSendStatus>
      }
      break;
 8009514:	e004      	b.n	8009520 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f840 	bl	800959e <USBD_CtlError>
      break;
 800951e:	e000      	b.n	8009522 <USBD_ClrFeature+0x3c>
      break;
 8009520:	bf00      	nop
  }
}
 8009522:	bf00      	nop
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3301      	adds	r3, #1
 8009544:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3301      	adds	r3, #1
 8009552:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7ff fa17 	bl	8008988 <SWAPBYTE>
 800955a:	4603      	mov	r3, r0
 800955c:	461a      	mov	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	3301      	adds	r3, #1
 8009566:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3301      	adds	r3, #1
 800956c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff fa0a 	bl	8008988 <SWAPBYTE>
 8009574:	4603      	mov	r3, r0
 8009576:	461a      	mov	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7ff f9fd 	bl	8008988 <SWAPBYTE>
 800958e:	4603      	mov	r3, r0
 8009590:	461a      	mov	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	80da      	strh	r2, [r3, #6]
}
 8009596:	bf00      	nop
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b082      	sub	sp, #8
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095a8:	2180      	movs	r1, #128	; 0x80
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 f952 	bl	800a854 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095b0:	2100      	movs	r1, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 f94e 	bl	800a854 <USBD_LL_StallEP>
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d042      	beq.n	800965c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80095da:	6938      	ldr	r0, [r7, #16]
 80095dc:	f000 f842 	bl	8009664 <USBD_GetLen>
 80095e0:	4603      	mov	r3, r0
 80095e2:	3301      	adds	r3, #1
 80095e4:	005b      	lsls	r3, r3, #1
 80095e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ea:	d808      	bhi.n	80095fe <USBD_GetString+0x3e>
 80095ec:	6938      	ldr	r0, [r7, #16]
 80095ee:	f000 f839 	bl	8009664 <USBD_GetLen>
 80095f2:	4603      	mov	r3, r0
 80095f4:	3301      	adds	r3, #1
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	e001      	b.n	8009602 <USBD_GetString+0x42>
 80095fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	4413      	add	r3, r2
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	7812      	ldrb	r2, [r2, #0]
 8009610:	701a      	strb	r2, [r3, #0]
  idx++;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	3301      	adds	r3, #1
 8009616:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009618:	7dfb      	ldrb	r3, [r7, #23]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	4413      	add	r3, r2
 800961e:	2203      	movs	r2, #3
 8009620:	701a      	strb	r2, [r3, #0]
  idx++;
 8009622:	7dfb      	ldrb	r3, [r7, #23]
 8009624:	3301      	adds	r3, #1
 8009626:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009628:	e013      	b.n	8009652 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	4413      	add	r3, r2
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	7812      	ldrb	r2, [r2, #0]
 8009634:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	3301      	adds	r3, #1
 800963a:	613b      	str	r3, [r7, #16]
    idx++;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	3301      	adds	r3, #1
 8009640:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	4413      	add	r3, r2
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]
    idx++;
 800964c:	7dfb      	ldrb	r3, [r7, #23]
 800964e:	3301      	adds	r3, #1
 8009650:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e7      	bne.n	800962a <USBD_GetString+0x6a>
 800965a:	e000      	b.n	800965e <USBD_GetString+0x9e>
    return;
 800965c:	bf00      	nop
  }
}
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009674:	e005      	b.n	8009682 <USBD_GetLen+0x1e>
  {
    len++;
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	3301      	adds	r3, #1
 800967a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	3301      	adds	r3, #1
 8009680:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1f5      	bne.n	8009676 <USBD_GetLen+0x12>
  }

  return len;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3714      	adds	r7, #20
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2202      	movs	r2, #2
 80096a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	2100      	movs	r1, #0
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f001 f951 	bl	800a966 <USBD_LL_Transmit>

  return USBD_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	2100      	movs	r1, #0
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f001 f940 	bl	800a966 <USBD_LL_Transmit>

  return USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2203      	movs	r2, #3
 8009700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	2100      	movs	r1, #0
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f001 f944 	bl	800a9a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	2100      	movs	r1, #0
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f001 f933 	bl	800a9a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2204      	movs	r2, #4
 8009758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800975c:	2300      	movs	r3, #0
 800975e:	2200      	movs	r2, #0
 8009760:	2100      	movs	r1, #0
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 f8ff 	bl	800a966 <USBD_LL_Transmit>

  return USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2205      	movs	r2, #5
 800977e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009782:	2300      	movs	r3, #0
 8009784:	2200      	movs	r2, #0
 8009786:	2100      	movs	r1, #0
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 f90d 	bl	800a9a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <delayInit>:
#include <API_delay.h>
#include <stm32f4xx_hal.h>

void delayInit(delay_t* delay, tick_t duration){
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	assert(delay);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d105      	bne.n	80097b4 <delayInit+0x1c>
 80097a8:	4b0a      	ldr	r3, [pc, #40]	; (80097d4 <delayInit+0x3c>)
 80097aa:	4a0b      	ldr	r2, [pc, #44]	; (80097d8 <delayInit+0x40>)
 80097ac:	2105      	movs	r1, #5
 80097ae:	480b      	ldr	r0, [pc, #44]	; (80097dc <delayInit+0x44>)
 80097b0:	f001 f9c0 	bl	800ab34 <__assert_func>

	delay->startTime = HAL_GetTick();
 80097b4:	f7f7 fc02 	bl	8000fbc <HAL_GetTick>
 80097b8:	4602      	mov	r2, r0
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	609a      	str	r2, [r3, #8]
}
 80097ca:	bf00      	nop
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	0800bac8 	.word	0x0800bac8
 80097d8:	0800bcd4 	.word	0x0800bcd4
 80097dc:	0800bad0 	.word	0x0800bad0

080097e0 <delayRead>:

bool_t delayRead(delay_t* delay){
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
	assert(delay);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d105      	bne.n	80097fa <delayRead+0x1a>
 80097ee:	4b16      	ldr	r3, [pc, #88]	; (8009848 <delayRead+0x68>)
 80097f0:	4a16      	ldr	r2, [pc, #88]	; (800984c <delayRead+0x6c>)
 80097f2:	210d      	movs	r1, #13
 80097f4:	4816      	ldr	r0, [pc, #88]	; (8009850 <delayRead+0x70>)
 80097f6:	f001 f99d 	bl	800ab34 <__assert_func>

	tick_t Current_time = HAL_GetTick();
 80097fa:	f7f7 fbdf 	bl	8000fbc <HAL_GetTick>
 80097fe:	60b8      	str	r0, [r7, #8]
	bool_t Done = false;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]

	if(!delay->running){
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d106      	bne.n	800981a <delayRead+0x3a>
		delay->startTime = Current_time;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	609a      	str	r2, [r3, #8]
 8009818:	e011      	b.n	800983e <delayRead+0x5e>
	}else{
		// Done is TRUE when the duration has elapsed
		// Done is FALSE when theres time remaining
		Done = (Current_time - delay->startTime) >= delay->duration;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	1ad2      	subs	r2, r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	429a      	cmp	r2, r3
 8009828:	bf2c      	ite	cs
 800982a:	2301      	movcs	r3, #1
 800982c:	2300      	movcc	r3, #0
 800982e:	73fb      	strb	r3, [r7, #15]
		// If it's done, it should stop running
		delay->running = !Done;
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	f083 0301 	eor.w	r3, r3, #1
 8009836:	b2db      	uxtb	r3, r3
 8009838:	461a      	mov	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	609a      	str	r2, [r3, #8]
	}
	return Done;
 800983e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	0800bac8 	.word	0x0800bac8
 800984c:	0800bce0 	.word	0x0800bce0
 8009850:	0800bad0 	.word	0x0800bad0

08009854 <app_entry_point>:
 * @brief Entry point for the application.
 *
 * This function implements the main loop of the state machine.
 */
void app_entry_point(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
    application_state = INITIALIZING;
 8009858:	4b15      	ldr	r3, [pc, #84]	; (80098b0 <app_entry_point+0x5c>)
 800985a:	2200      	movs	r2, #0
 800985c:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (application_state) {
 800985e:	4b14      	ldr	r3, [pc, #80]	; (80098b0 <app_entry_point+0x5c>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2b05      	cmp	r3, #5
 8009864:	d820      	bhi.n	80098a8 <app_entry_point+0x54>
 8009866:	a201      	add	r2, pc, #4	; (adr r2, 800986c <app_entry_point+0x18>)
 8009868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986c:	08009885 	.word	0x08009885
 8009870:	0800988b 	.word	0x0800988b
 8009874:	08009891 	.word	0x08009891
 8009878:	08009897 	.word	0x08009897
 800987c:	0800989d 	.word	0x0800989d
 8009880:	080098a3 	.word	0x080098a3
            case INITIALIZING:
                on_initializing();
 8009884:	f000 f816 	bl	80098b4 <on_initializing>
                break;
 8009888:	e011      	b.n	80098ae <app_entry_point+0x5a>
            case IDLE:
                on_idle();
 800988a:	f000 f829 	bl	80098e0 <on_idle>
                break;
 800988e:	e00e      	b.n	80098ae <app_entry_point+0x5a>
            case MONITORING:
                on_monitoring();
 8009890:	f000 f846 	bl	8009920 <on_monitoring>
                break;
 8009894:	e00b      	b.n	80098ae <app_entry_point+0x5a>
            case LOGGING:
                on_logging();
 8009896:	f000 f84b 	bl	8009930 <on_logging>
                break;
 800989a:	e008      	b.n	80098ae <app_entry_point+0x5a>
            case USB_COMMAND:
                on_usb_command();
 800989c:	f000 f854 	bl	8009948 <on_usb_command>
                break;
 80098a0:	e005      	b.n	80098ae <app_entry_point+0x5a>
            case SECURITY:
                on_security();
 80098a2:	f000 f88b 	bl	80099bc <on_security>
                break;
 80098a6:	e002      	b.n	80098ae <app_entry_point+0x5a>
            case APP_ERROR:
            default:
                on_app_error();
 80098a8:	f000 f8f8 	bl	8009a9c <on_app_error>
                break;
 80098ac:	bf00      	nop
        switch (application_state) {
 80098ae:	e7d6      	b.n	800985e <app_entry_point+0xa>
 80098b0:	200002c9 	.word	0x200002c9

080098b4 <on_initializing>:
 *
 * Initializes all necessary modules and peripherals (e.g., button, mic, OLED, SD, USB).
 * After the initialization completes, transitions to IDLE state.
 */
static void on_initializing(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
    // Initialize the button driver (debouncing state machine and HAL interface)
    button_init();
 80098b8:	f000 f8f4 	bl	8009aa4 <button_init>
    //oled_init();        // This calls port_oled_init() and clears the display
    //oled_clear();
    //oled_set_cursor(0, 0);
    //oled_print("App initialized");

    usb_cdc_init();
 80098bc:	f000 fa20 	bl	8009d00 <usb_cdc_init>

    debug_uart_init();
 80098c0:	f000 f9f4 	bl	8009cac <debug_uart_init>
    debug_uart_print("App initialized\r\n");
 80098c4:	4804      	ldr	r0, [pc, #16]	; (80098d8 <on_initializing+0x24>)
 80098c6:	f000 f9f9 	bl	8009cbc <debug_uart_print>
    rfid_init();
 80098ca:	f000 f987 	bl	8009bdc <rfid_init>
    // TODO: Initialize other drivers (mic, oled, SD, USB, etc.)

    // Once all peripheral initialization is completed, transition to IDLE.
    application_state = IDLE;
 80098ce:	4b03      	ldr	r3, [pc, #12]	; (80098dc <on_initializing+0x28>)
 80098d0:	2201      	movs	r2, #1
 80098d2:	701a      	strb	r2, [r3, #0]
}
 80098d4:	bf00      	nop
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	0800baf0 	.word	0x0800baf0
 80098dc:	200002c9 	.word	0x200002c9

080098e0 <on_idle>:
 * In the IDLE state, the system polls the button and listens for USB commands.
 * When a complete button press (press-release) is detected, the state transitions
 * to RECORDING.
 */
static void on_idle(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
    // Update the button's debounce logic
    button_update();
 80098e4:	f000 f8fe 	bl	8009ae4 <button_update>

    // Process any button event as needed (e.g., button press triggers recording)
    if (button_was_pressed()) {
 80098e8:	f000 f964 	bl	8009bb4 <button_was_pressed>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <on_idle+0x1a>
        // For demonstration, toggle LED to indicate button event.
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80098f2:	2120      	movs	r1, #32
 80098f4:	4807      	ldr	r0, [pc, #28]	; (8009914 <on_idle+0x34>)
 80098f6:	f7f8 f96c 	bl	8001bd2 <HAL_GPIO_TogglePin>
        // Optionally, transition to another state:
        // application_state = RECORDING;
    }

    // Poll USB CDC for a complete command
    if (usb_cdc_isCommandPending()) {
 80098fa:	f000 fa5b 	bl	8009db4 <usb_cdc_isCommandPending>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <on_idle+0x30>
    	debug_uart_print("COMMAND PENDING\r\n");
 8009904:	4804      	ldr	r0, [pc, #16]	; (8009918 <on_idle+0x38>)
 8009906:	f000 f9d9 	bl	8009cbc <debug_uart_print>
        // Transition to the USB_COMMAND state for processing the command.
        application_state = USB_COMMAND;
 800990a:	4b04      	ldr	r3, [pc, #16]	; (800991c <on_idle+0x3c>)
 800990c:	2204      	movs	r2, #4
 800990e:	701a      	strb	r2, [r3, #0]
    }
}
 8009910:	bf00      	nop
 8009912:	bd80      	pop	{r7, pc}
 8009914:	40020000 	.word	0x40020000
 8009918:	0800bb04 	.word	0x0800bb04
 800991c:	200002c9 	.word	0x200002c9

08009920 <on_monitoring>:
 *
 * After the recording is stopped (either by fixed duration or button press),
 * the state transitions to PROCESSING.
 */
static void on_monitoring(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
    // TODO: Start ADC conversion with DMA.
    // Record audio into a RAM buffer.

    // For demonstration, simulate recording done by transitioning immediately.
    //application_state = PROCESSING;
}
 8009924:	bf00      	nop
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
	...

08009930 <on_logging>:
 *
 * In this state, the recorded audio data (from RAM) is saved to the SD card using SPI + FatFs.
 * Once the data is saved, the system transitions back to the IDLE state.
 */
static void on_logging(void)
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
    // TODO: Implement saving of audio data to the SD card.

    // After processing, return to the IDLE state.
    application_state = IDLE;
 8009934:	4b03      	ldr	r3, [pc, #12]	; (8009944 <on_logging+0x14>)
 8009936:	2201      	movs	r2, #1
 8009938:	701a      	strb	r2, [r3, #0]
}
 800993a:	bf00      	nop
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	200002c9 	.word	0x200002c9

08009948 <on_usb_command>:
 * @brief Handles the USB_COMMAND state.
 *
 * Processes USB CDC commands (e.g., list files, send file, delete file).
 * After executing a command, the state transitions back to the IDLE state.
 */
void on_usb_command(void) {
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
    if (sec_request.pending) {
 800994c:	4b15      	ldr	r3, [pc, #84]	; (80099a4 <on_usb_command+0x5c>)
 800994e:	789b      	ldrb	r3, [r3, #2]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d125      	bne.n	80099a0 <on_usb_command+0x58>
        // Aún esperando resultado del estado SECURITY
        return;
    }

    // Si acabamos de volver de SECURITY
    if (sec_request.action != SECURITY_NONE) {
 8009954:	4b13      	ldr	r3, [pc, #76]	; (80099a4 <on_usb_command+0x5c>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d014      	beq.n	8009986 <on_usb_command+0x3e>
        if (sec_request.result) {
 800995c:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <on_usb_command+0x5c>)
 800995e:	785b      	ldrb	r3, [r3, #1]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d006      	beq.n	8009972 <on_usb_command+0x2a>
            debug_uart_print("RFID autorizado correctamente\r\n");
 8009964:	4810      	ldr	r0, [pc, #64]	; (80099a8 <on_usb_command+0x60>)
 8009966:	f000 f9a9 	bl	8009cbc <debug_uart_print>

            // Aquí harías el cambio de threshold superior
            // TODO: guardar nuevo threshold en EEPROM I2C
            // Por ahora solo simula
            debug_uart_print("Nuevo threshold aplicado (simulado)\r\n");
 800996a:	4810      	ldr	r0, [pc, #64]	; (80099ac <on_usb_command+0x64>)
 800996c:	f000 f9a6 	bl	8009cbc <debug_uart_print>
 8009970:	e002      	b.n	8009978 <on_usb_command+0x30>

        } else {
            debug_uart_print("RFID NO autorizado, cambio cancelado\r\n");
 8009972:	480f      	ldr	r0, [pc, #60]	; (80099b0 <on_usb_command+0x68>)
 8009974:	f000 f9a2 	bl	8009cbc <debug_uart_print>
        }

        // Limpiamos solicitud
        sec_request.action = SECURITY_NONE;
 8009978:	4b0a      	ldr	r3, [pc, #40]	; (80099a4 <on_usb_command+0x5c>)
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
        application_state = IDLE;
 800997e:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <on_usb_command+0x6c>)
 8009980:	2201      	movs	r2, #1
 8009982:	701a      	strb	r2, [r3, #0]
        return;
 8009984:	e00d      	b.n	80099a2 <on_usb_command+0x5a>
    }

    // Simulamos recibir un comando por CDC que dice: "cambiar threshold superior"
    // En ese caso, lanzamos autenticación RFID
    debug_uart_print("Requiere autenticación para cambiar threshold\r\n");
 8009986:	480c      	ldr	r0, [pc, #48]	; (80099b8 <on_usb_command+0x70>)
 8009988:	f000 f998 	bl	8009cbc <debug_uart_print>
    sec_request.action = SECURITY_AUTHENTICATE;
 800998c:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <on_usb_command+0x5c>)
 800998e:	2202      	movs	r2, #2
 8009990:	701a      	strb	r2, [r3, #0]
    sec_request.pending = true;
 8009992:	4b04      	ldr	r3, [pc, #16]	; (80099a4 <on_usb_command+0x5c>)
 8009994:	2201      	movs	r2, #1
 8009996:	709a      	strb	r2, [r3, #2]
    application_state = SECURITY;
 8009998:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <on_usb_command+0x6c>)
 800999a:	2205      	movs	r2, #5
 800999c:	701a      	strb	r2, [r3, #0]
 800999e:	e000      	b.n	80099a2 <on_usb_command+0x5a>
        return;
 80099a0:	bf00      	nop
}
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	200002cc 	.word	0x200002cc
 80099a8:	0800bb18 	.word	0x0800bb18
 80099ac:	0800bb38 	.word	0x0800bb38
 80099b0:	0800bb60 	.word	0x0800bb60
 80099b4:	200002c9 	.word	0x200002c9
 80099b8:	0800bb88 	.word	0x0800bb88

080099bc <on_security>:

void on_security(void) {
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
	    // Si no hay pedido pendiente, salir
	    if (!sec_request.pending) {
 80099c2:	4b2f      	ldr	r3, [pc, #188]	; (8009a80 <on_security+0xc4>)
 80099c4:	789b      	ldrb	r3, [r3, #2]
 80099c6:	f083 0301 	eor.w	r3, r3, #1
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <on_security+0x1c>
	    	application_state = IDLE;
 80099d0:	4b2c      	ldr	r3, [pc, #176]	; (8009a84 <on_security+0xc8>)
 80099d2:	2201      	movs	r2, #1
 80099d4:	701a      	strb	r2, [r3, #0]
 80099d6:	e050      	b.n	8009a7a <on_security+0xbe>
	        return;
	    }

	    // Buffer para UID leído
	    uint8_t uid[10];
	    size_t uid_len = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	603b      	str	r3, [r7, #0]

	    // Intentar leer tarjeta
	    if (!rfid_read_uid(uid, &uid_len)) {
 80099dc:	463a      	mov	r2, r7
 80099de:	1d3b      	adds	r3, r7, #4
 80099e0:	4611      	mov	r1, r2
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f901 	bl	8009bea <rfid_read_uid>
 80099e8:	4603      	mov	r3, r0
 80099ea:	f083 0301 	eor.w	r3, r3, #1
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d006      	beq.n	8009a02 <on_security+0x46>
	        debug_uart_print("Fallo al leer tarjeta RFID\r\n");
 80099f4:	4824      	ldr	r0, [pc, #144]	; (8009a88 <on_security+0xcc>)
 80099f6:	f000 f961 	bl	8009cbc <debug_uart_print>
	        sec_request.result = false;
 80099fa:	4b21      	ldr	r3, [pc, #132]	; (8009a80 <on_security+0xc4>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	705a      	strb	r2, [r3, #1]
 8009a00:	e032      	b.n	8009a68 <on_security+0xac>
	    } else {
	        switch (sec_request.action) {
 8009a02:	4b1f      	ldr	r3, [pc, #124]	; (8009a80 <on_security+0xc4>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d002      	beq.n	8009a10 <on_security+0x54>
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d016      	beq.n	8009a3c <on_security+0x80>
	                }
	                break;

	            default:
	                // Seguridad sin acción válida
	                break;
 8009a0e:	e02b      	b.n	8009a68 <on_security+0xac>
	                sec_request.result = rfid_register_card(uid, uid_len);
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	1d3b      	adds	r3, r7, #4
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 f8f6 	bl	8009c08 <rfid_register_card>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	461a      	mov	r2, r3
 8009a20:	4b17      	ldr	r3, [pc, #92]	; (8009a80 <on_security+0xc4>)
 8009a22:	705a      	strb	r2, [r3, #1]
	                if (sec_request.result) {
 8009a24:	4b16      	ldr	r3, [pc, #88]	; (8009a80 <on_security+0xc4>)
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <on_security+0x78>
	                    debug_uart_print("Tarjeta registrada con éxito\r\n");
 8009a2c:	4817      	ldr	r0, [pc, #92]	; (8009a8c <on_security+0xd0>)
 8009a2e:	f000 f945 	bl	8009cbc <debug_uart_print>
	                break;
 8009a32:	e019      	b.n	8009a68 <on_security+0xac>
	                    debug_uart_print("Error al registrar tarjeta (ya existe?)\r\n");
 8009a34:	4816      	ldr	r0, [pc, #88]	; (8009a90 <on_security+0xd4>)
 8009a36:	f000 f941 	bl	8009cbc <debug_uart_print>
	                break;
 8009a3a:	e015      	b.n	8009a68 <on_security+0xac>
	                sec_request.result = rfid_authenticate(uid, uid_len);
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	1d3b      	adds	r3, r7, #4
 8009a40:	4611      	mov	r1, r2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 f906 	bl	8009c54 <rfid_authenticate>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <on_security+0xc4>)
 8009a4e:	705a      	strb	r2, [r3, #1]
	                if (sec_request.result) {
 8009a50:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <on_security+0xc4>)
 8009a52:	785b      	ldrb	r3, [r3, #1]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <on_security+0xa4>
	                    debug_uart_print("RFID autorizado\r\n");
 8009a58:	480e      	ldr	r0, [pc, #56]	; (8009a94 <on_security+0xd8>)
 8009a5a:	f000 f92f 	bl	8009cbc <debug_uart_print>
	                break;
 8009a5e:	e002      	b.n	8009a66 <on_security+0xaa>
	                    debug_uart_print("RFID no autorizado\r\n");
 8009a60:	480d      	ldr	r0, [pc, #52]	; (8009a98 <on_security+0xdc>)
 8009a62:	f000 f92b 	bl	8009cbc <debug_uart_print>
	                break;
 8009a66:	bf00      	nop
	        }
	    }

	    // Limpiar solicitud y volver a IDLE
	    sec_request.pending = false;
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <on_security+0xc4>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	709a      	strb	r2, [r3, #2]
	    sec_request.action = SECURITY_NONE;
 8009a6e:	4b04      	ldr	r3, [pc, #16]	; (8009a80 <on_security+0xc4>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	701a      	strb	r2, [r3, #0]
	    application_state = IDLE;
 8009a74:	4b03      	ldr	r3, [pc, #12]	; (8009a84 <on_security+0xc8>)
 8009a76:	2201      	movs	r2, #1
 8009a78:	701a      	strb	r2, [r3, #0]
}
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	200002cc 	.word	0x200002cc
 8009a84:	200002c9 	.word	0x200002c9
 8009a88:	0800bbbc 	.word	0x0800bbbc
 8009a8c:	0800bbdc 	.word	0x0800bbdc
 8009a90:	0800bbfc 	.word	0x0800bbfc
 8009a94:	0800bc28 	.word	0x0800bc28
 8009a98:	0800bc3c 	.word	0x0800bc3c

08009a9c <on_app_error>:
 *
 * In case of errors (e.g., SD initialization failure, DMA error), the system enters
 * the ERROR state and can provide visual or debugging cues.
 */
static void on_app_error(void)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0
    // TODO: Implement error handling (e.g., blink an LED to indicate error).
    while (1) {
 8009aa0:	e7fe      	b.n	8009aa0 <on_app_error+0x4>
	...

08009aa4 <button_init>:
static bool_t button_flag;  ///< Flag set when a complete press-release is detected

/**
 * @brief Initializes the button state machine.
 */
void button_init(void) {
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
    current_state = BUTTON_UP;
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <button_init+0x1c>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	701a      	strb	r2, [r3, #0]
    delayInit(&delay_debounce, DEBOUNCE_PERIOD_MS);
 8009aae:	2128      	movs	r1, #40	; 0x28
 8009ab0:	4804      	ldr	r0, [pc, #16]	; (8009ac4 <button_init+0x20>)
 8009ab2:	f7ff fe71 	bl	8009798 <delayInit>
    button_flag = false;
 8009ab6:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <button_init+0x24>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	701a      	strb	r2, [r3, #0]
}
 8009abc:	bf00      	nop
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200002cf 	.word	0x200002cf
 8009ac4:	200002d0 	.word	0x200002d0
 8009ac8:	200002dc 	.word	0x200002dc

08009acc <on_button_released>:

/**
 * @brief Internal function called when a valid button release is confirmed.
 */
static void on_button_released(void) {
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
    button_flag = true;
 8009ad0:	4b03      	ldr	r3, [pc, #12]	; (8009ae0 <on_button_released+0x14>)
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	701a      	strb	r2, [r3, #0]
}
 8009ad6:	bf00      	nop
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	200002dc 	.word	0x200002dc

08009ae4 <button_update>:
 * @brief Updates the debouncing state machine.
 *
 * This function reads the button status using port_button_read() and updates the
 * state machine. It should be called in the main loop periodically.
 */
void button_update(void) {
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
    bool_t button_status = port_button_read();  // true = pressed; false = released
 8009aea:	f000 f96f 	bl	8009dcc <port_button_read>
 8009aee:	4603      	mov	r3, r0
 8009af0:	71fb      	strb	r3, [r7, #7]
    switch (current_state) {
 8009af2:	4b2e      	ldr	r3, [pc, #184]	; (8009bac <button_update+0xc8>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d84a      	bhi.n	8009b90 <button_update+0xac>
 8009afa:	a201      	add	r2, pc, #4	; (adr r2, 8009b00 <button_update+0x1c>)
 8009afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b00:	08009b11 	.word	0x08009b11
 8009b04:	08009b27 	.word	0x08009b27
 8009b08:	08009b49 	.word	0x08009b49
 8009b0c:	08009b65 	.word	0x08009b65
        case BUTTON_UP:
            if (button_status == true) {
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d03f      	beq.n	8009b96 <button_update+0xb2>
                current_state = BUTTON_FALLING;
 8009b16:	4b25      	ldr	r3, [pc, #148]	; (8009bac <button_update+0xc8>)
 8009b18:	2201      	movs	r2, #1
 8009b1a:	701a      	strb	r2, [r3, #0]
                delayInit(&delay_debounce, DEBOUNCE_PERIOD_MS);
 8009b1c:	2128      	movs	r1, #40	; 0x28
 8009b1e:	4824      	ldr	r0, [pc, #144]	; (8009bb0 <button_update+0xcc>)
 8009b20:	f7ff fe3a 	bl	8009798 <delayInit>
            }
            break;
 8009b24:	e037      	b.n	8009b96 <button_update+0xb2>
        case BUTTON_FALLING:
            if (delayRead(&delay_debounce)) {
 8009b26:	4822      	ldr	r0, [pc, #136]	; (8009bb0 <button_update+0xcc>)
 8009b28:	f7ff fe5a 	bl	80097e0 <delayRead>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d033      	beq.n	8009b9a <button_update+0xb6>
                if (button_status == true) {
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d003      	beq.n	8009b40 <button_update+0x5c>
                    current_state = BUTTON_DOWN;
 8009b38:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <button_update+0xc8>)
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	701a      	strb	r2, [r3, #0]
                } else {
                    current_state = BUTTON_UP;
                }
            }
            break;
 8009b3e:	e02c      	b.n	8009b9a <button_update+0xb6>
                    current_state = BUTTON_UP;
 8009b40:	4b1a      	ldr	r3, [pc, #104]	; (8009bac <button_update+0xc8>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
            break;
 8009b46:	e028      	b.n	8009b9a <button_update+0xb6>
        case BUTTON_DOWN:
            if (button_status == false) {
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	f083 0301 	eor.w	r3, r3, #1
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d024      	beq.n	8009b9e <button_update+0xba>
                current_state = BUTTON_RAISING;
 8009b54:	4b15      	ldr	r3, [pc, #84]	; (8009bac <button_update+0xc8>)
 8009b56:	2203      	movs	r2, #3
 8009b58:	701a      	strb	r2, [r3, #0]
                delayInit(&delay_debounce, DEBOUNCE_PERIOD_MS);
 8009b5a:	2128      	movs	r1, #40	; 0x28
 8009b5c:	4814      	ldr	r0, [pc, #80]	; (8009bb0 <button_update+0xcc>)
 8009b5e:	f7ff fe1b 	bl	8009798 <delayInit>
            }
            break;
 8009b62:	e01c      	b.n	8009b9e <button_update+0xba>
        case BUTTON_RAISING:
            if (delayRead(&delay_debounce)) {
 8009b64:	4812      	ldr	r0, [pc, #72]	; (8009bb0 <button_update+0xcc>)
 8009b66:	f7ff fe3b 	bl	80097e0 <delayRead>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d018      	beq.n	8009ba2 <button_update+0xbe>
                if (button_status == false) {
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	f083 0301 	eor.w	r3, r3, #1
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <button_update+0xa4>
                    on_button_released();
 8009b7c:	f7ff ffa6 	bl	8009acc <on_button_released>
                    current_state = BUTTON_UP;
 8009b80:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <button_update+0xc8>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
                } else {
                    current_state = BUTTON_DOWN;
                }
            }
            break;
 8009b86:	e00c      	b.n	8009ba2 <button_update+0xbe>
                    current_state = BUTTON_DOWN;
 8009b88:	4b08      	ldr	r3, [pc, #32]	; (8009bac <button_update+0xc8>)
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	701a      	strb	r2, [r3, #0]
            break;
 8009b8e:	e008      	b.n	8009ba2 <button_update+0xbe>
        default:
            button_init();
 8009b90:	f7ff ff88 	bl	8009aa4 <button_init>
            break;
 8009b94:	e006      	b.n	8009ba4 <button_update+0xc0>
            break;
 8009b96:	bf00      	nop
 8009b98:	e004      	b.n	8009ba4 <button_update+0xc0>
            break;
 8009b9a:	bf00      	nop
 8009b9c:	e002      	b.n	8009ba4 <button_update+0xc0>
            break;
 8009b9e:	bf00      	nop
 8009ba0:	e000      	b.n	8009ba4 <button_update+0xc0>
            break;
 8009ba2:	bf00      	nop
    }
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	200002cf 	.word	0x200002cf
 8009bb0:	200002d0 	.word	0x200002d0

08009bb4 <button_was_pressed>:
 *
 * Returns true once per complete cycle (press and release) and resets the flag.
 *
 * @return true if an event is detected; false otherwise.
 */
bool_t button_was_pressed(void) {
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
    if (button_flag) {
 8009bb8:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <button_was_pressed+0x24>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d004      	beq.n	8009bca <button_was_pressed+0x16>
        button_flag = false;
 8009bc0:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <button_was_pressed+0x24>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	701a      	strb	r2, [r3, #0]
        return true;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e000      	b.n	8009bcc <button_was_pressed+0x18>
    }
    return false;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	200002dc 	.word	0x200002dc

08009bdc <rfid_init>:
#include <string.h>

static uint8_t registered_cards[RFID_MAX_CARDS][RFID_UID_MAX_LEN];
static size_t  registered_count = 0;

bool rfid_init(void) {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
    return port_rfid_init();
 8009be0:	f000 f9f1 	bl	8009fc6 <port_rfid_init>
 8009be4:	4603      	mov	r3, r0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	bd80      	pop	{r7, pc}

08009bea <rfid_read_uid>:

bool rfid_read_uid(uint8_t *uid, size_t *uid_len) {
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b082      	sub	sp, #8
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
    return port_rfid_read_uid(uid, uid_len);
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f9f7 	bl	8009fea <port_rfid_read_uid>
 8009bfc:	4603      	mov	r3, r0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
	...

08009c08 <rfid_register_card>:

bool rfid_register_card(const uint8_t *uid, size_t uid_len) {
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
    if (uid_len > RFID_UID_MAX_LEN || registered_count >= RFID_MAX_CARDS) {
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b05      	cmp	r3, #5
 8009c16:	d803      	bhi.n	8009c20 <rfid_register_card+0x18>
 8009c18:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <rfid_register_card+0x44>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b09      	cmp	r3, #9
 8009c1e:	d901      	bls.n	8009c24 <rfid_register_card+0x1c>
        return false;
 8009c20:	2300      	movs	r3, #0
 8009c22:	e00f      	b.n	8009c44 <rfid_register_card+0x3c>
    }
    memcpy(registered_cards[registered_count++], uid, uid_len);
 8009c24:	4b09      	ldr	r3, [pc, #36]	; (8009c4c <rfid_register_card+0x44>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	1c53      	adds	r3, r2, #1
 8009c2a:	4908      	ldr	r1, [pc, #32]	; (8009c4c <rfid_register_card+0x44>)
 8009c2c:	600b      	str	r3, [r1, #0]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	4a06      	ldr	r2, [pc, #24]	; (8009c50 <rfid_register_card+0x48>)
 8009c36:	4413      	add	r3, r2
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	6879      	ldr	r1, [r7, #4]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 f93a 	bl	800aeb6 <memcpy>
    return true;
 8009c42:	2301      	movs	r3, #1
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20000314 	.word	0x20000314
 8009c50:	200002e0 	.word	0x200002e0

08009c54 <rfid_authenticate>:

bool rfid_authenticate(const uint8_t *uid, size_t uid_len) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < registered_count; i++) {
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
 8009c62:	e015      	b.n	8009c90 <rfid_authenticate+0x3c>
        if (uid_len == RFID_UID_MAX_LEN &&
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b05      	cmp	r3, #5
 8009c68:	d10f      	bne.n	8009c8a <rfid_authenticate+0x36>
            memcmp(registered_cards[i], uid, uid_len) == 0) {
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	4a0c      	ldr	r2, [pc, #48]	; (8009ca4 <rfid_authenticate+0x50>)
 8009c74:	4413      	add	r3, r2
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f001 f88f 	bl	800ad9e <memcmp>
 8009c80:	4603      	mov	r3, r0
        if (uid_len == RFID_UID_MAX_LEN &&
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <rfid_authenticate+0x36>
            return true;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e008      	b.n	8009c9c <rfid_authenticate+0x48>
    for (size_t i = 0; i < registered_count; i++) {
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	4b05      	ldr	r3, [pc, #20]	; (8009ca8 <rfid_authenticate+0x54>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d3e4      	bcc.n	8009c64 <rfid_authenticate+0x10>
        }
    }
    return false;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	200002e0 	.word	0x200002e0
 8009ca8:	20000314 	.word	0x20000314

08009cac <debug_uart_init>:

// External declaration of the UART handle (defined in main.c or generated by CubeMX)
extern UART_HandleTypeDef huart2;

void debug_uart_init(void)
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
    // In most cases, initialization for UART2 is handled by CubeMX.
    // This function exists for logical consistency.
}
 8009cb0:	bf00      	nop
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
	...

08009cbc <debug_uart_print>:

int debug_uart_print(const char* msg)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
    if (msg == 0) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d102      	bne.n	8009cd0 <debug_uart_print+0x14>
        return -1;
 8009cca:	f04f 33ff 	mov.w	r3, #4294967295
 8009cce:	e011      	b.n	8009cf4 <debug_uart_print+0x38>
    }

    uint16_t len = (uint16_t)strlen(msg);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7f6 fa9d 	bl	8000210 <strlen>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	81fb      	strh	r3, [r7, #14]
    // Transmit the string over UART2 with a timeout of 100 ms.
    if (HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100) == HAL_OK)
 8009cda:	89fa      	ldrh	r2, [r7, #14]
 8009cdc:	2364      	movs	r3, #100	; 0x64
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	4806      	ldr	r0, [pc, #24]	; (8009cfc <debug_uart_print+0x40>)
 8009ce2:	f7fb faa7 	bl	8005234 <HAL_UART_Transmit>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <debug_uart_print+0x34>
    {
        return 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	e001      	b.n	8009cf4 <debug_uart_print+0x38>
    }
    return -1;
 8009cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	20000278 	.word	0x20000278

08009d00 <usb_cdc_init>:
static char usb_cmd_buffer[USB_CMD_BUFFER_SIZE] = { 0 };

/**
 * @brief Initializes the USB CDC driver.
 */
void usb_cdc_init(void) {
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
	command_pending = false;
 8009d04:	4b04      	ldr	r3, [pc, #16]	; (8009d18 <usb_cdc_init+0x18>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	701a      	strb	r2, [r3, #0]
	memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 8009d0a:	2280      	movs	r2, #128	; 0x80
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	4803      	ldr	r0, [pc, #12]	; (8009d1c <usb_cdc_init+0x1c>)
 8009d10:	f001 f855 	bl	800adbe <memset>
}
 8009d14:	bf00      	nop
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	20000318 	.word	0x20000318
 8009d1c:	2000031c 	.word	0x2000031c

08009d20 <usb_cdc_receiveCallback>:
 * It copies data into the command buffer and marks a command as pending.
 *
 * @param Buf Pointer to the received data buffer.
 * @param Len Number of bytes received.
 */
void usb_cdc_receiveCallback(uint8_t *Buf, uint32_t Len) {
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
	debug_uart_print("usb_cdc_receiveCallback()\r\n");
 8009d2a:	481e      	ldr	r0, [pc, #120]	; (8009da4 <usb_cdc_receiveCallback+0x84>)
 8009d2c:	f7ff ffc6 	bl	8009cbc <debug_uart_print>
	debug_uart_print((char*) Buf);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff ffc3 	bl	8009cbc <debug_uart_print>
	debug_uart_print("\r\n");
 8009d36:	481c      	ldr	r0, [pc, #112]	; (8009da8 <usb_cdc_receiveCallback+0x88>)
 8009d38:	f7ff ffc0 	bl	8009cbc <debug_uart_print>
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 8009d3c:	e002      	b.n	8009d44 <usb_cdc_receiveCallback+0x24>
		Len--;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	603b      	str	r3, [r7, #0]
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00d      	beq.n	8009d66 <usb_cdc_receiveCallback+0x46>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	4413      	add	r3, r2
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b0d      	cmp	r3, #13
 8009d56:	d0f2      	beq.n	8009d3e <usb_cdc_receiveCallback+0x1e>
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	4413      	add	r3, r2
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	2b0a      	cmp	r3, #10
 8009d64:	d0eb      	beq.n	8009d3e <usb_cdc_receiveCallback+0x1e>
	}
	if (!command_pending && Len < USB_CMD_BUFFER_SIZE) {
 8009d66:	4b11      	ldr	r3, [pc, #68]	; (8009dac <usb_cdc_receiveCallback+0x8c>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f083 0301 	eor.w	r3, r3, #1
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d011      	beq.n	8009d9a <usb_cdc_receiveCallback+0x7a>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b7f      	cmp	r3, #127	; 0x7f
 8009d7a:	d80e      	bhi.n	8009d9a <usb_cdc_receiveCallback+0x7a>
		memcpy(usb_cmd_buffer, Buf, Len);
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	480b      	ldr	r0, [pc, #44]	; (8009db0 <usb_cdc_receiveCallback+0x90>)
 8009d82:	f001 f898 	bl	800aeb6 <memcpy>
		// Null-terminate the string safely.
		usb_cmd_buffer[Len < USB_CMD_BUFFER_SIZE ? Len : USB_CMD_BUFFER_SIZE - 1] =
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b7f      	cmp	r3, #127	; 0x7f
 8009d8a:	bf28      	it	cs
 8009d8c:	237f      	movcs	r3, #127	; 0x7f
 8009d8e:	4a08      	ldr	r2, [pc, #32]	; (8009db0 <usb_cdc_receiveCallback+0x90>)
 8009d90:	2100      	movs	r1, #0
 8009d92:	54d1      	strb	r1, [r2, r3]
				'\0';
		command_pending = true;
 8009d94:	4b05      	ldr	r3, [pc, #20]	; (8009dac <usb_cdc_receiveCallback+0x8c>)
 8009d96:	2201      	movs	r2, #1
 8009d98:	701a      	strb	r2, [r3, #0]
	}
	// If a command is already pending, new data is discarded.
}
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	0800bc54 	.word	0x0800bc54
 8009da8:	0800bc70 	.word	0x0800bc70
 8009dac:	20000318 	.word	0x20000318
 8009db0:	2000031c 	.word	0x2000031c

08009db4 <usb_cdc_isCommandPending>:
/**
 * @brief Checks if there is a pending USB CDC command.
 *
 * @return true if there is a pending command, false otherwise.
 */
bool usb_cdc_isCommandPending(void) {
 8009db4:	b480      	push	{r7}
 8009db6:	af00      	add	r7, sp, #0
	return command_pending;
 8009db8:	4b03      	ldr	r3, [pc, #12]	; (8009dc8 <usb_cdc_isCommandPending+0x14>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	b2db      	uxtb	r3, r3
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	20000318 	.word	0x20000318

08009dcc <port_button_read>:
 * Uses HAL_GPIO_ReadPin to retrieve the button state. If the button is active-low,
 * the logic is inverted so that the function returns true when the button is pressed.
 *
 * @return true if the button is pressed, false if released.
 */
bool_t port_button_read(void) {
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 8009dd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009dd6:	4807      	ldr	r0, [pc, #28]	; (8009df4 <port_button_read+0x28>)
 8009dd8:	f7f7 feca 	bl	8001b70 <HAL_GPIO_ReadPin>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	71fb      	strb	r3, [r7, #7]
    return BUTTON_PULL_LOW ? (pin_state == GPIO_PIN_RESET) : (pin_state == GPIO_PIN_SET);
 8009de0:	79fb      	ldrb	r3, [r7, #7]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	bf0c      	ite	eq
 8009de6:	2301      	moveq	r3, #1
 8009de8:	2300      	movne	r3, #0
 8009dea:	b2db      	uxtb	r3, r3
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	40020800 	.word	0x40020800

08009df8 <_cs_low>:
// PICC commands
#define PICC_ANTICOLL       0x93
#define PICC_ANTICOLL_NVB   0x20

// Helpers to select/deselect
static inline void _cs_low(void)  { HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN, GPIO_PIN_RESET); }
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2104      	movs	r1, #4
 8009e00:	4802      	ldr	r0, [pc, #8]	; (8009e0c <_cs_low+0x14>)
 8009e02:	f7f7 fecd 	bl	8001ba0 <HAL_GPIO_WritePin>
 8009e06:	bf00      	nop
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	40020c00 	.word	0x40020c00

08009e10 <_cs_high>:
static inline void _cs_high(void) { HAL_GPIO_WritePin(RFID_CS_PORT, RFID_CS_PIN, GPIO_PIN_SET); }
 8009e10:	b580      	push	{r7, lr}
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	2201      	movs	r2, #1
 8009e16:	2104      	movs	r1, #4
 8009e18:	4802      	ldr	r0, [pc, #8]	; (8009e24 <_cs_high+0x14>)
 8009e1a:	f7f7 fec1 	bl	8001ba0 <HAL_GPIO_WritePin>
 8009e1e:	bf00      	nop
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	40020c00 	.word	0x40020c00

08009e28 <port_rfid_write_reg>:

/**
 * @brief Write to a RC522 register over SPI.
 */
bool port_rfid_write_reg(uint8_t reg, uint8_t val) {
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	4603      	mov	r3, r0
 8009e30:	460a      	mov	r2, r1
 8009e32:	71fb      	strb	r3, [r7, #7]
 8009e34:	4613      	mov	r3, r2
 8009e36:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (reg << 1) & 0x7E;
 8009e38:	79fb      	ldrb	r3, [r7, #7]
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	73fb      	strb	r3, [r7, #15]
    _cs_low();
 8009e46:	f7ff ffd7 	bl	8009df8 <_cs_low>
    HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8009e4a:	f107 010f 	add.w	r1, r7, #15
 8009e4e:	2364      	movs	r3, #100	; 0x64
 8009e50:	2201      	movs	r2, #1
 8009e52:	4808      	ldr	r0, [pc, #32]	; (8009e74 <port_rfid_write_reg+0x4c>)
 8009e54:	f7fa fc55 	bl	8004702 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &val,  1, 100);
 8009e58:	1db9      	adds	r1, r7, #6
 8009e5a:	2364      	movs	r3, #100	; 0x64
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	4805      	ldr	r0, [pc, #20]	; (8009e74 <port_rfid_write_reg+0x4c>)
 8009e60:	f7fa fc4f 	bl	8004702 <HAL_SPI_Transmit>
    _cs_high();
 8009e64:	f7ff ffd4 	bl	8009e10 <_cs_high>
    return true;
 8009e68:	2301      	movs	r3, #1
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20000220 	.word	0x20000220

08009e78 <port_rfid_read_reg>:

/**
 * @brief Read from a RC522 register over SPI.
 */
uint8_t port_rfid_read_reg(uint8_t reg) {
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	71fb      	strb	r3, [r7, #7]
    uint8_t addr = ((reg << 1) & 0x7E) | 0x80;
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	b25b      	sxtb	r3, r3
 8009e88:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009e8c:	b25b      	sxtb	r3, r3
 8009e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e92:	b25b      	sxtb	r3, r3
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	73fb      	strb	r3, [r7, #15]
    uint8_t val  = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73bb      	strb	r3, [r7, #14]
    _cs_low();
 8009e9c:	f7ff ffac 	bl	8009df8 <_cs_low>
    HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8009ea0:	f107 010f 	add.w	r1, r7, #15
 8009ea4:	2364      	movs	r3, #100	; 0x64
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	4808      	ldr	r0, [pc, #32]	; (8009ecc <port_rfid_read_reg+0x54>)
 8009eaa:	f7fa fc2a 	bl	8004702 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &val,  1, 100);
 8009eae:	f107 010e 	add.w	r1, r7, #14
 8009eb2:	2364      	movs	r3, #100	; 0x64
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	4805      	ldr	r0, [pc, #20]	; (8009ecc <port_rfid_read_reg+0x54>)
 8009eb8:	f7fa fd67 	bl	800498a <HAL_SPI_Receive>
    _cs_high();
 8009ebc:	f7ff ffa8 	bl	8009e10 <_cs_high>
    return val;
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000220 	.word	0x20000220

08009ed0 <port_rfid_command>:

/**
 * @brief Send a command + data through RC522 FIFO and await a response.
 */
bool port_rfid_command(const uint8_t *cmd, size_t cmd_len, uint8_t *response, size_t *resp_len) {
 8009ed0:	b590      	push	{r4, r7, lr}
 8009ed2:	b089      	sub	sp, #36	; 0x24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
    // Idle & clear IRQ flags
    port_rfid_write_reg(REG_COMMAND, CMD_IDLE);
 8009ede:	2100      	movs	r1, #0
 8009ee0:	2001      	movs	r0, #1
 8009ee2:	f7ff ffa1 	bl	8009e28 <port_rfid_write_reg>
    port_rfid_write_reg(REG_COM_I_FLAG, 0x7F);
 8009ee6:	217f      	movs	r1, #127	; 0x7f
 8009ee8:	2004      	movs	r0, #4
 8009eea:	f7ff ff9d 	bl	8009e28 <port_rfid_write_reg>
    // Flush FIFO
    port_rfid_write_reg(REG_FIFO_LEVEL, 0x80);
 8009eee:	2180      	movs	r1, #128	; 0x80
 8009ef0:	200a      	movs	r0, #10
 8009ef2:	f7ff ff99 	bl	8009e28 <port_rfid_write_reg>

    // Write data into FIFO
    for (size_t i = 0; i < cmd_len; i++) {
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	e00a      	b.n	8009f12 <port_rfid_command+0x42>
        port_rfid_write_reg(REG_FIFO_DATA, cmd[i]);
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	4413      	add	r3, r2
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	4619      	mov	r1, r3
 8009f06:	2009      	movs	r0, #9
 8009f08:	f7ff ff8e 	bl	8009e28 <port_rfid_write_reg>
    for (size_t i = 0; i < cmd_len; i++) {
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	61fb      	str	r3, [r7, #28]
 8009f12:	69fa      	ldr	r2, [r7, #28]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d3f0      	bcc.n	8009efc <port_rfid_command+0x2c>
    }
    // Execute Transceive
    port_rfid_write_reg(REG_COMMAND, CMD_TRANSCEIVE);
 8009f1a:	210c      	movs	r1, #12
 8009f1c:	2001      	movs	r0, #1
 8009f1e:	f7ff ff83 	bl	8009e28 <port_rfid_write_reg>
    // Start sending
    port_rfid_write_reg(REG_BIT_FRAMING, 0x80);
 8009f22:	2180      	movs	r1, #128	; 0x80
 8009f24:	200d      	movs	r0, #13
 8009f26:	f7ff ff7f 	bl	8009e28 <port_rfid_write_reg>

    // Wait for completion (ComIrq bit 0x30)
    uint8_t irq;
    uint32_t deadline = HAL_GetTick() + 100;
 8009f2a:	f7f7 f847 	bl	8000fbc <HAL_GetTick>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	3364      	adds	r3, #100	; 0x64
 8009f32:	617b      	str	r3, [r7, #20]
    do {
        irq = port_rfid_read_reg(REG_COM_I_FLAG);
 8009f34:	2004      	movs	r0, #4
 8009f36:	f7ff ff9f 	bl	8009e78 <port_rfid_read_reg>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	74fb      	strb	r3, [r7, #19]
    } while (!(irq & 0x30) && HAL_GetTick() < deadline);
 8009f3e:	7cfb      	ldrb	r3, [r7, #19]
 8009f40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d105      	bne.n	8009f54 <port_rfid_command+0x84>
 8009f48:	f7f7 f838 	bl	8000fbc <HAL_GetTick>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d8ef      	bhi.n	8009f34 <port_rfid_command+0x64>

    // Stop sending
    port_rfid_write_reg(REG_BIT_FRAMING, 0x00);
 8009f54:	2100      	movs	r1, #0
 8009f56:	200d      	movs	r0, #13
 8009f58:	f7ff ff66 	bl	8009e28 <port_rfid_write_reg>

    // Check for errors
    uint8_t error = port_rfid_read_reg(REG_ERROR);
 8009f5c:	2006      	movs	r0, #6
 8009f5e:	f7ff ff8b 	bl	8009e78 <port_rfid_read_reg>
 8009f62:	4603      	mov	r3, r0
 8009f64:	74bb      	strb	r3, [r7, #18]
    if (error & 0x1B) {
 8009f66:	7cbb      	ldrb	r3, [r7, #18]
 8009f68:	f003 031b 	and.w	r3, r3, #27
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <port_rfid_command+0xa4>
        return false;
 8009f70:	2300      	movs	r3, #0
 8009f72:	e024      	b.n	8009fbe <port_rfid_command+0xee>
    }

    // Read how many bytes in FIFO
    uint8_t count = port_rfid_read_reg(REG_FIFO_LEVEL);
 8009f74:	200a      	movs	r0, #10
 8009f76:	f7ff ff7f 	bl	8009e78 <port_rfid_read_reg>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	747b      	strb	r3, [r7, #17]
    if (count == 0 || count > *resp_len) {
 8009f7e:	7c7b      	ldrb	r3, [r7, #17]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d004      	beq.n	8009f8e <port_rfid_command+0xbe>
 8009f84:	7c7a      	ldrb	r2, [r7, #17]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d901      	bls.n	8009f92 <port_rfid_command+0xc2>
        return false;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	e015      	b.n	8009fbe <port_rfid_command+0xee>
    }

    // Read out FIFO
    for (uint8_t i = 0; i < count; i++) {
 8009f92:	2300      	movs	r3, #0
 8009f94:	76fb      	strb	r3, [r7, #27]
 8009f96:	e00a      	b.n	8009fae <port_rfid_command+0xde>
        response[i] = port_rfid_read_reg(REG_FIFO_DATA);
 8009f98:	7efb      	ldrb	r3, [r7, #27]
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	18d4      	adds	r4, r2, r3
 8009f9e:	2009      	movs	r0, #9
 8009fa0:	f7ff ff6a 	bl	8009e78 <port_rfid_read_reg>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < count; i++) {
 8009fa8:	7efb      	ldrb	r3, [r7, #27]
 8009faa:	3301      	adds	r3, #1
 8009fac:	76fb      	strb	r3, [r7, #27]
 8009fae:	7efa      	ldrb	r2, [r7, #27]
 8009fb0:	7c7b      	ldrb	r3, [r7, #17]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d3f0      	bcc.n	8009f98 <port_rfid_command+0xc8>
    }
    *resp_len = count;
 8009fb6:	7c7a      	ldrb	r2, [r7, #17]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	601a      	str	r2, [r3, #0]
    return true;
 8009fbc:	2301      	movs	r3, #1
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3724      	adds	r7, #36	; 0x24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd90      	pop	{r4, r7, pc}

08009fc6 <port_rfid_init>:

/**
 * @brief Initialize the RC522 chip.
 */
bool port_rfid_init(void) {
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	af00      	add	r7, sp, #0
    // Ensure CS is high
    _cs_high();
 8009fca:	f7ff ff21 	bl	8009e10 <_cs_high>
    HAL_Delay(50);
 8009fce:	2032      	movs	r0, #50	; 0x32
 8009fd0:	f7f7 f800 	bl	8000fd4 <HAL_Delay>

    // Reset via command
    port_rfid_write_reg(REG_COMMAND, CMD_IDLE);
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	f7ff ff26 	bl	8009e28 <port_rfid_write_reg>
    // Turn on antenna: TxControlReg bit 0x03
    port_rfid_write_reg(REG_TX_CONTROL, 0x03);
 8009fdc:	2103      	movs	r1, #3
 8009fde:	2014      	movs	r0, #20
 8009fe0:	f7ff ff22 	bl	8009e28 <port_rfid_write_reg>
    return true;
 8009fe4:	2301      	movs	r3, #1
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <port_rfid_read_uid>:

/**
 * @brief Read one UID via anti‐collision cascade.
 */
bool port_rfid_read_uid(uint8_t *uid, size_t *uid_len) {
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b088      	sub	sp, #32
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	6039      	str	r1, [r7, #0]
    uint8_t cmd[] = { PICC_ANTICOLL, PICC_ANTICOLL_NVB };
 8009ff4:	f242 0393 	movw	r3, #8339	; 0x2093
 8009ff8:	83bb      	strh	r3, [r7, #28]
    uint8_t resp[10];
    size_t  resp_sz = sizeof(resp);
 8009ffa:	230a      	movs	r3, #10
 8009ffc:	60fb      	str	r3, [r7, #12]

    if (!port_rfid_command(cmd, sizeof(cmd), resp, &resp_sz)) {
 8009ffe:	f107 030c 	add.w	r3, r7, #12
 800a002:	f107 0210 	add.w	r2, r7, #16
 800a006:	f107 001c 	add.w	r0, r7, #28
 800a00a:	2102      	movs	r1, #2
 800a00c:	f7ff ff60 	bl	8009ed0 <port_rfid_command>
 800a010:	4603      	mov	r3, r0
 800a012:	f083 0301 	eor.w	r3, r3, #1
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <port_rfid_read_uid+0x36>
        return false;
 800a01c:	2300      	movs	r3, #0
 800a01e:	e00b      	b.n	800a038 <port_rfid_read_uid+0x4e>
    }
    // UID is first 5 bytes (4 UID + 1 BCC)
    if (resp_sz < 5) {
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b04      	cmp	r3, #4
 800a024:	d801      	bhi.n	800a02a <port_rfid_read_uid+0x40>
        return false;
 800a026:	2300      	movs	r3, #0
 800a028:	e006      	b.n	800a038 <port_rfid_read_uid+0x4e>
 800a02a:	693a      	ldr	r2, [r7, #16]
    }
    memcpy(uid, resp, 4);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	601a      	str	r2, [r3, #0]
    *uid_len = 4;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2204      	movs	r2, #4
 800a034:	601a      	str	r2, [r3, #0]
    return true;
 800a036:	2301      	movs	r3, #1
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3720      	adds	r7, #32
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <project_main>:
// === Public variable definitions ================================================================================= //
// === Private variable definitions ================================================================================ //
// === Private function implementation ============================================================================= //
// === Public function implementation ============================================================================== //

void project_main() { app_entry_point(); }
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
 800a044:	f7ff fc06 	bl	8009854 <app_entry_point>
 800a048:	bf00      	nop
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a050:	2200      	movs	r2, #0
 800a052:	4912      	ldr	r1, [pc, #72]	; (800a09c <MX_USB_DEVICE_Init+0x50>)
 800a054:	4812      	ldr	r0, [pc, #72]	; (800a0a0 <MX_USB_DEVICE_Init+0x54>)
 800a056:	f7fe f871 	bl	800813c <USBD_Init>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d001      	beq.n	800a064 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a060:	f7f6 fcb4 	bl	80009cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a064:	490f      	ldr	r1, [pc, #60]	; (800a0a4 <MX_USB_DEVICE_Init+0x58>)
 800a066:	480e      	ldr	r0, [pc, #56]	; (800a0a0 <MX_USB_DEVICE_Init+0x54>)
 800a068:	f7fe f898 	bl	800819c <USBD_RegisterClass>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a072:	f7f6 fcab 	bl	80009cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a076:	490c      	ldr	r1, [pc, #48]	; (800a0a8 <MX_USB_DEVICE_Init+0x5c>)
 800a078:	4809      	ldr	r0, [pc, #36]	; (800a0a0 <MX_USB_DEVICE_Init+0x54>)
 800a07a:	f7fd ffcf 	bl	800801c <USBD_CDC_RegisterInterface>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a084:	f7f6 fca2 	bl	80009cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a088:	4805      	ldr	r0, [pc, #20]	; (800a0a0 <MX_USB_DEVICE_Init+0x54>)
 800a08a:	f7fe f8bd 	bl	8008208 <USBD_Start>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a094:	f7f6 fc9a 	bl	80009cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a098:	bf00      	nop
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	200000ac 	.word	0x200000ac
 800a0a0:	2000039c 	.word	0x2000039c
 800a0a4:	20000018 	.word	0x20000018
 800a0a8:	20000098 	.word	0x20000098

0800a0ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4905      	ldr	r1, [pc, #20]	; (800a0c8 <CDC_Init_FS+0x1c>)
 800a0b4:	4805      	ldr	r0, [pc, #20]	; (800a0cc <CDC_Init_FS+0x20>)
 800a0b6:	f7fd ffcb 	bl	8008050 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a0ba:	4905      	ldr	r1, [pc, #20]	; (800a0d0 <CDC_Init_FS+0x24>)
 800a0bc:	4803      	ldr	r0, [pc, #12]	; (800a0cc <CDC_Init_FS+0x20>)
 800a0be:	f7fd ffe9 	bl	8008094 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a0c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20000e78 	.word	0x20000e78
 800a0cc:	2000039c 	.word	0x2000039c
 800a0d0:	20000678 	.word	0x20000678

0800a0d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a0d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	71fb      	strb	r3, [r7, #7]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	2b23      	cmp	r3, #35	; 0x23
 800a0f8:	d84a      	bhi.n	800a190 <CDC_Control_FS+0xac>
 800a0fa:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <CDC_Control_FS+0x1c>)
 800a0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a100:	0800a191 	.word	0x0800a191
 800a104:	0800a191 	.word	0x0800a191
 800a108:	0800a191 	.word	0x0800a191
 800a10c:	0800a191 	.word	0x0800a191
 800a110:	0800a191 	.word	0x0800a191
 800a114:	0800a191 	.word	0x0800a191
 800a118:	0800a191 	.word	0x0800a191
 800a11c:	0800a191 	.word	0x0800a191
 800a120:	0800a191 	.word	0x0800a191
 800a124:	0800a191 	.word	0x0800a191
 800a128:	0800a191 	.word	0x0800a191
 800a12c:	0800a191 	.word	0x0800a191
 800a130:	0800a191 	.word	0x0800a191
 800a134:	0800a191 	.word	0x0800a191
 800a138:	0800a191 	.word	0x0800a191
 800a13c:	0800a191 	.word	0x0800a191
 800a140:	0800a191 	.word	0x0800a191
 800a144:	0800a191 	.word	0x0800a191
 800a148:	0800a191 	.word	0x0800a191
 800a14c:	0800a191 	.word	0x0800a191
 800a150:	0800a191 	.word	0x0800a191
 800a154:	0800a191 	.word	0x0800a191
 800a158:	0800a191 	.word	0x0800a191
 800a15c:	0800a191 	.word	0x0800a191
 800a160:	0800a191 	.word	0x0800a191
 800a164:	0800a191 	.word	0x0800a191
 800a168:	0800a191 	.word	0x0800a191
 800a16c:	0800a191 	.word	0x0800a191
 800a170:	0800a191 	.word	0x0800a191
 800a174:	0800a191 	.word	0x0800a191
 800a178:	0800a191 	.word	0x0800a191
 800a17c:	0800a191 	.word	0x0800a191
 800a180:	0800a191 	.word	0x0800a191
 800a184:	0800a191 	.word	0x0800a191
 800a188:	0800a191 	.word	0x0800a191
 800a18c:	0800a191 	.word	0x0800a191
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a190:	bf00      	nop
  }

  return (USBD_OK);
 800a192:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > 0) {
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d005      	beq.n	800a1be <CDC_Receive_FS+0x1e>
	    usb_cdc_receiveCallback(Buf, *Len);
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff fdb1 	bl	8009d20 <usb_cdc_receiveCallback>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1be:	6879      	ldr	r1, [r7, #4]
 800a1c0:	4805      	ldr	r0, [pc, #20]	; (800a1d8 <CDC_Receive_FS+0x38>)
 800a1c2:	f7fd ff67 	bl	8008094 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1c6:	4804      	ldr	r0, [pc, #16]	; (800a1d8 <CDC_Receive_FS+0x38>)
 800a1c8:	f7fd ff82 	bl	80080d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a1cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	2000039c 	.word	0x2000039c

0800a1dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b087      	sub	sp, #28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a1ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
	...

0800a200 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	4603      	mov	r3, r0
 800a208:	6039      	str	r1, [r7, #0]
 800a20a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2212      	movs	r2, #18
 800a210:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a212:	4b03      	ldr	r3, [pc, #12]	; (800a220 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a214:	4618      	mov	r0, r3
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	200000cc 	.word	0x200000cc

0800a224 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	6039      	str	r1, [r7, #0]
 800a22e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2204      	movs	r2, #4
 800a234:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a236:	4b03      	ldr	r3, [pc, #12]	; (800a244 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a238:	4618      	mov	r0, r3
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	200000ec 	.word	0x200000ec

0800a248 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	6039      	str	r1, [r7, #0]
 800a252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d105      	bne.n	800a266 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	4907      	ldr	r1, [pc, #28]	; (800a27c <USBD_FS_ProductStrDescriptor+0x34>)
 800a25e:	4808      	ldr	r0, [pc, #32]	; (800a280 <USBD_FS_ProductStrDescriptor+0x38>)
 800a260:	f7ff f9ae 	bl	80095c0 <USBD_GetString>
 800a264:	e004      	b.n	800a270 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	4904      	ldr	r1, [pc, #16]	; (800a27c <USBD_FS_ProductStrDescriptor+0x34>)
 800a26a:	4805      	ldr	r0, [pc, #20]	; (800a280 <USBD_FS_ProductStrDescriptor+0x38>)
 800a26c:	f7ff f9a8 	bl	80095c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a270:	4b02      	ldr	r3, [pc, #8]	; (800a27c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20001678 	.word	0x20001678
 800a280:	0800bc74 	.word	0x0800bc74

0800a284 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	4904      	ldr	r1, [pc, #16]	; (800a2a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a294:	4804      	ldr	r0, [pc, #16]	; (800a2a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a296:	f7ff f993 	bl	80095c0 <USBD_GetString>
  return USBD_StrDesc;
 800a29a:	4b02      	ldr	r3, [pc, #8]	; (800a2a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	20001678 	.word	0x20001678
 800a2a8:	0800bc8c 	.word	0x0800bc8c

0800a2ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	6039      	str	r1, [r7, #0]
 800a2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	221a      	movs	r2, #26
 800a2bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a2be:	f000 f855 	bl	800a36c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a2c2:	4b02      	ldr	r3, [pc, #8]	; (800a2cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	200000f0 	.word	0x200000f0

0800a2d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	6039      	str	r1, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2dc:	79fb      	ldrb	r3, [r7, #7]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d105      	bne.n	800a2ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	4907      	ldr	r1, [pc, #28]	; (800a304 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2e6:	4808      	ldr	r0, [pc, #32]	; (800a308 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2e8:	f7ff f96a 	bl	80095c0 <USBD_GetString>
 800a2ec:	e004      	b.n	800a2f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	4904      	ldr	r1, [pc, #16]	; (800a304 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2f2:	4805      	ldr	r0, [pc, #20]	; (800a308 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2f4:	f7ff f964 	bl	80095c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f8:	4b02      	ldr	r3, [pc, #8]	; (800a304 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20001678 	.word	0x20001678
 800a308:	0800bca0 	.word	0x0800bca0

0800a30c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a318:	79fb      	ldrb	r3, [r7, #7]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d105      	bne.n	800a32a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	4907      	ldr	r1, [pc, #28]	; (800a340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a322:	4808      	ldr	r0, [pc, #32]	; (800a344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a324:	f7ff f94c 	bl	80095c0 <USBD_GetString>
 800a328:	e004      	b.n	800a334 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	4904      	ldr	r1, [pc, #16]	; (800a340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a32e:	4805      	ldr	r0, [pc, #20]	; (800a344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a330:	f7ff f946 	bl	80095c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a334:	4b02      	ldr	r3, [pc, #8]	; (800a340 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20001678 	.word	0x20001678
 800a344:	0800bcac 	.word	0x0800bcac

0800a348 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4603      	mov	r3, r0
 800a350:	6039      	str	r1, [r7, #0]
 800a352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	220c      	movs	r2, #12
 800a358:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a35a:	4b03      	ldr	r3, [pc, #12]	; (800a368 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	200000e0 	.word	0x200000e0

0800a36c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a372:	4b0f      	ldr	r3, [pc, #60]	; (800a3b0 <Get_SerialNum+0x44>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a378:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <Get_SerialNum+0x48>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a37e:	4b0e      	ldr	r3, [pc, #56]	; (800a3b8 <Get_SerialNum+0x4c>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4413      	add	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d009      	beq.n	800a3a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a392:	2208      	movs	r2, #8
 800a394:	4909      	ldr	r1, [pc, #36]	; (800a3bc <Get_SerialNum+0x50>)
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 f814 	bl	800a3c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a39c:	2204      	movs	r2, #4
 800a39e:	4908      	ldr	r1, [pc, #32]	; (800a3c0 <Get_SerialNum+0x54>)
 800a3a0:	68b8      	ldr	r0, [r7, #8]
 800a3a2:	f000 f80f 	bl	800a3c4 <IntToUnicode>
  }
}
 800a3a6:	bf00      	nop
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	1fff7a10 	.word	0x1fff7a10
 800a3b4:	1fff7a14 	.word	0x1fff7a14
 800a3b8:	1fff7a18 	.word	0x1fff7a18
 800a3bc:	200000f2 	.word	0x200000f2
 800a3c0:	20000102 	.word	0x20000102

0800a3c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	75fb      	strb	r3, [r7, #23]
 800a3da:	e027      	b.n	800a42c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	0f1b      	lsrs	r3, r3, #28
 800a3e0:	2b09      	cmp	r3, #9
 800a3e2:	d80b      	bhi.n	800a3fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	0f1b      	lsrs	r3, r3, #28
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	440b      	add	r3, r1
 800a3f4:	3230      	adds	r2, #48	; 0x30
 800a3f6:	b2d2      	uxtb	r2, r2
 800a3f8:	701a      	strb	r2, [r3, #0]
 800a3fa:	e00a      	b.n	800a412 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	0f1b      	lsrs	r3, r3, #28
 800a400:	b2da      	uxtb	r2, r3
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	4619      	mov	r1, r3
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	440b      	add	r3, r1
 800a40c:	3237      	adds	r2, #55	; 0x37
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	011b      	lsls	r3, r3, #4
 800a416:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a418:	7dfb      	ldrb	r3, [r7, #23]
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	3301      	adds	r3, #1
 800a41e:	68ba      	ldr	r2, [r7, #8]
 800a420:	4413      	add	r3, r2
 800a422:	2200      	movs	r2, #0
 800a424:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	3301      	adds	r3, #1
 800a42a:	75fb      	strb	r3, [r7, #23]
 800a42c:	7dfa      	ldrb	r2, [r7, #23]
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	429a      	cmp	r2, r3
 800a432:	d3d3      	bcc.n	800a3dc <IntToUnicode+0x18>
  }
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
	...

0800a444 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b0a0      	sub	sp, #128	; 0x80
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a44c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	605a      	str	r2, [r3, #4]
 800a456:	609a      	str	r2, [r3, #8]
 800a458:	60da      	str	r2, [r3, #12]
 800a45a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a45c:	f107 0310 	add.w	r3, r7, #16
 800a460:	225c      	movs	r2, #92	; 0x5c
 800a462:	2100      	movs	r1, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fcaa 	bl	800adbe <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a472:	d149      	bne.n	800a508 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a474:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a478:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a47a:	2300      	movs	r3, #0
 800a47c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a47e:	f107 0310 	add.w	r3, r7, #16
 800a482:	4618      	mov	r0, r3
 800a484:	f7f9 f8bc 	bl	8003600 <HAL_RCCEx_PeriphCLKConfig>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800a48e:	f7f6 fa9d 	bl	80009cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	4b1e      	ldr	r3, [pc, #120]	; (800a510 <HAL_PCD_MspInit+0xcc>)
 800a498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49a:	4a1d      	ldr	r2, [pc, #116]	; (800a510 <HAL_PCD_MspInit+0xcc>)
 800a49c:	f043 0301 	orr.w	r3, r3, #1
 800a4a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4a2:	4b1b      	ldr	r3, [pc, #108]	; (800a510 <HAL_PCD_MspInit+0xcc>)
 800a4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a4ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a4b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a4c0:	230a      	movs	r3, #10
 800a4c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	4812      	ldr	r0, [pc, #72]	; (800a514 <HAL_PCD_MspInit+0xd0>)
 800a4cc:	f7f7 f9bc 	bl	8001848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a4d0:	4b0f      	ldr	r3, [pc, #60]	; (800a510 <HAL_PCD_MspInit+0xcc>)
 800a4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d4:	4a0e      	ldr	r2, [pc, #56]	; (800a510 <HAL_PCD_MspInit+0xcc>)
 800a4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4da:	6353      	str	r3, [r2, #52]	; 0x34
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60bb      	str	r3, [r7, #8]
 800a4e0:	4b0b      	ldr	r3, [pc, #44]	; (800a510 <HAL_PCD_MspInit+0xcc>)
 800a4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4e4:	4a0a      	ldr	r2, [pc, #40]	; (800a510 <HAL_PCD_MspInit+0xcc>)
 800a4e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4ea:	6453      	str	r3, [r2, #68]	; 0x44
 800a4ec:	4b08      	ldr	r3, [pc, #32]	; (800a510 <HAL_PCD_MspInit+0xcc>)
 800a4ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4f4:	60bb      	str	r3, [r7, #8]
 800a4f6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	2043      	movs	r0, #67	; 0x43
 800a4fe:	f7f7 f8da 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a502:	2043      	movs	r0, #67	; 0x43
 800a504:	f7f7 f8f3 	bl	80016ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a508:	bf00      	nop
 800a50a:	3780      	adds	r7, #128	; 0x80
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	40023800 	.word	0x40023800
 800a514:	40020000 	.word	0x40020000

0800a518 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a52c:	4619      	mov	r1, r3
 800a52e:	4610      	mov	r0, r2
 800a530:	f7fd feb7 	bl	80082a2 <USBD_LL_SetupStage>
}
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	460b      	mov	r3, r1
 800a546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a54e:	78fa      	ldrb	r2, [r7, #3]
 800a550:	6879      	ldr	r1, [r7, #4]
 800a552:	4613      	mov	r3, r2
 800a554:	00db      	lsls	r3, r3, #3
 800a556:	4413      	add	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	440b      	add	r3, r1
 800a55c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	78fb      	ldrb	r3, [r7, #3]
 800a564:	4619      	mov	r1, r3
 800a566:	f7fd fef1 	bl	800834c <USBD_LL_DataOutStage>
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a584:	78fa      	ldrb	r2, [r7, #3]
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	4613      	mov	r3, r2
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	440b      	add	r3, r1
 800a592:	3320      	adds	r3, #32
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	78fb      	ldrb	r3, [r7, #3]
 800a598:	4619      	mov	r1, r3
 800a59a:	f7fd ff8a 	bl	80084b2 <USBD_LL_DataInStage>
}
 800a59e:	bf00      	nop
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe f8c4 	bl	8008742 <USBD_LL_SOF>
}
 800a5ba:	bf00      	nop
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	79db      	ldrb	r3, [r3, #7]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d102      	bne.n	800a5dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]
 800a5da:	e008      	b.n	800a5ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	79db      	ldrb	r3, [r3, #7]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d102      	bne.n	800a5ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	73fb      	strb	r3, [r7, #15]
 800a5e8:	e001      	b.n	800a5ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a5ea:	f7f6 f9ef 	bl	80009cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a5f4:	7bfa      	ldrb	r2, [r7, #15]
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe f85e 	bl	80086ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a604:	4618      	mov	r0, r3
 800a606:	f7fe f806 	bl	8008616 <USBD_LL_Reset>
}
 800a60a:	bf00      	nop
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
	...

0800a614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a622:	4618      	mov	r0, r3
 800a624:	f7fe f859 	bl	80086da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a63a:	f043 0301 	orr.w	r3, r3, #1
 800a63e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7adb      	ldrb	r3, [r3, #11]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d005      	beq.n	800a654 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a648:	4b04      	ldr	r3, [pc, #16]	; (800a65c <HAL_PCD_SuspendCallback+0x48>)
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	4a03      	ldr	r2, [pc, #12]	; (800a65c <HAL_PCD_SuspendCallback+0x48>)
 800a64e:	f043 0306 	orr.w	r3, r3, #6
 800a652:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	e000ed00 	.word	0xe000ed00

0800a660 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fe f84f 	bl	8008712 <USBD_LL_Resume>
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	460b      	mov	r3, r1
 800a686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a68e:	78fa      	ldrb	r2, [r7, #3]
 800a690:	4611      	mov	r1, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe f8a7 	bl	80087e6 <USBD_LL_IsoOUTIncomplete>
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a6b2:	78fa      	ldrb	r2, [r7, #3]
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fe f863 	bl	8008782 <USBD_LL_IsoINIncomplete>
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe f8b9 	bl	800884a <USBD_LL_DevConnected>
}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe f8b6 	bl	8008860 <USBD_LL_DevDisconnected>
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d13c      	bne.n	800a786 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a70c:	4a20      	ldr	r2, [pc, #128]	; (800a790 <USBD_LL_Init+0x94>)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a1e      	ldr	r2, [pc, #120]	; (800a790 <USBD_LL_Init+0x94>)
 800a718:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a71c:	4b1c      	ldr	r3, [pc, #112]	; (800a790 <USBD_LL_Init+0x94>)
 800a71e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a722:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a724:	4b1a      	ldr	r3, [pc, #104]	; (800a790 <USBD_LL_Init+0x94>)
 800a726:	2206      	movs	r2, #6
 800a728:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a72a:	4b19      	ldr	r3, [pc, #100]	; (800a790 <USBD_LL_Init+0x94>)
 800a72c:	2202      	movs	r2, #2
 800a72e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a730:	4b17      	ldr	r3, [pc, #92]	; (800a790 <USBD_LL_Init+0x94>)
 800a732:	2200      	movs	r2, #0
 800a734:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a736:	4b16      	ldr	r3, [pc, #88]	; (800a790 <USBD_LL_Init+0x94>)
 800a738:	2202      	movs	r2, #2
 800a73a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a73c:	4b14      	ldr	r3, [pc, #80]	; (800a790 <USBD_LL_Init+0x94>)
 800a73e:	2200      	movs	r2, #0
 800a740:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a742:	4b13      	ldr	r3, [pc, #76]	; (800a790 <USBD_LL_Init+0x94>)
 800a744:	2200      	movs	r2, #0
 800a746:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a748:	4b11      	ldr	r3, [pc, #68]	; (800a790 <USBD_LL_Init+0x94>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a74e:	4b10      	ldr	r3, [pc, #64]	; (800a790 <USBD_LL_Init+0x94>)
 800a750:	2200      	movs	r2, #0
 800a752:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a754:	4b0e      	ldr	r3, [pc, #56]	; (800a790 <USBD_LL_Init+0x94>)
 800a756:	2200      	movs	r2, #0
 800a758:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a75a:	480d      	ldr	r0, [pc, #52]	; (800a790 <USBD_LL_Init+0x94>)
 800a75c:	f7f7 fb98 	bl	8001e90 <HAL_PCD_Init>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a766:	f7f6 f931 	bl	80009cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a76a:	2180      	movs	r1, #128	; 0x80
 800a76c:	4808      	ldr	r0, [pc, #32]	; (800a790 <USBD_LL_Init+0x94>)
 800a76e:	f7f8 fdf8 	bl	8003362 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a772:	2240      	movs	r2, #64	; 0x40
 800a774:	2100      	movs	r1, #0
 800a776:	4806      	ldr	r0, [pc, #24]	; (800a790 <USBD_LL_Init+0x94>)
 800a778:	f7f8 fdac 	bl	80032d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a77c:	2280      	movs	r2, #128	; 0x80
 800a77e:	2101      	movs	r1, #1
 800a780:	4803      	ldr	r0, [pc, #12]	; (800a790 <USBD_LL_Init+0x94>)
 800a782:	f7f8 fda7 	bl	80032d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	20001878 	.word	0x20001878

0800a794 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7f7 fc86 	bl	80020bc <HAL_PCD_Start>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 f990 	bl	800aadc <USBD_Get_USB_Status>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b084      	sub	sp, #16
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	4608      	mov	r0, r1
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4603      	mov	r3, r0
 800a7da:	70fb      	strb	r3, [r7, #3]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70bb      	strb	r3, [r7, #2]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a7f2:	78bb      	ldrb	r3, [r7, #2]
 800a7f4:	883a      	ldrh	r2, [r7, #0]
 800a7f6:	78f9      	ldrb	r1, [r7, #3]
 800a7f8:	f7f8 f987 	bl	8002b0a <HAL_PCD_EP_Open>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 f96a 	bl	800aadc <USBD_Get_USB_Status>
 800a808:	4603      	mov	r3, r0
 800a80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	4611      	mov	r1, r2
 800a834:	4618      	mov	r0, r3
 800a836:	f7f8 f9d2 	bl	8002bde <HAL_PCD_EP_Close>
 800a83a:	4603      	mov	r3, r0
 800a83c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	4618      	mov	r0, r3
 800a842:	f000 f94b 	bl	800aadc <USBD_Get_USB_Status>
 800a846:	4603      	mov	r3, r0
 800a848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a86e:	78fa      	ldrb	r2, [r7, #3]
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f7f8 fa8a 	bl	8002d8c <HAL_PCD_EP_SetStall>
 800a878:	4603      	mov	r3, r0
 800a87a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 f92c 	bl	800aadc <USBD_Get_USB_Status>
 800a884:	4603      	mov	r3, r0
 800a886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a888:	7bbb      	ldrb	r3, [r7, #14]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	460b      	mov	r3, r1
 800a89c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8ac:	78fa      	ldrb	r2, [r7, #3]
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7f8 face 	bl	8002e52 <HAL_PCD_EP_ClrStall>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 f90d 	bl	800aadc <USBD_Get_USB_Status>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	da0b      	bge.n	800a904 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8ec:	78fb      	ldrb	r3, [r7, #3]
 800a8ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8f2:	68f9      	ldr	r1, [r7, #12]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	00db      	lsls	r3, r3, #3
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	440b      	add	r3, r1
 800a8fe:	3316      	adds	r3, #22
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	e00b      	b.n	800a91c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a904:	78fb      	ldrb	r3, [r7, #3]
 800a906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a90a:	68f9      	ldr	r1, [r7, #12]
 800a90c:	4613      	mov	r3, r2
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a91a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3714      	adds	r7, #20
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a938:	2300      	movs	r3, #0
 800a93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a942:	78fa      	ldrb	r2, [r7, #3]
 800a944:	4611      	mov	r1, r2
 800a946:	4618      	mov	r0, r3
 800a948:	f7f8 f8bb 	bl	8002ac2 <HAL_PCD_SetAddress>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f8c2 	bl	800aadc <USBD_Get_USB_Status>
 800a958:	4603      	mov	r3, r0
 800a95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b086      	sub	sp, #24
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	60f8      	str	r0, [r7, #12]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	603b      	str	r3, [r7, #0]
 800a972:	460b      	mov	r3, r1
 800a974:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a984:	7af9      	ldrb	r1, [r7, #11]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	f7f8 f9c5 	bl	8002d18 <HAL_PCD_EP_Transmit>
 800a98e:	4603      	mov	r3, r0
 800a990:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a992:	7dfb      	ldrb	r3, [r7, #23]
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f8a1 	bl	800aadc <USBD_Get_USB_Status>
 800a99a:	4603      	mov	r3, r0
 800a99c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a99e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3718      	adds	r7, #24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	607a      	str	r2, [r7, #4]
 800a9b2:	603b      	str	r3, [r7, #0]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9c6:	7af9      	ldrb	r1, [r7, #11]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	f7f8 f951 	bl	8002c72 <HAL_PCD_EP_Receive>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 f880 	bl	800aadc <USBD_Get_USB_Status>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9fc:	78fa      	ldrb	r2, [r7, #3]
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7f8 f971 	bl	8002ce8 <HAL_PCD_EP_GetRxCount>
 800aa06:	4603      	mov	r3, r0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800aa1c:	78fb      	ldrb	r3, [r7, #3]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <HAL_PCDEx_LPM_Callback+0x18>
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d01f      	beq.n	800aa66 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800aa26:	e03b      	b.n	800aaa0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	7adb      	ldrb	r3, [r3, #11]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800aa30:	f7f5 fdda 	bl	80005e8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa34:	4b1c      	ldr	r3, [pc, #112]	; (800aaa8 <HAL_PCDEx_LPM_Callback+0x98>)
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	4a1b      	ldr	r2, [pc, #108]	; (800aaa8 <HAL_PCDEx_LPM_Callback+0x98>)
 800aa3a:	f023 0306 	bic.w	r3, r3, #6
 800aa3e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	6812      	ldr	r2, [r2, #0]
 800aa4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa52:	f023 0301 	bic.w	r3, r3, #1
 800aa56:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fd fe57 	bl	8008712 <USBD_LL_Resume>
    break;
 800aa64:	e01c      	b.n	800aaa0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	6812      	ldr	r2, [r2, #0]
 800aa74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa78:	f043 0301 	orr.w	r3, r3, #1
 800aa7c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fd fe28 	bl	80086da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	7adb      	ldrb	r3, [r3, #11]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa92:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <HAL_PCDEx_LPM_Callback+0x98>)
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	4a04      	ldr	r2, [pc, #16]	; (800aaa8 <HAL_PCDEx_LPM_Callback+0x98>)
 800aa98:	f043 0306 	orr.w	r3, r3, #6
 800aa9c:	6113      	str	r3, [r2, #16]
    break;
 800aa9e:	bf00      	nop
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	e000ed00 	.word	0xe000ed00

0800aaac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aab4:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <USBD_static_malloc+0x18>)
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20001d5c 	.word	0x20001d5c

0800aac8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]

}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaea:	79fb      	ldrb	r3, [r7, #7]
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d817      	bhi.n	800ab20 <USBD_Get_USB_Status+0x44>
 800aaf0:	a201      	add	r2, pc, #4	; (adr r2, 800aaf8 <USBD_Get_USB_Status+0x1c>)
 800aaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf6:	bf00      	nop
 800aaf8:	0800ab09 	.word	0x0800ab09
 800aafc:	0800ab0f 	.word	0x0800ab0f
 800ab00:	0800ab15 	.word	0x0800ab15
 800ab04:	0800ab1b 	.word	0x0800ab1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab0c:	e00b      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	73fb      	strb	r3, [r7, #15]
    break;
 800ab12:	e008      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab14:	2301      	movs	r3, #1
 800ab16:	73fb      	strb	r3, [r7, #15]
    break;
 800ab18:	e005      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab1e:	e002      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab20:	2303      	movs	r3, #3
 800ab22:	73fb      	strb	r3, [r7, #15]
    break;
 800ab24:	bf00      	nop
  }
  return usb_status;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <__assert_func>:
 800ab34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab36:	4614      	mov	r4, r2
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <__assert_func+0x2c>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4605      	mov	r5, r0
 800ab40:	68d8      	ldr	r0, [r3, #12]
 800ab42:	b14c      	cbz	r4, 800ab58 <__assert_func+0x24>
 800ab44:	4b07      	ldr	r3, [pc, #28]	; (800ab64 <__assert_func+0x30>)
 800ab46:	9100      	str	r1, [sp, #0]
 800ab48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab4c:	4906      	ldr	r1, [pc, #24]	; (800ab68 <__assert_func+0x34>)
 800ab4e:	462b      	mov	r3, r5
 800ab50:	f000 f8b2 	bl	800acb8 <fiprintf>
 800ab54:	f000 f9bd 	bl	800aed2 <abort>
 800ab58:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <__assert_func+0x38>)
 800ab5a:	461c      	mov	r4, r3
 800ab5c:	e7f3      	b.n	800ab46 <__assert_func+0x12>
 800ab5e:	bf00      	nop
 800ab60:	20000164 	.word	0x20000164
 800ab64:	0800bcea 	.word	0x0800bcea
 800ab68:	0800bcf7 	.word	0x0800bcf7
 800ab6c:	0800bd25 	.word	0x0800bd25

0800ab70 <std>:
 800ab70:	2300      	movs	r3, #0
 800ab72:	b510      	push	{r4, lr}
 800ab74:	4604      	mov	r4, r0
 800ab76:	e9c0 3300 	strd	r3, r3, [r0]
 800ab7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab7e:	6083      	str	r3, [r0, #8]
 800ab80:	8181      	strh	r1, [r0, #12]
 800ab82:	6643      	str	r3, [r0, #100]	; 0x64
 800ab84:	81c2      	strh	r2, [r0, #14]
 800ab86:	6183      	str	r3, [r0, #24]
 800ab88:	4619      	mov	r1, r3
 800ab8a:	2208      	movs	r2, #8
 800ab8c:	305c      	adds	r0, #92	; 0x5c
 800ab8e:	f000 f916 	bl	800adbe <memset>
 800ab92:	4b0d      	ldr	r3, [pc, #52]	; (800abc8 <std+0x58>)
 800ab94:	6263      	str	r3, [r4, #36]	; 0x24
 800ab96:	4b0d      	ldr	r3, [pc, #52]	; (800abcc <std+0x5c>)
 800ab98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab9a:	4b0d      	ldr	r3, [pc, #52]	; (800abd0 <std+0x60>)
 800ab9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab9e:	4b0d      	ldr	r3, [pc, #52]	; (800abd4 <std+0x64>)
 800aba0:	6323      	str	r3, [r4, #48]	; 0x30
 800aba2:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <std+0x68>)
 800aba4:	6224      	str	r4, [r4, #32]
 800aba6:	429c      	cmp	r4, r3
 800aba8:	d006      	beq.n	800abb8 <std+0x48>
 800abaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800abae:	4294      	cmp	r4, r2
 800abb0:	d002      	beq.n	800abb8 <std+0x48>
 800abb2:	33d0      	adds	r3, #208	; 0xd0
 800abb4:	429c      	cmp	r4, r3
 800abb6:	d105      	bne.n	800abc4 <std+0x54>
 800abb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc0:	f000 b976 	b.w	800aeb0 <__retarget_lock_init_recursive>
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	bf00      	nop
 800abc8:	0800ad19 	.word	0x0800ad19
 800abcc:	0800ad3b 	.word	0x0800ad3b
 800abd0:	0800ad73 	.word	0x0800ad73
 800abd4:	0800ad97 	.word	0x0800ad97
 800abd8:	20001f7c 	.word	0x20001f7c

0800abdc <stdio_exit_handler>:
 800abdc:	4a02      	ldr	r2, [pc, #8]	; (800abe8 <stdio_exit_handler+0xc>)
 800abde:	4903      	ldr	r1, [pc, #12]	; (800abec <stdio_exit_handler+0x10>)
 800abe0:	4803      	ldr	r0, [pc, #12]	; (800abf0 <stdio_exit_handler+0x14>)
 800abe2:	f000 b87b 	b.w	800acdc <_fwalk_sglue>
 800abe6:	bf00      	nop
 800abe8:	2000010c 	.word	0x2000010c
 800abec:	0800b785 	.word	0x0800b785
 800abf0:	20000118 	.word	0x20000118

0800abf4 <cleanup_stdio>:
 800abf4:	6841      	ldr	r1, [r0, #4]
 800abf6:	4b0c      	ldr	r3, [pc, #48]	; (800ac28 <cleanup_stdio+0x34>)
 800abf8:	4299      	cmp	r1, r3
 800abfa:	b510      	push	{r4, lr}
 800abfc:	4604      	mov	r4, r0
 800abfe:	d001      	beq.n	800ac04 <cleanup_stdio+0x10>
 800ac00:	f000 fdc0 	bl	800b784 <_fflush_r>
 800ac04:	68a1      	ldr	r1, [r4, #8]
 800ac06:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <cleanup_stdio+0x38>)
 800ac08:	4299      	cmp	r1, r3
 800ac0a:	d002      	beq.n	800ac12 <cleanup_stdio+0x1e>
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 fdb9 	bl	800b784 <_fflush_r>
 800ac12:	68e1      	ldr	r1, [r4, #12]
 800ac14:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <cleanup_stdio+0x3c>)
 800ac16:	4299      	cmp	r1, r3
 800ac18:	d004      	beq.n	800ac24 <cleanup_stdio+0x30>
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac20:	f000 bdb0 	b.w	800b784 <_fflush_r>
 800ac24:	bd10      	pop	{r4, pc}
 800ac26:	bf00      	nop
 800ac28:	20001f7c 	.word	0x20001f7c
 800ac2c:	20001fe4 	.word	0x20001fe4
 800ac30:	2000204c 	.word	0x2000204c

0800ac34 <global_stdio_init.part.0>:
 800ac34:	b510      	push	{r4, lr}
 800ac36:	4b0b      	ldr	r3, [pc, #44]	; (800ac64 <global_stdio_init.part.0+0x30>)
 800ac38:	4c0b      	ldr	r4, [pc, #44]	; (800ac68 <global_stdio_init.part.0+0x34>)
 800ac3a:	4a0c      	ldr	r2, [pc, #48]	; (800ac6c <global_stdio_init.part.0+0x38>)
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	4620      	mov	r0, r4
 800ac40:	2200      	movs	r2, #0
 800ac42:	2104      	movs	r1, #4
 800ac44:	f7ff ff94 	bl	800ab70 <std>
 800ac48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	2109      	movs	r1, #9
 800ac50:	f7ff ff8e 	bl	800ab70 <std>
 800ac54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ac58:	2202      	movs	r2, #2
 800ac5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac5e:	2112      	movs	r1, #18
 800ac60:	f7ff bf86 	b.w	800ab70 <std>
 800ac64:	200020b4 	.word	0x200020b4
 800ac68:	20001f7c 	.word	0x20001f7c
 800ac6c:	0800abdd 	.word	0x0800abdd

0800ac70 <__sfp_lock_acquire>:
 800ac70:	4801      	ldr	r0, [pc, #4]	; (800ac78 <__sfp_lock_acquire+0x8>)
 800ac72:	f000 b91e 	b.w	800aeb2 <__retarget_lock_acquire_recursive>
 800ac76:	bf00      	nop
 800ac78:	200020bd 	.word	0x200020bd

0800ac7c <__sfp_lock_release>:
 800ac7c:	4801      	ldr	r0, [pc, #4]	; (800ac84 <__sfp_lock_release+0x8>)
 800ac7e:	f000 b919 	b.w	800aeb4 <__retarget_lock_release_recursive>
 800ac82:	bf00      	nop
 800ac84:	200020bd 	.word	0x200020bd

0800ac88 <__sinit>:
 800ac88:	b510      	push	{r4, lr}
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	f7ff fff0 	bl	800ac70 <__sfp_lock_acquire>
 800ac90:	6a23      	ldr	r3, [r4, #32]
 800ac92:	b11b      	cbz	r3, 800ac9c <__sinit+0x14>
 800ac94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac98:	f7ff bff0 	b.w	800ac7c <__sfp_lock_release>
 800ac9c:	4b04      	ldr	r3, [pc, #16]	; (800acb0 <__sinit+0x28>)
 800ac9e:	6223      	str	r3, [r4, #32]
 800aca0:	4b04      	ldr	r3, [pc, #16]	; (800acb4 <__sinit+0x2c>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1f5      	bne.n	800ac94 <__sinit+0xc>
 800aca8:	f7ff ffc4 	bl	800ac34 <global_stdio_init.part.0>
 800acac:	e7f2      	b.n	800ac94 <__sinit+0xc>
 800acae:	bf00      	nop
 800acb0:	0800abf5 	.word	0x0800abf5
 800acb4:	200020b4 	.word	0x200020b4

0800acb8 <fiprintf>:
 800acb8:	b40e      	push	{r1, r2, r3}
 800acba:	b503      	push	{r0, r1, lr}
 800acbc:	4601      	mov	r1, r0
 800acbe:	ab03      	add	r3, sp, #12
 800acc0:	4805      	ldr	r0, [pc, #20]	; (800acd8 <fiprintf+0x20>)
 800acc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc6:	6800      	ldr	r0, [r0, #0]
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	f000 fa2b 	bl	800b124 <_vfiprintf_r>
 800acce:	b002      	add	sp, #8
 800acd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd4:	b003      	add	sp, #12
 800acd6:	4770      	bx	lr
 800acd8:	20000164 	.word	0x20000164

0800acdc <_fwalk_sglue>:
 800acdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace0:	4607      	mov	r7, r0
 800ace2:	4688      	mov	r8, r1
 800ace4:	4614      	mov	r4, r2
 800ace6:	2600      	movs	r6, #0
 800ace8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acec:	f1b9 0901 	subs.w	r9, r9, #1
 800acf0:	d505      	bpl.n	800acfe <_fwalk_sglue+0x22>
 800acf2:	6824      	ldr	r4, [r4, #0]
 800acf4:	2c00      	cmp	r4, #0
 800acf6:	d1f7      	bne.n	800ace8 <_fwalk_sglue+0xc>
 800acf8:	4630      	mov	r0, r6
 800acfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acfe:	89ab      	ldrh	r3, [r5, #12]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d907      	bls.n	800ad14 <_fwalk_sglue+0x38>
 800ad04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	d003      	beq.n	800ad14 <_fwalk_sglue+0x38>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	4638      	mov	r0, r7
 800ad10:	47c0      	blx	r8
 800ad12:	4306      	orrs	r6, r0
 800ad14:	3568      	adds	r5, #104	; 0x68
 800ad16:	e7e9      	b.n	800acec <_fwalk_sglue+0x10>

0800ad18 <__sread>:
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad20:	f000 f878 	bl	800ae14 <_read_r>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	bfab      	itete	ge
 800ad28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad2c:	181b      	addge	r3, r3, r0
 800ad2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad32:	bfac      	ite	ge
 800ad34:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad36:	81a3      	strhlt	r3, [r4, #12]
 800ad38:	bd10      	pop	{r4, pc}

0800ad3a <__swrite>:
 800ad3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3e:	461f      	mov	r7, r3
 800ad40:	898b      	ldrh	r3, [r1, #12]
 800ad42:	05db      	lsls	r3, r3, #23
 800ad44:	4605      	mov	r5, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	4616      	mov	r6, r2
 800ad4a:	d505      	bpl.n	800ad58 <__swrite+0x1e>
 800ad4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad50:	2302      	movs	r3, #2
 800ad52:	2200      	movs	r2, #0
 800ad54:	f000 f84c 	bl	800adf0 <_lseek_r>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad62:	81a3      	strh	r3, [r4, #12]
 800ad64:	4632      	mov	r2, r6
 800ad66:	463b      	mov	r3, r7
 800ad68:	4628      	mov	r0, r5
 800ad6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6e:	f000 b863 	b.w	800ae38 <_write_r>

0800ad72 <__sseek>:
 800ad72:	b510      	push	{r4, lr}
 800ad74:	460c      	mov	r4, r1
 800ad76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7a:	f000 f839 	bl	800adf0 <_lseek_r>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	bf15      	itete	ne
 800ad84:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad8e:	81a3      	strheq	r3, [r4, #12]
 800ad90:	bf18      	it	ne
 800ad92:	81a3      	strhne	r3, [r4, #12]
 800ad94:	bd10      	pop	{r4, pc}

0800ad96 <__sclose>:
 800ad96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad9a:	f000 b819 	b.w	800add0 <_close_r>

0800ad9e <memcmp>:
 800ad9e:	b510      	push	{r4, lr}
 800ada0:	3901      	subs	r1, #1
 800ada2:	4402      	add	r2, r0
 800ada4:	4290      	cmp	r0, r2
 800ada6:	d101      	bne.n	800adac <memcmp+0xe>
 800ada8:	2000      	movs	r0, #0
 800adaa:	e005      	b.n	800adb8 <memcmp+0x1a>
 800adac:	7803      	ldrb	r3, [r0, #0]
 800adae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800adb2:	42a3      	cmp	r3, r4
 800adb4:	d001      	beq.n	800adba <memcmp+0x1c>
 800adb6:	1b18      	subs	r0, r3, r4
 800adb8:	bd10      	pop	{r4, pc}
 800adba:	3001      	adds	r0, #1
 800adbc:	e7f2      	b.n	800ada4 <memcmp+0x6>

0800adbe <memset>:
 800adbe:	4402      	add	r2, r0
 800adc0:	4603      	mov	r3, r0
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d100      	bne.n	800adc8 <memset+0xa>
 800adc6:	4770      	bx	lr
 800adc8:	f803 1b01 	strb.w	r1, [r3], #1
 800adcc:	e7f9      	b.n	800adc2 <memset+0x4>
	...

0800add0 <_close_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d06      	ldr	r5, [pc, #24]	; (800adec <_close_r+0x1c>)
 800add4:	2300      	movs	r3, #0
 800add6:	4604      	mov	r4, r0
 800add8:	4608      	mov	r0, r1
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	f7f5 ffe1 	bl	8000da2 <_close>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_close_r+0x1a>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_close_r+0x1a>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	200020b8 	.word	0x200020b8

0800adf0 <_lseek_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d07      	ldr	r5, [pc, #28]	; (800ae10 <_lseek_r+0x20>)
 800adf4:	4604      	mov	r4, r0
 800adf6:	4608      	mov	r0, r1
 800adf8:	4611      	mov	r1, r2
 800adfa:	2200      	movs	r2, #0
 800adfc:	602a      	str	r2, [r5, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f7f5 fff6 	bl	8000df0 <_lseek>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_lseek_r+0x1e>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_lseek_r+0x1e>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	200020b8 	.word	0x200020b8

0800ae14 <_read_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4d07      	ldr	r5, [pc, #28]	; (800ae34 <_read_r+0x20>)
 800ae18:	4604      	mov	r4, r0
 800ae1a:	4608      	mov	r0, r1
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	2200      	movs	r2, #0
 800ae20:	602a      	str	r2, [r5, #0]
 800ae22:	461a      	mov	r2, r3
 800ae24:	f7f5 ff84 	bl	8000d30 <_read>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	d102      	bne.n	800ae32 <_read_r+0x1e>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	b103      	cbz	r3, 800ae32 <_read_r+0x1e>
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	200020b8 	.word	0x200020b8

0800ae38 <_write_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4d07      	ldr	r5, [pc, #28]	; (800ae58 <_write_r+0x20>)
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	4608      	mov	r0, r1
 800ae40:	4611      	mov	r1, r2
 800ae42:	2200      	movs	r2, #0
 800ae44:	602a      	str	r2, [r5, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	f7f5 ff8f 	bl	8000d6a <_write>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d102      	bne.n	800ae56 <_write_r+0x1e>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	b103      	cbz	r3, 800ae56 <_write_r+0x1e>
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
 800ae58:	200020b8 	.word	0x200020b8

0800ae5c <__errno>:
 800ae5c:	4b01      	ldr	r3, [pc, #4]	; (800ae64 <__errno+0x8>)
 800ae5e:	6818      	ldr	r0, [r3, #0]
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	20000164 	.word	0x20000164

0800ae68 <__libc_init_array>:
 800ae68:	b570      	push	{r4, r5, r6, lr}
 800ae6a:	4d0d      	ldr	r5, [pc, #52]	; (800aea0 <__libc_init_array+0x38>)
 800ae6c:	4c0d      	ldr	r4, [pc, #52]	; (800aea4 <__libc_init_array+0x3c>)
 800ae6e:	1b64      	subs	r4, r4, r5
 800ae70:	10a4      	asrs	r4, r4, #2
 800ae72:	2600      	movs	r6, #0
 800ae74:	42a6      	cmp	r6, r4
 800ae76:	d109      	bne.n	800ae8c <__libc_init_array+0x24>
 800ae78:	4d0b      	ldr	r5, [pc, #44]	; (800aea8 <__libc_init_array+0x40>)
 800ae7a:	4c0c      	ldr	r4, [pc, #48]	; (800aeac <__libc_init_array+0x44>)
 800ae7c:	f000 fe18 	bl	800bab0 <_init>
 800ae80:	1b64      	subs	r4, r4, r5
 800ae82:	10a4      	asrs	r4, r4, #2
 800ae84:	2600      	movs	r6, #0
 800ae86:	42a6      	cmp	r6, r4
 800ae88:	d105      	bne.n	800ae96 <__libc_init_array+0x2e>
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae90:	4798      	blx	r3
 800ae92:	3601      	adds	r6, #1
 800ae94:	e7ee      	b.n	800ae74 <__libc_init_array+0xc>
 800ae96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae9a:	4798      	blx	r3
 800ae9c:	3601      	adds	r6, #1
 800ae9e:	e7f2      	b.n	800ae86 <__libc_init_array+0x1e>
 800aea0:	0800bd64 	.word	0x0800bd64
 800aea4:	0800bd64 	.word	0x0800bd64
 800aea8:	0800bd64 	.word	0x0800bd64
 800aeac:	0800bd68 	.word	0x0800bd68

0800aeb0 <__retarget_lock_init_recursive>:
 800aeb0:	4770      	bx	lr

0800aeb2 <__retarget_lock_acquire_recursive>:
 800aeb2:	4770      	bx	lr

0800aeb4 <__retarget_lock_release_recursive>:
 800aeb4:	4770      	bx	lr

0800aeb6 <memcpy>:
 800aeb6:	440a      	add	r2, r1
 800aeb8:	4291      	cmp	r1, r2
 800aeba:	f100 33ff 	add.w	r3, r0, #4294967295
 800aebe:	d100      	bne.n	800aec2 <memcpy+0xc>
 800aec0:	4770      	bx	lr
 800aec2:	b510      	push	{r4, lr}
 800aec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aecc:	4291      	cmp	r1, r2
 800aece:	d1f9      	bne.n	800aec4 <memcpy+0xe>
 800aed0:	bd10      	pop	{r4, pc}

0800aed2 <abort>:
 800aed2:	b508      	push	{r3, lr}
 800aed4:	2006      	movs	r0, #6
 800aed6:	f000 fd3b 	bl	800b950 <raise>
 800aeda:	2001      	movs	r0, #1
 800aedc:	f7f5 ff1e 	bl	8000d1c <_exit>

0800aee0 <_free_r>:
 800aee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aee2:	2900      	cmp	r1, #0
 800aee4:	d044      	beq.n	800af70 <_free_r+0x90>
 800aee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeea:	9001      	str	r0, [sp, #4]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f1a1 0404 	sub.w	r4, r1, #4
 800aef2:	bfb8      	it	lt
 800aef4:	18e4      	addlt	r4, r4, r3
 800aef6:	f000 f8df 	bl	800b0b8 <__malloc_lock>
 800aefa:	4a1e      	ldr	r2, [pc, #120]	; (800af74 <_free_r+0x94>)
 800aefc:	9801      	ldr	r0, [sp, #4]
 800aefe:	6813      	ldr	r3, [r2, #0]
 800af00:	b933      	cbnz	r3, 800af10 <_free_r+0x30>
 800af02:	6063      	str	r3, [r4, #4]
 800af04:	6014      	str	r4, [r2, #0]
 800af06:	b003      	add	sp, #12
 800af08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af0c:	f000 b8da 	b.w	800b0c4 <__malloc_unlock>
 800af10:	42a3      	cmp	r3, r4
 800af12:	d908      	bls.n	800af26 <_free_r+0x46>
 800af14:	6825      	ldr	r5, [r4, #0]
 800af16:	1961      	adds	r1, r4, r5
 800af18:	428b      	cmp	r3, r1
 800af1a:	bf01      	itttt	eq
 800af1c:	6819      	ldreq	r1, [r3, #0]
 800af1e:	685b      	ldreq	r3, [r3, #4]
 800af20:	1949      	addeq	r1, r1, r5
 800af22:	6021      	streq	r1, [r4, #0]
 800af24:	e7ed      	b.n	800af02 <_free_r+0x22>
 800af26:	461a      	mov	r2, r3
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	b10b      	cbz	r3, 800af30 <_free_r+0x50>
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	d9fa      	bls.n	800af26 <_free_r+0x46>
 800af30:	6811      	ldr	r1, [r2, #0]
 800af32:	1855      	adds	r5, r2, r1
 800af34:	42a5      	cmp	r5, r4
 800af36:	d10b      	bne.n	800af50 <_free_r+0x70>
 800af38:	6824      	ldr	r4, [r4, #0]
 800af3a:	4421      	add	r1, r4
 800af3c:	1854      	adds	r4, r2, r1
 800af3e:	42a3      	cmp	r3, r4
 800af40:	6011      	str	r1, [r2, #0]
 800af42:	d1e0      	bne.n	800af06 <_free_r+0x26>
 800af44:	681c      	ldr	r4, [r3, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	6053      	str	r3, [r2, #4]
 800af4a:	440c      	add	r4, r1
 800af4c:	6014      	str	r4, [r2, #0]
 800af4e:	e7da      	b.n	800af06 <_free_r+0x26>
 800af50:	d902      	bls.n	800af58 <_free_r+0x78>
 800af52:	230c      	movs	r3, #12
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	e7d6      	b.n	800af06 <_free_r+0x26>
 800af58:	6825      	ldr	r5, [r4, #0]
 800af5a:	1961      	adds	r1, r4, r5
 800af5c:	428b      	cmp	r3, r1
 800af5e:	bf04      	itt	eq
 800af60:	6819      	ldreq	r1, [r3, #0]
 800af62:	685b      	ldreq	r3, [r3, #4]
 800af64:	6063      	str	r3, [r4, #4]
 800af66:	bf04      	itt	eq
 800af68:	1949      	addeq	r1, r1, r5
 800af6a:	6021      	streq	r1, [r4, #0]
 800af6c:	6054      	str	r4, [r2, #4]
 800af6e:	e7ca      	b.n	800af06 <_free_r+0x26>
 800af70:	b003      	add	sp, #12
 800af72:	bd30      	pop	{r4, r5, pc}
 800af74:	200020c0 	.word	0x200020c0

0800af78 <sbrk_aligned>:
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	4e0e      	ldr	r6, [pc, #56]	; (800afb4 <sbrk_aligned+0x3c>)
 800af7c:	460c      	mov	r4, r1
 800af7e:	6831      	ldr	r1, [r6, #0]
 800af80:	4605      	mov	r5, r0
 800af82:	b911      	cbnz	r1, 800af8a <sbrk_aligned+0x12>
 800af84:	f000 fd00 	bl	800b988 <_sbrk_r>
 800af88:	6030      	str	r0, [r6, #0]
 800af8a:	4621      	mov	r1, r4
 800af8c:	4628      	mov	r0, r5
 800af8e:	f000 fcfb 	bl	800b988 <_sbrk_r>
 800af92:	1c43      	adds	r3, r0, #1
 800af94:	d00a      	beq.n	800afac <sbrk_aligned+0x34>
 800af96:	1cc4      	adds	r4, r0, #3
 800af98:	f024 0403 	bic.w	r4, r4, #3
 800af9c:	42a0      	cmp	r0, r4
 800af9e:	d007      	beq.n	800afb0 <sbrk_aligned+0x38>
 800afa0:	1a21      	subs	r1, r4, r0
 800afa2:	4628      	mov	r0, r5
 800afa4:	f000 fcf0 	bl	800b988 <_sbrk_r>
 800afa8:	3001      	adds	r0, #1
 800afaa:	d101      	bne.n	800afb0 <sbrk_aligned+0x38>
 800afac:	f04f 34ff 	mov.w	r4, #4294967295
 800afb0:	4620      	mov	r0, r4
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
 800afb4:	200020c4 	.word	0x200020c4

0800afb8 <_malloc_r>:
 800afb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afbc:	1ccd      	adds	r5, r1, #3
 800afbe:	f025 0503 	bic.w	r5, r5, #3
 800afc2:	3508      	adds	r5, #8
 800afc4:	2d0c      	cmp	r5, #12
 800afc6:	bf38      	it	cc
 800afc8:	250c      	movcc	r5, #12
 800afca:	2d00      	cmp	r5, #0
 800afcc:	4607      	mov	r7, r0
 800afce:	db01      	blt.n	800afd4 <_malloc_r+0x1c>
 800afd0:	42a9      	cmp	r1, r5
 800afd2:	d905      	bls.n	800afe0 <_malloc_r+0x28>
 800afd4:	230c      	movs	r3, #12
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	2600      	movs	r6, #0
 800afda:	4630      	mov	r0, r6
 800afdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0b4 <_malloc_r+0xfc>
 800afe4:	f000 f868 	bl	800b0b8 <__malloc_lock>
 800afe8:	f8d8 3000 	ldr.w	r3, [r8]
 800afec:	461c      	mov	r4, r3
 800afee:	bb5c      	cbnz	r4, 800b048 <_malloc_r+0x90>
 800aff0:	4629      	mov	r1, r5
 800aff2:	4638      	mov	r0, r7
 800aff4:	f7ff ffc0 	bl	800af78 <sbrk_aligned>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	4604      	mov	r4, r0
 800affc:	d155      	bne.n	800b0aa <_malloc_r+0xf2>
 800affe:	f8d8 4000 	ldr.w	r4, [r8]
 800b002:	4626      	mov	r6, r4
 800b004:	2e00      	cmp	r6, #0
 800b006:	d145      	bne.n	800b094 <_malloc_r+0xdc>
 800b008:	2c00      	cmp	r4, #0
 800b00a:	d048      	beq.n	800b09e <_malloc_r+0xe6>
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	4631      	mov	r1, r6
 800b010:	4638      	mov	r0, r7
 800b012:	eb04 0903 	add.w	r9, r4, r3
 800b016:	f000 fcb7 	bl	800b988 <_sbrk_r>
 800b01a:	4581      	cmp	r9, r0
 800b01c:	d13f      	bne.n	800b09e <_malloc_r+0xe6>
 800b01e:	6821      	ldr	r1, [r4, #0]
 800b020:	1a6d      	subs	r5, r5, r1
 800b022:	4629      	mov	r1, r5
 800b024:	4638      	mov	r0, r7
 800b026:	f7ff ffa7 	bl	800af78 <sbrk_aligned>
 800b02a:	3001      	adds	r0, #1
 800b02c:	d037      	beq.n	800b09e <_malloc_r+0xe6>
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	442b      	add	r3, r5
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	f8d8 3000 	ldr.w	r3, [r8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d038      	beq.n	800b0ae <_malloc_r+0xf6>
 800b03c:	685a      	ldr	r2, [r3, #4]
 800b03e:	42a2      	cmp	r2, r4
 800b040:	d12b      	bne.n	800b09a <_malloc_r+0xe2>
 800b042:	2200      	movs	r2, #0
 800b044:	605a      	str	r2, [r3, #4]
 800b046:	e00f      	b.n	800b068 <_malloc_r+0xb0>
 800b048:	6822      	ldr	r2, [r4, #0]
 800b04a:	1b52      	subs	r2, r2, r5
 800b04c:	d41f      	bmi.n	800b08e <_malloc_r+0xd6>
 800b04e:	2a0b      	cmp	r2, #11
 800b050:	d917      	bls.n	800b082 <_malloc_r+0xca>
 800b052:	1961      	adds	r1, r4, r5
 800b054:	42a3      	cmp	r3, r4
 800b056:	6025      	str	r5, [r4, #0]
 800b058:	bf18      	it	ne
 800b05a:	6059      	strne	r1, [r3, #4]
 800b05c:	6863      	ldr	r3, [r4, #4]
 800b05e:	bf08      	it	eq
 800b060:	f8c8 1000 	streq.w	r1, [r8]
 800b064:	5162      	str	r2, [r4, r5]
 800b066:	604b      	str	r3, [r1, #4]
 800b068:	4638      	mov	r0, r7
 800b06a:	f104 060b 	add.w	r6, r4, #11
 800b06e:	f000 f829 	bl	800b0c4 <__malloc_unlock>
 800b072:	f026 0607 	bic.w	r6, r6, #7
 800b076:	1d23      	adds	r3, r4, #4
 800b078:	1af2      	subs	r2, r6, r3
 800b07a:	d0ae      	beq.n	800afda <_malloc_r+0x22>
 800b07c:	1b9b      	subs	r3, r3, r6
 800b07e:	50a3      	str	r3, [r4, r2]
 800b080:	e7ab      	b.n	800afda <_malloc_r+0x22>
 800b082:	42a3      	cmp	r3, r4
 800b084:	6862      	ldr	r2, [r4, #4]
 800b086:	d1dd      	bne.n	800b044 <_malloc_r+0x8c>
 800b088:	f8c8 2000 	str.w	r2, [r8]
 800b08c:	e7ec      	b.n	800b068 <_malloc_r+0xb0>
 800b08e:	4623      	mov	r3, r4
 800b090:	6864      	ldr	r4, [r4, #4]
 800b092:	e7ac      	b.n	800afee <_malloc_r+0x36>
 800b094:	4634      	mov	r4, r6
 800b096:	6876      	ldr	r6, [r6, #4]
 800b098:	e7b4      	b.n	800b004 <_malloc_r+0x4c>
 800b09a:	4613      	mov	r3, r2
 800b09c:	e7cc      	b.n	800b038 <_malloc_r+0x80>
 800b09e:	230c      	movs	r3, #12
 800b0a0:	603b      	str	r3, [r7, #0]
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	f000 f80e 	bl	800b0c4 <__malloc_unlock>
 800b0a8:	e797      	b.n	800afda <_malloc_r+0x22>
 800b0aa:	6025      	str	r5, [r4, #0]
 800b0ac:	e7dc      	b.n	800b068 <_malloc_r+0xb0>
 800b0ae:	605b      	str	r3, [r3, #4]
 800b0b0:	deff      	udf	#255	; 0xff
 800b0b2:	bf00      	nop
 800b0b4:	200020c0 	.word	0x200020c0

0800b0b8 <__malloc_lock>:
 800b0b8:	4801      	ldr	r0, [pc, #4]	; (800b0c0 <__malloc_lock+0x8>)
 800b0ba:	f7ff befa 	b.w	800aeb2 <__retarget_lock_acquire_recursive>
 800b0be:	bf00      	nop
 800b0c0:	200020bc 	.word	0x200020bc

0800b0c4 <__malloc_unlock>:
 800b0c4:	4801      	ldr	r0, [pc, #4]	; (800b0cc <__malloc_unlock+0x8>)
 800b0c6:	f7ff bef5 	b.w	800aeb4 <__retarget_lock_release_recursive>
 800b0ca:	bf00      	nop
 800b0cc:	200020bc 	.word	0x200020bc

0800b0d0 <__sfputc_r>:
 800b0d0:	6893      	ldr	r3, [r2, #8]
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	b410      	push	{r4}
 800b0d8:	6093      	str	r3, [r2, #8]
 800b0da:	da08      	bge.n	800b0ee <__sfputc_r+0x1e>
 800b0dc:	6994      	ldr	r4, [r2, #24]
 800b0de:	42a3      	cmp	r3, r4
 800b0e0:	db01      	blt.n	800b0e6 <__sfputc_r+0x16>
 800b0e2:	290a      	cmp	r1, #10
 800b0e4:	d103      	bne.n	800b0ee <__sfputc_r+0x1e>
 800b0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ea:	f000 bb73 	b.w	800b7d4 <__swbuf_r>
 800b0ee:	6813      	ldr	r3, [r2, #0]
 800b0f0:	1c58      	adds	r0, r3, #1
 800b0f2:	6010      	str	r0, [r2, #0]
 800b0f4:	7019      	strb	r1, [r3, #0]
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <__sfputs_r>:
 800b0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b100:	4606      	mov	r6, r0
 800b102:	460f      	mov	r7, r1
 800b104:	4614      	mov	r4, r2
 800b106:	18d5      	adds	r5, r2, r3
 800b108:	42ac      	cmp	r4, r5
 800b10a:	d101      	bne.n	800b110 <__sfputs_r+0x12>
 800b10c:	2000      	movs	r0, #0
 800b10e:	e007      	b.n	800b120 <__sfputs_r+0x22>
 800b110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b114:	463a      	mov	r2, r7
 800b116:	4630      	mov	r0, r6
 800b118:	f7ff ffda 	bl	800b0d0 <__sfputc_r>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d1f3      	bne.n	800b108 <__sfputs_r+0xa>
 800b120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b124 <_vfiprintf_r>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	460d      	mov	r5, r1
 800b12a:	b09d      	sub	sp, #116	; 0x74
 800b12c:	4614      	mov	r4, r2
 800b12e:	4698      	mov	r8, r3
 800b130:	4606      	mov	r6, r0
 800b132:	b118      	cbz	r0, 800b13c <_vfiprintf_r+0x18>
 800b134:	6a03      	ldr	r3, [r0, #32]
 800b136:	b90b      	cbnz	r3, 800b13c <_vfiprintf_r+0x18>
 800b138:	f7ff fda6 	bl	800ac88 <__sinit>
 800b13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b13e:	07d9      	lsls	r1, r3, #31
 800b140:	d405      	bmi.n	800b14e <_vfiprintf_r+0x2a>
 800b142:	89ab      	ldrh	r3, [r5, #12]
 800b144:	059a      	lsls	r2, r3, #22
 800b146:	d402      	bmi.n	800b14e <_vfiprintf_r+0x2a>
 800b148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b14a:	f7ff feb2 	bl	800aeb2 <__retarget_lock_acquire_recursive>
 800b14e:	89ab      	ldrh	r3, [r5, #12]
 800b150:	071b      	lsls	r3, r3, #28
 800b152:	d501      	bpl.n	800b158 <_vfiprintf_r+0x34>
 800b154:	692b      	ldr	r3, [r5, #16]
 800b156:	b99b      	cbnz	r3, 800b180 <_vfiprintf_r+0x5c>
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f000 fb78 	bl	800b850 <__swsetup_r>
 800b160:	b170      	cbz	r0, 800b180 <_vfiprintf_r+0x5c>
 800b162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b164:	07dc      	lsls	r4, r3, #31
 800b166:	d504      	bpl.n	800b172 <_vfiprintf_r+0x4e>
 800b168:	f04f 30ff 	mov.w	r0, #4294967295
 800b16c:	b01d      	add	sp, #116	; 0x74
 800b16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b172:	89ab      	ldrh	r3, [r5, #12]
 800b174:	0598      	lsls	r0, r3, #22
 800b176:	d4f7      	bmi.n	800b168 <_vfiprintf_r+0x44>
 800b178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b17a:	f7ff fe9b 	bl	800aeb4 <__retarget_lock_release_recursive>
 800b17e:	e7f3      	b.n	800b168 <_vfiprintf_r+0x44>
 800b180:	2300      	movs	r3, #0
 800b182:	9309      	str	r3, [sp, #36]	; 0x24
 800b184:	2320      	movs	r3, #32
 800b186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b18a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b18e:	2330      	movs	r3, #48	; 0x30
 800b190:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b344 <_vfiprintf_r+0x220>
 800b194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b198:	f04f 0901 	mov.w	r9, #1
 800b19c:	4623      	mov	r3, r4
 800b19e:	469a      	mov	sl, r3
 800b1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1a4:	b10a      	cbz	r2, 800b1aa <_vfiprintf_r+0x86>
 800b1a6:	2a25      	cmp	r2, #37	; 0x25
 800b1a8:	d1f9      	bne.n	800b19e <_vfiprintf_r+0x7a>
 800b1aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ae:	d00b      	beq.n	800b1c8 <_vfiprintf_r+0xa4>
 800b1b0:	465b      	mov	r3, fp
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7ff ffa1 	bl	800b0fe <__sfputs_r>
 800b1bc:	3001      	adds	r0, #1
 800b1be:	f000 80a9 	beq.w	800b314 <_vfiprintf_r+0x1f0>
 800b1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1c4:	445a      	add	r2, fp
 800b1c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 80a1 	beq.w	800b314 <_vfiprintf_r+0x1f0>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1dc:	f10a 0a01 	add.w	sl, sl, #1
 800b1e0:	9304      	str	r3, [sp, #16]
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b1ea:	4654      	mov	r4, sl
 800b1ec:	2205      	movs	r2, #5
 800b1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f2:	4854      	ldr	r0, [pc, #336]	; (800b344 <_vfiprintf_r+0x220>)
 800b1f4:	f7f5 f814 	bl	8000220 <memchr>
 800b1f8:	9a04      	ldr	r2, [sp, #16]
 800b1fa:	b9d8      	cbnz	r0, 800b234 <_vfiprintf_r+0x110>
 800b1fc:	06d1      	lsls	r1, r2, #27
 800b1fe:	bf44      	itt	mi
 800b200:	2320      	movmi	r3, #32
 800b202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b206:	0713      	lsls	r3, r2, #28
 800b208:	bf44      	itt	mi
 800b20a:	232b      	movmi	r3, #43	; 0x2b
 800b20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b210:	f89a 3000 	ldrb.w	r3, [sl]
 800b214:	2b2a      	cmp	r3, #42	; 0x2a
 800b216:	d015      	beq.n	800b244 <_vfiprintf_r+0x120>
 800b218:	9a07      	ldr	r2, [sp, #28]
 800b21a:	4654      	mov	r4, sl
 800b21c:	2000      	movs	r0, #0
 800b21e:	f04f 0c0a 	mov.w	ip, #10
 800b222:	4621      	mov	r1, r4
 800b224:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b228:	3b30      	subs	r3, #48	; 0x30
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d94d      	bls.n	800b2ca <_vfiprintf_r+0x1a6>
 800b22e:	b1b0      	cbz	r0, 800b25e <_vfiprintf_r+0x13a>
 800b230:	9207      	str	r2, [sp, #28]
 800b232:	e014      	b.n	800b25e <_vfiprintf_r+0x13a>
 800b234:	eba0 0308 	sub.w	r3, r0, r8
 800b238:	fa09 f303 	lsl.w	r3, r9, r3
 800b23c:	4313      	orrs	r3, r2
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	46a2      	mov	sl, r4
 800b242:	e7d2      	b.n	800b1ea <_vfiprintf_r+0xc6>
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	1d19      	adds	r1, r3, #4
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	9103      	str	r1, [sp, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bfbb      	ittet	lt
 800b250:	425b      	neglt	r3, r3
 800b252:	f042 0202 	orrlt.w	r2, r2, #2
 800b256:	9307      	strge	r3, [sp, #28]
 800b258:	9307      	strlt	r3, [sp, #28]
 800b25a:	bfb8      	it	lt
 800b25c:	9204      	strlt	r2, [sp, #16]
 800b25e:	7823      	ldrb	r3, [r4, #0]
 800b260:	2b2e      	cmp	r3, #46	; 0x2e
 800b262:	d10c      	bne.n	800b27e <_vfiprintf_r+0x15a>
 800b264:	7863      	ldrb	r3, [r4, #1]
 800b266:	2b2a      	cmp	r3, #42	; 0x2a
 800b268:	d134      	bne.n	800b2d4 <_vfiprintf_r+0x1b0>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	1d1a      	adds	r2, r3, #4
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	9203      	str	r2, [sp, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	bfb8      	it	lt
 800b276:	f04f 33ff 	movlt.w	r3, #4294967295
 800b27a:	3402      	adds	r4, #2
 800b27c:	9305      	str	r3, [sp, #20]
 800b27e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b354 <_vfiprintf_r+0x230>
 800b282:	7821      	ldrb	r1, [r4, #0]
 800b284:	2203      	movs	r2, #3
 800b286:	4650      	mov	r0, sl
 800b288:	f7f4 ffca 	bl	8000220 <memchr>
 800b28c:	b138      	cbz	r0, 800b29e <_vfiprintf_r+0x17a>
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	eba0 000a 	sub.w	r0, r0, sl
 800b294:	2240      	movs	r2, #64	; 0x40
 800b296:	4082      	lsls	r2, r0
 800b298:	4313      	orrs	r3, r2
 800b29a:	3401      	adds	r4, #1
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a2:	4829      	ldr	r0, [pc, #164]	; (800b348 <_vfiprintf_r+0x224>)
 800b2a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2a8:	2206      	movs	r2, #6
 800b2aa:	f7f4 ffb9 	bl	8000220 <memchr>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d03f      	beq.n	800b332 <_vfiprintf_r+0x20e>
 800b2b2:	4b26      	ldr	r3, [pc, #152]	; (800b34c <_vfiprintf_r+0x228>)
 800b2b4:	bb1b      	cbnz	r3, 800b2fe <_vfiprintf_r+0x1da>
 800b2b6:	9b03      	ldr	r3, [sp, #12]
 800b2b8:	3307      	adds	r3, #7
 800b2ba:	f023 0307 	bic.w	r3, r3, #7
 800b2be:	3308      	adds	r3, #8
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c4:	443b      	add	r3, r7
 800b2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c8:	e768      	b.n	800b19c <_vfiprintf_r+0x78>
 800b2ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	2001      	movs	r0, #1
 800b2d2:	e7a6      	b.n	800b222 <_vfiprintf_r+0xfe>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	3401      	adds	r4, #1
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	4619      	mov	r1, r3
 800b2dc:	f04f 0c0a 	mov.w	ip, #10
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2e6:	3a30      	subs	r2, #48	; 0x30
 800b2e8:	2a09      	cmp	r2, #9
 800b2ea:	d903      	bls.n	800b2f4 <_vfiprintf_r+0x1d0>
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0c6      	beq.n	800b27e <_vfiprintf_r+0x15a>
 800b2f0:	9105      	str	r1, [sp, #20]
 800b2f2:	e7c4      	b.n	800b27e <_vfiprintf_r+0x15a>
 800b2f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e7f0      	b.n	800b2e0 <_vfiprintf_r+0x1bc>
 800b2fe:	ab03      	add	r3, sp, #12
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	462a      	mov	r2, r5
 800b304:	4b12      	ldr	r3, [pc, #72]	; (800b350 <_vfiprintf_r+0x22c>)
 800b306:	a904      	add	r1, sp, #16
 800b308:	4630      	mov	r0, r6
 800b30a:	f3af 8000 	nop.w
 800b30e:	4607      	mov	r7, r0
 800b310:	1c78      	adds	r0, r7, #1
 800b312:	d1d6      	bne.n	800b2c2 <_vfiprintf_r+0x19e>
 800b314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b316:	07d9      	lsls	r1, r3, #31
 800b318:	d405      	bmi.n	800b326 <_vfiprintf_r+0x202>
 800b31a:	89ab      	ldrh	r3, [r5, #12]
 800b31c:	059a      	lsls	r2, r3, #22
 800b31e:	d402      	bmi.n	800b326 <_vfiprintf_r+0x202>
 800b320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b322:	f7ff fdc7 	bl	800aeb4 <__retarget_lock_release_recursive>
 800b326:	89ab      	ldrh	r3, [r5, #12]
 800b328:	065b      	lsls	r3, r3, #25
 800b32a:	f53f af1d 	bmi.w	800b168 <_vfiprintf_r+0x44>
 800b32e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b330:	e71c      	b.n	800b16c <_vfiprintf_r+0x48>
 800b332:	ab03      	add	r3, sp, #12
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	462a      	mov	r2, r5
 800b338:	4b05      	ldr	r3, [pc, #20]	; (800b350 <_vfiprintf_r+0x22c>)
 800b33a:	a904      	add	r1, sp, #16
 800b33c:	4630      	mov	r0, r6
 800b33e:	f000 f879 	bl	800b434 <_printf_i>
 800b342:	e7e4      	b.n	800b30e <_vfiprintf_r+0x1ea>
 800b344:	0800bd26 	.word	0x0800bd26
 800b348:	0800bd30 	.word	0x0800bd30
 800b34c:	00000000 	.word	0x00000000
 800b350:	0800b0ff 	.word	0x0800b0ff
 800b354:	0800bd2c 	.word	0x0800bd2c

0800b358 <_printf_common>:
 800b358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b35c:	4616      	mov	r6, r2
 800b35e:	4699      	mov	r9, r3
 800b360:	688a      	ldr	r2, [r1, #8]
 800b362:	690b      	ldr	r3, [r1, #16]
 800b364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b368:	4293      	cmp	r3, r2
 800b36a:	bfb8      	it	lt
 800b36c:	4613      	movlt	r3, r2
 800b36e:	6033      	str	r3, [r6, #0]
 800b370:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b374:	4607      	mov	r7, r0
 800b376:	460c      	mov	r4, r1
 800b378:	b10a      	cbz	r2, 800b37e <_printf_common+0x26>
 800b37a:	3301      	adds	r3, #1
 800b37c:	6033      	str	r3, [r6, #0]
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	0699      	lsls	r1, r3, #26
 800b382:	bf42      	ittt	mi
 800b384:	6833      	ldrmi	r3, [r6, #0]
 800b386:	3302      	addmi	r3, #2
 800b388:	6033      	strmi	r3, [r6, #0]
 800b38a:	6825      	ldr	r5, [r4, #0]
 800b38c:	f015 0506 	ands.w	r5, r5, #6
 800b390:	d106      	bne.n	800b3a0 <_printf_common+0x48>
 800b392:	f104 0a19 	add.w	sl, r4, #25
 800b396:	68e3      	ldr	r3, [r4, #12]
 800b398:	6832      	ldr	r2, [r6, #0]
 800b39a:	1a9b      	subs	r3, r3, r2
 800b39c:	42ab      	cmp	r3, r5
 800b39e:	dc26      	bgt.n	800b3ee <_printf_common+0x96>
 800b3a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3a4:	1e13      	subs	r3, r2, #0
 800b3a6:	6822      	ldr	r2, [r4, #0]
 800b3a8:	bf18      	it	ne
 800b3aa:	2301      	movne	r3, #1
 800b3ac:	0692      	lsls	r2, r2, #26
 800b3ae:	d42b      	bmi.n	800b408 <_printf_common+0xb0>
 800b3b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3b4:	4649      	mov	r1, r9
 800b3b6:	4638      	mov	r0, r7
 800b3b8:	47c0      	blx	r8
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	d01e      	beq.n	800b3fc <_printf_common+0xa4>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	6922      	ldr	r2, [r4, #16]
 800b3c2:	f003 0306 	and.w	r3, r3, #6
 800b3c6:	2b04      	cmp	r3, #4
 800b3c8:	bf02      	ittt	eq
 800b3ca:	68e5      	ldreq	r5, [r4, #12]
 800b3cc:	6833      	ldreq	r3, [r6, #0]
 800b3ce:	1aed      	subeq	r5, r5, r3
 800b3d0:	68a3      	ldr	r3, [r4, #8]
 800b3d2:	bf0c      	ite	eq
 800b3d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3d8:	2500      	movne	r5, #0
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	bfc4      	itt	gt
 800b3de:	1a9b      	subgt	r3, r3, r2
 800b3e0:	18ed      	addgt	r5, r5, r3
 800b3e2:	2600      	movs	r6, #0
 800b3e4:	341a      	adds	r4, #26
 800b3e6:	42b5      	cmp	r5, r6
 800b3e8:	d11a      	bne.n	800b420 <_printf_common+0xc8>
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	e008      	b.n	800b400 <_printf_common+0xa8>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	4652      	mov	r2, sl
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	47c0      	blx	r8
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d103      	bne.n	800b404 <_printf_common+0xac>
 800b3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b404:	3501      	adds	r5, #1
 800b406:	e7c6      	b.n	800b396 <_printf_common+0x3e>
 800b408:	18e1      	adds	r1, r4, r3
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	2030      	movs	r0, #48	; 0x30
 800b40e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b412:	4422      	add	r2, r4
 800b414:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b418:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b41c:	3302      	adds	r3, #2
 800b41e:	e7c7      	b.n	800b3b0 <_printf_common+0x58>
 800b420:	2301      	movs	r3, #1
 800b422:	4622      	mov	r2, r4
 800b424:	4649      	mov	r1, r9
 800b426:	4638      	mov	r0, r7
 800b428:	47c0      	blx	r8
 800b42a:	3001      	adds	r0, #1
 800b42c:	d0e6      	beq.n	800b3fc <_printf_common+0xa4>
 800b42e:	3601      	adds	r6, #1
 800b430:	e7d9      	b.n	800b3e6 <_printf_common+0x8e>
	...

0800b434 <_printf_i>:
 800b434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b438:	7e0f      	ldrb	r7, [r1, #24]
 800b43a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b43c:	2f78      	cmp	r7, #120	; 0x78
 800b43e:	4691      	mov	r9, r2
 800b440:	4680      	mov	r8, r0
 800b442:	460c      	mov	r4, r1
 800b444:	469a      	mov	sl, r3
 800b446:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b44a:	d807      	bhi.n	800b45c <_printf_i+0x28>
 800b44c:	2f62      	cmp	r7, #98	; 0x62
 800b44e:	d80a      	bhi.n	800b466 <_printf_i+0x32>
 800b450:	2f00      	cmp	r7, #0
 800b452:	f000 80d4 	beq.w	800b5fe <_printf_i+0x1ca>
 800b456:	2f58      	cmp	r7, #88	; 0x58
 800b458:	f000 80c0 	beq.w	800b5dc <_printf_i+0x1a8>
 800b45c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b460:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b464:	e03a      	b.n	800b4dc <_printf_i+0xa8>
 800b466:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b46a:	2b15      	cmp	r3, #21
 800b46c:	d8f6      	bhi.n	800b45c <_printf_i+0x28>
 800b46e:	a101      	add	r1, pc, #4	; (adr r1, 800b474 <_printf_i+0x40>)
 800b470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b474:	0800b4cd 	.word	0x0800b4cd
 800b478:	0800b4e1 	.word	0x0800b4e1
 800b47c:	0800b45d 	.word	0x0800b45d
 800b480:	0800b45d 	.word	0x0800b45d
 800b484:	0800b45d 	.word	0x0800b45d
 800b488:	0800b45d 	.word	0x0800b45d
 800b48c:	0800b4e1 	.word	0x0800b4e1
 800b490:	0800b45d 	.word	0x0800b45d
 800b494:	0800b45d 	.word	0x0800b45d
 800b498:	0800b45d 	.word	0x0800b45d
 800b49c:	0800b45d 	.word	0x0800b45d
 800b4a0:	0800b5e5 	.word	0x0800b5e5
 800b4a4:	0800b50d 	.word	0x0800b50d
 800b4a8:	0800b59f 	.word	0x0800b59f
 800b4ac:	0800b45d 	.word	0x0800b45d
 800b4b0:	0800b45d 	.word	0x0800b45d
 800b4b4:	0800b607 	.word	0x0800b607
 800b4b8:	0800b45d 	.word	0x0800b45d
 800b4bc:	0800b50d 	.word	0x0800b50d
 800b4c0:	0800b45d 	.word	0x0800b45d
 800b4c4:	0800b45d 	.word	0x0800b45d
 800b4c8:	0800b5a7 	.word	0x0800b5a7
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	1d1a      	adds	r2, r3, #4
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	602a      	str	r2, [r5, #0]
 800b4d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e09f      	b.n	800b620 <_printf_i+0x1ec>
 800b4e0:	6820      	ldr	r0, [r4, #0]
 800b4e2:	682b      	ldr	r3, [r5, #0]
 800b4e4:	0607      	lsls	r7, r0, #24
 800b4e6:	f103 0104 	add.w	r1, r3, #4
 800b4ea:	6029      	str	r1, [r5, #0]
 800b4ec:	d501      	bpl.n	800b4f2 <_printf_i+0xbe>
 800b4ee:	681e      	ldr	r6, [r3, #0]
 800b4f0:	e003      	b.n	800b4fa <_printf_i+0xc6>
 800b4f2:	0646      	lsls	r6, r0, #25
 800b4f4:	d5fb      	bpl.n	800b4ee <_printf_i+0xba>
 800b4f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b4fa:	2e00      	cmp	r6, #0
 800b4fc:	da03      	bge.n	800b506 <_printf_i+0xd2>
 800b4fe:	232d      	movs	r3, #45	; 0x2d
 800b500:	4276      	negs	r6, r6
 800b502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b506:	485a      	ldr	r0, [pc, #360]	; (800b670 <_printf_i+0x23c>)
 800b508:	230a      	movs	r3, #10
 800b50a:	e012      	b.n	800b532 <_printf_i+0xfe>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	6820      	ldr	r0, [r4, #0]
 800b510:	1d19      	adds	r1, r3, #4
 800b512:	6029      	str	r1, [r5, #0]
 800b514:	0605      	lsls	r5, r0, #24
 800b516:	d501      	bpl.n	800b51c <_printf_i+0xe8>
 800b518:	681e      	ldr	r6, [r3, #0]
 800b51a:	e002      	b.n	800b522 <_printf_i+0xee>
 800b51c:	0641      	lsls	r1, r0, #25
 800b51e:	d5fb      	bpl.n	800b518 <_printf_i+0xe4>
 800b520:	881e      	ldrh	r6, [r3, #0]
 800b522:	4853      	ldr	r0, [pc, #332]	; (800b670 <_printf_i+0x23c>)
 800b524:	2f6f      	cmp	r7, #111	; 0x6f
 800b526:	bf0c      	ite	eq
 800b528:	2308      	moveq	r3, #8
 800b52a:	230a      	movne	r3, #10
 800b52c:	2100      	movs	r1, #0
 800b52e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b532:	6865      	ldr	r5, [r4, #4]
 800b534:	60a5      	str	r5, [r4, #8]
 800b536:	2d00      	cmp	r5, #0
 800b538:	bfa2      	ittt	ge
 800b53a:	6821      	ldrge	r1, [r4, #0]
 800b53c:	f021 0104 	bicge.w	r1, r1, #4
 800b540:	6021      	strge	r1, [r4, #0]
 800b542:	b90e      	cbnz	r6, 800b548 <_printf_i+0x114>
 800b544:	2d00      	cmp	r5, #0
 800b546:	d04b      	beq.n	800b5e0 <_printf_i+0x1ac>
 800b548:	4615      	mov	r5, r2
 800b54a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b54e:	fb03 6711 	mls	r7, r3, r1, r6
 800b552:	5dc7      	ldrb	r7, [r0, r7]
 800b554:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b558:	4637      	mov	r7, r6
 800b55a:	42bb      	cmp	r3, r7
 800b55c:	460e      	mov	r6, r1
 800b55e:	d9f4      	bls.n	800b54a <_printf_i+0x116>
 800b560:	2b08      	cmp	r3, #8
 800b562:	d10b      	bne.n	800b57c <_printf_i+0x148>
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	07de      	lsls	r6, r3, #31
 800b568:	d508      	bpl.n	800b57c <_printf_i+0x148>
 800b56a:	6923      	ldr	r3, [r4, #16]
 800b56c:	6861      	ldr	r1, [r4, #4]
 800b56e:	4299      	cmp	r1, r3
 800b570:	bfde      	ittt	le
 800b572:	2330      	movle	r3, #48	; 0x30
 800b574:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b578:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b57c:	1b52      	subs	r2, r2, r5
 800b57e:	6122      	str	r2, [r4, #16]
 800b580:	f8cd a000 	str.w	sl, [sp]
 800b584:	464b      	mov	r3, r9
 800b586:	aa03      	add	r2, sp, #12
 800b588:	4621      	mov	r1, r4
 800b58a:	4640      	mov	r0, r8
 800b58c:	f7ff fee4 	bl	800b358 <_printf_common>
 800b590:	3001      	adds	r0, #1
 800b592:	d14a      	bne.n	800b62a <_printf_i+0x1f6>
 800b594:	f04f 30ff 	mov.w	r0, #4294967295
 800b598:	b004      	add	sp, #16
 800b59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	f043 0320 	orr.w	r3, r3, #32
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	4833      	ldr	r0, [pc, #204]	; (800b674 <_printf_i+0x240>)
 800b5a8:	2778      	movs	r7, #120	; 0x78
 800b5aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	6829      	ldr	r1, [r5, #0]
 800b5b2:	061f      	lsls	r7, r3, #24
 800b5b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5b8:	d402      	bmi.n	800b5c0 <_printf_i+0x18c>
 800b5ba:	065f      	lsls	r7, r3, #25
 800b5bc:	bf48      	it	mi
 800b5be:	b2b6      	uxthmi	r6, r6
 800b5c0:	07df      	lsls	r7, r3, #31
 800b5c2:	bf48      	it	mi
 800b5c4:	f043 0320 	orrmi.w	r3, r3, #32
 800b5c8:	6029      	str	r1, [r5, #0]
 800b5ca:	bf48      	it	mi
 800b5cc:	6023      	strmi	r3, [r4, #0]
 800b5ce:	b91e      	cbnz	r6, 800b5d8 <_printf_i+0x1a4>
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	f023 0320 	bic.w	r3, r3, #32
 800b5d6:	6023      	str	r3, [r4, #0]
 800b5d8:	2310      	movs	r3, #16
 800b5da:	e7a7      	b.n	800b52c <_printf_i+0xf8>
 800b5dc:	4824      	ldr	r0, [pc, #144]	; (800b670 <_printf_i+0x23c>)
 800b5de:	e7e4      	b.n	800b5aa <_printf_i+0x176>
 800b5e0:	4615      	mov	r5, r2
 800b5e2:	e7bd      	b.n	800b560 <_printf_i+0x12c>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	6826      	ldr	r6, [r4, #0]
 800b5e8:	6961      	ldr	r1, [r4, #20]
 800b5ea:	1d18      	adds	r0, r3, #4
 800b5ec:	6028      	str	r0, [r5, #0]
 800b5ee:	0635      	lsls	r5, r6, #24
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	d501      	bpl.n	800b5f8 <_printf_i+0x1c4>
 800b5f4:	6019      	str	r1, [r3, #0]
 800b5f6:	e002      	b.n	800b5fe <_printf_i+0x1ca>
 800b5f8:	0670      	lsls	r0, r6, #25
 800b5fa:	d5fb      	bpl.n	800b5f4 <_printf_i+0x1c0>
 800b5fc:	8019      	strh	r1, [r3, #0]
 800b5fe:	2300      	movs	r3, #0
 800b600:	6123      	str	r3, [r4, #16]
 800b602:	4615      	mov	r5, r2
 800b604:	e7bc      	b.n	800b580 <_printf_i+0x14c>
 800b606:	682b      	ldr	r3, [r5, #0]
 800b608:	1d1a      	adds	r2, r3, #4
 800b60a:	602a      	str	r2, [r5, #0]
 800b60c:	681d      	ldr	r5, [r3, #0]
 800b60e:	6862      	ldr	r2, [r4, #4]
 800b610:	2100      	movs	r1, #0
 800b612:	4628      	mov	r0, r5
 800b614:	f7f4 fe04 	bl	8000220 <memchr>
 800b618:	b108      	cbz	r0, 800b61e <_printf_i+0x1ea>
 800b61a:	1b40      	subs	r0, r0, r5
 800b61c:	6060      	str	r0, [r4, #4]
 800b61e:	6863      	ldr	r3, [r4, #4]
 800b620:	6123      	str	r3, [r4, #16]
 800b622:	2300      	movs	r3, #0
 800b624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b628:	e7aa      	b.n	800b580 <_printf_i+0x14c>
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	462a      	mov	r2, r5
 800b62e:	4649      	mov	r1, r9
 800b630:	4640      	mov	r0, r8
 800b632:	47d0      	blx	sl
 800b634:	3001      	adds	r0, #1
 800b636:	d0ad      	beq.n	800b594 <_printf_i+0x160>
 800b638:	6823      	ldr	r3, [r4, #0]
 800b63a:	079b      	lsls	r3, r3, #30
 800b63c:	d413      	bmi.n	800b666 <_printf_i+0x232>
 800b63e:	68e0      	ldr	r0, [r4, #12]
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	4298      	cmp	r0, r3
 800b644:	bfb8      	it	lt
 800b646:	4618      	movlt	r0, r3
 800b648:	e7a6      	b.n	800b598 <_printf_i+0x164>
 800b64a:	2301      	movs	r3, #1
 800b64c:	4632      	mov	r2, r6
 800b64e:	4649      	mov	r1, r9
 800b650:	4640      	mov	r0, r8
 800b652:	47d0      	blx	sl
 800b654:	3001      	adds	r0, #1
 800b656:	d09d      	beq.n	800b594 <_printf_i+0x160>
 800b658:	3501      	adds	r5, #1
 800b65a:	68e3      	ldr	r3, [r4, #12]
 800b65c:	9903      	ldr	r1, [sp, #12]
 800b65e:	1a5b      	subs	r3, r3, r1
 800b660:	42ab      	cmp	r3, r5
 800b662:	dcf2      	bgt.n	800b64a <_printf_i+0x216>
 800b664:	e7eb      	b.n	800b63e <_printf_i+0x20a>
 800b666:	2500      	movs	r5, #0
 800b668:	f104 0619 	add.w	r6, r4, #25
 800b66c:	e7f5      	b.n	800b65a <_printf_i+0x226>
 800b66e:	bf00      	nop
 800b670:	0800bd37 	.word	0x0800bd37
 800b674:	0800bd48 	.word	0x0800bd48

0800b678 <__sflush_r>:
 800b678:	898a      	ldrh	r2, [r1, #12]
 800b67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b67e:	4605      	mov	r5, r0
 800b680:	0710      	lsls	r0, r2, #28
 800b682:	460c      	mov	r4, r1
 800b684:	d458      	bmi.n	800b738 <__sflush_r+0xc0>
 800b686:	684b      	ldr	r3, [r1, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	dc05      	bgt.n	800b698 <__sflush_r+0x20>
 800b68c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b68e:	2b00      	cmp	r3, #0
 800b690:	dc02      	bgt.n	800b698 <__sflush_r+0x20>
 800b692:	2000      	movs	r0, #0
 800b694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b69a:	2e00      	cmp	r6, #0
 800b69c:	d0f9      	beq.n	800b692 <__sflush_r+0x1a>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6a4:	682f      	ldr	r7, [r5, #0]
 800b6a6:	6a21      	ldr	r1, [r4, #32]
 800b6a8:	602b      	str	r3, [r5, #0]
 800b6aa:	d032      	beq.n	800b712 <__sflush_r+0x9a>
 800b6ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	075a      	lsls	r2, r3, #29
 800b6b2:	d505      	bpl.n	800b6c0 <__sflush_r+0x48>
 800b6b4:	6863      	ldr	r3, [r4, #4]
 800b6b6:	1ac0      	subs	r0, r0, r3
 800b6b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6ba:	b10b      	cbz	r3, 800b6c0 <__sflush_r+0x48>
 800b6bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6be:	1ac0      	subs	r0, r0, r3
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6c6:	6a21      	ldr	r1, [r4, #32]
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	47b0      	blx	r6
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	d106      	bne.n	800b6e0 <__sflush_r+0x68>
 800b6d2:	6829      	ldr	r1, [r5, #0]
 800b6d4:	291d      	cmp	r1, #29
 800b6d6:	d82b      	bhi.n	800b730 <__sflush_r+0xb8>
 800b6d8:	4a29      	ldr	r2, [pc, #164]	; (800b780 <__sflush_r+0x108>)
 800b6da:	410a      	asrs	r2, r1
 800b6dc:	07d6      	lsls	r6, r2, #31
 800b6de:	d427      	bmi.n	800b730 <__sflush_r+0xb8>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	6062      	str	r2, [r4, #4]
 800b6e4:	04d9      	lsls	r1, r3, #19
 800b6e6:	6922      	ldr	r2, [r4, #16]
 800b6e8:	6022      	str	r2, [r4, #0]
 800b6ea:	d504      	bpl.n	800b6f6 <__sflush_r+0x7e>
 800b6ec:	1c42      	adds	r2, r0, #1
 800b6ee:	d101      	bne.n	800b6f4 <__sflush_r+0x7c>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b903      	cbnz	r3, 800b6f6 <__sflush_r+0x7e>
 800b6f4:	6560      	str	r0, [r4, #84]	; 0x54
 800b6f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6f8:	602f      	str	r7, [r5, #0]
 800b6fa:	2900      	cmp	r1, #0
 800b6fc:	d0c9      	beq.n	800b692 <__sflush_r+0x1a>
 800b6fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b702:	4299      	cmp	r1, r3
 800b704:	d002      	beq.n	800b70c <__sflush_r+0x94>
 800b706:	4628      	mov	r0, r5
 800b708:	f7ff fbea 	bl	800aee0 <_free_r>
 800b70c:	2000      	movs	r0, #0
 800b70e:	6360      	str	r0, [r4, #52]	; 0x34
 800b710:	e7c0      	b.n	800b694 <__sflush_r+0x1c>
 800b712:	2301      	movs	r3, #1
 800b714:	4628      	mov	r0, r5
 800b716:	47b0      	blx	r6
 800b718:	1c41      	adds	r1, r0, #1
 800b71a:	d1c8      	bne.n	800b6ae <__sflush_r+0x36>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0c5      	beq.n	800b6ae <__sflush_r+0x36>
 800b722:	2b1d      	cmp	r3, #29
 800b724:	d001      	beq.n	800b72a <__sflush_r+0xb2>
 800b726:	2b16      	cmp	r3, #22
 800b728:	d101      	bne.n	800b72e <__sflush_r+0xb6>
 800b72a:	602f      	str	r7, [r5, #0]
 800b72c:	e7b1      	b.n	800b692 <__sflush_r+0x1a>
 800b72e:	89a3      	ldrh	r3, [r4, #12]
 800b730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b734:	81a3      	strh	r3, [r4, #12]
 800b736:	e7ad      	b.n	800b694 <__sflush_r+0x1c>
 800b738:	690f      	ldr	r7, [r1, #16]
 800b73a:	2f00      	cmp	r7, #0
 800b73c:	d0a9      	beq.n	800b692 <__sflush_r+0x1a>
 800b73e:	0793      	lsls	r3, r2, #30
 800b740:	680e      	ldr	r6, [r1, #0]
 800b742:	bf08      	it	eq
 800b744:	694b      	ldreq	r3, [r1, #20]
 800b746:	600f      	str	r7, [r1, #0]
 800b748:	bf18      	it	ne
 800b74a:	2300      	movne	r3, #0
 800b74c:	eba6 0807 	sub.w	r8, r6, r7
 800b750:	608b      	str	r3, [r1, #8]
 800b752:	f1b8 0f00 	cmp.w	r8, #0
 800b756:	dd9c      	ble.n	800b692 <__sflush_r+0x1a>
 800b758:	6a21      	ldr	r1, [r4, #32]
 800b75a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b75c:	4643      	mov	r3, r8
 800b75e:	463a      	mov	r2, r7
 800b760:	4628      	mov	r0, r5
 800b762:	47b0      	blx	r6
 800b764:	2800      	cmp	r0, #0
 800b766:	dc06      	bgt.n	800b776 <__sflush_r+0xfe>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76e:	81a3      	strh	r3, [r4, #12]
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	e78e      	b.n	800b694 <__sflush_r+0x1c>
 800b776:	4407      	add	r7, r0
 800b778:	eba8 0800 	sub.w	r8, r8, r0
 800b77c:	e7e9      	b.n	800b752 <__sflush_r+0xda>
 800b77e:	bf00      	nop
 800b780:	dfbffffe 	.word	0xdfbffffe

0800b784 <_fflush_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	690b      	ldr	r3, [r1, #16]
 800b788:	4605      	mov	r5, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	b913      	cbnz	r3, 800b794 <_fflush_r+0x10>
 800b78e:	2500      	movs	r5, #0
 800b790:	4628      	mov	r0, r5
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	b118      	cbz	r0, 800b79e <_fflush_r+0x1a>
 800b796:	6a03      	ldr	r3, [r0, #32]
 800b798:	b90b      	cbnz	r3, 800b79e <_fflush_r+0x1a>
 800b79a:	f7ff fa75 	bl	800ac88 <__sinit>
 800b79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d0f3      	beq.n	800b78e <_fflush_r+0xa>
 800b7a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7a8:	07d0      	lsls	r0, r2, #31
 800b7aa:	d404      	bmi.n	800b7b6 <_fflush_r+0x32>
 800b7ac:	0599      	lsls	r1, r3, #22
 800b7ae:	d402      	bmi.n	800b7b6 <_fflush_r+0x32>
 800b7b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7b2:	f7ff fb7e 	bl	800aeb2 <__retarget_lock_acquire_recursive>
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	f7ff ff5d 	bl	800b678 <__sflush_r>
 800b7be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7c0:	07da      	lsls	r2, r3, #31
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	d4e4      	bmi.n	800b790 <_fflush_r+0xc>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	059b      	lsls	r3, r3, #22
 800b7ca:	d4e1      	bmi.n	800b790 <_fflush_r+0xc>
 800b7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ce:	f7ff fb71 	bl	800aeb4 <__retarget_lock_release_recursive>
 800b7d2:	e7dd      	b.n	800b790 <_fflush_r+0xc>

0800b7d4 <__swbuf_r>:
 800b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d6:	460e      	mov	r6, r1
 800b7d8:	4614      	mov	r4, r2
 800b7da:	4605      	mov	r5, r0
 800b7dc:	b118      	cbz	r0, 800b7e6 <__swbuf_r+0x12>
 800b7de:	6a03      	ldr	r3, [r0, #32]
 800b7e0:	b90b      	cbnz	r3, 800b7e6 <__swbuf_r+0x12>
 800b7e2:	f7ff fa51 	bl	800ac88 <__sinit>
 800b7e6:	69a3      	ldr	r3, [r4, #24]
 800b7e8:	60a3      	str	r3, [r4, #8]
 800b7ea:	89a3      	ldrh	r3, [r4, #12]
 800b7ec:	071a      	lsls	r2, r3, #28
 800b7ee:	d525      	bpl.n	800b83c <__swbuf_r+0x68>
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	b31b      	cbz	r3, 800b83c <__swbuf_r+0x68>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	6922      	ldr	r2, [r4, #16]
 800b7f8:	1a98      	subs	r0, r3, r2
 800b7fa:	6963      	ldr	r3, [r4, #20]
 800b7fc:	b2f6      	uxtb	r6, r6
 800b7fe:	4283      	cmp	r3, r0
 800b800:	4637      	mov	r7, r6
 800b802:	dc04      	bgt.n	800b80e <__swbuf_r+0x3a>
 800b804:	4621      	mov	r1, r4
 800b806:	4628      	mov	r0, r5
 800b808:	f7ff ffbc 	bl	800b784 <_fflush_r>
 800b80c:	b9e0      	cbnz	r0, 800b848 <__swbuf_r+0x74>
 800b80e:	68a3      	ldr	r3, [r4, #8]
 800b810:	3b01      	subs	r3, #1
 800b812:	60a3      	str	r3, [r4, #8]
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	6022      	str	r2, [r4, #0]
 800b81a:	701e      	strb	r6, [r3, #0]
 800b81c:	6962      	ldr	r2, [r4, #20]
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	429a      	cmp	r2, r3
 800b822:	d004      	beq.n	800b82e <__swbuf_r+0x5a>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	07db      	lsls	r3, r3, #31
 800b828:	d506      	bpl.n	800b838 <__swbuf_r+0x64>
 800b82a:	2e0a      	cmp	r6, #10
 800b82c:	d104      	bne.n	800b838 <__swbuf_r+0x64>
 800b82e:	4621      	mov	r1, r4
 800b830:	4628      	mov	r0, r5
 800b832:	f7ff ffa7 	bl	800b784 <_fflush_r>
 800b836:	b938      	cbnz	r0, 800b848 <__swbuf_r+0x74>
 800b838:	4638      	mov	r0, r7
 800b83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b83c:	4621      	mov	r1, r4
 800b83e:	4628      	mov	r0, r5
 800b840:	f000 f806 	bl	800b850 <__swsetup_r>
 800b844:	2800      	cmp	r0, #0
 800b846:	d0d5      	beq.n	800b7f4 <__swbuf_r+0x20>
 800b848:	f04f 37ff 	mov.w	r7, #4294967295
 800b84c:	e7f4      	b.n	800b838 <__swbuf_r+0x64>
	...

0800b850 <__swsetup_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4b2a      	ldr	r3, [pc, #168]	; (800b8fc <__swsetup_r+0xac>)
 800b854:	4605      	mov	r5, r0
 800b856:	6818      	ldr	r0, [r3, #0]
 800b858:	460c      	mov	r4, r1
 800b85a:	b118      	cbz	r0, 800b864 <__swsetup_r+0x14>
 800b85c:	6a03      	ldr	r3, [r0, #32]
 800b85e:	b90b      	cbnz	r3, 800b864 <__swsetup_r+0x14>
 800b860:	f7ff fa12 	bl	800ac88 <__sinit>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b86a:	0718      	lsls	r0, r3, #28
 800b86c:	d422      	bmi.n	800b8b4 <__swsetup_r+0x64>
 800b86e:	06d9      	lsls	r1, r3, #27
 800b870:	d407      	bmi.n	800b882 <__swsetup_r+0x32>
 800b872:	2309      	movs	r3, #9
 800b874:	602b      	str	r3, [r5, #0]
 800b876:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295
 800b880:	e034      	b.n	800b8ec <__swsetup_r+0x9c>
 800b882:	0758      	lsls	r0, r3, #29
 800b884:	d512      	bpl.n	800b8ac <__swsetup_r+0x5c>
 800b886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b888:	b141      	cbz	r1, 800b89c <__swsetup_r+0x4c>
 800b88a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b88e:	4299      	cmp	r1, r3
 800b890:	d002      	beq.n	800b898 <__swsetup_r+0x48>
 800b892:	4628      	mov	r0, r5
 800b894:	f7ff fb24 	bl	800aee0 <_free_r>
 800b898:	2300      	movs	r3, #0
 800b89a:	6363      	str	r3, [r4, #52]	; 0x34
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8a2:	81a3      	strh	r3, [r4, #12]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	6063      	str	r3, [r4, #4]
 800b8a8:	6923      	ldr	r3, [r4, #16]
 800b8aa:	6023      	str	r3, [r4, #0]
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f043 0308 	orr.w	r3, r3, #8
 800b8b2:	81a3      	strh	r3, [r4, #12]
 800b8b4:	6923      	ldr	r3, [r4, #16]
 800b8b6:	b94b      	cbnz	r3, 800b8cc <__swsetup_r+0x7c>
 800b8b8:	89a3      	ldrh	r3, [r4, #12]
 800b8ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8c2:	d003      	beq.n	800b8cc <__swsetup_r+0x7c>
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f000 f894 	bl	800b9f4 <__smakebuf_r>
 800b8cc:	89a0      	ldrh	r0, [r4, #12]
 800b8ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8d2:	f010 0301 	ands.w	r3, r0, #1
 800b8d6:	d00a      	beq.n	800b8ee <__swsetup_r+0x9e>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	60a3      	str	r3, [r4, #8]
 800b8dc:	6963      	ldr	r3, [r4, #20]
 800b8de:	425b      	negs	r3, r3
 800b8e0:	61a3      	str	r3, [r4, #24]
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	b943      	cbnz	r3, 800b8f8 <__swsetup_r+0xa8>
 800b8e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8ea:	d1c4      	bne.n	800b876 <__swsetup_r+0x26>
 800b8ec:	bd38      	pop	{r3, r4, r5, pc}
 800b8ee:	0781      	lsls	r1, r0, #30
 800b8f0:	bf58      	it	pl
 800b8f2:	6963      	ldrpl	r3, [r4, #20]
 800b8f4:	60a3      	str	r3, [r4, #8]
 800b8f6:	e7f4      	b.n	800b8e2 <__swsetup_r+0x92>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e7f7      	b.n	800b8ec <__swsetup_r+0x9c>
 800b8fc:	20000164 	.word	0x20000164

0800b900 <_raise_r>:
 800b900:	291f      	cmp	r1, #31
 800b902:	b538      	push	{r3, r4, r5, lr}
 800b904:	4604      	mov	r4, r0
 800b906:	460d      	mov	r5, r1
 800b908:	d904      	bls.n	800b914 <_raise_r+0x14>
 800b90a:	2316      	movs	r3, #22
 800b90c:	6003      	str	r3, [r0, #0]
 800b90e:	f04f 30ff 	mov.w	r0, #4294967295
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b916:	b112      	cbz	r2, 800b91e <_raise_r+0x1e>
 800b918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b91c:	b94b      	cbnz	r3, 800b932 <_raise_r+0x32>
 800b91e:	4620      	mov	r0, r4
 800b920:	f000 f830 	bl	800b984 <_getpid_r>
 800b924:	462a      	mov	r2, r5
 800b926:	4601      	mov	r1, r0
 800b928:	4620      	mov	r0, r4
 800b92a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b92e:	f000 b817 	b.w	800b960 <_kill_r>
 800b932:	2b01      	cmp	r3, #1
 800b934:	d00a      	beq.n	800b94c <_raise_r+0x4c>
 800b936:	1c59      	adds	r1, r3, #1
 800b938:	d103      	bne.n	800b942 <_raise_r+0x42>
 800b93a:	2316      	movs	r3, #22
 800b93c:	6003      	str	r3, [r0, #0]
 800b93e:	2001      	movs	r0, #1
 800b940:	e7e7      	b.n	800b912 <_raise_r+0x12>
 800b942:	2400      	movs	r4, #0
 800b944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b948:	4628      	mov	r0, r5
 800b94a:	4798      	blx	r3
 800b94c:	2000      	movs	r0, #0
 800b94e:	e7e0      	b.n	800b912 <_raise_r+0x12>

0800b950 <raise>:
 800b950:	4b02      	ldr	r3, [pc, #8]	; (800b95c <raise+0xc>)
 800b952:	4601      	mov	r1, r0
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	f7ff bfd3 	b.w	800b900 <_raise_r>
 800b95a:	bf00      	nop
 800b95c:	20000164 	.word	0x20000164

0800b960 <_kill_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d07      	ldr	r5, [pc, #28]	; (800b980 <_kill_r+0x20>)
 800b964:	2300      	movs	r3, #0
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	4611      	mov	r1, r2
 800b96c:	602b      	str	r3, [r5, #0]
 800b96e:	f7f5 f9c5 	bl	8000cfc <_kill>
 800b972:	1c43      	adds	r3, r0, #1
 800b974:	d102      	bne.n	800b97c <_kill_r+0x1c>
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	b103      	cbz	r3, 800b97c <_kill_r+0x1c>
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	bf00      	nop
 800b980:	200020b8 	.word	0x200020b8

0800b984 <_getpid_r>:
 800b984:	f7f5 b9b2 	b.w	8000cec <_getpid>

0800b988 <_sbrk_r>:
 800b988:	b538      	push	{r3, r4, r5, lr}
 800b98a:	4d06      	ldr	r5, [pc, #24]	; (800b9a4 <_sbrk_r+0x1c>)
 800b98c:	2300      	movs	r3, #0
 800b98e:	4604      	mov	r4, r0
 800b990:	4608      	mov	r0, r1
 800b992:	602b      	str	r3, [r5, #0]
 800b994:	f7f5 fa3a 	bl	8000e0c <_sbrk>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d102      	bne.n	800b9a2 <_sbrk_r+0x1a>
 800b99c:	682b      	ldr	r3, [r5, #0]
 800b99e:	b103      	cbz	r3, 800b9a2 <_sbrk_r+0x1a>
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	200020b8 	.word	0x200020b8

0800b9a8 <__swhatbuf_r>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	460c      	mov	r4, r1
 800b9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b0:	2900      	cmp	r1, #0
 800b9b2:	b096      	sub	sp, #88	; 0x58
 800b9b4:	4615      	mov	r5, r2
 800b9b6:	461e      	mov	r6, r3
 800b9b8:	da0d      	bge.n	800b9d6 <__swhatbuf_r+0x2e>
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b9c0:	f04f 0100 	mov.w	r1, #0
 800b9c4:	bf0c      	ite	eq
 800b9c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b9ca:	2340      	movne	r3, #64	; 0x40
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	6031      	str	r1, [r6, #0]
 800b9d0:	602b      	str	r3, [r5, #0]
 800b9d2:	b016      	add	sp, #88	; 0x58
 800b9d4:	bd70      	pop	{r4, r5, r6, pc}
 800b9d6:	466a      	mov	r2, sp
 800b9d8:	f000 f848 	bl	800ba6c <_fstat_r>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	dbec      	blt.n	800b9ba <__swhatbuf_r+0x12>
 800b9e0:	9901      	ldr	r1, [sp, #4]
 800b9e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b9e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b9ea:	4259      	negs	r1, r3
 800b9ec:	4159      	adcs	r1, r3
 800b9ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9f2:	e7eb      	b.n	800b9cc <__swhatbuf_r+0x24>

0800b9f4 <__smakebuf_r>:
 800b9f4:	898b      	ldrh	r3, [r1, #12]
 800b9f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9f8:	079d      	lsls	r5, r3, #30
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	d507      	bpl.n	800ba10 <__smakebuf_r+0x1c>
 800ba00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	2301      	movs	r3, #1
 800ba0a:	6163      	str	r3, [r4, #20]
 800ba0c:	b002      	add	sp, #8
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}
 800ba10:	ab01      	add	r3, sp, #4
 800ba12:	466a      	mov	r2, sp
 800ba14:	f7ff ffc8 	bl	800b9a8 <__swhatbuf_r>
 800ba18:	9900      	ldr	r1, [sp, #0]
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	f7ff facb 	bl	800afb8 <_malloc_r>
 800ba22:	b948      	cbnz	r0, 800ba38 <__smakebuf_r+0x44>
 800ba24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba28:	059a      	lsls	r2, r3, #22
 800ba2a:	d4ef      	bmi.n	800ba0c <__smakebuf_r+0x18>
 800ba2c:	f023 0303 	bic.w	r3, r3, #3
 800ba30:	f043 0302 	orr.w	r3, r3, #2
 800ba34:	81a3      	strh	r3, [r4, #12]
 800ba36:	e7e3      	b.n	800ba00 <__smakebuf_r+0xc>
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	6020      	str	r0, [r4, #0]
 800ba3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba40:	81a3      	strh	r3, [r4, #12]
 800ba42:	9b00      	ldr	r3, [sp, #0]
 800ba44:	6163      	str	r3, [r4, #20]
 800ba46:	9b01      	ldr	r3, [sp, #4]
 800ba48:	6120      	str	r0, [r4, #16]
 800ba4a:	b15b      	cbz	r3, 800ba64 <__smakebuf_r+0x70>
 800ba4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba50:	4630      	mov	r0, r6
 800ba52:	f000 f81d 	bl	800ba90 <_isatty_r>
 800ba56:	b128      	cbz	r0, 800ba64 <__smakebuf_r+0x70>
 800ba58:	89a3      	ldrh	r3, [r4, #12]
 800ba5a:	f023 0303 	bic.w	r3, r3, #3
 800ba5e:	f043 0301 	orr.w	r3, r3, #1
 800ba62:	81a3      	strh	r3, [r4, #12]
 800ba64:	89a3      	ldrh	r3, [r4, #12]
 800ba66:	431d      	orrs	r5, r3
 800ba68:	81a5      	strh	r5, [r4, #12]
 800ba6a:	e7cf      	b.n	800ba0c <__smakebuf_r+0x18>

0800ba6c <_fstat_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d07      	ldr	r5, [pc, #28]	; (800ba8c <_fstat_r+0x20>)
 800ba70:	2300      	movs	r3, #0
 800ba72:	4604      	mov	r4, r0
 800ba74:	4608      	mov	r0, r1
 800ba76:	4611      	mov	r1, r2
 800ba78:	602b      	str	r3, [r5, #0]
 800ba7a:	f7f5 f99e 	bl	8000dba <_fstat>
 800ba7e:	1c43      	adds	r3, r0, #1
 800ba80:	d102      	bne.n	800ba88 <_fstat_r+0x1c>
 800ba82:	682b      	ldr	r3, [r5, #0]
 800ba84:	b103      	cbz	r3, 800ba88 <_fstat_r+0x1c>
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	bd38      	pop	{r3, r4, r5, pc}
 800ba8a:	bf00      	nop
 800ba8c:	200020b8 	.word	0x200020b8

0800ba90 <_isatty_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4d06      	ldr	r5, [pc, #24]	; (800baac <_isatty_r+0x1c>)
 800ba94:	2300      	movs	r3, #0
 800ba96:	4604      	mov	r4, r0
 800ba98:	4608      	mov	r0, r1
 800ba9a:	602b      	str	r3, [r5, #0]
 800ba9c:	f7f5 f99d 	bl	8000dda <_isatty>
 800baa0:	1c43      	adds	r3, r0, #1
 800baa2:	d102      	bne.n	800baaa <_isatty_r+0x1a>
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	b103      	cbz	r3, 800baaa <_isatty_r+0x1a>
 800baa8:	6023      	str	r3, [r4, #0]
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	200020b8 	.word	0x200020b8

0800bab0 <_init>:
 800bab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab2:	bf00      	nop
 800bab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab6:	bc08      	pop	{r3}
 800bab8:	469e      	mov	lr, r3
 800baba:	4770      	bx	lr

0800babc <_fini>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	bf00      	nop
 800bac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac2:	bc08      	pop	{r3}
 800bac4:	469e      	mov	lr, r3
 800bac6:	4770      	bx	lr
