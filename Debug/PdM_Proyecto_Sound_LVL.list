
PdM_Proyecto_Sound_LVL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e278  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800e448  0800e448  0001e448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea90  0800ea90  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea90  0800ea90  0001ea90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea98  0800ea98  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea98  0800ea98  0001ea98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea9c  0800ea9c  0001ea9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800eaa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021bc  20000168  0800ec08  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20002324  0800ec08  00022324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020106  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052ff  00000000  00000000  000402e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b48  00000000  00000000  000455e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ec  00000000  00000000  00047128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299bf  00000000  00000000  00048614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002766a  00000000  00000000  00071fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e71eb  00000000  00000000  0009963d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e08  00000000  00000000  00180828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00188630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e430 	.word	0x0800e430

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	0800e430 	.word	0x0800e430

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd22 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f814 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9be 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 f99c 	bl	8000928 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 f970 	bl	80008d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005f4:	f000 f878 	bl	80006e8 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80005f8:	f00b fae8 	bl	800bbcc <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80005fc:	f000 f8c6 	bl	800078c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000600:	f000 f8f2 	bl	80007e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000604:	f000 f93c 	bl	8000880 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  project_main();
 8000608:	f00b fada 	bl	800bbc0 <project_main>
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x30>
	...

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00c fa25 	bl	800ca6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <SystemClock_Config+0xd0>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd4>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000688:	2348      	movs	r3, #72	; 0x48
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000690:	2303      	movs	r3, #3
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f005 f969 	bl	8005974 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a8:	f000 f9e2 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f004 fadf 	bl	8004c8c <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006d4:	f000 f9cc 	bl	8000a70 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC1_Init+0x9c>)
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <MX_ADC1_Init+0xa0>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC1_Init+0x9c>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000714:	2200      	movs	r2, #0
 8000716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC1_Init+0x9c>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC1_Init+0x9c>)
 800072a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000738:	2201      	movs	r2, #1
 800073a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_ADC1_Init+0x9c>)
 800073e:	2201      	movs	r2, #1
 8000740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_ADC1_Init+0x9c>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <MX_ADC1_Init+0x9c>)
 800074c:	f000 fd02 	bl	8001154 <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000756:	f000 f98b 	bl	8000a70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075a:	2301      	movs	r3, #1
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_ADC1_Init+0x9c>)
 800076c:	f000 fe5a 	bl	8001424 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000776:	f000 f97b 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000184 	.word	0x20000184
 8000788:	40012000 	.word	0x40012000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <MX_I2C1_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_I2C1_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_I2C1_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_I2C1_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_I2C1_Init+0x50>)
 80007ca:	f001 ff9d 	bl	8002708 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f94c 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000022c 	.word	0x2000022c
 80007e0:	40005400 	.word	0x40005400
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM2_Init+0x94>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_TIM2_Init+0x94>)
 800080e:	2253      	movs	r2, #83	; 0x53
 8000810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM2_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_TIM2_Init+0x94>)
 800081a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800081e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_TIM2_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_TIM2_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <MX_TIM2_Init+0x94>)
 800082e:	f005 fb3f 	bl	8005eb0 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000838:	f000 f91a 	bl	8000a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_TIM2_Init+0x94>)
 800084a:	f005 fbe9 	bl	8006020 <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000854:	f000 f90c 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000858:	2320      	movs	r3, #32
 800085a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_TIM2_Init+0x94>)
 8000866:	f005 fde9 	bl	800643c <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 f8fe 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000280 	.word	0x20000280

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART1_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800088c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b8:	f005 fe3c 	bl	8006534 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f8d5 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200002c8 	.word	0x200002c8
 80008d0:	40011000 	.word	0x40011000

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f005 fe12 	bl	8006534 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f8ab 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000310 	.word	0x20000310
 8000924:	40004400 	.word	0x40004400

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_DMA_Init+0x3c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <MX_DMA_Init+0x3c>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_DMA_Init+0x3c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2038      	movs	r0, #56	; 0x38
 8000950:	f001 f8f3 	bl	8001b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000954:	2038      	movs	r0, #56	; 0x38
 8000956:	f001 f90c 	bl	8001b72 <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b38      	ldr	r3, [pc, #224]	; (8000a64 <MX_GPIO_Init+0xfc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a37      	ldr	r2, [pc, #220]	; (8000a64 <MX_GPIO_Init+0xfc>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <MX_GPIO_Init+0xfc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a30      	ldr	r2, [pc, #192]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <MX_GPIO_Init+0xfc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2120      	movs	r1, #32
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <MX_GPIO_Init+0x100>)
 80009f4:	f001 fe6e 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fe:	481b      	ldr	r0, [pc, #108]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a00:	f001 fe68 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a1c:	f001 fcc6 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a20:	2320      	movs	r3, #32
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_GPIO_Init+0x100>)
 8000a38:	f001 fcb8 	bl	80023ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0x104>)
 8000a56:	f001 fca9 	bl	80023ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40020800 	.word	0x40020800

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aba:	2007      	movs	r0, #7
 8000abc:	f001 f832 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a2f      	ldr	r2, [pc, #188]	; (8000ba8 <HAL_ADC_MspInit+0xdc>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d157      	bne.n	8000b9e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a26      	ldr	r2, [pc, #152]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b24      	ldr	r3, [pc, #144]	; (8000bac <HAL_ADC_MspInit+0xe0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b26:	2302      	movs	r3, #2
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <HAL_ADC_MspInit+0xe4>)
 8000b3a:	f001 fc37 	bl	80023ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <HAL_ADC_MspInit+0xec>)
 8000b42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b84:	f001 f810 	bl	8001ba8 <HAL_DMA_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b8e:	f7ff ff6f 	bl	8000a70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b96:	639a      	str	r2, [r3, #56]	; 0x38
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_ADC_MspInit+0xe8>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40012000 	.word	0x40012000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	200001cc 	.word	0x200001cc
 8000bb8:	40026410 	.word	0x40026410

08000bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_I2C_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12c      	bne.n	8000c38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c00:	2312      	movs	r3, #18
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <HAL_I2C_MspInit+0x8c>)
 8000c18:	f001 fbc8 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_I2C_MspInit+0x88>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40005400 	.word	0x40005400
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020400 	.word	0x40020400

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c5c:	d10d      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_TIM_Base_MspInit+0x3c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a36      	ldr	r2, [pc, #216]	; (8000d84 <HAL_UART_MspInit+0xf8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12d      	bne.n	8000d0a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a34      	ldr	r2, [pc, #208]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b32      	ldr	r3, [pc, #200]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4822      	ldr	r0, [pc, #136]	; (8000d8c <HAL_UART_MspInit+0x100>)
 8000d04:	f001 fb52 	bl	80023ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d08:	e038      	b.n	8000d7c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a20      	ldr	r2, [pc, #128]	; (8000d90 <HAL_UART_MspInit+0x104>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d133      	bne.n	8000d7c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_UART_MspInit+0xfc>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d4c:	230c      	movs	r3, #12
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4809      	ldr	r0, [pc, #36]	; (8000d8c <HAL_UART_MspInit+0x100>)
 8000d68:	f001 fb20 	bl	80023ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2026      	movs	r0, #38	; 0x26
 8000d72:	f000 fee2 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d76:	2026      	movs	r0, #38	; 0x26
 8000d78:	f000 fefb 	bl	8001b72 <HAL_NVIC_EnableIRQ>
}
 8000d7c:	bf00      	nop
 8000d7e:	3730      	adds	r7, #48	; 0x30
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40011000 	.word	0x40011000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40004400 	.word	0x40004400

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f974 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USART2_IRQHandler+0x10>)
 8000dee:	f005 fc7d 	bl	80066ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000310 	.word	0x20000310

08000dfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <DMA2_Stream0_IRQHandler+0x10>)
 8000e02:	f001 f869 	bl	8001ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001cc 	.word	0x200001cc

08000e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <OTG_FS_IRQHandler+0x10>)
 8000e16:	f002 fde6 	bl	80039e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20001ad4 	.word	0x20001ad4

08000e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return 1;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_kill>:

int _kill(int pid, int sig)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e3e:	f00b fe77 	bl	800cb30 <__errno>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2216      	movs	r2, #22
 8000e46:	601a      	str	r2, [r3, #0]
  return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_exit>:

void _exit (int status)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ffe7 	bl	8000e34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e66:	e7fe      	b.n	8000e66 <_exit+0x12>

08000e68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e00a      	b.n	8000e90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e7a:	f3af 8000 	nop.w
 8000e7e:	4601      	mov	r1, r0
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60ba      	str	r2, [r7, #8]
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf0      	blt.n	8000e7a <_read+0x12>
  }

  return len;
 8000e98:	687b      	ldr	r3, [r7, #4]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	e009      	b.n	8000ec8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	60ba      	str	r2, [r7, #8]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf1      	blt.n	8000eb4 <_write+0x12>
  }
  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_close>:

int _close(int file)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f02:	605a      	str	r2, [r3, #4]
  return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_isatty>:

int _isatty(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f00b fddc 	bl	800cb30 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20020000 	.word	0x20020000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	20000358 	.word	0x20000358
 8000fac:	20002328 	.word	0x20002328

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fd8:	f7ff ffea 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001002:	f00b fd9b 	bl	800cb3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fae9 	bl	80005dc <main>
  bx  lr    
 800100a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001018:	0800eaa0 	.word	0x0800eaa0
  ldr r2, =_sbss
 800101c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001020:	20002324 	.word	0x20002324

08001024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_Init+0x40>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_Init+0x40>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_Init+0x40>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 fd67 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fd0e 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fd7f 	bl	8001b8e <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 fd47 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000004 	.word	0x20000004

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	2000035c 	.word	0x2000035c

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000035c 	.word	0x2000035c

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_Delay+0x44>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffde 	bl	80010f4 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008

08001154 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e033      	b.n	80011d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fcaa 	bl	8000acc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800119a:	f023 0302 	bic.w	r3, r3, #2
 800119e:	f043 0202 	orr.w	r2, r3, #2
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fa6e 	bl	8001688 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
 80011c2:	e001      	b.n	80011c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Start_DMA+0x1e>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e0e9      	b.n	80013ce <HAL_ADC_Start_DMA+0x1f2>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	d018      	beq.n	8001242 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001220:	4b6d      	ldr	r3, [pc, #436]	; (80013d8 <HAL_ADC_Start_DMA+0x1fc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6d      	ldr	r2, [pc, #436]	; (80013dc <HAL_ADC_Start_DMA+0x200>)
 8001226:	fba2 2303 	umull	r2, r3, r2, r3
 800122a:	0c9a      	lsrs	r2, r3, #18
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001234:	e002      	b.n	800123c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	3b01      	subs	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001250:	d107      	bne.n	8001262 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001260:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b01      	cmp	r3, #1
 800126e:	f040 80a1 	bne.w	80013b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	2b00      	cmp	r3, #0
 8001292:	d007      	beq.n	80012a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800129c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b0:	d106      	bne.n	80012c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f023 0206 	bic.w	r2, r3, #6
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	645a      	str	r2, [r3, #68]	; 0x44
 80012be:	e002      	b.n	80012c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_ADC_Start_DMA+0x204>)
 80012d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	4a43      	ldr	r2, [pc, #268]	; (80013e4 <HAL_ADC_Start_DMA+0x208>)
 80012d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	4a42      	ldr	r2, [pc, #264]	; (80013e8 <HAL_ADC_Start_DMA+0x20c>)
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	4a41      	ldr	r2, [pc, #260]	; (80013ec <HAL_ADC_Start_DMA+0x210>)
 80012e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001302:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001312:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	334c      	adds	r3, #76	; 0x4c
 800131e:	4619      	mov	r1, r3
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f000 fcee 	bl	8001d04 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	2b00      	cmp	r3, #0
 8001332:	d12a      	bne.n	800138a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <HAL_ADC_Start_DMA+0x214>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d015      	beq.n	800136a <HAL_ADC_Start_DMA+0x18e>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <HAL_ADC_Start_DMA+0x218>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d105      	bne.n	8001354 <HAL_ADC_Start_DMA+0x178>
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_ADC_Start_DMA+0x204>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00a      	beq.n	800136a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <HAL_ADC_Start_DMA+0x21c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d136      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_ADC_Start_DMA+0x204>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d130      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d129      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	e020      	b.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <HAL_ADC_Start_DMA+0x214>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d11b      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d114      	bne.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	e00b      	b.n	80013cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f043 0210 	orr.w	r2, r3, #16
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000
 80013dc:	431bde83 	.word	0x431bde83
 80013e0:	40012300 	.word	0x40012300
 80013e4:	08001881 	.word	0x08001881
 80013e8:	0800193b 	.word	0x0800193b
 80013ec:	08001957 	.word	0x08001957
 80013f0:	40012000 	.word	0x40012000
 80013f4:	40012100 	.word	0x40012100
 80013f8:	40012200 	.word	0x40012200

080013fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x1c>
 800143c:	2302      	movs	r3, #2
 800143e:	e113      	b.n	8001668 <HAL_ADC_ConfigChannel+0x244>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d925      	bls.n	800149c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68d9      	ldr	r1, [r3, #12]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	3b1e      	subs	r3, #30
 8001466:	2207      	movs	r2, #7
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43da      	mvns	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	400a      	ands	r2, r1
 8001474:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68d9      	ldr	r1, [r3, #12]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	4603      	mov	r3, r0
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4403      	add	r3, r0
 800148e:	3b1e      	subs	r3, #30
 8001490:	409a      	lsls	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	e022      	b.n	80014e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6919      	ldr	r1, [r3, #16]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	2207      	movs	r2, #7
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	400a      	ands	r2, r1
 80014be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6919      	ldr	r1, [r3, #16]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4403      	add	r3, r0
 80014d8:	409a      	lsls	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d824      	bhi.n	8001534 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3b05      	subs	r3, #5
 80014fc:	221f      	movs	r2, #31
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b05      	subs	r3, #5
 8001526:	fa00 f203 	lsl.w	r2, r0, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
 8001532:	e04c      	b.n	80015ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b0c      	cmp	r3, #12
 800153a:	d824      	bhi.n	8001586 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b23      	subs	r3, #35	; 0x23
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43da      	mvns	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	400a      	ands	r2, r1
 800155c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b29b      	uxth	r3, r3
 800156a:	4618      	mov	r0, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3b23      	subs	r3, #35	; 0x23
 8001578:	fa00 f203 	lsl.w	r2, r0, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
 8001584:	e023      	b.n	80015ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b41      	subs	r3, #65	; 0x41
 8001598:	221f      	movs	r2, #31
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	3b41      	subs	r3, #65	; 0x41
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ce:	4b29      	ldr	r3, [pc, #164]	; (8001674 <HAL_ADC_ConfigChannel+0x250>)
 80015d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a28      	ldr	r2, [pc, #160]	; (8001678 <HAL_ADC_ConfigChannel+0x254>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10f      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1d8>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b12      	cmp	r3, #18
 80015e2:	d10b      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_ADC_ConfigChannel+0x254>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12b      	bne.n	800165e <HAL_ADC_ConfigChannel+0x23a>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <HAL_ADC_ConfigChannel+0x258>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d003      	beq.n	8001618 <HAL_ADC_ConfigChannel+0x1f4>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b11      	cmp	r3, #17
 8001616:	d122      	bne.n	800165e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a11      	ldr	r2, [pc, #68]	; (800167c <HAL_ADC_ConfigChannel+0x258>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d111      	bne.n	800165e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_ADC_ConfigChannel+0x25c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_ADC_ConfigChannel+0x260>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	0c9a      	lsrs	r2, r3, #18
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001650:	e002      	b.n	8001658 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3b01      	subs	r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f9      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40012300 	.word	0x40012300
 8001678:	40012000 	.word	0x40012000
 800167c:	10000012 	.word	0x10000012
 8001680:	20000000 	.word	0x20000000
 8001684:	431bde83 	.word	0x431bde83

08001688 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001690:	4b79      	ldr	r3, [pc, #484]	; (8001878 <ADC_Init+0x1f0>)
 8001692:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	021a      	lsls	r2, r3, #8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	4a58      	ldr	r2, [pc, #352]	; (800187c <ADC_Init+0x1f4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d022      	beq.n	8001766 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800172e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	e00f      	b.n	8001786 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001784:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0202 	bic.w	r2, r2, #2
 8001794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6899      	ldr	r1, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e1b      	ldrb	r3, [r3, #24]
 80017a0:	005a      	lsls	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01b      	beq.n	80017ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	3b01      	subs	r3, #1
 80017e0:	035a      	lsls	r2, r3, #13
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	e007      	b.n	80017fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	3b01      	subs	r3, #1
 8001818:	051a      	lsls	r2, r3, #20
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800183e:	025a      	lsls	r2, r3, #9
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	029a      	lsls	r2, r3, #10
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40012300 	.word	0x40012300
 800187c:	0f000001 	.word	0x0f000001

08001880 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001896:	2b00      	cmp	r3, #0
 8001898:	d13c      	bne.n	8001914 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d12b      	bne.n	800190c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d127      	bne.n	800190c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d119      	bne.n	800190c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0220 	bic.w	r2, r2, #32
 80018e6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d105      	bne.n	800190c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f043 0201 	orr.w	r2, r3, #1
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f009 fbfd 	bl	800b10c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001912:	e00e      	b.n	8001932 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7ff fd75 	bl	8001410 <HAL_ADC_ErrorCallback>
}
 8001926:	e004      	b.n	8001932 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff fd57 	bl	80013fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2240      	movs	r2, #64	; 0x40
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f043 0204 	orr.w	r2, r3, #4
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f7ff fd4a 	bl	8001410 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff29 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff3e 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff31 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fa9e 	bl	80010f4 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e099      	b.n	8001cf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be4:	e00f      	b.n	8001c06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be6:	f7ff fa85 	bl	80010f4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d908      	bls.n	8001c06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e078      	b.n	8001cf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e8      	bne.n	8001be6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_DMA_Init+0x158>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d107      	bne.n	8001c70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0307 	bic.w	r3, r3, #7
 8001c86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d117      	bne.n	8001cca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fb01 	bl	80022b4 <DMA_CheckFifoParam>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e016      	b.n	8001cf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fab8 	bl	8002248 <DMA_CalcBaseAndBitshift>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	223f      	movs	r2, #63	; 0x3f
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	f010803f 	.word	0xf010803f

08001d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_DMA_Start_IT+0x26>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e040      	b.n	8001dac <HAL_DMA_Start_IT+0xa8>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12f      	bne.n	8001d9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fa4a 	bl	80021ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	223f      	movs	r2, #63	; 0x3f
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0216 	orr.w	r2, r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e005      	b.n	8001daa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
 8001da8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dc2:	f7ff f997 	bl	80010f4 <HAL_GetTick>
 8001dc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d008      	beq.n	8001de6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e052      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0216 	bic.w	r2, r2, #22
 8001df4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_DMA_Abort+0x62>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0208 	bic.w	r2, r2, #8
 8001e24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e36:	e013      	b.n	8001e60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e38:	f7ff f95c 	bl	80010f4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d90c      	bls.n	8001e60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e015      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e4      	bne.n	8001e38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	223f      	movs	r2, #63	; 0x3f
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00c      	b.n	8001ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee4:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_DMA_IRQHandler+0x248>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a8e      	ldr	r2, [pc, #568]	; (8002124 <HAL_DMA_IRQHandler+0x24c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a9b      	lsrs	r3, r3, #10
 8001ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2208      	movs	r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2208      	movs	r2, #8
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2201      	movs	r2, #1
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	2201      	movs	r2, #1
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f043 0202 	orr.w	r2, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2204      	movs	r2, #4
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d043      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03c      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d024      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e01f      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e016      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0208 	bic.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2220      	movs	r2, #32
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 808f 	beq.w	8002178 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8087 	beq.w	8002178 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2220      	movs	r2, #32
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b05      	cmp	r3, #5
 8002080:	d136      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0216 	bic.w	r2, r2, #22
 8002090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x1da>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0208 	bic.w	r2, r2, #8
 80020c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	223f      	movs	r2, #63	; 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d07e      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
        }
        return;
 80020ee:	e079      	b.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01d      	beq.n	800213a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10d      	bne.n	8002128 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	2b00      	cmp	r3, #0
 8002112:	d031      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e02c      	b.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000
 8002124:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
 8002138:	e01e      	b.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0210 	bic.w	r2, r2, #16
 8002156:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	2b00      	cmp	r3, #0
 800217e:	d032      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d022      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2205      	movs	r2, #5
 8002190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3301      	adds	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d307      	bcc.n	80021c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f2      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x2cc>
 80021be:	e000      	b.n	80021c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e000      	b.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021e4:	bf00      	nop
    }
  }
}
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002208:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b40      	cmp	r3, #64	; 0x40
 8002218:	d108      	bne.n	800222c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800222a:	e007      	b.n	800223c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3b10      	subs	r3, #16
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <DMA_CalcBaseAndBitshift+0x64>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d909      	bls.n	800228a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	659a      	str	r2, [r3, #88]	; 0x58
 8002288:	e007      	b.n	800229a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	aaaaaaab 	.word	0xaaaaaaab
 80022b0:	0800e8d8 	.word	0x0800e8d8

080022b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d11f      	bne.n	800230e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d856      	bhi.n	8002382 <DMA_CheckFifoParam+0xce>
 80022d4:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <DMA_CheckFifoParam+0x28>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022ff 	.word	0x080022ff
 80022e4:	080022ed 	.word	0x080022ed
 80022e8:	08002383 	.word	0x08002383
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d046      	beq.n	8002386 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fc:	e043      	b.n	8002386 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002306:	d140      	bne.n	800238a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230c:	e03d      	b.n	800238a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002316:	d121      	bne.n	800235c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d837      	bhi.n	800238e <DMA_CheckFifoParam+0xda>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <DMA_CheckFifoParam+0x70>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	0800233b 	.word	0x0800233b
 800232c:	08002335 	.word	0x08002335
 8002330:	0800234d 	.word	0x0800234d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e030      	b.n	800239c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d025      	beq.n	8002392 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234a:	e022      	b.n	8002392 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002354:	d11f      	bne.n	8002396 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800235a:	e01c      	b.n	8002396 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d903      	bls.n	800236a <DMA_CheckFifoParam+0xb6>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d003      	beq.n	8002370 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002368:	e018      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      break;
 800236e:	e015      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e00b      	b.n	800239a <DMA_CheckFifoParam+0xe6>
      break;
 8002382:	bf00      	nop
 8002384:	e00a      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
 8002388:	e008      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
 800238c:	e006      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e004      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e002      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;   
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
    }
  } 
  
  return status; 
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e165      	b.n	8002694 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 8154 	bne.w	800268e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80ae 	beq.w	800268e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b5d      	ldr	r3, [pc, #372]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a5c      	ldr	r2, [pc, #368]	; (80026ac <HAL_GPIO_Init+0x300>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b5a      	ldr	r3, [pc, #360]	; (80026ac <HAL_GPIO_Init+0x300>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a58      	ldr	r2, [pc, #352]	; (80026b0 <HAL_GPIO_Init+0x304>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4f      	ldr	r2, [pc, #316]	; (80026b4 <HAL_GPIO_Init+0x308>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d025      	beq.n	80025c6 <HAL_GPIO_Init+0x21a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <HAL_GPIO_Init+0x30c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01f      	beq.n	80025c2 <HAL_GPIO_Init+0x216>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4d      	ldr	r2, [pc, #308]	; (80026bc <HAL_GPIO_Init+0x310>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d019      	beq.n	80025be <HAL_GPIO_Init+0x212>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <HAL_GPIO_Init+0x314>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x20e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4b      	ldr	r2, [pc, #300]	; (80026c4 <HAL_GPIO_Init+0x318>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x20a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4a      	ldr	r2, [pc, #296]	; (80026c8 <HAL_GPIO_Init+0x31c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x206>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a49      	ldr	r2, [pc, #292]	; (80026cc <HAL_GPIO_Init+0x320>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x202>
 80025aa:	2306      	movs	r3, #6
 80025ac:	e00c      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025ae:	2307      	movs	r3, #7
 80025b0:	e00a      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025b2:	2305      	movs	r3, #5
 80025b4:	e008      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025b6:	2304      	movs	r3, #4
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025ba:	2303      	movs	r3, #3
 80025bc:	e004      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025be:	2302      	movs	r3, #2
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x21c>
 80025c6:	2300      	movs	r3, #0
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	f002 0203 	and.w	r2, r2, #3
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	4093      	lsls	r3, r2
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d8:	4935      	ldr	r1, [pc, #212]	; (80026b0 <HAL_GPIO_Init+0x304>)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e6:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <HAL_GPIO_Init+0x324>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260a:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <HAL_GPIO_Init+0x324>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002610:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002634:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800263a:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_GPIO_Init+0x324>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_GPIO_Init+0x324>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002688:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <HAL_GPIO_Init+0x324>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3301      	adds	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b0f      	cmp	r3, #15
 8002698:	f67f ae96 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40013800 	.word	0x40013800
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40021400 	.word	0x40021400
 80026cc:	40021800 	.word	0x40021800
 80026d0:	40013c00 	.word	0x40013c00

080026d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
 80026e0:	4613      	mov	r3, r2
 80026e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e4:	787b      	ldrb	r3, [r7, #1]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026f0:	e003      	b.n	80026fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	041a      	lsls	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	619a      	str	r2, [r3, #24]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e12b      	b.n	8002972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe fa44 	bl	8000bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2224      	movs	r2, #36	; 0x24
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800275a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800276a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800276c:	f002 fb80 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 8002770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a81      	ldr	r2, [pc, #516]	; (800297c <HAL_I2C_Init+0x274>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d807      	bhi.n	800278c <HAL_I2C_Init+0x84>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a80      	ldr	r2, [pc, #512]	; (8002980 <HAL_I2C_Init+0x278>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bf94      	ite	ls
 8002784:	2301      	movls	r3, #1
 8002786:	2300      	movhi	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	e006      	b.n	800279a <HAL_I2C_Init+0x92>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a7d      	ldr	r2, [pc, #500]	; (8002984 <HAL_I2C_Init+0x27c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	bf94      	ite	ls
 8002794:	2301      	movls	r3, #1
 8002796:	2300      	movhi	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e0e7      	b.n	8002972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a78      	ldr	r2, [pc, #480]	; (8002988 <HAL_I2C_Init+0x280>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0c9b      	lsrs	r3, r3, #18
 80027ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a6a      	ldr	r2, [pc, #424]	; (800297c <HAL_I2C_Init+0x274>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d802      	bhi.n	80027dc <HAL_I2C_Init+0xd4>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3301      	adds	r3, #1
 80027da:	e009      	b.n	80027f0 <HAL_I2C_Init+0xe8>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	4a69      	ldr	r2, [pc, #420]	; (800298c <HAL_I2C_Init+0x284>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	3301      	adds	r3, #1
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	430b      	orrs	r3, r1
 80027f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	495c      	ldr	r1, [pc, #368]	; (800297c <HAL_I2C_Init+0x274>)
 800280c:	428b      	cmp	r3, r1
 800280e:	d819      	bhi.n	8002844 <HAL_I2C_Init+0x13c>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e59      	subs	r1, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fbb1 f3f3 	udiv	r3, r1, r3
 800281e:	1c59      	adds	r1, r3, #1
 8002820:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002824:	400b      	ands	r3, r1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_I2C_Init+0x138>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1e59      	subs	r1, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fbb1 f3f3 	udiv	r3, r1, r3
 8002838:	3301      	adds	r3, #1
 800283a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800283e:	e051      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 8002840:	2304      	movs	r3, #4
 8002842:	e04f      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d111      	bne.n	8002870 <HAL_I2C_Init+0x168>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e58      	subs	r0, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	440b      	add	r3, r1
 800285a:	fbb0 f3f3 	udiv	r3, r0, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e012      	b.n	8002896 <HAL_I2C_Init+0x18e>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Init+0x196>
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10e      	bne.n	80028c4 <HAL_I2C_Init+0x1bc>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e58      	subs	r0, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	460b      	mov	r3, r1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	440b      	add	r3, r1
 80028b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b8:	3301      	adds	r3, #1
 80028ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c2:	e00f      	b.n	80028e4 <HAL_I2C_Init+0x1dc>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	6809      	ldr	r1, [r1, #0]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6911      	ldr	r1, [r2, #16]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	4311      	orrs	r1, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	430b      	orrs	r3, r1
 8002926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	000186a0 	.word	0x000186a0
 8002980:	001e847f 	.word	0x001e847f
 8002984:	003d08ff 	.word	0x003d08ff
 8002988:	431bde83 	.word	0x431bde83
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	817b      	strh	r3, [r7, #10]
 80029a2:	460b      	mov	r3, r1
 80029a4:	813b      	strh	r3, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029aa:	f7fe fba3 	bl	80010f4 <HAL_GetTick>
 80029ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	f040 80d9 	bne.w	8002b70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2319      	movs	r3, #25
 80029c4:	2201      	movs	r2, #1
 80029c6:	496d      	ldr	r1, [pc, #436]	; (8002b7c <HAL_I2C_Mem_Write+0x1ec>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fc8b 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
 80029d6:	e0cc      	b.n	8002b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_I2C_Mem_Write+0x56>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e0c5      	b.n	8002b72 <HAL_I2C_Mem_Write+0x1e2>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d007      	beq.n	8002a0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2221      	movs	r2, #33	; 0x21
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a3a      	ldr	r2, [r7, #32]
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a4d      	ldr	r2, [pc, #308]	; (8002b80 <HAL_I2C_Mem_Write+0x1f0>)
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a4e:	88f8      	ldrh	r0, [r7, #6]
 8002a50:	893a      	ldrh	r2, [r7, #8]
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fac2 	bl	8002fe8 <I2C_RequestMemoryWrite>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d052      	beq.n	8002b10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e081      	b.n	8002b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fd50 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00d      	beq.n	8002a9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d107      	bne.n	8002a96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06b      	b.n	8002b72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d11b      	bne.n	8002b10 <HAL_I2C_Mem_Write+0x180>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d017      	beq.n	8002b10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1aa      	bne.n	8002a6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fd43 	bl	80035a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d107      	bne.n	8002b40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e016      	b.n	8002b72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	00100002 	.word	0x00100002
 8002b80:	ffff0000 	.word	0xffff0000

08002b84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08c      	sub	sp, #48	; 0x30
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	817b      	strh	r3, [r7, #10]
 8002b96:	460b      	mov	r3, r1
 8002b98:	813b      	strh	r3, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b9e:	f7fe faa9 	bl	80010f4 <HAL_GetTick>
 8002ba2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	f040 8214 	bne.w	8002fda <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2319      	movs	r3, #25
 8002bb8:	2201      	movs	r2, #1
 8002bba:	497b      	ldr	r1, [pc, #492]	; (8002da8 <HAL_I2C_Mem_Read+0x224>)
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fb91 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e207      	b.n	8002fdc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_I2C_Mem_Read+0x56>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e200      	b.n	8002fdc <HAL_I2C_Mem_Read+0x458>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d007      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2222      	movs	r2, #34	; 0x22
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2240      	movs	r2, #64	; 0x40
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	; (8002dac <HAL_I2C_Mem_Read+0x228>)
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c42:	88f8      	ldrh	r0, [r7, #6]
 8002c44:	893a      	ldrh	r2, [r7, #8]
 8002c46:	8979      	ldrh	r1, [r7, #10]
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	9301      	str	r3, [sp, #4]
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4603      	mov	r3, r0
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fa5e 	bl	8003114 <I2C_RequestMemoryRead>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e1bc      	b.n	8002fdc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d113      	bne.n	8002c92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	623b      	str	r3, [r7, #32]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e190      	b.n	8002fb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d11b      	bne.n	8002cd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e170      	b.n	8002fb4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d11b      	bne.n	8002d12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	e150      	b.n	8002fb4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d28:	e144      	b.n	8002fb4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	f200 80f1 	bhi.w	8002f16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d123      	bne.n	8002d84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fc79 	bl	8003638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e145      	b.n	8002fdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d82:	e117      	b.n	8002fb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d14e      	bne.n	8002e2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	2200      	movs	r2, #0
 8002d94:	4906      	ldr	r1, [pc, #24]	; (8002db0 <HAL_I2C_Mem_Read+0x22c>)
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 faa4 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e11a      	b.n	8002fdc <HAL_I2C_Mem_Read+0x458>
 8002da6:	bf00      	nop
 8002da8:	00100002 	.word	0x00100002
 8002dac:	ffff0000 	.word	0xffff0000
 8002db0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e28:	e0c4      	b.n	8002fb4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	2200      	movs	r2, #0
 8002e32:	496c      	ldr	r1, [pc, #432]	; (8002fe4 <HAL_I2C_Mem_Read+0x460>)
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fa55 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0cb      	b.n	8002fdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4955      	ldr	r1, [pc, #340]	; (8002fe4 <HAL_I2C_Mem_Read+0x460>)
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fa27 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e09d      	b.n	8002fdc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f14:	e04e      	b.n	8002fb4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fb8c 	bl	8003638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e058      	b.n	8002fdc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d124      	bne.n	8002fb4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d107      	bne.n	8002f82 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f aeb6 	bne.w	8002d2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
  }
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3728      	adds	r7, #40	; 0x28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	00010004 	.word	0x00010004

08002fe8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	817b      	strh	r3, [r7, #10]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	813b      	strh	r3, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	2200      	movs	r2, #0
 800301a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f960 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003038:	d103      	bne.n	8003042 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e05f      	b.n	8003106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	6a3a      	ldr	r2, [r7, #32]
 800305a:	492d      	ldr	r1, [pc, #180]	; (8003110 <I2C_RequestMemoryWrite+0x128>)
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f9bb 	bl	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e04c      	b.n	8003106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	6a39      	ldr	r1, [r7, #32]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa46 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2b04      	cmp	r3, #4
 8003098:	d107      	bne.n	80030aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e02b      	b.n	8003106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030b4:	893b      	ldrh	r3, [r7, #8]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	611a      	str	r2, [r3, #16]
 80030be:	e021      	b.n	8003104 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d0:	6a39      	ldr	r1, [r7, #32]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fa20 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d107      	bne.n	80030f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e005      	b.n	8003106 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030fa:	893b      	ldrh	r3, [r7, #8]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	00010002 	.word	0x00010002

08003114 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	817b      	strh	r3, [r7, #10]
 8003126:	460b      	mov	r3, r1
 8003128:	813b      	strh	r3, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800313c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800314c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	2200      	movs	r2, #0
 8003156:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f8c2 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003174:	d103      	bne.n	800317e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0aa      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	6a3a      	ldr	r2, [r7, #32]
 8003196:	4952      	ldr	r1, [pc, #328]	; (80032e0 <I2C_RequestMemoryRead+0x1cc>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f91d 	bl	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e097      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c0:	6a39      	ldr	r1, [r7, #32]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f9a8 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d107      	bne.n	80031e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e076      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031f0:	893b      	ldrh	r3, [r7, #8]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	611a      	str	r2, [r3, #16]
 80031fa:	e021      	b.n	8003240 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031fc:	893b      	ldrh	r3, [r7, #8]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	b29b      	uxth	r3, r3
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800320a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320c:	6a39      	ldr	r1, [r7, #32]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f982 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b04      	cmp	r3, #4
 8003220:	d107      	bne.n	8003232 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e050      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003236:	893b      	ldrh	r3, [r7, #8]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003242:	6a39      	ldr	r1, [r7, #32]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f967 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	2b04      	cmp	r3, #4
 8003256:	d107      	bne.n	8003268 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003266:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e035      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800327a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	2200      	movs	r2, #0
 8003284:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f82b 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a2:	d103      	bne.n	80032ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e013      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032b0:	897b      	ldrh	r3, [r7, #10]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	6a3a      	ldr	r2, [r7, #32]
 80032c4:	4906      	ldr	r1, [pc, #24]	; (80032e0 <I2C_RequestMemoryRead+0x1cc>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f886 	bl	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	00010002 	.word	0x00010002

080032e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f4:	e048      	b.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d044      	beq.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fe:	f7fd fef9 	bl	80010f4 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d139      	bne.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d10d      	bne.n	800333a <I2C_WaitOnFlagUntilTimeout+0x56>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	e00c      	b.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x70>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	43da      	mvns	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4013      	ands	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	429a      	cmp	r2, r3
 8003358:	d116      	bne.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e023      	b.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	0c1b      	lsrs	r3, r3, #16
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10d      	bne.n	80033ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	e00c      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	43da      	mvns	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d093      	beq.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033e6:	e071      	b.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f6:	d123      	bne.n	8003440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f043 0204 	orr.w	r2, r3, #4
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e067      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d041      	beq.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003448:	f7fd fe54 	bl	80010f4 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d302      	bcc.n	800345e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d136      	bne.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d10c      	bne.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4013      	ands	r3, r2
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	bf14      	ite	ne
 800347a:	2301      	movne	r3, #1
 800347c:	2300      	moveq	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	e00b      	b.n	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	43da      	mvns	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4013      	ands	r3, r2
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e021      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10c      	bne.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	43da      	mvns	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e00b      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4013      	ands	r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf14      	ite	ne
 8003502:	2301      	movne	r3, #1
 8003504:	2300      	moveq	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	f47f af6d 	bne.w	80033e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003524:	e034      	b.n	8003590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f8e3 	bl	80036f2 <I2C_IsAcknowledgeFailed>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e034      	b.n	80035a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d028      	beq.n	8003590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7fd fdd9 	bl	80010f4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11d      	bne.n	8003590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d016      	beq.n	8003590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e007      	b.n	80035a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b80      	cmp	r3, #128	; 0x80
 800359c:	d1c3      	bne.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035b4:	e034      	b.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f89b 	bl	80036f2 <I2C_IsAcknowledgeFailed>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e034      	b.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d028      	beq.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fd fd91 	bl	80010f4 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11d      	bne.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d016      	beq.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d1c3      	bne.n	80035b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003644:	e049      	b.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d119      	bne.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0210 	mvn.w	r2, #16
 800365c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e030      	b.n	80036ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fd fd34 	bl	80010f4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11d      	bne.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b40      	cmp	r3, #64	; 0x40
 80036aa:	d016      	beq.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e007      	b.n	80036ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b40      	cmp	r3, #64	; 0x40
 80036e6:	d1ae      	bne.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003708:	d11b      	bne.n	8003742 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003712:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e108      	b.n	8003974 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f008 fc47 	bl	800c010 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2203      	movs	r2, #3
 8003786:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003790:	d102      	bne.n	8003798 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f003 ffe2 	bl	8007766 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7c1a      	ldrb	r2, [r3, #16]
 80037aa:	f88d 2000 	strb.w	r2, [sp]
 80037ae:	3304      	adds	r3, #4
 80037b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b2:	f003 fec1 	bl	8007538 <USB_CoreInit>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d5      	b.n	8003974 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 ffda 	bl	8007788 <USB_SetCurrentMode>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0c6      	b.n	8003974 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e04a      	b.n	8003882 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ec:	7bfa      	ldrb	r2, [r7, #15]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3315      	adds	r3, #21
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3314      	adds	r3, #20
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	b298      	uxth	r0, r3
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	332e      	adds	r3, #46	; 0x2e
 8003828:	4602      	mov	r2, r0
 800382a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800382c:	7bfa      	ldrb	r2, [r7, #15]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3318      	adds	r3, #24
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003840:	7bfa      	ldrb	r2, [r7, #15]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	331c      	adds	r3, #28
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3320      	adds	r3, #32
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3324      	adds	r3, #36	; 0x24
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	3301      	adds	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	791b      	ldrb	r3, [r3, #4]
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	429a      	cmp	r2, r3
 800388a:	d3af      	bcc.n	80037ec <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388c:	2300      	movs	r3, #0
 800388e:	73fb      	strb	r3, [r7, #15]
 8003890:	e044      	b.n	800391c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	f203 2355 	addw	r3, r3, #597	; 0x255
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	3301      	adds	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	791b      	ldrb	r3, [r3, #4]
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	429a      	cmp	r2, r3
 8003924:	d3b5      	bcc.n	8003892 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7c1a      	ldrb	r2, [r3, #16]
 800392e:	f88d 2000 	strb.w	r2, [sp]
 8003932:	3304      	adds	r3, #4
 8003934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003936:	f003 ff73 	bl	8007820 <USB_DevInit>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e013      	b.n	8003974 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7b1b      	ldrb	r3, [r3, #12]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f001 f96e 	bl	8004c44 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f004 ffb0 	bl	80088d2 <USB_DevDisconnect>

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_PCD_Start+0x1c>
 8003994:	2302      	movs	r3, #2
 8003996:	e022      	b.n	80039de <HAL_PCD_Start+0x62>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f003 febd 	bl	8007744 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 ff5e 	bl	8008890 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039e6:	b590      	push	{r4, r7, lr}
 80039e8:	b08d      	sub	sp, #52	; 0x34
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f005 f81c 	bl	8008a3a <USB_GetMode>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f040 84b9 	bne.w	800437c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 ff80 	bl	8008914 <USB_ReadInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 84af 	beq.w	800437a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f004 ff6d 	bl	8008914 <USB_ReadInterrupts>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d107      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f002 0202 	and.w	r2, r2, #2
 8003a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f004 ff5b 	bl	8008914 <USB_ReadInterrupts>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d161      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0210 	bic.w	r2, r2, #16
 8003a76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	0c5b      	lsrs	r3, r3, #17
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d124      	bne.n	8003aee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d035      	beq.n	8003b1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6a38      	ldr	r0, [r7, #32]
 8003ac4:	f004 fd92 	bl	80085ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad4:	441a      	add	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae6:	441a      	add	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	615a      	str	r2, [r3, #20]
 8003aec:	e016      	b.n	8003b1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	0c5b      	lsrs	r3, r3, #17
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d110      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003b00:	2208      	movs	r2, #8
 8003b02:	4619      	mov	r1, r3
 8003b04:	6a38      	ldr	r0, [r7, #32]
 8003b06:	f004 fd71 	bl	80085ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b16:	441a      	add	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0210 	orr.w	r2, r2, #16
 8003b2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f004 feef 	bl	8008914 <USB_ReadInterrupts>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b40:	f040 80a7 	bne.w	8003c92 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f004 fef4 	bl	800893a <USB_ReadDevAllOutEpInterrupt>
 8003b52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b54:	e099      	b.n	8003c8a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 808e 	beq.w	8003c7e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f004 ff18 	bl	80089a2 <USB_ReadDevOutEPInterrupt>
 8003b72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00c      	beq.n	8003b98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fed0 	bl	8004938 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 ffa6 	bl	8004b08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d030      	beq.n	8003c44 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d109      	bne.n	8003c02 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c00:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	3304      	adds	r3, #4
 8003c16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	78db      	ldrb	r3, [r3, #3]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d108      	bne.n	8003c32 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2200      	movs	r2, #0
 8003c24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f008 fb0b 	bl	800c248 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2302      	movs	r3, #2
 8003c42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c76:	461a      	mov	r2, r3
 8003c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	3301      	adds	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f47f af62 	bne.w	8003b56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fe3c 	bl	8008914 <USB_ReadInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ca6:	f040 80db 	bne.w	8003e60 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f004 fe5d 	bl	800896e <USB_ReadDevAllInEpInterrupt>
 8003cb4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003cba:	e0cd      	b.n	8003e58 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80c2 	beq.w	8003e4c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 fe83 	bl	80089de <USB_ReadDevInEPInterrupt>
 8003cd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d057      	beq.n	8003d94 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	2201      	movs	r2, #1
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69f9      	ldr	r1, [r7, #28]
 8003d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d04:	4013      	ands	r3, r2
 8003d06:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d14:	461a      	mov	r2, r3
 8003d16:	2301      	movs	r3, #1
 8003d18:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	799b      	ldrb	r3, [r3, #6]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d132      	bne.n	8003d88 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	3320      	adds	r3, #32
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4403      	add	r3, r0
 8003d42:	331c      	adds	r3, #28
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4419      	add	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4403      	add	r3, r0
 8003d56:	3320      	adds	r3, #32
 8003d58:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d113      	bne.n	8003d88 <HAL_PCD_IRQHandler+0x3a2>
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	3324      	adds	r3, #36	; 0x24
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003d80:	461a      	mov	r2, r3
 8003d82:	2101      	movs	r1, #1
 8003d84:	f004 fe8a 	bl	8008a9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f008 f9d5 	bl	800c13e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003daa:	461a      	mov	r2, r3
 8003dac:	2308      	movs	r3, #8
 8003dae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2310      	movs	r3, #16
 8003dca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de2:	461a      	mov	r2, r3
 8003de4:	2340      	movs	r3, #64	; 0x40
 8003de6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d023      	beq.n	8003e3a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df4:	6a38      	ldr	r0, [r7, #32]
 8003df6:	f003 fe71 	bl	8007adc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	3310      	adds	r3, #16
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	78db      	ldrb	r3, [r3, #3]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d108      	bne.n	8003e28 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f008 fa22 	bl	800c26c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e34:	461a      	mov	r2, r3
 8003e36:	2302      	movs	r3, #2
 8003e38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fcea 	bl	8004820 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	3301      	adds	r3, #1
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f47f af2e 	bne.w	8003cbc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 fd55 	bl	8008914 <USB_ReadInterrupts>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e74:	d122      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d108      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f008 fb9c 	bl	800c5dc <HAL_PCDEx_LPM_Callback>
 8003ea4:	e002      	b.n	8003eac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f008 f9c0 	bl	800c22c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f004 fd27 	bl	8008914 <USB_ReadInterrupts>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed0:	d112      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d102      	bne.n	8003ee8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f008 f97c 	bl	800c1e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ef6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 fd09 	bl	8008914 <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f0c:	d121      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003f1c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d111      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	f003 020f 	and.w	r2, r3, #15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f42:	2101      	movs	r1, #1
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f008 fb49 	bl	800c5dc <HAL_PCDEx_LPM_Callback>
 8003f4a:	e002      	b.n	8003f52 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f008 f947 	bl	800c1e0 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f004 fcdc 	bl	8008914 <USB_ReadInterrupts>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	f040 80b7 	bne.w	80040d8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2110      	movs	r1, #16
 8003f84:	4618      	mov	r0, r3
 8003f86:	f003 fda9 	bl	8007adc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f8e:	e046      	b.n	800401e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fa2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fd6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ff6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004008:	0151      	lsls	r1, r2, #5
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	440a      	add	r2, r1
 800400e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004012:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004016:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	3301      	adds	r3, #1
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	791b      	ldrb	r3, [r3, #4]
 8004022:	461a      	mov	r2, r3
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	4293      	cmp	r3, r2
 8004028:	d3b2      	bcc.n	8003f90 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004038:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800403c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	7bdb      	ldrb	r3, [r3, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d016      	beq.n	8004074 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004056:	f043 030b 	orr.w	r3, r3, #11
 800405a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800406c:	f043 030b 	orr.w	r3, r3, #11
 8004070:	6453      	str	r3, [r2, #68]	; 0x44
 8004072:	e015      	b.n	80040a0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004086:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800408a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800409a:	f043 030b 	orr.w	r3, r3, #11
 800409e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040c2:	461a      	mov	r2, r3
 80040c4:	f004 fcea 	bl	8008a9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f004 fc19 	bl	8008914 <USB_ReadInterrupts>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ec:	d123      	bne.n	8004136 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f004 fcaf 	bl	8008a56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f003 fd66 	bl	8007bce <USB_GetDevSpeed>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681c      	ldr	r4, [r3, #0]
 800410e:	f000 fea3 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004112:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004118:	461a      	mov	r2, r3
 800411a:	4620      	mov	r0, r4
 800411c:	f003 fa70 	bl	8007600 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f008 f834 	bl	800c18e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004134:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f004 fbea 	bl	8008914 <USB_ReadInterrupts>
 8004140:	4603      	mov	r3, r0
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b08      	cmp	r3, #8
 8004148:	d10a      	bne.n	8004160 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f008 f811 	bl	800c172 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f002 0208 	and.w	r2, r2, #8
 800415e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f004 fbd5 	bl	8008914 <USB_ReadInterrupts>
 800416a:	4603      	mov	r3, r0
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	2b80      	cmp	r3, #128	; 0x80
 8004172:	d123      	bne.n	80041bc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004180:	2301      	movs	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	e014      	b.n	80041b0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d105      	bne.n	80041aa <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	4619      	mov	r1, r3
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fb0a 	bl	80047be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	3301      	adds	r3, #1
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	791b      	ldrb	r3, [r3, #4]
 80041b4:	461a      	mov	r2, r3
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d3e4      	bcc.n	8004186 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 fba7 	bl	8008914 <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d0:	d13c      	bne.n	800424c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041d2:	2301      	movs	r3, #1
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	e02b      	b.n	8004230 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	3318      	adds	r3, #24
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d115      	bne.n	800422a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004200:	2b00      	cmp	r3, #0
 8004202:	da12      	bge.n	800422a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	4613      	mov	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	3317      	adds	r3, #23
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004220:	b2db      	uxtb	r3, r3
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 faca 	bl	80047be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	3301      	adds	r3, #1
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	791b      	ldrb	r3, [r3, #4]
 8004234:	461a      	mov	r2, r3
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	4293      	cmp	r3, r2
 800423a:	d3cd      	bcc.n	80041d8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800424a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f004 fb5f 	bl	8008914 <USB_ReadInterrupts>
 8004256:	4603      	mov	r3, r0
 8004258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800425c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004260:	d156      	bne.n	8004310 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004262:	2301      	movs	r3, #1
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	e045      	b.n	80042f4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d12e      	bne.n	80042ee <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004290:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004292:	2b00      	cmp	r3, #0
 8004294:	da2b      	bge.n	80042ee <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80042a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d121      	bne.n	80042ee <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	f203 2357 	addw	r3, r3, #599	; 0x257
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ea:	6053      	str	r3, [r2, #4]
            break;
 80042ec:	e008      	b.n	8004300 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	3301      	adds	r3, #1
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	791b      	ldrb	r3, [r3, #4]
 80042f8:	461a      	mov	r2, r3
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d3b3      	bcc.n	8004268 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800430e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f004 fafd 	bl	8008914 <USB_ReadInterrupts>
 800431a:	4603      	mov	r3, r0
 800431c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d10a      	bne.n	800433c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f007 ffb2 	bl	800c290 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800433a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f004 fae7 	bl	8008914 <USB_ReadInterrupts>
 8004346:	4603      	mov	r3, r0
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d115      	bne.n	800437c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f007 ffa2 	bl	800c2ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	430a      	orrs	r2, r1
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	e000      	b.n	800437c <HAL_PCD_IRQHandler+0x996>
      return;
 800437a:	bf00      	nop
    }
  }
}
 800437c:	3734      	adds	r7, #52	; 0x34
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}

08004382 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_PCD_SetAddress+0x1a>
 8004398:	2302      	movs	r3, #2
 800439a:	e012      	b.n	80043c2 <HAL_PCD_SetAddress+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f004 fa46 	bl	8008844 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	4608      	mov	r0, r1
 80043d4:	4611      	mov	r1, r2
 80043d6:	461a      	mov	r2, r3
 80043d8:	4603      	mov	r3, r0
 80043da:	70fb      	strb	r3, [r7, #3]
 80043dc:	460b      	mov	r3, r1
 80043de:	803b      	strh	r3, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da0f      	bge.n	8004410 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 020f 	and.w	r2, r3, #15
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	3310      	adds	r3, #16
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	3304      	adds	r3, #4
 8004406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	705a      	strb	r2, [r3, #1]
 800440e:	e00f      	b.n	8004430 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 020f 	and.w	r2, r3, #15
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	4413      	add	r3, r2
 8004426:	3304      	adds	r3, #4
 8004428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800443c:	883b      	ldrh	r3, [r7, #0]
 800443e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	78ba      	ldrb	r2, [r7, #2]
 800444a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	785b      	ldrb	r3, [r3, #1]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800445e:	78bb      	ldrb	r3, [r7, #2]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d102      	bne.n	800446a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_PCD_EP_Open+0xae>
 8004474:	2302      	movs	r3, #2
 8004476:	e00e      	b.n	8004496 <HAL_PCD_EP_Open+0xcc>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	4618      	mov	r0, r3
 8004488:	f003 fbc6 	bl	8007c18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004494:	7afb      	ldrb	r3, [r7, #11]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b084      	sub	sp, #16
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	460b      	mov	r3, r1
 80044a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da0f      	bge.n	80044d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	3310      	adds	r3, #16
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	3304      	adds	r3, #4
 80044c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	705a      	strb	r2, [r3, #1]
 80044d0:	e00f      	b.n	80044f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	f003 020f 	and.w	r2, r3, #15
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4413      	add	r3, r2
 80044e8:	3304      	adds	r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_PCD_EP_Close+0x6e>
 8004508:	2302      	movs	r3, #2
 800450a:	e00e      	b.n	800452a <HAL_PCD_EP_Close+0x8c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	4618      	mov	r0, r3
 800451c:	f003 fc04 	bl	8007d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b086      	sub	sp, #24
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	460b      	mov	r3, r1
 8004540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004542:	7afb      	ldrb	r3, [r7, #11]
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	3304      	adds	r3, #4
 800455a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004574:	7afb      	ldrb	r3, [r7, #11]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	b2da      	uxtb	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	799b      	ldrb	r3, [r3, #6]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d102      	bne.n	800458e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	799b      	ldrb	r3, [r3, #6]
 8004596:	461a      	mov	r2, r3
 8004598:	6979      	ldr	r1, [r7, #20]
 800459a:	f003 fca1 	bl	8007ee0 <USB_EPStartXfer>

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	f003 020f 	and.w	r2, r3, #15
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	460b      	mov	r3, r1
 80045e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e8:	7afb      	ldrb	r3, [r7, #11]
 80045ea:	f003 020f 	and.w	r2, r3, #15
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	3310      	adds	r3, #16
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	3304      	adds	r3, #4
 80045fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2200      	movs	r2, #0
 8004610:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2201      	movs	r2, #1
 8004616:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	b2da      	uxtb	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	799b      	ldrb	r3, [r3, #6]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d102      	bne.n	8004632 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	799b      	ldrb	r3, [r3, #6]
 800463a:	461a      	mov	r2, r3
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	f003 fc4f 	bl	8007ee0 <USB_EPStartXfer>

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	7912      	ldrb	r2, [r2, #4]
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e04f      	b.n	800470a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800466a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800466e:	2b00      	cmp	r3, #0
 8004670:	da0f      	bge.n	8004692 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 020f 	and.w	r2, r3, #15
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	3310      	adds	r3, #16
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	3304      	adds	r3, #4
 8004688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	705a      	strb	r2, [r3, #1]
 8004690:	e00d      	b.n	80046ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	4413      	add	r3, r2
 80046a4:	3304      	adds	r3, #4
 80046a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_PCD_EP_SetStall+0x82>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e01d      	b.n	800470a <HAL_PCD_EP_SetStall+0xbe>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	4618      	mov	r0, r3
 80046de:	f003 ffdd 	bl	800869c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	7999      	ldrb	r1, [r3, #6]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80046fa:	461a      	mov	r2, r3
 80046fc:	f004 f9ce 	bl	8008a9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b084      	sub	sp, #16
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	7912      	ldrb	r2, [r2, #4]
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e042      	b.n	80047b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004734:	2b00      	cmp	r3, #0
 8004736:	da0f      	bge.n	8004758 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 020f 	and.w	r2, r3, #15
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	3310      	adds	r3, #16
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	3304      	adds	r3, #4
 800474e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	705a      	strb	r2, [r3, #1]
 8004756:	e00f      	b.n	8004778 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 020f 	and.w	r2, r3, #15
 800475e:	4613      	mov	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	3304      	adds	r3, #4
 8004770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_PCD_EP_ClrStall+0x86>
 8004794:	2302      	movs	r3, #2
 8004796:	e00e      	b.n	80047b6 <HAL_PCD_EP_ClrStall+0xa4>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68f9      	ldr	r1, [r7, #12]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f003 ffe6 	bl	8008778 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	460b      	mov	r3, r1
 80047c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	da0c      	bge.n	80047ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	f003 020f 	and.w	r2, r3, #15
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	3310      	adds	r3, #16
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	4413      	add	r3, r2
 80047e6:	3304      	adds	r3, #4
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e00c      	b.n	8004806 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	f003 020f 	and.w	r2, r3, #15
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	3304      	adds	r3, #4
 8004804:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68f9      	ldr	r1, [r7, #12]
 800480c:	4618      	mov	r0, r3
 800480e:	f003 fe05 	bl	800841c <USB_EPStopXfer>
 8004812:	4603      	mov	r3, r0
 8004814:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004816:	7afb      	ldrb	r3, [r7, #11]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af02      	add	r7, sp, #8
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	4613      	mov	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	3310      	adds	r3, #16
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	3304      	adds	r3, #4
 8004846:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	695a      	ldr	r2, [r3, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	429a      	cmp	r2, r3
 8004852:	d901      	bls.n	8004858 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e06b      	b.n	8004930 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	429a      	cmp	r2, r3
 800486c:	d902      	bls.n	8004874 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3303      	adds	r3, #3
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800487c:	e02a      	b.n	80048d4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	429a      	cmp	r2, r3
 8004892:	d902      	bls.n	800489a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3303      	adds	r3, #3
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68d9      	ldr	r1, [r3, #12]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	4603      	mov	r3, r0
 80048b6:	6978      	ldr	r0, [r7, #20]
 80048b8:	f003 fe5a 	bl	8008570 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	441a      	add	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	441a      	add	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d809      	bhi.n	80048fe <PCD_WriteEmptyTxFifo+0xde>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d203      	bcs.n	80048fe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1bf      	bne.n	800487e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	429a      	cmp	r2, r3
 8004908:	d811      	bhi.n	800492e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	2201      	movs	r2, #1
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	43db      	mvns	r3, r3
 8004924:	6939      	ldr	r1, [r7, #16]
 8004926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800492a:	4013      	ands	r3, r2
 800492c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3720      	adds	r7, #32
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	333c      	adds	r3, #60	; 0x3c
 8004950:	3304      	adds	r3, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	799b      	ldrb	r3, [r3, #6]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d17b      	bne.n	8004a66 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4a61      	ldr	r2, [pc, #388]	; (8004b00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	f240 80b9 	bls.w	8004af4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80b3 	beq.w	8004af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	461a      	mov	r2, r3
 800499c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049a0:	6093      	str	r3, [r2, #8]
 80049a2:	e0a7      	b.n	8004af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	461a      	mov	r2, r3
 80049bc:	2320      	movs	r3, #32
 80049be:	6093      	str	r3, [r2, #8]
 80049c0:	e098      	b.n	8004af4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f040 8093 	bne.w	8004af4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	4a4b      	ldr	r2, [pc, #300]	; (8004b00 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d90f      	bls.n	80049f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ec:	461a      	mov	r2, r3
 80049ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f2:	6093      	str	r3, [r2, #8]
 80049f4:	e07e      	b.n	8004af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	3304      	adds	r3, #4
 8004a0a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a1a      	ldr	r2, [r3, #32]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	0159      	lsls	r1, r3, #5
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	440b      	add	r3, r1
 8004a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a22:	1ad2      	subs	r2, r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d114      	bne.n	8004a58 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004a40:	461a      	mov	r2, r3
 8004a42:	2101      	movs	r1, #1
 8004a44:	f004 f82a 	bl	8008a9c <USB_EP0_OutStart>
 8004a48:	e006      	b.n	8004a58 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	441a      	add	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f007 fb52 	bl	800c108 <HAL_PCD_DataOutStageCallback>
 8004a64:	e046      	b.n	8004af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	4a26      	ldr	r2, [pc, #152]	; (8004b04 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d124      	bne.n	8004ab8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	461a      	mov	r2, r3
 8004a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8a:	6093      	str	r3, [r2, #8]
 8004a8c:	e032      	b.n	8004af4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2320      	movs	r3, #32
 8004aa8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f007 fb29 	bl	800c108 <HAL_PCD_DataOutStageCallback>
 8004ab6:	e01d      	b.n	8004af4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d114      	bne.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d108      	bne.n	8004ae8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	f003 ffda 	bl	8008a9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f007 fb0a 	bl	800c108 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	4f54300a 	.word	0x4f54300a
 8004b04:	4f54310a 	.word	0x4f54310a

08004b08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	333c      	adds	r3, #60	; 0x3c
 8004b20:	3304      	adds	r3, #4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d90e      	bls.n	8004b5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d009      	beq.n	8004b5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	461a      	mov	r2, r3
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f007 fac1 	bl	800c0e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d90c      	bls.n	8004b84 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	799b      	ldrb	r3, [r3, #6]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d108      	bne.n	8004b84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2101      	movs	r1, #1
 8004b80:	f003 ff8c 	bl	8008a9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	4f54300a 	.word	0x4f54300a

08004b94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d107      	bne.n	8004bc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bb2:	883b      	ldrh	r3, [r7, #0]
 8004bb4:	0419      	lsls	r1, r3, #16
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc0:	e028      	b.n	8004c14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4413      	add	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73fb      	strb	r3, [r7, #15]
 8004bd4:	e00d      	b.n	8004bf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	3340      	adds	r3, #64	; 0x40
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4413      	add	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
 8004bf2:	7bfa      	ldrb	r2, [r7, #15]
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d3ec      	bcc.n	8004bd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004bfc:	883b      	ldrh	r3, [r7, #0]
 8004bfe:	0418      	lsls	r0, r3, #16
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	4302      	orrs	r2, r0
 8004c0c:	3340      	adds	r3, #64	; 0x40
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c76:	f043 0303 	orr.w	r3, r3, #3
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0cc      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b68      	ldr	r3, [pc, #416]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d90c      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b65      	ldr	r3, [pc, #404]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b63      	ldr	r3, [pc, #396]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0b8      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce0:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a58      	ldr	r2, [pc, #352]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf8:	4b53      	ldr	r3, [pc, #332]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a52      	ldr	r2, [pc, #328]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d04:	4b50      	ldr	r3, [pc, #320]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	494d      	ldr	r1, [pc, #308]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d044      	beq.n	8004dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	4b47      	ldr	r3, [pc, #284]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d119      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e06f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e067      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4934      	ldr	r1, [pc, #208]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d7c:	f7fc f9ba 	bl	80010f4 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d84:	f7fc f9b6 	bl	80010f4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e04f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 020c 	and.w	r2, r3, #12
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d1eb      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dac:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d20c      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b22      	ldr	r3, [pc, #136]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e032      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4916      	ldr	r1, [pc, #88]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	490e      	ldr	r1, [pc, #56]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e12:	f000 fb7f 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 8004e16:	4602      	mov	r2, r0
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	490a      	ldr	r1, [pc, #40]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004e24:	5ccb      	ldrb	r3, [r1, r3]
 8004e26:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc f91a 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023c00 	.word	0x40023c00
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	0800e8c0 	.word	0x0800e8c0
 8004e50:	20000000 	.word	0x20000000
 8004e54:	20000004 	.word	0x20000004

08004e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000000 	.word	0x20000000

08004e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e74:	f7ff fff0 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0a9b      	lsrs	r3, r3, #10
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4903      	ldr	r1, [pc, #12]	; (8004e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40023800 	.word	0x40023800
 8004e94:	0800e8d0 	.word	0x0800e8d0

08004e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e9c:	f7ff ffdc 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	0b5b      	lsrs	r3, r3, #13
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4903      	ldr	r1, [pc, #12]	; (8004ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eae:	5ccb      	ldrb	r3, [r1, r3]
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	0800e8d0 	.word	0x0800e8d0

08004ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	; 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d010      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004ef8:	4b6f      	ldr	r3, [pc, #444]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	496c      	ldr	r1, [pc, #432]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004f16:	2301      	movs	r3, #1
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004f26:	4b64      	ldr	r3, [pc, #400]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f2c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	4960      	ldr	r1, [pc, #384]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004f44:	2301      	movs	r3, #1
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d017      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f54:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	4955      	ldr	r1, [pc, #340]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d101      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004f74:	2301      	movs	r3, #1
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004f80:	2301      	movs	r3, #1
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d017      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f90:	4b49      	ldr	r3, [pc, #292]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	4946      	ldr	r1, [pc, #280]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 808a 	beq.w	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	4a38      	ldr	r2, [pc, #224]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004fde:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fea:	4b34      	ldr	r3, [pc, #208]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a33      	ldr	r2, [pc, #204]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ff6:	f7fc f87d 	bl	80010f4 <HAL_GetTick>
 8004ffa:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffe:	f7fc f879 	bl	80010f4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e278      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005010:	4b2a      	ldr	r3, [pc, #168]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800501c:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005024:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d02f      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	429a      	cmp	r2, r3
 8005038:	d028      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800503a:	4b1f      	ldr	r3, [pc, #124]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005042:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005044:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005050:	4a19      	ldr	r2, [pc, #100]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005056:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d114      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005062:	f7fc f847 	bl	80010f4 <HAL_GetTick>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005068:	e00a      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506a:	f7fc f843 	bl	80010f4 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	; 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e240      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ee      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005098:	d114      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ae:	4902      	ldr	r1, [pc, #8]	; (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	608b      	str	r3, [r1, #8]
 80050b4:	e00c      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80050b6:	bf00      	nop
 80050b8:	40023800 	.word	0x40023800
 80050bc:	40007000 	.word	0x40007000
 80050c0:	42470e40 	.word	0x42470e40
 80050c4:	4b4a      	ldr	r3, [pc, #296]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	4a49      	ldr	r2, [pc, #292]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050ce:	6093      	str	r3, [r2, #8]
 80050d0:	4b47      	ldr	r3, [pc, #284]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050dc:	4944      	ldr	r1, [pc, #272]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80050f4:	4b3f      	ldr	r3, [pc, #252]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80050f6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005104:	4b3a      	ldr	r3, [pc, #232]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800510a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005112:	4937      	ldr	r1, [pc, #220]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005126:	4b32      	ldr	r3, [pc, #200]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005134:	492e      	ldr	r1, [pc, #184]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d011      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005148:	4b29      	ldr	r3, [pc, #164]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800514a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005156:	4926      	ldr	r1, [pc, #152]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005166:	d101      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005168:	2301      	movs	r3, #1
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800517a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800517e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	491a      	ldr	r1, [pc, #104]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005196:	2b00      	cmp	r3, #0
 8005198:	d011      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800519a:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800519c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	4911      	ldr	r1, [pc, #68]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b8:	d101      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80051ba:	2301      	movs	r3, #1
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d005      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051cc:	f040 80ff 	bne.w	80053ce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051d0:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051d6:	f7fb ff8d 	bl	80010f4 <HAL_GetTick>
 80051da:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051dc:	e00e      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051de:	f7fb ff89 	bl	80010f4 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d907      	bls.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e188      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80051f0:	40023800 	.word	0x40023800
 80051f4:	424711e0 	.word	0x424711e0
 80051f8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051fc:	4b7e      	ldr	r3, [pc, #504]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1ea      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005224:	2b00      	cmp	r3, #0
 8005226:	d028      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d124      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005230:	4b71      	ldr	r3, [pc, #452]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	3301      	adds	r3, #1
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005242:	4b6d      	ldr	r3, [pc, #436]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005248:	0e1b      	lsrs	r3, r3, #24
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	019b      	lsls	r3, r3, #6
 800525a:	431a      	orrs	r2, r3
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	3b01      	subs	r3, #1
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	431a      	orrs	r2, r3
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	061b      	lsls	r3, r3, #24
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	071b      	lsls	r3, r3, #28
 8005272:	4961      	ldr	r1, [pc, #388]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005298:	2b00      	cmp	r3, #0
 800529a:	d035      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a4:	d130      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80052a6:	4b54      	ldr	r3, [pc, #336]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ac:	0c1b      	lsrs	r3, r3, #16
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	3301      	adds	r3, #1
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052b8:	4b4f      	ldr	r3, [pc, #316]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052be:	0f1b      	lsrs	r3, r3, #28
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	019b      	lsls	r3, r3, #6
 80052d0:	431a      	orrs	r2, r3
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	3b01      	subs	r3, #1
 80052d8:	041b      	lsls	r3, r3, #16
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	431a      	orrs	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	071b      	lsls	r3, r3, #28
 80052e8:	4943      	ldr	r1, [pc, #268]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052f0:	4b41      	ldr	r3, [pc, #260]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f6:	f023 021f 	bic.w	r2, r3, #31
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	493d      	ldr	r1, [pc, #244]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005310:	2b00      	cmp	r3, #0
 8005312:	d029      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531c:	d124      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800531e:	4b36      	ldr	r3, [pc, #216]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	3301      	adds	r3, #1
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005330:	4b31      	ldr	r3, [pc, #196]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005336:	0f1b      	lsrs	r3, r3, #28
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	019b      	lsls	r3, r3, #6
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	3b01      	subs	r3, #1
 8005352:	041b      	lsls	r3, r3, #16
 8005354:	431a      	orrs	r2, r3
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	431a      	orrs	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	071b      	lsls	r3, r3, #28
 8005360:	4925      	ldr	r1, [pc, #148]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005370:	2b00      	cmp	r3, #0
 8005372:	d016      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	019b      	lsls	r3, r3, #6
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	085b      	lsrs	r3, r3, #1
 8005386:	3b01      	subs	r3, #1
 8005388:	041b      	lsls	r3, r3, #16
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	061b      	lsls	r3, r3, #24
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	071b      	lsls	r3, r3, #28
 800539a:	4917      	ldr	r1, [pc, #92]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053a2:	4b16      	ldr	r3, [pc, #88]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053a8:	f7fb fea4 	bl	80010f4 <HAL_GetTick>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053b0:	f7fb fea0 	bl	80010f4 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e09f      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053c2:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	f040 8095 	bne.w	8005500 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053dc:	f7fb fe8a 	bl	80010f4 <HAL_GetTick>
 80053e0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053e2:	e00f      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053e4:	f7fb fe86 	bl	80010f4 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d908      	bls.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e085      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800
 80053fc:	42470068 	.word	0x42470068
 8005400:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005404:	4b41      	ldr	r3, [pc, #260]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800540c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005410:	d0e8      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800542e:	2b00      	cmp	r3, #0
 8005430:	d02b      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005436:	2b00      	cmp	r3, #0
 8005438:	d127      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800543a:	4b34      	ldr	r3, [pc, #208]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	3301      	adds	r3, #1
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699a      	ldr	r2, [r3, #24]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	019b      	lsls	r3, r3, #6
 8005456:	431a      	orrs	r2, r3
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	3b01      	subs	r3, #1
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	4928      	ldr	r1, [pc, #160]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005470:	4b26      	ldr	r3, [pc, #152]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005476:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	3b01      	subs	r3, #1
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	4922      	ldr	r1, [pc, #136]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01d      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800549e:	d118      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054a0:	4b1a      	ldr	r3, [pc, #104]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	0e1b      	lsrs	r3, r3, #24
 80054a8:	f003 030f 	and.w	r3, r3, #15
 80054ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	019b      	lsls	r3, r3, #6
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	3b01      	subs	r3, #1
 80054c2:	041b      	lsls	r3, r3, #16
 80054c4:	431a      	orrs	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	061b      	lsls	r3, r3, #24
 80054ca:	4910      	ldr	r1, [pc, #64]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80054d4:	2201      	movs	r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054d8:	f7fb fe0c 	bl	80010f4 <HAL_GetTick>
 80054dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054e0:	f7fb fe08 	bl	80010f4 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e007      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054fe:	d1ef      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3730      	adds	r7, #48	; 0x30
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40023800 	.word	0x40023800
 8005510:	42470070 	.word	0x42470070

08005514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005518:	b0ae      	sub	sp, #184	; 0xb8
 800551a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800553a:	4bcb      	ldr	r3, [pc, #812]	; (8005868 <HAL_RCC_GetSysClockFreq+0x354>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b0c      	cmp	r3, #12
 8005544:	f200 8206 	bhi.w	8005954 <HAL_RCC_GetSysClockFreq+0x440>
 8005548:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <HAL_RCC_GetSysClockFreq+0x3c>)
 800554a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554e:	bf00      	nop
 8005550:	08005585 	.word	0x08005585
 8005554:	08005955 	.word	0x08005955
 8005558:	08005955 	.word	0x08005955
 800555c:	08005955 	.word	0x08005955
 8005560:	0800558d 	.word	0x0800558d
 8005564:	08005955 	.word	0x08005955
 8005568:	08005955 	.word	0x08005955
 800556c:	08005955 	.word	0x08005955
 8005570:	08005595 	.word	0x08005595
 8005574:	08005955 	.word	0x08005955
 8005578:	08005955 	.word	0x08005955
 800557c:	08005955 	.word	0x08005955
 8005580:	08005785 	.word	0x08005785
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005584:	4bb9      	ldr	r3, [pc, #740]	; (800586c <HAL_RCC_GetSysClockFreq+0x358>)
 8005586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800558a:	e1e7      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800558c:	4bb8      	ldr	r3, [pc, #736]	; (8005870 <HAL_RCC_GetSysClockFreq+0x35c>)
 800558e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005592:	e1e3      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005594:	4bb4      	ldr	r3, [pc, #720]	; (8005868 <HAL_RCC_GetSysClockFreq+0x354>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800559c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055a0:	4bb1      	ldr	r3, [pc, #708]	; (8005868 <HAL_RCC_GetSysClockFreq+0x354>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d071      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ac:	4bae      	ldr	r3, [pc, #696]	; (8005868 <HAL_RCC_GetSysClockFreq+0x354>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	099b      	lsrs	r3, r3, #6
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055b8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80055bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	f04f 0000 	mov.w	r0, #0
 80055da:	f04f 0100 	mov.w	r1, #0
 80055de:	0159      	lsls	r1, r3, #5
 80055e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e4:	0150      	lsls	r0, r2, #5
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4621      	mov	r1, r4
 80055ec:	1a51      	subs	r1, r2, r1
 80055ee:	6439      	str	r1, [r7, #64]	; 0x40
 80055f0:	4629      	mov	r1, r5
 80055f2:	eb63 0301 	sbc.w	r3, r3, r1
 80055f6:	647b      	str	r3, [r7, #68]	; 0x44
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005604:	4649      	mov	r1, r9
 8005606:	018b      	lsls	r3, r1, #6
 8005608:	4641      	mov	r1, r8
 800560a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800560e:	4641      	mov	r1, r8
 8005610:	018a      	lsls	r2, r1, #6
 8005612:	4641      	mov	r1, r8
 8005614:	1a51      	subs	r1, r2, r1
 8005616:	63b9      	str	r1, [r7, #56]	; 0x38
 8005618:	4649      	mov	r1, r9
 800561a:	eb63 0301 	sbc.w	r3, r3, r1
 800561e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800562c:	4649      	mov	r1, r9
 800562e:	00cb      	lsls	r3, r1, #3
 8005630:	4641      	mov	r1, r8
 8005632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005636:	4641      	mov	r1, r8
 8005638:	00ca      	lsls	r2, r1, #3
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	4603      	mov	r3, r0
 8005640:	4622      	mov	r2, r4
 8005642:	189b      	adds	r3, r3, r2
 8005644:	633b      	str	r3, [r7, #48]	; 0x30
 8005646:	462b      	mov	r3, r5
 8005648:	460a      	mov	r2, r1
 800564a:	eb42 0303 	adc.w	r3, r2, r3
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
 8005650:	f04f 0200 	mov.w	r2, #0
 8005654:	f04f 0300 	mov.w	r3, #0
 8005658:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800565c:	4629      	mov	r1, r5
 800565e:	024b      	lsls	r3, r1, #9
 8005660:	4621      	mov	r1, r4
 8005662:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005666:	4621      	mov	r1, r4
 8005668:	024a      	lsls	r2, r1, #9
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005672:	2200      	movs	r2, #0
 8005674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005678:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800567c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005680:	f7fa fe2e 	bl	80002e0 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4613      	mov	r3, r2
 800568a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800568e:	e067      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005690:	4b75      	ldr	r3, [pc, #468]	; (8005868 <HAL_RCC_GetSysClockFreq+0x354>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	099b      	lsrs	r3, r3, #6
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800569c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80056a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056aa:	2300      	movs	r3, #0
 80056ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80056b2:	4622      	mov	r2, r4
 80056b4:	462b      	mov	r3, r5
 80056b6:	f04f 0000 	mov.w	r0, #0
 80056ba:	f04f 0100 	mov.w	r1, #0
 80056be:	0159      	lsls	r1, r3, #5
 80056c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056c4:	0150      	lsls	r0, r2, #5
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4621      	mov	r1, r4
 80056cc:	1a51      	subs	r1, r2, r1
 80056ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80056d0:	4629      	mov	r1, r5
 80056d2:	eb63 0301 	sbc.w	r3, r3, r1
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80056e4:	4649      	mov	r1, r9
 80056e6:	018b      	lsls	r3, r1, #6
 80056e8:	4641      	mov	r1, r8
 80056ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056ee:	4641      	mov	r1, r8
 80056f0:	018a      	lsls	r2, r1, #6
 80056f2:	4641      	mov	r1, r8
 80056f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80056f8:	4649      	mov	r1, r9
 80056fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	f04f 0300 	mov.w	r3, #0
 8005706:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800570a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800570e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005712:	4692      	mov	sl, r2
 8005714:	469b      	mov	fp, r3
 8005716:	4623      	mov	r3, r4
 8005718:	eb1a 0303 	adds.w	r3, sl, r3
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	462b      	mov	r3, r5
 8005720:	eb4b 0303 	adc.w	r3, fp, r3
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005732:	4629      	mov	r1, r5
 8005734:	028b      	lsls	r3, r1, #10
 8005736:	4621      	mov	r1, r4
 8005738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800573c:	4621      	mov	r1, r4
 800573e:	028a      	lsls	r2, r1, #10
 8005740:	4610      	mov	r0, r2
 8005742:	4619      	mov	r1, r3
 8005744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005748:	2200      	movs	r2, #0
 800574a:	673b      	str	r3, [r7, #112]	; 0x70
 800574c:	677a      	str	r2, [r7, #116]	; 0x74
 800574e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005752:	f7fa fdc5 	bl	80002e0 <__aeabi_uldivmod>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4613      	mov	r3, r2
 800575c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005760:	4b41      	ldr	r3, [pc, #260]	; (8005868 <HAL_RCC_GetSysClockFreq+0x354>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	3301      	adds	r3, #1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco / pllp;
 8005772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005782:	e0eb      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005784:	4b38      	ldr	r3, [pc, #224]	; (8005868 <HAL_RCC_GetSysClockFreq+0x354>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800578c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005790:	4b35      	ldr	r3, [pc, #212]	; (8005868 <HAL_RCC_GetSysClockFreq+0x354>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d06b      	beq.n	8005874 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579c:	4b32      	ldr	r3, [pc, #200]	; (8005868 <HAL_RCC_GetSysClockFreq+0x354>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	099b      	lsrs	r3, r3, #6
 80057a2:	2200      	movs	r2, #0
 80057a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80057a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ae:	663b      	str	r3, [r7, #96]	; 0x60
 80057b0:	2300      	movs	r3, #0
 80057b2:	667b      	str	r3, [r7, #100]	; 0x64
 80057b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80057b8:	4622      	mov	r2, r4
 80057ba:	462b      	mov	r3, r5
 80057bc:	f04f 0000 	mov.w	r0, #0
 80057c0:	f04f 0100 	mov.w	r1, #0
 80057c4:	0159      	lsls	r1, r3, #5
 80057c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ca:	0150      	lsls	r0, r2, #5
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4621      	mov	r1, r4
 80057d2:	1a51      	subs	r1, r2, r1
 80057d4:	61b9      	str	r1, [r7, #24]
 80057d6:	4629      	mov	r1, r5
 80057d8:	eb63 0301 	sbc.w	r3, r3, r1
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80057ea:	4659      	mov	r1, fp
 80057ec:	018b      	lsls	r3, r1, #6
 80057ee:	4651      	mov	r1, sl
 80057f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057f4:	4651      	mov	r1, sl
 80057f6:	018a      	lsls	r2, r1, #6
 80057f8:	4651      	mov	r1, sl
 80057fa:	ebb2 0801 	subs.w	r8, r2, r1
 80057fe:	4659      	mov	r1, fp
 8005800:	eb63 0901 	sbc.w	r9, r3, r1
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005818:	4690      	mov	r8, r2
 800581a:	4699      	mov	r9, r3
 800581c:	4623      	mov	r3, r4
 800581e:	eb18 0303 	adds.w	r3, r8, r3
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	462b      	mov	r3, r5
 8005826:	eb49 0303 	adc.w	r3, r9, r3
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005838:	4629      	mov	r1, r5
 800583a:	024b      	lsls	r3, r1, #9
 800583c:	4621      	mov	r1, r4
 800583e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005842:	4621      	mov	r1, r4
 8005844:	024a      	lsls	r2, r1, #9
 8005846:	4610      	mov	r0, r2
 8005848:	4619      	mov	r1, r3
 800584a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800584e:	2200      	movs	r2, #0
 8005850:	65bb      	str	r3, [r7, #88]	; 0x58
 8005852:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005854:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005858:	f7fa fd42 	bl	80002e0 <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4613      	mov	r3, r2
 8005862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005866:	e065      	b.n	8005934 <HAL_RCC_GetSysClockFreq+0x420>
 8005868:	40023800 	.word	0x40023800
 800586c:	00f42400 	.word	0x00f42400
 8005870:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005874:	4b3d      	ldr	r3, [pc, #244]	; (800596c <HAL_RCC_GetSysClockFreq+0x458>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	099b      	lsrs	r3, r3, #6
 800587a:	2200      	movs	r2, #0
 800587c:	4618      	mov	r0, r3
 800587e:	4611      	mov	r1, r2
 8005880:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005884:	653b      	str	r3, [r7, #80]	; 0x50
 8005886:	2300      	movs	r3, #0
 8005888:	657b      	str	r3, [r7, #84]	; 0x54
 800588a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800588e:	4642      	mov	r2, r8
 8005890:	464b      	mov	r3, r9
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f04f 0100 	mov.w	r1, #0
 800589a:	0159      	lsls	r1, r3, #5
 800589c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058a0:	0150      	lsls	r0, r2, #5
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4641      	mov	r1, r8
 80058a8:	1a51      	subs	r1, r2, r1
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	4649      	mov	r1, r9
 80058ae:	eb63 0301 	sbc.w	r3, r3, r1
 80058b2:	60fb      	str	r3, [r7, #12]
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80058c0:	4659      	mov	r1, fp
 80058c2:	018b      	lsls	r3, r1, #6
 80058c4:	4651      	mov	r1, sl
 80058c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058ca:	4651      	mov	r1, sl
 80058cc:	018a      	lsls	r2, r1, #6
 80058ce:	4651      	mov	r1, sl
 80058d0:	1a54      	subs	r4, r2, r1
 80058d2:	4659      	mov	r1, fp
 80058d4:	eb63 0501 	sbc.w	r5, r3, r1
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	00eb      	lsls	r3, r5, #3
 80058e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058e6:	00e2      	lsls	r2, r4, #3
 80058e8:	4614      	mov	r4, r2
 80058ea:	461d      	mov	r5, r3
 80058ec:	4643      	mov	r3, r8
 80058ee:	18e3      	adds	r3, r4, r3
 80058f0:	603b      	str	r3, [r7, #0]
 80058f2:	464b      	mov	r3, r9
 80058f4:	eb45 0303 	adc.w	r3, r5, r3
 80058f8:	607b      	str	r3, [r7, #4]
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005906:	4629      	mov	r1, r5
 8005908:	028b      	lsls	r3, r1, #10
 800590a:	4621      	mov	r1, r4
 800590c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005910:	4621      	mov	r1, r4
 8005912:	028a      	lsls	r2, r1, #10
 8005914:	4610      	mov	r0, r2
 8005916:	4619      	mov	r1, r3
 8005918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800591c:	2200      	movs	r2, #0
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005920:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005922:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005926:	f7fa fcdb 	bl	80002e0 <__aeabi_uldivmod>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4613      	mov	r3, r2
 8005930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <HAL_RCC_GetSysClockFreq+0x458>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	0f1b      	lsrs	r3, r3, #28
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco / pllr;
 8005942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005952:	e003      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800595a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800595c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005960:	4618      	mov	r0, r3
 8005962:	37b8      	adds	r7, #184	; 0xb8
 8005964:	46bd      	mov	sp, r7
 8005966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800
 8005970:	00f42400 	.word	0x00f42400

08005974 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e28d      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8083 	beq.w	8005a9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005994:	4b94      	ldr	r3, [pc, #592]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 030c 	and.w	r3, r3, #12
 800599c:	2b04      	cmp	r3, #4
 800599e:	d019      	beq.n	80059d4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80059a0:	4b91      	ldr	r3, [pc, #580]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 030c 	and.w	r3, r3, #12
        || \
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d106      	bne.n	80059ba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80059ac:	4b8e      	ldr	r3, [pc, #568]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059b8:	d00c      	beq.n	80059d4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ba:	4b8b      	ldr	r3, [pc, #556]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80059c2:	2b0c      	cmp	r3, #12
 80059c4:	d112      	bne.n	80059ec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059c6:	4b88      	ldr	r3, [pc, #544]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059d2:	d10b      	bne.n	80059ec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059d4:	4b84      	ldr	r3, [pc, #528]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d05b      	beq.n	8005a98 <HAL_RCC_OscConfig+0x124>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d157      	bne.n	8005a98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e25a      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f4:	d106      	bne.n	8005a04 <HAL_RCC_OscConfig+0x90>
 80059f6:	4b7c      	ldr	r3, [pc, #496]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7b      	ldr	r2, [pc, #492]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 80059fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e01d      	b.n	8005a40 <HAL_RCC_OscConfig+0xcc>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCC_OscConfig+0xb4>
 8005a0e:	4b76      	ldr	r3, [pc, #472]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a75      	ldr	r2, [pc, #468]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	4b73      	ldr	r3, [pc, #460]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a72      	ldr	r2, [pc, #456]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	e00b      	b.n	8005a40 <HAL_RCC_OscConfig+0xcc>
 8005a28:	4b6f      	ldr	r3, [pc, #444]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a6e      	ldr	r2, [pc, #440]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	4b6c      	ldr	r3, [pc, #432]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a6b      	ldr	r2, [pc, #428]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d013      	beq.n	8005a70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a48:	f7fb fb54 	bl	80010f4 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4e:	e008      	b.n	8005a62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a50:	f7fb fb50 	bl	80010f4 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b64      	cmp	r3, #100	; 0x64
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e21f      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a62:	4b61      	ldr	r3, [pc, #388]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f0      	beq.n	8005a50 <HAL_RCC_OscConfig+0xdc>
 8005a6e:	e014      	b.n	8005a9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fb fb40 	bl	80010f4 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a78:	f7fb fb3c 	bl	80010f4 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b64      	cmp	r3, #100	; 0x64
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e20b      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a8a:	4b57      	ldr	r3, [pc, #348]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x104>
 8005a96:	e000      	b.n	8005a9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d06f      	beq.n	8005b86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005aa6:	4b50      	ldr	r3, [pc, #320]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d017      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005ab2:	4b4d      	ldr	r3, [pc, #308]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
        || \
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d105      	bne.n	8005aca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005abe:	4b4a      	ldr	r3, [pc, #296]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00b      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aca:	4b47      	ldr	r3, [pc, #284]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d11c      	bne.n	8005b10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ad6:	4b44      	ldr	r3, [pc, #272]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d116      	bne.n	8005b10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ae2:	4b41      	ldr	r3, [pc, #260]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_RCC_OscConfig+0x186>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d001      	beq.n	8005afa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e1d3      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005afa:	4b3b      	ldr	r3, [pc, #236]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4937      	ldr	r1, [pc, #220]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0e:	e03a      	b.n	8005b86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d020      	beq.n	8005b5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b18:	4b34      	ldr	r3, [pc, #208]	; (8005bec <HAL_RCC_OscConfig+0x278>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1e:	f7fb fae9 	bl	80010f4 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b26:	f7fb fae5 	bl	80010f4 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e1b4      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b38:	4b2b      	ldr	r3, [pc, #172]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b44:	4b28      	ldr	r3, [pc, #160]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	4925      	ldr	r1, [pc, #148]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]
 8005b58:	e015      	b.n	8005b86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b5a:	4b24      	ldr	r3, [pc, #144]	; (8005bec <HAL_RCC_OscConfig+0x278>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fb fac8 	bl	80010f4 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b68:	f7fb fac4 	bl	80010f4 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e193      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b7a:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1f0      	bne.n	8005b68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d036      	beq.n	8005c00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d016      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <HAL_RCC_OscConfig+0x27c>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7fb faa8 	bl	80010f4 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba8:	f7fb faa4 	bl	80010f4 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e173      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_RCC_OscConfig+0x274>)
 8005bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x234>
 8005bc6:	e01b      	b.n	8005c00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_RCC_OscConfig+0x27c>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fb fa91 	bl	80010f4 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd4:	e00e      	b.n	8005bf4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd6:	f7fb fa8d 	bl	80010f4 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d907      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e15c      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
 8005be8:	40023800 	.word	0x40023800
 8005bec:	42470000 	.word	0x42470000
 8005bf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf4:	4b8a      	ldr	r3, [pc, #552]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1ea      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8097 	beq.w	8005d3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c12:	4b83      	ldr	r3, [pc, #524]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10f      	bne.n	8005c3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	4b7f      	ldr	r3, [pc, #508]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	4a7e      	ldr	r2, [pc, #504]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2e:	4b7c      	ldr	r3, [pc, #496]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c36:	60bb      	str	r3, [r7, #8]
 8005c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3e:	4b79      	ldr	r3, [pc, #484]	; (8005e24 <HAL_RCC_OscConfig+0x4b0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d118      	bne.n	8005c7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c4a:	4b76      	ldr	r3, [pc, #472]	; (8005e24 <HAL_RCC_OscConfig+0x4b0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a75      	ldr	r2, [pc, #468]	; (8005e24 <HAL_RCC_OscConfig+0x4b0>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c56:	f7fb fa4d 	bl	80010f4 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c5e:	f7fb fa49 	bl	80010f4 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e118      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c70:	4b6c      	ldr	r3, [pc, #432]	; (8005e24 <HAL_RCC_OscConfig+0x4b0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d106      	bne.n	8005c92 <HAL_RCC_OscConfig+0x31e>
 8005c84:	4b66      	ldr	r3, [pc, #408]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	4a65      	ldr	r2, [pc, #404]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c90:	e01c      	b.n	8005ccc <HAL_RCC_OscConfig+0x358>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b05      	cmp	r3, #5
 8005c98:	d10c      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x340>
 8005c9a:	4b61      	ldr	r3, [pc, #388]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9e:	4a60      	ldr	r2, [pc, #384]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005ca0:	f043 0304 	orr.w	r3, r3, #4
 8005ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca6:	4b5e      	ldr	r3, [pc, #376]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	4a5d      	ldr	r2, [pc, #372]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb2:	e00b      	b.n	8005ccc <HAL_RCC_OscConfig+0x358>
 8005cb4:	4b5a      	ldr	r3, [pc, #360]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	4a59      	ldr	r2, [pc, #356]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc0:	4b57      	ldr	r3, [pc, #348]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc4:	4a56      	ldr	r2, [pc, #344]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cc6:	f023 0304 	bic.w	r3, r3, #4
 8005cca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d015      	beq.n	8005d00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd4:	f7fb fa0e 	bl	80010f4 <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cda:	e00a      	b.n	8005cf2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cdc:	f7fb fa0a 	bl	80010f4 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e0d7      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf2:	4b4b      	ldr	r3, [pc, #300]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0ee      	beq.n	8005cdc <HAL_RCC_OscConfig+0x368>
 8005cfe:	e014      	b.n	8005d2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d00:	f7fb f9f8 	bl	80010f4 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d06:	e00a      	b.n	8005d1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d08:	f7fb f9f4 	bl	80010f4 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e0c1      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d1e:	4b40      	ldr	r3, [pc, #256]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1ee      	bne.n	8005d08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d105      	bne.n	8005d3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d30:	4b3b      	ldr	r3, [pc, #236]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	4a3a      	ldr	r2, [pc, #232]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80ad 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d46:	4b36      	ldr	r3, [pc, #216]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d060      	beq.n	8005e14 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d145      	bne.n	8005de6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d5a:	4b33      	ldr	r3, [pc, #204]	; (8005e28 <HAL_RCC_OscConfig+0x4b4>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fb f9c8 	bl	80010f4 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d68:	f7fb f9c4 	bl	80010f4 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e093      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d7a:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f0      	bne.n	8005d68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69da      	ldr	r2, [r3, #28]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	019b      	lsls	r3, r3, #6
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	041b      	lsls	r3, r3, #16
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	061b      	lsls	r3, r3, #24
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	071b      	lsls	r3, r3, #28
 8005db2:	491b      	ldr	r1, [pc, #108]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005db8:	4b1b      	ldr	r3, [pc, #108]	; (8005e28 <HAL_RCC_OscConfig+0x4b4>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbe:	f7fb f999 	bl	80010f4 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dc6:	f7fb f995 	bl	80010f4 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e064      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd8:	4b11      	ldr	r3, [pc, #68]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x452>
 8005de4:	e05c      	b.n	8005ea0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <HAL_RCC_OscConfig+0x4b4>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fb f982 	bl	80010f4 <HAL_GetTick>
 8005df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df4:	f7fb f97e 	bl	80010f4 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e04d      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <HAL_RCC_OscConfig+0x4ac>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x480>
 8005e12:	e045      	b.n	8005ea0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d107      	bne.n	8005e2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e040      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
 8005e20:	40023800 	.word	0x40023800
 8005e24:	40007000 	.word	0x40007000
 8005e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e2c:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <HAL_RCC_OscConfig+0x538>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d030      	beq.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d129      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d122      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d119      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	3b01      	subs	r3, #1
 8005e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d10f      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d107      	bne.n	8005e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800

08005eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e041      	b.n	8005f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fa feb8 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f000 f95e 	bl	80061b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d001      	beq.n	8005f68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e046      	b.n	8005ff6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a23      	ldr	r2, [pc, #140]	; (8006004 <HAL_TIM_Base_Start+0xb4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d022      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x70>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f82:	d01d      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x70>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <HAL_TIM_Base_Start+0xb8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x70>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1e      	ldr	r2, [pc, #120]	; (800600c <HAL_TIM_Base_Start+0xbc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x70>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1c      	ldr	r2, [pc, #112]	; (8006010 <HAL_TIM_Base_Start+0xc0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x70>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1b      	ldr	r2, [pc, #108]	; (8006014 <HAL_TIM_Base_Start+0xc4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x70>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	; (8006018 <HAL_TIM_Base_Start+0xc8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIM_Base_Start+0x70>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a18      	ldr	r2, [pc, #96]	; (800601c <HAL_TIM_Base_Start+0xcc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d111      	bne.n	8005fe4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b06      	cmp	r3, #6
 8005fd0:	d010      	beq.n	8005ff4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe2:	e007      	b.n	8005ff4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40010400 	.word	0x40010400
 8006018:	40014000 	.word	0x40014000
 800601c:	40001800 	.word	0x40001800

08006020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_TIM_ConfigClockSource+0x1c>
 8006038:	2302      	movs	r3, #2
 800603a:	e0b4      	b.n	80061a6 <HAL_TIM_ConfigClockSource+0x186>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800605a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006074:	d03e      	beq.n	80060f4 <HAL_TIM_ConfigClockSource+0xd4>
 8006076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800607a:	f200 8087 	bhi.w	800618c <HAL_TIM_ConfigClockSource+0x16c>
 800607e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006082:	f000 8086 	beq.w	8006192 <HAL_TIM_ConfigClockSource+0x172>
 8006086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608a:	d87f      	bhi.n	800618c <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b70      	cmp	r3, #112	; 0x70
 800608e:	d01a      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0xa6>
 8006090:	2b70      	cmp	r3, #112	; 0x70
 8006092:	d87b      	bhi.n	800618c <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b60      	cmp	r3, #96	; 0x60
 8006096:	d050      	beq.n	800613a <HAL_TIM_ConfigClockSource+0x11a>
 8006098:	2b60      	cmp	r3, #96	; 0x60
 800609a:	d877      	bhi.n	800618c <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b50      	cmp	r3, #80	; 0x50
 800609e:	d03c      	beq.n	800611a <HAL_TIM_ConfigClockSource+0xfa>
 80060a0:	2b50      	cmp	r3, #80	; 0x50
 80060a2:	d873      	bhi.n	800618c <HAL_TIM_ConfigClockSource+0x16c>
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d058      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x13a>
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d86f      	bhi.n	800618c <HAL_TIM_ConfigClockSource+0x16c>
 80060ac:	2b30      	cmp	r3, #48	; 0x30
 80060ae:	d064      	beq.n	800617a <HAL_TIM_ConfigClockSource+0x15a>
 80060b0:	2b30      	cmp	r3, #48	; 0x30
 80060b2:	d86b      	bhi.n	800618c <HAL_TIM_ConfigClockSource+0x16c>
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d060      	beq.n	800617a <HAL_TIM_ConfigClockSource+0x15a>
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d867      	bhi.n	800618c <HAL_TIM_ConfigClockSource+0x16c>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d05c      	beq.n	800617a <HAL_TIM_ConfigClockSource+0x15a>
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d05a      	beq.n	800617a <HAL_TIM_ConfigClockSource+0x15a>
 80060c4:	e062      	b.n	800618c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060d6:	f000 f991 	bl	80063fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	609a      	str	r2, [r3, #8]
      break;
 80060f2:	e04f      	b.n	8006194 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006104:	f000 f97a 	bl	80063fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006116:	609a      	str	r2, [r3, #8]
      break;
 8006118:	e03c      	b.n	8006194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006126:	461a      	mov	r2, r3
 8006128:	f000 f8ee 	bl	8006308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2150      	movs	r1, #80	; 0x50
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f947 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8006138:	e02c      	b.n	8006194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006146:	461a      	mov	r2, r3
 8006148:	f000 f90d 	bl	8006366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2160      	movs	r1, #96	; 0x60
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f937 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8006158:	e01c      	b.n	8006194 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006166:	461a      	mov	r2, r3
 8006168:	f000 f8ce 	bl	8006308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2140      	movs	r1, #64	; 0x40
 8006172:	4618      	mov	r0, r3
 8006174:	f000 f927 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 8006178:	e00c      	b.n	8006194 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f000 f91e 	bl	80063c6 <TIM_ITRx_SetConfig>
      break;
 800618a:	e003      	b.n	8006194 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
      break;
 8006190:	e000      	b.n	8006194 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006192:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a46      	ldr	r2, [pc, #280]	; (80062dc <TIM_Base_SetConfig+0x12c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d00f      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a43      	ldr	r2, [pc, #268]	; (80062e0 <TIM_Base_SetConfig+0x130>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00b      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a42      	ldr	r2, [pc, #264]	; (80062e4 <TIM_Base_SetConfig+0x134>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d007      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a41      	ldr	r2, [pc, #260]	; (80062e8 <TIM_Base_SetConfig+0x138>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a40      	ldr	r2, [pc, #256]	; (80062ec <TIM_Base_SetConfig+0x13c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d108      	bne.n	8006202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a35      	ldr	r2, [pc, #212]	; (80062dc <TIM_Base_SetConfig+0x12c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d02b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006210:	d027      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a32      	ldr	r2, [pc, #200]	; (80062e0 <TIM_Base_SetConfig+0x130>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d023      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a31      	ldr	r2, [pc, #196]	; (80062e4 <TIM_Base_SetConfig+0x134>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01f      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a30      	ldr	r2, [pc, #192]	; (80062e8 <TIM_Base_SetConfig+0x138>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2f      	ldr	r2, [pc, #188]	; (80062ec <TIM_Base_SetConfig+0x13c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d017      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2e      	ldr	r2, [pc, #184]	; (80062f0 <TIM_Base_SetConfig+0x140>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2d      	ldr	r2, [pc, #180]	; (80062f4 <TIM_Base_SetConfig+0x144>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00f      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2c      	ldr	r2, [pc, #176]	; (80062f8 <TIM_Base_SetConfig+0x148>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2b      	ldr	r2, [pc, #172]	; (80062fc <TIM_Base_SetConfig+0x14c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2a      	ldr	r2, [pc, #168]	; (8006300 <TIM_Base_SetConfig+0x150>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a29      	ldr	r2, [pc, #164]	; (8006304 <TIM_Base_SetConfig+0x154>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d108      	bne.n	8006274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <TIM_Base_SetConfig+0x12c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_Base_SetConfig+0xf8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a12      	ldr	r2, [pc, #72]	; (80062ec <TIM_Base_SetConfig+0x13c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d103      	bne.n	80062b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d105      	bne.n	80062ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f023 0201 	bic.w	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	611a      	str	r2, [r3, #16]
  }
}
 80062ce:	bf00      	nop
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40000800 	.word	0x40000800
 80062e8:	40000c00 	.word	0x40000c00
 80062ec:	40010400 	.word	0x40010400
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	40001800 	.word	0x40001800
 8006300:	40001c00 	.word	0x40001c00
 8006304:	40002000 	.word	0x40002000

08006308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f023 0201 	bic.w	r2, r3, #1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 030a 	bic.w	r3, r3, #10
 8006344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006366:	b480      	push	{r7}
 8006368:	b087      	sub	sp, #28
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f023 0210 	bic.w	r2, r3, #16
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	031b      	lsls	r3, r3, #12
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	621a      	str	r2, [r3, #32]
}
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f043 0307 	orr.w	r3, r3, #7
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	609a      	str	r2, [r3, #8]
}
 80063f0:	bf00      	nop
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	021a      	lsls	r2, r3, #8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	431a      	orrs	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4313      	orrs	r3, r2
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006450:	2302      	movs	r3, #2
 8006452:	e05a      	b.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a21      	ldr	r2, [pc, #132]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d022      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a0:	d01d      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d018      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1b      	ldr	r2, [pc, #108]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a18      	ldr	r2, [pc, #96]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a17      	ldr	r2, [pc, #92]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a15      	ldr	r2, [pc, #84]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10c      	bne.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40010000 	.word	0x40010000
 800651c:	40000400 	.word	0x40000400
 8006520:	40000800 	.word	0x40000800
 8006524:	40000c00 	.word	0x40000c00
 8006528:	40010400 	.word	0x40010400
 800652c:	40014000 	.word	0x40014000
 8006530:	40001800 	.word	0x40001800

08006534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e042      	b.n	80065cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d106      	bne.n	8006560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fa fb96 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2224      	movs	r2, #36	; 0x24
 8006564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fd69 	bl	8007050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800658c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800659c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d175      	bne.n	80066e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_UART_Transmit+0x2c>
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e06e      	b.n	80066e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2221      	movs	r2, #33	; 0x21
 800660e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006612:	f7fa fd6f 	bl	80010f4 <HAL_GetTick>
 8006616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	88fa      	ldrh	r2, [r7, #6]
 800661c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	88fa      	ldrh	r2, [r7, #6]
 8006622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662c:	d108      	bne.n	8006640 <HAL_UART_Transmit+0x6c>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	e003      	b.n	8006648 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006648:	e02e      	b.n	80066a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fb05 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e03a      	b.n	80066e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	3302      	adds	r3, #2
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	e007      	b.n	800669a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	3301      	adds	r3, #1
 8006698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1cb      	bne.n	800664a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2200      	movs	r2, #0
 80066ba:	2140      	movs	r1, #64	; 0x40
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 fad1 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e006      	b.n	80066e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e000      	b.n	80066e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  }
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
	...

080066ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b0ba      	sub	sp, #232	; 0xe8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006712:	2300      	movs	r3, #0
 8006714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006718:	2300      	movs	r3, #0
 800671a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800672a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10f      	bne.n	8006752 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <HAL_UART_IRQHandler+0x66>
 800673e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fbc2 	bl	8006ed4 <UART_Receive_IT>
      return;
 8006750:	e25b      	b.n	8006c0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 80de 	beq.w	8006918 <HAL_UART_IRQHandler+0x22c>
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d106      	bne.n	8006776 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80d1 	beq.w	8006918 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00b      	beq.n	800679a <HAL_UART_IRQHandler+0xae>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	f043 0201 	orr.w	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <HAL_UART_IRQHandler+0xd2>
 80067a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	f043 0202 	orr.w	r2, r3, #2
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <HAL_UART_IRQHandler+0xf6>
 80067ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	f043 0204 	orr.w	r2, r3, #4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d011      	beq.n	8006812 <HAL_UART_IRQHandler+0x126>
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d005      	beq.n	8006812 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	f043 0208 	orr.w	r2, r3, #8
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 81f2 	beq.w	8006c00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800681c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_UART_IRQHandler+0x14e>
 8006828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb4d 	bl	8006ed4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	bf0c      	ite	eq
 8006848:	2301      	moveq	r3, #1
 800684a:	2300      	movne	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <HAL_UART_IRQHandler+0x17a>
 800685e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d04f      	beq.n	8006906 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa55 	bl	8006d16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	d141      	bne.n	80068fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3314      	adds	r3, #20
 8006880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006890:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3314      	adds	r3, #20
 80068a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1d9      	bne.n	800687a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d013      	beq.n	80068f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d2:	4a7e      	ldr	r2, [pc, #504]	; (8006acc <HAL_UART_IRQHandler+0x3e0>)
 80068d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fb fada 	bl	8001e94 <HAL_DMA_Abort_IT>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d016      	beq.n	8006914 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80068f0:	4610      	mov	r0, r2
 80068f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	e00e      	b.n	8006914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f99e 	bl	8006c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	e00a      	b.n	8006914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f99a 	bl	8006c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006904:	e006      	b.n	8006914 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f996 	bl	8006c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006912:	e175      	b.n	8006c00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006914:	bf00      	nop
    return;
 8006916:	e173      	b.n	8006c00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	2b01      	cmp	r3, #1
 800691e:	f040 814f 	bne.w	8006bc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 8148 	beq.w	8006bc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 8141 	beq.w	8006bc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60bb      	str	r3, [r7, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	f040 80b6 	bne.w	8006ad0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006970:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 8145 	beq.w	8006c04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800697e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006982:	429a      	cmp	r2, r3
 8006984:	f080 813e 	bcs.w	8006c04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800698e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699a:	f000 8088 	beq.w	8006aae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1d9      	bne.n	800699e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3314      	adds	r3, #20
 80069f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069fc:	f023 0301 	bic.w	r3, r3, #1
 8006a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3314      	adds	r3, #20
 8006a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e1      	bne.n	80069ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3314      	adds	r3, #20
 8006a2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3314      	adds	r3, #20
 8006a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e3      	bne.n	8006a26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a7e:	f023 0310 	bic.w	r3, r3, #16
 8006a82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a90:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e3      	bne.n	8006a6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fb f983 	bl	8001db4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f8c1 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006aca:	e09b      	b.n	8006c04 <HAL_UART_IRQHandler+0x518>
 8006acc:	08006ddd 	.word	0x08006ddd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 808e 	beq.w	8006c08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006aec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8089 	beq.w	8006c08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	e853 3f00 	ldrex	r3, [r3]
 8006b04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b1a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e3      	bne.n	8006af6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3314      	adds	r3, #20
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	f023 0301 	bic.w	r3, r3, #1
 8006b44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b52:	633a      	str	r2, [r7, #48]	; 0x30
 8006b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e3      	bne.n	8006b2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0310 	bic.w	r3, r3, #16
 8006b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	330c      	adds	r3, #12
 8006b94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b98:	61fa      	str	r2, [r7, #28]
 8006b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	69b9      	ldr	r1, [r7, #24]
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e3      	bne.n	8006b74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f847 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bbe:	e023      	b.n	8006c08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d009      	beq.n	8006be0 <HAL_UART_IRQHandler+0x4f4>
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f913 	bl	8006e04 <UART_Transmit_IT>
    return;
 8006bde:	e014      	b.n	8006c0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00e      	beq.n	8006c0a <HAL_UART_IRQHandler+0x51e>
 8006bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f953 	bl	8006ea4 <UART_EndTransmit_IT>
    return;
 8006bfe:	e004      	b.n	8006c0a <HAL_UART_IRQHandler+0x51e>
    return;
 8006c00:	bf00      	nop
 8006c02:	e002      	b.n	8006c0a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c04:	bf00      	nop
 8006c06:	e000      	b.n	8006c0a <HAL_UART_IRQHandler+0x51e>
      return;
 8006c08:	bf00      	nop
  }
}
 8006c0a:	37e8      	adds	r7, #232	; 0xe8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	4613      	mov	r3, r2
 8006c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c74:	e03b      	b.n	8006cee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d037      	beq.n	8006cee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7e:	f7fa fa39 	bl	80010f4 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	6a3a      	ldr	r2, [r7, #32]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e03a      	b.n	8006d0e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d023      	beq.n	8006cee <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d020      	beq.n	8006cee <UART_WaitOnFlagUntilTimeout+0x8a>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b40      	cmp	r3, #64	; 0x40
 8006cb0:	d01d      	beq.n	8006cee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d116      	bne.n	8006cee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f81d 	bl	8006d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2208      	movs	r2, #8
 8006ce0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e00f      	b.n	8006d0e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	bf0c      	ite	eq
 8006cfe:	2301      	moveq	r3, #1
 8006d00:	2300      	movne	r3, #0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d0b4      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b095      	sub	sp, #84	; 0x54
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	330c      	adds	r3, #12
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	330c      	adds	r3, #12
 8006d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d3e:	643a      	str	r2, [r7, #64]	; 0x40
 8006d40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e5      	bne.n	8006d1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3314      	adds	r3, #20
 8006d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	f023 0301 	bic.w	r3, r3, #1
 8006d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e5      	bne.n	8006d52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d119      	bne.n	8006dc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	330c      	adds	r3, #12
 8006d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f023 0310 	bic.w	r3, r3, #16
 8006da4:	647b      	str	r3, [r7, #68]	; 0x44
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	330c      	adds	r3, #12
 8006dac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dae:	61ba      	str	r2, [r7, #24]
 8006db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6979      	ldr	r1, [r7, #20]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	613b      	str	r3, [r7, #16]
   return(result);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e5      	bne.n	8006d8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006dd0:	bf00      	nop
 8006dd2:	3754      	adds	r7, #84	; 0x54
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7ff ff1e 	bl	8006c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b21      	cmp	r3, #33	; 0x21
 8006e16:	d13e      	bne.n	8006e96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e20:	d114      	bne.n	8006e4c <UART_Transmit_IT+0x48>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d110      	bne.n	8006e4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	1c9a      	adds	r2, r3, #2
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	621a      	str	r2, [r3, #32]
 8006e4a:	e008      	b.n	8006e5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	1c59      	adds	r1, r3, #1
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6211      	str	r1, [r2, #32]
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10f      	bne.n	8006e92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e000      	b.n	8006e98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e96:	2302      	movs	r3, #2
  }
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68da      	ldr	r2, [r3, #12]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff fea3 	bl	8006c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08c      	sub	sp, #48	; 0x30
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b22      	cmp	r3, #34	; 0x22
 8006ee6:	f040 80ae 	bne.w	8007046 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef2:	d117      	bne.n	8006f24 <UART_Receive_IT+0x50>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d113      	bne.n	8006f24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f04:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	1c9a      	adds	r2, r3, #2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	629a      	str	r2, [r3, #40]	; 0x28
 8006f22:	e026      	b.n	8006f72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f36:	d007      	beq.n	8006f48 <UART_Receive_IT+0x74>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <UART_Receive_IT+0x82>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d106      	bne.n	8006f56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	701a      	strb	r2, [r3, #0]
 8006f54:	e008      	b.n	8006f68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d15d      	bne.n	8007042 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0220 	bic.w	r2, r2, #32
 8006f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695a      	ldr	r2, [r3, #20]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0201 	bic.w	r2, r2, #1
 8006fb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d135      	bne.n	8007038 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f023 0310 	bic.w	r3, r3, #16
 8006fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	330c      	adds	r3, #12
 8006ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff2:	623a      	str	r2, [r7, #32]
 8006ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	69f9      	ldr	r1, [r7, #28]
 8006ff8:	6a3a      	ldr	r2, [r7, #32]
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e5      	bne.n	8006fd2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0310 	and.w	r3, r3, #16
 8007010:	2b10      	cmp	r3, #16
 8007012:	d10a      	bne.n	800702a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff fe0b 	bl	8006c4c <HAL_UARTEx_RxEventCallback>
 8007036:	e002      	b.n	800703e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fdf3 	bl	8006c24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	e002      	b.n	8007048 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	e000      	b.n	8007048 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007046:	2302      	movs	r3, #2
  }
}
 8007048:	4618      	mov	r0, r3
 800704a:	3730      	adds	r7, #48	; 0x30
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007054:	b0c0      	sub	sp, #256	; 0x100
 8007056:	af00      	add	r7, sp, #0
 8007058:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	68d9      	ldr	r1, [r3, #12]
 800706e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	ea40 0301 	orr.w	r3, r0, r1
 8007078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800707a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	431a      	orrs	r2, r3
 8007088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	431a      	orrs	r2, r3
 8007090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800709c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070a8:	f021 010c 	bic.w	r1, r1, #12
 80070ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070b6:	430b      	orrs	r3, r1
 80070b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ca:	6999      	ldr	r1, [r3, #24]
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	ea40 0301 	orr.w	r3, r0, r1
 80070d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4b8f      	ldr	r3, [pc, #572]	; (800731c <UART_SetConfig+0x2cc>)
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d005      	beq.n	80070f0 <UART_SetConfig+0xa0>
 80070e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	4b8d      	ldr	r3, [pc, #564]	; (8007320 <UART_SetConfig+0x2d0>)
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d104      	bne.n	80070fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070f0:	f7fd fed2 	bl	8004e98 <HAL_RCC_GetPCLK2Freq>
 80070f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80070f8:	e003      	b.n	8007102 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070fa:	f7fd feb9 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 80070fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710c:	f040 810c 	bne.w	8007328 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007114:	2200      	movs	r2, #0
 8007116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800711a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800711e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007122:	4622      	mov	r2, r4
 8007124:	462b      	mov	r3, r5
 8007126:	1891      	adds	r1, r2, r2
 8007128:	65b9      	str	r1, [r7, #88]	; 0x58
 800712a:	415b      	adcs	r3, r3
 800712c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800712e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007132:	4621      	mov	r1, r4
 8007134:	eb12 0801 	adds.w	r8, r2, r1
 8007138:	4629      	mov	r1, r5
 800713a:	eb43 0901 	adc.w	r9, r3, r1
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800714a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800714e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007152:	4690      	mov	r8, r2
 8007154:	4699      	mov	r9, r3
 8007156:	4623      	mov	r3, r4
 8007158:	eb18 0303 	adds.w	r3, r8, r3
 800715c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007160:	462b      	mov	r3, r5
 8007162:	eb49 0303 	adc.w	r3, r9, r3
 8007166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007176:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800717a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800717e:	460b      	mov	r3, r1
 8007180:	18db      	adds	r3, r3, r3
 8007182:	653b      	str	r3, [r7, #80]	; 0x50
 8007184:	4613      	mov	r3, r2
 8007186:	eb42 0303 	adc.w	r3, r2, r3
 800718a:	657b      	str	r3, [r7, #84]	; 0x54
 800718c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007190:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007194:	f7f9 f8a4 	bl	80002e0 <__aeabi_uldivmod>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4b61      	ldr	r3, [pc, #388]	; (8007324 <UART_SetConfig+0x2d4>)
 800719e:	fba3 2302 	umull	r2, r3, r3, r2
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	011c      	lsls	r4, r3, #4
 80071a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80071b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	1891      	adds	r1, r2, r2
 80071be:	64b9      	str	r1, [r7, #72]	; 0x48
 80071c0:	415b      	adcs	r3, r3
 80071c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071c8:	4641      	mov	r1, r8
 80071ca:	eb12 0a01 	adds.w	sl, r2, r1
 80071ce:	4649      	mov	r1, r9
 80071d0:	eb43 0b01 	adc.w	fp, r3, r1
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071e8:	4692      	mov	sl, r2
 80071ea:	469b      	mov	fp, r3
 80071ec:	4643      	mov	r3, r8
 80071ee:	eb1a 0303 	adds.w	r3, sl, r3
 80071f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071f6:	464b      	mov	r3, r9
 80071f8:	eb4b 0303 	adc.w	r3, fp, r3
 80071fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800720c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007210:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007214:	460b      	mov	r3, r1
 8007216:	18db      	adds	r3, r3, r3
 8007218:	643b      	str	r3, [r7, #64]	; 0x40
 800721a:	4613      	mov	r3, r2
 800721c:	eb42 0303 	adc.w	r3, r2, r3
 8007220:	647b      	str	r3, [r7, #68]	; 0x44
 8007222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007226:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800722a:	f7f9 f859 	bl	80002e0 <__aeabi_uldivmod>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4611      	mov	r1, r2
 8007234:	4b3b      	ldr	r3, [pc, #236]	; (8007324 <UART_SetConfig+0x2d4>)
 8007236:	fba3 2301 	umull	r2, r3, r3, r1
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	2264      	movs	r2, #100	; 0x64
 800723e:	fb02 f303 	mul.w	r3, r2, r3
 8007242:	1acb      	subs	r3, r1, r3
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800724a:	4b36      	ldr	r3, [pc, #216]	; (8007324 <UART_SetConfig+0x2d4>)
 800724c:	fba3 2302 	umull	r2, r3, r3, r2
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007258:	441c      	add	r4, r3
 800725a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007264:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007268:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800726c:	4642      	mov	r2, r8
 800726e:	464b      	mov	r3, r9
 8007270:	1891      	adds	r1, r2, r2
 8007272:	63b9      	str	r1, [r7, #56]	; 0x38
 8007274:	415b      	adcs	r3, r3
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800727c:	4641      	mov	r1, r8
 800727e:	1851      	adds	r1, r2, r1
 8007280:	6339      	str	r1, [r7, #48]	; 0x30
 8007282:	4649      	mov	r1, r9
 8007284:	414b      	adcs	r3, r1
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007294:	4659      	mov	r1, fp
 8007296:	00cb      	lsls	r3, r1, #3
 8007298:	4651      	mov	r1, sl
 800729a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800729e:	4651      	mov	r1, sl
 80072a0:	00ca      	lsls	r2, r1, #3
 80072a2:	4610      	mov	r0, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	4603      	mov	r3, r0
 80072a8:	4642      	mov	r2, r8
 80072aa:	189b      	adds	r3, r3, r2
 80072ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072b0:	464b      	mov	r3, r9
 80072b2:	460a      	mov	r2, r1
 80072b4:	eb42 0303 	adc.w	r3, r2, r3
 80072b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072d0:	460b      	mov	r3, r1
 80072d2:	18db      	adds	r3, r3, r3
 80072d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d6:	4613      	mov	r3, r2
 80072d8:	eb42 0303 	adc.w	r3, r2, r3
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80072e6:	f7f8 fffb 	bl	80002e0 <__aeabi_uldivmod>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <UART_SetConfig+0x2d4>)
 80072f0:	fba3 1302 	umull	r1, r3, r3, r2
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	2164      	movs	r1, #100	; 0x64
 80072f8:	fb01 f303 	mul.w	r3, r1, r3
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	3332      	adds	r3, #50	; 0x32
 8007302:	4a08      	ldr	r2, [pc, #32]	; (8007324 <UART_SetConfig+0x2d4>)
 8007304:	fba2 2303 	umull	r2, r3, r2, r3
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	f003 0207 	and.w	r2, r3, #7
 800730e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4422      	add	r2, r4
 8007316:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007318:	e106      	b.n	8007528 <UART_SetConfig+0x4d8>
 800731a:	bf00      	nop
 800731c:	40011000 	.word	0x40011000
 8007320:	40011400 	.word	0x40011400
 8007324:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800732c:	2200      	movs	r2, #0
 800732e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007332:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007336:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800733a:	4642      	mov	r2, r8
 800733c:	464b      	mov	r3, r9
 800733e:	1891      	adds	r1, r2, r2
 8007340:	6239      	str	r1, [r7, #32]
 8007342:	415b      	adcs	r3, r3
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
 8007346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800734a:	4641      	mov	r1, r8
 800734c:	1854      	adds	r4, r2, r1
 800734e:	4649      	mov	r1, r9
 8007350:	eb43 0501 	adc.w	r5, r3, r1
 8007354:	f04f 0200 	mov.w	r2, #0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	00eb      	lsls	r3, r5, #3
 800735e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007362:	00e2      	lsls	r2, r4, #3
 8007364:	4614      	mov	r4, r2
 8007366:	461d      	mov	r5, r3
 8007368:	4643      	mov	r3, r8
 800736a:	18e3      	adds	r3, r4, r3
 800736c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007370:	464b      	mov	r3, r9
 8007372:	eb45 0303 	adc.w	r3, r5, r3
 8007376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800737a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007396:	4629      	mov	r1, r5
 8007398:	008b      	lsls	r3, r1, #2
 800739a:	4621      	mov	r1, r4
 800739c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073a0:	4621      	mov	r1, r4
 80073a2:	008a      	lsls	r2, r1, #2
 80073a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80073a8:	f7f8 ff9a 	bl	80002e0 <__aeabi_uldivmod>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4b60      	ldr	r3, [pc, #384]	; (8007534 <UART_SetConfig+0x4e4>)
 80073b2:	fba3 2302 	umull	r2, r3, r3, r2
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	011c      	lsls	r4, r3, #4
 80073ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073cc:	4642      	mov	r2, r8
 80073ce:	464b      	mov	r3, r9
 80073d0:	1891      	adds	r1, r2, r2
 80073d2:	61b9      	str	r1, [r7, #24]
 80073d4:	415b      	adcs	r3, r3
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073dc:	4641      	mov	r1, r8
 80073de:	1851      	adds	r1, r2, r1
 80073e0:	6139      	str	r1, [r7, #16]
 80073e2:	4649      	mov	r1, r9
 80073e4:	414b      	adcs	r3, r1
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073f4:	4659      	mov	r1, fp
 80073f6:	00cb      	lsls	r3, r1, #3
 80073f8:	4651      	mov	r1, sl
 80073fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073fe:	4651      	mov	r1, sl
 8007400:	00ca      	lsls	r2, r1, #3
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	4603      	mov	r3, r0
 8007408:	4642      	mov	r2, r8
 800740a:	189b      	adds	r3, r3, r2
 800740c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007410:	464b      	mov	r3, r9
 8007412:	460a      	mov	r2, r1
 8007414:	eb42 0303 	adc.w	r3, r2, r3
 8007418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	67bb      	str	r3, [r7, #120]	; 0x78
 8007426:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007434:	4649      	mov	r1, r9
 8007436:	008b      	lsls	r3, r1, #2
 8007438:	4641      	mov	r1, r8
 800743a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800743e:	4641      	mov	r1, r8
 8007440:	008a      	lsls	r2, r1, #2
 8007442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007446:	f7f8 ff4b 	bl	80002e0 <__aeabi_uldivmod>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4611      	mov	r1, r2
 8007450:	4b38      	ldr	r3, [pc, #224]	; (8007534 <UART_SetConfig+0x4e4>)
 8007452:	fba3 2301 	umull	r2, r3, r3, r1
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	2264      	movs	r2, #100	; 0x64
 800745a:	fb02 f303 	mul.w	r3, r2, r3
 800745e:	1acb      	subs	r3, r1, r3
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	3332      	adds	r3, #50	; 0x32
 8007464:	4a33      	ldr	r2, [pc, #204]	; (8007534 <UART_SetConfig+0x4e4>)
 8007466:	fba2 2303 	umull	r2, r3, r2, r3
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007470:	441c      	add	r4, r3
 8007472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007476:	2200      	movs	r2, #0
 8007478:	673b      	str	r3, [r7, #112]	; 0x70
 800747a:	677a      	str	r2, [r7, #116]	; 0x74
 800747c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	1891      	adds	r1, r2, r2
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	415b      	adcs	r3, r3
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007490:	4641      	mov	r1, r8
 8007492:	1851      	adds	r1, r2, r1
 8007494:	6039      	str	r1, [r7, #0]
 8007496:	4649      	mov	r1, r9
 8007498:	414b      	adcs	r3, r1
 800749a:	607b      	str	r3, [r7, #4]
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074a8:	4659      	mov	r1, fp
 80074aa:	00cb      	lsls	r3, r1, #3
 80074ac:	4651      	mov	r1, sl
 80074ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074b2:	4651      	mov	r1, sl
 80074b4:	00ca      	lsls	r2, r1, #3
 80074b6:	4610      	mov	r0, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	4603      	mov	r3, r0
 80074bc:	4642      	mov	r2, r8
 80074be:	189b      	adds	r3, r3, r2
 80074c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80074c2:	464b      	mov	r3, r9
 80074c4:	460a      	mov	r2, r1
 80074c6:	eb42 0303 	adc.w	r3, r2, r3
 80074ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	663b      	str	r3, [r7, #96]	; 0x60
 80074d6:	667a      	str	r2, [r7, #100]	; 0x64
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80074e4:	4649      	mov	r1, r9
 80074e6:	008b      	lsls	r3, r1, #2
 80074e8:	4641      	mov	r1, r8
 80074ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ee:	4641      	mov	r1, r8
 80074f0:	008a      	lsls	r2, r1, #2
 80074f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80074f6:	f7f8 fef3 	bl	80002e0 <__aeabi_uldivmod>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <UART_SetConfig+0x4e4>)
 8007500:	fba3 1302 	umull	r1, r3, r3, r2
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	2164      	movs	r1, #100	; 0x64
 8007508:	fb01 f303 	mul.w	r3, r1, r3
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	3332      	adds	r3, #50	; 0x32
 8007512:	4a08      	ldr	r2, [pc, #32]	; (8007534 <UART_SetConfig+0x4e4>)
 8007514:	fba2 2303 	umull	r2, r3, r2, r3
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	f003 020f 	and.w	r2, r3, #15
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4422      	add	r2, r4
 8007526:	609a      	str	r2, [r3, #8]
}
 8007528:	bf00      	nop
 800752a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800752e:	46bd      	mov	sp, r7
 8007530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007534:	51eb851f 	.word	0x51eb851f

08007538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007538:	b084      	sub	sp, #16
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	f107 001c 	add.w	r0, r7, #28
 8007546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800754a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800754e:	2b01      	cmp	r3, #1
 8007550:	d123      	bne.n	800759a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800757a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800757e:	2b01      	cmp	r3, #1
 8007580:	d105      	bne.n	800758e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 fae2 	bl	8008b58 <USB_CoreReset>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
 8007598:	e01b      	b.n	80075d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fad6 	bl	8008b58 <USB_CoreReset>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	639a      	str	r2, [r3, #56]	; 0x38
 80075c4:	e005      	b.n	80075d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80075d2:	7fbb      	ldrb	r3, [r7, #30]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10b      	bne.n	80075f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f043 0206 	orr.w	r2, r3, #6
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f043 0220 	orr.w	r2, r3, #32
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075fc:	b004      	add	sp, #16
 80075fe:	4770      	bx	lr

08007600 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	4613      	mov	r3, r2
 800760c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	2b02      	cmp	r3, #2
 8007612:	d165      	bne.n	80076e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4a41      	ldr	r2, [pc, #260]	; (800771c <USB_SetTurnaroundTime+0x11c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d906      	bls.n	800762a <USB_SetTurnaroundTime+0x2a>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4a40      	ldr	r2, [pc, #256]	; (8007720 <USB_SetTurnaroundTime+0x120>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d202      	bcs.n	800762a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007624:	230f      	movs	r3, #15
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	e062      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	4a3c      	ldr	r2, [pc, #240]	; (8007720 <USB_SetTurnaroundTime+0x120>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d306      	bcc.n	8007640 <USB_SetTurnaroundTime+0x40>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4a3b      	ldr	r2, [pc, #236]	; (8007724 <USB_SetTurnaroundTime+0x124>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d202      	bcs.n	8007640 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800763a:	230e      	movs	r3, #14
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	e057      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4a38      	ldr	r2, [pc, #224]	; (8007724 <USB_SetTurnaroundTime+0x124>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d306      	bcc.n	8007656 <USB_SetTurnaroundTime+0x56>
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4a37      	ldr	r2, [pc, #220]	; (8007728 <USB_SetTurnaroundTime+0x128>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d202      	bcs.n	8007656 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007650:	230d      	movs	r3, #13
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e04c      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4a33      	ldr	r2, [pc, #204]	; (8007728 <USB_SetTurnaroundTime+0x128>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d306      	bcc.n	800766c <USB_SetTurnaroundTime+0x6c>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	4a32      	ldr	r2, [pc, #200]	; (800772c <USB_SetTurnaroundTime+0x12c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d802      	bhi.n	800766c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007666:	230c      	movs	r3, #12
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	e041      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4a2f      	ldr	r2, [pc, #188]	; (800772c <USB_SetTurnaroundTime+0x12c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d906      	bls.n	8007682 <USB_SetTurnaroundTime+0x82>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4a2e      	ldr	r2, [pc, #184]	; (8007730 <USB_SetTurnaroundTime+0x130>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d802      	bhi.n	8007682 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800767c:	230b      	movs	r3, #11
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	e036      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	4a2a      	ldr	r2, [pc, #168]	; (8007730 <USB_SetTurnaroundTime+0x130>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d906      	bls.n	8007698 <USB_SetTurnaroundTime+0x98>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4a29      	ldr	r2, [pc, #164]	; (8007734 <USB_SetTurnaroundTime+0x134>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d802      	bhi.n	8007698 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007692:	230a      	movs	r3, #10
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	e02b      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4a26      	ldr	r2, [pc, #152]	; (8007734 <USB_SetTurnaroundTime+0x134>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d906      	bls.n	80076ae <USB_SetTurnaroundTime+0xae>
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4a25      	ldr	r2, [pc, #148]	; (8007738 <USB_SetTurnaroundTime+0x138>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d202      	bcs.n	80076ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80076a8:	2309      	movs	r3, #9
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	e020      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	4a21      	ldr	r2, [pc, #132]	; (8007738 <USB_SetTurnaroundTime+0x138>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d306      	bcc.n	80076c4 <USB_SetTurnaroundTime+0xc4>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	4a20      	ldr	r2, [pc, #128]	; (800773c <USB_SetTurnaroundTime+0x13c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d802      	bhi.n	80076c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80076be:	2308      	movs	r3, #8
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	e015      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4a1d      	ldr	r2, [pc, #116]	; (800773c <USB_SetTurnaroundTime+0x13c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d906      	bls.n	80076da <USB_SetTurnaroundTime+0xda>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4a1c      	ldr	r2, [pc, #112]	; (8007740 <USB_SetTurnaroundTime+0x140>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d202      	bcs.n	80076da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80076d4:	2307      	movs	r3, #7
 80076d6:	617b      	str	r3, [r7, #20]
 80076d8:	e00a      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80076da:	2306      	movs	r3, #6
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e007      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d102      	bne.n	80076ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80076e6:	2309      	movs	r3, #9
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e001      	b.n	80076f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80076ec:	2309      	movs	r3, #9
 80076ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	029b      	lsls	r3, r3, #10
 8007704:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007708:	431a      	orrs	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	00d8acbf 	.word	0x00d8acbf
 8007720:	00e4e1c0 	.word	0x00e4e1c0
 8007724:	00f42400 	.word	0x00f42400
 8007728:	01067380 	.word	0x01067380
 800772c:	011a499f 	.word	0x011a499f
 8007730:	01312cff 	.word	0x01312cff
 8007734:	014ca43f 	.word	0x014ca43f
 8007738:	016e3600 	.word	0x016e3600
 800773c:	01a6ab1f 	.word	0x01a6ab1f
 8007740:	01e84800 	.word	0x01e84800

08007744 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f043 0201 	orr.w	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f023 0201 	bic.w	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d115      	bne.n	80077d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077b6:	200a      	movs	r0, #10
 80077b8:	f7f9 fca8 	bl	800110c <HAL_Delay>
      ms += 10U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	330a      	adds	r3, #10
 80077c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f001 f939 	bl	8008a3a <USB_GetMode>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d01e      	beq.n	800780c <USB_SetCurrentMode+0x84>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2bc7      	cmp	r3, #199	; 0xc7
 80077d2:	d9f0      	bls.n	80077b6 <USB_SetCurrentMode+0x2e>
 80077d4:	e01a      	b.n	800780c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d115      	bne.n	8007808 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80077e8:	200a      	movs	r0, #10
 80077ea:	f7f9 fc8f 	bl	800110c <HAL_Delay>
      ms += 10U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	330a      	adds	r3, #10
 80077f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 f920 	bl	8008a3a <USB_GetMode>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <USB_SetCurrentMode+0x84>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2bc7      	cmp	r3, #199	; 0xc7
 8007804:	d9f0      	bls.n	80077e8 <USB_SetCurrentMode+0x60>
 8007806:	e001      	b.n	800780c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e005      	b.n	8007818 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2bc8      	cmp	r3, #200	; 0xc8
 8007810:	d101      	bne.n	8007816 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007820:	b084      	sub	sp, #16
 8007822:	b580      	push	{r7, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800782e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800783a:	2300      	movs	r3, #0
 800783c:	613b      	str	r3, [r7, #16]
 800783e:	e009      	b.n	8007854 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3340      	adds	r3, #64	; 0x40
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	2200      	movs	r2, #0
 800784c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	3301      	adds	r3, #1
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b0e      	cmp	r3, #14
 8007858:	d9f2      	bls.n	8007840 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800785a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800785e:	2b00      	cmp	r3, #0
 8007860:	d11c      	bne.n	800789c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007870:	f043 0302 	orr.w	r3, r3, #2
 8007874:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	e005      	b.n	80078a8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078ae:	461a      	mov	r2, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078b4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d10d      	bne.n	80078d8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078c4:	2100      	movs	r1, #0
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f968 	bl	8007b9c <USB_SetDevSpeed>
 80078cc:	e008      	b.n	80078e0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078ce:	2101      	movs	r1, #1
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f963 	bl	8007b9c <USB_SetDevSpeed>
 80078d6:	e003      	b.n	80078e0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078d8:	2103      	movs	r1, #3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f95e 	bl	8007b9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078e0:	2110      	movs	r1, #16
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f8fa 	bl	8007adc <USB_FlushTxFifo>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f924 	bl	8007b40 <USB_FlushRxFifo>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007908:	461a      	mov	r2, r3
 800790a:	2300      	movs	r3, #0
 800790c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007914:	461a      	mov	r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	461a      	mov	r2, r3
 8007922:	2300      	movs	r3, #0
 8007924:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007926:	2300      	movs	r3, #0
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	e043      	b.n	80079b4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800793e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007942:	d118      	bne.n	8007976 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007956:	461a      	mov	r2, r3
 8007958:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	e013      	b.n	8007988 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	461a      	mov	r2, r3
 800796e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	e008      	b.n	8007988 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	461a      	mov	r2, r3
 8007984:	2300      	movs	r3, #0
 8007986:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007994:	461a      	mov	r2, r3
 8007996:	2300      	movs	r3, #0
 8007998:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a6:	461a      	mov	r2, r3
 80079a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	3301      	adds	r3, #1
 80079b2:	613b      	str	r3, [r7, #16]
 80079b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079b8:	461a      	mov	r2, r3
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	4293      	cmp	r3, r2
 80079be:	d3b5      	bcc.n	800792c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	e043      	b.n	8007a4e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079dc:	d118      	bne.n	8007a10 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f0:	461a      	mov	r2, r3
 80079f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	e013      	b.n	8007a22 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	461a      	mov	r2, r3
 8007a08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	e008      	b.n	8007a22 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2300      	movs	r3, #0
 8007a32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a40:	461a      	mov	r2, r3
 8007a42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007a52:	461a      	mov	r2, r3
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d3b5      	bcc.n	80079c6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d105      	bne.n	8007a90 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	f043 0210 	orr.w	r2, r3, #16
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699a      	ldr	r2, [r3, #24]
 8007a94:	4b10      	ldr	r3, [pc, #64]	; (8007ad8 <USB_DevInit+0x2b8>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f043 0208 	orr.w	r2, r3, #8
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ab0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d107      	bne.n	8007ac8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ac0:	f043 0304 	orr.w	r3, r3, #4
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ad4:	b004      	add	sp, #16
 8007ad6:	4770      	bx	lr
 8007ad8:	803c3800 	.word	0x803c3800

08007adc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3301      	adds	r3, #1
 8007aee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007af6:	d901      	bls.n	8007afc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e01b      	b.n	8007b34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	daf2      	bge.n	8007aea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	019b      	lsls	r3, r3, #6
 8007b0c:	f043 0220 	orr.w	r2, r3, #32
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3301      	adds	r3, #1
 8007b18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007b20:	d901      	bls.n	8007b26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e006      	b.n	8007b34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b20      	cmp	r3, #32
 8007b30:	d0f0      	beq.n	8007b14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007b58:	d901      	bls.n	8007b5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e018      	b.n	8007b90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	daf2      	bge.n	8007b4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2210      	movs	r2, #16
 8007b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	3301      	adds	r3, #1
 8007b74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007b7c:	d901      	bls.n	8007b82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e006      	b.n	8007b90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	f003 0310 	and.w	r3, r3, #16
 8007b8a:	2b10      	cmp	r3, #16
 8007b8c:	d0f0      	beq.n	8007b70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b087      	sub	sp, #28
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f003 0306 	and.w	r3, r3, #6
 8007be6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	75fb      	strb	r3, [r7, #23]
 8007bf2:	e00a      	b.n	8007c0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d002      	beq.n	8007c00 <USB_GetDevSpeed+0x32>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b06      	cmp	r3, #6
 8007bfe:	d102      	bne.n	8007c06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007c00:	2302      	movs	r3, #2
 8007c02:	75fb      	strb	r3, [r7, #23]
 8007c04:	e001      	b.n	8007c0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007c06:	230f      	movs	r3, #15
 8007c08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	785b      	ldrb	r3, [r3, #1]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d13a      	bne.n	8007caa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	f003 030f 	and.w	r3, r3, #15
 8007c44:	2101      	movs	r1, #1
 8007c46:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	68f9      	ldr	r1, [r7, #12]
 8007c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c52:	4313      	orrs	r3, r2
 8007c54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d155      	bne.n	8007d18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	791b      	ldrb	r3, [r3, #4]
 8007c86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	059b      	lsls	r3, r3, #22
 8007c8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c90:	4313      	orrs	r3, r2
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	0151      	lsls	r1, r2, #5
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	440a      	add	r2, r1
 8007c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	e036      	b.n	8007d18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb0:	69da      	ldr	r2, [r3, #28]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	2101      	movs	r1, #1
 8007cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	68f9      	ldr	r1, [r7, #12]
 8007cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d11a      	bne.n	8007d18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	791b      	ldrb	r3, [r3, #4]
 8007cfc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	4313      	orrs	r3, r2
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	0151      	lsls	r1, r2, #5
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	440a      	add	r2, r1
 8007d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d161      	bne.n	8007e08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d5a:	d11f      	bne.n	8007d9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	0151      	lsls	r1, r2, #5
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	440a      	add	r2, r1
 8007d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	2101      	movs	r1, #1
 8007dae:	fa01 f303 	lsl.w	r3, r1, r3
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	43db      	mvns	r3, r3
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc6:	69da      	ldr	r2, [r3, #28]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	43db      	mvns	r3, r3
 8007dda:	68f9      	ldr	r1, [r7, #12]
 8007ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007de0:	4013      	ands	r3, r2
 8007de2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	0159      	lsls	r1, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	440b      	add	r3, r1
 8007dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfe:	4619      	mov	r1, r3
 8007e00:	4b35      	ldr	r3, [pc, #212]	; (8007ed8 <USB_DeactivateEndpoint+0x1b0>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	600b      	str	r3, [r1, #0]
 8007e06:	e060      	b.n	8007eca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1e:	d11f      	bne.n	8007e60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	2101      	movs	r1, #1
 8007e72:	fa01 f303 	lsl.w	r3, r1, r3
 8007e76:	041b      	lsls	r3, r3, #16
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e80:	4013      	ands	r3, r2
 8007e82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8a:	69da      	ldr	r2, [r3, #28]
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	2101      	movs	r1, #1
 8007e96:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9a:	041b      	lsls	r3, r3, #16
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	0159      	lsls	r1, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	440b      	add	r3, r1
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <USB_DeactivateEndpoint+0x1b4>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	ec337800 	.word	0xec337800
 8007edc:	eff37800 	.word	0xeff37800

08007ee0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08a      	sub	sp, #40	; 0x28
 8007ee4:	af02      	add	r7, sp, #8
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	785b      	ldrb	r3, [r3, #1]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	f040 8180 	bne.w	8008202 <USB_EPStartXfer+0x322>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d132      	bne.n	8007f70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	0151      	lsls	r1, r2, #5
 8007f1c:	69fa      	ldr	r2, [r7, #28]
 8007f1e:	440a      	add	r2, r1
 8007f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	0151      	lsls	r1, r2, #5
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	440a      	add	r2, r1
 8007f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	0151      	lsls	r1, r2, #5
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	440a      	add	r2, r1
 8007f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f68:	0cdb      	lsrs	r3, r3, #19
 8007f6a:	04db      	lsls	r3, r3, #19
 8007f6c:	6113      	str	r3, [r2, #16]
 8007f6e:	e098      	b.n	80080a2 <USB_EPStartXfer+0x1c2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	0151      	lsls	r1, r2, #5
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	440a      	add	r2, r1
 8007f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f8a:	0cdb      	lsrs	r3, r3, #19
 8007f8c:	04db      	lsls	r3, r3, #19
 8007f8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007faa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007fae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fb2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d11a      	bne.n	8007ff0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691a      	ldr	r2, [r3, #16]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d903      	bls.n	8007fce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	0151      	lsls	r1, r2, #5
 8007fe0:	69fa      	ldr	r2, [r7, #28]
 8007fe2:	440a      	add	r2, r1
 8007fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fec:	6113      	str	r3, [r2, #16]
 8007fee:	e045      	b.n	800807c <USB_EPStartXfer+0x19c>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	691a      	ldr	r2, [r3, #16]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	1e5a      	subs	r2, r3, #1
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	fbb2 f3f3 	udiv	r3, r2, r3
 8008004:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	015a      	lsls	r2, r3, #5
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	8afb      	ldrh	r3, [r7, #22]
 8008016:	04db      	lsls	r3, r3, #19
 8008018:	4619      	mov	r1, r3
 800801a:	4ba4      	ldr	r3, [pc, #656]	; (80082ac <USB_EPStartXfer+0x3cc>)
 800801c:	400b      	ands	r3, r1
 800801e:	69b9      	ldr	r1, [r7, #24]
 8008020:	0148      	lsls	r0, r1, #5
 8008022:	69f9      	ldr	r1, [r7, #28]
 8008024:	4401      	add	r1, r0
 8008026:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800802a:	4313      	orrs	r3, r2
 800802c:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	791b      	ldrb	r3, [r3, #4]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d122      	bne.n	800807c <USB_EPStartXfer+0x19c>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008050:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008054:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	8afb      	ldrh	r3, [r7, #22]
 8008066:	075b      	lsls	r3, r3, #29
 8008068:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800806c:	69b9      	ldr	r1, [r7, #24]
 800806e:	0148      	lsls	r0, r1, #5
 8008070:	69f9      	ldr	r1, [r7, #28]
 8008072:	4401      	add	r1, r0
 8008074:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008078:	4313      	orrs	r3, r2
 800807a:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	691a      	ldr	r2, [r3, #16]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008092:	69b9      	ldr	r1, [r7, #24]
 8008094:	0148      	lsls	r0, r1, #5
 8008096:	69f9      	ldr	r1, [r7, #28]
 8008098:	4401      	add	r1, r0
 800809a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800809e:	4313      	orrs	r3, r2
 80080a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d14b      	bne.n	8008140 <USB_EPStartXfer+0x260>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d009      	beq.n	80080c4 <USB_EPStartXfer+0x1e4>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080bc:	461a      	mov	r2, r3
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	791b      	ldrb	r3, [r3, #4]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d128      	bne.n	800811e <USB_EPStartXfer+0x23e>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d110      	bne.n	80080fe <USB_EPStartXfer+0x21e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	69fa      	ldr	r2, [r7, #28]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080fa:	6013      	str	r3, [r2, #0]
 80080fc:	e00f      	b.n	800811e <USB_EPStartXfer+0x23e>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	0151      	lsls	r1, r2, #5
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	440a      	add	r2, r1
 8008114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800811c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	0151      	lsls	r1, r2, #5
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	440a      	add	r2, r1
 8008134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008138:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	e165      	b.n	800840c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	440a      	add	r2, r1
 8008156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800815e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	791b      	ldrb	r3, [r3, #4]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d015      	beq.n	8008194 <USB_EPStartXfer+0x2b4>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 814d 	beq.w	800840c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	f003 030f 	and.w	r3, r3, #15
 8008182:	2101      	movs	r1, #1
 8008184:	fa01 f303 	lsl.w	r3, r1, r3
 8008188:	69f9      	ldr	r1, [r7, #28]
 800818a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800818e:	4313      	orrs	r3, r2
 8008190:	634b      	str	r3, [r1, #52]	; 0x34
 8008192:	e13b      	b.n	800840c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d110      	bne.n	80081c6 <USB_EPStartXfer+0x2e6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	e00f      	b.n	80081e6 <USB_EPStartXfer+0x306>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	68d9      	ldr	r1, [r3, #12]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	b298      	uxth	r0, r3
 80081f4:	79fb      	ldrb	r3, [r7, #7]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4603      	mov	r3, r0
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 f9b8 	bl	8008570 <USB_WritePacket>
 8008200:	e104      	b.n	800840c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	440a      	add	r2, r1
 8008218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800821c:	0cdb      	lsrs	r3, r3, #19
 800821e:	04db      	lsls	r3, r3, #19
 8008220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	0151      	lsls	r1, r2, #5
 8008234:	69fa      	ldr	r2, [r7, #28]
 8008236:	440a      	add	r2, r1
 8008238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800823c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008240:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008244:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d131      	bne.n	80082b0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <USB_EPStartXfer+0x37c>
      {
        ep->xfer_len = ep->maxpacket;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	691a      	ldr	r2, [r3, #16]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800827a:	69b9      	ldr	r1, [r7, #24]
 800827c:	0148      	lsls	r0, r1, #5
 800827e:	69f9      	ldr	r1, [r7, #28]
 8008280:	4401      	add	r1, r0
 8008282:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008286:	4313      	orrs	r3, r2
 8008288:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	0151      	lsls	r1, r2, #5
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	440a      	add	r2, r1
 80082a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082a8:	6113      	str	r3, [r2, #16]
 80082aa:	e061      	b.n	8008370 <USB_EPStartXfer+0x490>
 80082ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d123      	bne.n	8008300 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c4:	691a      	ldr	r2, [r3, #16]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082ce:	69b9      	ldr	r1, [r7, #24]
 80082d0:	0148      	lsls	r0, r1, #5
 80082d2:	69f9      	ldr	r1, [r7, #28]
 80082d4:	4401      	add	r1, r0
 80082d6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082da:	4313      	orrs	r3, r2
 80082dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	0151      	lsls	r1, r2, #5
 80082f0:	69fa      	ldr	r2, [r7, #28]
 80082f2:	440a      	add	r2, r1
 80082f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082fc:	6113      	str	r3, [r2, #16]
 80082fe:	e037      	b.n	8008370 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	4413      	add	r3, r2
 800830a:	1e5a      	subs	r2, r3, #1
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	fbb2 f3f3 	udiv	r3, r2, r3
 8008314:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	8afa      	ldrh	r2, [r7, #22]
 800831c:	fb03 f202 	mul.w	r2, r3, r2
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	8afb      	ldrh	r3, [r7, #22]
 8008334:	04d9      	lsls	r1, r3, #19
 8008336:	4b38      	ldr	r3, [pc, #224]	; (8008418 <USB_EPStartXfer+0x538>)
 8008338:	400b      	ands	r3, r1
 800833a:	69b9      	ldr	r1, [r7, #24]
 800833c:	0148      	lsls	r0, r1, #5
 800833e:	69f9      	ldr	r1, [r7, #28]
 8008340:	4401      	add	r1, r0
 8008342:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008346:	4313      	orrs	r3, r2
 8008348:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008360:	69b9      	ldr	r1, [r7, #24]
 8008362:	0148      	lsls	r0, r1, #5
 8008364:	69f9      	ldr	r1, [r7, #28]
 8008366:	4401      	add	r1, r0
 8008368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800836c:	4313      	orrs	r3, r2
 800836e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d10d      	bne.n	8008392 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	68d9      	ldr	r1, [r3, #12]
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	015a      	lsls	r2, r3, #5
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	4413      	add	r3, r2
 800838a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838e:	460a      	mov	r2, r1
 8008390:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	791b      	ldrb	r3, [r3, #4]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d128      	bne.n	80083ec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d110      	bne.n	80083cc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	0151      	lsls	r1, r2, #5
 80083bc:	69fa      	ldr	r2, [r7, #28]
 80083be:	440a      	add	r2, r1
 80083c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	e00f      	b.n	80083ec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	440a      	add	r2, r1
 8008402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800840a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3720      	adds	r7, #32
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	1ff80000 	.word	0x1ff80000

0800841c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	785b      	ldrb	r3, [r3, #1]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d14a      	bne.n	80084d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	015a      	lsls	r2, r3, #5
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	4413      	add	r3, r2
 8008444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800844e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008452:	f040 8086 	bne.w	8008562 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	7812      	ldrb	r2, [r2, #0]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008474:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008478:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	7812      	ldrb	r2, [r2, #0]
 800848e:	0151      	lsls	r1, r2, #5
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	440a      	add	r2, r1
 8008494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800849c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3301      	adds	r3, #1
 80084a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d902      	bls.n	80084b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	75fb      	strb	r3, [r7, #23]
          break;
 80084b2:	e056      	b.n	8008562 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084cc:	d0e7      	beq.n	800849e <USB_EPStopXfer+0x82>
 80084ce:	e048      	b.n	8008562 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084e8:	d13b      	bne.n	8008562 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	7812      	ldrb	r2, [r2, #0]
 80084fe:	0151      	lsls	r1, r2, #5
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	440a      	add	r2, r1
 8008504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008508:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800850c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	7812      	ldrb	r2, [r2, #0]
 8008522:	0151      	lsls	r1, r2, #5
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	440a      	add	r2, r1
 8008528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800852c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008530:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f242 7210 	movw	r2, #10000	; 0x2710
 800853e:	4293      	cmp	r3, r2
 8008540:	d902      	bls.n	8008548 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
          break;
 8008546:	e00c      	b.n	8008562 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800855c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008560:	d0e7      	beq.n	8008532 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008562:	7dfb      	ldrb	r3, [r7, #23]
}
 8008564:	4618      	mov	r0, r3
 8008566:	371c      	adds	r7, #28
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008570:	b480      	push	{r7}
 8008572:	b089      	sub	sp, #36	; 0x24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4611      	mov	r1, r2
 800857c:	461a      	mov	r2, r3
 800857e:	460b      	mov	r3, r1
 8008580:	71fb      	strb	r3, [r7, #7]
 8008582:	4613      	mov	r3, r2
 8008584:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800858e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008592:	2b00      	cmp	r3, #0
 8008594:	d123      	bne.n	80085de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008596:	88bb      	ldrh	r3, [r7, #4]
 8008598:	3303      	adds	r3, #3
 800859a:	089b      	lsrs	r3, r3, #2
 800859c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800859e:	2300      	movs	r3, #0
 80085a0:	61bb      	str	r3, [r7, #24]
 80085a2:	e018      	b.n	80085d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	031a      	lsls	r2, r3, #12
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b0:	461a      	mov	r2, r3
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	3301      	adds	r3, #1
 80085bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	3301      	adds	r3, #1
 80085c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	3301      	adds	r3, #1
 80085c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	3301      	adds	r3, #1
 80085ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	3301      	adds	r3, #1
 80085d4:	61bb      	str	r3, [r7, #24]
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d3e2      	bcc.n	80085a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3724      	adds	r7, #36	; 0x24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b08b      	sub	sp, #44	; 0x2c
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	4613      	mov	r3, r2
 80085f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	089b      	lsrs	r3, r3, #2
 8008606:	b29b      	uxth	r3, r3
 8008608:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	f003 0303 	and.w	r3, r3, #3
 8008610:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008612:	2300      	movs	r3, #0
 8008614:	623b      	str	r3, [r7, #32]
 8008616:	e014      	b.n	8008642 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	601a      	str	r2, [r3, #0]
    pDest++;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	3301      	adds	r3, #1
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	3301      	adds	r3, #1
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	3301      	adds	r3, #1
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	3301      	adds	r3, #1
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	3301      	adds	r3, #1
 8008640:	623b      	str	r3, [r7, #32]
 8008642:	6a3a      	ldr	r2, [r7, #32]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	429a      	cmp	r2, r3
 8008648:	d3e6      	bcc.n	8008618 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800864a:	8bfb      	ldrh	r3, [r7, #30]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01e      	beq.n	800868e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800865a:	461a      	mov	r2, r3
 800865c:	f107 0310 	add.w	r3, r7, #16
 8008660:	6812      	ldr	r2, [r2, #0]
 8008662:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	00db      	lsls	r3, r3, #3
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	b2da      	uxtb	r2, r3
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	701a      	strb	r2, [r3, #0]
      i++;
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	3301      	adds	r3, #1
 800867a:	623b      	str	r3, [r7, #32]
      pDest++;
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	3301      	adds	r3, #1
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008682:	8bfb      	ldrh	r3, [r7, #30]
 8008684:	3b01      	subs	r3, #1
 8008686:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008688:	8bfb      	ldrh	r3, [r7, #30]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1ea      	bne.n	8008664 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008690:	4618      	mov	r0, r3
 8008692:	372c      	adds	r7, #44	; 0x2c
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d12c      	bne.n	8008712 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	db12      	blt.n	80086f0 <USB_EPSetStall+0x54>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00f      	beq.n	80086f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	e02b      	b.n	800876a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	db12      	blt.n	800874a <USB_EPSetStall+0xae>
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00f      	beq.n	800874a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	0151      	lsls	r1, r2, #5
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	440a      	add	r2, r1
 8008740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008744:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008748:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	440a      	add	r2, r1
 8008760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008768:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d128      	bne.n	80087e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	0151      	lsls	r1, r2, #5
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	440a      	add	r2, r1
 80087aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	791b      	ldrb	r3, [r3, #4]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d003      	beq.n	80087c4 <USB_EPClearStall+0x4c>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	791b      	ldrb	r3, [r3, #4]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d138      	bne.n	8008836 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	e027      	b.n	8008836 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	015a      	lsls	r2, r3, #5
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	0151      	lsls	r1, r2, #5
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	440a      	add	r2, r1
 80087fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008804:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	791b      	ldrb	r3, [r3, #4]
 800880a:	2b03      	cmp	r3, #3
 800880c:	d003      	beq.n	8008816 <USB_EPClearStall+0x9e>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	791b      	ldrb	r3, [r3, #4]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d10f      	bne.n	8008836 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008834:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008862:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008866:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008878:	68f9      	ldr	r1, [r7, #12]
 800887a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800887e:	4313      	orrs	r3, r2
 8008880:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088aa:	f023 0303 	bic.w	r3, r3, #3
 80088ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088be:	f023 0302 	bic.w	r3, r3, #2
 80088c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088ec:	f023 0303 	bic.w	r3, r3, #3
 80088f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008900:	f043 0302 	orr.w	r3, r3, #2
 8008904:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4013      	ands	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800892c:	68fb      	ldr	r3, [r7, #12]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800893a:	b480      	push	{r7}
 800893c:	b085      	sub	sp, #20
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	4013      	ands	r3, r2
 800895c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	0c1b      	lsrs	r3, r3, #16
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800896e:	b480      	push	{r7}
 8008970:	b085      	sub	sp, #20
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	4013      	ands	r3, r2
 8008990:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	b29b      	uxth	r3, r3
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4013      	ands	r3, r2
 80089ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80089d0:	68bb      	ldr	r3, [r7, #8]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80089de:	b480      	push	{r7}
 80089e0:	b087      	sub	sp, #28
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0e:	01db      	lsls	r3, r3, #7
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	693a      	ldr	r2, [r7, #16]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4013      	ands	r3, r2
 8008a2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	f003 0301 	and.w	r3, r3, #1
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b085      	sub	sp, #20
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a74:	f023 0307 	bic.w	r3, r3, #7
 8008a78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	333c      	adds	r3, #60	; 0x3c
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	4a26      	ldr	r2, [pc, #152]	; (8008b54 <USB_EP0_OutStart+0xb8>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d90a      	bls.n	8008ad6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ad0:	d101      	bne.n	8008ad6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e037      	b.n	8008b46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008adc:	461a      	mov	r2, r3
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	697a      	ldr	r2, [r7, #20]
 8008aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008af0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008af4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b04:	f043 0318 	orr.w	r3, r3, #24
 8008b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008b1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d10f      	bne.n	8008b44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008b42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	4f54300a 	.word	0x4f54300a

08008b58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008b70:	d901      	bls.n	8008b76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e01b      	b.n	8008bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	daf2      	bge.n	8008b64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	f043 0201 	orr.w	r2, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008b9a:	d901      	bls.n	8008ba0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e006      	b.n	8008bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d0f0      	beq.n	8008b8e <USB_CoreReset+0x36>

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
	...

08008bbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008bc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008bcc:	f003 fd54 	bl	800c678 <USBD_static_malloc>
 8008bd0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d109      	bne.n	8008bec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	32b0      	adds	r2, #176	; 0xb0
 8008be2:	2100      	movs	r1, #0
 8008be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008be8:	2302      	movs	r3, #2
 8008bea:	e0d4      	b.n	8008d96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008bec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f003 ff3b 	bl	800ca6e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	32b0      	adds	r2, #176	; 0xb0
 8008c02:	68f9      	ldr	r1, [r7, #12]
 8008c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	32b0      	adds	r2, #176	; 0xb0
 8008c12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	7c1b      	ldrb	r3, [r3, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d138      	bne.n	8008c96 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c24:	4b5e      	ldr	r3, [pc, #376]	; (8008da0 <USBD_CDC_Init+0x1e4>)
 8008c26:	7819      	ldrb	r1, [r3, #0]
 8008c28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f003 fbb1 	bl	800c396 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008c34:	4b5a      	ldr	r3, [pc, #360]	; (8008da0 <USBD_CDC_Init+0x1e4>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	f003 020f 	and.w	r2, r3, #15
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	440b      	add	r3, r1
 8008c48:	3324      	adds	r3, #36	; 0x24
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008c4e:	4b55      	ldr	r3, [pc, #340]	; (8008da4 <USBD_CDC_Init+0x1e8>)
 8008c50:	7819      	ldrb	r1, [r3, #0]
 8008c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c56:	2202      	movs	r2, #2
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f003 fb9c 	bl	800c396 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008c5e:	4b51      	ldr	r3, [pc, #324]	; (8008da4 <USBD_CDC_Init+0x1e8>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	f003 020f 	and.w	r2, r3, #15
 8008c66:	6879      	ldr	r1, [r7, #4]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	440b      	add	r3, r1
 8008c72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c76:	2201      	movs	r2, #1
 8008c78:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008c7a:	4b4b      	ldr	r3, [pc, #300]	; (8008da8 <USBD_CDC_Init+0x1ec>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	f003 020f 	and.w	r2, r3, #15
 8008c82:	6879      	ldr	r1, [r7, #4]
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	3326      	adds	r3, #38	; 0x26
 8008c90:	2210      	movs	r2, #16
 8008c92:	801a      	strh	r2, [r3, #0]
 8008c94:	e035      	b.n	8008d02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c96:	4b42      	ldr	r3, [pc, #264]	; (8008da0 <USBD_CDC_Init+0x1e4>)
 8008c98:	7819      	ldrb	r1, [r3, #0]
 8008c9a:	2340      	movs	r3, #64	; 0x40
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f003 fb79 	bl	800c396 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ca4:	4b3e      	ldr	r3, [pc, #248]	; (8008da0 <USBD_CDC_Init+0x1e4>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	f003 020f 	and.w	r2, r3, #15
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	440b      	add	r3, r1
 8008cb8:	3324      	adds	r3, #36	; 0x24
 8008cba:	2201      	movs	r2, #1
 8008cbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008cbe:	4b39      	ldr	r3, [pc, #228]	; (8008da4 <USBD_CDC_Init+0x1e8>)
 8008cc0:	7819      	ldrb	r1, [r3, #0]
 8008cc2:	2340      	movs	r3, #64	; 0x40
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f003 fb65 	bl	800c396 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ccc:	4b35      	ldr	r3, [pc, #212]	; (8008da4 <USBD_CDC_Init+0x1e8>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f003 020f 	and.w	r2, r3, #15
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	440b      	add	r3, r1
 8008ce0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ce8:	4b2f      	ldr	r3, [pc, #188]	; (8008da8 <USBD_CDC_Init+0x1ec>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	f003 020f 	and.w	r2, r3, #15
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	440b      	add	r3, r1
 8008cfc:	3326      	adds	r3, #38	; 0x26
 8008cfe:	2210      	movs	r2, #16
 8008d00:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d02:	4b29      	ldr	r3, [pc, #164]	; (8008da8 <USBD_CDC_Init+0x1ec>)
 8008d04:	7819      	ldrb	r1, [r3, #0]
 8008d06:	2308      	movs	r3, #8
 8008d08:	2203      	movs	r2, #3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f003 fb43 	bl	800c396 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008d10:	4b25      	ldr	r3, [pc, #148]	; (8008da8 <USBD_CDC_Init+0x1ec>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 020f 	and.w	r2, r3, #15
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	3324      	adds	r3, #36	; 0x24
 8008d26:	2201      	movs	r2, #1
 8008d28:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	33b0      	adds	r3, #176	; 0xb0
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008d60:	2302      	movs	r3, #2
 8008d62:	e018      	b.n	8008d96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7c1b      	ldrb	r3, [r3, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10a      	bne.n	8008d82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d6c:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <USBD_CDC_Init+0x1e8>)
 8008d6e:	7819      	ldrb	r1, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f003 fbfa 	bl	800c574 <USBD_LL_PrepareReceive>
 8008d80:	e008      	b.n	8008d94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d82:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <USBD_CDC_Init+0x1e8>)
 8008d84:	7819      	ldrb	r1, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d8c:	2340      	movs	r3, #64	; 0x40
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f003 fbf0 	bl	800c574 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000093 	.word	0x20000093
 8008da4:	20000094 	.word	0x20000094
 8008da8:	20000095 	.word	0x20000095

08008dac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008db8:	4b3a      	ldr	r3, [pc, #232]	; (8008ea4 <USBD_CDC_DeInit+0xf8>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f003 fb0f 	bl	800c3e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008dc4:	4b37      	ldr	r3, [pc, #220]	; (8008ea4 <USBD_CDC_DeInit+0xf8>)
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f003 020f 	and.w	r2, r3, #15
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3324      	adds	r3, #36	; 0x24
 8008dda:	2200      	movs	r2, #0
 8008ddc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008dde:	4b32      	ldr	r3, [pc, #200]	; (8008ea8 <USBD_CDC_DeInit+0xfc>)
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f003 fafc 	bl	800c3e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008dea:	4b2f      	ldr	r3, [pc, #188]	; (8008ea8 <USBD_CDC_DeInit+0xfc>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	f003 020f 	and.w	r2, r3, #15
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	4613      	mov	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	440b      	add	r3, r1
 8008dfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e02:	2200      	movs	r2, #0
 8008e04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008e06:	4b29      	ldr	r3, [pc, #164]	; (8008eac <USBD_CDC_DeInit+0x100>)
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f003 fae8 	bl	800c3e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008e12:	4b26      	ldr	r3, [pc, #152]	; (8008eac <USBD_CDC_DeInit+0x100>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 020f 	and.w	r2, r3, #15
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	440b      	add	r3, r1
 8008e26:	3324      	adds	r3, #36	; 0x24
 8008e28:	2200      	movs	r2, #0
 8008e2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008e2c:	4b1f      	ldr	r3, [pc, #124]	; (8008eac <USBD_CDC_DeInit+0x100>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	f003 020f 	and.w	r2, r3, #15
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	3326      	adds	r3, #38	; 0x26
 8008e42:	2200      	movs	r2, #0
 8008e44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	32b0      	adds	r2, #176	; 0xb0
 8008e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01f      	beq.n	8008e98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	33b0      	adds	r3, #176	; 0xb0
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	32b0      	adds	r2, #176	; 0xb0
 8008e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f003 fc0a 	bl	800c694 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	32b0      	adds	r2, #176	; 0xb0
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000093 	.word	0x20000093
 8008ea8:	20000094 	.word	0x20000094
 8008eac:	20000095 	.word	0x20000095

08008eb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	32b0      	adds	r2, #176	; 0xb0
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d101      	bne.n	8008ee0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e0bf      	b.n	8009060 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d050      	beq.n	8008f8e <USBD_CDC_Setup+0xde>
 8008eec:	2b20      	cmp	r3, #32
 8008eee:	f040 80af 	bne.w	8009050 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	88db      	ldrh	r3, [r3, #6]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d03a      	beq.n	8008f70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	b25b      	sxtb	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	da1b      	bge.n	8008f3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	33b0      	adds	r3, #176	; 0xb0
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008f1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	88d2      	ldrh	r2, [r2, #6]
 8008f20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	88db      	ldrh	r3, [r3, #6]
 8008f26:	2b07      	cmp	r3, #7
 8008f28:	bf28      	it	cs
 8008f2a:	2307      	movcs	r3, #7
 8008f2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	89fa      	ldrh	r2, [r7, #14]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 fdbf 	bl	800aab8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008f3a:	e090      	b.n	800905e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	785a      	ldrb	r2, [r3, #1]
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	88db      	ldrh	r3, [r3, #6]
 8008f4a:	2b3f      	cmp	r3, #63	; 0x3f
 8008f4c:	d803      	bhi.n	8008f56 <USBD_CDC_Setup+0xa6>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	88db      	ldrh	r3, [r3, #6]
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	e000      	b.n	8008f58 <USBD_CDC_Setup+0xa8>
 8008f56:	2240      	movs	r2, #64	; 0x40
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008f5e:	6939      	ldr	r1, [r7, #16]
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008f66:	461a      	mov	r2, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 fdd1 	bl	800ab10 <USBD_CtlPrepareRx>
      break;
 8008f6e:	e076      	b.n	800905e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	33b0      	adds	r3, #176	; 0xb0
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	7850      	ldrb	r0, [r2, #1]
 8008f86:	2200      	movs	r2, #0
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	4798      	blx	r3
      break;
 8008f8c:	e067      	b.n	800905e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	785b      	ldrb	r3, [r3, #1]
 8008f92:	2b0b      	cmp	r3, #11
 8008f94:	d851      	bhi.n	800903a <USBD_CDC_Setup+0x18a>
 8008f96:	a201      	add	r2, pc, #4	; (adr r2, 8008f9c <USBD_CDC_Setup+0xec>)
 8008f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f9c:	08008fcd 	.word	0x08008fcd
 8008fa0:	08009049 	.word	0x08009049
 8008fa4:	0800903b 	.word	0x0800903b
 8008fa8:	0800903b 	.word	0x0800903b
 8008fac:	0800903b 	.word	0x0800903b
 8008fb0:	0800903b 	.word	0x0800903b
 8008fb4:	0800903b 	.word	0x0800903b
 8008fb8:	0800903b 	.word	0x0800903b
 8008fbc:	0800903b 	.word	0x0800903b
 8008fc0:	0800903b 	.word	0x0800903b
 8008fc4:	08008ff7 	.word	0x08008ff7
 8008fc8:	08009021 	.word	0x08009021
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d107      	bne.n	8008fe8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008fd8:	f107 030a 	add.w	r3, r7, #10
 8008fdc:	2202      	movs	r2, #2
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f001 fd69 	bl	800aab8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008fe6:	e032      	b.n	800904e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 fce7 	bl	800a9be <USBD_CtlError>
            ret = USBD_FAIL;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ff4:	e02b      	b.n	800904e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d107      	bne.n	8009012 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009002:	f107 030d 	add.w	r3, r7, #13
 8009006:	2201      	movs	r2, #1
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 fd54 	bl	800aab8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009010:	e01d      	b.n	800904e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 fcd2 	bl	800a9be <USBD_CtlError>
            ret = USBD_FAIL;
 800901a:	2303      	movs	r3, #3
 800901c:	75fb      	strb	r3, [r7, #23]
          break;
 800901e:	e016      	b.n	800904e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b03      	cmp	r3, #3
 800902a:	d00f      	beq.n	800904c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fcc5 	bl	800a9be <USBD_CtlError>
            ret = USBD_FAIL;
 8009034:	2303      	movs	r3, #3
 8009036:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009038:	e008      	b.n	800904c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 fcbe 	bl	800a9be <USBD_CtlError>
          ret = USBD_FAIL;
 8009042:	2303      	movs	r3, #3
 8009044:	75fb      	strb	r3, [r7, #23]
          break;
 8009046:	e002      	b.n	800904e <USBD_CDC_Setup+0x19e>
          break;
 8009048:	bf00      	nop
 800904a:	e008      	b.n	800905e <USBD_CDC_Setup+0x1ae>
          break;
 800904c:	bf00      	nop
      }
      break;
 800904e:	e006      	b.n	800905e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 fcb3 	bl	800a9be <USBD_CtlError>
      ret = USBD_FAIL;
 8009058:	2303      	movs	r3, #3
 800905a:	75fb      	strb	r3, [r7, #23]
      break;
 800905c:	bf00      	nop
  }

  return (uint8_t)ret;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800907a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	32b0      	adds	r2, #176	; 0xb0
 8009086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800908e:	2303      	movs	r3, #3
 8009090:	e065      	b.n	800915e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	32b0      	adds	r2, #176	; 0xb0
 800909c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	f003 020f 	and.w	r2, r3, #15
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	3318      	adds	r3, #24
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d02f      	beq.n	800911c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80090bc:	78fb      	ldrb	r3, [r7, #3]
 80090be:	f003 020f 	and.w	r2, r3, #15
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	440b      	add	r3, r1
 80090ce:	3318      	adds	r3, #24
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	78fb      	ldrb	r3, [r7, #3]
 80090d4:	f003 010f 	and.w	r1, r3, #15
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	460b      	mov	r3, r1
 80090dc:	00db      	lsls	r3, r3, #3
 80090de:	440b      	add	r3, r1
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4403      	add	r3, r0
 80090e4:	331c      	adds	r3, #28
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80090ec:	fb01 f303 	mul.w	r3, r1, r3
 80090f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d112      	bne.n	800911c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f003 020f 	and.w	r2, r3, #15
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	3318      	adds	r3, #24
 800910a:	2200      	movs	r2, #0
 800910c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800910e:	78f9      	ldrb	r1, [r7, #3]
 8009110:	2300      	movs	r3, #0
 8009112:	2200      	movs	r2, #0
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f003 fa0c 	bl	800c532 <USBD_LL_Transmit>
 800911a:	e01f      	b.n	800915c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	33b0      	adds	r3, #176	; 0xb0
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4413      	add	r3, r2
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d010      	beq.n	800915c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	33b0      	adds	r3, #176	; 0xb0
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009158:	78fa      	ldrb	r2, [r7, #3]
 800915a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	460b      	mov	r3, r1
 8009170:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	32b0      	adds	r2, #176	; 0xb0
 800917c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009180:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	32b0      	adds	r2, #176	; 0xb0
 800918c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009194:	2303      	movs	r3, #3
 8009196:	e01a      	b.n	80091ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f003 fa0a 	bl	800c5b6 <USBD_LL_GetRxDataSize>
 80091a2:	4602      	mov	r2, r0
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	33b0      	adds	r3, #176	; 0xb0
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091c8:	4611      	mov	r1, r2
 80091ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	32b0      	adds	r2, #176	; 0xb0
 80091e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e025      	b.n	8009244 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	33b0      	adds	r3, #176	; 0xb0
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01a      	beq.n	8009242 <USBD_CDC_EP0_RxReady+0x6c>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009212:	2bff      	cmp	r3, #255	; 0xff
 8009214:	d015      	beq.n	8009242 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	33b0      	adds	r3, #176	; 0xb0
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800922e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009236:	b292      	uxth	r2, r2
 8009238:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	22ff      	movs	r2, #255	; 0xff
 800923e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009254:	2182      	movs	r1, #130	; 0x82
 8009256:	4818      	ldr	r0, [pc, #96]	; (80092b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009258:	f000 fd4f 	bl	8009cfa <USBD_GetEpDesc>
 800925c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800925e:	2101      	movs	r1, #1
 8009260:	4815      	ldr	r0, [pc, #84]	; (80092b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009262:	f000 fd4a 	bl	8009cfa <USBD_GetEpDesc>
 8009266:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009268:	2181      	movs	r1, #129	; 0x81
 800926a:	4813      	ldr	r0, [pc, #76]	; (80092b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800926c:	f000 fd45 	bl	8009cfa <USBD_GetEpDesc>
 8009270:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2210      	movs	r2, #16
 800927c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d006      	beq.n	8009292 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	2200      	movs	r2, #0
 8009288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800928c:	711a      	strb	r2, [r3, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d006      	beq.n	80092a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092a0:	711a      	strb	r2, [r3, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2243      	movs	r2, #67	; 0x43
 80092aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80092ac:	4b02      	ldr	r3, [pc, #8]	; (80092b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3718      	adds	r7, #24
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20000050 	.word	0x20000050

080092bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092c4:	2182      	movs	r1, #130	; 0x82
 80092c6:	4818      	ldr	r0, [pc, #96]	; (8009328 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80092c8:	f000 fd17 	bl	8009cfa <USBD_GetEpDesc>
 80092cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092ce:	2101      	movs	r1, #1
 80092d0:	4815      	ldr	r0, [pc, #84]	; (8009328 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80092d2:	f000 fd12 	bl	8009cfa <USBD_GetEpDesc>
 80092d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092d8:	2181      	movs	r1, #129	; 0x81
 80092da:	4813      	ldr	r0, [pc, #76]	; (8009328 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80092dc:	f000 fd0d 	bl	8009cfa <USBD_GetEpDesc>
 80092e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2210      	movs	r2, #16
 80092ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d006      	beq.n	8009302 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	2200      	movs	r2, #0
 80092f8:	711a      	strb	r2, [r3, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f042 0202 	orr.w	r2, r2, #2
 8009300:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d006      	beq.n	8009316 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	711a      	strb	r2, [r3, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f042 0202 	orr.w	r2, r2, #2
 8009314:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2243      	movs	r2, #67	; 0x43
 800931a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	20000050 	.word	0x20000050

0800932c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009334:	2182      	movs	r1, #130	; 0x82
 8009336:	4818      	ldr	r0, [pc, #96]	; (8009398 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009338:	f000 fcdf 	bl	8009cfa <USBD_GetEpDesc>
 800933c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800933e:	2101      	movs	r1, #1
 8009340:	4815      	ldr	r0, [pc, #84]	; (8009398 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009342:	f000 fcda 	bl	8009cfa <USBD_GetEpDesc>
 8009346:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009348:	2181      	movs	r1, #129	; 0x81
 800934a:	4813      	ldr	r0, [pc, #76]	; (8009398 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800934c:	f000 fcd5 	bl	8009cfa <USBD_GetEpDesc>
 8009350:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2210      	movs	r2, #16
 800935c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d006      	beq.n	8009372 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2200      	movs	r2, #0
 8009368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800936c:	711a      	strb	r2, [r3, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d006      	beq.n	8009386 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009380:	711a      	strb	r2, [r3, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2243      	movs	r2, #67	; 0x43
 800938a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800938c:	4b02      	ldr	r3, [pc, #8]	; (8009398 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20000050 	.word	0x20000050

0800939c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	220a      	movs	r2, #10
 80093a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80093aa:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	2000000c 	.word	0x2000000c

080093bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e009      	b.n	80093e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	33b0      	adds	r3, #176	; 0xb0
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	32b0      	adds	r2, #176	; 0xb0
 8009406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800940a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009412:	2303      	movs	r3, #3
 8009414:	e008      	b.n	8009428 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	371c      	adds	r7, #28
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	32b0      	adds	r2, #176	; 0xb0
 8009448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009454:	2303      	movs	r3, #3
 8009456:	e004      	b.n	8009462 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
	...

08009470 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	32b0      	adds	r2, #176	; 0xb0
 8009482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009486:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009488:	2301      	movs	r3, #1
 800948a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009492:	2303      	movs	r3, #3
 8009494:	e025      	b.n	80094e2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800949c:	2b00      	cmp	r3, #0
 800949e:	d11f      	bne.n	80094e0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80094a8:	4b10      	ldr	r3, [pc, #64]	; (80094ec <USBD_CDC_TransmitPacket+0x7c>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f003 020f 	and.w	r2, r3, #15
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4613      	mov	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4403      	add	r3, r0
 80094c2:	3318      	adds	r3, #24
 80094c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80094c6:	4b09      	ldr	r3, [pc, #36]	; (80094ec <USBD_CDC_TransmitPacket+0x7c>)
 80094c8:	7819      	ldrb	r1, [r3, #0]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f003 f82b 	bl	800c532 <USBD_LL_Transmit>

    ret = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20000093 	.word	0x20000093

080094f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	32b0      	adds	r2, #176	; 0xb0
 8009502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009506:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	32b0      	adds	r2, #176	; 0xb0
 8009512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800951a:	2303      	movs	r3, #3
 800951c:	e018      	b.n	8009550 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	7c1b      	ldrb	r3, [r3, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009526:	4b0c      	ldr	r3, [pc, #48]	; (8009558 <USBD_CDC_ReceivePacket+0x68>)
 8009528:	7819      	ldrb	r1, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f003 f81d 	bl	800c574 <USBD_LL_PrepareReceive>
 800953a:	e008      	b.n	800954e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800953c:	4b06      	ldr	r3, [pc, #24]	; (8009558 <USBD_CDC_ReceivePacket+0x68>)
 800953e:	7819      	ldrb	r1, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009546:	2340      	movs	r3, #64	; 0x40
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f003 f813 	bl	800c574 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	20000094 	.word	0x20000094

0800955c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	4613      	mov	r3, r2
 8009568:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009570:	2303      	movs	r3, #3
 8009572:	e01f      	b.n	80095b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	79fa      	ldrb	r2, [r7, #7]
 80095a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f002 fe8d 	bl	800c2c8 <USBD_LL_Init>
 80095ae:	4603      	mov	r3, r0
 80095b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e025      	b.n	8009620 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	32ae      	adds	r2, #174	; 0xae
 80095e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00f      	beq.n	8009610 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	32ae      	adds	r2, #174	; 0xae
 80095fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	f107 020e 	add.w	r2, r7, #14
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
 8009608:	4602      	mov	r2, r0
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f002 fe95 	bl	800c360 <USBD_LL_Start>
 8009636:	4603      	mov	r3, r0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009648:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800964a:	4618      	mov	r0, r3
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966c:	2b00      	cmp	r3, #0
 800966e:	d009      	beq.n	8009684 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	78fa      	ldrb	r2, [r7, #3]
 800967a:	4611      	mov	r1, r2
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	4798      	blx	r3
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	460b      	mov	r3, r1
 8009698:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	78fa      	ldrb	r2, [r7, #3]
 80096a8:	4611      	mov	r1, r2
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	4798      	blx	r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80096b4:	2303      	movs	r3, #3
 80096b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f001 f938 	bl	800a94a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80096e8:	461a      	mov	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80096f6:	f003 031f 	and.w	r3, r3, #31
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d01a      	beq.n	8009734 <USBD_LL_SetupStage+0x72>
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d822      	bhi.n	8009748 <USBD_LL_SetupStage+0x86>
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <USBD_LL_SetupStage+0x4a>
 8009706:	2b01      	cmp	r3, #1
 8009708:	d00a      	beq.n	8009720 <USBD_LL_SetupStage+0x5e>
 800970a:	e01d      	b.n	8009748 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fb65 	bl	8009de4 <USBD_StdDevReq>
 800971a:	4603      	mov	r3, r0
 800971c:	73fb      	strb	r3, [r7, #15]
      break;
 800971e:	e020      	b.n	8009762 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fbcd 	bl	8009ec8 <USBD_StdItfReq>
 800972e:	4603      	mov	r3, r0
 8009730:	73fb      	strb	r3, [r7, #15]
      break;
 8009732:	e016      	b.n	8009762 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc2f 	bl	8009fa0 <USBD_StdEPReq>
 8009742:	4603      	mov	r3, r0
 8009744:	73fb      	strb	r3, [r7, #15]
      break;
 8009746:	e00c      	b.n	8009762 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800974e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009752:	b2db      	uxtb	r3, r3
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f002 fe62 	bl	800c420 <USBD_LL_StallEP>
 800975c:	4603      	mov	r3, r0
 800975e:	73fb      	strb	r3, [r7, #15]
      break;
 8009760:	bf00      	nop
  }

  return ret;
 8009762:	7bfb      	ldrb	r3, [r7, #15]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	460b      	mov	r3, r1
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800977e:	7afb      	ldrb	r3, [r7, #11]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d16e      	bne.n	8009862 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800978a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009792:	2b03      	cmp	r3, #3
 8009794:	f040 8098 	bne.w	80098c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	689a      	ldr	r2, [r3, #8]
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d913      	bls.n	80097cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	1ad2      	subs	r2, r2, r3
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	4293      	cmp	r3, r2
 80097bc:	bf28      	it	cs
 80097be:	4613      	movcs	r3, r2
 80097c0:	461a      	mov	r2, r3
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f001 f9c0 	bl	800ab4a <USBD_CtlContinueRx>
 80097ca:	e07d      	b.n	80098c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097d2:	f003 031f 	and.w	r3, r3, #31
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d014      	beq.n	8009804 <USBD_LL_DataOutStage+0x98>
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d81d      	bhi.n	800981a <USBD_LL_DataOutStage+0xae>
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <USBD_LL_DataOutStage+0x7c>
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d003      	beq.n	80097ee <USBD_LL_DataOutStage+0x82>
 80097e6:	e018      	b.n	800981a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	75bb      	strb	r3, [r7, #22]
            break;
 80097ec:	e018      	b.n	8009820 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	4619      	mov	r1, r3
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f000 fa64 	bl	8009cc6 <USBD_CoreFindIF>
 80097fe:	4603      	mov	r3, r0
 8009800:	75bb      	strb	r3, [r7, #22]
            break;
 8009802:	e00d      	b.n	8009820 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800980a:	b2db      	uxtb	r3, r3
 800980c:	4619      	mov	r1, r3
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f000 fa66 	bl	8009ce0 <USBD_CoreFindEP>
 8009814:	4603      	mov	r3, r0
 8009816:	75bb      	strb	r3, [r7, #22]
            break;
 8009818:	e002      	b.n	8009820 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800981a:	2300      	movs	r3, #0
 800981c:	75bb      	strb	r3, [r7, #22]
            break;
 800981e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009820:	7dbb      	ldrb	r3, [r7, #22]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d119      	bne.n	800985a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b03      	cmp	r3, #3
 8009830:	d113      	bne.n	800985a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009832:	7dba      	ldrb	r2, [r7, #22]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	32ae      	adds	r2, #174	; 0xae
 8009838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00b      	beq.n	800985a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009842:	7dba      	ldrb	r2, [r7, #22]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800984a:	7dba      	ldrb	r2, [r7, #22]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	32ae      	adds	r2, #174	; 0xae
 8009850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009854:	691b      	ldr	r3, [r3, #16]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f001 f986 	bl	800ab6c <USBD_CtlSendStatus>
 8009860:	e032      	b.n	80098c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009862:	7afb      	ldrb	r3, [r7, #11]
 8009864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009868:	b2db      	uxtb	r3, r3
 800986a:	4619      	mov	r1, r3
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 fa37 	bl	8009ce0 <USBD_CoreFindEP>
 8009872:	4603      	mov	r3, r0
 8009874:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009876:	7dbb      	ldrb	r3, [r7, #22]
 8009878:	2bff      	cmp	r3, #255	; 0xff
 800987a:	d025      	beq.n	80098c8 <USBD_LL_DataOutStage+0x15c>
 800987c:	7dbb      	ldrb	r3, [r7, #22]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d122      	bne.n	80098c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d117      	bne.n	80098be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800988e:	7dba      	ldrb	r2, [r7, #22]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	32ae      	adds	r2, #174	; 0xae
 8009894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00f      	beq.n	80098be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800989e:	7dba      	ldrb	r2, [r7, #22]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80098a6:	7dba      	ldrb	r2, [r7, #22]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	32ae      	adds	r2, #174	; 0xae
 80098ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	7afa      	ldrb	r2, [r7, #11]
 80098b4:	4611      	mov	r1, r2
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	4798      	blx	r3
 80098ba:	4603      	mov	r3, r0
 80098bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	e000      	b.n	80098ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	460b      	mov	r3, r1
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80098e0:	7afb      	ldrb	r3, [r7, #11]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d16f      	bne.n	80099c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3314      	adds	r3, #20
 80098ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d15a      	bne.n	80099ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	689a      	ldr	r2, [r3, #8]
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d914      	bls.n	800992c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	689a      	ldr	r2, [r3, #8]
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	461a      	mov	r2, r3
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f001 f8e8 	bl	800aaee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800991e:	2300      	movs	r3, #0
 8009920:	2200      	movs	r2, #0
 8009922:	2100      	movs	r1, #0
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f002 fe25 	bl	800c574 <USBD_LL_PrepareReceive>
 800992a:	e03f      	b.n	80099ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	429a      	cmp	r2, r3
 8009936:	d11c      	bne.n	8009972 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009940:	429a      	cmp	r2, r3
 8009942:	d316      	bcc.n	8009972 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800994e:	429a      	cmp	r2, r3
 8009950:	d20f      	bcs.n	8009972 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009952:	2200      	movs	r2, #0
 8009954:	2100      	movs	r1, #0
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f001 f8c9 	bl	800aaee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009964:	2300      	movs	r3, #0
 8009966:	2200      	movs	r2, #0
 8009968:	2100      	movs	r1, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f002 fe02 	bl	800c574 <USBD_LL_PrepareReceive>
 8009970:	e01c      	b.n	80099ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b03      	cmp	r3, #3
 800997c:	d10f      	bne.n	800999e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009984:	68db      	ldr	r3, [r3, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d009      	beq.n	800999e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800999e:	2180      	movs	r1, #128	; 0x80
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f002 fd3d 	bl	800c420 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f001 f8f3 	bl	800ab92 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d03a      	beq.n	8009a2c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff fe42 	bl	8009640 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099c4:	e032      	b.n	8009a2c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80099c6:	7afb      	ldrb	r3, [r7, #11]
 80099c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	4619      	mov	r1, r3
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 f985 	bl	8009ce0 <USBD_CoreFindEP>
 80099d6:	4603      	mov	r3, r0
 80099d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	2bff      	cmp	r3, #255	; 0xff
 80099de:	d025      	beq.n	8009a2c <USBD_LL_DataInStage+0x15a>
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d122      	bne.n	8009a2c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d11c      	bne.n	8009a2c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80099f2:	7dfa      	ldrb	r2, [r7, #23]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	32ae      	adds	r2, #174	; 0xae
 80099f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d014      	beq.n	8009a2c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009a02:	7dfa      	ldrb	r2, [r7, #23]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009a0a:	7dfa      	ldrb	r2, [r7, #23]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	32ae      	adds	r2, #174	; 0xae
 8009a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	7afa      	ldrb	r2, [r7, #11]
 8009a18:	4611      	mov	r1, r2
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	4798      	blx	r3
 8009a1e:	4603      	mov	r3, r0
 8009a20:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009a22:	7dbb      	ldrb	r3, [r7, #22]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009a28:	7dbb      	ldrb	r3, [r7, #22]
 8009a2a:	e000      	b.n	8009a2e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d014      	beq.n	8009a9c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00e      	beq.n	8009a9c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	6852      	ldr	r2, [r2, #4]
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	4798      	blx	r3
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a9c:	2340      	movs	r3, #64	; 0x40
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f002 fc77 	bl	800c396 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2240      	movs	r2, #64	; 0x40
 8009ab4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ab8:	2340      	movs	r3, #64	; 0x40
 8009aba:	2200      	movs	r2, #0
 8009abc:	2180      	movs	r1, #128	; 0x80
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f002 fc69 	bl	800c396 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2240      	movs	r2, #64	; 0x40
 8009ace:	621a      	str	r2, [r3, #32]

  return ret;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	78fa      	ldrb	r2, [r7, #3]
 8009aea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b04      	cmp	r3, #4
 8009b0c:	d006      	beq.n	8009b1c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2204      	movs	r2, #4
 8009b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	d106      	bne.n	8009b54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b082      	sub	sp, #8
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d110      	bne.n	8009b98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b86:	69db      	ldr	r3, [r3, #28]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d005      	beq.n	8009b98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b082      	sub	sp, #8
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	460b      	mov	r3, r1
 8009bac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	32ae      	adds	r2, #174	; 0xae
 8009bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e01c      	b.n	8009bfe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	2b03      	cmp	r3, #3
 8009bce:	d115      	bne.n	8009bfc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	32ae      	adds	r2, #174	; 0xae
 8009bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00b      	beq.n	8009bfc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	32ae      	adds	r2, #174	; 0xae
 8009bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	78fa      	ldrb	r2, [r7, #3]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	32ae      	adds	r2, #174	; 0xae
 8009c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e01c      	b.n	8009c62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	d115      	bne.n	8009c60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	32ae      	adds	r2, #174	; 0xae
 8009c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	32ae      	adds	r2, #174	; 0xae
 8009c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	78fa      	ldrb	r2, [r7, #3]
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00e      	beq.n	8009cbc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	6852      	ldr	r2, [r2, #4]
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	4611      	mov	r1, r2
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	4798      	blx	r3
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	460b      	mov	r3, r1
 8009d04:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	885b      	ldrh	r3, [r3, #2]
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d920      	bls.n	8009d64 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009d2a:	e013      	b.n	8009d54 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009d2c:	f107 030a 	add.w	r3, r7, #10
 8009d30:	4619      	mov	r1, r3
 8009d32:	6978      	ldr	r0, [r7, #20]
 8009d34:	f000 f81b 	bl	8009d6e <USBD_GetNextDesc>
 8009d38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	785b      	ldrb	r3, [r3, #1]
 8009d3e:	2b05      	cmp	r3, #5
 8009d40:	d108      	bne.n	8009d54 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	789b      	ldrb	r3, [r3, #2]
 8009d4a:	78fa      	ldrb	r2, [r7, #3]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d008      	beq.n	8009d62 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	885b      	ldrh	r3, [r3, #2]
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	897b      	ldrh	r3, [r7, #10]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d8e5      	bhi.n	8009d2c <USBD_GetEpDesc+0x32>
 8009d60:	e000      	b.n	8009d64 <USBD_GetEpDesc+0x6a>
          break;
 8009d62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d64:	693b      	ldr	r3, [r7, #16]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3718      	adds	r7, #24
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b085      	sub	sp, #20
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	881a      	ldrh	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4413      	add	r3, r2
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4413      	add	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009dc6:	8a3b      	ldrh	r3, [r7, #16]
 8009dc8:	021b      	lsls	r3, r3, #8
 8009dca:	b21a      	sxth	r2, r3
 8009dcc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	b21b      	sxth	r3, r3
 8009dd4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009dd6:	89fb      	ldrh	r3, [r7, #14]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	371c      	adds	r7, #28
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dfa:	2b40      	cmp	r3, #64	; 0x40
 8009dfc:	d005      	beq.n	8009e0a <USBD_StdDevReq+0x26>
 8009dfe:	2b40      	cmp	r3, #64	; 0x40
 8009e00:	d857      	bhi.n	8009eb2 <USBD_StdDevReq+0xce>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00f      	beq.n	8009e26 <USBD_StdDevReq+0x42>
 8009e06:	2b20      	cmp	r3, #32
 8009e08:	d153      	bne.n	8009eb2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	32ae      	adds	r2, #174	; 0xae
 8009e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	4798      	blx	r3
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
      break;
 8009e24:	e04a      	b.n	8009ebc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	2b09      	cmp	r3, #9
 8009e2c:	d83b      	bhi.n	8009ea6 <USBD_StdDevReq+0xc2>
 8009e2e:	a201      	add	r2, pc, #4	; (adr r2, 8009e34 <USBD_StdDevReq+0x50>)
 8009e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e34:	08009e89 	.word	0x08009e89
 8009e38:	08009e9d 	.word	0x08009e9d
 8009e3c:	08009ea7 	.word	0x08009ea7
 8009e40:	08009e93 	.word	0x08009e93
 8009e44:	08009ea7 	.word	0x08009ea7
 8009e48:	08009e67 	.word	0x08009e67
 8009e4c:	08009e5d 	.word	0x08009e5d
 8009e50:	08009ea7 	.word	0x08009ea7
 8009e54:	08009e7f 	.word	0x08009e7f
 8009e58:	08009e71 	.word	0x08009e71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa3c 	bl	800a2dc <USBD_GetDescriptor>
          break;
 8009e64:	e024      	b.n	8009eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fbcb 	bl	800a604 <USBD_SetAddress>
          break;
 8009e6e:	e01f      	b.n	8009eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fc0a 	bl	800a68c <USBD_SetConfig>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	73fb      	strb	r3, [r7, #15]
          break;
 8009e7c:	e018      	b.n	8009eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fcad 	bl	800a7e0 <USBD_GetConfig>
          break;
 8009e86:	e013      	b.n	8009eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fcde 	bl	800a84c <USBD_GetStatus>
          break;
 8009e90:	e00e      	b.n	8009eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e92:	6839      	ldr	r1, [r7, #0]
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 fd0d 	bl	800a8b4 <USBD_SetFeature>
          break;
 8009e9a:	e009      	b.n	8009eb0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fd31 	bl	800a906 <USBD_ClrFeature>
          break;
 8009ea4:	e004      	b.n	8009eb0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fd88 	bl	800a9be <USBD_CtlError>
          break;
 8009eae:	bf00      	nop
      }
      break;
 8009eb0:	e004      	b.n	8009ebc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fd82 	bl	800a9be <USBD_CtlError>
      break;
 8009eba:	bf00      	nop
  }

  return ret;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop

08009ec8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ede:	2b40      	cmp	r3, #64	; 0x40
 8009ee0:	d005      	beq.n	8009eee <USBD_StdItfReq+0x26>
 8009ee2:	2b40      	cmp	r3, #64	; 0x40
 8009ee4:	d852      	bhi.n	8009f8c <USBD_StdItfReq+0xc4>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <USBD_StdItfReq+0x26>
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d14e      	bne.n	8009f8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d840      	bhi.n	8009f7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	889b      	ldrh	r3, [r3, #4]
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d836      	bhi.n	8009f74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	889b      	ldrh	r3, [r3, #4]
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7ff fed9 	bl	8009cc6 <USBD_CoreFindIF>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f18:	7bbb      	ldrb	r3, [r7, #14]
 8009f1a:	2bff      	cmp	r3, #255	; 0xff
 8009f1c:	d01d      	beq.n	8009f5a <USBD_StdItfReq+0x92>
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d11a      	bne.n	8009f5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009f24:	7bba      	ldrb	r2, [r7, #14]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	32ae      	adds	r2, #174	; 0xae
 8009f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00f      	beq.n	8009f54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009f34:	7bba      	ldrb	r2, [r7, #14]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f3c:	7bba      	ldrb	r2, [r7, #14]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	32ae      	adds	r2, #174	; 0xae
 8009f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	4798      	blx	r3
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f52:	e004      	b.n	8009f5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009f54:	2303      	movs	r3, #3
 8009f56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f58:	e001      	b.n	8009f5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	88db      	ldrh	r3, [r3, #6]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d110      	bne.n	8009f88 <USBD_StdItfReq+0xc0>
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10d      	bne.n	8009f88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fdfd 	bl	800ab6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f72:	e009      	b.n	8009f88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fd21 	bl	800a9be <USBD_CtlError>
          break;
 8009f7c:	e004      	b.n	8009f88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fd1c 	bl	800a9be <USBD_CtlError>
          break;
 8009f86:	e000      	b.n	8009f8a <USBD_StdItfReq+0xc2>
          break;
 8009f88:	bf00      	nop
      }
      break;
 8009f8a:	e004      	b.n	8009f96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fd15 	bl	800a9be <USBD_CtlError>
      break;
 8009f94:	bf00      	nop
  }

  return ret;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	889b      	ldrh	r3, [r3, #4]
 8009fb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fbc:	2b40      	cmp	r3, #64	; 0x40
 8009fbe:	d007      	beq.n	8009fd0 <USBD_StdEPReq+0x30>
 8009fc0:	2b40      	cmp	r3, #64	; 0x40
 8009fc2:	f200 817f 	bhi.w	800a2c4 <USBD_StdEPReq+0x324>
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d02a      	beq.n	800a020 <USBD_StdEPReq+0x80>
 8009fca:	2b20      	cmp	r3, #32
 8009fcc:	f040 817a 	bne.w	800a2c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff fe83 	bl	8009ce0 <USBD_CoreFindEP>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fde:	7b7b      	ldrb	r3, [r7, #13]
 8009fe0:	2bff      	cmp	r3, #255	; 0xff
 8009fe2:	f000 8174 	beq.w	800a2ce <USBD_StdEPReq+0x32e>
 8009fe6:	7b7b      	ldrb	r3, [r7, #13]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f040 8170 	bne.w	800a2ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009fee:	7b7a      	ldrb	r2, [r7, #13]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009ff6:	7b7a      	ldrb	r2, [r7, #13]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	32ae      	adds	r2, #174	; 0xae
 8009ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 8163 	beq.w	800a2ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a008:	7b7a      	ldrb	r2, [r7, #13]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	32ae      	adds	r2, #174	; 0xae
 800a00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	4798      	blx	r3
 800a01a:	4603      	mov	r3, r0
 800a01c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a01e:	e156      	b.n	800a2ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	785b      	ldrb	r3, [r3, #1]
 800a024:	2b03      	cmp	r3, #3
 800a026:	d008      	beq.n	800a03a <USBD_StdEPReq+0x9a>
 800a028:	2b03      	cmp	r3, #3
 800a02a:	f300 8145 	bgt.w	800a2b8 <USBD_StdEPReq+0x318>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 809b 	beq.w	800a16a <USBD_StdEPReq+0x1ca>
 800a034:	2b01      	cmp	r3, #1
 800a036:	d03c      	beq.n	800a0b2 <USBD_StdEPReq+0x112>
 800a038:	e13e      	b.n	800a2b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b02      	cmp	r3, #2
 800a044:	d002      	beq.n	800a04c <USBD_StdEPReq+0xac>
 800a046:	2b03      	cmp	r3, #3
 800a048:	d016      	beq.n	800a078 <USBD_StdEPReq+0xd8>
 800a04a:	e02c      	b.n	800a0a6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a04c:	7bbb      	ldrb	r3, [r7, #14]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00d      	beq.n	800a06e <USBD_StdEPReq+0xce>
 800a052:	7bbb      	ldrb	r3, [r7, #14]
 800a054:	2b80      	cmp	r3, #128	; 0x80
 800a056:	d00a      	beq.n	800a06e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f002 f9df 	bl	800c420 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a062:	2180      	movs	r1, #128	; 0x80
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f002 f9db 	bl	800c420 <USBD_LL_StallEP>
 800a06a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a06c:	e020      	b.n	800a0b0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fca4 	bl	800a9be <USBD_CtlError>
              break;
 800a076:	e01b      	b.n	800a0b0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	885b      	ldrh	r3, [r3, #2]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10e      	bne.n	800a09e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a080:	7bbb      	ldrb	r3, [r7, #14]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00b      	beq.n	800a09e <USBD_StdEPReq+0xfe>
 800a086:	7bbb      	ldrb	r3, [r7, #14]
 800a088:	2b80      	cmp	r3, #128	; 0x80
 800a08a:	d008      	beq.n	800a09e <USBD_StdEPReq+0xfe>
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	88db      	ldrh	r3, [r3, #6]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a094:	7bbb      	ldrb	r3, [r7, #14]
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f002 f9c1 	bl	800c420 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fd64 	bl	800ab6c <USBD_CtlSendStatus>

              break;
 800a0a4:	e004      	b.n	800a0b0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fc88 	bl	800a9be <USBD_CtlError>
              break;
 800a0ae:	bf00      	nop
          }
          break;
 800a0b0:	e107      	b.n	800a2c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d002      	beq.n	800a0c4 <USBD_StdEPReq+0x124>
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d016      	beq.n	800a0f0 <USBD_StdEPReq+0x150>
 800a0c2:	e04b      	b.n	800a15c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00d      	beq.n	800a0e6 <USBD_StdEPReq+0x146>
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b80      	cmp	r3, #128	; 0x80
 800a0ce:	d00a      	beq.n	800a0e6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f002 f9a3 	bl	800c420 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0da:	2180      	movs	r1, #128	; 0x80
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f002 f99f 	bl	800c420 <USBD_LL_StallEP>
 800a0e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0e4:	e040      	b.n	800a168 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a0e6:	6839      	ldr	r1, [r7, #0]
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fc68 	bl	800a9be <USBD_CtlError>
              break;
 800a0ee:	e03b      	b.n	800a168 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	885b      	ldrh	r3, [r3, #2]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d136      	bne.n	800a166 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d004      	beq.n	800a10c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f002 f9a9 	bl	800c45e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fd2d 	bl	800ab6c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a112:	7bbb      	ldrb	r3, [r7, #14]
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7ff fde2 	bl	8009ce0 <USBD_CoreFindEP>
 800a11c:	4603      	mov	r3, r0
 800a11e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a120:	7b7b      	ldrb	r3, [r7, #13]
 800a122:	2bff      	cmp	r3, #255	; 0xff
 800a124:	d01f      	beq.n	800a166 <USBD_StdEPReq+0x1c6>
 800a126:	7b7b      	ldrb	r3, [r7, #13]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d11c      	bne.n	800a166 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a12c:	7b7a      	ldrb	r2, [r7, #13]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a134:	7b7a      	ldrb	r2, [r7, #13]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	32ae      	adds	r2, #174	; 0xae
 800a13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d010      	beq.n	800a166 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a144:	7b7a      	ldrb	r2, [r7, #13]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	32ae      	adds	r2, #174	; 0xae
 800a14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	6839      	ldr	r1, [r7, #0]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	4798      	blx	r3
 800a156:	4603      	mov	r3, r0
 800a158:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a15a:	e004      	b.n	800a166 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a15c:	6839      	ldr	r1, [r7, #0]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fc2d 	bl	800a9be <USBD_CtlError>
              break;
 800a164:	e000      	b.n	800a168 <USBD_StdEPReq+0x1c8>
              break;
 800a166:	bf00      	nop
          }
          break;
 800a168:	e0ab      	b.n	800a2c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b02      	cmp	r3, #2
 800a174:	d002      	beq.n	800a17c <USBD_StdEPReq+0x1dc>
 800a176:	2b03      	cmp	r3, #3
 800a178:	d032      	beq.n	800a1e0 <USBD_StdEPReq+0x240>
 800a17a:	e097      	b.n	800a2ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d007      	beq.n	800a192 <USBD_StdEPReq+0x1f2>
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	2b80      	cmp	r3, #128	; 0x80
 800a186:	d004      	beq.n	800a192 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fc17 	bl	800a9be <USBD_CtlError>
                break;
 800a190:	e091      	b.n	800a2b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a196:	2b00      	cmp	r3, #0
 800a198:	da0b      	bge.n	800a1b2 <USBD_StdEPReq+0x212>
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
 800a19c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	3310      	adds	r3, #16
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	e00b      	b.n	800a1ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1b2:	7bbb      	ldrb	r3, [r7, #14]
 800a1b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fc6d 	bl	800aab8 <USBD_CtlSendData>
              break;
 800a1de:	e06a      	b.n	800a2b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	da11      	bge.n	800a20c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	f003 020f 	and.w	r2, r3, #15
 800a1ee:	6879      	ldr	r1, [r7, #4]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	440b      	add	r3, r1
 800a1fa:	3324      	adds	r3, #36	; 0x24
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d117      	bne.n	800a232 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fbda 	bl	800a9be <USBD_CtlError>
                  break;
 800a20a:	e054      	b.n	800a2b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
 800a20e:	f003 020f 	and.w	r2, r3, #15
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	4613      	mov	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	440b      	add	r3, r1
 800a21e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fbc7 	bl	800a9be <USBD_CtlError>
                  break;
 800a230:	e041      	b.n	800a2b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a232:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a236:	2b00      	cmp	r3, #0
 800a238:	da0b      	bge.n	800a252 <USBD_StdEPReq+0x2b2>
 800a23a:	7bbb      	ldrb	r3, [r7, #14]
 800a23c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	3310      	adds	r3, #16
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	4413      	add	r3, r2
 800a24e:	3304      	adds	r3, #4
 800a250:	e00b      	b.n	800a26a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a258:	4613      	mov	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	4413      	add	r3, r2
 800a268:	3304      	adds	r3, #4
 800a26a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a26c:	7bbb      	ldrb	r3, [r7, #14]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d002      	beq.n	800a278 <USBD_StdEPReq+0x2d8>
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	2b80      	cmp	r3, #128	; 0x80
 800a276:	d103      	bne.n	800a280 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	e00e      	b.n	800a29e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a280:	7bbb      	ldrb	r3, [r7, #14]
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f002 f909 	bl	800c49c <USBD_LL_IsStallEP>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2201      	movs	r2, #1
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	e002      	b.n	800a29e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2202      	movs	r2, #2
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fc07 	bl	800aab8 <USBD_CtlSendData>
              break;
 800a2aa:	e004      	b.n	800a2b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fb85 	bl	800a9be <USBD_CtlError>
              break;
 800a2b4:	bf00      	nop
          }
          break;
 800a2b6:	e004      	b.n	800a2c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fb7f 	bl	800a9be <USBD_CtlError>
          break;
 800a2c0:	bf00      	nop
      }
      break;
 800a2c2:	e005      	b.n	800a2d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fb79 	bl	800a9be <USBD_CtlError>
      break;
 800a2cc:	e000      	b.n	800a2d0 <USBD_StdEPReq+0x330>
      break;
 800a2ce:	bf00      	nop
  }

  return ret;
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	885b      	ldrh	r3, [r3, #2]
 800a2f6:	0a1b      	lsrs	r3, r3, #8
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	2b0e      	cmp	r3, #14
 800a2fe:	f200 8152 	bhi.w	800a5a6 <USBD_GetDescriptor+0x2ca>
 800a302:	a201      	add	r2, pc, #4	; (adr r2, 800a308 <USBD_GetDescriptor+0x2c>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a379 	.word	0x0800a379
 800a30c:	0800a391 	.word	0x0800a391
 800a310:	0800a3d1 	.word	0x0800a3d1
 800a314:	0800a5a7 	.word	0x0800a5a7
 800a318:	0800a5a7 	.word	0x0800a5a7
 800a31c:	0800a547 	.word	0x0800a547
 800a320:	0800a573 	.word	0x0800a573
 800a324:	0800a5a7 	.word	0x0800a5a7
 800a328:	0800a5a7 	.word	0x0800a5a7
 800a32c:	0800a5a7 	.word	0x0800a5a7
 800a330:	0800a5a7 	.word	0x0800a5a7
 800a334:	0800a5a7 	.word	0x0800a5a7
 800a338:	0800a5a7 	.word	0x0800a5a7
 800a33c:	0800a5a7 	.word	0x0800a5a7
 800a340:	0800a345 	.word	0x0800a345
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a356:	69db      	ldr	r3, [r3, #28]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	7c12      	ldrb	r2, [r2, #16]
 800a35c:	f107 0108 	add.w	r1, r7, #8
 800a360:	4610      	mov	r0, r2
 800a362:	4798      	blx	r3
 800a364:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a366:	e126      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fb27 	bl	800a9be <USBD_CtlError>
        err++;
 800a370:	7afb      	ldrb	r3, [r7, #11]
 800a372:	3301      	adds	r3, #1
 800a374:	72fb      	strb	r3, [r7, #11]
      break;
 800a376:	e11e      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	7c12      	ldrb	r2, [r2, #16]
 800a384:	f107 0108 	add.w	r1, r7, #8
 800a388:	4610      	mov	r0, r2
 800a38a:	4798      	blx	r3
 800a38c:	60f8      	str	r0, [r7, #12]
      break;
 800a38e:	e112      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	7c1b      	ldrb	r3, [r3, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10d      	bne.n	800a3b4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a0:	f107 0208 	add.w	r2, r7, #8
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4798      	blx	r3
 800a3a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a3b2:	e100      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	f107 0208 	add.w	r2, r7, #8
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4798      	blx	r3
 800a3c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	701a      	strb	r2, [r3, #0]
      break;
 800a3ce:	e0f2      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	885b      	ldrh	r3, [r3, #2]
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b05      	cmp	r3, #5
 800a3d8:	f200 80ac 	bhi.w	800a534 <USBD_GetDescriptor+0x258>
 800a3dc:	a201      	add	r2, pc, #4	; (adr r2, 800a3e4 <USBD_GetDescriptor+0x108>)
 800a3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e2:	bf00      	nop
 800a3e4:	0800a3fd 	.word	0x0800a3fd
 800a3e8:	0800a431 	.word	0x0800a431
 800a3ec:	0800a465 	.word	0x0800a465
 800a3f0:	0800a499 	.word	0x0800a499
 800a3f4:	0800a4cd 	.word	0x0800a4cd
 800a3f8:	0800a501 	.word	0x0800a501
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	7c12      	ldrb	r2, [r2, #16]
 800a414:	f107 0108 	add.w	r1, r7, #8
 800a418:	4610      	mov	r0, r2
 800a41a:	4798      	blx	r3
 800a41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a41e:	e091      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 facb 	bl	800a9be <USBD_CtlError>
            err++;
 800a428:	7afb      	ldrb	r3, [r7, #11]
 800a42a:	3301      	adds	r3, #1
 800a42c:	72fb      	strb	r3, [r7, #11]
          break;
 800a42e:	e089      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00b      	beq.n	800a454 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	7c12      	ldrb	r2, [r2, #16]
 800a448:	f107 0108 	add.w	r1, r7, #8
 800a44c:	4610      	mov	r0, r2
 800a44e:	4798      	blx	r3
 800a450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a452:	e077      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fab1 	bl	800a9be <USBD_CtlError>
            err++;
 800a45c:	7afb      	ldrb	r3, [r7, #11]
 800a45e:	3301      	adds	r3, #1
 800a460:	72fb      	strb	r3, [r7, #11]
          break;
 800a462:	e06f      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00b      	beq.n	800a488 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	7c12      	ldrb	r2, [r2, #16]
 800a47c:	f107 0108 	add.w	r1, r7, #8
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a486:	e05d      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fa97 	bl	800a9be <USBD_CtlError>
            err++;
 800a490:	7afb      	ldrb	r3, [r7, #11]
 800a492:	3301      	adds	r3, #1
 800a494:	72fb      	strb	r3, [r7, #11]
          break;
 800a496:	e055      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	7c12      	ldrb	r2, [r2, #16]
 800a4b0:	f107 0108 	add.w	r1, r7, #8
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	4798      	blx	r3
 800a4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ba:	e043      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fa7d 	bl	800a9be <USBD_CtlError>
            err++;
 800a4c4:	7afb      	ldrb	r3, [r7, #11]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ca:	e03b      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	7c12      	ldrb	r2, [r2, #16]
 800a4e4:	f107 0108 	add.w	r1, r7, #8
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4798      	blx	r3
 800a4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ee:	e029      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa63 	bl	800a9be <USBD_CtlError>
            err++;
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fe:	e021      	b.n	800a544 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7c12      	ldrb	r2, [r2, #16]
 800a518:	f107 0108 	add.w	r1, r7, #8
 800a51c:	4610      	mov	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a522:	e00f      	b.n	800a544 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa49 	bl	800a9be <USBD_CtlError>
            err++;
 800a52c:	7afb      	ldrb	r3, [r7, #11]
 800a52e:	3301      	adds	r3, #1
 800a530:	72fb      	strb	r3, [r7, #11]
          break;
 800a532:	e007      	b.n	800a544 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fa41 	bl	800a9be <USBD_CtlError>
          err++;
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	3301      	adds	r3, #1
 800a540:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a542:	bf00      	nop
      }
      break;
 800a544:	e037      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	7c1b      	ldrb	r3, [r3, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d109      	bne.n	800a562 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	f107 0208 	add.w	r2, r7, #8
 800a55a:	4610      	mov	r0, r2
 800a55c:	4798      	blx	r3
 800a55e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a560:	e029      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fa2a 	bl	800a9be <USBD_CtlError>
        err++;
 800a56a:	7afb      	ldrb	r3, [r7, #11]
 800a56c:	3301      	adds	r3, #1
 800a56e:	72fb      	strb	r3, [r7, #11]
      break;
 800a570:	e021      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	7c1b      	ldrb	r3, [r3, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10d      	bne.n	800a596 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a582:	f107 0208 	add.w	r2, r7, #8
 800a586:	4610      	mov	r0, r2
 800a588:	4798      	blx	r3
 800a58a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	2207      	movs	r2, #7
 800a592:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a594:	e00f      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fa10 	bl	800a9be <USBD_CtlError>
        err++;
 800a59e:	7afb      	ldrb	r3, [r7, #11]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5a4:	e007      	b.n	800a5b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fa08 	bl	800a9be <USBD_CtlError>
      err++;
 800a5ae:	7afb      	ldrb	r3, [r7, #11]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a5b4:	bf00      	nop
  }

  if (err != 0U)
 800a5b6:	7afb      	ldrb	r3, [r7, #11]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d11e      	bne.n	800a5fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	88db      	ldrh	r3, [r3, #6]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d016      	beq.n	800a5f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a5c4:	893b      	ldrh	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00e      	beq.n	800a5e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	88da      	ldrh	r2, [r3, #6]
 800a5ce:	893b      	ldrh	r3, [r7, #8]
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	bf28      	it	cs
 800a5d4:	4613      	movcs	r3, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5da:	893b      	ldrh	r3, [r7, #8]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	68f9      	ldr	r1, [r7, #12]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fa69 	bl	800aab8 <USBD_CtlSendData>
 800a5e6:	e009      	b.n	800a5fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f9e7 	bl	800a9be <USBD_CtlError>
 800a5f0:	e004      	b.n	800a5fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 faba 	bl	800ab6c <USBD_CtlSendStatus>
 800a5f8:	e000      	b.n	800a5fc <USBD_GetDescriptor+0x320>
    return;
 800a5fa:	bf00      	nop
  }
}
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop

0800a604 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	889b      	ldrh	r3, [r3, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d131      	bne.n	800a67a <USBD_SetAddress+0x76>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	88db      	ldrh	r3, [r3, #6]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d12d      	bne.n	800a67a <USBD_SetAddress+0x76>
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	885b      	ldrh	r3, [r3, #2]
 800a622:	2b7f      	cmp	r3, #127	; 0x7f
 800a624:	d829      	bhi.n	800a67a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	885b      	ldrh	r3, [r3, #2]
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a630:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	d104      	bne.n	800a648 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f9bc 	bl	800a9be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a646:	e01d      	b.n	800a684 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	7bfa      	ldrb	r2, [r7, #15]
 800a64c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 ff4d 	bl	800c4f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 fa86 	bl	800ab6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d004      	beq.n	800a670 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2202      	movs	r2, #2
 800a66a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a66e:	e009      	b.n	800a684 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a678:	e004      	b.n	800a684 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f99e 	bl	800a9be <USBD_CtlError>
  }
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a696:	2300      	movs	r3, #0
 800a698:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	885b      	ldrh	r3, [r3, #2]
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	4b4e      	ldr	r3, [pc, #312]	; (800a7dc <USBD_SetConfig+0x150>)
 800a6a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a6a4:	4b4d      	ldr	r3, [pc, #308]	; (800a7dc <USBD_SetConfig+0x150>)
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d905      	bls.n	800a6b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f985 	bl	800a9be <USBD_CtlError>
    return USBD_FAIL;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e08c      	b.n	800a7d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d002      	beq.n	800a6ca <USBD_SetConfig+0x3e>
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d029      	beq.n	800a71c <USBD_SetConfig+0x90>
 800a6c8:	e075      	b.n	800a7b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a6ca:	4b44      	ldr	r3, [pc, #272]	; (800a7dc <USBD_SetConfig+0x150>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d020      	beq.n	800a714 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a6d2:	4b42      	ldr	r3, [pc, #264]	; (800a7dc <USBD_SetConfig+0x150>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a6dc:	4b3f      	ldr	r3, [pc, #252]	; (800a7dc <USBD_SetConfig+0x150>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f7fe ffb7 	bl	8009656 <USBD_SetClassConfig>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d008      	beq.n	800a704 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f962 	bl	800a9be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a702:	e065      	b.n	800a7d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fa31 	bl	800ab6c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2203      	movs	r2, #3
 800a70e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a712:	e05d      	b.n	800a7d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fa29 	bl	800ab6c <USBD_CtlSendStatus>
      break;
 800a71a:	e059      	b.n	800a7d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a71c:	4b2f      	ldr	r3, [pc, #188]	; (800a7dc <USBD_SetConfig+0x150>)
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d112      	bne.n	800a74a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2202      	movs	r2, #2
 800a728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a72c:	4b2b      	ldr	r3, [pc, #172]	; (800a7dc <USBD_SetConfig+0x150>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a736:	4b29      	ldr	r3, [pc, #164]	; (800a7dc <USBD_SetConfig+0x150>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7fe ffa6 	bl	800968e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fa12 	bl	800ab6c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a748:	e042      	b.n	800a7d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a74a:	4b24      	ldr	r3, [pc, #144]	; (800a7dc <USBD_SetConfig+0x150>)
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	429a      	cmp	r2, r3
 800a756:	d02a      	beq.n	800a7ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7fe ff94 	bl	800968e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a766:	4b1d      	ldr	r3, [pc, #116]	; (800a7dc <USBD_SetConfig+0x150>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	461a      	mov	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a770:	4b1a      	ldr	r3, [pc, #104]	; (800a7dc <USBD_SetConfig+0x150>)
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	4619      	mov	r1, r3
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7fe ff6d 	bl	8009656 <USBD_SetClassConfig>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00f      	beq.n	800a7a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f918 	bl	800a9be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	4619      	mov	r1, r3
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7fe ff79 	bl	800968e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2202      	movs	r2, #2
 800a7a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a7a4:	e014      	b.n	800a7d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f9e0 	bl	800ab6c <USBD_CtlSendStatus>
      break;
 800a7ac:	e010      	b.n	800a7d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f9dc 	bl	800ab6c <USBD_CtlSendStatus>
      break;
 800a7b4:	e00c      	b.n	800a7d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f900 	bl	800a9be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a7be:	4b07      	ldr	r3, [pc, #28]	; (800a7dc <USBD_SetConfig+0x150>)
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7fe ff62 	bl	800968e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a7ce:	bf00      	nop
  }

  return ret;
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000360 	.word	0x20000360

0800a7e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	88db      	ldrh	r3, [r3, #6]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d004      	beq.n	800a7fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7f2:	6839      	ldr	r1, [r7, #0]
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f8e2 	bl	800a9be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7fa:	e023      	b.n	800a844 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b02      	cmp	r3, #2
 800a806:	dc02      	bgt.n	800a80e <USBD_GetConfig+0x2e>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	dc03      	bgt.n	800a814 <USBD_GetConfig+0x34>
 800a80c:	e015      	b.n	800a83a <USBD_GetConfig+0x5a>
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d00b      	beq.n	800a82a <USBD_GetConfig+0x4a>
 800a812:	e012      	b.n	800a83a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	3308      	adds	r3, #8
 800a81e:	2201      	movs	r2, #1
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f948 	bl	800aab8 <USBD_CtlSendData>
        break;
 800a828:	e00c      	b.n	800a844 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	3304      	adds	r3, #4
 800a82e:	2201      	movs	r2, #1
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f940 	bl	800aab8 <USBD_CtlSendData>
        break;
 800a838:	e004      	b.n	800a844 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f8be 	bl	800a9be <USBD_CtlError>
        break;
 800a842:	bf00      	nop
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	3b01      	subs	r3, #1
 800a860:	2b02      	cmp	r3, #2
 800a862:	d81e      	bhi.n	800a8a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	88db      	ldrh	r3, [r3, #6]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d004      	beq.n	800a876 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f8a5 	bl	800a9be <USBD_CtlError>
        break;
 800a874:	e01a      	b.n	800a8ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	f043 0202 	orr.w	r2, r3, #2
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	330c      	adds	r3, #12
 800a896:	2202      	movs	r2, #2
 800a898:	4619      	mov	r1, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f90c 	bl	800aab8 <USBD_CtlSendData>
      break;
 800a8a0:	e004      	b.n	800a8ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f88a 	bl	800a9be <USBD_CtlError>
      break;
 800a8aa:	bf00      	nop
  }
}
 800a8ac:	bf00      	nop
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	885b      	ldrh	r3, [r3, #2]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d107      	bne.n	800a8d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 f94c 	bl	800ab6c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a8d4:	e013      	b.n	800a8fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	885b      	ldrh	r3, [r3, #2]
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d10b      	bne.n	800a8f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	889b      	ldrh	r3, [r3, #4]
 800a8e2:	0a1b      	lsrs	r3, r3, #8
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	b2da      	uxtb	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f93c 	bl	800ab6c <USBD_CtlSendStatus>
}
 800a8f4:	e003      	b.n	800a8fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 f860 	bl	800a9be <USBD_CtlError>
}
 800a8fe:	bf00      	nop
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b082      	sub	sp, #8
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a916:	b2db      	uxtb	r3, r3
 800a918:	3b01      	subs	r3, #1
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d80b      	bhi.n	800a936 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	885b      	ldrh	r3, [r3, #2]
 800a922:	2b01      	cmp	r3, #1
 800a924:	d10c      	bne.n	800a940 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f91c 	bl	800ab6c <USBD_CtlSendStatus>
      }
      break;
 800a934:	e004      	b.n	800a940 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f840 	bl	800a9be <USBD_CtlError>
      break;
 800a93e:	e000      	b.n	800a942 <USBD_ClrFeature+0x3c>
      break;
 800a940:	bf00      	nop
  }
}
 800a942:	bf00      	nop
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3301      	adds	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	781a      	ldrb	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3301      	adds	r3, #1
 800a972:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f7ff fa17 	bl	8009da8 <SWAPBYTE>
 800a97a:	4603      	mov	r3, r0
 800a97c:	461a      	mov	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3301      	adds	r3, #1
 800a986:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	3301      	adds	r3, #1
 800a98c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7ff fa0a 	bl	8009da8 <SWAPBYTE>
 800a994:	4603      	mov	r3, r0
 800a996:	461a      	mov	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f7ff f9fd 	bl	8009da8 <SWAPBYTE>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	80da      	strh	r2, [r3, #6]
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9c8:	2180      	movs	r1, #128	; 0x80
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 fd28 	bl	800c420 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f001 fd24 	bl	800c420 <USBD_LL_StallEP>
}
 800a9d8:	bf00      	nop
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d042      	beq.n	800aa7c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a9fa:	6938      	ldr	r0, [r7, #16]
 800a9fc:	f000 f842 	bl	800aa84 <USBD_GetLen>
 800aa00:	4603      	mov	r3, r0
 800aa02:	3301      	adds	r3, #1
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa0a:	d808      	bhi.n	800aa1e <USBD_GetString+0x3e>
 800aa0c:	6938      	ldr	r0, [r7, #16]
 800aa0e:	f000 f839 	bl	800aa84 <USBD_GetLen>
 800aa12:	4603      	mov	r3, r0
 800aa14:	3301      	adds	r3, #1
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	e001      	b.n	800aa22 <USBD_GetString+0x42>
 800aa1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	7812      	ldrb	r2, [r2, #0]
 800aa30:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	3301      	adds	r3, #1
 800aa36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	2203      	movs	r2, #3
 800aa40:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
 800aa44:	3301      	adds	r3, #1
 800aa46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aa48:	e013      	b.n	800aa72 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	4413      	add	r3, r2
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	7812      	ldrb	r2, [r2, #0]
 800aa54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	613b      	str	r3, [r7, #16]
    idx++;
 800aa5c:	7dfb      	ldrb	r3, [r7, #23]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aa62:	7dfb      	ldrb	r3, [r7, #23]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	4413      	add	r3, r2
 800aa68:	2200      	movs	r2, #0
 800aa6a:	701a      	strb	r2, [r3, #0]
    idx++;
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1e7      	bne.n	800aa4a <USBD_GetString+0x6a>
 800aa7a:	e000      	b.n	800aa7e <USBD_GetString+0x9e>
    return;
 800aa7c:	bf00      	nop
  }
}
 800aa7e:	3718      	adds	r7, #24
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa94:	e005      	b.n	800aaa2 <USBD_GetLen+0x1e>
  {
    len++;
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1f5      	bne.n	800aa96 <USBD_GetLen+0x12>
  }

  return len;
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2202      	movs	r2, #2
 800aac8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	2100      	movs	r1, #0
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f001 fd27 	bl	800c532 <USBD_LL_Transmit>

  return USBD_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b084      	sub	sp, #16
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	60f8      	str	r0, [r7, #12]
 800aaf6:	60b9      	str	r1, [r7, #8]
 800aaf8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	2100      	movs	r1, #0
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f001 fd16 	bl	800c532 <USBD_LL_Transmit>

  return USBD_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2203      	movs	r2, #3
 800ab20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	2100      	movs	r1, #0
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f001 fd1a 	bl	800c574 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	60f8      	str	r0, [r7, #12]
 800ab52:	60b9      	str	r1, [r7, #8]
 800ab54:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f001 fd09 	bl	800c574 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2204      	movs	r2, #4
 800ab78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2100      	movs	r1, #0
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 fcd5 	bl	800c532 <USBD_LL_Transmit>

  return USBD_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3708      	adds	r7, #8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b082      	sub	sp, #8
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2205      	movs	r2, #5
 800ab9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aba2:	2300      	movs	r3, #0
 800aba4:	2200      	movs	r2, #0
 800aba6:	2100      	movs	r1, #0
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 fce3 	bl	800c574 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <delayInit>:
#include <API_delay.h>
#include <stm32f4xx_hal.h>

void delayInit(delay_t* delay, tick_t duration){
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
	assert(delay);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d105      	bne.n	800abd4 <delayInit+0x1c>
 800abc8:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <delayInit+0x3c>)
 800abca:	4a0b      	ldr	r2, [pc, #44]	; (800abf8 <delayInit+0x40>)
 800abcc:	2105      	movs	r1, #5
 800abce:	480b      	ldr	r0, [pc, #44]	; (800abfc <delayInit+0x44>)
 800abd0:	f001 fd96 	bl	800c700 <__assert_func>

	delay->startTime = HAL_GetTick();
 800abd4:	f7f6 fa8e 	bl	80010f4 <HAL_GetTick>
 800abd8:	4602      	mov	r2, r0
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	609a      	str	r2, [r3, #8]
}
 800abea:	bf00      	nop
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	0800e448 	.word	0x0800e448
 800abf8:	0800e8e0 	.word	0x0800e8e0
 800abfc:	0800e450 	.word	0x0800e450

0800ac00 <delayRead>:

bool_t delayRead(delay_t* delay){
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
	assert(delay);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d105      	bne.n	800ac1a <delayRead+0x1a>
 800ac0e:	4b16      	ldr	r3, [pc, #88]	; (800ac68 <delayRead+0x68>)
 800ac10:	4a16      	ldr	r2, [pc, #88]	; (800ac6c <delayRead+0x6c>)
 800ac12:	210d      	movs	r1, #13
 800ac14:	4816      	ldr	r0, [pc, #88]	; (800ac70 <delayRead+0x70>)
 800ac16:	f001 fd73 	bl	800c700 <__assert_func>

	tick_t Current_time = HAL_GetTick();
 800ac1a:	f7f6 fa6b 	bl	80010f4 <HAL_GetTick>
 800ac1e:	60b8      	str	r0, [r7, #8]
	bool_t Done = false;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]

	if(!delay->running){
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d106      	bne.n	800ac3a <delayRead+0x3a>
		delay->startTime = Current_time;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	601a      	str	r2, [r3, #0]
		delay->running = true;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2201      	movs	r2, #1
 800ac36:	609a      	str	r2, [r3, #8]
 800ac38:	e011      	b.n	800ac5e <delayRead+0x5e>
	}else{
		// Done is TRUE when the duration has elapsed
		// Done is FALSE when theres time remaining
		Done = (Current_time - delay->startTime) >= delay->duration;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	1ad2      	subs	r2, r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	bf2c      	ite	cs
 800ac4a:	2301      	movcs	r3, #1
 800ac4c:	2300      	movcc	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
		// If it's done, it should stop running
		delay->running = !Done;
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
 800ac52:	f083 0301 	eor.w	r3, r3, #1
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	461a      	mov	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	609a      	str	r2, [r3, #8]
	}
	return Done;
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	0800e448 	.word	0x0800e448
 800ac6c:	0800e8ec 	.word	0x0800e8ec
 800ac70:	0800e450 	.word	0x0800e450

0800ac74 <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ){
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
	assert(delay);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d105      	bne.n	800ac90 <delayWrite+0x1c>
 800ac84:	4b06      	ldr	r3, [pc, #24]	; (800aca0 <delayWrite+0x2c>)
 800ac86:	4a07      	ldr	r2, [pc, #28]	; (800aca4 <delayWrite+0x30>)
 800ac88:	2120      	movs	r1, #32
 800ac8a:	4807      	ldr	r0, [pc, #28]	; (800aca8 <delayWrite+0x34>)
 800ac8c:	f001 fd38 	bl	800c700 <__assert_func>

	delay->duration = duration;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	605a      	str	r2, [r3, #4]
}
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	0800e448 	.word	0x0800e448
 800aca4:	0800e8f8 	.word	0x0800e8f8
 800aca8:	0800e450 	.word	0x0800e450

0800acac <on_initializing>:
extern TIM_HandleTypeDef htim2;
extern ADC_HandleTypeDef hadc1;

//─── Initialization ─────────────────────────────────────────────────────────
static void on_initializing(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	af00      	add	r7, sp, #0
	debug_uart_print("INIT: entering on_initializing()\r\n");
 800acb0:	4812      	ldr	r0, [pc, #72]	; (800acfc <on_initializing+0x50>)
 800acb2:	f000 fd47 	bl	800b744 <debug_uart_print>
    usb_commands_init();
 800acb6:	f000 fdfa 	bl	800b8ae <usb_commands_init>
    eeprom_init();
 800acba:	f000 fa97 	bl	800b1ec <eeprom_init>
    rtc_init();
 800acbe:	f000 fc6b 	bl	800b598 <rtc_init>

    // load or default thresholds
    eeprom_read_thresholds(&threshold_low, &threshold_high);
 800acc2:	490f      	ldr	r1, [pc, #60]	; (800ad00 <on_initializing+0x54>)
 800acc4:	480f      	ldr	r0, [pc, #60]	; (800ad04 <on_initializing+0x58>)
 800acc6:	f000 fae0 	bl	800b28a <eeprom_read_thresholds>

    // kick off TIM2→ADC1@1kHz DMA→256 samples
    HAL_TIM_Base_Start(&htim2);
 800acca:	480f      	ldr	r0, [pc, #60]	; (800ad08 <on_initializing+0x5c>)
 800accc:	f7fb f940 	bl	8005f50 <HAL_TIM_Base_Start>
    HAL_ADC_Start_DMA(&hadc1,
 800acd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acd4:	490d      	ldr	r1, [pc, #52]	; (800ad0c <on_initializing+0x60>)
 800acd6:	480e      	ldr	r0, [pc, #56]	; (800ad10 <on_initializing+0x64>)
 800acd8:	f7f6 fa80 	bl	80011dc <HAL_ADC_Start_DMA>
                      (uint32_t*)adc_dma_buffer,
                      ADC_BUFFER_SIZE);

    // start a 1 s non‑blocking delay
    delayInit(&measureDelay, 1000);
 800acdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ace0:	480c      	ldr	r0, [pc, #48]	; (800ad14 <on_initializing+0x68>)
 800ace2:	f7ff ff69 	bl	800abb8 <delayInit>
    debug_uart_print("INIT: drivers initialized\r\n");
 800ace6:	480c      	ldr	r0, [pc, #48]	; (800ad18 <on_initializing+0x6c>)
 800ace8:	f000 fd2c 	bl	800b744 <debug_uart_print>
    port_ble_init();
 800acec:	f000 fe9e 	bl	800ba2c <port_ble_init>
    application_state = STATE_IDLE;
 800acf0:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <on_initializing+0x70>)
 800acf2:	2201      	movs	r2, #1
 800acf4:	701a      	strb	r2, [r3, #0]
}
 800acf6:	bf00      	nop
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	0800e470 	.word	0x0800e470
 800ad00:	20000372 	.word	0x20000372
 800ad04:	20000370 	.word	0x20000370
 800ad08:	20000280 	.word	0x20000280
 800ad0c:	20000374 	.word	0x20000374
 800ad10:	20000184 	.word	0x20000184
 800ad14:	20000364 	.word	0x20000364
 800ad18:	0800e494 	.word	0x0800e494
 800ad1c:	20000361 	.word	0x20000361

0800ad20 <on_idle>:

//─── Idle: wait for timeout or USB ────────────────────────────────────────────
static void on_idle(void)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	af00      	add	r7, sp, #0
    if (delayRead(&measureDelay)) {
 800ad24:	4809      	ldr	r0, [pc, #36]	; (800ad4c <on_idle+0x2c>)
 800ad26:	f7ff ff6b 	bl	800ac00 <delayRead>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <on_idle+0x18>
        application_state = STATE_MONITORING;
 800ad30:	4b07      	ldr	r3, [pc, #28]	; (800ad50 <on_idle+0x30>)
 800ad32:	2202      	movs	r2, #2
 800ad34:	701a      	strb	r2, [r3, #0]
        return;
 800ad36:	e008      	b.n	800ad4a <on_idle+0x2a>
    }
    if (usb_commands_pending()) {
 800ad38:	f000 fdbf 	bl	800b8ba <usb_commands_pending>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <on_idle+0x2a>
        application_state = STATE_USB_COMMAND;
 800ad42:	4b03      	ldr	r3, [pc, #12]	; (800ad50 <on_idle+0x30>)
 800ad44:	2203      	movs	r2, #3
 800ad46:	701a      	strb	r2, [r3, #0]
        return;
 800ad48:	bf00      	nop
    }
}
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	20000364 	.word	0x20000364
 800ad50:	20000361 	.word	0x20000361

0800ad54 <on_monitoring>:

//─── Monitoring: show & log high events ──────────────────────────────────────
static void on_monitoring(void)
{
 800ad54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad56:	b09f      	sub	sp, #124	; 0x7c
 800ad58:	af06      	add	r7, sp, #24
    char buf[80];

    // 0) Entry trace
    debug_uart_print("=== ENTER MONITORING ===\r\n");
 800ad5a:	4841      	ldr	r0, [pc, #260]	; (800ae60 <on_monitoring+0x10c>)
 800ad5c:	f000 fcf2 	bl	800b744 <debug_uart_print>

    // 1) Print the raw envelope value
    //    (you may want to cast or format as integer or float)
    sprintf(buf, "DBG: Envelope = %u\r\n", envelope);
 800ad60:	4b40      	ldr	r3, [pc, #256]	; (800ae64 <on_monitoring+0x110>)
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	461a      	mov	r2, r3
 800ad68:	f107 0310 	add.w	r3, r7, #16
 800ad6c:	493e      	ldr	r1, [pc, #248]	; (800ae68 <on_monitoring+0x114>)
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f001 fdec 	bl	800c94c <siprintf>
    debug_uart_print(buf);
 800ad74:	f107 0310 	add.w	r3, r7, #16
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fce3 	bl	800b744 <debug_uart_print>

    // 2) Classify and report
    if (envelope <= threshold_low) {
 800ad7e:	4b39      	ldr	r3, [pc, #228]	; (800ae64 <on_monitoring+0x110>)
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	4b39      	ldr	r3, [pc, #228]	; (800ae6c <on_monitoring+0x118>)
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d806      	bhi.n	800ad9a <on_monitoring+0x46>
        debug_uart_print("DBG: Classification → LOW NOISE\r\n");
 800ad8c:	4838      	ldr	r0, [pc, #224]	; (800ae70 <on_monitoring+0x11c>)
 800ad8e:	f000 fcd9 	bl	800b744 <debug_uart_print>
        port_ble_sendString("LOW NOISE\r\n");
 800ad92:	4838      	ldr	r0, [pc, #224]	; (800ae74 <on_monitoring+0x120>)
 800ad94:	f000 fe52 	bl	800ba3c <port_ble_sendString>
 800ad98:	e053      	b.n	800ae42 <on_monitoring+0xee>
    }
    else if (envelope < threshold_high) {
 800ad9a:	4b32      	ldr	r3, [pc, #200]	; (800ae64 <on_monitoring+0x110>)
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	4b35      	ldr	r3, [pc, #212]	; (800ae78 <on_monitoring+0x124>)
 800ada2:	881b      	ldrh	r3, [r3, #0]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d206      	bcs.n	800adb6 <on_monitoring+0x62>
        debug_uart_print("DBG: Classification → MEDIUM NOISE\r\n");
 800ada8:	4834      	ldr	r0, [pc, #208]	; (800ae7c <on_monitoring+0x128>)
 800adaa:	f000 fccb 	bl	800b744 <debug_uart_print>
        port_ble_sendString("MEDIUM NOISE\r\n");
 800adae:	4834      	ldr	r0, [pc, #208]	; (800ae80 <on_monitoring+0x12c>)
 800adb0:	f000 fe44 	bl	800ba3c <port_ble_sendString>
 800adb4:	e045      	b.n	800ae42 <on_monitoring+0xee>
    }
    else {
        debug_uart_print("DBG: Classification → HIGH NOISE\r\n");
 800adb6:	4833      	ldr	r0, [pc, #204]	; (800ae84 <on_monitoring+0x130>)
 800adb8:	f000 fcc4 	bl	800b744 <debug_uart_print>
        port_ble_sendString("HIGH NOISE\r\n");
 800adbc:	4832      	ldr	r0, [pc, #200]	; (800ae88 <on_monitoring+0x134>)
 800adbe:	f000 fe3d 	bl	800ba3c <port_ble_sendString>

        // 3) Log high‑noise event
        rtc_datetime_t dt;
        if (rtc_get_datetime(&dt)) {
 800adc2:	f107 0308 	add.w	r3, r7, #8
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fc08 	bl	800b5dc <rtc_get_datetime>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d034      	beq.n	800ae3c <on_monitoring+0xe8>
            // Debug‑print timestamp + level
            sprintf(buf,
                    "DBG: Logging @ %02u/%02u/20%02u %02u:%02u:%02u, lvl=%u\r\n",
                    dt.day, dt.month, dt.year,
 800add2:	7afb      	ldrb	r3, [r7, #11]
            sprintf(buf,
 800add4:	461e      	mov	r6, r3
                    dt.day, dt.month, dt.year,
 800add6:	7b7b      	ldrb	r3, [r7, #13]
            sprintf(buf,
 800add8:	469c      	mov	ip, r3
                    dt.day, dt.month, dt.year,
 800adda:	7bbb      	ldrb	r3, [r7, #14]
            sprintf(buf,
 800addc:	461a      	mov	r2, r3
                    dt.hour, dt.min, dt.sec,
 800adde:	7abb      	ldrb	r3, [r7, #10]
            sprintf(buf,
 800ade0:	4619      	mov	r1, r3
                    dt.hour, dt.min, dt.sec,
 800ade2:	7a7b      	ldrb	r3, [r7, #9]
            sprintf(buf,
 800ade4:	461c      	mov	r4, r3
                    dt.hour, dt.min, dt.sec,
 800ade6:	7a3b      	ldrb	r3, [r7, #8]
            sprintf(buf,
 800ade8:	461d      	mov	r5, r3
 800adea:	4b1e      	ldr	r3, [pc, #120]	; (800ae64 <on_monitoring+0x110>)
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	b29b      	uxth	r3, r3
 800adf0:	f107 0010 	add.w	r0, r7, #16
 800adf4:	9304      	str	r3, [sp, #16]
 800adf6:	9503      	str	r5, [sp, #12]
 800adf8:	9402      	str	r4, [sp, #8]
 800adfa:	9101      	str	r1, [sp, #4]
 800adfc:	9200      	str	r2, [sp, #0]
 800adfe:	4663      	mov	r3, ip
 800ae00:	4632      	mov	r2, r6
 800ae02:	4922      	ldr	r1, [pc, #136]	; (800ae8c <on_monitoring+0x138>)
 800ae04:	f001 fda2 	bl	800c94c <siprintf>
                    envelope);
            debug_uart_print(buf);
 800ae08:	f107 0310 	add.w	r3, r7, #16
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 fc99 	bl	800b744 <debug_uart_print>

            // Prepare entry (level as integer)
            eeprom_log_entry_t entry = {
                .year   = dt.year,
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
            eeprom_log_entry_t entry = {
 800ae14:	703b      	strb	r3, [r7, #0]
                .month  = dt.month,
 800ae16:	7b7b      	ldrb	r3, [r7, #13]
            eeprom_log_entry_t entry = {
 800ae18:	707b      	strb	r3, [r7, #1]
                .day    = dt.day,
 800ae1a:	7afb      	ldrb	r3, [r7, #11]
            eeprom_log_entry_t entry = {
 800ae1c:	70bb      	strb	r3, [r7, #2]
                .hour   = dt.hour,
 800ae1e:	7abb      	ldrb	r3, [r7, #10]
            eeprom_log_entry_t entry = {
 800ae20:	70fb      	strb	r3, [r7, #3]
                .minute = dt.min,
 800ae22:	7a7b      	ldrb	r3, [r7, #9]
            eeprom_log_entry_t entry = {
 800ae24:	713b      	strb	r3, [r7, #4]
                .second = dt.sec,
 800ae26:	7a3b      	ldrb	r3, [r7, #8]
            eeprom_log_entry_t entry = {
 800ae28:	717b      	strb	r3, [r7, #5]
 800ae2a:	4b0e      	ldr	r3, [pc, #56]	; (800ae64 <on_monitoring+0x110>)
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	80fb      	strh	r3, [r7, #6]
                .level  = (uint16_t)envelope
            };
            eeprom_log_high_event(&entry);
 800ae32:	463b      	mov	r3, r7
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 fa79 	bl	800b32c <eeprom_log_high_event>
 800ae3a:	e002      	b.n	800ae42 <on_monitoring+0xee>
        } else {
            debug_uart_print("DBG: RTC read failed, skipping log\r\n");
 800ae3c:	4814      	ldr	r0, [pc, #80]	; (800ae90 <on_monitoring+0x13c>)
 800ae3e:	f000 fc81 	bl	800b744 <debug_uart_print>
        }
    }

    // 4) Exit trace
    debug_uart_print("=== EXIT MONITORING ===\r\n");
 800ae42:	4814      	ldr	r0, [pc, #80]	; (800ae94 <on_monitoring+0x140>)
 800ae44:	f000 fc7e 	bl	800b744 <debug_uart_print>

    // 5) Restart 1 s timer & go back to IDLE
    delayWrite(&measureDelay, 1000);
 800ae48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ae4c:	4812      	ldr	r0, [pc, #72]	; (800ae98 <on_monitoring+0x144>)
 800ae4e:	f7ff ff11 	bl	800ac74 <delayWrite>
    application_state = STATE_IDLE;
 800ae52:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <on_monitoring+0x148>)
 800ae54:	2201      	movs	r2, #1
 800ae56:	701a      	strb	r2, [r3, #0]
}
 800ae58:	bf00      	nop
 800ae5a:	3764      	adds	r7, #100	; 0x64
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae60:	0800e4b0 	.word	0x0800e4b0
 800ae64:	20000574 	.word	0x20000574
 800ae68:	0800e4cc 	.word	0x0800e4cc
 800ae6c:	20000370 	.word	0x20000370
 800ae70:	0800e4e4 	.word	0x0800e4e4
 800ae74:	0800e508 	.word	0x0800e508
 800ae78:	20000372 	.word	0x20000372
 800ae7c:	0800e514 	.word	0x0800e514
 800ae80:	0800e53c 	.word	0x0800e53c
 800ae84:	0800e54c 	.word	0x0800e54c
 800ae88:	0800e574 	.word	0x0800e574
 800ae8c:	0800e584 	.word	0x0800e584
 800ae90:	0800e5c0 	.word	0x0800e5c0
 800ae94:	0800e5e8 	.word	0x0800e5e8
 800ae98:	20000364 	.word	0x20000364
 800ae9c:	20000361 	.word	0x20000361

0800aea0 <on_usb_command>:

//─── USB Command handler ─────────────────────────────────────────────────────
static void on_usb_command(void)
{
 800aea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aea2:	b0b3      	sub	sp, #204	; 0xcc
 800aea4:	af06      	add	r7, sp, #24
    pending_action_t act;
    char buf[64];
    usb_command_t cmd = usb_commands_get(&act);
 800aea6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 fd4c 	bl	800b948 <usb_commands_get>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    switch (cmd) {
 800aeb6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	f200 80e1 	bhi.w	800b082 <on_usb_command+0x1e2>
 800aec0:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <on_usb_command+0x28>)
 800aec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec6:	bf00      	nop
 800aec8:	0800aedd 	.word	0x0800aedd
 800aecc:	0800af03 	.word	0x0800af03
 800aed0:	0800af39 	.word	0x0800af39
 800aed4:	0800af93 	.word	0x0800af93
 800aed8:	0800afb5 	.word	0x0800afb5
        case CMD_GET_THRESH: {
            snprintf(buf, sizeof(buf),
 800aedc:	4b6e      	ldr	r3, [pc, #440]	; (800b098 <on_usb_command+0x1f8>)
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	461a      	mov	r2, r3
 800aee2:	4b6e      	ldr	r3, [pc, #440]	; (800b09c <on_usb_command+0x1fc>)
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	4613      	mov	r3, r2
 800aeee:	4a6c      	ldr	r2, [pc, #432]	; (800b0a0 <on_usb_command+0x200>)
 800aef0:	2140      	movs	r1, #64	; 0x40
 800aef2:	f001 fcf7 	bl	800c8e4 <sniprintf>
                     "TH_LOW=%u TH_HIGH=%u\r\n",
                     threshold_low, threshold_high);
            usb_cdc_sendString(buf);
 800aef6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 fcc4 	bl	800b888 <usb_cdc_sendString>
            break;
 800af00:	e0c2      	b.n	800b088 <on_usb_command+0x1e8>
        }
        case CMD_SET_THRESH: {
            if (eeprom_write_thresholds(act.low, act.high)) {
 800af02:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800af06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800af0a:	4611      	mov	r1, r2
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 f9e9 	bl	800b2e4 <eeprom_write_thresholds>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00b      	beq.n	800af30 <on_usb_command+0x90>
                threshold_low  = act.low;
 800af18:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800af1c:	4b5e      	ldr	r3, [pc, #376]	; (800b098 <on_usb_command+0x1f8>)
 800af1e:	801a      	strh	r2, [r3, #0]
                threshold_high = act.high;
 800af20:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800af24:	4b5d      	ldr	r3, [pc, #372]	; (800b09c <on_usb_command+0x1fc>)
 800af26:	801a      	strh	r2, [r3, #0]
                usb_cdc_sendString("Thresholds updated\r\n");
 800af28:	485e      	ldr	r0, [pc, #376]	; (800b0a4 <on_usb_command+0x204>)
 800af2a:	f000 fcad 	bl	800b888 <usb_cdc_sendString>
            } else {
                usb_cdc_sendString("EEPROM write error\r\n");
            }
            break;
 800af2e:	e0ab      	b.n	800b088 <on_usb_command+0x1e8>
                usb_cdc_sendString("EEPROM write error\r\n");
 800af30:	485d      	ldr	r0, [pc, #372]	; (800b0a8 <on_usb_command+0x208>)
 800af32:	f000 fca9 	bl	800b888 <usb_cdc_sendString>
            break;
 800af36:	e0a7      	b.n	800b088 <on_usb_command+0x1e8>
        }
        case CMD_GET_TIME: {
            rtc_datetime_t dt;
            if (rtc_get_datetime(&dt)) {
 800af38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fb4d 	bl	800b5dc <rtc_get_datetime>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d020      	beq.n	800af8a <on_usb_command+0xea>
                snprintf(buf, sizeof(buf),
                         "%02u/%02u/20%02u %02u:%02u:%02u\r\n",
                         dt.date, dt.month, dt.year,
 800af48:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
                snprintf(buf, sizeof(buf),
 800af4c:	461e      	mov	r6, r3
                         dt.date, dt.month, dt.year,
 800af4e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800af52:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
                         dt.hour, dt.min, dt.sec);
 800af56:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
 800af5a:	f897 0059 	ldrb.w	r0, [r7, #89]	; 0x59
                snprintf(buf, sizeof(buf),
 800af5e:	4604      	mov	r4, r0
                         dt.hour, dt.min, dt.sec);
 800af60:	f897 0058 	ldrb.w	r0, [r7, #88]	; 0x58
                snprintf(buf, sizeof(buf),
 800af64:	4605      	mov	r5, r0
 800af66:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800af6a:	9504      	str	r5, [sp, #16]
 800af6c:	9403      	str	r4, [sp, #12]
 800af6e:	9102      	str	r1, [sp, #8]
 800af70:	9201      	str	r2, [sp, #4]
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	4633      	mov	r3, r6
 800af76:	4a4d      	ldr	r2, [pc, #308]	; (800b0ac <on_usb_command+0x20c>)
 800af78:	2140      	movs	r1, #64	; 0x40
 800af7a:	f001 fcb3 	bl	800c8e4 <sniprintf>
                usb_cdc_sendString(buf);
 800af7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fc80 	bl	800b888 <usb_cdc_sendString>
            } else {
                usb_cdc_sendString("RTC: ND\r\n");
            }
            break;
 800af88:	e07e      	b.n	800b088 <on_usb_command+0x1e8>
                usb_cdc_sendString("RTC: ND\r\n");
 800af8a:	4849      	ldr	r0, [pc, #292]	; (800b0b0 <on_usb_command+0x210>)
 800af8c:	f000 fc7c 	bl	800b888 <usb_cdc_sendString>
            break;
 800af90:	e07a      	b.n	800b088 <on_usb_command+0x1e8>
        }
        case CMD_SET_TIME: {
            if (rtc_set_datetime(&act.dt)) {
 800af92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800af96:	3306      	adds	r3, #6
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 fb81 	bl	800b6a0 <rtc_set_datetime>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d003      	beq.n	800afac <on_usb_command+0x10c>
                usb_cdc_sendString("RTC updated\r\n");
 800afa4:	4843      	ldr	r0, [pc, #268]	; (800b0b4 <on_usb_command+0x214>)
 800afa6:	f000 fc6f 	bl	800b888 <usb_cdc_sendString>
            } else {
                usb_cdc_sendString("RTC write error\r\n");
            }
            break;
 800afaa:	e06d      	b.n	800b088 <on_usb_command+0x1e8>
                usb_cdc_sendString("RTC write error\r\n");
 800afac:	4842      	ldr	r0, [pc, #264]	; (800b0b8 <on_usb_command+0x218>)
 800afae:	f000 fc6b 	bl	800b888 <usb_cdc_sendString>
            break;
 800afb2:	e069      	b.n	800b088 <on_usb_command+0x1e8>
        }
        case CMD_GET_LOG: {
            eeprom_log_entry_t entries[EEPROM_LOG_MAX_ENTRIES];
            uint8_t count;
            if (eeprom_read_log(entries, EEPROM_LOG_MAX_ENTRIES, &count)) {
 800afb4:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800afb8:	1d3b      	adds	r3, r7, #4
 800afba:	210a      	movs	r1, #10
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fa2f 	bl	800b420 <eeprom_read_log>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d058      	beq.n	800b07a <on_usb_command+0x1da>
                for (uint8_t i = 0; i < count; i++) {
 800afc8:	2300      	movs	r3, #0
 800afca:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800afce:	e04d      	b.n	800b06c <on_usb_command+0x1cc>
                    snprintf(buf, sizeof(buf),
                             "%02u/%02u/20%02u %02u:%02u:%02u Lvl=%u\r\n",
                             entries[i].day,
 800afd0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800afd4:	00db      	lsls	r3, r3, #3
 800afd6:	33b0      	adds	r3, #176	; 0xb0
 800afd8:	443b      	add	r3, r7
 800afda:	f813 3caa 	ldrb.w	r3, [r3, #-170]
                    snprintf(buf, sizeof(buf),
 800afde:	469c      	mov	ip, r3
                             entries[i].month,
 800afe0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800afe4:	00db      	lsls	r3, r3, #3
 800afe6:	33b0      	adds	r3, #176	; 0xb0
 800afe8:	443b      	add	r3, r7
 800afea:	f813 3cab 	ldrb.w	r3, [r3, #-171]
                    snprintf(buf, sizeof(buf),
 800afee:	461a      	mov	r2, r3
                             entries[i].year,
 800aff0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800aff4:	00db      	lsls	r3, r3, #3
 800aff6:	33b0      	adds	r3, #176	; 0xb0
 800aff8:	443b      	add	r3, r7
 800affa:	f813 3cac 	ldrb.w	r3, [r3, #-172]
                    snprintf(buf, sizeof(buf),
 800affe:	4619      	mov	r1, r3
                             entries[i].hour,
 800b000:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	33b0      	adds	r3, #176	; 0xb0
 800b008:	443b      	add	r3, r7
 800b00a:	f813 3ca9 	ldrb.w	r3, [r3, #-169]
                    snprintf(buf, sizeof(buf),
 800b00e:	461c      	mov	r4, r3
                             entries[i].minute,
 800b010:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b014:	00db      	lsls	r3, r3, #3
 800b016:	33b0      	adds	r3, #176	; 0xb0
 800b018:	443b      	add	r3, r7
 800b01a:	f813 3ca8 	ldrb.w	r3, [r3, #-168]
                    snprintf(buf, sizeof(buf),
 800b01e:	461d      	mov	r5, r3
                             entries[i].second,
 800b020:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b024:	00db      	lsls	r3, r3, #3
 800b026:	33b0      	adds	r3, #176	; 0xb0
 800b028:	443b      	add	r3, r7
 800b02a:	f813 3ca7 	ldrb.w	r3, [r3, #-167]
                    snprintf(buf, sizeof(buf),
 800b02e:	461e      	mov	r6, r3
                             entries[i].level);
 800b030:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	33b0      	adds	r3, #176	; 0xb0
 800b038:	443b      	add	r3, r7
 800b03a:	f833 3ca6 	ldrh.w	r3, [r3, #-166]
                    snprintf(buf, sizeof(buf),
 800b03e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800b042:	9305      	str	r3, [sp, #20]
 800b044:	9604      	str	r6, [sp, #16]
 800b046:	9503      	str	r5, [sp, #12]
 800b048:	9402      	str	r4, [sp, #8]
 800b04a:	9101      	str	r1, [sp, #4]
 800b04c:	9200      	str	r2, [sp, #0]
 800b04e:	4663      	mov	r3, ip
 800b050:	4a1a      	ldr	r2, [pc, #104]	; (800b0bc <on_usb_command+0x21c>)
 800b052:	2140      	movs	r1, #64	; 0x40
 800b054:	f001 fc46 	bl	800c8e4 <sniprintf>
                    usb_cdc_sendString(buf);
 800b058:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fc13 	bl	800b888 <usb_cdc_sendString>
                for (uint8_t i = 0; i < count; i++) {
 800b062:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b066:	3301      	adds	r3, #1
 800b068:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800b06c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b070:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b074:	429a      	cmp	r2, r3
 800b076:	d3ab      	bcc.n	800afd0 <on_usb_command+0x130>
                }
            } else {
                usb_cdc_sendString("Log empty or error\r\n");
            }
            break;
 800b078:	e006      	b.n	800b088 <on_usb_command+0x1e8>
                usb_cdc_sendString("Log empty or error\r\n");
 800b07a:	4811      	ldr	r0, [pc, #68]	; (800b0c0 <on_usb_command+0x220>)
 800b07c:	f000 fc04 	bl	800b888 <usb_cdc_sendString>
            break;
 800b080:	e002      	b.n	800b088 <on_usb_command+0x1e8>
        }
        case CMD_HELP:
        default:
            usb_commands_print_help();
 800b082:	f000 fcc9 	bl	800ba18 <usb_commands_print_help>
            break;
 800b086:	bf00      	nop
    }
    application_state = STATE_IDLE;
 800b088:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <on_usb_command+0x224>)
 800b08a:	2201      	movs	r2, #1
 800b08c:	701a      	strb	r2, [r3, #0]
}
 800b08e:	bf00      	nop
 800b090:	37b4      	adds	r7, #180	; 0xb4
 800b092:	46bd      	mov	sp, r7
 800b094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b096:	bf00      	nop
 800b098:	20000370 	.word	0x20000370
 800b09c:	20000372 	.word	0x20000372
 800b0a0:	0800e604 	.word	0x0800e604
 800b0a4:	0800e61c 	.word	0x0800e61c
 800b0a8:	0800e634 	.word	0x0800e634
 800b0ac:	0800e64c 	.word	0x0800e64c
 800b0b0:	0800e670 	.word	0x0800e670
 800b0b4:	0800e67c 	.word	0x0800e67c
 800b0b8:	0800e68c 	.word	0x0800e68c
 800b0bc:	0800e6a0 	.word	0x0800e6a0
 800b0c0:	0800e6cc 	.word	0x0800e6cc
 800b0c4:	20000361 	.word	0x20000361

0800b0c8 <app_entry_point>:

//─── Main loop ───────────────────────────────────────────────────────────────
void app_entry_point(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
    while (1) {
        switch (application_state) {
 800b0cc:	4b0e      	ldr	r3, [pc, #56]	; (800b108 <app_entry_point+0x40>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d8fb      	bhi.n	800b0cc <app_entry_point+0x4>
 800b0d4:	a201      	add	r2, pc, #4	; (adr r2, 800b0dc <app_entry_point+0x14>)
 800b0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0da:	bf00      	nop
 800b0dc:	0800b0ed 	.word	0x0800b0ed
 800b0e0:	0800b0f3 	.word	0x0800b0f3
 800b0e4:	0800b0f9 	.word	0x0800b0f9
 800b0e8:	0800b0ff 	.word	0x0800b0ff
            case STATE_INITIALIZING:
            	on_initializing();
 800b0ec:	f7ff fdde 	bl	800acac <on_initializing>
            	break;
 800b0f0:	e009      	b.n	800b106 <app_entry_point+0x3e>
            case STATE_IDLE:
            	on_idle();
 800b0f2:	f7ff fe15 	bl	800ad20 <on_idle>
            	break;
 800b0f6:	e006      	b.n	800b106 <app_entry_point+0x3e>
            case STATE_MONITORING:
            	on_monitoring();
 800b0f8:	f7ff fe2c 	bl	800ad54 <on_monitoring>
            	break;
 800b0fc:	e003      	b.n	800b106 <app_entry_point+0x3e>
            case STATE_USB_COMMAND:
            	on_usb_command();
 800b0fe:	f7ff fecf 	bl	800aea0 <on_usb_command>
            	break;
 800b102:	bf00      	nop
 800b104:	e7e2      	b.n	800b0cc <app_entry_point+0x4>
        switch (application_state) {
 800b106:	e7e1      	b.n	800b0cc <app_entry_point+0x4>
 800b108:	20000361 	.word	0x20000361

0800b10c <HAL_ADC_ConvCpltCallback>:
    // Update the debouncing state machine in the button driver.
    button_update();
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08a      	sub	sp, #40	; 0x28
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
    if (hadc->Instance != ADC1) return;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a30      	ldr	r2, [pc, #192]	; (800b1dc <HAL_ADC_ConvCpltCallback+0xd0>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d15a      	bne.n	800b1d4 <HAL_ADC_ConvCpltCallback+0xc8>

    // 1) Compute DC bias
    uint32_t sum = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b122:	2300      	movs	r3, #0
 800b124:	623b      	str	r3, [r7, #32]
 800b126:	e00a      	b.n	800b13e <HAL_ADC_ConvCpltCallback+0x32>
        sum += adc_dma_buffer[i];
 800b128:	4a2d      	ldr	r2, [pc, #180]	; (800b1e0 <HAL_ADC_ConvCpltCallback+0xd4>)
 800b12a:	6a3b      	ldr	r3, [r7, #32]
 800b12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b130:	461a      	mov	r2, r3
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	4413      	add	r3, r2
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	3301      	adds	r3, #1
 800b13c:	623b      	str	r3, [r7, #32]
 800b13e:	6a3b      	ldr	r3, [r7, #32]
 800b140:	2bff      	cmp	r3, #255	; 0xff
 800b142:	ddf1      	ble.n	800b128 <HAL_ADC_ConvCpltCallback+0x1c>
    }
    float bias = (float)sum / (float)ADC_BUFFER_SIZE;
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	ee07 3a90 	vmov	s15, r3
 800b14a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b14e:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b1e4 <HAL_ADC_ConvCpltCallback+0xd8>
 800b152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b156:	edc7 7a05 	vstr	s15, [r7, #20]

    // 2) Compute sum of squares around the bias
    uint32_t sum_sq = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b15e:	2300      	movs	r3, #0
 800b160:	61bb      	str	r3, [r7, #24]
 800b162:	e01b      	b.n	800b19c <HAL_ADC_ConvCpltCallback+0x90>
        float d = (float)adc_dma_buffer[i] - bias;
 800b164:	4a1e      	ldr	r2, [pc, #120]	; (800b1e0 <HAL_ADC_ConvCpltCallback+0xd4>)
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b16c:	ee07 3a90 	vmov	s15, r3
 800b170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b174:	edd7 7a05 	vldr	s15, [r7, #20]
 800b178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b17c:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_sq += (uint32_t)(d * d);
 800b180:	edd7 7a03 	vldr	s15, [r7, #12]
 800b184:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b18c:	ee17 2a90 	vmov	r2, s15
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	4413      	add	r3, r2
 800b194:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	3301      	adds	r3, #1
 800b19a:	61bb      	str	r3, [r7, #24]
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	2bff      	cmp	r3, #255	; 0xff
 800b1a0:	dde0      	ble.n	800b164 <HAL_ADC_ConvCpltCallback+0x58>
    }

    // 3) RMS = sqrt(mean of squares)
    float rms = sqrtf((float)sum_sq / (float)ADC_BUFFER_SIZE);
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	ee07 3a90 	vmov	s15, r3
 800b1a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ac:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b1e4 <HAL_ADC_ConvCpltCallback+0xd8>
 800b1b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b1b4:	eeb0 0a47 	vmov.f32	s0, s14
 800b1b8:	f003 f918 	bl	800e3ec <sqrtf>
 800b1bc:	ed87 0a04 	vstr	s0, [r7, #16]

    // 4) Store raw RMS as your new envelope
    envelope = rms;
 800b1c0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b1c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c8:	ee17 3a90 	vmov	r3, s15
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	4b06      	ldr	r3, [pc, #24]	; (800b1e8 <HAL_ADC_ConvCpltCallback+0xdc>)
 800b1d0:	801a      	strh	r2, [r3, #0]
 800b1d2:	e000      	b.n	800b1d6 <HAL_ADC_ConvCpltCallback+0xca>
    if (hadc->Instance != ADC1) return;
 800b1d4:	bf00      	nop
}
 800b1d6:	3728      	adds	r7, #40	; 0x28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	40012000 	.word	0x40012000
 800b1e0:	20000374 	.word	0x20000374
 800b1e4:	43800000 	.word	0x43800000
 800b1e8:	20000574 	.word	0x20000574

0800b1ec <eeprom_init>:
#include <stdio.h>
#include "debug_uart.h"

// ——— Initialize EEPROM and thresholds ———
bool eeprom_init(void)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
    uint8_t sig;
    // 1) Read the stored signature byte
    if (!eeprom_read(EEPROM_SIGNATURE_ADDR, &sig, 1)) {
 800b1f2:	f107 030f 	add.w	r3, r7, #15
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	f000 fc3a 	bl	800ba74 <eeprom_read>
 800b200:	4603      	mov	r3, r0
 800b202:	f083 0301 	eor.w	r3, r3, #1
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d001      	beq.n	800b210 <eeprom_init+0x24>
        return false;
 800b20c:	2300      	movs	r3, #0
 800b20e:	e038      	b.n	800b282 <eeprom_init+0x96>
    }

    // 2) If signature mismatches, first‑time setup
    if (sig != EEPROM_SIGNATURE_VALUE) {
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	2ba5      	cmp	r3, #165	; 0xa5
 800b214:	d034      	beq.n	800b280 <eeprom_init+0x94>
        // ─── Write signature + default thresholds ───
        uint8_t buf[1 + 2*2];
        buf[0] = EEPROM_SIGNATURE_VALUE;
 800b216:	23a5      	movs	r3, #165	; 0xa5
 800b218:	723b      	strb	r3, [r7, #8]
        buf[1] = (uint8_t)(DEFAULT_THRESHOLD_LOW  & 0xFF);
 800b21a:	230a      	movs	r3, #10
 800b21c:	727b      	strb	r3, [r7, #9]
        buf[2] = (uint8_t)(DEFAULT_THRESHOLD_LOW >> 8);
 800b21e:	2300      	movs	r3, #0
 800b220:	72bb      	strb	r3, [r7, #10]
        buf[3] = (uint8_t)(DEFAULT_THRESHOLD_HIGH & 0xFF);
 800b222:	2314      	movs	r3, #20
 800b224:	72fb      	strb	r3, [r7, #11]
        buf[4] = (uint8_t)(DEFAULT_THRESHOLD_HIGH >> 8);
 800b226:	2300      	movs	r3, #0
 800b228:	733b      	strb	r3, [r7, #12]

        if (!eeprom_write(EEPROM_SIGNATURE_ADDR, buf, sizeof(buf))) {
 800b22a:	f107 0308 	add.w	r3, r7, #8
 800b22e:	2205      	movs	r2, #5
 800b230:	4619      	mov	r1, r3
 800b232:	2000      	movs	r0, #0
 800b234:	f000 fc40 	bl	800bab8 <eeprom_write>
 800b238:	4603      	mov	r3, r0
 800b23a:	f083 0301 	eor.w	r3, r3, #1
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <eeprom_init+0x5c>
            return false;
 800b244:	2300      	movs	r3, #0
 800b246:	e01c      	b.n	800b282 <eeprom_init+0x96>
        }

        // ─── Now zero out the ring‑buffer pointers ───
        uint8_t zero = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	71fb      	strb	r3, [r7, #7]
        if (!eeprom_write(EEPROM_LOG_HEAD_ADDR,  &zero, 1) ||
 800b24c:	1dfb      	adds	r3, r7, #7
 800b24e:	2201      	movs	r2, #1
 800b250:	4619      	mov	r1, r3
 800b252:	200f      	movs	r0, #15
 800b254:	f000 fc30 	bl	800bab8 <eeprom_write>
 800b258:	4603      	mov	r3, r0
 800b25a:	f083 0301 	eor.w	r3, r3, #1
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10b      	bne.n	800b27c <eeprom_init+0x90>
            !eeprom_write(EEPROM_LOG_COUNT_ADDR, &zero, 1))
 800b264:	1dfb      	adds	r3, r7, #7
 800b266:	2201      	movs	r2, #1
 800b268:	4619      	mov	r1, r3
 800b26a:	2010      	movs	r0, #16
 800b26c:	f000 fc24 	bl	800bab8 <eeprom_write>
 800b270:	4603      	mov	r3, r0
 800b272:	f083 0301 	eor.w	r3, r3, #1
 800b276:	b2db      	uxtb	r3, r3
        if (!eeprom_write(EEPROM_LOG_HEAD_ADDR,  &zero, 1) ||
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <eeprom_init+0x94>
        {
            return false;
 800b27c:	2300      	movs	r3, #0
 800b27e:	e000      	b.n	800b282 <eeprom_init+0x96>
        }
    }

    return true;
 800b280:	2301      	movs	r3, #1
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <eeprom_read_thresholds>:

// ——— Read LOW & HIGH thresholds ———
bool eeprom_read_thresholds(uint16_t *low, uint16_t *high)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
    uint8_t buf[2*2];
    if (!eeprom_read(EEPROM_THRESH_ADDR, buf, sizeof(buf))) {
 800b294:	f107 030c 	add.w	r3, r7, #12
 800b298:	2204      	movs	r2, #4
 800b29a:	4619      	mov	r1, r3
 800b29c:	2001      	movs	r0, #1
 800b29e:	f000 fbe9 	bl	800ba74 <eeprom_read>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f083 0301 	eor.w	r3, r3, #1
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <eeprom_read_thresholds+0x28>
        return false;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	e014      	b.n	800b2dc <eeprom_read_thresholds+0x52>
    }
    // Little‑endian unpack
    *low  = (uint16_t)buf[0] | ((uint16_t)buf[1] << 8);
 800b2b2:	7b3b      	ldrb	r3, [r7, #12]
 800b2b4:	b21a      	sxth	r2, r3
 800b2b6:	7b7b      	ldrb	r3, [r7, #13]
 800b2b8:	021b      	lsls	r3, r3, #8
 800b2ba:	b21b      	sxth	r3, r3
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	b21b      	sxth	r3, r3
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	801a      	strh	r2, [r3, #0]
    *high = (uint16_t)buf[2] | ((uint16_t)buf[3] << 8);
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	b21a      	sxth	r2, r3
 800b2ca:	7bfb      	ldrb	r3, [r7, #15]
 800b2cc:	021b      	lsls	r3, r3, #8
 800b2ce:	b21b      	sxth	r3, r3
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	b21b      	sxth	r3, r3
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	801a      	strh	r2, [r3, #0]
    return true;
 800b2da:	2301      	movs	r3, #1
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <eeprom_write_thresholds>:

// ——— Write new LOW & HIGH thresholds ———
bool eeprom_write_thresholds(uint16_t low, uint16_t high)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	460a      	mov	r2, r1
 800b2ee:	80fb      	strh	r3, [r7, #6]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[2*2];
    buf[0] = (uint8_t)(low & 0xFF);
 800b2f4:	88fb      	ldrh	r3, [r7, #6]
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)(low >> 8);
 800b2fa:	88fb      	ldrh	r3, [r7, #6]
 800b2fc:	0a1b      	lsrs	r3, r3, #8
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	b2db      	uxtb	r3, r3
 800b302:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(high & 0xFF);
 800b304:	88bb      	ldrh	r3, [r7, #4]
 800b306:	b2db      	uxtb	r3, r3
 800b308:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t)(high >> 8);
 800b30a:	88bb      	ldrh	r3, [r7, #4]
 800b30c:	0a1b      	lsrs	r3, r3, #8
 800b30e:	b29b      	uxth	r3, r3
 800b310:	b2db      	uxtb	r3, r3
 800b312:	73fb      	strb	r3, [r7, #15]
    return eeprom_write(EEPROM_THRESH_ADDR, buf, sizeof(buf));
 800b314:	f107 030c 	add.w	r3, r7, #12
 800b318:	2204      	movs	r2, #4
 800b31a:	4619      	mov	r1, r3
 800b31c:	2001      	movs	r0, #1
 800b31e:	f000 fbcb 	bl	800bab8 <eeprom_write>
 800b322:	4603      	mov	r3, r0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <eeprom_log_high_event>:

bool eeprom_log_high_event(const eeprom_log_entry_t *evt)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08c      	sub	sp, #48	; 0x30
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
    uint8_t head, count;

    // 1) Read HEAD & COUNT
    eeprom_read(EEPROM_LOG_HEAD_ADDR,  &head,  1);
 800b334:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800b338:	2201      	movs	r2, #1
 800b33a:	4619      	mov	r1, r3
 800b33c:	200f      	movs	r0, #15
 800b33e:	f000 fb99 	bl	800ba74 <eeprom_read>
    eeprom_read(EEPROM_LOG_COUNT_ADDR, &count, 1);
 800b342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b346:	2201      	movs	r2, #1
 800b348:	4619      	mov	r1, r3
 800b34a:	2010      	movs	r0, #16
 800b34c:	f000 fb92 	bl	800ba74 <eeprom_read>
    if (head  >= EEPROM_LOG_MAX_ENTRIES) head  = 0;
 800b350:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b354:	2b09      	cmp	r3, #9
 800b356:	d902      	bls.n	800b35e <eeprom_log_high_event+0x32>
 800b358:	2300      	movs	r3, #0
 800b35a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    if (count >  EEPROM_LOG_MAX_ENTRIES) count = 0;
 800b35e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b362:	2b0a      	cmp	r3, #10
 800b364:	d902      	bls.n	800b36c <eeprom_log_high_event+0x40>
 800b366:	2300      	movs	r3, #0
 800b368:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // 2) Bump COUNT (cap at max)
    if (count < EEPROM_LOG_MAX_ENTRIES) {
 800b36c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b370:	2b09      	cmp	r3, #9
 800b372:	d805      	bhi.n	800b380 <eeprom_log_high_event+0x54>
        count++;
 800b374:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b378:	3301      	adds	r3, #1
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // 3) Write the new entry at slot ‘head’
    uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
                       + (uint16_t)head * EEPROM_LOG_ENTRY_SIZE;
 800b380:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b384:	3304      	adds	r3, #4
    uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
 800b386:	b29b      	uxth	r3, r3
 800b388:	00db      	lsls	r3, r3, #3
 800b38a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (!eeprom_write(slot_addr, (uint8_t*)evt, EEPROM_LOG_ENTRY_SIZE)) {
 800b38c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b38e:	2208      	movs	r2, #8
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	4618      	mov	r0, r3
 800b394:	f000 fb90 	bl	800bab8 <eeprom_write>
 800b398:	4603      	mov	r3, r0
 800b39a:	f083 0301 	eor.w	r3, r3, #1
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d001      	beq.n	800b3a8 <eeprom_log_high_event+0x7c>
        return false;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	e031      	b.n	800b40c <eeprom_log_high_event+0xe0>
    }

    // 4) Advance HEAD (wrap) and store both HEAD & COUNT
    head = (head + 1) % EEPROM_LOG_MAX_ENTRIES;
 800b3a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	4b19      	ldr	r3, [pc, #100]	; (800b414 <eeprom_log_high_event+0xe8>)
 800b3b0:	fb83 1302 	smull	r1, r3, r3, r2
 800b3b4:	1099      	asrs	r1, r3, #2
 800b3b6:	17d3      	asrs	r3, r2, #31
 800b3b8:	1ac9      	subs	r1, r1, r3
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	440b      	add	r3, r1
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	1ad1      	subs	r1, r2, r3
 800b3c4:	b2cb      	uxtb	r3, r1
 800b3c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    eeprom_write(EEPROM_LOG_HEAD_ADDR,  &head,  1);
 800b3ca:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	200f      	movs	r0, #15
 800b3d4:	f000 fb70 	bl	800bab8 <eeprom_write>
    eeprom_write(EEPROM_LOG_COUNT_ADDR, &count, 1);
 800b3d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3dc:	2201      	movs	r2, #1
 800b3de:	4619      	mov	r1, r3
 800b3e0:	2010      	movs	r0, #16
 800b3e2:	f000 fb69 	bl	800bab8 <eeprom_write>

    debug_uart_print("LOG: wrote slot ");
 800b3e6:	480c      	ldr	r0, [pc, #48]	; (800b418 <eeprom_log_high_event+0xec>)
 800b3e8:	f000 f9ac 	bl	800b744 <debug_uart_print>
    char dbg[32];
    sprintf(dbg, "%u, count=%u\r\n", head, count);
 800b3ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b3f6:	f107 000c 	add.w	r0, r7, #12
 800b3fa:	4908      	ldr	r1, [pc, #32]	; (800b41c <eeprom_log_high_event+0xf0>)
 800b3fc:	f001 faa6 	bl	800c94c <siprintf>
    debug_uart_print(dbg);
 800b400:	f107 030c 	add.w	r3, r7, #12
 800b404:	4618      	mov	r0, r3
 800b406:	f000 f99d 	bl	800b744 <debug_uart_print>

    return true;
 800b40a:	2301      	movs	r3, #1
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3730      	adds	r7, #48	; 0x30
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	66666667 	.word	0x66666667
 800b418:	0800e6e4 	.word	0x0800e6e4
 800b41c:	0800e6f8 	.word	0x0800e6f8

0800b420 <eeprom_read_log>:


bool eeprom_read_log(eeprom_log_entry_t *entries,
                     uint8_t max_entries,
                     uint8_t *out_count)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	460b      	mov	r3, r1
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	72fb      	strb	r3, [r7, #11]
    uint8_t head, count;
    // 1) Read HEAD & COUNT
    if (!eeprom_read(EEPROM_LOG_HEAD_ADDR,  &head,  1) ||
 800b42e:	f107 0311 	add.w	r3, r7, #17
 800b432:	2201      	movs	r2, #1
 800b434:	4619      	mov	r1, r3
 800b436:	200f      	movs	r0, #15
 800b438:	f000 fb1c 	bl	800ba74 <eeprom_read>
 800b43c:	4603      	mov	r3, r0
 800b43e:	f083 0301 	eor.w	r3, r3, #1
 800b442:	b2db      	uxtb	r3, r3
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10c      	bne.n	800b462 <eeprom_read_log+0x42>
        !eeprom_read(EEPROM_LOG_COUNT_ADDR, &count, 1))
 800b448:	f107 0310 	add.w	r3, r7, #16
 800b44c:	2201      	movs	r2, #1
 800b44e:	4619      	mov	r1, r3
 800b450:	2010      	movs	r0, #16
 800b452:	f000 fb0f 	bl	800ba74 <eeprom_read>
 800b456:	4603      	mov	r3, r0
 800b458:	f083 0301 	eor.w	r3, r3, #1
 800b45c:	b2db      	uxtb	r3, r3
    if (!eeprom_read(EEPROM_LOG_HEAD_ADDR,  &head,  1) ||
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <eeprom_read_log+0x46>
    {
        return false;
 800b462:	2300      	movs	r3, #0
 800b464:	e054      	b.n	800b510 <eeprom_read_log+0xf0>
    }
    if (head  >= EEPROM_LOG_MAX_ENTRIES) head  = 0;
 800b466:	7c7b      	ldrb	r3, [r7, #17]
 800b468:	2b09      	cmp	r3, #9
 800b46a:	d901      	bls.n	800b470 <eeprom_read_log+0x50>
 800b46c:	2300      	movs	r3, #0
 800b46e:	747b      	strb	r3, [r7, #17]
    if (count >  EEPROM_LOG_MAX_ENTRIES) count = EEPROM_LOG_MAX_ENTRIES;
 800b470:	7c3b      	ldrb	r3, [r7, #16]
 800b472:	2b0a      	cmp	r3, #10
 800b474:	d901      	bls.n	800b47a <eeprom_read_log+0x5a>
 800b476:	230a      	movs	r3, #10
 800b478:	743b      	strb	r3, [r7, #16]
    if (count >  max_entries)          count = max_entries;
 800b47a:	7c3b      	ldrb	r3, [r7, #16]
 800b47c:	7afa      	ldrb	r2, [r7, #11]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d201      	bcs.n	800b486 <eeprom_read_log+0x66>
 800b482:	7afb      	ldrb	r3, [r7, #11]
 800b484:	743b      	strb	r3, [r7, #16]

    // 2) Compute start index = oldest entry
    uint8_t start = (head + EEPROM_LOG_MAX_ENTRIES - count)
 800b486:	7c7b      	ldrb	r3, [r7, #17]
 800b488:	330a      	adds	r3, #10
 800b48a:	7c3a      	ldrb	r2, [r7, #16]
 800b48c:	1a9a      	subs	r2, r3, r2
                  % EEPROM_LOG_MAX_ENTRIES;
 800b48e:	4b22      	ldr	r3, [pc, #136]	; (800b518 <eeprom_read_log+0xf8>)
 800b490:	fb83 1302 	smull	r1, r3, r3, r2
 800b494:	1099      	asrs	r1, r3, #2
 800b496:	17d3      	asrs	r3, r2, #31
 800b498:	1ac9      	subs	r1, r1, r3
 800b49a:	460b      	mov	r3, r1
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	440b      	add	r3, r1
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	1ad1      	subs	r1, r2, r3
    uint8_t start = (head + EEPROM_LOG_MAX_ENTRIES - count)
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	75bb      	strb	r3, [r7, #22]

    // 3) Read ‘count’ slots in order
    for (uint8_t i = 0; i < count; i++) {
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	75fb      	strb	r3, [r7, #23]
 800b4ac:	e028      	b.n	800b500 <eeprom_read_log+0xe0>
        uint8_t idx = (start + i) % EEPROM_LOG_MAX_ENTRIES;
 800b4ae:	7dba      	ldrb	r2, [r7, #22]
 800b4b0:	7dfb      	ldrb	r3, [r7, #23]
 800b4b2:	441a      	add	r2, r3
 800b4b4:	4b18      	ldr	r3, [pc, #96]	; (800b518 <eeprom_read_log+0xf8>)
 800b4b6:	fb83 1302 	smull	r1, r3, r3, r2
 800b4ba:	1099      	asrs	r1, r3, #2
 800b4bc:	17d3      	asrs	r3, r2, #31
 800b4be:	1ac9      	subs	r1, r1, r3
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	440b      	add	r3, r1
 800b4c6:	005b      	lsls	r3, r3, #1
 800b4c8:	1ad1      	subs	r1, r2, r3
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	757b      	strb	r3, [r7, #21]
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
                           + idx * EEPROM_LOG_ENTRY_SIZE;
 800b4ce:	7d7b      	ldrb	r3, [r7, #21]
 800b4d0:	3304      	adds	r3, #4
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	827b      	strh	r3, [r7, #18]
        if (!eeprom_read(slot_addr,
                         (uint8_t*)&entries[i],
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	18d1      	adds	r1, r2, r3
        if (!eeprom_read(slot_addr,
 800b4e0:	8a7b      	ldrh	r3, [r7, #18]
 800b4e2:	2208      	movs	r2, #8
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fac5 	bl	800ba74 <eeprom_read>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f083 0301 	eor.w	r3, r3, #1
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <eeprom_read_log+0xda>
                         EEPROM_LOG_ENTRY_SIZE))
        {
            return false;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	e00a      	b.n	800b510 <eeprom_read_log+0xf0>
    for (uint8_t i = 0; i < count; i++) {
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	75fb      	strb	r3, [r7, #23]
 800b500:	7c3b      	ldrb	r3, [r7, #16]
 800b502:	7dfa      	ldrb	r2, [r7, #23]
 800b504:	429a      	cmp	r2, r3
 800b506:	d3d2      	bcc.n	800b4ae <eeprom_read_log+0x8e>
        }
    }

    *out_count = count;
 800b508:	7c3a      	ldrb	r2, [r7, #16]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	701a      	strb	r2, [r3, #0]
    return true;
 800b50e:	2301      	movs	r3, #1
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	66666667 	.word	0x66666667

0800b51c <bcd2bin>:
#include "rtc.h"
#include "port_rtc.h"

// BCD ↔ BIN helpers
static uint8_t  bcd2bin(uint8_t v) { return (v & 0x0F) + ((v >> 4) * 10); }
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	4603      	mov	r3, r0
 800b524:	71fb      	strb	r3, [r7, #7]
 800b526:	79fb      	ldrb	r3, [r7, #7]
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	091b      	lsrs	r3, r3, #4
 800b532:	b2db      	uxtb	r3, r3
 800b534:	4619      	mov	r1, r3
 800b536:	0089      	lsls	r1, r1, #2
 800b538:	440b      	add	r3, r1
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	4413      	add	r3, r2
 800b540:	b2db      	uxtb	r3, r3
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
	...

0800b550 <bin2bcd>:
static uint8_t  bin2bcd(uint8_t v) { return ((v / 10) << 4) | (v % 10); }
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	4603      	mov	r3, r0
 800b558:	71fb      	strb	r3, [r7, #7]
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	4a0d      	ldr	r2, [pc, #52]	; (800b594 <bin2bcd+0x44>)
 800b55e:	fba2 2303 	umull	r2, r3, r2, r3
 800b562:	08db      	lsrs	r3, r3, #3
 800b564:	b2db      	uxtb	r3, r3
 800b566:	011b      	lsls	r3, r3, #4
 800b568:	b258      	sxtb	r0, r3
 800b56a:	79fa      	ldrb	r2, [r7, #7]
 800b56c:	4b09      	ldr	r3, [pc, #36]	; (800b594 <bin2bcd+0x44>)
 800b56e:	fba3 1302 	umull	r1, r3, r3, r2
 800b572:	08d9      	lsrs	r1, r3, #3
 800b574:	460b      	mov	r3, r1
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	440b      	add	r3, r1
 800b57a:	005b      	lsls	r3, r3, #1
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	b25b      	sxtb	r3, r3
 800b582:	4303      	orrs	r3, r0
 800b584:	b25b      	sxtb	r3, r3
 800b586:	b2db      	uxtb	r3, r3
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	cccccccd 	.word	0xcccccccd

0800b598 <rtc_init>:

static bool     time_set = false;

bool rtc_init(void)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
    port_rtc_init();
 800b59e:	f000 faaf 	bl	800bb00 <port_rtc_init>

    uint8_t sec_reg;
    if (!port_rtc_read(0x00, &sec_reg, 1)) {
 800b5a2:	1dfb      	adds	r3, r7, #7
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	f000 fab1 	bl	800bb10 <port_rtc_read>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	f083 0301 	eor.w	r3, r3, #1
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <rtc_init+0x26>
        return false;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	e008      	b.n	800b5d0 <rtc_init+0x38>
    }
    // CH bit = bit7 of seconds register. If set → clock halted (not init’d)
    time_set = !(sec_reg & 0x80);
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	b25b      	sxtb	r3, r3
 800b5c2:	43db      	mvns	r3, r3
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	09db      	lsrs	r3, r3, #7
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <rtc_init+0x40>)
 800b5cc:	701a      	strb	r2, [r3, #0]
    return true;
 800b5ce:	2301      	movs	r3, #1
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20000576 	.word	0x20000576

0800b5dc <rtc_get_datetime>:
{
    return time_set;
}

bool rtc_get_datetime(rtc_datetime_t *dt)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
    if (!time_set) return false;
 800b5e4:	4b2d      	ldr	r3, [pc, #180]	; (800b69c <rtc_get_datetime+0xc0>)
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	f083 0301 	eor.w	r3, r3, #1
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <rtc_get_datetime+0x1a>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	e04d      	b.n	800b692 <rtc_get_datetime+0xb6>

    uint8_t buf[7];
    if (!port_rtc_read(0x00, buf, 7)) {
 800b5f6:	f107 0308 	add.w	r3, r7, #8
 800b5fa:	2207      	movs	r2, #7
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	2000      	movs	r0, #0
 800b600:	f000 fa86 	bl	800bb10 <port_rtc_read>
 800b604:	4603      	mov	r3, r0
 800b606:	f083 0301 	eor.w	r3, r3, #1
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <rtc_get_datetime+0x38>
        return false;
 800b610:	2300      	movs	r3, #0
 800b612:	e03e      	b.n	800b692 <rtc_get_datetime+0xb6>
    }
    // decode BCD fields
    dt->sec   = bcd2bin(buf[0] & 0x7F);
 800b614:	7a3b      	ldrb	r3, [r7, #8]
 800b616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff ff7d 	bl	800b51c <bcd2bin>
 800b622:	4603      	mov	r3, r0
 800b624:	461a      	mov	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	701a      	strb	r2, [r3, #0]
    dt->min   = bcd2bin(buf[1]);
 800b62a:	7a7b      	ldrb	r3, [r7, #9]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7ff ff75 	bl	800b51c <bcd2bin>
 800b632:	4603      	mov	r3, r0
 800b634:	461a      	mov	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	705a      	strb	r2, [r3, #1]
    dt->hour  = bcd2bin(buf[2] & 0x3F);
 800b63a:	7abb      	ldrb	r3, [r7, #10]
 800b63c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b640:	b2db      	uxtb	r3, r3
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff ff6a 	bl	800b51c <bcd2bin>
 800b648:	4603      	mov	r3, r0
 800b64a:	461a      	mov	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	709a      	strb	r2, [r3, #2]
    dt->day   = bcd2bin(buf[3]);
 800b650:	7afb      	ldrb	r3, [r7, #11]
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff ff62 	bl	800b51c <bcd2bin>
 800b658:	4603      	mov	r3, r0
 800b65a:	461a      	mov	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	70da      	strb	r2, [r3, #3]
    dt->date  = bcd2bin(buf[4]);
 800b660:	7b3b      	ldrb	r3, [r7, #12]
 800b662:	4618      	mov	r0, r3
 800b664:	f7ff ff5a 	bl	800b51c <bcd2bin>
 800b668:	4603      	mov	r3, r0
 800b66a:	461a      	mov	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	711a      	strb	r2, [r3, #4]
    dt->month = bcd2bin(buf[5]);
 800b670:	7b7b      	ldrb	r3, [r7, #13]
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff ff52 	bl	800b51c <bcd2bin>
 800b678:	4603      	mov	r3, r0
 800b67a:	461a      	mov	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	715a      	strb	r2, [r3, #5]
    dt->year  = bcd2bin(buf[6]);
 800b680:	7bbb      	ldrb	r3, [r7, #14]
 800b682:	4618      	mov	r0, r3
 800b684:	f7ff ff4a 	bl	800b51c <bcd2bin>
 800b688:	4603      	mov	r3, r0
 800b68a:	461a      	mov	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	719a      	strb	r2, [r3, #6]
    return true;
 800b690:	2301      	movs	r3, #1
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	20000576 	.word	0x20000576

0800b6a0 <rtc_set_datetime>:

bool rtc_set_datetime(const rtc_datetime_t *dt)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
    uint8_t buf[8];
    // seconds with CH=0 to start oscillator
    buf[0] = bin2bcd(dt->sec) & 0x7F;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff ff4f 	bl	800b550 <bin2bcd>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	723b      	strb	r3, [r7, #8]
    buf[1] = bin2bcd(dt->min);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	785b      	ldrb	r3, [r3, #1]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7ff ff45 	bl	800b550 <bin2bcd>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	727b      	strb	r3, [r7, #9]
    buf[2] = bin2bcd(dt->hour);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	789b      	ldrb	r3, [r3, #2]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff ff3e 	bl	800b550 <bin2bcd>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	72bb      	strb	r3, [r7, #10]
    buf[3] = bin2bcd(dt->day);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	78db      	ldrb	r3, [r3, #3]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7ff ff37 	bl	800b550 <bin2bcd>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	72fb      	strb	r3, [r7, #11]
    buf[4] = bin2bcd(dt->date);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	791b      	ldrb	r3, [r3, #4]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff ff30 	bl	800b550 <bin2bcd>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	733b      	strb	r3, [r7, #12]
    buf[5] = bin2bcd(dt->month);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	795b      	ldrb	r3, [r3, #5]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7ff ff29 	bl	800b550 <bin2bcd>
 800b6fe:	4603      	mov	r3, r0
 800b700:	737b      	strb	r3, [r7, #13]
    buf[6] = bin2bcd(dt->year);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	799b      	ldrb	r3, [r3, #6]
 800b706:	4618      	mov	r0, r3
 800b708:	f7ff ff22 	bl	800b550 <bin2bcd>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73bb      	strb	r3, [r7, #14]
    // write starting at reg 0x00
    if (!port_rtc_write(0x00, buf, 7)) {
 800b710:	f107 0308 	add.w	r3, r7, #8
 800b714:	2207      	movs	r2, #7
 800b716:	4619      	mov	r1, r3
 800b718:	2000      	movs	r0, #0
 800b71a:	f000 fa1b 	bl	800bb54 <port_rtc_write>
 800b71e:	4603      	mov	r3, r0
 800b720:	f083 0301 	eor.w	r3, r3, #1
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <rtc_set_datetime+0x8e>
        return false;
 800b72a:	2300      	movs	r3, #0
 800b72c:	e003      	b.n	800b736 <rtc_set_datetime+0x96>
    }
    time_set = true;
 800b72e:	4b04      	ldr	r3, [pc, #16]	; (800b740 <rtc_set_datetime+0xa0>)
 800b730:	2201      	movs	r2, #1
 800b732:	701a      	strb	r2, [r3, #0]
    return true;
 800b734:	2301      	movs	r3, #1
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	20000576 	.word	0x20000576

0800b744 <debug_uart_print>:
    // In most cases, initialization for UART2 is handled by CubeMX.
    // This function exists for logical consistency.
}

int debug_uart_print(const char* msg)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
    if (msg == 0) {
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d102      	bne.n	800b758 <debug_uart_print+0x14>
        return -1;
 800b752:	f04f 33ff 	mov.w	r3, #4294967295
 800b756:	e011      	b.n	800b77c <debug_uart_print+0x38>
    }

    uint16_t len = (uint16_t)strlen(msg);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7f4 fd63 	bl	8000224 <strlen>
 800b75e:	4603      	mov	r3, r0
 800b760:	81fb      	strh	r3, [r7, #14]
    // Transmit the string over UART2 with a timeout of 100 ms.
    if (HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, 100) == HAL_OK)
 800b762:	89fa      	ldrh	r2, [r7, #14]
 800b764:	2364      	movs	r3, #100	; 0x64
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	4806      	ldr	r0, [pc, #24]	; (800b784 <debug_uart_print+0x40>)
 800b76a:	f7fa ff33 	bl	80065d4 <HAL_UART_Transmit>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <debug_uart_print+0x34>
    {
        return 0;
 800b774:	2300      	movs	r3, #0
 800b776:	e001      	b.n	800b77c <debug_uart_print+0x38>
    }
    return -1;
 800b778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20000310 	.word	0x20000310

0800b788 <usb_cdc_init>:
static char usb_cmd_buffer[USB_CMD_BUFFER_SIZE] = { 0 };

/**
 * @brief Initializes the USB CDC driver.
 */
void usb_cdc_init(void) {
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
	command_pending = false;
 800b78c:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <usb_cdc_init+0x18>)
 800b78e:	2200      	movs	r2, #0
 800b790:	701a      	strb	r2, [r3, #0]
	memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800b792:	2280      	movs	r2, #128	; 0x80
 800b794:	2100      	movs	r1, #0
 800b796:	4803      	ldr	r0, [pc, #12]	; (800b7a4 <usb_cdc_init+0x1c>)
 800b798:	f001 f969 	bl	800ca6e <memset>
}
 800b79c:	bf00      	nop
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20000577 	.word	0x20000577
 800b7a4:	20000578 	.word	0x20000578

0800b7a8 <usb_cdc_receiveCallback>:
 * It copies data into the command buffer and marks a command as pending.
 *
 * @param Buf Pointer to the received data buffer.
 * @param Len Number of bytes received.
 */
void usb_cdc_receiveCallback(uint8_t *Buf, uint32_t Len) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
	debug_uart_print("usb_cdc_receiveCallback()\r\n");
 800b7b2:	481e      	ldr	r0, [pc, #120]	; (800b82c <usb_cdc_receiveCallback+0x84>)
 800b7b4:	f7ff ffc6 	bl	800b744 <debug_uart_print>
	debug_uart_print((char*) Buf);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff ffc3 	bl	800b744 <debug_uart_print>
	debug_uart_print("\r\n");
 800b7be:	481c      	ldr	r0, [pc, #112]	; (800b830 <usb_cdc_receiveCallback+0x88>)
 800b7c0:	f7ff ffc0 	bl	800b744 <debug_uart_print>
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800b7c4:	e002      	b.n	800b7cc <usb_cdc_receiveCallback+0x24>
		Len--;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	603b      	str	r3, [r7, #0]
	while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00d      	beq.n	800b7ee <usb_cdc_receiveCallback+0x46>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	4413      	add	r3, r2
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	2b0d      	cmp	r3, #13
 800b7de:	d0f2      	beq.n	800b7c6 <usb_cdc_receiveCallback+0x1e>
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	2b0a      	cmp	r3, #10
 800b7ec:	d0eb      	beq.n	800b7c6 <usb_cdc_receiveCallback+0x1e>
	}
	if (!command_pending && Len < USB_CMD_BUFFER_SIZE) {
 800b7ee:	4b11      	ldr	r3, [pc, #68]	; (800b834 <usb_cdc_receiveCallback+0x8c>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	f083 0301 	eor.w	r3, r3, #1
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d011      	beq.n	800b822 <usb_cdc_receiveCallback+0x7a>
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	2b7f      	cmp	r3, #127	; 0x7f
 800b802:	d80e      	bhi.n	800b822 <usb_cdc_receiveCallback+0x7a>
		memcpy(usb_cmd_buffer, Buf, Len);
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	480b      	ldr	r0, [pc, #44]	; (800b838 <usb_cdc_receiveCallback+0x90>)
 800b80a:	f001 f9be 	bl	800cb8a <memcpy>
		// Null-terminate the string safely.
		usb_cmd_buffer[Len < USB_CMD_BUFFER_SIZE ? Len : USB_CMD_BUFFER_SIZE - 1] =
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b7f      	cmp	r3, #127	; 0x7f
 800b812:	bf28      	it	cs
 800b814:	237f      	movcs	r3, #127	; 0x7f
 800b816:	4a08      	ldr	r2, [pc, #32]	; (800b838 <usb_cdc_receiveCallback+0x90>)
 800b818:	2100      	movs	r1, #0
 800b81a:	54d1      	strb	r1, [r2, r3]
				'\0';
		command_pending = true;
 800b81c:	4b05      	ldr	r3, [pc, #20]	; (800b834 <usb_cdc_receiveCallback+0x8c>)
 800b81e:	2201      	movs	r2, #1
 800b820:	701a      	strb	r2, [r3, #0]
	}
	// If a command is already pending, new data is discarded.
}
 800b822:	bf00      	nop
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	0800e708 	.word	0x0800e708
 800b830:	0800e724 	.word	0x0800e724
 800b834:	20000577 	.word	0x20000577
 800b838:	20000578 	.word	0x20000578

0800b83c <usb_cdc_isCommandPending>:
/**
 * @brief Checks if there is a pending USB CDC command.
 *
 * @return true if there is a pending command, false otherwise.
 */
bool usb_cdc_isCommandPending(void) {
 800b83c:	b480      	push	{r7}
 800b83e:	af00      	add	r7, sp, #0
	return command_pending;
 800b840:	4b03      	ldr	r3, [pc, #12]	; (800b850 <usb_cdc_isCommandPending+0x14>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	b2db      	uxtb	r3, r3
}
 800b846:	4618      	mov	r0, r3
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	20000577 	.word	0x20000577

0800b854 <usb_cdc_getCommand>:
/**
 * @brief Retrieves the buffered USB CDC command.
 *
 * @return Pointer to the null-terminated command string.
 */
const char* usb_cdc_getCommand(void) {
 800b854:	b480      	push	{r7}
 800b856:	af00      	add	r7, sp, #0
	return usb_cmd_buffer;
 800b858:	4b02      	ldr	r3, [pc, #8]	; (800b864 <usb_cdc_getCommand+0x10>)
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr
 800b864:	20000578 	.word	0x20000578

0800b868 <usb_cdc_clearCommand>:

/**
 * @brief Clears the current USB CDC command.
 */
void usb_cdc_clearCommand(void) {
 800b868:	b580      	push	{r7, lr}
 800b86a:	af00      	add	r7, sp, #0
	command_pending = false;
 800b86c:	4b04      	ldr	r3, [pc, #16]	; (800b880 <usb_cdc_clearCommand+0x18>)
 800b86e:	2200      	movs	r2, #0
 800b870:	701a      	strb	r2, [r3, #0]
	memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800b872:	2280      	movs	r2, #128	; 0x80
 800b874:	2100      	movs	r1, #0
 800b876:	4803      	ldr	r0, [pc, #12]	; (800b884 <usb_cdc_clearCommand+0x1c>)
 800b878:	f001 f8f9 	bl	800ca6e <memset>
}
 800b87c:	bf00      	nop
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	20000577 	.word	0x20000577
 800b884:	20000578 	.word	0x20000578

0800b888 <usb_cdc_sendString>:
 * This function calls the port layer function to actually transmit the data.
 *
 * @param str The null-terminated string to send.
 * @return 0 on success, non-zero on error.
 */
int usb_cdc_sendString(const char *str) {
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t) strlen(str);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7f4 fcc7 	bl	8000224 <strlen>
 800b896:	4603      	mov	r3, r0
 800b898:	81fb      	strh	r3, [r7, #14]
	return port_usb_cdc_transmit((const uint8_t*) str, len);
 800b89a:	89fb      	ldrh	r3, [r7, #14]
 800b89c:	4619      	mov	r1, r3
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f97e 	bl	800bba0 <port_usb_cdc_transmit>
 800b8a4:	4603      	mov	r3, r0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <usb_commands_init>:
#include "debug_uart.h"
#include <string.h>
#include <stdio.h>
#include "rtc.h"

void usb_commands_init(void) {
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	af00      	add	r7, sp, #0
    // Ensure CDC driver is up
    usb_cdc_init();
 800b8b2:	f7ff ff69 	bl	800b788 <usb_cdc_init>
}
 800b8b6:	bf00      	nop
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <usb_commands_pending>:

bool usb_commands_pending(void) {
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	af00      	add	r7, sp, #0
    return usb_cdc_isCommandPending();
 800b8be:	f7ff ffbd 	bl	800b83c <usb_cdc_isCommandPending>
 800b8c2:	4603      	mov	r3, r0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <parse_settime_args>:

static bool parse_settime_args(const char *args, rtc_datetime_t *dt) {
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08e      	sub	sp, #56	; 0x38
 800b8cc:	af04      	add	r7, sp, #16
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
    unsigned int yy, MM, DD, hh, mm, ss;
    int matched = sscanf(args,
 800b8d2:	f107 011c 	add.w	r1, r7, #28
 800b8d6:	f107 0220 	add.w	r2, r7, #32
 800b8da:	f107 030c 	add.w	r3, r7, #12
 800b8de:	9303      	str	r3, [sp, #12]
 800b8e0:	f107 0310 	add.w	r3, r7, #16
 800b8e4:	9302      	str	r3, [sp, #8]
 800b8e6:	f107 0314 	add.w	r3, r7, #20
 800b8ea:	9301      	str	r3, [sp, #4]
 800b8ec:	f107 0318 	add.w	r3, r7, #24
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	4913      	ldr	r1, [pc, #76]	; (800b944 <parse_settime_args+0x7c>)
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f001 f848 	bl	800c98c <siscanf>
 800b8fc:	6278      	str	r0, [r7, #36]	; 0x24
                         "%u %u %u %u %u %u",
                         &yy, &MM, &DD, &hh, &mm, &ss);
    if (matched != 6) {
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b900:	2b06      	cmp	r3, #6
 800b902:	d001      	beq.n	800b908 <parse_settime_args+0x40>
        return false;
 800b904:	2300      	movs	r3, #0
 800b906:	e018      	b.n	800b93a <parse_settime_args+0x72>
    }
    dt->year   = (uint8_t)yy;
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	719a      	strb	r2, [r3, #6]
    dt->month  = (uint8_t)MM;
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	b2da      	uxtb	r2, r3
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	715a      	strb	r2, [r3, #5]
    dt->date   = (uint8_t)DD;
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	711a      	strb	r2, [r3, #4]
    dt->hour   = (uint8_t)hh;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	b2da      	uxtb	r2, r3
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	709a      	strb	r2, [r3, #2]
    dt->min    = (uint8_t)mm;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	705a      	strb	r2, [r3, #1]
    dt->sec    = (uint8_t)ss;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	b2da      	uxtb	r2, r3
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	701a      	strb	r2, [r3, #0]

    return true;
 800b938:	2301      	movs	r3, #1
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3728      	adds	r7, #40	; 0x28
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	0800e728 	.word	0x0800e728

0800b948 <usb_commands_get>:

usb_command_t usb_commands_get(pending_action_t *out) {
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
    const char *cmd = usb_cdc_getCommand();
 800b950:	f7ff ff80 	bl	800b854 <usb_cdc_getCommand>
 800b954:	60f8      	str	r0, [r7, #12]

    // GET_THRESH
    if (strcmp(cmd, USB_CMD_GET_THRESH) == 0) {
 800b956:	492b      	ldr	r1, [pc, #172]	; (800ba04 <usb_commands_get+0xbc>)
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f7f4 fc59 	bl	8000210 <strcmp>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d103      	bne.n	800b96c <usb_commands_get+0x24>
        out->cmd = CMD_GET_THRESH;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	701a      	strb	r2, [r3, #0]
 800b96a:	e043      	b.n	800b9f4 <usb_commands_get+0xac>
    }
    // SET_THRESH L H
    else if (sscanf(cmd, USB_CMD_SET_THRESH " %hu %hu",
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	1c9a      	adds	r2, r3, #2
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3304      	adds	r3, #4
 800b974:	4924      	ldr	r1, [pc, #144]	; (800ba08 <usb_commands_get+0xc0>)
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f001 f808 	bl	800c98c <siscanf>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d103      	bne.n	800b98a <usb_commands_get+0x42>
                    &out->low, &out->high) == 2) {
        out->cmd = CMD_SET_THRESH;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2201      	movs	r2, #1
 800b986:	701a      	strb	r2, [r3, #0]
 800b988:	e034      	b.n	800b9f4 <usb_commands_get+0xac>
    }
    // GET_TIME
    else if (strcmp(cmd, USB_CMD_GET_TIME) == 0) {
 800b98a:	4920      	ldr	r1, [pc, #128]	; (800ba0c <usb_commands_get+0xc4>)
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7f4 fc3f 	bl	8000210 <strcmp>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d103      	bne.n	800b9a0 <usb_commands_get+0x58>
        out->cmd = CMD_GET_TIME;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2202      	movs	r2, #2
 800b99c:	701a      	strb	r2, [r3, #0]
 800b99e:	e029      	b.n	800b9f4 <usb_commands_get+0xac>
    }
    // SET_TIME …delegate to helper…
    else if (strncmp(cmd, USB_CMD_SET_TIME " ", strlen(USB_CMD_SET_TIME) + 1) == 0)
 800b9a0:	2208      	movs	r2, #8
 800b9a2:	491b      	ldr	r1, [pc, #108]	; (800ba10 <usb_commands_get+0xc8>)
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f001 f86a 	bl	800ca7e <strncmp>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d113      	bne.n	800b9d8 <usb_commands_get+0x90>
    {
        const char *args = cmd + strlen(USB_CMD_SET_TIME) + 1;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	60bb      	str	r3, [r7, #8]
        if (parse_settime_args(args, &out->dt)) {
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	3306      	adds	r3, #6
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	68b8      	ldr	r0, [r7, #8]
 800b9be:	f7ff ff83 	bl	800b8c8 <parse_settime_args>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <usb_commands_get+0x88>
            out->cmd = CMD_SET_TIME;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2203      	movs	r2, #3
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	e011      	b.n	800b9f4 <usb_commands_get+0xac>
        } else {
            out->cmd = CMD_HELP;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2205      	movs	r2, #5
 800b9d4:	701a      	strb	r2, [r3, #0]
 800b9d6:	e00d      	b.n	800b9f4 <usb_commands_get+0xac>
        }
    }
    // GET_LOG
    else if (strcmp(cmd, USB_CMD_GET_LOG) == 0) {
 800b9d8:	490e      	ldr	r1, [pc, #56]	; (800ba14 <usb_commands_get+0xcc>)
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f7f4 fc18 	bl	8000210 <strcmp>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d103      	bne.n	800b9ee <usb_commands_get+0xa6>
        out->cmd = CMD_GET_LOG;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2204      	movs	r2, #4
 800b9ea:	701a      	strb	r2, [r3, #0]
 800b9ec:	e002      	b.n	800b9f4 <usb_commands_get+0xac>
    }
    // HELP or unrecognized
    else {
        out->cmd = CMD_HELP;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2205      	movs	r2, #5
 800b9f2:	701a      	strb	r2, [r3, #0]
    }

    usb_cdc_clearCommand();
 800b9f4:	f7ff ff38 	bl	800b868 <usb_cdc_clearCommand>
    return out->cmd;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	0800e73c 	.word	0x0800e73c
 800ba08:	0800e744 	.word	0x0800e744
 800ba0c:	0800e754 	.word	0x0800e754
 800ba10:	0800e75c 	.word	0x0800e75c
 800ba14:	0800e768 	.word	0x0800e768

0800ba18 <usb_commands_print_help>:

void usb_commands_print_help(void) {
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
    usb_cdc_sendString(
 800ba1c:	4802      	ldr	r0, [pc, #8]	; (800ba28 <usb_commands_print_help+0x10>)
 800ba1e:	f7ff ff33 	bl	800b888 <usb_cdc_sendString>
        "  gettime              - Read RTC\r\n"
        "  settime YY MM DD h m s - Set RTC\r\n"
        "  getlog               - Dump event log\r\n"
        "  help                 - Show this message\r\n"
    );
}
 800ba22:	bf00      	nop
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	0800e770 	.word	0x0800e770

0800ba2c <port_ble_init>:
#include <string.h>

extern UART_HandleTypeDef huart1;

bool port_ble_init(void)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	af00      	add	r7, sp, #0
    // If you need to configure any pins manually you can do it here...
    // But HAL_Init and MX_USART1_UART_Init cover it.
    return true;
 800ba30:	2301      	movs	r3, #1
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <port_ble_sendString>:

bool port_ble_sendString(const char *str)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
    size_t len = strlen(str);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7f4 fbed 	bl	8000224 <strlen>
 800ba4a:	60f8      	str	r0, [r7, #12]
    return (HAL_UART_Transmit(&huart1,
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	f04f 33ff 	mov.w	r3, #4294967295
 800ba54:	6879      	ldr	r1, [r7, #4]
 800ba56:	4806      	ldr	r0, [pc, #24]	; (800ba70 <port_ble_sendString+0x34>)
 800ba58:	f7fa fdbc 	bl	80065d4 <HAL_UART_Transmit>
 800ba5c:	4603      	mov	r3, r0
                              (uint8_t*)str,
                              len,
                              HAL_MAX_DELAY) == HAL_OK);
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	bf0c      	ite	eq
 800ba62:	2301      	moveq	r3, #1
 800ba64:	2300      	movne	r3, #0
 800ba66:	b2db      	uxtb	r3, r3
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	200002c8 	.word	0x200002c8

0800ba74 <eeprom_read>:
    // nothing to do: CubeMX already calls HAL_I2C_Init(&hi2c1)
    return true;
}

bool eeprom_read(uint16_t mem_addr, uint8_t *data, uint16_t len)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af04      	add	r7, sp, #16
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	6039      	str	r1, [r7, #0]
 800ba7e:	80fb      	strh	r3, [r7, #6]
 800ba80:	4613      	mov	r3, r2
 800ba82:	80bb      	strh	r3, [r7, #4]
    return (HAL_I2C_Mem_Read(&hi2c1,
 800ba84:	88fa      	ldrh	r2, [r7, #6]
 800ba86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ba8a:	9302      	str	r3, [sp, #8]
 800ba8c:	88bb      	ldrh	r3, [r7, #4]
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	9300      	str	r3, [sp, #0]
 800ba94:	2310      	movs	r3, #16
 800ba96:	21a0      	movs	r1, #160	; 0xa0
 800ba98:	4806      	ldr	r0, [pc, #24]	; (800bab4 <eeprom_read+0x40>)
 800ba9a:	f7f7 f873 	bl	8002b84 <HAL_I2C_Mem_Read>
 800ba9e:	4603      	mov	r3, r0
                             EEPROM_I2C_ADDR,
                             mem_addr,
                             I2C_MEMADD_SIZE_16BIT,
                             data,
                             len,
                             500) == HAL_OK);
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	bf0c      	ite	eq
 800baa4:	2301      	moveq	r3, #1
 800baa6:	2300      	movne	r3, #0
 800baa8:	b2db      	uxtb	r3, r3
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	2000022c 	.word	0x2000022c

0800bab8 <eeprom_write>:

bool eeprom_write(uint16_t mem_addr, const uint8_t *data, uint16_t len)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af04      	add	r7, sp, #16
 800babe:	4603      	mov	r3, r0
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	80fb      	strh	r3, [r7, #6]
 800bac4:	4613      	mov	r3, r2
 800bac6:	80bb      	strh	r3, [r7, #4]
    if (HAL_I2C_Mem_Write(&hi2c1,
 800bac8:	88fa      	ldrh	r2, [r7, #6]
 800baca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bace:	9302      	str	r3, [sp, #8]
 800bad0:	88bb      	ldrh	r3, [r7, #4]
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	9300      	str	r3, [sp, #0]
 800bad8:	2310      	movs	r3, #16
 800bada:	21a0      	movs	r1, #160	; 0xa0
 800badc:	4807      	ldr	r0, [pc, #28]	; (800bafc <eeprom_write+0x44>)
 800bade:	f7f6 ff57 	bl	8002990 <HAL_I2C_Mem_Write>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <eeprom_write+0x34>
                          I2C_MEMADD_SIZE_16BIT,
                          (uint8_t*)data,
                          len,
                          500) != HAL_OK)
    {
        return false;
 800bae8:	2300      	movs	r3, #0
 800baea:	e003      	b.n	800baf4 <eeprom_write+0x3c>
    }
    // wait for the internal write cycle (~5 ms max)
    HAL_Delay(6);
 800baec:	2006      	movs	r0, #6
 800baee:	f7f5 fb0d 	bl	800110c <HAL_Delay>
    return true;
 800baf2:	2301      	movs	r3, #1
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	2000022c 	.word	0x2000022c

0800bb00 <port_rtc_init>:
#define DS1307_ADDR   (0x68 << 1)

extern I2C_HandleTypeDef hi2c1;

bool port_rtc_init(void)
{
 800bb00:	b480      	push	{r7}
 800bb02:	af00      	add	r7, sp, #0
    // nothing extra to do: CubeMX already init’s hi2c1
    return true;
 800bb04:	2301      	movs	r3, #1
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <port_rtc_read>:

bool port_rtc_read(uint8_t reg_addr, uint8_t *buf, uint8_t len)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af04      	add	r7, sp, #16
 800bb16:	4603      	mov	r3, r0
 800bb18:	6039      	str	r1, [r7, #0]
 800bb1a:	71fb      	strb	r3, [r7, #7]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	71bb      	strb	r3, [r7, #6]
    return (HAL_I2C_Mem_Read(&hi2c1,
 800bb20:	79fb      	ldrb	r3, [r7, #7]
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	79bb      	ldrb	r3, [r7, #6]
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	21c8      	movs	r1, #200	; 0xc8
 800bb2a:	9102      	str	r1, [sp, #8]
 800bb2c:	9301      	str	r3, [sp, #4]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	2301      	movs	r3, #1
 800bb34:	21d0      	movs	r1, #208	; 0xd0
 800bb36:	4806      	ldr	r0, [pc, #24]	; (800bb50 <port_rtc_read+0x40>)
 800bb38:	f7f7 f824 	bl	8002b84 <HAL_I2C_Mem_Read>
 800bb3c:	4603      	mov	r3, r0
                             DS1307_ADDR,
                             reg_addr,
                             I2C_MEMADD_SIZE_8BIT,
                             buf,
                             len,
                             200) == HAL_OK);
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	bf0c      	ite	eq
 800bb42:	2301      	moveq	r3, #1
 800bb44:	2300      	movne	r3, #0
 800bb46:	b2db      	uxtb	r3, r3
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	2000022c 	.word	0x2000022c

0800bb54 <port_rtc_write>:

bool port_rtc_write(uint8_t reg_addr, const uint8_t *buf, uint8_t len)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af04      	add	r7, sp, #16
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	6039      	str	r1, [r7, #0]
 800bb5e:	71fb      	strb	r3, [r7, #7]
 800bb60:	4613      	mov	r3, r2
 800bb62:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Mem_Write(&hi2c1,
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	79bb      	ldrb	r3, [r7, #6]
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	21c8      	movs	r1, #200	; 0xc8
 800bb6e:	9102      	str	r1, [sp, #8]
 800bb70:	9301      	str	r3, [sp, #4]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	2301      	movs	r3, #1
 800bb78:	21d0      	movs	r1, #208	; 0xd0
 800bb7a:	4808      	ldr	r0, [pc, #32]	; (800bb9c <port_rtc_write+0x48>)
 800bb7c:	f7f6 ff08 	bl	8002990 <HAL_I2C_Mem_Write>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <port_rtc_write+0x36>
                          reg_addr,
                          I2C_MEMADD_SIZE_8BIT,
                          (uint8_t*)buf,
                          len,
                          200) != HAL_OK) {
        return false;
 800bb86:	2300      	movs	r3, #0
 800bb88:	e003      	b.n	800bb92 <port_rtc_write+0x3e>
    }
    // DS1307 has no internal write‑cycle delay, but a small delay is safe
    HAL_Delay(1);
 800bb8a:	2001      	movs	r0, #1
 800bb8c:	f7f5 fabe 	bl	800110c <HAL_Delay>
    return true;
 800bb90:	2301      	movs	r3, #1
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	2000022c 	.word	0x2000022c

0800bba0 <port_usb_cdc_transmit>:
 * @brief Transmits data over USB CDC.
 *
 * Calls the HAL function CDC_Transmit_FS to send data.
 */
int port_usb_cdc_transmit(const uint8_t *buf, uint16_t len)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	460b      	mov	r3, r1
 800bbaa:	807b      	strh	r3, [r7, #2]
    return CDC_Transmit_FS((uint8_t*)buf, len);
 800bbac:	887b      	ldrh	r3, [r7, #2]
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f8d3 	bl	800bd5c <CDC_Transmit_FS>
 800bbb6:	4603      	mov	r3, r0
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <project_main>:
// === Public variable definitions ================================================================================= //
// === Private variable definitions ================================================================================ //
// === Private function implementation ============================================================================= //
// === Public function implementation ============================================================================== //

void project_main() { app_entry_point(); }
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	f7ff fa80 	bl	800b0c8 <app_entry_point>
 800bbc8:	bf00      	nop
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	4912      	ldr	r1, [pc, #72]	; (800bc1c <MX_USB_DEVICE_Init+0x50>)
 800bbd4:	4812      	ldr	r0, [pc, #72]	; (800bc20 <MX_USB_DEVICE_Init+0x54>)
 800bbd6:	f7fd fcc1 	bl	800955c <USBD_Init>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bbe0:	f7f4 ff46 	bl	8000a70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bbe4:	490f      	ldr	r1, [pc, #60]	; (800bc24 <MX_USB_DEVICE_Init+0x58>)
 800bbe6:	480e      	ldr	r0, [pc, #56]	; (800bc20 <MX_USB_DEVICE_Init+0x54>)
 800bbe8:	f7fd fce8 	bl	80095bc <USBD_RegisterClass>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bbf2:	f7f4 ff3d 	bl	8000a70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bbf6:	490c      	ldr	r1, [pc, #48]	; (800bc28 <MX_USB_DEVICE_Init+0x5c>)
 800bbf8:	4809      	ldr	r0, [pc, #36]	; (800bc20 <MX_USB_DEVICE_Init+0x54>)
 800bbfa:	f7fd fbdf 	bl	80093bc <USBD_CDC_RegisterInterface>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d001      	beq.n	800bc08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc04:	f7f4 ff34 	bl	8000a70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc08:	4805      	ldr	r0, [pc, #20]	; (800bc20 <MX_USB_DEVICE_Init+0x54>)
 800bc0a:	f7fd fd0d 	bl	8009628 <USBD_Start>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc14:	f7f4 ff2c 	bl	8000a70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc18:	bf00      	nop
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	200000ac 	.word	0x200000ac
 800bc20:	200005f8 	.word	0x200005f8
 800bc24:	20000018 	.word	0x20000018
 800bc28:	20000098 	.word	0x20000098

0800bc2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc30:	2200      	movs	r2, #0
 800bc32:	4905      	ldr	r1, [pc, #20]	; (800bc48 <CDC_Init_FS+0x1c>)
 800bc34:	4805      	ldr	r0, [pc, #20]	; (800bc4c <CDC_Init_FS+0x20>)
 800bc36:	f7fd fbdb 	bl	80093f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc3a:	4905      	ldr	r1, [pc, #20]	; (800bc50 <CDC_Init_FS+0x24>)
 800bc3c:	4803      	ldr	r0, [pc, #12]	; (800bc4c <CDC_Init_FS+0x20>)
 800bc3e:	f7fd fbf9 	bl	8009434 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	200010d4 	.word	0x200010d4
 800bc4c:	200005f8 	.word	0x200005f8
 800bc50:	200008d4 	.word	0x200008d4

0800bc54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	6039      	str	r1, [r7, #0]
 800bc6e:	71fb      	strb	r3, [r7, #7]
 800bc70:	4613      	mov	r3, r2
 800bc72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc74:	79fb      	ldrb	r3, [r7, #7]
 800bc76:	2b23      	cmp	r3, #35	; 0x23
 800bc78:	d84a      	bhi.n	800bd10 <CDC_Control_FS+0xac>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <CDC_Control_FS+0x1c>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bd11 	.word	0x0800bd11
 800bc84:	0800bd11 	.word	0x0800bd11
 800bc88:	0800bd11 	.word	0x0800bd11
 800bc8c:	0800bd11 	.word	0x0800bd11
 800bc90:	0800bd11 	.word	0x0800bd11
 800bc94:	0800bd11 	.word	0x0800bd11
 800bc98:	0800bd11 	.word	0x0800bd11
 800bc9c:	0800bd11 	.word	0x0800bd11
 800bca0:	0800bd11 	.word	0x0800bd11
 800bca4:	0800bd11 	.word	0x0800bd11
 800bca8:	0800bd11 	.word	0x0800bd11
 800bcac:	0800bd11 	.word	0x0800bd11
 800bcb0:	0800bd11 	.word	0x0800bd11
 800bcb4:	0800bd11 	.word	0x0800bd11
 800bcb8:	0800bd11 	.word	0x0800bd11
 800bcbc:	0800bd11 	.word	0x0800bd11
 800bcc0:	0800bd11 	.word	0x0800bd11
 800bcc4:	0800bd11 	.word	0x0800bd11
 800bcc8:	0800bd11 	.word	0x0800bd11
 800bccc:	0800bd11 	.word	0x0800bd11
 800bcd0:	0800bd11 	.word	0x0800bd11
 800bcd4:	0800bd11 	.word	0x0800bd11
 800bcd8:	0800bd11 	.word	0x0800bd11
 800bcdc:	0800bd11 	.word	0x0800bd11
 800bce0:	0800bd11 	.word	0x0800bd11
 800bce4:	0800bd11 	.word	0x0800bd11
 800bce8:	0800bd11 	.word	0x0800bd11
 800bcec:	0800bd11 	.word	0x0800bd11
 800bcf0:	0800bd11 	.word	0x0800bd11
 800bcf4:	0800bd11 	.word	0x0800bd11
 800bcf8:	0800bd11 	.word	0x0800bd11
 800bcfc:	0800bd11 	.word	0x0800bd11
 800bd00:	0800bd11 	.word	0x0800bd11
 800bd04:	0800bd11 	.word	0x0800bd11
 800bd08:	0800bd11 	.word	0x0800bd11
 800bd0c:	0800bd11 	.word	0x0800bd11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd10:	bf00      	nop
  }

  return (USBD_OK);
 800bd12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > 0) {
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d005      	beq.n	800bd3e <CDC_Receive_FS+0x1e>
	    usb_cdc_receiveCallback(Buf, *Len);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4619      	mov	r1, r3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7ff fd35 	bl	800b7a8 <usb_cdc_receiveCallback>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	4805      	ldr	r0, [pc, #20]	; (800bd58 <CDC_Receive_FS+0x38>)
 800bd42:	f7fd fb77 	bl	8009434 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd46:	4804      	ldr	r0, [pc, #16]	; (800bd58 <CDC_Receive_FS+0x38>)
 800bd48:	f7fd fbd2 	bl	80094f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	200005f8 	.word	0x200005f8

0800bd5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd6c:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <CDC_Transmit_FS+0x48>)
 800bd6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d001      	beq.n	800bd82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e00b      	b.n	800bd9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd82:	887b      	ldrh	r3, [r7, #2]
 800bd84:	461a      	mov	r2, r3
 800bd86:	6879      	ldr	r1, [r7, #4]
 800bd88:	4806      	ldr	r0, [pc, #24]	; (800bda4 <CDC_Transmit_FS+0x48>)
 800bd8a:	f7fd fb31 	bl	80093f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd8e:	4805      	ldr	r0, [pc, #20]	; (800bda4 <CDC_Transmit_FS+0x48>)
 800bd90:	f7fd fb6e 	bl	8009470 <USBD_CDC_TransmitPacket>
 800bd94:	4603      	mov	r3, r0
 800bd96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	200005f8 	.word	0x200005f8

0800bda8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bdba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	371c      	adds	r7, #28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
	...

0800bdcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	6039      	str	r1, [r7, #0]
 800bdd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2212      	movs	r2, #18
 800bddc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdde:	4b03      	ldr	r3, [pc, #12]	; (800bdec <USBD_FS_DeviceDescriptor+0x20>)
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	200000cc 	.word	0x200000cc

0800bdf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	6039      	str	r1, [r7, #0]
 800bdfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	2204      	movs	r2, #4
 800be00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be02:	4b03      	ldr	r3, [pc, #12]	; (800be10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	200000ec 	.word	0x200000ec

0800be14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be20:	79fb      	ldrb	r3, [r7, #7]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d105      	bne.n	800be32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4907      	ldr	r1, [pc, #28]	; (800be48 <USBD_FS_ProductStrDescriptor+0x34>)
 800be2a:	4808      	ldr	r0, [pc, #32]	; (800be4c <USBD_FS_ProductStrDescriptor+0x38>)
 800be2c:	f7fe fdd8 	bl	800a9e0 <USBD_GetString>
 800be30:	e004      	b.n	800be3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	4904      	ldr	r1, [pc, #16]	; (800be48 <USBD_FS_ProductStrDescriptor+0x34>)
 800be36:	4805      	ldr	r0, [pc, #20]	; (800be4c <USBD_FS_ProductStrDescriptor+0x38>)
 800be38:	f7fe fdd2 	bl	800a9e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be3c:	4b02      	ldr	r3, [pc, #8]	; (800be48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	200018d4 	.word	0x200018d4
 800be4c:	0800e86c 	.word	0x0800e86c

0800be50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	6039      	str	r1, [r7, #0]
 800be5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	4904      	ldr	r1, [pc, #16]	; (800be70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be60:	4804      	ldr	r0, [pc, #16]	; (800be74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be62:	f7fe fdbd 	bl	800a9e0 <USBD_GetString>
  return USBD_StrDesc;
 800be66:	4b02      	ldr	r3, [pc, #8]	; (800be70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	200018d4 	.word	0x200018d4
 800be74:	0800e884 	.word	0x0800e884

0800be78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	6039      	str	r1, [r7, #0]
 800be82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	221a      	movs	r2, #26
 800be88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be8a:	f000 f855 	bl	800bf38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be8e:	4b02      	ldr	r3, [pc, #8]	; (800be98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	200000f0 	.word	0x200000f0

0800be9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	6039      	str	r1, [r7, #0]
 800bea6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beae:	683a      	ldr	r2, [r7, #0]
 800beb0:	4907      	ldr	r1, [pc, #28]	; (800bed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800beb2:	4808      	ldr	r0, [pc, #32]	; (800bed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800beb4:	f7fe fd94 	bl	800a9e0 <USBD_GetString>
 800beb8:	e004      	b.n	800bec4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4904      	ldr	r1, [pc, #16]	; (800bed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bebe:	4805      	ldr	r0, [pc, #20]	; (800bed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bec0:	f7fe fd8e 	bl	800a9e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bec4:	4b02      	ldr	r3, [pc, #8]	; (800bed0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	200018d4 	.word	0x200018d4
 800bed4:	0800e898 	.word	0x0800e898

0800bed8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	6039      	str	r1, [r7, #0]
 800bee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d105      	bne.n	800bef6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4907      	ldr	r1, [pc, #28]	; (800bf0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beee:	4808      	ldr	r0, [pc, #32]	; (800bf10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bef0:	f7fe fd76 	bl	800a9e0 <USBD_GetString>
 800bef4:	e004      	b.n	800bf00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4904      	ldr	r1, [pc, #16]	; (800bf0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800befa:	4805      	ldr	r0, [pc, #20]	; (800bf10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800befc:	f7fe fd70 	bl	800a9e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf00:	4b02      	ldr	r3, [pc, #8]	; (800bf0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	200018d4 	.word	0x200018d4
 800bf10:	0800e8a4 	.word	0x0800e8a4

0800bf14 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	6039      	str	r1, [r7, #0]
 800bf1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	220c      	movs	r2, #12
 800bf24:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bf26:	4b03      	ldr	r3, [pc, #12]	; (800bf34 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr
 800bf34:	200000e0 	.word	0x200000e0

0800bf38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf3e:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <Get_SerialNum+0x44>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf44:	4b0e      	ldr	r3, [pc, #56]	; (800bf80 <Get_SerialNum+0x48>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf4a:	4b0e      	ldr	r3, [pc, #56]	; (800bf84 <Get_SerialNum+0x4c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4413      	add	r3, r2
 800bf56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d009      	beq.n	800bf72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf5e:	2208      	movs	r2, #8
 800bf60:	4909      	ldr	r1, [pc, #36]	; (800bf88 <Get_SerialNum+0x50>)
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 f814 	bl	800bf90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf68:	2204      	movs	r2, #4
 800bf6a:	4908      	ldr	r1, [pc, #32]	; (800bf8c <Get_SerialNum+0x54>)
 800bf6c:	68b8      	ldr	r0, [r7, #8]
 800bf6e:	f000 f80f 	bl	800bf90 <IntToUnicode>
  }
}
 800bf72:	bf00      	nop
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	1fff7a10 	.word	0x1fff7a10
 800bf80:	1fff7a14 	.word	0x1fff7a14
 800bf84:	1fff7a18 	.word	0x1fff7a18
 800bf88:	200000f2 	.word	0x200000f2
 800bf8c:	20000102 	.word	0x20000102

0800bf90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b087      	sub	sp, #28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	75fb      	strb	r3, [r7, #23]
 800bfa6:	e027      	b.n	800bff8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	0f1b      	lsrs	r3, r3, #28
 800bfac:	2b09      	cmp	r3, #9
 800bfae:	d80b      	bhi.n	800bfc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	0f1b      	lsrs	r3, r3, #28
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	4619      	mov	r1, r3
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	440b      	add	r3, r1
 800bfc0:	3230      	adds	r2, #48	; 0x30
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	701a      	strb	r2, [r3, #0]
 800bfc6:	e00a      	b.n	800bfde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	0f1b      	lsrs	r3, r3, #28
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	4619      	mov	r1, r3
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	440b      	add	r3, r1
 800bfd8:	3237      	adds	r2, #55	; 0x37
 800bfda:	b2d2      	uxtb	r2, r2
 800bfdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	011b      	lsls	r3, r3, #4
 800bfe2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bfe4:	7dfb      	ldrb	r3, [r7, #23]
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	3301      	adds	r3, #1
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	4413      	add	r3, r2
 800bfee:	2200      	movs	r2, #0
 800bff0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
 800bff4:	3301      	adds	r3, #1
 800bff6:	75fb      	strb	r3, [r7, #23]
 800bff8:	7dfa      	ldrb	r2, [r7, #23]
 800bffa:	79fb      	ldrb	r3, [r7, #7]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d3d3      	bcc.n	800bfa8 <IntToUnicode+0x18>
  }
}
 800c000:	bf00      	nop
 800c002:	bf00      	nop
 800c004:	371c      	adds	r7, #28
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
	...

0800c010 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b0a0      	sub	sp, #128	; 0x80
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c018:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c01c:	2200      	movs	r2, #0
 800c01e:	601a      	str	r2, [r3, #0]
 800c020:	605a      	str	r2, [r3, #4]
 800c022:	609a      	str	r2, [r3, #8]
 800c024:	60da      	str	r2, [r3, #12]
 800c026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c028:	f107 0310 	add.w	r3, r7, #16
 800c02c:	225c      	movs	r2, #92	; 0x5c
 800c02e:	2100      	movs	r1, #0
 800c030:	4618      	mov	r0, r3
 800c032:	f000 fd1c 	bl	800ca6e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c03e:	d149      	bne.n	800c0d4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c040:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c044:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c046:	2300      	movs	r3, #0
 800c048:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c04a:	f107 0310 	add.w	r3, r7, #16
 800c04e:	4618      	mov	r0, r3
 800c050:	f7f8 ff36 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c05a:	f7f4 fd09 	bl	8000a70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c05e:	2300      	movs	r3, #0
 800c060:	60fb      	str	r3, [r7, #12]
 800c062:	4b1e      	ldr	r3, [pc, #120]	; (800c0dc <HAL_PCD_MspInit+0xcc>)
 800c064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c066:	4a1d      	ldr	r2, [pc, #116]	; (800c0dc <HAL_PCD_MspInit+0xcc>)
 800c068:	f043 0301 	orr.w	r3, r3, #1
 800c06c:	6313      	str	r3, [r2, #48]	; 0x30
 800c06e:	4b1b      	ldr	r3, [pc, #108]	; (800c0dc <HAL_PCD_MspInit+0xcc>)
 800c070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c07a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c07e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c080:	2302      	movs	r3, #2
 800c082:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c084:	2300      	movs	r3, #0
 800c086:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c088:	2303      	movs	r3, #3
 800c08a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c08c:	230a      	movs	r3, #10
 800c08e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c090:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c094:	4619      	mov	r1, r3
 800c096:	4812      	ldr	r0, [pc, #72]	; (800c0e0 <HAL_PCD_MspInit+0xd0>)
 800c098:	f7f6 f988 	bl	80023ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c09c:	4b0f      	ldr	r3, [pc, #60]	; (800c0dc <HAL_PCD_MspInit+0xcc>)
 800c09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a0:	4a0e      	ldr	r2, [pc, #56]	; (800c0dc <HAL_PCD_MspInit+0xcc>)
 800c0a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0a6:	6353      	str	r3, [r2, #52]	; 0x34
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60bb      	str	r3, [r7, #8]
 800c0ac:	4b0b      	ldr	r3, [pc, #44]	; (800c0dc <HAL_PCD_MspInit+0xcc>)
 800c0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0b0:	4a0a      	ldr	r2, [pc, #40]	; (800c0dc <HAL_PCD_MspInit+0xcc>)
 800c0b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0b6:	6453      	str	r3, [r2, #68]	; 0x44
 800c0b8:	4b08      	ldr	r3, [pc, #32]	; (800c0dc <HAL_PCD_MspInit+0xcc>)
 800c0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0c0:	60bb      	str	r3, [r7, #8]
 800c0c2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	2043      	movs	r0, #67	; 0x43
 800c0ca:	f7f5 fd36 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c0ce:	2043      	movs	r0, #67	; 0x43
 800c0d0:	f7f5 fd4f 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c0d4:	bf00      	nop
 800c0d6:	3780      	adds	r7, #128	; 0x80
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	40023800 	.word	0x40023800
 800c0e0:	40020000 	.word	0x40020000

0800c0e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f7fd fae1 	bl	80096c2 <USBD_LL_SetupStage>
}
 800c100:	bf00      	nop
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	460b      	mov	r3, r1
 800c112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800c11a:	78fa      	ldrb	r2, [r7, #3]
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	4613      	mov	r3, r2
 800c120:	00db      	lsls	r3, r3, #3
 800c122:	4413      	add	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	440b      	add	r3, r1
 800c128:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	78fb      	ldrb	r3, [r7, #3]
 800c130:	4619      	mov	r1, r3
 800c132:	f7fd fb1b 	bl	800976c <USBD_LL_DataOutStage>
}
 800c136:	bf00      	nop
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b082      	sub	sp, #8
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	460b      	mov	r3, r1
 800c148:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800c150:	78fa      	ldrb	r2, [r7, #3]
 800c152:	6879      	ldr	r1, [r7, #4]
 800c154:	4613      	mov	r3, r2
 800c156:	00db      	lsls	r3, r3, #3
 800c158:	4413      	add	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	440b      	add	r3, r1
 800c15e:	3320      	adds	r3, #32
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	78fb      	ldrb	r3, [r7, #3]
 800c164:	4619      	mov	r1, r3
 800c166:	f7fd fbb4 	bl	80098d2 <USBD_LL_DataInStage>
}
 800c16a:	bf00      	nop
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b082      	sub	sp, #8
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c180:	4618      	mov	r0, r3
 800c182:	f7fd fcee 	bl	8009b62 <USBD_LL_SOF>
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c196:	2301      	movs	r3, #1
 800c198:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	79db      	ldrb	r3, [r3, #7]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d102      	bne.n	800c1a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]
 800c1a6:	e008      	b.n	800c1ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	79db      	ldrb	r3, [r3, #7]
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d102      	bne.n	800c1b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	73fb      	strb	r3, [r7, #15]
 800c1b4:	e001      	b.n	800c1ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c1b6:	f7f4 fc5b 	bl	8000a70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c1c0:	7bfa      	ldrb	r2, [r7, #15]
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fd fc88 	bl	8009ada <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fd fc30 	bl	8009a36 <USBD_LL_Reset>
}
 800c1d6:	bf00      	nop
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
	...

0800c1e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fd fc83 	bl	8009afa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	6812      	ldr	r2, [r2, #0]
 800c202:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c206:	f043 0301 	orr.w	r3, r3, #1
 800c20a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	7adb      	ldrb	r3, [r3, #11]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d005      	beq.n	800c220 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c214:	4b04      	ldr	r3, [pc, #16]	; (800c228 <HAL_PCD_SuspendCallback+0x48>)
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	4a03      	ldr	r2, [pc, #12]	; (800c228 <HAL_PCD_SuspendCallback+0x48>)
 800c21a:	f043 0306 	orr.w	r3, r3, #6
 800c21e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	e000ed00 	.word	0xe000ed00

0800c22c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fd fc79 	bl	8009b32 <USBD_LL_Resume>
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c25a:	78fa      	ldrb	r2, [r7, #3]
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fd fcd1 	bl	8009c06 <USBD_LL_IsoOUTIncomplete>
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	460b      	mov	r3, r1
 800c276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c27e:	78fa      	ldrb	r2, [r7, #3]
 800c280:	4611      	mov	r1, r2
 800c282:	4618      	mov	r0, r3
 800c284:	f7fd fc8d 	bl	8009ba2 <USBD_LL_IsoINIncomplete>
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fd fce3 	bl	8009c6a <USBD_LL_DevConnected>
}
 800c2a4:	bf00      	nop
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fd fce0 	bl	8009c80 <USBD_LL_DevDisconnected>
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d13c      	bne.n	800c352 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c2d8:	4a20      	ldr	r2, [pc, #128]	; (800c35c <USBD_LL_Init+0x94>)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a1e      	ldr	r2, [pc, #120]	; (800c35c <USBD_LL_Init+0x94>)
 800c2e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2e8:	4b1c      	ldr	r3, [pc, #112]	; (800c35c <USBD_LL_Init+0x94>)
 800c2ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c2ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c2f0:	4b1a      	ldr	r3, [pc, #104]	; (800c35c <USBD_LL_Init+0x94>)
 800c2f2:	2206      	movs	r2, #6
 800c2f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c2f6:	4b19      	ldr	r3, [pc, #100]	; (800c35c <USBD_LL_Init+0x94>)
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2fc:	4b17      	ldr	r3, [pc, #92]	; (800c35c <USBD_LL_Init+0x94>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c302:	4b16      	ldr	r3, [pc, #88]	; (800c35c <USBD_LL_Init+0x94>)
 800c304:	2202      	movs	r2, #2
 800c306:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c308:	4b14      	ldr	r3, [pc, #80]	; (800c35c <USBD_LL_Init+0x94>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c30e:	4b13      	ldr	r3, [pc, #76]	; (800c35c <USBD_LL_Init+0x94>)
 800c310:	2200      	movs	r2, #0
 800c312:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c314:	4b11      	ldr	r3, [pc, #68]	; (800c35c <USBD_LL_Init+0x94>)
 800c316:	2200      	movs	r2, #0
 800c318:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c31a:	4b10      	ldr	r3, [pc, #64]	; (800c35c <USBD_LL_Init+0x94>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c320:	4b0e      	ldr	r3, [pc, #56]	; (800c35c <USBD_LL_Init+0x94>)
 800c322:	2200      	movs	r2, #0
 800c324:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c326:	480d      	ldr	r0, [pc, #52]	; (800c35c <USBD_LL_Init+0x94>)
 800c328:	f7f7 fa12 	bl	8003750 <HAL_PCD_Init>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c332:	f7f4 fb9d 	bl	8000a70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c336:	2180      	movs	r1, #128	; 0x80
 800c338:	4808      	ldr	r0, [pc, #32]	; (800c35c <USBD_LL_Init+0x94>)
 800c33a:	f7f8 fc72 	bl	8004c22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c33e:	2240      	movs	r2, #64	; 0x40
 800c340:	2100      	movs	r1, #0
 800c342:	4806      	ldr	r0, [pc, #24]	; (800c35c <USBD_LL_Init+0x94>)
 800c344:	f7f8 fc26 	bl	8004b94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c348:	2280      	movs	r2, #128	; 0x80
 800c34a:	2101      	movs	r1, #1
 800c34c:	4803      	ldr	r0, [pc, #12]	; (800c35c <USBD_LL_Init+0x94>)
 800c34e:	f7f8 fc21 	bl	8004b94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	20001ad4 	.word	0x20001ad4

0800c360 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c376:	4618      	mov	r0, r3
 800c378:	f7f7 fb00 	bl	800397c <HAL_PCD_Start>
 800c37c:	4603      	mov	r3, r0
 800c37e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	4618      	mov	r0, r3
 800c384:	f000 f990 	bl	800c6a8 <USBD_Get_USB_Status>
 800c388:	4603      	mov	r3, r0
 800c38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b084      	sub	sp, #16
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
 800c39e:	4608      	mov	r0, r1
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	70fb      	strb	r3, [r7, #3]
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	70bb      	strb	r3, [r7, #2]
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3be:	78bb      	ldrb	r3, [r7, #2]
 800c3c0:	883a      	ldrh	r2, [r7, #0]
 800c3c2:	78f9      	ldrb	r1, [r7, #3]
 800c3c4:	f7f8 f801 	bl	80043ca <HAL_PCD_EP_Open>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f96a 	bl	800c6a8 <USBD_Get_USB_Status>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b084      	sub	sp, #16
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3fc:	78fa      	ldrb	r2, [r7, #3]
 800c3fe:	4611      	mov	r1, r2
 800c400:	4618      	mov	r0, r3
 800c402:	f7f8 f84c 	bl	800449e <HAL_PCD_EP_Close>
 800c406:	4603      	mov	r3, r0
 800c408:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 f94b 	bl	800c6a8 <USBD_Get_USB_Status>
 800c412:	4603      	mov	r3, r0
 800c414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c416:	7bbb      	ldrb	r3, [r7, #14]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c430:	2300      	movs	r3, #0
 800c432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c43a:	78fa      	ldrb	r2, [r7, #3]
 800c43c:	4611      	mov	r1, r2
 800c43e:	4618      	mov	r0, r3
 800c440:	f7f8 f904 	bl	800464c <HAL_PCD_EP_SetStall>
 800c444:	4603      	mov	r3, r0
 800c446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 f92c 	bl	800c6a8 <USBD_Get_USB_Status>
 800c450:	4603      	mov	r3, r0
 800c452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c454:	7bbb      	ldrb	r3, [r7, #14]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c478:	78fa      	ldrb	r2, [r7, #3]
 800c47a:	4611      	mov	r1, r2
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7f8 f948 	bl	8004712 <HAL_PCD_EP_ClrStall>
 800c482:	4603      	mov	r3, r0
 800c484:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	4618      	mov	r0, r3
 800c48a:	f000 f90d 	bl	800c6a8 <USBD_Get_USB_Status>
 800c48e:	4603      	mov	r3, r0
 800c490:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c492:	7bbb      	ldrb	r3, [r7, #14]
}
 800c494:	4618      	mov	r0, r3
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c4b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	da0b      	bge.n	800c4d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c4b8:	78fb      	ldrb	r3, [r7, #3]
 800c4ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4be:	68f9      	ldr	r1, [r7, #12]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	440b      	add	r3, r1
 800c4ca:	3316      	adds	r3, #22
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	e00b      	b.n	800c4e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4d6:	68f9      	ldr	r1, [r7, #12]
 800c4d8:	4613      	mov	r3, r2
 800c4da:	00db      	lsls	r3, r3, #3
 800c4dc:	4413      	add	r3, r2
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	440b      	add	r3, r1
 800c4e2:	f203 2356 	addw	r3, r3, #598	; 0x256
 800c4e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c500:	2300      	movs	r3, #0
 800c502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c50e:	78fa      	ldrb	r2, [r7, #3]
 800c510:	4611      	mov	r1, r2
 800c512:	4618      	mov	r0, r3
 800c514:	f7f7 ff35 	bl	8004382 <HAL_PCD_SetAddress>
 800c518:	4603      	mov	r3, r0
 800c51a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c51c:	7bfb      	ldrb	r3, [r7, #15]
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 f8c2 	bl	800c6a8 <USBD_Get_USB_Status>
 800c524:	4603      	mov	r3, r0
 800c526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c528:	7bbb      	ldrb	r3, [r7, #14]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b086      	sub	sp, #24
 800c536:	af00      	add	r7, sp, #0
 800c538:	60f8      	str	r0, [r7, #12]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
 800c53e:	460b      	mov	r3, r1
 800c540:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c542:	2300      	movs	r3, #0
 800c544:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c546:	2300      	movs	r3, #0
 800c548:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c550:	7af9      	ldrb	r1, [r7, #11]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	f7f8 f83f 	bl	80045d8 <HAL_PCD_EP_Transmit>
 800c55a:	4603      	mov	r3, r0
 800c55c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c55e:	7dfb      	ldrb	r3, [r7, #23]
 800c560:	4618      	mov	r0, r3
 800c562:	f000 f8a1 	bl	800c6a8 <USBD_Get_USB_Status>
 800c566:	4603      	mov	r3, r0
 800c568:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c56a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	607a      	str	r2, [r7, #4]
 800c57e:	603b      	str	r3, [r7, #0]
 800c580:	460b      	mov	r3, r1
 800c582:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c584:	2300      	movs	r3, #0
 800c586:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c592:	7af9      	ldrb	r1, [r7, #11]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	f7f7 ffcb 	bl	8004532 <HAL_PCD_EP_Receive>
 800c59c:	4603      	mov	r3, r0
 800c59e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 f880 	bl	800c6a8 <USBD_Get_USB_Status>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5c8:	78fa      	ldrb	r2, [r7, #3]
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7f7 ffeb 	bl	80045a8 <HAL_PCD_EP_GetRxCount>
 800c5d2:	4603      	mov	r3, r0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3708      	adds	r7, #8
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d002      	beq.n	800c5f4 <HAL_PCDEx_LPM_Callback+0x18>
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d01f      	beq.n	800c632 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c5f2:	e03b      	b.n	800c66c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	7adb      	ldrb	r3, [r3, #11]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d007      	beq.n	800c60c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c5fc:	f7f4 f808 	bl	8000610 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c600:	4b1c      	ldr	r3, [pc, #112]	; (800c674 <HAL_PCDEx_LPM_Callback+0x98>)
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	4a1b      	ldr	r2, [pc, #108]	; (800c674 <HAL_PCDEx_LPM_Callback+0x98>)
 800c606:	f023 0306 	bic.w	r3, r3, #6
 800c60a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	6812      	ldr	r2, [r2, #0]
 800c61a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c61e:	f023 0301 	bic.w	r3, r3, #1
 800c622:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fd fa81 	bl	8009b32 <USBD_LL_Resume>
    break;
 800c630:	e01c      	b.n	800c66c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	6812      	ldr	r2, [r2, #0]
 800c640:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c644:	f043 0301 	orr.w	r3, r3, #1
 800c648:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800c650:	4618      	mov	r0, r3
 800c652:	f7fd fa52 	bl	8009afa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	7adb      	ldrb	r3, [r3, #11]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d005      	beq.n	800c66a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c65e:	4b05      	ldr	r3, [pc, #20]	; (800c674 <HAL_PCDEx_LPM_Callback+0x98>)
 800c660:	691b      	ldr	r3, [r3, #16]
 800c662:	4a04      	ldr	r2, [pc, #16]	; (800c674 <HAL_PCDEx_LPM_Callback+0x98>)
 800c664:	f043 0306 	orr.w	r3, r3, #6
 800c668:	6113      	str	r3, [r2, #16]
    break;
 800c66a:	bf00      	nop
}
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	e000ed00 	.word	0xe000ed00

0800c678 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c680:	4b03      	ldr	r3, [pc, #12]	; (800c690 <USBD_static_malloc+0x18>)
}
 800c682:	4618      	mov	r0, r3
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	20001fb8 	.word	0x20001fb8

0800c694 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]

}
 800c69c:	bf00      	nop
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c6b6:	79fb      	ldrb	r3, [r7, #7]
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d817      	bhi.n	800c6ec <USBD_Get_USB_Status+0x44>
 800c6bc:	a201      	add	r2, pc, #4	; (adr r2, 800c6c4 <USBD_Get_USB_Status+0x1c>)
 800c6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c2:	bf00      	nop
 800c6c4:	0800c6d5 	.word	0x0800c6d5
 800c6c8:	0800c6db 	.word	0x0800c6db
 800c6cc:	0800c6e1 	.word	0x0800c6e1
 800c6d0:	0800c6e7 	.word	0x0800c6e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c6d8:	e00b      	b.n	800c6f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c6de:	e008      	b.n	800c6f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c6e4:	e005      	b.n	800c6f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c6ea:	e002      	b.n	800c6f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c6ec:	2303      	movs	r3, #3
 800c6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c6f0:	bf00      	nop
  }
  return usb_status;
 800c6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <__assert_func>:
 800c700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c702:	4614      	mov	r4, r2
 800c704:	461a      	mov	r2, r3
 800c706:	4b09      	ldr	r3, [pc, #36]	; (800c72c <__assert_func+0x2c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4605      	mov	r5, r0
 800c70c:	68d8      	ldr	r0, [r3, #12]
 800c70e:	b14c      	cbz	r4, 800c724 <__assert_func+0x24>
 800c710:	4b07      	ldr	r3, [pc, #28]	; (800c730 <__assert_func+0x30>)
 800c712:	9100      	str	r1, [sp, #0]
 800c714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c718:	4906      	ldr	r1, [pc, #24]	; (800c734 <__assert_func+0x34>)
 800c71a:	462b      	mov	r3, r5
 800c71c:	f000 f8b2 	bl	800c884 <fiprintf>
 800c720:	f000 fa41 	bl	800cba6 <abort>
 800c724:	4b04      	ldr	r3, [pc, #16]	; (800c738 <__assert_func+0x38>)
 800c726:	461c      	mov	r4, r3
 800c728:	e7f3      	b.n	800c712 <__assert_func+0x12>
 800c72a:	bf00      	nop
 800c72c:	20000164 	.word	0x20000164
 800c730:	0800e903 	.word	0x0800e903
 800c734:	0800e910 	.word	0x0800e910
 800c738:	0800e93e 	.word	0x0800e93e

0800c73c <std>:
 800c73c:	2300      	movs	r3, #0
 800c73e:	b510      	push	{r4, lr}
 800c740:	4604      	mov	r4, r0
 800c742:	e9c0 3300 	strd	r3, r3, [r0]
 800c746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c74a:	6083      	str	r3, [r0, #8]
 800c74c:	8181      	strh	r1, [r0, #12]
 800c74e:	6643      	str	r3, [r0, #100]	; 0x64
 800c750:	81c2      	strh	r2, [r0, #14]
 800c752:	6183      	str	r3, [r0, #24]
 800c754:	4619      	mov	r1, r3
 800c756:	2208      	movs	r2, #8
 800c758:	305c      	adds	r0, #92	; 0x5c
 800c75a:	f000 f988 	bl	800ca6e <memset>
 800c75e:	4b0d      	ldr	r3, [pc, #52]	; (800c794 <std+0x58>)
 800c760:	6263      	str	r3, [r4, #36]	; 0x24
 800c762:	4b0d      	ldr	r3, [pc, #52]	; (800c798 <std+0x5c>)
 800c764:	62a3      	str	r3, [r4, #40]	; 0x28
 800c766:	4b0d      	ldr	r3, [pc, #52]	; (800c79c <std+0x60>)
 800c768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c76a:	4b0d      	ldr	r3, [pc, #52]	; (800c7a0 <std+0x64>)
 800c76c:	6323      	str	r3, [r4, #48]	; 0x30
 800c76e:	4b0d      	ldr	r3, [pc, #52]	; (800c7a4 <std+0x68>)
 800c770:	6224      	str	r4, [r4, #32]
 800c772:	429c      	cmp	r4, r3
 800c774:	d006      	beq.n	800c784 <std+0x48>
 800c776:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c77a:	4294      	cmp	r4, r2
 800c77c:	d002      	beq.n	800c784 <std+0x48>
 800c77e:	33d0      	adds	r3, #208	; 0xd0
 800c780:	429c      	cmp	r4, r3
 800c782:	d105      	bne.n	800c790 <std+0x54>
 800c784:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c78c:	f000 b9fa 	b.w	800cb84 <__retarget_lock_init_recursive>
 800c790:	bd10      	pop	{r4, pc}
 800c792:	bf00      	nop
 800c794:	0800c9e5 	.word	0x0800c9e5
 800c798:	0800ca0b 	.word	0x0800ca0b
 800c79c:	0800ca43 	.word	0x0800ca43
 800c7a0:	0800ca67 	.word	0x0800ca67
 800c7a4:	200021d8 	.word	0x200021d8

0800c7a8 <stdio_exit_handler>:
 800c7a8:	4a02      	ldr	r2, [pc, #8]	; (800c7b4 <stdio_exit_handler+0xc>)
 800c7aa:	4903      	ldr	r1, [pc, #12]	; (800c7b8 <stdio_exit_handler+0x10>)
 800c7ac:	4803      	ldr	r0, [pc, #12]	; (800c7bc <stdio_exit_handler+0x14>)
 800c7ae:	f000 b87b 	b.w	800c8a8 <_fwalk_sglue>
 800c7b2:	bf00      	nop
 800c7b4:	2000010c 	.word	0x2000010c
 800c7b8:	0800dd49 	.word	0x0800dd49
 800c7bc:	20000118 	.word	0x20000118

0800c7c0 <cleanup_stdio>:
 800c7c0:	6841      	ldr	r1, [r0, #4]
 800c7c2:	4b0c      	ldr	r3, [pc, #48]	; (800c7f4 <cleanup_stdio+0x34>)
 800c7c4:	4299      	cmp	r1, r3
 800c7c6:	b510      	push	{r4, lr}
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	d001      	beq.n	800c7d0 <cleanup_stdio+0x10>
 800c7cc:	f001 fabc 	bl	800dd48 <_fflush_r>
 800c7d0:	68a1      	ldr	r1, [r4, #8]
 800c7d2:	4b09      	ldr	r3, [pc, #36]	; (800c7f8 <cleanup_stdio+0x38>)
 800c7d4:	4299      	cmp	r1, r3
 800c7d6:	d002      	beq.n	800c7de <cleanup_stdio+0x1e>
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f001 fab5 	bl	800dd48 <_fflush_r>
 800c7de:	68e1      	ldr	r1, [r4, #12]
 800c7e0:	4b06      	ldr	r3, [pc, #24]	; (800c7fc <cleanup_stdio+0x3c>)
 800c7e2:	4299      	cmp	r1, r3
 800c7e4:	d004      	beq.n	800c7f0 <cleanup_stdio+0x30>
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7ec:	f001 baac 	b.w	800dd48 <_fflush_r>
 800c7f0:	bd10      	pop	{r4, pc}
 800c7f2:	bf00      	nop
 800c7f4:	200021d8 	.word	0x200021d8
 800c7f8:	20002240 	.word	0x20002240
 800c7fc:	200022a8 	.word	0x200022a8

0800c800 <global_stdio_init.part.0>:
 800c800:	b510      	push	{r4, lr}
 800c802:	4b0b      	ldr	r3, [pc, #44]	; (800c830 <global_stdio_init.part.0+0x30>)
 800c804:	4c0b      	ldr	r4, [pc, #44]	; (800c834 <global_stdio_init.part.0+0x34>)
 800c806:	4a0c      	ldr	r2, [pc, #48]	; (800c838 <global_stdio_init.part.0+0x38>)
 800c808:	601a      	str	r2, [r3, #0]
 800c80a:	4620      	mov	r0, r4
 800c80c:	2200      	movs	r2, #0
 800c80e:	2104      	movs	r1, #4
 800c810:	f7ff ff94 	bl	800c73c <std>
 800c814:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c818:	2201      	movs	r2, #1
 800c81a:	2109      	movs	r1, #9
 800c81c:	f7ff ff8e 	bl	800c73c <std>
 800c820:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c824:	2202      	movs	r2, #2
 800c826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c82a:	2112      	movs	r1, #18
 800c82c:	f7ff bf86 	b.w	800c73c <std>
 800c830:	20002310 	.word	0x20002310
 800c834:	200021d8 	.word	0x200021d8
 800c838:	0800c7a9 	.word	0x0800c7a9

0800c83c <__sfp_lock_acquire>:
 800c83c:	4801      	ldr	r0, [pc, #4]	; (800c844 <__sfp_lock_acquire+0x8>)
 800c83e:	f000 b9a2 	b.w	800cb86 <__retarget_lock_acquire_recursive>
 800c842:	bf00      	nop
 800c844:	20002319 	.word	0x20002319

0800c848 <__sfp_lock_release>:
 800c848:	4801      	ldr	r0, [pc, #4]	; (800c850 <__sfp_lock_release+0x8>)
 800c84a:	f000 b99d 	b.w	800cb88 <__retarget_lock_release_recursive>
 800c84e:	bf00      	nop
 800c850:	20002319 	.word	0x20002319

0800c854 <__sinit>:
 800c854:	b510      	push	{r4, lr}
 800c856:	4604      	mov	r4, r0
 800c858:	f7ff fff0 	bl	800c83c <__sfp_lock_acquire>
 800c85c:	6a23      	ldr	r3, [r4, #32]
 800c85e:	b11b      	cbz	r3, 800c868 <__sinit+0x14>
 800c860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c864:	f7ff bff0 	b.w	800c848 <__sfp_lock_release>
 800c868:	4b04      	ldr	r3, [pc, #16]	; (800c87c <__sinit+0x28>)
 800c86a:	6223      	str	r3, [r4, #32]
 800c86c:	4b04      	ldr	r3, [pc, #16]	; (800c880 <__sinit+0x2c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1f5      	bne.n	800c860 <__sinit+0xc>
 800c874:	f7ff ffc4 	bl	800c800 <global_stdio_init.part.0>
 800c878:	e7f2      	b.n	800c860 <__sinit+0xc>
 800c87a:	bf00      	nop
 800c87c:	0800c7c1 	.word	0x0800c7c1
 800c880:	20002310 	.word	0x20002310

0800c884 <fiprintf>:
 800c884:	b40e      	push	{r1, r2, r3}
 800c886:	b503      	push	{r0, r1, lr}
 800c888:	4601      	mov	r1, r0
 800c88a:	ab03      	add	r3, sp, #12
 800c88c:	4805      	ldr	r0, [pc, #20]	; (800c8a4 <fiprintf+0x20>)
 800c88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c892:	6800      	ldr	r0, [r0, #0]
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	f000 fdd9 	bl	800d44c <_vfiprintf_r>
 800c89a:	b002      	add	sp, #8
 800c89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8a0:	b003      	add	sp, #12
 800c8a2:	4770      	bx	lr
 800c8a4:	20000164 	.word	0x20000164

0800c8a8 <_fwalk_sglue>:
 800c8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	4688      	mov	r8, r1
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	2600      	movs	r6, #0
 800c8b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8b8:	f1b9 0901 	subs.w	r9, r9, #1
 800c8bc:	d505      	bpl.n	800c8ca <_fwalk_sglue+0x22>
 800c8be:	6824      	ldr	r4, [r4, #0]
 800c8c0:	2c00      	cmp	r4, #0
 800c8c2:	d1f7      	bne.n	800c8b4 <_fwalk_sglue+0xc>
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ca:	89ab      	ldrh	r3, [r5, #12]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d907      	bls.n	800c8e0 <_fwalk_sglue+0x38>
 800c8d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	d003      	beq.n	800c8e0 <_fwalk_sglue+0x38>
 800c8d8:	4629      	mov	r1, r5
 800c8da:	4638      	mov	r0, r7
 800c8dc:	47c0      	blx	r8
 800c8de:	4306      	orrs	r6, r0
 800c8e0:	3568      	adds	r5, #104	; 0x68
 800c8e2:	e7e9      	b.n	800c8b8 <_fwalk_sglue+0x10>

0800c8e4 <sniprintf>:
 800c8e4:	b40c      	push	{r2, r3}
 800c8e6:	b530      	push	{r4, r5, lr}
 800c8e8:	4b17      	ldr	r3, [pc, #92]	; (800c948 <sniprintf+0x64>)
 800c8ea:	1e0c      	subs	r4, r1, #0
 800c8ec:	681d      	ldr	r5, [r3, #0]
 800c8ee:	b09d      	sub	sp, #116	; 0x74
 800c8f0:	da08      	bge.n	800c904 <sniprintf+0x20>
 800c8f2:	238b      	movs	r3, #139	; 0x8b
 800c8f4:	602b      	str	r3, [r5, #0]
 800c8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8fa:	b01d      	add	sp, #116	; 0x74
 800c8fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c900:	b002      	add	sp, #8
 800c902:	4770      	bx	lr
 800c904:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c908:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c90c:	bf14      	ite	ne
 800c90e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c912:	4623      	moveq	r3, r4
 800c914:	9304      	str	r3, [sp, #16]
 800c916:	9307      	str	r3, [sp, #28]
 800c918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c91c:	9002      	str	r0, [sp, #8]
 800c91e:	9006      	str	r0, [sp, #24]
 800c920:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c924:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c926:	ab21      	add	r3, sp, #132	; 0x84
 800c928:	a902      	add	r1, sp, #8
 800c92a:	4628      	mov	r0, r5
 800c92c:	9301      	str	r3, [sp, #4]
 800c92e:	f000 fa93 	bl	800ce58 <_svfiprintf_r>
 800c932:	1c43      	adds	r3, r0, #1
 800c934:	bfbc      	itt	lt
 800c936:	238b      	movlt	r3, #139	; 0x8b
 800c938:	602b      	strlt	r3, [r5, #0]
 800c93a:	2c00      	cmp	r4, #0
 800c93c:	d0dd      	beq.n	800c8fa <sniprintf+0x16>
 800c93e:	9b02      	ldr	r3, [sp, #8]
 800c940:	2200      	movs	r2, #0
 800c942:	701a      	strb	r2, [r3, #0]
 800c944:	e7d9      	b.n	800c8fa <sniprintf+0x16>
 800c946:	bf00      	nop
 800c948:	20000164 	.word	0x20000164

0800c94c <siprintf>:
 800c94c:	b40e      	push	{r1, r2, r3}
 800c94e:	b500      	push	{lr}
 800c950:	b09c      	sub	sp, #112	; 0x70
 800c952:	ab1d      	add	r3, sp, #116	; 0x74
 800c954:	9002      	str	r0, [sp, #8]
 800c956:	9006      	str	r0, [sp, #24]
 800c958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c95c:	4809      	ldr	r0, [pc, #36]	; (800c984 <siprintf+0x38>)
 800c95e:	9107      	str	r1, [sp, #28]
 800c960:	9104      	str	r1, [sp, #16]
 800c962:	4909      	ldr	r1, [pc, #36]	; (800c988 <siprintf+0x3c>)
 800c964:	f853 2b04 	ldr.w	r2, [r3], #4
 800c968:	9105      	str	r1, [sp, #20]
 800c96a:	6800      	ldr	r0, [r0, #0]
 800c96c:	9301      	str	r3, [sp, #4]
 800c96e:	a902      	add	r1, sp, #8
 800c970:	f000 fa72 	bl	800ce58 <_svfiprintf_r>
 800c974:	9b02      	ldr	r3, [sp, #8]
 800c976:	2200      	movs	r2, #0
 800c978:	701a      	strb	r2, [r3, #0]
 800c97a:	b01c      	add	sp, #112	; 0x70
 800c97c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c980:	b003      	add	sp, #12
 800c982:	4770      	bx	lr
 800c984:	20000164 	.word	0x20000164
 800c988:	ffff0208 	.word	0xffff0208

0800c98c <siscanf>:
 800c98c:	b40e      	push	{r1, r2, r3}
 800c98e:	b510      	push	{r4, lr}
 800c990:	b09f      	sub	sp, #124	; 0x7c
 800c992:	ac21      	add	r4, sp, #132	; 0x84
 800c994:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c998:	f854 2b04 	ldr.w	r2, [r4], #4
 800c99c:	9201      	str	r2, [sp, #4]
 800c99e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c9a2:	9004      	str	r0, [sp, #16]
 800c9a4:	9008      	str	r0, [sp, #32]
 800c9a6:	f7f3 fc3d 	bl	8000224 <strlen>
 800c9aa:	4b0c      	ldr	r3, [pc, #48]	; (800c9dc <siscanf+0x50>)
 800c9ac:	9005      	str	r0, [sp, #20]
 800c9ae:	9009      	str	r0, [sp, #36]	; 0x24
 800c9b0:	930d      	str	r3, [sp, #52]	; 0x34
 800c9b2:	480b      	ldr	r0, [pc, #44]	; (800c9e0 <siscanf+0x54>)
 800c9b4:	9a01      	ldr	r2, [sp, #4]
 800c9b6:	6800      	ldr	r0, [r0, #0]
 800c9b8:	9403      	str	r4, [sp, #12]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	9311      	str	r3, [sp, #68]	; 0x44
 800c9be:	9316      	str	r3, [sp, #88]	; 0x58
 800c9c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c9c8:	a904      	add	r1, sp, #16
 800c9ca:	4623      	mov	r3, r4
 800c9cc:	f000 fb9c 	bl	800d108 <__ssvfiscanf_r>
 800c9d0:	b01f      	add	sp, #124	; 0x7c
 800c9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9d6:	b003      	add	sp, #12
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	0800ca07 	.word	0x0800ca07
 800c9e0:	20000164 	.word	0x20000164

0800c9e4 <__sread>:
 800c9e4:	b510      	push	{r4, lr}
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ec:	f000 f87c 	bl	800cae8 <_read_r>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	bfab      	itete	ge
 800c9f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c9f8:	181b      	addge	r3, r3, r0
 800c9fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c9fe:	bfac      	ite	ge
 800ca00:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca02:	81a3      	strhlt	r3, [r4, #12]
 800ca04:	bd10      	pop	{r4, pc}

0800ca06 <__seofread>:
 800ca06:	2000      	movs	r0, #0
 800ca08:	4770      	bx	lr

0800ca0a <__swrite>:
 800ca0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca0e:	461f      	mov	r7, r3
 800ca10:	898b      	ldrh	r3, [r1, #12]
 800ca12:	05db      	lsls	r3, r3, #23
 800ca14:	4605      	mov	r5, r0
 800ca16:	460c      	mov	r4, r1
 800ca18:	4616      	mov	r6, r2
 800ca1a:	d505      	bpl.n	800ca28 <__swrite+0x1e>
 800ca1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca20:	2302      	movs	r3, #2
 800ca22:	2200      	movs	r2, #0
 800ca24:	f000 f84e 	bl	800cac4 <_lseek_r>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca32:	81a3      	strh	r3, [r4, #12]
 800ca34:	4632      	mov	r2, r6
 800ca36:	463b      	mov	r3, r7
 800ca38:	4628      	mov	r0, r5
 800ca3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3e:	f000 b865 	b.w	800cb0c <_write_r>

0800ca42 <__sseek>:
 800ca42:	b510      	push	{r4, lr}
 800ca44:	460c      	mov	r4, r1
 800ca46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca4a:	f000 f83b 	bl	800cac4 <_lseek_r>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	89a3      	ldrh	r3, [r4, #12]
 800ca52:	bf15      	itete	ne
 800ca54:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca5e:	81a3      	strheq	r3, [r4, #12]
 800ca60:	bf18      	it	ne
 800ca62:	81a3      	strhne	r3, [r4, #12]
 800ca64:	bd10      	pop	{r4, pc}

0800ca66 <__sclose>:
 800ca66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca6a:	f000 b81b 	b.w	800caa4 <_close_r>

0800ca6e <memset>:
 800ca6e:	4402      	add	r2, r0
 800ca70:	4603      	mov	r3, r0
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d100      	bne.n	800ca78 <memset+0xa>
 800ca76:	4770      	bx	lr
 800ca78:	f803 1b01 	strb.w	r1, [r3], #1
 800ca7c:	e7f9      	b.n	800ca72 <memset+0x4>

0800ca7e <strncmp>:
 800ca7e:	b510      	push	{r4, lr}
 800ca80:	b16a      	cbz	r2, 800ca9e <strncmp+0x20>
 800ca82:	3901      	subs	r1, #1
 800ca84:	1884      	adds	r4, r0, r2
 800ca86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d103      	bne.n	800ca9a <strncmp+0x1c>
 800ca92:	42a0      	cmp	r0, r4
 800ca94:	d001      	beq.n	800ca9a <strncmp+0x1c>
 800ca96:	2a00      	cmp	r2, #0
 800ca98:	d1f5      	bne.n	800ca86 <strncmp+0x8>
 800ca9a:	1ad0      	subs	r0, r2, r3
 800ca9c:	bd10      	pop	{r4, pc}
 800ca9e:	4610      	mov	r0, r2
 800caa0:	e7fc      	b.n	800ca9c <strncmp+0x1e>
	...

0800caa4 <_close_r>:
 800caa4:	b538      	push	{r3, r4, r5, lr}
 800caa6:	4d06      	ldr	r5, [pc, #24]	; (800cac0 <_close_r+0x1c>)
 800caa8:	2300      	movs	r3, #0
 800caaa:	4604      	mov	r4, r0
 800caac:	4608      	mov	r0, r1
 800caae:	602b      	str	r3, [r5, #0]
 800cab0:	f7f4 fa13 	bl	8000eda <_close>
 800cab4:	1c43      	adds	r3, r0, #1
 800cab6:	d102      	bne.n	800cabe <_close_r+0x1a>
 800cab8:	682b      	ldr	r3, [r5, #0]
 800caba:	b103      	cbz	r3, 800cabe <_close_r+0x1a>
 800cabc:	6023      	str	r3, [r4, #0]
 800cabe:	bd38      	pop	{r3, r4, r5, pc}
 800cac0:	20002314 	.word	0x20002314

0800cac4 <_lseek_r>:
 800cac4:	b538      	push	{r3, r4, r5, lr}
 800cac6:	4d07      	ldr	r5, [pc, #28]	; (800cae4 <_lseek_r+0x20>)
 800cac8:	4604      	mov	r4, r0
 800caca:	4608      	mov	r0, r1
 800cacc:	4611      	mov	r1, r2
 800cace:	2200      	movs	r2, #0
 800cad0:	602a      	str	r2, [r5, #0]
 800cad2:	461a      	mov	r2, r3
 800cad4:	f7f4 fa28 	bl	8000f28 <_lseek>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	d102      	bne.n	800cae2 <_lseek_r+0x1e>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	b103      	cbz	r3, 800cae2 <_lseek_r+0x1e>
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	20002314 	.word	0x20002314

0800cae8 <_read_r>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	4d07      	ldr	r5, [pc, #28]	; (800cb08 <_read_r+0x20>)
 800caec:	4604      	mov	r4, r0
 800caee:	4608      	mov	r0, r1
 800caf0:	4611      	mov	r1, r2
 800caf2:	2200      	movs	r2, #0
 800caf4:	602a      	str	r2, [r5, #0]
 800caf6:	461a      	mov	r2, r3
 800caf8:	f7f4 f9b6 	bl	8000e68 <_read>
 800cafc:	1c43      	adds	r3, r0, #1
 800cafe:	d102      	bne.n	800cb06 <_read_r+0x1e>
 800cb00:	682b      	ldr	r3, [r5, #0]
 800cb02:	b103      	cbz	r3, 800cb06 <_read_r+0x1e>
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	bd38      	pop	{r3, r4, r5, pc}
 800cb08:	20002314 	.word	0x20002314

0800cb0c <_write_r>:
 800cb0c:	b538      	push	{r3, r4, r5, lr}
 800cb0e:	4d07      	ldr	r5, [pc, #28]	; (800cb2c <_write_r+0x20>)
 800cb10:	4604      	mov	r4, r0
 800cb12:	4608      	mov	r0, r1
 800cb14:	4611      	mov	r1, r2
 800cb16:	2200      	movs	r2, #0
 800cb18:	602a      	str	r2, [r5, #0]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	f7f4 f9c1 	bl	8000ea2 <_write>
 800cb20:	1c43      	adds	r3, r0, #1
 800cb22:	d102      	bne.n	800cb2a <_write_r+0x1e>
 800cb24:	682b      	ldr	r3, [r5, #0]
 800cb26:	b103      	cbz	r3, 800cb2a <_write_r+0x1e>
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	bd38      	pop	{r3, r4, r5, pc}
 800cb2c:	20002314 	.word	0x20002314

0800cb30 <__errno>:
 800cb30:	4b01      	ldr	r3, [pc, #4]	; (800cb38 <__errno+0x8>)
 800cb32:	6818      	ldr	r0, [r3, #0]
 800cb34:	4770      	bx	lr
 800cb36:	bf00      	nop
 800cb38:	20000164 	.word	0x20000164

0800cb3c <__libc_init_array>:
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	4d0d      	ldr	r5, [pc, #52]	; (800cb74 <__libc_init_array+0x38>)
 800cb40:	4c0d      	ldr	r4, [pc, #52]	; (800cb78 <__libc_init_array+0x3c>)
 800cb42:	1b64      	subs	r4, r4, r5
 800cb44:	10a4      	asrs	r4, r4, #2
 800cb46:	2600      	movs	r6, #0
 800cb48:	42a6      	cmp	r6, r4
 800cb4a:	d109      	bne.n	800cb60 <__libc_init_array+0x24>
 800cb4c:	4d0b      	ldr	r5, [pc, #44]	; (800cb7c <__libc_init_array+0x40>)
 800cb4e:	4c0c      	ldr	r4, [pc, #48]	; (800cb80 <__libc_init_array+0x44>)
 800cb50:	f001 fc6e 	bl	800e430 <_init>
 800cb54:	1b64      	subs	r4, r4, r5
 800cb56:	10a4      	asrs	r4, r4, #2
 800cb58:	2600      	movs	r6, #0
 800cb5a:	42a6      	cmp	r6, r4
 800cb5c:	d105      	bne.n	800cb6a <__libc_init_array+0x2e>
 800cb5e:	bd70      	pop	{r4, r5, r6, pc}
 800cb60:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb64:	4798      	blx	r3
 800cb66:	3601      	adds	r6, #1
 800cb68:	e7ee      	b.n	800cb48 <__libc_init_array+0xc>
 800cb6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb6e:	4798      	blx	r3
 800cb70:	3601      	adds	r6, #1
 800cb72:	e7f2      	b.n	800cb5a <__libc_init_array+0x1e>
 800cb74:	0800ea98 	.word	0x0800ea98
 800cb78:	0800ea98 	.word	0x0800ea98
 800cb7c:	0800ea98 	.word	0x0800ea98
 800cb80:	0800ea9c 	.word	0x0800ea9c

0800cb84 <__retarget_lock_init_recursive>:
 800cb84:	4770      	bx	lr

0800cb86 <__retarget_lock_acquire_recursive>:
 800cb86:	4770      	bx	lr

0800cb88 <__retarget_lock_release_recursive>:
 800cb88:	4770      	bx	lr

0800cb8a <memcpy>:
 800cb8a:	440a      	add	r2, r1
 800cb8c:	4291      	cmp	r1, r2
 800cb8e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb92:	d100      	bne.n	800cb96 <memcpy+0xc>
 800cb94:	4770      	bx	lr
 800cb96:	b510      	push	{r4, lr}
 800cb98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cba0:	4291      	cmp	r1, r2
 800cba2:	d1f9      	bne.n	800cb98 <memcpy+0xe>
 800cba4:	bd10      	pop	{r4, pc}

0800cba6 <abort>:
 800cba6:	b508      	push	{r3, lr}
 800cba8:	2006      	movs	r0, #6
 800cbaa:	f001 fa3f 	bl	800e02c <raise>
 800cbae:	2001      	movs	r0, #1
 800cbb0:	f7f4 f950 	bl	8000e54 <_exit>

0800cbb4 <_free_r>:
 800cbb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbb6:	2900      	cmp	r1, #0
 800cbb8:	d044      	beq.n	800cc44 <_free_r+0x90>
 800cbba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbbe:	9001      	str	r0, [sp, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f1a1 0404 	sub.w	r4, r1, #4
 800cbc6:	bfb8      	it	lt
 800cbc8:	18e4      	addlt	r4, r4, r3
 800cbca:	f000 f8df 	bl	800cd8c <__malloc_lock>
 800cbce:	4a1e      	ldr	r2, [pc, #120]	; (800cc48 <_free_r+0x94>)
 800cbd0:	9801      	ldr	r0, [sp, #4]
 800cbd2:	6813      	ldr	r3, [r2, #0]
 800cbd4:	b933      	cbnz	r3, 800cbe4 <_free_r+0x30>
 800cbd6:	6063      	str	r3, [r4, #4]
 800cbd8:	6014      	str	r4, [r2, #0]
 800cbda:	b003      	add	sp, #12
 800cbdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbe0:	f000 b8da 	b.w	800cd98 <__malloc_unlock>
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	d908      	bls.n	800cbfa <_free_r+0x46>
 800cbe8:	6825      	ldr	r5, [r4, #0]
 800cbea:	1961      	adds	r1, r4, r5
 800cbec:	428b      	cmp	r3, r1
 800cbee:	bf01      	itttt	eq
 800cbf0:	6819      	ldreq	r1, [r3, #0]
 800cbf2:	685b      	ldreq	r3, [r3, #4]
 800cbf4:	1949      	addeq	r1, r1, r5
 800cbf6:	6021      	streq	r1, [r4, #0]
 800cbf8:	e7ed      	b.n	800cbd6 <_free_r+0x22>
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	b10b      	cbz	r3, 800cc04 <_free_r+0x50>
 800cc00:	42a3      	cmp	r3, r4
 800cc02:	d9fa      	bls.n	800cbfa <_free_r+0x46>
 800cc04:	6811      	ldr	r1, [r2, #0]
 800cc06:	1855      	adds	r5, r2, r1
 800cc08:	42a5      	cmp	r5, r4
 800cc0a:	d10b      	bne.n	800cc24 <_free_r+0x70>
 800cc0c:	6824      	ldr	r4, [r4, #0]
 800cc0e:	4421      	add	r1, r4
 800cc10:	1854      	adds	r4, r2, r1
 800cc12:	42a3      	cmp	r3, r4
 800cc14:	6011      	str	r1, [r2, #0]
 800cc16:	d1e0      	bne.n	800cbda <_free_r+0x26>
 800cc18:	681c      	ldr	r4, [r3, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	6053      	str	r3, [r2, #4]
 800cc1e:	440c      	add	r4, r1
 800cc20:	6014      	str	r4, [r2, #0]
 800cc22:	e7da      	b.n	800cbda <_free_r+0x26>
 800cc24:	d902      	bls.n	800cc2c <_free_r+0x78>
 800cc26:	230c      	movs	r3, #12
 800cc28:	6003      	str	r3, [r0, #0]
 800cc2a:	e7d6      	b.n	800cbda <_free_r+0x26>
 800cc2c:	6825      	ldr	r5, [r4, #0]
 800cc2e:	1961      	adds	r1, r4, r5
 800cc30:	428b      	cmp	r3, r1
 800cc32:	bf04      	itt	eq
 800cc34:	6819      	ldreq	r1, [r3, #0]
 800cc36:	685b      	ldreq	r3, [r3, #4]
 800cc38:	6063      	str	r3, [r4, #4]
 800cc3a:	bf04      	itt	eq
 800cc3c:	1949      	addeq	r1, r1, r5
 800cc3e:	6021      	streq	r1, [r4, #0]
 800cc40:	6054      	str	r4, [r2, #4]
 800cc42:	e7ca      	b.n	800cbda <_free_r+0x26>
 800cc44:	b003      	add	sp, #12
 800cc46:	bd30      	pop	{r4, r5, pc}
 800cc48:	2000231c 	.word	0x2000231c

0800cc4c <sbrk_aligned>:
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	4e0e      	ldr	r6, [pc, #56]	; (800cc88 <sbrk_aligned+0x3c>)
 800cc50:	460c      	mov	r4, r1
 800cc52:	6831      	ldr	r1, [r6, #0]
 800cc54:	4605      	mov	r5, r0
 800cc56:	b911      	cbnz	r1, 800cc5e <sbrk_aligned+0x12>
 800cc58:	f001 fa04 	bl	800e064 <_sbrk_r>
 800cc5c:	6030      	str	r0, [r6, #0]
 800cc5e:	4621      	mov	r1, r4
 800cc60:	4628      	mov	r0, r5
 800cc62:	f001 f9ff 	bl	800e064 <_sbrk_r>
 800cc66:	1c43      	adds	r3, r0, #1
 800cc68:	d00a      	beq.n	800cc80 <sbrk_aligned+0x34>
 800cc6a:	1cc4      	adds	r4, r0, #3
 800cc6c:	f024 0403 	bic.w	r4, r4, #3
 800cc70:	42a0      	cmp	r0, r4
 800cc72:	d007      	beq.n	800cc84 <sbrk_aligned+0x38>
 800cc74:	1a21      	subs	r1, r4, r0
 800cc76:	4628      	mov	r0, r5
 800cc78:	f001 f9f4 	bl	800e064 <_sbrk_r>
 800cc7c:	3001      	adds	r0, #1
 800cc7e:	d101      	bne.n	800cc84 <sbrk_aligned+0x38>
 800cc80:	f04f 34ff 	mov.w	r4, #4294967295
 800cc84:	4620      	mov	r0, r4
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	20002320 	.word	0x20002320

0800cc8c <_malloc_r>:
 800cc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc90:	1ccd      	adds	r5, r1, #3
 800cc92:	f025 0503 	bic.w	r5, r5, #3
 800cc96:	3508      	adds	r5, #8
 800cc98:	2d0c      	cmp	r5, #12
 800cc9a:	bf38      	it	cc
 800cc9c:	250c      	movcc	r5, #12
 800cc9e:	2d00      	cmp	r5, #0
 800cca0:	4607      	mov	r7, r0
 800cca2:	db01      	blt.n	800cca8 <_malloc_r+0x1c>
 800cca4:	42a9      	cmp	r1, r5
 800cca6:	d905      	bls.n	800ccb4 <_malloc_r+0x28>
 800cca8:	230c      	movs	r3, #12
 800ccaa:	603b      	str	r3, [r7, #0]
 800ccac:	2600      	movs	r6, #0
 800ccae:	4630      	mov	r0, r6
 800ccb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd88 <_malloc_r+0xfc>
 800ccb8:	f000 f868 	bl	800cd8c <__malloc_lock>
 800ccbc:	f8d8 3000 	ldr.w	r3, [r8]
 800ccc0:	461c      	mov	r4, r3
 800ccc2:	bb5c      	cbnz	r4, 800cd1c <_malloc_r+0x90>
 800ccc4:	4629      	mov	r1, r5
 800ccc6:	4638      	mov	r0, r7
 800ccc8:	f7ff ffc0 	bl	800cc4c <sbrk_aligned>
 800cccc:	1c43      	adds	r3, r0, #1
 800ccce:	4604      	mov	r4, r0
 800ccd0:	d155      	bne.n	800cd7e <_malloc_r+0xf2>
 800ccd2:	f8d8 4000 	ldr.w	r4, [r8]
 800ccd6:	4626      	mov	r6, r4
 800ccd8:	2e00      	cmp	r6, #0
 800ccda:	d145      	bne.n	800cd68 <_malloc_r+0xdc>
 800ccdc:	2c00      	cmp	r4, #0
 800ccde:	d048      	beq.n	800cd72 <_malloc_r+0xe6>
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	4631      	mov	r1, r6
 800cce4:	4638      	mov	r0, r7
 800cce6:	eb04 0903 	add.w	r9, r4, r3
 800ccea:	f001 f9bb 	bl	800e064 <_sbrk_r>
 800ccee:	4581      	cmp	r9, r0
 800ccf0:	d13f      	bne.n	800cd72 <_malloc_r+0xe6>
 800ccf2:	6821      	ldr	r1, [r4, #0]
 800ccf4:	1a6d      	subs	r5, r5, r1
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	4638      	mov	r0, r7
 800ccfa:	f7ff ffa7 	bl	800cc4c <sbrk_aligned>
 800ccfe:	3001      	adds	r0, #1
 800cd00:	d037      	beq.n	800cd72 <_malloc_r+0xe6>
 800cd02:	6823      	ldr	r3, [r4, #0]
 800cd04:	442b      	add	r3, r5
 800cd06:	6023      	str	r3, [r4, #0]
 800cd08:	f8d8 3000 	ldr.w	r3, [r8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d038      	beq.n	800cd82 <_malloc_r+0xf6>
 800cd10:	685a      	ldr	r2, [r3, #4]
 800cd12:	42a2      	cmp	r2, r4
 800cd14:	d12b      	bne.n	800cd6e <_malloc_r+0xe2>
 800cd16:	2200      	movs	r2, #0
 800cd18:	605a      	str	r2, [r3, #4]
 800cd1a:	e00f      	b.n	800cd3c <_malloc_r+0xb0>
 800cd1c:	6822      	ldr	r2, [r4, #0]
 800cd1e:	1b52      	subs	r2, r2, r5
 800cd20:	d41f      	bmi.n	800cd62 <_malloc_r+0xd6>
 800cd22:	2a0b      	cmp	r2, #11
 800cd24:	d917      	bls.n	800cd56 <_malloc_r+0xca>
 800cd26:	1961      	adds	r1, r4, r5
 800cd28:	42a3      	cmp	r3, r4
 800cd2a:	6025      	str	r5, [r4, #0]
 800cd2c:	bf18      	it	ne
 800cd2e:	6059      	strne	r1, [r3, #4]
 800cd30:	6863      	ldr	r3, [r4, #4]
 800cd32:	bf08      	it	eq
 800cd34:	f8c8 1000 	streq.w	r1, [r8]
 800cd38:	5162      	str	r2, [r4, r5]
 800cd3a:	604b      	str	r3, [r1, #4]
 800cd3c:	4638      	mov	r0, r7
 800cd3e:	f104 060b 	add.w	r6, r4, #11
 800cd42:	f000 f829 	bl	800cd98 <__malloc_unlock>
 800cd46:	f026 0607 	bic.w	r6, r6, #7
 800cd4a:	1d23      	adds	r3, r4, #4
 800cd4c:	1af2      	subs	r2, r6, r3
 800cd4e:	d0ae      	beq.n	800ccae <_malloc_r+0x22>
 800cd50:	1b9b      	subs	r3, r3, r6
 800cd52:	50a3      	str	r3, [r4, r2]
 800cd54:	e7ab      	b.n	800ccae <_malloc_r+0x22>
 800cd56:	42a3      	cmp	r3, r4
 800cd58:	6862      	ldr	r2, [r4, #4]
 800cd5a:	d1dd      	bne.n	800cd18 <_malloc_r+0x8c>
 800cd5c:	f8c8 2000 	str.w	r2, [r8]
 800cd60:	e7ec      	b.n	800cd3c <_malloc_r+0xb0>
 800cd62:	4623      	mov	r3, r4
 800cd64:	6864      	ldr	r4, [r4, #4]
 800cd66:	e7ac      	b.n	800ccc2 <_malloc_r+0x36>
 800cd68:	4634      	mov	r4, r6
 800cd6a:	6876      	ldr	r6, [r6, #4]
 800cd6c:	e7b4      	b.n	800ccd8 <_malloc_r+0x4c>
 800cd6e:	4613      	mov	r3, r2
 800cd70:	e7cc      	b.n	800cd0c <_malloc_r+0x80>
 800cd72:	230c      	movs	r3, #12
 800cd74:	603b      	str	r3, [r7, #0]
 800cd76:	4638      	mov	r0, r7
 800cd78:	f000 f80e 	bl	800cd98 <__malloc_unlock>
 800cd7c:	e797      	b.n	800ccae <_malloc_r+0x22>
 800cd7e:	6025      	str	r5, [r4, #0]
 800cd80:	e7dc      	b.n	800cd3c <_malloc_r+0xb0>
 800cd82:	605b      	str	r3, [r3, #4]
 800cd84:	deff      	udf	#255	; 0xff
 800cd86:	bf00      	nop
 800cd88:	2000231c 	.word	0x2000231c

0800cd8c <__malloc_lock>:
 800cd8c:	4801      	ldr	r0, [pc, #4]	; (800cd94 <__malloc_lock+0x8>)
 800cd8e:	f7ff befa 	b.w	800cb86 <__retarget_lock_acquire_recursive>
 800cd92:	bf00      	nop
 800cd94:	20002318 	.word	0x20002318

0800cd98 <__malloc_unlock>:
 800cd98:	4801      	ldr	r0, [pc, #4]	; (800cda0 <__malloc_unlock+0x8>)
 800cd9a:	f7ff bef5 	b.w	800cb88 <__retarget_lock_release_recursive>
 800cd9e:	bf00      	nop
 800cda0:	20002318 	.word	0x20002318

0800cda4 <__ssputs_r>:
 800cda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda8:	688e      	ldr	r6, [r1, #8]
 800cdaa:	461f      	mov	r7, r3
 800cdac:	42be      	cmp	r6, r7
 800cdae:	680b      	ldr	r3, [r1, #0]
 800cdb0:	4682      	mov	sl, r0
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	4690      	mov	r8, r2
 800cdb6:	d82c      	bhi.n	800ce12 <__ssputs_r+0x6e>
 800cdb8:	898a      	ldrh	r2, [r1, #12]
 800cdba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdbe:	d026      	beq.n	800ce0e <__ssputs_r+0x6a>
 800cdc0:	6965      	ldr	r5, [r4, #20]
 800cdc2:	6909      	ldr	r1, [r1, #16]
 800cdc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdc8:	eba3 0901 	sub.w	r9, r3, r1
 800cdcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdd0:	1c7b      	adds	r3, r7, #1
 800cdd2:	444b      	add	r3, r9
 800cdd4:	106d      	asrs	r5, r5, #1
 800cdd6:	429d      	cmp	r5, r3
 800cdd8:	bf38      	it	cc
 800cdda:	461d      	movcc	r5, r3
 800cddc:	0553      	lsls	r3, r2, #21
 800cdde:	d527      	bpl.n	800ce30 <__ssputs_r+0x8c>
 800cde0:	4629      	mov	r1, r5
 800cde2:	f7ff ff53 	bl	800cc8c <_malloc_r>
 800cde6:	4606      	mov	r6, r0
 800cde8:	b360      	cbz	r0, 800ce44 <__ssputs_r+0xa0>
 800cdea:	6921      	ldr	r1, [r4, #16]
 800cdec:	464a      	mov	r2, r9
 800cdee:	f7ff fecc 	bl	800cb8a <memcpy>
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	6126      	str	r6, [r4, #16]
 800ce00:	6165      	str	r5, [r4, #20]
 800ce02:	444e      	add	r6, r9
 800ce04:	eba5 0509 	sub.w	r5, r5, r9
 800ce08:	6026      	str	r6, [r4, #0]
 800ce0a:	60a5      	str	r5, [r4, #8]
 800ce0c:	463e      	mov	r6, r7
 800ce0e:	42be      	cmp	r6, r7
 800ce10:	d900      	bls.n	800ce14 <__ssputs_r+0x70>
 800ce12:	463e      	mov	r6, r7
 800ce14:	6820      	ldr	r0, [r4, #0]
 800ce16:	4632      	mov	r2, r6
 800ce18:	4641      	mov	r1, r8
 800ce1a:	f001 f8c5 	bl	800dfa8 <memmove>
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	1b9b      	subs	r3, r3, r6
 800ce22:	60a3      	str	r3, [r4, #8]
 800ce24:	6823      	ldr	r3, [r4, #0]
 800ce26:	4433      	add	r3, r6
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce30:	462a      	mov	r2, r5
 800ce32:	f001 f927 	bl	800e084 <_realloc_r>
 800ce36:	4606      	mov	r6, r0
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d1e0      	bne.n	800cdfe <__ssputs_r+0x5a>
 800ce3c:	6921      	ldr	r1, [r4, #16]
 800ce3e:	4650      	mov	r0, sl
 800ce40:	f7ff feb8 	bl	800cbb4 <_free_r>
 800ce44:	230c      	movs	r3, #12
 800ce46:	f8ca 3000 	str.w	r3, [sl]
 800ce4a:	89a3      	ldrh	r3, [r4, #12]
 800ce4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce50:	81a3      	strh	r3, [r4, #12]
 800ce52:	f04f 30ff 	mov.w	r0, #4294967295
 800ce56:	e7e9      	b.n	800ce2c <__ssputs_r+0x88>

0800ce58 <_svfiprintf_r>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	4698      	mov	r8, r3
 800ce5e:	898b      	ldrh	r3, [r1, #12]
 800ce60:	061b      	lsls	r3, r3, #24
 800ce62:	b09d      	sub	sp, #116	; 0x74
 800ce64:	4607      	mov	r7, r0
 800ce66:	460d      	mov	r5, r1
 800ce68:	4614      	mov	r4, r2
 800ce6a:	d50e      	bpl.n	800ce8a <_svfiprintf_r+0x32>
 800ce6c:	690b      	ldr	r3, [r1, #16]
 800ce6e:	b963      	cbnz	r3, 800ce8a <_svfiprintf_r+0x32>
 800ce70:	2140      	movs	r1, #64	; 0x40
 800ce72:	f7ff ff0b 	bl	800cc8c <_malloc_r>
 800ce76:	6028      	str	r0, [r5, #0]
 800ce78:	6128      	str	r0, [r5, #16]
 800ce7a:	b920      	cbnz	r0, 800ce86 <_svfiprintf_r+0x2e>
 800ce7c:	230c      	movs	r3, #12
 800ce7e:	603b      	str	r3, [r7, #0]
 800ce80:	f04f 30ff 	mov.w	r0, #4294967295
 800ce84:	e0d0      	b.n	800d028 <_svfiprintf_r+0x1d0>
 800ce86:	2340      	movs	r3, #64	; 0x40
 800ce88:	616b      	str	r3, [r5, #20]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce8e:	2320      	movs	r3, #32
 800ce90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce98:	2330      	movs	r3, #48	; 0x30
 800ce9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d040 <_svfiprintf_r+0x1e8>
 800ce9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cea2:	f04f 0901 	mov.w	r9, #1
 800cea6:	4623      	mov	r3, r4
 800cea8:	469a      	mov	sl, r3
 800ceaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceae:	b10a      	cbz	r2, 800ceb4 <_svfiprintf_r+0x5c>
 800ceb0:	2a25      	cmp	r2, #37	; 0x25
 800ceb2:	d1f9      	bne.n	800cea8 <_svfiprintf_r+0x50>
 800ceb4:	ebba 0b04 	subs.w	fp, sl, r4
 800ceb8:	d00b      	beq.n	800ced2 <_svfiprintf_r+0x7a>
 800ceba:	465b      	mov	r3, fp
 800cebc:	4622      	mov	r2, r4
 800cebe:	4629      	mov	r1, r5
 800cec0:	4638      	mov	r0, r7
 800cec2:	f7ff ff6f 	bl	800cda4 <__ssputs_r>
 800cec6:	3001      	adds	r0, #1
 800cec8:	f000 80a9 	beq.w	800d01e <_svfiprintf_r+0x1c6>
 800cecc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cece:	445a      	add	r2, fp
 800ced0:	9209      	str	r2, [sp, #36]	; 0x24
 800ced2:	f89a 3000 	ldrb.w	r3, [sl]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f000 80a1 	beq.w	800d01e <_svfiprintf_r+0x1c6>
 800cedc:	2300      	movs	r3, #0
 800cede:	f04f 32ff 	mov.w	r2, #4294967295
 800cee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cee6:	f10a 0a01 	add.w	sl, sl, #1
 800ceea:	9304      	str	r3, [sp, #16]
 800ceec:	9307      	str	r3, [sp, #28]
 800ceee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cef2:	931a      	str	r3, [sp, #104]	; 0x68
 800cef4:	4654      	mov	r4, sl
 800cef6:	2205      	movs	r2, #5
 800cef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cefc:	4850      	ldr	r0, [pc, #320]	; (800d040 <_svfiprintf_r+0x1e8>)
 800cefe:	f7f3 f99f 	bl	8000240 <memchr>
 800cf02:	9a04      	ldr	r2, [sp, #16]
 800cf04:	b9d8      	cbnz	r0, 800cf3e <_svfiprintf_r+0xe6>
 800cf06:	06d0      	lsls	r0, r2, #27
 800cf08:	bf44      	itt	mi
 800cf0a:	2320      	movmi	r3, #32
 800cf0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf10:	0711      	lsls	r1, r2, #28
 800cf12:	bf44      	itt	mi
 800cf14:	232b      	movmi	r3, #43	; 0x2b
 800cf16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf20:	d015      	beq.n	800cf4e <_svfiprintf_r+0xf6>
 800cf22:	9a07      	ldr	r2, [sp, #28]
 800cf24:	4654      	mov	r4, sl
 800cf26:	2000      	movs	r0, #0
 800cf28:	f04f 0c0a 	mov.w	ip, #10
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf32:	3b30      	subs	r3, #48	; 0x30
 800cf34:	2b09      	cmp	r3, #9
 800cf36:	d94d      	bls.n	800cfd4 <_svfiprintf_r+0x17c>
 800cf38:	b1b0      	cbz	r0, 800cf68 <_svfiprintf_r+0x110>
 800cf3a:	9207      	str	r2, [sp, #28]
 800cf3c:	e014      	b.n	800cf68 <_svfiprintf_r+0x110>
 800cf3e:	eba0 0308 	sub.w	r3, r0, r8
 800cf42:	fa09 f303 	lsl.w	r3, r9, r3
 800cf46:	4313      	orrs	r3, r2
 800cf48:	9304      	str	r3, [sp, #16]
 800cf4a:	46a2      	mov	sl, r4
 800cf4c:	e7d2      	b.n	800cef4 <_svfiprintf_r+0x9c>
 800cf4e:	9b03      	ldr	r3, [sp, #12]
 800cf50:	1d19      	adds	r1, r3, #4
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	9103      	str	r1, [sp, #12]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	bfbb      	ittet	lt
 800cf5a:	425b      	neglt	r3, r3
 800cf5c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf60:	9307      	strge	r3, [sp, #28]
 800cf62:	9307      	strlt	r3, [sp, #28]
 800cf64:	bfb8      	it	lt
 800cf66:	9204      	strlt	r2, [sp, #16]
 800cf68:	7823      	ldrb	r3, [r4, #0]
 800cf6a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf6c:	d10c      	bne.n	800cf88 <_svfiprintf_r+0x130>
 800cf6e:	7863      	ldrb	r3, [r4, #1]
 800cf70:	2b2a      	cmp	r3, #42	; 0x2a
 800cf72:	d134      	bne.n	800cfde <_svfiprintf_r+0x186>
 800cf74:	9b03      	ldr	r3, [sp, #12]
 800cf76:	1d1a      	adds	r2, r3, #4
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	9203      	str	r2, [sp, #12]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	bfb8      	it	lt
 800cf80:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf84:	3402      	adds	r4, #2
 800cf86:	9305      	str	r3, [sp, #20]
 800cf88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d050 <_svfiprintf_r+0x1f8>
 800cf8c:	7821      	ldrb	r1, [r4, #0]
 800cf8e:	2203      	movs	r2, #3
 800cf90:	4650      	mov	r0, sl
 800cf92:	f7f3 f955 	bl	8000240 <memchr>
 800cf96:	b138      	cbz	r0, 800cfa8 <_svfiprintf_r+0x150>
 800cf98:	9b04      	ldr	r3, [sp, #16]
 800cf9a:	eba0 000a 	sub.w	r0, r0, sl
 800cf9e:	2240      	movs	r2, #64	; 0x40
 800cfa0:	4082      	lsls	r2, r0
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	3401      	adds	r4, #1
 800cfa6:	9304      	str	r3, [sp, #16]
 800cfa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfac:	4825      	ldr	r0, [pc, #148]	; (800d044 <_svfiprintf_r+0x1ec>)
 800cfae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfb2:	2206      	movs	r2, #6
 800cfb4:	f7f3 f944 	bl	8000240 <memchr>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d038      	beq.n	800d02e <_svfiprintf_r+0x1d6>
 800cfbc:	4b22      	ldr	r3, [pc, #136]	; (800d048 <_svfiprintf_r+0x1f0>)
 800cfbe:	bb1b      	cbnz	r3, 800d008 <_svfiprintf_r+0x1b0>
 800cfc0:	9b03      	ldr	r3, [sp, #12]
 800cfc2:	3307      	adds	r3, #7
 800cfc4:	f023 0307 	bic.w	r3, r3, #7
 800cfc8:	3308      	adds	r3, #8
 800cfca:	9303      	str	r3, [sp, #12]
 800cfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfce:	4433      	add	r3, r6
 800cfd0:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd2:	e768      	b.n	800cea6 <_svfiprintf_r+0x4e>
 800cfd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfd8:	460c      	mov	r4, r1
 800cfda:	2001      	movs	r0, #1
 800cfdc:	e7a6      	b.n	800cf2c <_svfiprintf_r+0xd4>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	3401      	adds	r4, #1
 800cfe2:	9305      	str	r3, [sp, #20]
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	f04f 0c0a 	mov.w	ip, #10
 800cfea:	4620      	mov	r0, r4
 800cfec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff0:	3a30      	subs	r2, #48	; 0x30
 800cff2:	2a09      	cmp	r2, #9
 800cff4:	d903      	bls.n	800cffe <_svfiprintf_r+0x1a6>
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0c6      	beq.n	800cf88 <_svfiprintf_r+0x130>
 800cffa:	9105      	str	r1, [sp, #20]
 800cffc:	e7c4      	b.n	800cf88 <_svfiprintf_r+0x130>
 800cffe:	fb0c 2101 	mla	r1, ip, r1, r2
 800d002:	4604      	mov	r4, r0
 800d004:	2301      	movs	r3, #1
 800d006:	e7f0      	b.n	800cfea <_svfiprintf_r+0x192>
 800d008:	ab03      	add	r3, sp, #12
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	462a      	mov	r2, r5
 800d00e:	4b0f      	ldr	r3, [pc, #60]	; (800d04c <_svfiprintf_r+0x1f4>)
 800d010:	a904      	add	r1, sp, #16
 800d012:	4638      	mov	r0, r7
 800d014:	f3af 8000 	nop.w
 800d018:	1c42      	adds	r2, r0, #1
 800d01a:	4606      	mov	r6, r0
 800d01c:	d1d6      	bne.n	800cfcc <_svfiprintf_r+0x174>
 800d01e:	89ab      	ldrh	r3, [r5, #12]
 800d020:	065b      	lsls	r3, r3, #25
 800d022:	f53f af2d 	bmi.w	800ce80 <_svfiprintf_r+0x28>
 800d026:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d028:	b01d      	add	sp, #116	; 0x74
 800d02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02e:	ab03      	add	r3, sp, #12
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	462a      	mov	r2, r5
 800d034:	4b05      	ldr	r3, [pc, #20]	; (800d04c <_svfiprintf_r+0x1f4>)
 800d036:	a904      	add	r1, sp, #16
 800d038:	4638      	mov	r0, r7
 800d03a:	f000 fb8f 	bl	800d75c <_printf_i>
 800d03e:	e7eb      	b.n	800d018 <_svfiprintf_r+0x1c0>
 800d040:	0800e93f 	.word	0x0800e93f
 800d044:	0800e949 	.word	0x0800e949
 800d048:	00000000 	.word	0x00000000
 800d04c:	0800cda5 	.word	0x0800cda5
 800d050:	0800e945 	.word	0x0800e945

0800d054 <_sungetc_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	1c4b      	adds	r3, r1, #1
 800d058:	4614      	mov	r4, r2
 800d05a:	d103      	bne.n	800d064 <_sungetc_r+0x10>
 800d05c:	f04f 35ff 	mov.w	r5, #4294967295
 800d060:	4628      	mov	r0, r5
 800d062:	bd38      	pop	{r3, r4, r5, pc}
 800d064:	8993      	ldrh	r3, [r2, #12]
 800d066:	f023 0320 	bic.w	r3, r3, #32
 800d06a:	8193      	strh	r3, [r2, #12]
 800d06c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d06e:	6852      	ldr	r2, [r2, #4]
 800d070:	b2cd      	uxtb	r5, r1
 800d072:	b18b      	cbz	r3, 800d098 <_sungetc_r+0x44>
 800d074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d076:	4293      	cmp	r3, r2
 800d078:	dd08      	ble.n	800d08c <_sungetc_r+0x38>
 800d07a:	6823      	ldr	r3, [r4, #0]
 800d07c:	1e5a      	subs	r2, r3, #1
 800d07e:	6022      	str	r2, [r4, #0]
 800d080:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d084:	6863      	ldr	r3, [r4, #4]
 800d086:	3301      	adds	r3, #1
 800d088:	6063      	str	r3, [r4, #4]
 800d08a:	e7e9      	b.n	800d060 <_sungetc_r+0xc>
 800d08c:	4621      	mov	r1, r4
 800d08e:	f000 febc 	bl	800de0a <__submore>
 800d092:	2800      	cmp	r0, #0
 800d094:	d0f1      	beq.n	800d07a <_sungetc_r+0x26>
 800d096:	e7e1      	b.n	800d05c <_sungetc_r+0x8>
 800d098:	6921      	ldr	r1, [r4, #16]
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	b151      	cbz	r1, 800d0b4 <_sungetc_r+0x60>
 800d09e:	4299      	cmp	r1, r3
 800d0a0:	d208      	bcs.n	800d0b4 <_sungetc_r+0x60>
 800d0a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d0a6:	42a9      	cmp	r1, r5
 800d0a8:	d104      	bne.n	800d0b4 <_sungetc_r+0x60>
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	3201      	adds	r2, #1
 800d0ae:	6023      	str	r3, [r4, #0]
 800d0b0:	6062      	str	r2, [r4, #4]
 800d0b2:	e7d5      	b.n	800d060 <_sungetc_r+0xc>
 800d0b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0bc:	6363      	str	r3, [r4, #52]	; 0x34
 800d0be:	2303      	movs	r3, #3
 800d0c0:	63a3      	str	r3, [r4, #56]	; 0x38
 800d0c2:	4623      	mov	r3, r4
 800d0c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d0c8:	6023      	str	r3, [r4, #0]
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e7dc      	b.n	800d088 <_sungetc_r+0x34>

0800d0ce <__ssrefill_r>:
 800d0ce:	b510      	push	{r4, lr}
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d0d4:	b169      	cbz	r1, 800d0f2 <__ssrefill_r+0x24>
 800d0d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0da:	4299      	cmp	r1, r3
 800d0dc:	d001      	beq.n	800d0e2 <__ssrefill_r+0x14>
 800d0de:	f7ff fd69 	bl	800cbb4 <_free_r>
 800d0e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0e4:	6063      	str	r3, [r4, #4]
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	6360      	str	r0, [r4, #52]	; 0x34
 800d0ea:	b113      	cbz	r3, 800d0f2 <__ssrefill_r+0x24>
 800d0ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d0ee:	6023      	str	r3, [r4, #0]
 800d0f0:	bd10      	pop	{r4, pc}
 800d0f2:	6923      	ldr	r3, [r4, #16]
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	6063      	str	r3, [r4, #4]
 800d0fa:	89a3      	ldrh	r3, [r4, #12]
 800d0fc:	f043 0320 	orr.w	r3, r3, #32
 800d100:	81a3      	strh	r3, [r4, #12]
 800d102:	f04f 30ff 	mov.w	r0, #4294967295
 800d106:	e7f3      	b.n	800d0f0 <__ssrefill_r+0x22>

0800d108 <__ssvfiscanf_r>:
 800d108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d10c:	460c      	mov	r4, r1
 800d10e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d112:	2100      	movs	r1, #0
 800d114:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d118:	49a6      	ldr	r1, [pc, #664]	; (800d3b4 <__ssvfiscanf_r+0x2ac>)
 800d11a:	91a0      	str	r1, [sp, #640]	; 0x280
 800d11c:	f10d 0804 	add.w	r8, sp, #4
 800d120:	49a5      	ldr	r1, [pc, #660]	; (800d3b8 <__ssvfiscanf_r+0x2b0>)
 800d122:	4fa6      	ldr	r7, [pc, #664]	; (800d3bc <__ssvfiscanf_r+0x2b4>)
 800d124:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d3c0 <__ssvfiscanf_r+0x2b8>
 800d128:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d12c:	4606      	mov	r6, r0
 800d12e:	91a1      	str	r1, [sp, #644]	; 0x284
 800d130:	9300      	str	r3, [sp, #0]
 800d132:	7813      	ldrb	r3, [r2, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 815a 	beq.w	800d3ee <__ssvfiscanf_r+0x2e6>
 800d13a:	5cf9      	ldrb	r1, [r7, r3]
 800d13c:	f011 0108 	ands.w	r1, r1, #8
 800d140:	f102 0501 	add.w	r5, r2, #1
 800d144:	d019      	beq.n	800d17a <__ssvfiscanf_r+0x72>
 800d146:	6863      	ldr	r3, [r4, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	dd0f      	ble.n	800d16c <__ssvfiscanf_r+0x64>
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	781a      	ldrb	r2, [r3, #0]
 800d150:	5cba      	ldrb	r2, [r7, r2]
 800d152:	0712      	lsls	r2, r2, #28
 800d154:	d401      	bmi.n	800d15a <__ssvfiscanf_r+0x52>
 800d156:	462a      	mov	r2, r5
 800d158:	e7eb      	b.n	800d132 <__ssvfiscanf_r+0x2a>
 800d15a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d15c:	3201      	adds	r2, #1
 800d15e:	9245      	str	r2, [sp, #276]	; 0x114
 800d160:	6862      	ldr	r2, [r4, #4]
 800d162:	3301      	adds	r3, #1
 800d164:	3a01      	subs	r2, #1
 800d166:	6062      	str	r2, [r4, #4]
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	e7ec      	b.n	800d146 <__ssvfiscanf_r+0x3e>
 800d16c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d16e:	4621      	mov	r1, r4
 800d170:	4630      	mov	r0, r6
 800d172:	4798      	blx	r3
 800d174:	2800      	cmp	r0, #0
 800d176:	d0e9      	beq.n	800d14c <__ssvfiscanf_r+0x44>
 800d178:	e7ed      	b.n	800d156 <__ssvfiscanf_r+0x4e>
 800d17a:	2b25      	cmp	r3, #37	; 0x25
 800d17c:	d012      	beq.n	800d1a4 <__ssvfiscanf_r+0x9c>
 800d17e:	469a      	mov	sl, r3
 800d180:	6863      	ldr	r3, [r4, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	f340 8091 	ble.w	800d2aa <__ssvfiscanf_r+0x1a2>
 800d188:	6822      	ldr	r2, [r4, #0]
 800d18a:	7813      	ldrb	r3, [r2, #0]
 800d18c:	4553      	cmp	r3, sl
 800d18e:	f040 812e 	bne.w	800d3ee <__ssvfiscanf_r+0x2e6>
 800d192:	6863      	ldr	r3, [r4, #4]
 800d194:	3b01      	subs	r3, #1
 800d196:	6063      	str	r3, [r4, #4]
 800d198:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d19a:	3201      	adds	r2, #1
 800d19c:	3301      	adds	r3, #1
 800d19e:	6022      	str	r2, [r4, #0]
 800d1a0:	9345      	str	r3, [sp, #276]	; 0x114
 800d1a2:	e7d8      	b.n	800d156 <__ssvfiscanf_r+0x4e>
 800d1a4:	9141      	str	r1, [sp, #260]	; 0x104
 800d1a6:	9143      	str	r1, [sp, #268]	; 0x10c
 800d1a8:	7853      	ldrb	r3, [r2, #1]
 800d1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ac:	bf02      	ittt	eq
 800d1ae:	2310      	moveq	r3, #16
 800d1b0:	1c95      	addeq	r5, r2, #2
 800d1b2:	9341      	streq	r3, [sp, #260]	; 0x104
 800d1b4:	220a      	movs	r2, #10
 800d1b6:	46aa      	mov	sl, r5
 800d1b8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d1bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d1c0:	2b09      	cmp	r3, #9
 800d1c2:	d91c      	bls.n	800d1fe <__ssvfiscanf_r+0xf6>
 800d1c4:	487e      	ldr	r0, [pc, #504]	; (800d3c0 <__ssvfiscanf_r+0x2b8>)
 800d1c6:	2203      	movs	r2, #3
 800d1c8:	f7f3 f83a 	bl	8000240 <memchr>
 800d1cc:	b138      	cbz	r0, 800d1de <__ssvfiscanf_r+0xd6>
 800d1ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d1d0:	eba0 0009 	sub.w	r0, r0, r9
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	4083      	lsls	r3, r0
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	9341      	str	r3, [sp, #260]	; 0x104
 800d1dc:	4655      	mov	r5, sl
 800d1de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d1e2:	2b78      	cmp	r3, #120	; 0x78
 800d1e4:	d806      	bhi.n	800d1f4 <__ssvfiscanf_r+0xec>
 800d1e6:	2b57      	cmp	r3, #87	; 0x57
 800d1e8:	d810      	bhi.n	800d20c <__ssvfiscanf_r+0x104>
 800d1ea:	2b25      	cmp	r3, #37	; 0x25
 800d1ec:	d0c7      	beq.n	800d17e <__ssvfiscanf_r+0x76>
 800d1ee:	d857      	bhi.n	800d2a0 <__ssvfiscanf_r+0x198>
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d065      	beq.n	800d2c0 <__ssvfiscanf_r+0x1b8>
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	9347      	str	r3, [sp, #284]	; 0x11c
 800d1f8:	230a      	movs	r3, #10
 800d1fa:	9342      	str	r3, [sp, #264]	; 0x108
 800d1fc:	e076      	b.n	800d2ec <__ssvfiscanf_r+0x1e4>
 800d1fe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d200:	fb02 1103 	mla	r1, r2, r3, r1
 800d204:	3930      	subs	r1, #48	; 0x30
 800d206:	9143      	str	r1, [sp, #268]	; 0x10c
 800d208:	4655      	mov	r5, sl
 800d20a:	e7d4      	b.n	800d1b6 <__ssvfiscanf_r+0xae>
 800d20c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d210:	2a20      	cmp	r2, #32
 800d212:	d8ef      	bhi.n	800d1f4 <__ssvfiscanf_r+0xec>
 800d214:	a101      	add	r1, pc, #4	; (adr r1, 800d21c <__ssvfiscanf_r+0x114>)
 800d216:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d21a:	bf00      	nop
 800d21c:	0800d2cf 	.word	0x0800d2cf
 800d220:	0800d1f5 	.word	0x0800d1f5
 800d224:	0800d1f5 	.word	0x0800d1f5
 800d228:	0800d32d 	.word	0x0800d32d
 800d22c:	0800d1f5 	.word	0x0800d1f5
 800d230:	0800d1f5 	.word	0x0800d1f5
 800d234:	0800d1f5 	.word	0x0800d1f5
 800d238:	0800d1f5 	.word	0x0800d1f5
 800d23c:	0800d1f5 	.word	0x0800d1f5
 800d240:	0800d1f5 	.word	0x0800d1f5
 800d244:	0800d1f5 	.word	0x0800d1f5
 800d248:	0800d343 	.word	0x0800d343
 800d24c:	0800d329 	.word	0x0800d329
 800d250:	0800d2a7 	.word	0x0800d2a7
 800d254:	0800d2a7 	.word	0x0800d2a7
 800d258:	0800d2a7 	.word	0x0800d2a7
 800d25c:	0800d1f5 	.word	0x0800d1f5
 800d260:	0800d2e5 	.word	0x0800d2e5
 800d264:	0800d1f5 	.word	0x0800d1f5
 800d268:	0800d1f5 	.word	0x0800d1f5
 800d26c:	0800d1f5 	.word	0x0800d1f5
 800d270:	0800d1f5 	.word	0x0800d1f5
 800d274:	0800d353 	.word	0x0800d353
 800d278:	0800d321 	.word	0x0800d321
 800d27c:	0800d2c7 	.word	0x0800d2c7
 800d280:	0800d1f5 	.word	0x0800d1f5
 800d284:	0800d1f5 	.word	0x0800d1f5
 800d288:	0800d34f 	.word	0x0800d34f
 800d28c:	0800d1f5 	.word	0x0800d1f5
 800d290:	0800d329 	.word	0x0800d329
 800d294:	0800d1f5 	.word	0x0800d1f5
 800d298:	0800d1f5 	.word	0x0800d1f5
 800d29c:	0800d2cf 	.word	0x0800d2cf
 800d2a0:	3b45      	subs	r3, #69	; 0x45
 800d2a2:	2b02      	cmp	r3, #2
 800d2a4:	d8a6      	bhi.n	800d1f4 <__ssvfiscanf_r+0xec>
 800d2a6:	2305      	movs	r3, #5
 800d2a8:	e01f      	b.n	800d2ea <__ssvfiscanf_r+0x1e2>
 800d2aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	4798      	blx	r3
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	f43f af68 	beq.w	800d188 <__ssvfiscanf_r+0x80>
 800d2b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	f040 808d 	bne.w	800d3da <__ssvfiscanf_r+0x2d2>
 800d2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c4:	e08f      	b.n	800d3e6 <__ssvfiscanf_r+0x2de>
 800d2c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d2c8:	f042 0220 	orr.w	r2, r2, #32
 800d2cc:	9241      	str	r2, [sp, #260]	; 0x104
 800d2ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d2d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2d4:	9241      	str	r2, [sp, #260]	; 0x104
 800d2d6:	2210      	movs	r2, #16
 800d2d8:	2b6f      	cmp	r3, #111	; 0x6f
 800d2da:	9242      	str	r2, [sp, #264]	; 0x108
 800d2dc:	bf34      	ite	cc
 800d2de:	2303      	movcc	r3, #3
 800d2e0:	2304      	movcs	r3, #4
 800d2e2:	e002      	b.n	800d2ea <__ssvfiscanf_r+0x1e2>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	9342      	str	r3, [sp, #264]	; 0x108
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	9347      	str	r3, [sp, #284]	; 0x11c
 800d2ec:	6863      	ldr	r3, [r4, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	dd3d      	ble.n	800d36e <__ssvfiscanf_r+0x266>
 800d2f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d2f4:	0659      	lsls	r1, r3, #25
 800d2f6:	d404      	bmi.n	800d302 <__ssvfiscanf_r+0x1fa>
 800d2f8:	6823      	ldr	r3, [r4, #0]
 800d2fa:	781a      	ldrb	r2, [r3, #0]
 800d2fc:	5cba      	ldrb	r2, [r7, r2]
 800d2fe:	0712      	lsls	r2, r2, #28
 800d300:	d43c      	bmi.n	800d37c <__ssvfiscanf_r+0x274>
 800d302:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d304:	2b02      	cmp	r3, #2
 800d306:	dc4b      	bgt.n	800d3a0 <__ssvfiscanf_r+0x298>
 800d308:	466b      	mov	r3, sp
 800d30a:	4622      	mov	r2, r4
 800d30c:	a941      	add	r1, sp, #260	; 0x104
 800d30e:	4630      	mov	r0, r6
 800d310:	f000 fb46 	bl	800d9a0 <_scanf_chars>
 800d314:	2801      	cmp	r0, #1
 800d316:	d06a      	beq.n	800d3ee <__ssvfiscanf_r+0x2e6>
 800d318:	2802      	cmp	r0, #2
 800d31a:	f47f af1c 	bne.w	800d156 <__ssvfiscanf_r+0x4e>
 800d31e:	e7cb      	b.n	800d2b8 <__ssvfiscanf_r+0x1b0>
 800d320:	2308      	movs	r3, #8
 800d322:	9342      	str	r3, [sp, #264]	; 0x108
 800d324:	2304      	movs	r3, #4
 800d326:	e7e0      	b.n	800d2ea <__ssvfiscanf_r+0x1e2>
 800d328:	220a      	movs	r2, #10
 800d32a:	e7d5      	b.n	800d2d8 <__ssvfiscanf_r+0x1d0>
 800d32c:	4629      	mov	r1, r5
 800d32e:	4640      	mov	r0, r8
 800d330:	f000 fd32 	bl	800dd98 <__sccl>
 800d334:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d33a:	9341      	str	r3, [sp, #260]	; 0x104
 800d33c:	4605      	mov	r5, r0
 800d33e:	2301      	movs	r3, #1
 800d340:	e7d3      	b.n	800d2ea <__ssvfiscanf_r+0x1e2>
 800d342:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d348:	9341      	str	r3, [sp, #260]	; 0x104
 800d34a:	2300      	movs	r3, #0
 800d34c:	e7cd      	b.n	800d2ea <__ssvfiscanf_r+0x1e2>
 800d34e:	2302      	movs	r3, #2
 800d350:	e7cb      	b.n	800d2ea <__ssvfiscanf_r+0x1e2>
 800d352:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d354:	06c3      	lsls	r3, r0, #27
 800d356:	f53f aefe 	bmi.w	800d156 <__ssvfiscanf_r+0x4e>
 800d35a:	9b00      	ldr	r3, [sp, #0]
 800d35c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d35e:	1d19      	adds	r1, r3, #4
 800d360:	9100      	str	r1, [sp, #0]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	07c0      	lsls	r0, r0, #31
 800d366:	bf4c      	ite	mi
 800d368:	801a      	strhmi	r2, [r3, #0]
 800d36a:	601a      	strpl	r2, [r3, #0]
 800d36c:	e6f3      	b.n	800d156 <__ssvfiscanf_r+0x4e>
 800d36e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d370:	4621      	mov	r1, r4
 800d372:	4630      	mov	r0, r6
 800d374:	4798      	blx	r3
 800d376:	2800      	cmp	r0, #0
 800d378:	d0bb      	beq.n	800d2f2 <__ssvfiscanf_r+0x1ea>
 800d37a:	e79d      	b.n	800d2b8 <__ssvfiscanf_r+0x1b0>
 800d37c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d37e:	3201      	adds	r2, #1
 800d380:	9245      	str	r2, [sp, #276]	; 0x114
 800d382:	6862      	ldr	r2, [r4, #4]
 800d384:	3a01      	subs	r2, #1
 800d386:	2a00      	cmp	r2, #0
 800d388:	6062      	str	r2, [r4, #4]
 800d38a:	dd02      	ble.n	800d392 <__ssvfiscanf_r+0x28a>
 800d38c:	3301      	adds	r3, #1
 800d38e:	6023      	str	r3, [r4, #0]
 800d390:	e7b2      	b.n	800d2f8 <__ssvfiscanf_r+0x1f0>
 800d392:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d394:	4621      	mov	r1, r4
 800d396:	4630      	mov	r0, r6
 800d398:	4798      	blx	r3
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d0ac      	beq.n	800d2f8 <__ssvfiscanf_r+0x1f0>
 800d39e:	e78b      	b.n	800d2b8 <__ssvfiscanf_r+0x1b0>
 800d3a0:	2b04      	cmp	r3, #4
 800d3a2:	dc0f      	bgt.n	800d3c4 <__ssvfiscanf_r+0x2bc>
 800d3a4:	466b      	mov	r3, sp
 800d3a6:	4622      	mov	r2, r4
 800d3a8:	a941      	add	r1, sp, #260	; 0x104
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	f000 fb52 	bl	800da54 <_scanf_i>
 800d3b0:	e7b0      	b.n	800d314 <__ssvfiscanf_r+0x20c>
 800d3b2:	bf00      	nop
 800d3b4:	0800d055 	.word	0x0800d055
 800d3b8:	0800d0cf 	.word	0x0800d0cf
 800d3bc:	0800e98e 	.word	0x0800e98e
 800d3c0:	0800e945 	.word	0x0800e945
 800d3c4:	4b0b      	ldr	r3, [pc, #44]	; (800d3f4 <__ssvfiscanf_r+0x2ec>)
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f43f aec5 	beq.w	800d156 <__ssvfiscanf_r+0x4e>
 800d3cc:	466b      	mov	r3, sp
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	a941      	add	r1, sp, #260	; 0x104
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f3af 8000 	nop.w
 800d3d8:	e79c      	b.n	800d314 <__ssvfiscanf_r+0x20c>
 800d3da:	89a3      	ldrh	r3, [r4, #12]
 800d3dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d3e0:	bf18      	it	ne
 800d3e2:	f04f 30ff 	movne.w	r0, #4294967295
 800d3e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d3f0:	e7f9      	b.n	800d3e6 <__ssvfiscanf_r+0x2de>
 800d3f2:	bf00      	nop
 800d3f4:	00000000 	.word	0x00000000

0800d3f8 <__sfputc_r>:
 800d3f8:	6893      	ldr	r3, [r2, #8]
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	b410      	push	{r4}
 800d400:	6093      	str	r3, [r2, #8]
 800d402:	da08      	bge.n	800d416 <__sfputc_r+0x1e>
 800d404:	6994      	ldr	r4, [r2, #24]
 800d406:	42a3      	cmp	r3, r4
 800d408:	db01      	blt.n	800d40e <__sfputc_r+0x16>
 800d40a:	290a      	cmp	r1, #10
 800d40c:	d103      	bne.n	800d416 <__sfputc_r+0x1e>
 800d40e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d412:	f000 bd34 	b.w	800de7e <__swbuf_r>
 800d416:	6813      	ldr	r3, [r2, #0]
 800d418:	1c58      	adds	r0, r3, #1
 800d41a:	6010      	str	r0, [r2, #0]
 800d41c:	7019      	strb	r1, [r3, #0]
 800d41e:	4608      	mov	r0, r1
 800d420:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <__sfputs_r>:
 800d426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d428:	4606      	mov	r6, r0
 800d42a:	460f      	mov	r7, r1
 800d42c:	4614      	mov	r4, r2
 800d42e:	18d5      	adds	r5, r2, r3
 800d430:	42ac      	cmp	r4, r5
 800d432:	d101      	bne.n	800d438 <__sfputs_r+0x12>
 800d434:	2000      	movs	r0, #0
 800d436:	e007      	b.n	800d448 <__sfputs_r+0x22>
 800d438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d43c:	463a      	mov	r2, r7
 800d43e:	4630      	mov	r0, r6
 800d440:	f7ff ffda 	bl	800d3f8 <__sfputc_r>
 800d444:	1c43      	adds	r3, r0, #1
 800d446:	d1f3      	bne.n	800d430 <__sfputs_r+0xa>
 800d448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d44c <_vfiprintf_r>:
 800d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	460d      	mov	r5, r1
 800d452:	b09d      	sub	sp, #116	; 0x74
 800d454:	4614      	mov	r4, r2
 800d456:	4698      	mov	r8, r3
 800d458:	4606      	mov	r6, r0
 800d45a:	b118      	cbz	r0, 800d464 <_vfiprintf_r+0x18>
 800d45c:	6a03      	ldr	r3, [r0, #32]
 800d45e:	b90b      	cbnz	r3, 800d464 <_vfiprintf_r+0x18>
 800d460:	f7ff f9f8 	bl	800c854 <__sinit>
 800d464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d466:	07d9      	lsls	r1, r3, #31
 800d468:	d405      	bmi.n	800d476 <_vfiprintf_r+0x2a>
 800d46a:	89ab      	ldrh	r3, [r5, #12]
 800d46c:	059a      	lsls	r2, r3, #22
 800d46e:	d402      	bmi.n	800d476 <_vfiprintf_r+0x2a>
 800d470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d472:	f7ff fb88 	bl	800cb86 <__retarget_lock_acquire_recursive>
 800d476:	89ab      	ldrh	r3, [r5, #12]
 800d478:	071b      	lsls	r3, r3, #28
 800d47a:	d501      	bpl.n	800d480 <_vfiprintf_r+0x34>
 800d47c:	692b      	ldr	r3, [r5, #16]
 800d47e:	b99b      	cbnz	r3, 800d4a8 <_vfiprintf_r+0x5c>
 800d480:	4629      	mov	r1, r5
 800d482:	4630      	mov	r0, r6
 800d484:	f000 fd38 	bl	800def8 <__swsetup_r>
 800d488:	b170      	cbz	r0, 800d4a8 <_vfiprintf_r+0x5c>
 800d48a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d48c:	07dc      	lsls	r4, r3, #31
 800d48e:	d504      	bpl.n	800d49a <_vfiprintf_r+0x4e>
 800d490:	f04f 30ff 	mov.w	r0, #4294967295
 800d494:	b01d      	add	sp, #116	; 0x74
 800d496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49a:	89ab      	ldrh	r3, [r5, #12]
 800d49c:	0598      	lsls	r0, r3, #22
 800d49e:	d4f7      	bmi.n	800d490 <_vfiprintf_r+0x44>
 800d4a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4a2:	f7ff fb71 	bl	800cb88 <__retarget_lock_release_recursive>
 800d4a6:	e7f3      	b.n	800d490 <_vfiprintf_r+0x44>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ac:	2320      	movs	r3, #32
 800d4ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4b6:	2330      	movs	r3, #48	; 0x30
 800d4b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d66c <_vfiprintf_r+0x220>
 800d4bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4c0:	f04f 0901 	mov.w	r9, #1
 800d4c4:	4623      	mov	r3, r4
 800d4c6:	469a      	mov	sl, r3
 800d4c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4cc:	b10a      	cbz	r2, 800d4d2 <_vfiprintf_r+0x86>
 800d4ce:	2a25      	cmp	r2, #37	; 0x25
 800d4d0:	d1f9      	bne.n	800d4c6 <_vfiprintf_r+0x7a>
 800d4d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d4d6:	d00b      	beq.n	800d4f0 <_vfiprintf_r+0xa4>
 800d4d8:	465b      	mov	r3, fp
 800d4da:	4622      	mov	r2, r4
 800d4dc:	4629      	mov	r1, r5
 800d4de:	4630      	mov	r0, r6
 800d4e0:	f7ff ffa1 	bl	800d426 <__sfputs_r>
 800d4e4:	3001      	adds	r0, #1
 800d4e6:	f000 80a9 	beq.w	800d63c <_vfiprintf_r+0x1f0>
 800d4ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4ec:	445a      	add	r2, fp
 800d4ee:	9209      	str	r2, [sp, #36]	; 0x24
 800d4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	f000 80a1 	beq.w	800d63c <_vfiprintf_r+0x1f0>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d504:	f10a 0a01 	add.w	sl, sl, #1
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	9307      	str	r3, [sp, #28]
 800d50c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d510:	931a      	str	r3, [sp, #104]	; 0x68
 800d512:	4654      	mov	r4, sl
 800d514:	2205      	movs	r2, #5
 800d516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d51a:	4854      	ldr	r0, [pc, #336]	; (800d66c <_vfiprintf_r+0x220>)
 800d51c:	f7f2 fe90 	bl	8000240 <memchr>
 800d520:	9a04      	ldr	r2, [sp, #16]
 800d522:	b9d8      	cbnz	r0, 800d55c <_vfiprintf_r+0x110>
 800d524:	06d1      	lsls	r1, r2, #27
 800d526:	bf44      	itt	mi
 800d528:	2320      	movmi	r3, #32
 800d52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d52e:	0713      	lsls	r3, r2, #28
 800d530:	bf44      	itt	mi
 800d532:	232b      	movmi	r3, #43	; 0x2b
 800d534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d538:	f89a 3000 	ldrb.w	r3, [sl]
 800d53c:	2b2a      	cmp	r3, #42	; 0x2a
 800d53e:	d015      	beq.n	800d56c <_vfiprintf_r+0x120>
 800d540:	9a07      	ldr	r2, [sp, #28]
 800d542:	4654      	mov	r4, sl
 800d544:	2000      	movs	r0, #0
 800d546:	f04f 0c0a 	mov.w	ip, #10
 800d54a:	4621      	mov	r1, r4
 800d54c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d550:	3b30      	subs	r3, #48	; 0x30
 800d552:	2b09      	cmp	r3, #9
 800d554:	d94d      	bls.n	800d5f2 <_vfiprintf_r+0x1a6>
 800d556:	b1b0      	cbz	r0, 800d586 <_vfiprintf_r+0x13a>
 800d558:	9207      	str	r2, [sp, #28]
 800d55a:	e014      	b.n	800d586 <_vfiprintf_r+0x13a>
 800d55c:	eba0 0308 	sub.w	r3, r0, r8
 800d560:	fa09 f303 	lsl.w	r3, r9, r3
 800d564:	4313      	orrs	r3, r2
 800d566:	9304      	str	r3, [sp, #16]
 800d568:	46a2      	mov	sl, r4
 800d56a:	e7d2      	b.n	800d512 <_vfiprintf_r+0xc6>
 800d56c:	9b03      	ldr	r3, [sp, #12]
 800d56e:	1d19      	adds	r1, r3, #4
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	9103      	str	r1, [sp, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	bfbb      	ittet	lt
 800d578:	425b      	neglt	r3, r3
 800d57a:	f042 0202 	orrlt.w	r2, r2, #2
 800d57e:	9307      	strge	r3, [sp, #28]
 800d580:	9307      	strlt	r3, [sp, #28]
 800d582:	bfb8      	it	lt
 800d584:	9204      	strlt	r2, [sp, #16]
 800d586:	7823      	ldrb	r3, [r4, #0]
 800d588:	2b2e      	cmp	r3, #46	; 0x2e
 800d58a:	d10c      	bne.n	800d5a6 <_vfiprintf_r+0x15a>
 800d58c:	7863      	ldrb	r3, [r4, #1]
 800d58e:	2b2a      	cmp	r3, #42	; 0x2a
 800d590:	d134      	bne.n	800d5fc <_vfiprintf_r+0x1b0>
 800d592:	9b03      	ldr	r3, [sp, #12]
 800d594:	1d1a      	adds	r2, r3, #4
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	9203      	str	r2, [sp, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	bfb8      	it	lt
 800d59e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5a2:	3402      	adds	r4, #2
 800d5a4:	9305      	str	r3, [sp, #20]
 800d5a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d67c <_vfiprintf_r+0x230>
 800d5aa:	7821      	ldrb	r1, [r4, #0]
 800d5ac:	2203      	movs	r2, #3
 800d5ae:	4650      	mov	r0, sl
 800d5b0:	f7f2 fe46 	bl	8000240 <memchr>
 800d5b4:	b138      	cbz	r0, 800d5c6 <_vfiprintf_r+0x17a>
 800d5b6:	9b04      	ldr	r3, [sp, #16]
 800d5b8:	eba0 000a 	sub.w	r0, r0, sl
 800d5bc:	2240      	movs	r2, #64	; 0x40
 800d5be:	4082      	lsls	r2, r0
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	3401      	adds	r4, #1
 800d5c4:	9304      	str	r3, [sp, #16]
 800d5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ca:	4829      	ldr	r0, [pc, #164]	; (800d670 <_vfiprintf_r+0x224>)
 800d5cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5d0:	2206      	movs	r2, #6
 800d5d2:	f7f2 fe35 	bl	8000240 <memchr>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d03f      	beq.n	800d65a <_vfiprintf_r+0x20e>
 800d5da:	4b26      	ldr	r3, [pc, #152]	; (800d674 <_vfiprintf_r+0x228>)
 800d5dc:	bb1b      	cbnz	r3, 800d626 <_vfiprintf_r+0x1da>
 800d5de:	9b03      	ldr	r3, [sp, #12]
 800d5e0:	3307      	adds	r3, #7
 800d5e2:	f023 0307 	bic.w	r3, r3, #7
 800d5e6:	3308      	adds	r3, #8
 800d5e8:	9303      	str	r3, [sp, #12]
 800d5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ec:	443b      	add	r3, r7
 800d5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d5f0:	e768      	b.n	800d4c4 <_vfiprintf_r+0x78>
 800d5f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	2001      	movs	r0, #1
 800d5fa:	e7a6      	b.n	800d54a <_vfiprintf_r+0xfe>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	3401      	adds	r4, #1
 800d600:	9305      	str	r3, [sp, #20]
 800d602:	4619      	mov	r1, r3
 800d604:	f04f 0c0a 	mov.w	ip, #10
 800d608:	4620      	mov	r0, r4
 800d60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d60e:	3a30      	subs	r2, #48	; 0x30
 800d610:	2a09      	cmp	r2, #9
 800d612:	d903      	bls.n	800d61c <_vfiprintf_r+0x1d0>
 800d614:	2b00      	cmp	r3, #0
 800d616:	d0c6      	beq.n	800d5a6 <_vfiprintf_r+0x15a>
 800d618:	9105      	str	r1, [sp, #20]
 800d61a:	e7c4      	b.n	800d5a6 <_vfiprintf_r+0x15a>
 800d61c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d620:	4604      	mov	r4, r0
 800d622:	2301      	movs	r3, #1
 800d624:	e7f0      	b.n	800d608 <_vfiprintf_r+0x1bc>
 800d626:	ab03      	add	r3, sp, #12
 800d628:	9300      	str	r3, [sp, #0]
 800d62a:	462a      	mov	r2, r5
 800d62c:	4b12      	ldr	r3, [pc, #72]	; (800d678 <_vfiprintf_r+0x22c>)
 800d62e:	a904      	add	r1, sp, #16
 800d630:	4630      	mov	r0, r6
 800d632:	f3af 8000 	nop.w
 800d636:	4607      	mov	r7, r0
 800d638:	1c78      	adds	r0, r7, #1
 800d63a:	d1d6      	bne.n	800d5ea <_vfiprintf_r+0x19e>
 800d63c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d63e:	07d9      	lsls	r1, r3, #31
 800d640:	d405      	bmi.n	800d64e <_vfiprintf_r+0x202>
 800d642:	89ab      	ldrh	r3, [r5, #12]
 800d644:	059a      	lsls	r2, r3, #22
 800d646:	d402      	bmi.n	800d64e <_vfiprintf_r+0x202>
 800d648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d64a:	f7ff fa9d 	bl	800cb88 <__retarget_lock_release_recursive>
 800d64e:	89ab      	ldrh	r3, [r5, #12]
 800d650:	065b      	lsls	r3, r3, #25
 800d652:	f53f af1d 	bmi.w	800d490 <_vfiprintf_r+0x44>
 800d656:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d658:	e71c      	b.n	800d494 <_vfiprintf_r+0x48>
 800d65a:	ab03      	add	r3, sp, #12
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	462a      	mov	r2, r5
 800d660:	4b05      	ldr	r3, [pc, #20]	; (800d678 <_vfiprintf_r+0x22c>)
 800d662:	a904      	add	r1, sp, #16
 800d664:	4630      	mov	r0, r6
 800d666:	f000 f879 	bl	800d75c <_printf_i>
 800d66a:	e7e4      	b.n	800d636 <_vfiprintf_r+0x1ea>
 800d66c:	0800e93f 	.word	0x0800e93f
 800d670:	0800e949 	.word	0x0800e949
 800d674:	00000000 	.word	0x00000000
 800d678:	0800d427 	.word	0x0800d427
 800d67c:	0800e945 	.word	0x0800e945

0800d680 <_printf_common>:
 800d680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d684:	4616      	mov	r6, r2
 800d686:	4699      	mov	r9, r3
 800d688:	688a      	ldr	r2, [r1, #8]
 800d68a:	690b      	ldr	r3, [r1, #16]
 800d68c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d690:	4293      	cmp	r3, r2
 800d692:	bfb8      	it	lt
 800d694:	4613      	movlt	r3, r2
 800d696:	6033      	str	r3, [r6, #0]
 800d698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d69c:	4607      	mov	r7, r0
 800d69e:	460c      	mov	r4, r1
 800d6a0:	b10a      	cbz	r2, 800d6a6 <_printf_common+0x26>
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	6033      	str	r3, [r6, #0]
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	0699      	lsls	r1, r3, #26
 800d6aa:	bf42      	ittt	mi
 800d6ac:	6833      	ldrmi	r3, [r6, #0]
 800d6ae:	3302      	addmi	r3, #2
 800d6b0:	6033      	strmi	r3, [r6, #0]
 800d6b2:	6825      	ldr	r5, [r4, #0]
 800d6b4:	f015 0506 	ands.w	r5, r5, #6
 800d6b8:	d106      	bne.n	800d6c8 <_printf_common+0x48>
 800d6ba:	f104 0a19 	add.w	sl, r4, #25
 800d6be:	68e3      	ldr	r3, [r4, #12]
 800d6c0:	6832      	ldr	r2, [r6, #0]
 800d6c2:	1a9b      	subs	r3, r3, r2
 800d6c4:	42ab      	cmp	r3, r5
 800d6c6:	dc26      	bgt.n	800d716 <_printf_common+0x96>
 800d6c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6cc:	1e13      	subs	r3, r2, #0
 800d6ce:	6822      	ldr	r2, [r4, #0]
 800d6d0:	bf18      	it	ne
 800d6d2:	2301      	movne	r3, #1
 800d6d4:	0692      	lsls	r2, r2, #26
 800d6d6:	d42b      	bmi.n	800d730 <_printf_common+0xb0>
 800d6d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6dc:	4649      	mov	r1, r9
 800d6de:	4638      	mov	r0, r7
 800d6e0:	47c0      	blx	r8
 800d6e2:	3001      	adds	r0, #1
 800d6e4:	d01e      	beq.n	800d724 <_printf_common+0xa4>
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	6922      	ldr	r2, [r4, #16]
 800d6ea:	f003 0306 	and.w	r3, r3, #6
 800d6ee:	2b04      	cmp	r3, #4
 800d6f0:	bf02      	ittt	eq
 800d6f2:	68e5      	ldreq	r5, [r4, #12]
 800d6f4:	6833      	ldreq	r3, [r6, #0]
 800d6f6:	1aed      	subeq	r5, r5, r3
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	bf0c      	ite	eq
 800d6fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d700:	2500      	movne	r5, #0
 800d702:	4293      	cmp	r3, r2
 800d704:	bfc4      	itt	gt
 800d706:	1a9b      	subgt	r3, r3, r2
 800d708:	18ed      	addgt	r5, r5, r3
 800d70a:	2600      	movs	r6, #0
 800d70c:	341a      	adds	r4, #26
 800d70e:	42b5      	cmp	r5, r6
 800d710:	d11a      	bne.n	800d748 <_printf_common+0xc8>
 800d712:	2000      	movs	r0, #0
 800d714:	e008      	b.n	800d728 <_printf_common+0xa8>
 800d716:	2301      	movs	r3, #1
 800d718:	4652      	mov	r2, sl
 800d71a:	4649      	mov	r1, r9
 800d71c:	4638      	mov	r0, r7
 800d71e:	47c0      	blx	r8
 800d720:	3001      	adds	r0, #1
 800d722:	d103      	bne.n	800d72c <_printf_common+0xac>
 800d724:	f04f 30ff 	mov.w	r0, #4294967295
 800d728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72c:	3501      	adds	r5, #1
 800d72e:	e7c6      	b.n	800d6be <_printf_common+0x3e>
 800d730:	18e1      	adds	r1, r4, r3
 800d732:	1c5a      	adds	r2, r3, #1
 800d734:	2030      	movs	r0, #48	; 0x30
 800d736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d73a:	4422      	add	r2, r4
 800d73c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d744:	3302      	adds	r3, #2
 800d746:	e7c7      	b.n	800d6d8 <_printf_common+0x58>
 800d748:	2301      	movs	r3, #1
 800d74a:	4622      	mov	r2, r4
 800d74c:	4649      	mov	r1, r9
 800d74e:	4638      	mov	r0, r7
 800d750:	47c0      	blx	r8
 800d752:	3001      	adds	r0, #1
 800d754:	d0e6      	beq.n	800d724 <_printf_common+0xa4>
 800d756:	3601      	adds	r6, #1
 800d758:	e7d9      	b.n	800d70e <_printf_common+0x8e>
	...

0800d75c <_printf_i>:
 800d75c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d760:	7e0f      	ldrb	r7, [r1, #24]
 800d762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d764:	2f78      	cmp	r7, #120	; 0x78
 800d766:	4691      	mov	r9, r2
 800d768:	4680      	mov	r8, r0
 800d76a:	460c      	mov	r4, r1
 800d76c:	469a      	mov	sl, r3
 800d76e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d772:	d807      	bhi.n	800d784 <_printf_i+0x28>
 800d774:	2f62      	cmp	r7, #98	; 0x62
 800d776:	d80a      	bhi.n	800d78e <_printf_i+0x32>
 800d778:	2f00      	cmp	r7, #0
 800d77a:	f000 80d4 	beq.w	800d926 <_printf_i+0x1ca>
 800d77e:	2f58      	cmp	r7, #88	; 0x58
 800d780:	f000 80c0 	beq.w	800d904 <_printf_i+0x1a8>
 800d784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d78c:	e03a      	b.n	800d804 <_printf_i+0xa8>
 800d78e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d792:	2b15      	cmp	r3, #21
 800d794:	d8f6      	bhi.n	800d784 <_printf_i+0x28>
 800d796:	a101      	add	r1, pc, #4	; (adr r1, 800d79c <_printf_i+0x40>)
 800d798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d79c:	0800d7f5 	.word	0x0800d7f5
 800d7a0:	0800d809 	.word	0x0800d809
 800d7a4:	0800d785 	.word	0x0800d785
 800d7a8:	0800d785 	.word	0x0800d785
 800d7ac:	0800d785 	.word	0x0800d785
 800d7b0:	0800d785 	.word	0x0800d785
 800d7b4:	0800d809 	.word	0x0800d809
 800d7b8:	0800d785 	.word	0x0800d785
 800d7bc:	0800d785 	.word	0x0800d785
 800d7c0:	0800d785 	.word	0x0800d785
 800d7c4:	0800d785 	.word	0x0800d785
 800d7c8:	0800d90d 	.word	0x0800d90d
 800d7cc:	0800d835 	.word	0x0800d835
 800d7d0:	0800d8c7 	.word	0x0800d8c7
 800d7d4:	0800d785 	.word	0x0800d785
 800d7d8:	0800d785 	.word	0x0800d785
 800d7dc:	0800d92f 	.word	0x0800d92f
 800d7e0:	0800d785 	.word	0x0800d785
 800d7e4:	0800d835 	.word	0x0800d835
 800d7e8:	0800d785 	.word	0x0800d785
 800d7ec:	0800d785 	.word	0x0800d785
 800d7f0:	0800d8cf 	.word	0x0800d8cf
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	1d1a      	adds	r2, r3, #4
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	602a      	str	r2, [r5, #0]
 800d7fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d804:	2301      	movs	r3, #1
 800d806:	e09f      	b.n	800d948 <_printf_i+0x1ec>
 800d808:	6820      	ldr	r0, [r4, #0]
 800d80a:	682b      	ldr	r3, [r5, #0]
 800d80c:	0607      	lsls	r7, r0, #24
 800d80e:	f103 0104 	add.w	r1, r3, #4
 800d812:	6029      	str	r1, [r5, #0]
 800d814:	d501      	bpl.n	800d81a <_printf_i+0xbe>
 800d816:	681e      	ldr	r6, [r3, #0]
 800d818:	e003      	b.n	800d822 <_printf_i+0xc6>
 800d81a:	0646      	lsls	r6, r0, #25
 800d81c:	d5fb      	bpl.n	800d816 <_printf_i+0xba>
 800d81e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d822:	2e00      	cmp	r6, #0
 800d824:	da03      	bge.n	800d82e <_printf_i+0xd2>
 800d826:	232d      	movs	r3, #45	; 0x2d
 800d828:	4276      	negs	r6, r6
 800d82a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d82e:	485a      	ldr	r0, [pc, #360]	; (800d998 <_printf_i+0x23c>)
 800d830:	230a      	movs	r3, #10
 800d832:	e012      	b.n	800d85a <_printf_i+0xfe>
 800d834:	682b      	ldr	r3, [r5, #0]
 800d836:	6820      	ldr	r0, [r4, #0]
 800d838:	1d19      	adds	r1, r3, #4
 800d83a:	6029      	str	r1, [r5, #0]
 800d83c:	0605      	lsls	r5, r0, #24
 800d83e:	d501      	bpl.n	800d844 <_printf_i+0xe8>
 800d840:	681e      	ldr	r6, [r3, #0]
 800d842:	e002      	b.n	800d84a <_printf_i+0xee>
 800d844:	0641      	lsls	r1, r0, #25
 800d846:	d5fb      	bpl.n	800d840 <_printf_i+0xe4>
 800d848:	881e      	ldrh	r6, [r3, #0]
 800d84a:	4853      	ldr	r0, [pc, #332]	; (800d998 <_printf_i+0x23c>)
 800d84c:	2f6f      	cmp	r7, #111	; 0x6f
 800d84e:	bf0c      	ite	eq
 800d850:	2308      	moveq	r3, #8
 800d852:	230a      	movne	r3, #10
 800d854:	2100      	movs	r1, #0
 800d856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d85a:	6865      	ldr	r5, [r4, #4]
 800d85c:	60a5      	str	r5, [r4, #8]
 800d85e:	2d00      	cmp	r5, #0
 800d860:	bfa2      	ittt	ge
 800d862:	6821      	ldrge	r1, [r4, #0]
 800d864:	f021 0104 	bicge.w	r1, r1, #4
 800d868:	6021      	strge	r1, [r4, #0]
 800d86a:	b90e      	cbnz	r6, 800d870 <_printf_i+0x114>
 800d86c:	2d00      	cmp	r5, #0
 800d86e:	d04b      	beq.n	800d908 <_printf_i+0x1ac>
 800d870:	4615      	mov	r5, r2
 800d872:	fbb6 f1f3 	udiv	r1, r6, r3
 800d876:	fb03 6711 	mls	r7, r3, r1, r6
 800d87a:	5dc7      	ldrb	r7, [r0, r7]
 800d87c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d880:	4637      	mov	r7, r6
 800d882:	42bb      	cmp	r3, r7
 800d884:	460e      	mov	r6, r1
 800d886:	d9f4      	bls.n	800d872 <_printf_i+0x116>
 800d888:	2b08      	cmp	r3, #8
 800d88a:	d10b      	bne.n	800d8a4 <_printf_i+0x148>
 800d88c:	6823      	ldr	r3, [r4, #0]
 800d88e:	07de      	lsls	r6, r3, #31
 800d890:	d508      	bpl.n	800d8a4 <_printf_i+0x148>
 800d892:	6923      	ldr	r3, [r4, #16]
 800d894:	6861      	ldr	r1, [r4, #4]
 800d896:	4299      	cmp	r1, r3
 800d898:	bfde      	ittt	le
 800d89a:	2330      	movle	r3, #48	; 0x30
 800d89c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8a4:	1b52      	subs	r2, r2, r5
 800d8a6:	6122      	str	r2, [r4, #16]
 800d8a8:	f8cd a000 	str.w	sl, [sp]
 800d8ac:	464b      	mov	r3, r9
 800d8ae:	aa03      	add	r2, sp, #12
 800d8b0:	4621      	mov	r1, r4
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	f7ff fee4 	bl	800d680 <_printf_common>
 800d8b8:	3001      	adds	r0, #1
 800d8ba:	d14a      	bne.n	800d952 <_printf_i+0x1f6>
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c0:	b004      	add	sp, #16
 800d8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c6:	6823      	ldr	r3, [r4, #0]
 800d8c8:	f043 0320 	orr.w	r3, r3, #32
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	4833      	ldr	r0, [pc, #204]	; (800d99c <_printf_i+0x240>)
 800d8d0:	2778      	movs	r7, #120	; 0x78
 800d8d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	6829      	ldr	r1, [r5, #0]
 800d8da:	061f      	lsls	r7, r3, #24
 800d8dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8e0:	d402      	bmi.n	800d8e8 <_printf_i+0x18c>
 800d8e2:	065f      	lsls	r7, r3, #25
 800d8e4:	bf48      	it	mi
 800d8e6:	b2b6      	uxthmi	r6, r6
 800d8e8:	07df      	lsls	r7, r3, #31
 800d8ea:	bf48      	it	mi
 800d8ec:	f043 0320 	orrmi.w	r3, r3, #32
 800d8f0:	6029      	str	r1, [r5, #0]
 800d8f2:	bf48      	it	mi
 800d8f4:	6023      	strmi	r3, [r4, #0]
 800d8f6:	b91e      	cbnz	r6, 800d900 <_printf_i+0x1a4>
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	f023 0320 	bic.w	r3, r3, #32
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	2310      	movs	r3, #16
 800d902:	e7a7      	b.n	800d854 <_printf_i+0xf8>
 800d904:	4824      	ldr	r0, [pc, #144]	; (800d998 <_printf_i+0x23c>)
 800d906:	e7e4      	b.n	800d8d2 <_printf_i+0x176>
 800d908:	4615      	mov	r5, r2
 800d90a:	e7bd      	b.n	800d888 <_printf_i+0x12c>
 800d90c:	682b      	ldr	r3, [r5, #0]
 800d90e:	6826      	ldr	r6, [r4, #0]
 800d910:	6961      	ldr	r1, [r4, #20]
 800d912:	1d18      	adds	r0, r3, #4
 800d914:	6028      	str	r0, [r5, #0]
 800d916:	0635      	lsls	r5, r6, #24
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	d501      	bpl.n	800d920 <_printf_i+0x1c4>
 800d91c:	6019      	str	r1, [r3, #0]
 800d91e:	e002      	b.n	800d926 <_printf_i+0x1ca>
 800d920:	0670      	lsls	r0, r6, #25
 800d922:	d5fb      	bpl.n	800d91c <_printf_i+0x1c0>
 800d924:	8019      	strh	r1, [r3, #0]
 800d926:	2300      	movs	r3, #0
 800d928:	6123      	str	r3, [r4, #16]
 800d92a:	4615      	mov	r5, r2
 800d92c:	e7bc      	b.n	800d8a8 <_printf_i+0x14c>
 800d92e:	682b      	ldr	r3, [r5, #0]
 800d930:	1d1a      	adds	r2, r3, #4
 800d932:	602a      	str	r2, [r5, #0]
 800d934:	681d      	ldr	r5, [r3, #0]
 800d936:	6862      	ldr	r2, [r4, #4]
 800d938:	2100      	movs	r1, #0
 800d93a:	4628      	mov	r0, r5
 800d93c:	f7f2 fc80 	bl	8000240 <memchr>
 800d940:	b108      	cbz	r0, 800d946 <_printf_i+0x1ea>
 800d942:	1b40      	subs	r0, r0, r5
 800d944:	6060      	str	r0, [r4, #4]
 800d946:	6863      	ldr	r3, [r4, #4]
 800d948:	6123      	str	r3, [r4, #16]
 800d94a:	2300      	movs	r3, #0
 800d94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d950:	e7aa      	b.n	800d8a8 <_printf_i+0x14c>
 800d952:	6923      	ldr	r3, [r4, #16]
 800d954:	462a      	mov	r2, r5
 800d956:	4649      	mov	r1, r9
 800d958:	4640      	mov	r0, r8
 800d95a:	47d0      	blx	sl
 800d95c:	3001      	adds	r0, #1
 800d95e:	d0ad      	beq.n	800d8bc <_printf_i+0x160>
 800d960:	6823      	ldr	r3, [r4, #0]
 800d962:	079b      	lsls	r3, r3, #30
 800d964:	d413      	bmi.n	800d98e <_printf_i+0x232>
 800d966:	68e0      	ldr	r0, [r4, #12]
 800d968:	9b03      	ldr	r3, [sp, #12]
 800d96a:	4298      	cmp	r0, r3
 800d96c:	bfb8      	it	lt
 800d96e:	4618      	movlt	r0, r3
 800d970:	e7a6      	b.n	800d8c0 <_printf_i+0x164>
 800d972:	2301      	movs	r3, #1
 800d974:	4632      	mov	r2, r6
 800d976:	4649      	mov	r1, r9
 800d978:	4640      	mov	r0, r8
 800d97a:	47d0      	blx	sl
 800d97c:	3001      	adds	r0, #1
 800d97e:	d09d      	beq.n	800d8bc <_printf_i+0x160>
 800d980:	3501      	adds	r5, #1
 800d982:	68e3      	ldr	r3, [r4, #12]
 800d984:	9903      	ldr	r1, [sp, #12]
 800d986:	1a5b      	subs	r3, r3, r1
 800d988:	42ab      	cmp	r3, r5
 800d98a:	dcf2      	bgt.n	800d972 <_printf_i+0x216>
 800d98c:	e7eb      	b.n	800d966 <_printf_i+0x20a>
 800d98e:	2500      	movs	r5, #0
 800d990:	f104 0619 	add.w	r6, r4, #25
 800d994:	e7f5      	b.n	800d982 <_printf_i+0x226>
 800d996:	bf00      	nop
 800d998:	0800e950 	.word	0x0800e950
 800d99c:	0800e961 	.word	0x0800e961

0800d9a0 <_scanf_chars>:
 800d9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9a4:	4615      	mov	r5, r2
 800d9a6:	688a      	ldr	r2, [r1, #8]
 800d9a8:	4680      	mov	r8, r0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	b932      	cbnz	r2, 800d9bc <_scanf_chars+0x1c>
 800d9ae:	698a      	ldr	r2, [r1, #24]
 800d9b0:	2a00      	cmp	r2, #0
 800d9b2:	bf0c      	ite	eq
 800d9b4:	2201      	moveq	r2, #1
 800d9b6:	f04f 32ff 	movne.w	r2, #4294967295
 800d9ba:	608a      	str	r2, [r1, #8]
 800d9bc:	6822      	ldr	r2, [r4, #0]
 800d9be:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800da50 <_scanf_chars+0xb0>
 800d9c2:	06d1      	lsls	r1, r2, #27
 800d9c4:	bf5f      	itttt	pl
 800d9c6:	681a      	ldrpl	r2, [r3, #0]
 800d9c8:	1d11      	addpl	r1, r2, #4
 800d9ca:	6019      	strpl	r1, [r3, #0]
 800d9cc:	6816      	ldrpl	r6, [r2, #0]
 800d9ce:	2700      	movs	r7, #0
 800d9d0:	69a0      	ldr	r0, [r4, #24]
 800d9d2:	b188      	cbz	r0, 800d9f8 <_scanf_chars+0x58>
 800d9d4:	2801      	cmp	r0, #1
 800d9d6:	d107      	bne.n	800d9e8 <_scanf_chars+0x48>
 800d9d8:	682a      	ldr	r2, [r5, #0]
 800d9da:	7811      	ldrb	r1, [r2, #0]
 800d9dc:	6962      	ldr	r2, [r4, #20]
 800d9de:	5c52      	ldrb	r2, [r2, r1]
 800d9e0:	b952      	cbnz	r2, 800d9f8 <_scanf_chars+0x58>
 800d9e2:	2f00      	cmp	r7, #0
 800d9e4:	d031      	beq.n	800da4a <_scanf_chars+0xaa>
 800d9e6:	e022      	b.n	800da2e <_scanf_chars+0x8e>
 800d9e8:	2802      	cmp	r0, #2
 800d9ea:	d120      	bne.n	800da2e <_scanf_chars+0x8e>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d9f4:	071b      	lsls	r3, r3, #28
 800d9f6:	d41a      	bmi.n	800da2e <_scanf_chars+0x8e>
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	06da      	lsls	r2, r3, #27
 800d9fc:	bf5e      	ittt	pl
 800d9fe:	682b      	ldrpl	r3, [r5, #0]
 800da00:	781b      	ldrbpl	r3, [r3, #0]
 800da02:	f806 3b01 	strbpl.w	r3, [r6], #1
 800da06:	682a      	ldr	r2, [r5, #0]
 800da08:	686b      	ldr	r3, [r5, #4]
 800da0a:	3201      	adds	r2, #1
 800da0c:	602a      	str	r2, [r5, #0]
 800da0e:	68a2      	ldr	r2, [r4, #8]
 800da10:	3b01      	subs	r3, #1
 800da12:	3a01      	subs	r2, #1
 800da14:	606b      	str	r3, [r5, #4]
 800da16:	3701      	adds	r7, #1
 800da18:	60a2      	str	r2, [r4, #8]
 800da1a:	b142      	cbz	r2, 800da2e <_scanf_chars+0x8e>
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	dcd7      	bgt.n	800d9d0 <_scanf_chars+0x30>
 800da20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800da24:	4629      	mov	r1, r5
 800da26:	4640      	mov	r0, r8
 800da28:	4798      	blx	r3
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d0d0      	beq.n	800d9d0 <_scanf_chars+0x30>
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	f013 0310 	ands.w	r3, r3, #16
 800da34:	d105      	bne.n	800da42 <_scanf_chars+0xa2>
 800da36:	68e2      	ldr	r2, [r4, #12]
 800da38:	3201      	adds	r2, #1
 800da3a:	60e2      	str	r2, [r4, #12]
 800da3c:	69a2      	ldr	r2, [r4, #24]
 800da3e:	b102      	cbz	r2, 800da42 <_scanf_chars+0xa2>
 800da40:	7033      	strb	r3, [r6, #0]
 800da42:	6923      	ldr	r3, [r4, #16]
 800da44:	443b      	add	r3, r7
 800da46:	6123      	str	r3, [r4, #16]
 800da48:	2000      	movs	r0, #0
 800da4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da4e:	bf00      	nop
 800da50:	0800e98e 	.word	0x0800e98e

0800da54 <_scanf_i>:
 800da54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da58:	4698      	mov	r8, r3
 800da5a:	4b74      	ldr	r3, [pc, #464]	; (800dc2c <_scanf_i+0x1d8>)
 800da5c:	460c      	mov	r4, r1
 800da5e:	4682      	mov	sl, r0
 800da60:	4616      	mov	r6, r2
 800da62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da66:	b087      	sub	sp, #28
 800da68:	ab03      	add	r3, sp, #12
 800da6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800da6e:	4b70      	ldr	r3, [pc, #448]	; (800dc30 <_scanf_i+0x1dc>)
 800da70:	69a1      	ldr	r1, [r4, #24]
 800da72:	4a70      	ldr	r2, [pc, #448]	; (800dc34 <_scanf_i+0x1e0>)
 800da74:	2903      	cmp	r1, #3
 800da76:	bf18      	it	ne
 800da78:	461a      	movne	r2, r3
 800da7a:	68a3      	ldr	r3, [r4, #8]
 800da7c:	9201      	str	r2, [sp, #4]
 800da7e:	1e5a      	subs	r2, r3, #1
 800da80:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800da84:	bf88      	it	hi
 800da86:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800da8a:	4627      	mov	r7, r4
 800da8c:	bf82      	ittt	hi
 800da8e:	eb03 0905 	addhi.w	r9, r3, r5
 800da92:	f240 135d 	movwhi	r3, #349	; 0x15d
 800da96:	60a3      	strhi	r3, [r4, #8]
 800da98:	f857 3b1c 	ldr.w	r3, [r7], #28
 800da9c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800daa0:	bf98      	it	ls
 800daa2:	f04f 0900 	movls.w	r9, #0
 800daa6:	6023      	str	r3, [r4, #0]
 800daa8:	463d      	mov	r5, r7
 800daaa:	f04f 0b00 	mov.w	fp, #0
 800daae:	6831      	ldr	r1, [r6, #0]
 800dab0:	ab03      	add	r3, sp, #12
 800dab2:	7809      	ldrb	r1, [r1, #0]
 800dab4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dab8:	2202      	movs	r2, #2
 800daba:	f7f2 fbc1 	bl	8000240 <memchr>
 800dabe:	b328      	cbz	r0, 800db0c <_scanf_i+0xb8>
 800dac0:	f1bb 0f01 	cmp.w	fp, #1
 800dac4:	d159      	bne.n	800db7a <_scanf_i+0x126>
 800dac6:	6862      	ldr	r2, [r4, #4]
 800dac8:	b92a      	cbnz	r2, 800dad6 <_scanf_i+0x82>
 800daca:	6822      	ldr	r2, [r4, #0]
 800dacc:	2308      	movs	r3, #8
 800dace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dad2:	6063      	str	r3, [r4, #4]
 800dad4:	6022      	str	r2, [r4, #0]
 800dad6:	6822      	ldr	r2, [r4, #0]
 800dad8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800dadc:	6022      	str	r2, [r4, #0]
 800dade:	68a2      	ldr	r2, [r4, #8]
 800dae0:	1e51      	subs	r1, r2, #1
 800dae2:	60a1      	str	r1, [r4, #8]
 800dae4:	b192      	cbz	r2, 800db0c <_scanf_i+0xb8>
 800dae6:	6832      	ldr	r2, [r6, #0]
 800dae8:	1c51      	adds	r1, r2, #1
 800daea:	6031      	str	r1, [r6, #0]
 800daec:	7812      	ldrb	r2, [r2, #0]
 800daee:	f805 2b01 	strb.w	r2, [r5], #1
 800daf2:	6872      	ldr	r2, [r6, #4]
 800daf4:	3a01      	subs	r2, #1
 800daf6:	2a00      	cmp	r2, #0
 800daf8:	6072      	str	r2, [r6, #4]
 800dafa:	dc07      	bgt.n	800db0c <_scanf_i+0xb8>
 800dafc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800db00:	4631      	mov	r1, r6
 800db02:	4650      	mov	r0, sl
 800db04:	4790      	blx	r2
 800db06:	2800      	cmp	r0, #0
 800db08:	f040 8085 	bne.w	800dc16 <_scanf_i+0x1c2>
 800db0c:	f10b 0b01 	add.w	fp, fp, #1
 800db10:	f1bb 0f03 	cmp.w	fp, #3
 800db14:	d1cb      	bne.n	800daae <_scanf_i+0x5a>
 800db16:	6863      	ldr	r3, [r4, #4]
 800db18:	b90b      	cbnz	r3, 800db1e <_scanf_i+0xca>
 800db1a:	230a      	movs	r3, #10
 800db1c:	6063      	str	r3, [r4, #4]
 800db1e:	6863      	ldr	r3, [r4, #4]
 800db20:	4945      	ldr	r1, [pc, #276]	; (800dc38 <_scanf_i+0x1e4>)
 800db22:	6960      	ldr	r0, [r4, #20]
 800db24:	1ac9      	subs	r1, r1, r3
 800db26:	f000 f937 	bl	800dd98 <__sccl>
 800db2a:	f04f 0b00 	mov.w	fp, #0
 800db2e:	68a3      	ldr	r3, [r4, #8]
 800db30:	6822      	ldr	r2, [r4, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d03d      	beq.n	800dbb2 <_scanf_i+0x15e>
 800db36:	6831      	ldr	r1, [r6, #0]
 800db38:	6960      	ldr	r0, [r4, #20]
 800db3a:	f891 c000 	ldrb.w	ip, [r1]
 800db3e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800db42:	2800      	cmp	r0, #0
 800db44:	d035      	beq.n	800dbb2 <_scanf_i+0x15e>
 800db46:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800db4a:	d124      	bne.n	800db96 <_scanf_i+0x142>
 800db4c:	0510      	lsls	r0, r2, #20
 800db4e:	d522      	bpl.n	800db96 <_scanf_i+0x142>
 800db50:	f10b 0b01 	add.w	fp, fp, #1
 800db54:	f1b9 0f00 	cmp.w	r9, #0
 800db58:	d003      	beq.n	800db62 <_scanf_i+0x10e>
 800db5a:	3301      	adds	r3, #1
 800db5c:	f109 39ff 	add.w	r9, r9, #4294967295
 800db60:	60a3      	str	r3, [r4, #8]
 800db62:	6873      	ldr	r3, [r6, #4]
 800db64:	3b01      	subs	r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	6073      	str	r3, [r6, #4]
 800db6a:	dd1b      	ble.n	800dba4 <_scanf_i+0x150>
 800db6c:	6833      	ldr	r3, [r6, #0]
 800db6e:	3301      	adds	r3, #1
 800db70:	6033      	str	r3, [r6, #0]
 800db72:	68a3      	ldr	r3, [r4, #8]
 800db74:	3b01      	subs	r3, #1
 800db76:	60a3      	str	r3, [r4, #8]
 800db78:	e7d9      	b.n	800db2e <_scanf_i+0xda>
 800db7a:	f1bb 0f02 	cmp.w	fp, #2
 800db7e:	d1ae      	bne.n	800dade <_scanf_i+0x8a>
 800db80:	6822      	ldr	r2, [r4, #0]
 800db82:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800db86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800db8a:	d1bf      	bne.n	800db0c <_scanf_i+0xb8>
 800db8c:	2310      	movs	r3, #16
 800db8e:	6063      	str	r3, [r4, #4]
 800db90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db94:	e7a2      	b.n	800dadc <_scanf_i+0x88>
 800db96:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800db9a:	6022      	str	r2, [r4, #0]
 800db9c:	780b      	ldrb	r3, [r1, #0]
 800db9e:	f805 3b01 	strb.w	r3, [r5], #1
 800dba2:	e7de      	b.n	800db62 <_scanf_i+0x10e>
 800dba4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dba8:	4631      	mov	r1, r6
 800dbaa:	4650      	mov	r0, sl
 800dbac:	4798      	blx	r3
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d0df      	beq.n	800db72 <_scanf_i+0x11e>
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	05d9      	lsls	r1, r3, #23
 800dbb6:	d50d      	bpl.n	800dbd4 <_scanf_i+0x180>
 800dbb8:	42bd      	cmp	r5, r7
 800dbba:	d909      	bls.n	800dbd0 <_scanf_i+0x17c>
 800dbbc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dbc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbc4:	4632      	mov	r2, r6
 800dbc6:	4650      	mov	r0, sl
 800dbc8:	4798      	blx	r3
 800dbca:	f105 39ff 	add.w	r9, r5, #4294967295
 800dbce:	464d      	mov	r5, r9
 800dbd0:	42bd      	cmp	r5, r7
 800dbd2:	d028      	beq.n	800dc26 <_scanf_i+0x1d2>
 800dbd4:	6822      	ldr	r2, [r4, #0]
 800dbd6:	f012 0210 	ands.w	r2, r2, #16
 800dbda:	d113      	bne.n	800dc04 <_scanf_i+0x1b0>
 800dbdc:	702a      	strb	r2, [r5, #0]
 800dbde:	6863      	ldr	r3, [r4, #4]
 800dbe0:	9e01      	ldr	r6, [sp, #4]
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	4650      	mov	r0, sl
 800dbe6:	47b0      	blx	r6
 800dbe8:	f8d8 3000 	ldr.w	r3, [r8]
 800dbec:	6821      	ldr	r1, [r4, #0]
 800dbee:	1d1a      	adds	r2, r3, #4
 800dbf0:	f8c8 2000 	str.w	r2, [r8]
 800dbf4:	f011 0f20 	tst.w	r1, #32
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	d00f      	beq.n	800dc1c <_scanf_i+0x1c8>
 800dbfc:	6018      	str	r0, [r3, #0]
 800dbfe:	68e3      	ldr	r3, [r4, #12]
 800dc00:	3301      	adds	r3, #1
 800dc02:	60e3      	str	r3, [r4, #12]
 800dc04:	6923      	ldr	r3, [r4, #16]
 800dc06:	1bed      	subs	r5, r5, r7
 800dc08:	445d      	add	r5, fp
 800dc0a:	442b      	add	r3, r5
 800dc0c:	6123      	str	r3, [r4, #16]
 800dc0e:	2000      	movs	r0, #0
 800dc10:	b007      	add	sp, #28
 800dc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc16:	f04f 0b00 	mov.w	fp, #0
 800dc1a:	e7ca      	b.n	800dbb2 <_scanf_i+0x15e>
 800dc1c:	07ca      	lsls	r2, r1, #31
 800dc1e:	bf4c      	ite	mi
 800dc20:	8018      	strhmi	r0, [r3, #0]
 800dc22:	6018      	strpl	r0, [r3, #0]
 800dc24:	e7eb      	b.n	800dbfe <_scanf_i+0x1aa>
 800dc26:	2001      	movs	r0, #1
 800dc28:	e7f2      	b.n	800dc10 <_scanf_i+0x1bc>
 800dc2a:	bf00      	nop
 800dc2c:	0800e8b4 	.word	0x0800e8b4
 800dc30:	0800e2d1 	.word	0x0800e2d1
 800dc34:	0800e1e9 	.word	0x0800e1e9
 800dc38:	0800e982 	.word	0x0800e982

0800dc3c <__sflush_r>:
 800dc3c:	898a      	ldrh	r2, [r1, #12]
 800dc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc42:	4605      	mov	r5, r0
 800dc44:	0710      	lsls	r0, r2, #28
 800dc46:	460c      	mov	r4, r1
 800dc48:	d458      	bmi.n	800dcfc <__sflush_r+0xc0>
 800dc4a:	684b      	ldr	r3, [r1, #4]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	dc05      	bgt.n	800dc5c <__sflush_r+0x20>
 800dc50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	dc02      	bgt.n	800dc5c <__sflush_r+0x20>
 800dc56:	2000      	movs	r0, #0
 800dc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc5e:	2e00      	cmp	r6, #0
 800dc60:	d0f9      	beq.n	800dc56 <__sflush_r+0x1a>
 800dc62:	2300      	movs	r3, #0
 800dc64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc68:	682f      	ldr	r7, [r5, #0]
 800dc6a:	6a21      	ldr	r1, [r4, #32]
 800dc6c:	602b      	str	r3, [r5, #0]
 800dc6e:	d032      	beq.n	800dcd6 <__sflush_r+0x9a>
 800dc70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc72:	89a3      	ldrh	r3, [r4, #12]
 800dc74:	075a      	lsls	r2, r3, #29
 800dc76:	d505      	bpl.n	800dc84 <__sflush_r+0x48>
 800dc78:	6863      	ldr	r3, [r4, #4]
 800dc7a:	1ac0      	subs	r0, r0, r3
 800dc7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc7e:	b10b      	cbz	r3, 800dc84 <__sflush_r+0x48>
 800dc80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc82:	1ac0      	subs	r0, r0, r3
 800dc84:	2300      	movs	r3, #0
 800dc86:	4602      	mov	r2, r0
 800dc88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc8a:	6a21      	ldr	r1, [r4, #32]
 800dc8c:	4628      	mov	r0, r5
 800dc8e:	47b0      	blx	r6
 800dc90:	1c43      	adds	r3, r0, #1
 800dc92:	89a3      	ldrh	r3, [r4, #12]
 800dc94:	d106      	bne.n	800dca4 <__sflush_r+0x68>
 800dc96:	6829      	ldr	r1, [r5, #0]
 800dc98:	291d      	cmp	r1, #29
 800dc9a:	d82b      	bhi.n	800dcf4 <__sflush_r+0xb8>
 800dc9c:	4a29      	ldr	r2, [pc, #164]	; (800dd44 <__sflush_r+0x108>)
 800dc9e:	410a      	asrs	r2, r1
 800dca0:	07d6      	lsls	r6, r2, #31
 800dca2:	d427      	bmi.n	800dcf4 <__sflush_r+0xb8>
 800dca4:	2200      	movs	r2, #0
 800dca6:	6062      	str	r2, [r4, #4]
 800dca8:	04d9      	lsls	r1, r3, #19
 800dcaa:	6922      	ldr	r2, [r4, #16]
 800dcac:	6022      	str	r2, [r4, #0]
 800dcae:	d504      	bpl.n	800dcba <__sflush_r+0x7e>
 800dcb0:	1c42      	adds	r2, r0, #1
 800dcb2:	d101      	bne.n	800dcb8 <__sflush_r+0x7c>
 800dcb4:	682b      	ldr	r3, [r5, #0]
 800dcb6:	b903      	cbnz	r3, 800dcba <__sflush_r+0x7e>
 800dcb8:	6560      	str	r0, [r4, #84]	; 0x54
 800dcba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcbc:	602f      	str	r7, [r5, #0]
 800dcbe:	2900      	cmp	r1, #0
 800dcc0:	d0c9      	beq.n	800dc56 <__sflush_r+0x1a>
 800dcc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcc6:	4299      	cmp	r1, r3
 800dcc8:	d002      	beq.n	800dcd0 <__sflush_r+0x94>
 800dcca:	4628      	mov	r0, r5
 800dccc:	f7fe ff72 	bl	800cbb4 <_free_r>
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	6360      	str	r0, [r4, #52]	; 0x34
 800dcd4:	e7c0      	b.n	800dc58 <__sflush_r+0x1c>
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	4628      	mov	r0, r5
 800dcda:	47b0      	blx	r6
 800dcdc:	1c41      	adds	r1, r0, #1
 800dcde:	d1c8      	bne.n	800dc72 <__sflush_r+0x36>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d0c5      	beq.n	800dc72 <__sflush_r+0x36>
 800dce6:	2b1d      	cmp	r3, #29
 800dce8:	d001      	beq.n	800dcee <__sflush_r+0xb2>
 800dcea:	2b16      	cmp	r3, #22
 800dcec:	d101      	bne.n	800dcf2 <__sflush_r+0xb6>
 800dcee:	602f      	str	r7, [r5, #0]
 800dcf0:	e7b1      	b.n	800dc56 <__sflush_r+0x1a>
 800dcf2:	89a3      	ldrh	r3, [r4, #12]
 800dcf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf8:	81a3      	strh	r3, [r4, #12]
 800dcfa:	e7ad      	b.n	800dc58 <__sflush_r+0x1c>
 800dcfc:	690f      	ldr	r7, [r1, #16]
 800dcfe:	2f00      	cmp	r7, #0
 800dd00:	d0a9      	beq.n	800dc56 <__sflush_r+0x1a>
 800dd02:	0793      	lsls	r3, r2, #30
 800dd04:	680e      	ldr	r6, [r1, #0]
 800dd06:	bf08      	it	eq
 800dd08:	694b      	ldreq	r3, [r1, #20]
 800dd0a:	600f      	str	r7, [r1, #0]
 800dd0c:	bf18      	it	ne
 800dd0e:	2300      	movne	r3, #0
 800dd10:	eba6 0807 	sub.w	r8, r6, r7
 800dd14:	608b      	str	r3, [r1, #8]
 800dd16:	f1b8 0f00 	cmp.w	r8, #0
 800dd1a:	dd9c      	ble.n	800dc56 <__sflush_r+0x1a>
 800dd1c:	6a21      	ldr	r1, [r4, #32]
 800dd1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd20:	4643      	mov	r3, r8
 800dd22:	463a      	mov	r2, r7
 800dd24:	4628      	mov	r0, r5
 800dd26:	47b0      	blx	r6
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	dc06      	bgt.n	800dd3a <__sflush_r+0xfe>
 800dd2c:	89a3      	ldrh	r3, [r4, #12]
 800dd2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd32:	81a3      	strh	r3, [r4, #12]
 800dd34:	f04f 30ff 	mov.w	r0, #4294967295
 800dd38:	e78e      	b.n	800dc58 <__sflush_r+0x1c>
 800dd3a:	4407      	add	r7, r0
 800dd3c:	eba8 0800 	sub.w	r8, r8, r0
 800dd40:	e7e9      	b.n	800dd16 <__sflush_r+0xda>
 800dd42:	bf00      	nop
 800dd44:	dfbffffe 	.word	0xdfbffffe

0800dd48 <_fflush_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	690b      	ldr	r3, [r1, #16]
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	460c      	mov	r4, r1
 800dd50:	b913      	cbnz	r3, 800dd58 <_fflush_r+0x10>
 800dd52:	2500      	movs	r5, #0
 800dd54:	4628      	mov	r0, r5
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	b118      	cbz	r0, 800dd62 <_fflush_r+0x1a>
 800dd5a:	6a03      	ldr	r3, [r0, #32]
 800dd5c:	b90b      	cbnz	r3, 800dd62 <_fflush_r+0x1a>
 800dd5e:	f7fe fd79 	bl	800c854 <__sinit>
 800dd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d0f3      	beq.n	800dd52 <_fflush_r+0xa>
 800dd6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd6c:	07d0      	lsls	r0, r2, #31
 800dd6e:	d404      	bmi.n	800dd7a <_fflush_r+0x32>
 800dd70:	0599      	lsls	r1, r3, #22
 800dd72:	d402      	bmi.n	800dd7a <_fflush_r+0x32>
 800dd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd76:	f7fe ff06 	bl	800cb86 <__retarget_lock_acquire_recursive>
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	f7ff ff5d 	bl	800dc3c <__sflush_r>
 800dd82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd84:	07da      	lsls	r2, r3, #31
 800dd86:	4605      	mov	r5, r0
 800dd88:	d4e4      	bmi.n	800dd54 <_fflush_r+0xc>
 800dd8a:	89a3      	ldrh	r3, [r4, #12]
 800dd8c:	059b      	lsls	r3, r3, #22
 800dd8e:	d4e1      	bmi.n	800dd54 <_fflush_r+0xc>
 800dd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd92:	f7fe fef9 	bl	800cb88 <__retarget_lock_release_recursive>
 800dd96:	e7dd      	b.n	800dd54 <_fflush_r+0xc>

0800dd98 <__sccl>:
 800dd98:	b570      	push	{r4, r5, r6, lr}
 800dd9a:	780b      	ldrb	r3, [r1, #0]
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	2b5e      	cmp	r3, #94	; 0x5e
 800dda0:	bf0b      	itete	eq
 800dda2:	784b      	ldrbeq	r3, [r1, #1]
 800dda4:	1c4a      	addne	r2, r1, #1
 800dda6:	1c8a      	addeq	r2, r1, #2
 800dda8:	2100      	movne	r1, #0
 800ddaa:	bf08      	it	eq
 800ddac:	2101      	moveq	r1, #1
 800ddae:	3801      	subs	r0, #1
 800ddb0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ddb4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ddb8:	42a8      	cmp	r0, r5
 800ddba:	d1fb      	bne.n	800ddb4 <__sccl+0x1c>
 800ddbc:	b90b      	cbnz	r3, 800ddc2 <__sccl+0x2a>
 800ddbe:	1e50      	subs	r0, r2, #1
 800ddc0:	bd70      	pop	{r4, r5, r6, pc}
 800ddc2:	f081 0101 	eor.w	r1, r1, #1
 800ddc6:	54e1      	strb	r1, [r4, r3]
 800ddc8:	4610      	mov	r0, r2
 800ddca:	4602      	mov	r2, r0
 800ddcc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ddd0:	2d2d      	cmp	r5, #45	; 0x2d
 800ddd2:	d005      	beq.n	800dde0 <__sccl+0x48>
 800ddd4:	2d5d      	cmp	r5, #93	; 0x5d
 800ddd6:	d016      	beq.n	800de06 <__sccl+0x6e>
 800ddd8:	2d00      	cmp	r5, #0
 800ddda:	d0f1      	beq.n	800ddc0 <__sccl+0x28>
 800dddc:	462b      	mov	r3, r5
 800ddde:	e7f2      	b.n	800ddc6 <__sccl+0x2e>
 800dde0:	7846      	ldrb	r6, [r0, #1]
 800dde2:	2e5d      	cmp	r6, #93	; 0x5d
 800dde4:	d0fa      	beq.n	800dddc <__sccl+0x44>
 800dde6:	42b3      	cmp	r3, r6
 800dde8:	dcf8      	bgt.n	800dddc <__sccl+0x44>
 800ddea:	3002      	adds	r0, #2
 800ddec:	461a      	mov	r2, r3
 800ddee:	3201      	adds	r2, #1
 800ddf0:	4296      	cmp	r6, r2
 800ddf2:	54a1      	strb	r1, [r4, r2]
 800ddf4:	dcfb      	bgt.n	800ddee <__sccl+0x56>
 800ddf6:	1af2      	subs	r2, r6, r3
 800ddf8:	3a01      	subs	r2, #1
 800ddfa:	1c5d      	adds	r5, r3, #1
 800ddfc:	42b3      	cmp	r3, r6
 800ddfe:	bfa8      	it	ge
 800de00:	2200      	movge	r2, #0
 800de02:	18ab      	adds	r3, r5, r2
 800de04:	e7e1      	b.n	800ddca <__sccl+0x32>
 800de06:	4610      	mov	r0, r2
 800de08:	e7da      	b.n	800ddc0 <__sccl+0x28>

0800de0a <__submore>:
 800de0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de0e:	460c      	mov	r4, r1
 800de10:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800de12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de16:	4299      	cmp	r1, r3
 800de18:	d11d      	bne.n	800de56 <__submore+0x4c>
 800de1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800de1e:	f7fe ff35 	bl	800cc8c <_malloc_r>
 800de22:	b918      	cbnz	r0, 800de2c <__submore+0x22>
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de30:	63a3      	str	r3, [r4, #56]	; 0x38
 800de32:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800de36:	6360      	str	r0, [r4, #52]	; 0x34
 800de38:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800de3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800de40:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800de44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800de48:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800de4c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800de50:	6020      	str	r0, [r4, #0]
 800de52:	2000      	movs	r0, #0
 800de54:	e7e8      	b.n	800de28 <__submore+0x1e>
 800de56:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800de58:	0077      	lsls	r7, r6, #1
 800de5a:	463a      	mov	r2, r7
 800de5c:	f000 f912 	bl	800e084 <_realloc_r>
 800de60:	4605      	mov	r5, r0
 800de62:	2800      	cmp	r0, #0
 800de64:	d0de      	beq.n	800de24 <__submore+0x1a>
 800de66:	eb00 0806 	add.w	r8, r0, r6
 800de6a:	4601      	mov	r1, r0
 800de6c:	4632      	mov	r2, r6
 800de6e:	4640      	mov	r0, r8
 800de70:	f7fe fe8b 	bl	800cb8a <memcpy>
 800de74:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800de78:	f8c4 8000 	str.w	r8, [r4]
 800de7c:	e7e9      	b.n	800de52 <__submore+0x48>

0800de7e <__swbuf_r>:
 800de7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de80:	460e      	mov	r6, r1
 800de82:	4614      	mov	r4, r2
 800de84:	4605      	mov	r5, r0
 800de86:	b118      	cbz	r0, 800de90 <__swbuf_r+0x12>
 800de88:	6a03      	ldr	r3, [r0, #32]
 800de8a:	b90b      	cbnz	r3, 800de90 <__swbuf_r+0x12>
 800de8c:	f7fe fce2 	bl	800c854 <__sinit>
 800de90:	69a3      	ldr	r3, [r4, #24]
 800de92:	60a3      	str	r3, [r4, #8]
 800de94:	89a3      	ldrh	r3, [r4, #12]
 800de96:	071a      	lsls	r2, r3, #28
 800de98:	d525      	bpl.n	800dee6 <__swbuf_r+0x68>
 800de9a:	6923      	ldr	r3, [r4, #16]
 800de9c:	b31b      	cbz	r3, 800dee6 <__swbuf_r+0x68>
 800de9e:	6823      	ldr	r3, [r4, #0]
 800dea0:	6922      	ldr	r2, [r4, #16]
 800dea2:	1a98      	subs	r0, r3, r2
 800dea4:	6963      	ldr	r3, [r4, #20]
 800dea6:	b2f6      	uxtb	r6, r6
 800dea8:	4283      	cmp	r3, r0
 800deaa:	4637      	mov	r7, r6
 800deac:	dc04      	bgt.n	800deb8 <__swbuf_r+0x3a>
 800deae:	4621      	mov	r1, r4
 800deb0:	4628      	mov	r0, r5
 800deb2:	f7ff ff49 	bl	800dd48 <_fflush_r>
 800deb6:	b9e0      	cbnz	r0, 800def2 <__swbuf_r+0x74>
 800deb8:	68a3      	ldr	r3, [r4, #8]
 800deba:	3b01      	subs	r3, #1
 800debc:	60a3      	str	r3, [r4, #8]
 800debe:	6823      	ldr	r3, [r4, #0]
 800dec0:	1c5a      	adds	r2, r3, #1
 800dec2:	6022      	str	r2, [r4, #0]
 800dec4:	701e      	strb	r6, [r3, #0]
 800dec6:	6962      	ldr	r2, [r4, #20]
 800dec8:	1c43      	adds	r3, r0, #1
 800deca:	429a      	cmp	r2, r3
 800decc:	d004      	beq.n	800ded8 <__swbuf_r+0x5a>
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	07db      	lsls	r3, r3, #31
 800ded2:	d506      	bpl.n	800dee2 <__swbuf_r+0x64>
 800ded4:	2e0a      	cmp	r6, #10
 800ded6:	d104      	bne.n	800dee2 <__swbuf_r+0x64>
 800ded8:	4621      	mov	r1, r4
 800deda:	4628      	mov	r0, r5
 800dedc:	f7ff ff34 	bl	800dd48 <_fflush_r>
 800dee0:	b938      	cbnz	r0, 800def2 <__swbuf_r+0x74>
 800dee2:	4638      	mov	r0, r7
 800dee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dee6:	4621      	mov	r1, r4
 800dee8:	4628      	mov	r0, r5
 800deea:	f000 f805 	bl	800def8 <__swsetup_r>
 800deee:	2800      	cmp	r0, #0
 800def0:	d0d5      	beq.n	800de9e <__swbuf_r+0x20>
 800def2:	f04f 37ff 	mov.w	r7, #4294967295
 800def6:	e7f4      	b.n	800dee2 <__swbuf_r+0x64>

0800def8 <__swsetup_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	4b2a      	ldr	r3, [pc, #168]	; (800dfa4 <__swsetup_r+0xac>)
 800defc:	4605      	mov	r5, r0
 800defe:	6818      	ldr	r0, [r3, #0]
 800df00:	460c      	mov	r4, r1
 800df02:	b118      	cbz	r0, 800df0c <__swsetup_r+0x14>
 800df04:	6a03      	ldr	r3, [r0, #32]
 800df06:	b90b      	cbnz	r3, 800df0c <__swsetup_r+0x14>
 800df08:	f7fe fca4 	bl	800c854 <__sinit>
 800df0c:	89a3      	ldrh	r3, [r4, #12]
 800df0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df12:	0718      	lsls	r0, r3, #28
 800df14:	d422      	bmi.n	800df5c <__swsetup_r+0x64>
 800df16:	06d9      	lsls	r1, r3, #27
 800df18:	d407      	bmi.n	800df2a <__swsetup_r+0x32>
 800df1a:	2309      	movs	r3, #9
 800df1c:	602b      	str	r3, [r5, #0]
 800df1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df22:	81a3      	strh	r3, [r4, #12]
 800df24:	f04f 30ff 	mov.w	r0, #4294967295
 800df28:	e034      	b.n	800df94 <__swsetup_r+0x9c>
 800df2a:	0758      	lsls	r0, r3, #29
 800df2c:	d512      	bpl.n	800df54 <__swsetup_r+0x5c>
 800df2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df30:	b141      	cbz	r1, 800df44 <__swsetup_r+0x4c>
 800df32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df36:	4299      	cmp	r1, r3
 800df38:	d002      	beq.n	800df40 <__swsetup_r+0x48>
 800df3a:	4628      	mov	r0, r5
 800df3c:	f7fe fe3a 	bl	800cbb4 <_free_r>
 800df40:	2300      	movs	r3, #0
 800df42:	6363      	str	r3, [r4, #52]	; 0x34
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df4a:	81a3      	strh	r3, [r4, #12]
 800df4c:	2300      	movs	r3, #0
 800df4e:	6063      	str	r3, [r4, #4]
 800df50:	6923      	ldr	r3, [r4, #16]
 800df52:	6023      	str	r3, [r4, #0]
 800df54:	89a3      	ldrh	r3, [r4, #12]
 800df56:	f043 0308 	orr.w	r3, r3, #8
 800df5a:	81a3      	strh	r3, [r4, #12]
 800df5c:	6923      	ldr	r3, [r4, #16]
 800df5e:	b94b      	cbnz	r3, 800df74 <__swsetup_r+0x7c>
 800df60:	89a3      	ldrh	r3, [r4, #12]
 800df62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df6a:	d003      	beq.n	800df74 <__swsetup_r+0x7c>
 800df6c:	4621      	mov	r1, r4
 800df6e:	4628      	mov	r0, r5
 800df70:	f000 f9d6 	bl	800e320 <__smakebuf_r>
 800df74:	89a0      	ldrh	r0, [r4, #12]
 800df76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df7a:	f010 0301 	ands.w	r3, r0, #1
 800df7e:	d00a      	beq.n	800df96 <__swsetup_r+0x9e>
 800df80:	2300      	movs	r3, #0
 800df82:	60a3      	str	r3, [r4, #8]
 800df84:	6963      	ldr	r3, [r4, #20]
 800df86:	425b      	negs	r3, r3
 800df88:	61a3      	str	r3, [r4, #24]
 800df8a:	6923      	ldr	r3, [r4, #16]
 800df8c:	b943      	cbnz	r3, 800dfa0 <__swsetup_r+0xa8>
 800df8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800df92:	d1c4      	bne.n	800df1e <__swsetup_r+0x26>
 800df94:	bd38      	pop	{r3, r4, r5, pc}
 800df96:	0781      	lsls	r1, r0, #30
 800df98:	bf58      	it	pl
 800df9a:	6963      	ldrpl	r3, [r4, #20]
 800df9c:	60a3      	str	r3, [r4, #8]
 800df9e:	e7f4      	b.n	800df8a <__swsetup_r+0x92>
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	e7f7      	b.n	800df94 <__swsetup_r+0x9c>
 800dfa4:	20000164 	.word	0x20000164

0800dfa8 <memmove>:
 800dfa8:	4288      	cmp	r0, r1
 800dfaa:	b510      	push	{r4, lr}
 800dfac:	eb01 0402 	add.w	r4, r1, r2
 800dfb0:	d902      	bls.n	800dfb8 <memmove+0x10>
 800dfb2:	4284      	cmp	r4, r0
 800dfb4:	4623      	mov	r3, r4
 800dfb6:	d807      	bhi.n	800dfc8 <memmove+0x20>
 800dfb8:	1e43      	subs	r3, r0, #1
 800dfba:	42a1      	cmp	r1, r4
 800dfbc:	d008      	beq.n	800dfd0 <memmove+0x28>
 800dfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfc6:	e7f8      	b.n	800dfba <memmove+0x12>
 800dfc8:	4402      	add	r2, r0
 800dfca:	4601      	mov	r1, r0
 800dfcc:	428a      	cmp	r2, r1
 800dfce:	d100      	bne.n	800dfd2 <memmove+0x2a>
 800dfd0:	bd10      	pop	{r4, pc}
 800dfd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfda:	e7f7      	b.n	800dfcc <memmove+0x24>

0800dfdc <_raise_r>:
 800dfdc:	291f      	cmp	r1, #31
 800dfde:	b538      	push	{r3, r4, r5, lr}
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	460d      	mov	r5, r1
 800dfe4:	d904      	bls.n	800dff0 <_raise_r+0x14>
 800dfe6:	2316      	movs	r3, #22
 800dfe8:	6003      	str	r3, [r0, #0]
 800dfea:	f04f 30ff 	mov.w	r0, #4294967295
 800dfee:	bd38      	pop	{r3, r4, r5, pc}
 800dff0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dff2:	b112      	cbz	r2, 800dffa <_raise_r+0x1e>
 800dff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dff8:	b94b      	cbnz	r3, 800e00e <_raise_r+0x32>
 800dffa:	4620      	mov	r0, r4
 800dffc:	f000 f830 	bl	800e060 <_getpid_r>
 800e000:	462a      	mov	r2, r5
 800e002:	4601      	mov	r1, r0
 800e004:	4620      	mov	r0, r4
 800e006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e00a:	f000 b817 	b.w	800e03c <_kill_r>
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d00a      	beq.n	800e028 <_raise_r+0x4c>
 800e012:	1c59      	adds	r1, r3, #1
 800e014:	d103      	bne.n	800e01e <_raise_r+0x42>
 800e016:	2316      	movs	r3, #22
 800e018:	6003      	str	r3, [r0, #0]
 800e01a:	2001      	movs	r0, #1
 800e01c:	e7e7      	b.n	800dfee <_raise_r+0x12>
 800e01e:	2400      	movs	r4, #0
 800e020:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e024:	4628      	mov	r0, r5
 800e026:	4798      	blx	r3
 800e028:	2000      	movs	r0, #0
 800e02a:	e7e0      	b.n	800dfee <_raise_r+0x12>

0800e02c <raise>:
 800e02c:	4b02      	ldr	r3, [pc, #8]	; (800e038 <raise+0xc>)
 800e02e:	4601      	mov	r1, r0
 800e030:	6818      	ldr	r0, [r3, #0]
 800e032:	f7ff bfd3 	b.w	800dfdc <_raise_r>
 800e036:	bf00      	nop
 800e038:	20000164 	.word	0x20000164

0800e03c <_kill_r>:
 800e03c:	b538      	push	{r3, r4, r5, lr}
 800e03e:	4d07      	ldr	r5, [pc, #28]	; (800e05c <_kill_r+0x20>)
 800e040:	2300      	movs	r3, #0
 800e042:	4604      	mov	r4, r0
 800e044:	4608      	mov	r0, r1
 800e046:	4611      	mov	r1, r2
 800e048:	602b      	str	r3, [r5, #0]
 800e04a:	f7f2 fef3 	bl	8000e34 <_kill>
 800e04e:	1c43      	adds	r3, r0, #1
 800e050:	d102      	bne.n	800e058 <_kill_r+0x1c>
 800e052:	682b      	ldr	r3, [r5, #0]
 800e054:	b103      	cbz	r3, 800e058 <_kill_r+0x1c>
 800e056:	6023      	str	r3, [r4, #0]
 800e058:	bd38      	pop	{r3, r4, r5, pc}
 800e05a:	bf00      	nop
 800e05c:	20002314 	.word	0x20002314

0800e060 <_getpid_r>:
 800e060:	f7f2 bee0 	b.w	8000e24 <_getpid>

0800e064 <_sbrk_r>:
 800e064:	b538      	push	{r3, r4, r5, lr}
 800e066:	4d06      	ldr	r5, [pc, #24]	; (800e080 <_sbrk_r+0x1c>)
 800e068:	2300      	movs	r3, #0
 800e06a:	4604      	mov	r4, r0
 800e06c:	4608      	mov	r0, r1
 800e06e:	602b      	str	r3, [r5, #0]
 800e070:	f7f2 ff68 	bl	8000f44 <_sbrk>
 800e074:	1c43      	adds	r3, r0, #1
 800e076:	d102      	bne.n	800e07e <_sbrk_r+0x1a>
 800e078:	682b      	ldr	r3, [r5, #0]
 800e07a:	b103      	cbz	r3, 800e07e <_sbrk_r+0x1a>
 800e07c:	6023      	str	r3, [r4, #0]
 800e07e:	bd38      	pop	{r3, r4, r5, pc}
 800e080:	20002314 	.word	0x20002314

0800e084 <_realloc_r>:
 800e084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e088:	4680      	mov	r8, r0
 800e08a:	4614      	mov	r4, r2
 800e08c:	460e      	mov	r6, r1
 800e08e:	b921      	cbnz	r1, 800e09a <_realloc_r+0x16>
 800e090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e094:	4611      	mov	r1, r2
 800e096:	f7fe bdf9 	b.w	800cc8c <_malloc_r>
 800e09a:	b92a      	cbnz	r2, 800e0a8 <_realloc_r+0x24>
 800e09c:	f7fe fd8a 	bl	800cbb4 <_free_r>
 800e0a0:	4625      	mov	r5, r4
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a8:	f000 f998 	bl	800e3dc <_malloc_usable_size_r>
 800e0ac:	4284      	cmp	r4, r0
 800e0ae:	4607      	mov	r7, r0
 800e0b0:	d802      	bhi.n	800e0b8 <_realloc_r+0x34>
 800e0b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0b6:	d812      	bhi.n	800e0de <_realloc_r+0x5a>
 800e0b8:	4621      	mov	r1, r4
 800e0ba:	4640      	mov	r0, r8
 800e0bc:	f7fe fde6 	bl	800cc8c <_malloc_r>
 800e0c0:	4605      	mov	r5, r0
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d0ed      	beq.n	800e0a2 <_realloc_r+0x1e>
 800e0c6:	42bc      	cmp	r4, r7
 800e0c8:	4622      	mov	r2, r4
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	bf28      	it	cs
 800e0ce:	463a      	movcs	r2, r7
 800e0d0:	f7fe fd5b 	bl	800cb8a <memcpy>
 800e0d4:	4631      	mov	r1, r6
 800e0d6:	4640      	mov	r0, r8
 800e0d8:	f7fe fd6c 	bl	800cbb4 <_free_r>
 800e0dc:	e7e1      	b.n	800e0a2 <_realloc_r+0x1e>
 800e0de:	4635      	mov	r5, r6
 800e0e0:	e7df      	b.n	800e0a2 <_realloc_r+0x1e>
	...

0800e0e4 <_strtol_l.constprop.0>:
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ea:	d001      	beq.n	800e0f0 <_strtol_l.constprop.0+0xc>
 800e0ec:	2b24      	cmp	r3, #36	; 0x24
 800e0ee:	d906      	bls.n	800e0fe <_strtol_l.constprop.0+0x1a>
 800e0f0:	f7fe fd1e 	bl	800cb30 <__errno>
 800e0f4:	2316      	movs	r3, #22
 800e0f6:	6003      	str	r3, [r0, #0]
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e1e4 <_strtol_l.constprop.0+0x100>
 800e102:	460d      	mov	r5, r1
 800e104:	462e      	mov	r6, r5
 800e106:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e10a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e10e:	f017 0708 	ands.w	r7, r7, #8
 800e112:	d1f7      	bne.n	800e104 <_strtol_l.constprop.0+0x20>
 800e114:	2c2d      	cmp	r4, #45	; 0x2d
 800e116:	d132      	bne.n	800e17e <_strtol_l.constprop.0+0x9a>
 800e118:	782c      	ldrb	r4, [r5, #0]
 800e11a:	2701      	movs	r7, #1
 800e11c:	1cb5      	adds	r5, r6, #2
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d05b      	beq.n	800e1da <_strtol_l.constprop.0+0xf6>
 800e122:	2b10      	cmp	r3, #16
 800e124:	d109      	bne.n	800e13a <_strtol_l.constprop.0+0x56>
 800e126:	2c30      	cmp	r4, #48	; 0x30
 800e128:	d107      	bne.n	800e13a <_strtol_l.constprop.0+0x56>
 800e12a:	782c      	ldrb	r4, [r5, #0]
 800e12c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e130:	2c58      	cmp	r4, #88	; 0x58
 800e132:	d14d      	bne.n	800e1d0 <_strtol_l.constprop.0+0xec>
 800e134:	786c      	ldrb	r4, [r5, #1]
 800e136:	2310      	movs	r3, #16
 800e138:	3502      	adds	r5, #2
 800e13a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e13e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e142:	f04f 0e00 	mov.w	lr, #0
 800e146:	fbb8 f9f3 	udiv	r9, r8, r3
 800e14a:	4676      	mov	r6, lr
 800e14c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e150:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e154:	f1bc 0f09 	cmp.w	ip, #9
 800e158:	d816      	bhi.n	800e188 <_strtol_l.constprop.0+0xa4>
 800e15a:	4664      	mov	r4, ip
 800e15c:	42a3      	cmp	r3, r4
 800e15e:	dd24      	ble.n	800e1aa <_strtol_l.constprop.0+0xc6>
 800e160:	f1be 3fff 	cmp.w	lr, #4294967295
 800e164:	d008      	beq.n	800e178 <_strtol_l.constprop.0+0x94>
 800e166:	45b1      	cmp	r9, r6
 800e168:	d31c      	bcc.n	800e1a4 <_strtol_l.constprop.0+0xc0>
 800e16a:	d101      	bne.n	800e170 <_strtol_l.constprop.0+0x8c>
 800e16c:	45a2      	cmp	sl, r4
 800e16e:	db19      	blt.n	800e1a4 <_strtol_l.constprop.0+0xc0>
 800e170:	fb06 4603 	mla	r6, r6, r3, r4
 800e174:	f04f 0e01 	mov.w	lr, #1
 800e178:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e17c:	e7e8      	b.n	800e150 <_strtol_l.constprop.0+0x6c>
 800e17e:	2c2b      	cmp	r4, #43	; 0x2b
 800e180:	bf04      	itt	eq
 800e182:	782c      	ldrbeq	r4, [r5, #0]
 800e184:	1cb5      	addeq	r5, r6, #2
 800e186:	e7ca      	b.n	800e11e <_strtol_l.constprop.0+0x3a>
 800e188:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e18c:	f1bc 0f19 	cmp.w	ip, #25
 800e190:	d801      	bhi.n	800e196 <_strtol_l.constprop.0+0xb2>
 800e192:	3c37      	subs	r4, #55	; 0x37
 800e194:	e7e2      	b.n	800e15c <_strtol_l.constprop.0+0x78>
 800e196:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e19a:	f1bc 0f19 	cmp.w	ip, #25
 800e19e:	d804      	bhi.n	800e1aa <_strtol_l.constprop.0+0xc6>
 800e1a0:	3c57      	subs	r4, #87	; 0x57
 800e1a2:	e7db      	b.n	800e15c <_strtol_l.constprop.0+0x78>
 800e1a4:	f04f 3eff 	mov.w	lr, #4294967295
 800e1a8:	e7e6      	b.n	800e178 <_strtol_l.constprop.0+0x94>
 800e1aa:	f1be 3fff 	cmp.w	lr, #4294967295
 800e1ae:	d105      	bne.n	800e1bc <_strtol_l.constprop.0+0xd8>
 800e1b0:	2322      	movs	r3, #34	; 0x22
 800e1b2:	6003      	str	r3, [r0, #0]
 800e1b4:	4646      	mov	r6, r8
 800e1b6:	b942      	cbnz	r2, 800e1ca <_strtol_l.constprop.0+0xe6>
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	e79e      	b.n	800e0fa <_strtol_l.constprop.0+0x16>
 800e1bc:	b107      	cbz	r7, 800e1c0 <_strtol_l.constprop.0+0xdc>
 800e1be:	4276      	negs	r6, r6
 800e1c0:	2a00      	cmp	r2, #0
 800e1c2:	d0f9      	beq.n	800e1b8 <_strtol_l.constprop.0+0xd4>
 800e1c4:	f1be 0f00 	cmp.w	lr, #0
 800e1c8:	d000      	beq.n	800e1cc <_strtol_l.constprop.0+0xe8>
 800e1ca:	1e69      	subs	r1, r5, #1
 800e1cc:	6011      	str	r1, [r2, #0]
 800e1ce:	e7f3      	b.n	800e1b8 <_strtol_l.constprop.0+0xd4>
 800e1d0:	2430      	movs	r4, #48	; 0x30
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d1b1      	bne.n	800e13a <_strtol_l.constprop.0+0x56>
 800e1d6:	2308      	movs	r3, #8
 800e1d8:	e7af      	b.n	800e13a <_strtol_l.constprop.0+0x56>
 800e1da:	2c30      	cmp	r4, #48	; 0x30
 800e1dc:	d0a5      	beq.n	800e12a <_strtol_l.constprop.0+0x46>
 800e1de:	230a      	movs	r3, #10
 800e1e0:	e7ab      	b.n	800e13a <_strtol_l.constprop.0+0x56>
 800e1e2:	bf00      	nop
 800e1e4:	0800e98e 	.word	0x0800e98e

0800e1e8 <_strtol_r>:
 800e1e8:	f7ff bf7c 	b.w	800e0e4 <_strtol_l.constprop.0>

0800e1ec <_strtoul_l.constprop.0>:
 800e1ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1f0:	4f36      	ldr	r7, [pc, #216]	; (800e2cc <_strtoul_l.constprop.0+0xe0>)
 800e1f2:	4686      	mov	lr, r0
 800e1f4:	460d      	mov	r5, r1
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1fc:	5d3e      	ldrb	r6, [r7, r4]
 800e1fe:	f016 0608 	ands.w	r6, r6, #8
 800e202:	d1f8      	bne.n	800e1f6 <_strtoul_l.constprop.0+0xa>
 800e204:	2c2d      	cmp	r4, #45	; 0x2d
 800e206:	d130      	bne.n	800e26a <_strtoul_l.constprop.0+0x7e>
 800e208:	782c      	ldrb	r4, [r5, #0]
 800e20a:	2601      	movs	r6, #1
 800e20c:	1c85      	adds	r5, r0, #2
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d057      	beq.n	800e2c2 <_strtoul_l.constprop.0+0xd6>
 800e212:	2b10      	cmp	r3, #16
 800e214:	d109      	bne.n	800e22a <_strtoul_l.constprop.0+0x3e>
 800e216:	2c30      	cmp	r4, #48	; 0x30
 800e218:	d107      	bne.n	800e22a <_strtoul_l.constprop.0+0x3e>
 800e21a:	7828      	ldrb	r0, [r5, #0]
 800e21c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e220:	2858      	cmp	r0, #88	; 0x58
 800e222:	d149      	bne.n	800e2b8 <_strtoul_l.constprop.0+0xcc>
 800e224:	786c      	ldrb	r4, [r5, #1]
 800e226:	2310      	movs	r3, #16
 800e228:	3502      	adds	r5, #2
 800e22a:	f04f 38ff 	mov.w	r8, #4294967295
 800e22e:	2700      	movs	r7, #0
 800e230:	fbb8 f8f3 	udiv	r8, r8, r3
 800e234:	fb03 f908 	mul.w	r9, r3, r8
 800e238:	ea6f 0909 	mvn.w	r9, r9
 800e23c:	4638      	mov	r0, r7
 800e23e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e242:	f1bc 0f09 	cmp.w	ip, #9
 800e246:	d815      	bhi.n	800e274 <_strtoul_l.constprop.0+0x88>
 800e248:	4664      	mov	r4, ip
 800e24a:	42a3      	cmp	r3, r4
 800e24c:	dd23      	ble.n	800e296 <_strtoul_l.constprop.0+0xaa>
 800e24e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800e252:	d007      	beq.n	800e264 <_strtoul_l.constprop.0+0x78>
 800e254:	4580      	cmp	r8, r0
 800e256:	d31b      	bcc.n	800e290 <_strtoul_l.constprop.0+0xa4>
 800e258:	d101      	bne.n	800e25e <_strtoul_l.constprop.0+0x72>
 800e25a:	45a1      	cmp	r9, r4
 800e25c:	db18      	blt.n	800e290 <_strtoul_l.constprop.0+0xa4>
 800e25e:	fb00 4003 	mla	r0, r0, r3, r4
 800e262:	2701      	movs	r7, #1
 800e264:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e268:	e7e9      	b.n	800e23e <_strtoul_l.constprop.0+0x52>
 800e26a:	2c2b      	cmp	r4, #43	; 0x2b
 800e26c:	bf04      	itt	eq
 800e26e:	782c      	ldrbeq	r4, [r5, #0]
 800e270:	1c85      	addeq	r5, r0, #2
 800e272:	e7cc      	b.n	800e20e <_strtoul_l.constprop.0+0x22>
 800e274:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e278:	f1bc 0f19 	cmp.w	ip, #25
 800e27c:	d801      	bhi.n	800e282 <_strtoul_l.constprop.0+0x96>
 800e27e:	3c37      	subs	r4, #55	; 0x37
 800e280:	e7e3      	b.n	800e24a <_strtoul_l.constprop.0+0x5e>
 800e282:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e286:	f1bc 0f19 	cmp.w	ip, #25
 800e28a:	d804      	bhi.n	800e296 <_strtoul_l.constprop.0+0xaa>
 800e28c:	3c57      	subs	r4, #87	; 0x57
 800e28e:	e7dc      	b.n	800e24a <_strtoul_l.constprop.0+0x5e>
 800e290:	f04f 37ff 	mov.w	r7, #4294967295
 800e294:	e7e6      	b.n	800e264 <_strtoul_l.constprop.0+0x78>
 800e296:	1c7b      	adds	r3, r7, #1
 800e298:	d106      	bne.n	800e2a8 <_strtoul_l.constprop.0+0xbc>
 800e29a:	2322      	movs	r3, #34	; 0x22
 800e29c:	f8ce 3000 	str.w	r3, [lr]
 800e2a0:	4638      	mov	r0, r7
 800e2a2:	b932      	cbnz	r2, 800e2b2 <_strtoul_l.constprop.0+0xc6>
 800e2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2a8:	b106      	cbz	r6, 800e2ac <_strtoul_l.constprop.0+0xc0>
 800e2aa:	4240      	negs	r0, r0
 800e2ac:	2a00      	cmp	r2, #0
 800e2ae:	d0f9      	beq.n	800e2a4 <_strtoul_l.constprop.0+0xb8>
 800e2b0:	b107      	cbz	r7, 800e2b4 <_strtoul_l.constprop.0+0xc8>
 800e2b2:	1e69      	subs	r1, r5, #1
 800e2b4:	6011      	str	r1, [r2, #0]
 800e2b6:	e7f5      	b.n	800e2a4 <_strtoul_l.constprop.0+0xb8>
 800e2b8:	2430      	movs	r4, #48	; 0x30
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1b5      	bne.n	800e22a <_strtoul_l.constprop.0+0x3e>
 800e2be:	2308      	movs	r3, #8
 800e2c0:	e7b3      	b.n	800e22a <_strtoul_l.constprop.0+0x3e>
 800e2c2:	2c30      	cmp	r4, #48	; 0x30
 800e2c4:	d0a9      	beq.n	800e21a <_strtoul_l.constprop.0+0x2e>
 800e2c6:	230a      	movs	r3, #10
 800e2c8:	e7af      	b.n	800e22a <_strtoul_l.constprop.0+0x3e>
 800e2ca:	bf00      	nop
 800e2cc:	0800e98e 	.word	0x0800e98e

0800e2d0 <_strtoul_r>:
 800e2d0:	f7ff bf8c 	b.w	800e1ec <_strtoul_l.constprop.0>

0800e2d4 <__swhatbuf_r>:
 800e2d4:	b570      	push	{r4, r5, r6, lr}
 800e2d6:	460c      	mov	r4, r1
 800e2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2dc:	2900      	cmp	r1, #0
 800e2de:	b096      	sub	sp, #88	; 0x58
 800e2e0:	4615      	mov	r5, r2
 800e2e2:	461e      	mov	r6, r3
 800e2e4:	da0d      	bge.n	800e302 <__swhatbuf_r+0x2e>
 800e2e6:	89a3      	ldrh	r3, [r4, #12]
 800e2e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e2ec:	f04f 0100 	mov.w	r1, #0
 800e2f0:	bf0c      	ite	eq
 800e2f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e2f6:	2340      	movne	r3, #64	; 0x40
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	6031      	str	r1, [r6, #0]
 800e2fc:	602b      	str	r3, [r5, #0]
 800e2fe:	b016      	add	sp, #88	; 0x58
 800e300:	bd70      	pop	{r4, r5, r6, pc}
 800e302:	466a      	mov	r2, sp
 800e304:	f000 f848 	bl	800e398 <_fstat_r>
 800e308:	2800      	cmp	r0, #0
 800e30a:	dbec      	blt.n	800e2e6 <__swhatbuf_r+0x12>
 800e30c:	9901      	ldr	r1, [sp, #4]
 800e30e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e312:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e316:	4259      	negs	r1, r3
 800e318:	4159      	adcs	r1, r3
 800e31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e31e:	e7eb      	b.n	800e2f8 <__swhatbuf_r+0x24>

0800e320 <__smakebuf_r>:
 800e320:	898b      	ldrh	r3, [r1, #12]
 800e322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e324:	079d      	lsls	r5, r3, #30
 800e326:	4606      	mov	r6, r0
 800e328:	460c      	mov	r4, r1
 800e32a:	d507      	bpl.n	800e33c <__smakebuf_r+0x1c>
 800e32c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	6123      	str	r3, [r4, #16]
 800e334:	2301      	movs	r3, #1
 800e336:	6163      	str	r3, [r4, #20]
 800e338:	b002      	add	sp, #8
 800e33a:	bd70      	pop	{r4, r5, r6, pc}
 800e33c:	ab01      	add	r3, sp, #4
 800e33e:	466a      	mov	r2, sp
 800e340:	f7ff ffc8 	bl	800e2d4 <__swhatbuf_r>
 800e344:	9900      	ldr	r1, [sp, #0]
 800e346:	4605      	mov	r5, r0
 800e348:	4630      	mov	r0, r6
 800e34a:	f7fe fc9f 	bl	800cc8c <_malloc_r>
 800e34e:	b948      	cbnz	r0, 800e364 <__smakebuf_r+0x44>
 800e350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e354:	059a      	lsls	r2, r3, #22
 800e356:	d4ef      	bmi.n	800e338 <__smakebuf_r+0x18>
 800e358:	f023 0303 	bic.w	r3, r3, #3
 800e35c:	f043 0302 	orr.w	r3, r3, #2
 800e360:	81a3      	strh	r3, [r4, #12]
 800e362:	e7e3      	b.n	800e32c <__smakebuf_r+0xc>
 800e364:	89a3      	ldrh	r3, [r4, #12]
 800e366:	6020      	str	r0, [r4, #0]
 800e368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e36c:	81a3      	strh	r3, [r4, #12]
 800e36e:	9b00      	ldr	r3, [sp, #0]
 800e370:	6163      	str	r3, [r4, #20]
 800e372:	9b01      	ldr	r3, [sp, #4]
 800e374:	6120      	str	r0, [r4, #16]
 800e376:	b15b      	cbz	r3, 800e390 <__smakebuf_r+0x70>
 800e378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e37c:	4630      	mov	r0, r6
 800e37e:	f000 f81d 	bl	800e3bc <_isatty_r>
 800e382:	b128      	cbz	r0, 800e390 <__smakebuf_r+0x70>
 800e384:	89a3      	ldrh	r3, [r4, #12]
 800e386:	f023 0303 	bic.w	r3, r3, #3
 800e38a:	f043 0301 	orr.w	r3, r3, #1
 800e38e:	81a3      	strh	r3, [r4, #12]
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	431d      	orrs	r5, r3
 800e394:	81a5      	strh	r5, [r4, #12]
 800e396:	e7cf      	b.n	800e338 <__smakebuf_r+0x18>

0800e398 <_fstat_r>:
 800e398:	b538      	push	{r3, r4, r5, lr}
 800e39a:	4d07      	ldr	r5, [pc, #28]	; (800e3b8 <_fstat_r+0x20>)
 800e39c:	2300      	movs	r3, #0
 800e39e:	4604      	mov	r4, r0
 800e3a0:	4608      	mov	r0, r1
 800e3a2:	4611      	mov	r1, r2
 800e3a4:	602b      	str	r3, [r5, #0]
 800e3a6:	f7f2 fda4 	bl	8000ef2 <_fstat>
 800e3aa:	1c43      	adds	r3, r0, #1
 800e3ac:	d102      	bne.n	800e3b4 <_fstat_r+0x1c>
 800e3ae:	682b      	ldr	r3, [r5, #0]
 800e3b0:	b103      	cbz	r3, 800e3b4 <_fstat_r+0x1c>
 800e3b2:	6023      	str	r3, [r4, #0]
 800e3b4:	bd38      	pop	{r3, r4, r5, pc}
 800e3b6:	bf00      	nop
 800e3b8:	20002314 	.word	0x20002314

0800e3bc <_isatty_r>:
 800e3bc:	b538      	push	{r3, r4, r5, lr}
 800e3be:	4d06      	ldr	r5, [pc, #24]	; (800e3d8 <_isatty_r+0x1c>)
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	4608      	mov	r0, r1
 800e3c6:	602b      	str	r3, [r5, #0]
 800e3c8:	f7f2 fda3 	bl	8000f12 <_isatty>
 800e3cc:	1c43      	adds	r3, r0, #1
 800e3ce:	d102      	bne.n	800e3d6 <_isatty_r+0x1a>
 800e3d0:	682b      	ldr	r3, [r5, #0]
 800e3d2:	b103      	cbz	r3, 800e3d6 <_isatty_r+0x1a>
 800e3d4:	6023      	str	r3, [r4, #0]
 800e3d6:	bd38      	pop	{r3, r4, r5, pc}
 800e3d8:	20002314 	.word	0x20002314

0800e3dc <_malloc_usable_size_r>:
 800e3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3e0:	1f18      	subs	r0, r3, #4
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	bfbc      	itt	lt
 800e3e6:	580b      	ldrlt	r3, [r1, r0]
 800e3e8:	18c0      	addlt	r0, r0, r3
 800e3ea:	4770      	bx	lr

0800e3ec <sqrtf>:
 800e3ec:	b508      	push	{r3, lr}
 800e3ee:	ed2d 8b02 	vpush	{d8}
 800e3f2:	eeb0 8a40 	vmov.f32	s16, s0
 800e3f6:	f000 f817 	bl	800e428 <__ieee754_sqrtf>
 800e3fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e402:	d60c      	bvs.n	800e41e <sqrtf+0x32>
 800e404:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e424 <sqrtf+0x38>
 800e408:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e410:	d505      	bpl.n	800e41e <sqrtf+0x32>
 800e412:	f7fe fb8d 	bl	800cb30 <__errno>
 800e416:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e41a:	2321      	movs	r3, #33	; 0x21
 800e41c:	6003      	str	r3, [r0, #0]
 800e41e:	ecbd 8b02 	vpop	{d8}
 800e422:	bd08      	pop	{r3, pc}
 800e424:	00000000 	.word	0x00000000

0800e428 <__ieee754_sqrtf>:
 800e428:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e42c:	4770      	bx	lr
	...

0800e430 <_init>:
 800e430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e432:	bf00      	nop
 800e434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e436:	bc08      	pop	{r3}
 800e438:	469e      	mov	lr, r3
 800e43a:	4770      	bx	lr

0800e43c <_fini>:
 800e43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e43e:	bf00      	nop
 800e440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e442:	bc08      	pop	{r3}
 800e444:	469e      	mov	lr, r3
 800e446:	4770      	bx	lr
