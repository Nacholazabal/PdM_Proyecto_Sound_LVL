
PdM_Proyecto_Sound_LVL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e588  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800e758  0800e758  0000f758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee38  0800ee38  00010168  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee38  0800ee38  0000fe38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee40  0800ee40  00010168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee40  0800ee40  0000fe40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee44  0800ee44  0000fe44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800ee48  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  20000168  0800efb0  00010168  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20002344  0800efb0  00010344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010168  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208da  00000000  00000000  00010198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056ce  00000000  00000000  00030a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00036140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001569  00000000  00000000  00037d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1be  00000000  00000000  000392b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002939a  00000000  00000000  0006346f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e74f2  00000000  00000000  0008c809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173cfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fd8  00000000  00000000  00173d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0017bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000168 	.word	0x20000168
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e740 	.word	0x0800e740

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000016c 	.word	0x2000016c
 800020c:	0800e740 	.word	0x0800e740

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fd28 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f814 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f9be 	bl	8000998 <MX_GPIO_Init>
  MX_DMA_Init();
 800061c:	f000 f99c 	bl	8000958 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000620:	f000 f970 	bl	8000904 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000624:	f000 f878 	bl	8000718 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000628:	f00b fc6c 	bl	800bf04 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800062c:	f000 f8c6 	bl	80007bc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000630:	f000 f8f2 	bl	8000818 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000634:	f000 f93c 	bl	80008b0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  project_main();
 8000638:	f00b fc5e 	bl	800bef8 <project_main>
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <main+0x30>

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	@ 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00c fbad 	bl	800cdae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <SystemClock_Config+0xd0>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <SystemClock_Config+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <SystemClock_Config+0xd4>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006b8:	2348      	movs	r3, #72	@ 0x48
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006c0:	2303      	movs	r3, #3
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 f987 	bl	80059e0 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d8:	f000 f9e2 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 fafd 	bl	8004cf8 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000704:	f000 f9cc 	bl	8000aa0 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	@ 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800072a:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 800072c:	4a22      	ldr	r2, [pc, #136]	@ (80007b8 <MX_ADC1_Init+0xa0>)
 800072e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000730:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 8000744:	2200      	movs	r2, #0
 8000746:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 8000752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000756:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000758:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 800075a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800075e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 8000768:	2201      	movs	r2, #1
 800076a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 800076e:	2201      	movs	r2, #1
 8000770:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 8000776:	2201      	movs	r2, #1
 8000778:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077a:	480e      	ldr	r0, [pc, #56]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 800077c:	f000 fd08 	bl	8001190 <HAL_ADC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000786:	f000 f98b 	bl	8000aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800078a:	2301      	movs	r3, #1
 800078c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <MX_ADC1_Init+0x9c>)
 800079c:	f000 fe60 	bl	8001460 <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007a6:	f000 f97b 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000184 	.word	0x20000184
 80007b8:	40012000 	.word	0x40012000

080007bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_I2C1_Init+0x50>)
 80007c2:	4a13      	ldr	r2, [pc, #76]	@ (8000810 <MX_I2C1_Init+0x54>)
 80007c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_I2C1_Init+0x50>)
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x58>)
 80007ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_I2C1_Init+0x50>)
 80007da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_I2C1_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_I2C1_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_I2C1_Init+0x50>)
 80007fa:	f001 ffbb 	bl	8002774 <HAL_I2C_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000804:	f000 f94c 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000022c 	.word	0x2000022c
 8000810:	40005400 	.word	0x40005400
 8000814:	000186a0 	.word	0x000186a0

08000818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000834:	4b1d      	ldr	r3, [pc, #116]	@ (80008ac <MX_TIM2_Init+0x94>)
 8000836:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800083a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_TIM2_Init+0x94>)
 800083e:	2253      	movs	r2, #83	@ 0x53
 8000840:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <MX_TIM2_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_TIM2_Init+0x94>)
 800084a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800084e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_TIM2_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_TIM2_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800085c:	4813      	ldr	r0, [pc, #76]	@ (80008ac <MX_TIM2_Init+0x94>)
 800085e:	f005 fb5d 	bl	8005f1c <HAL_TIM_Base_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000868:	f000 f91a 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	4619      	mov	r1, r3
 8000878:	480c      	ldr	r0, [pc, #48]	@ (80008ac <MX_TIM2_Init+0x94>)
 800087a:	f005 fc07 	bl	800608c <HAL_TIM_ConfigClockSource>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000884:	f000 f90c 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000888:	2320      	movs	r3, #32
 800088a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_TIM2_Init+0x94>)
 8000896:	f005 fe07 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008a0:	f000 f8fe 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000280 	.word	0x20000280

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <MX_USART1_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e8:	f005 fe5a 	bl	80065a0 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f8d5 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200002c8 	.word	0x200002c8
 8000900:	40011000 	.word	0x40011000

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	@ (8000954 <MX_USART2_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART2_UART_Init+0x4c>)
 800093c:	f005 fe30 	bl	80065a0 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f8ab 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000310 	.word	0x20000310
 8000954:	40004400 	.word	0x40004400

08000958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_DMA_Init+0x3c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a0b      	ldr	r2, [pc, #44]	@ (8000994 <MX_DMA_Init+0x3c>)
 8000968:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_DMA_Init+0x3c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2038      	movs	r0, #56	@ 0x38
 8000980:	f001 f8f9 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000984:	2038      	movs	r0, #56	@ 0x38
 8000986:	f001 f912 	bl	8001bae <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b38      	ldr	r3, [pc, #224]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a37      	ldr	r2, [pc, #220]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b35      	ldr	r3, [pc, #212]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a30      	ldr	r2, [pc, #192]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b2e      	ldr	r3, [pc, #184]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a29      	ldr	r2, [pc, #164]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <MX_GPIO_Init+0xfc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	481d      	ldr	r0, [pc, #116]	@ (8000a98 <MX_GPIO_Init+0x100>)
 8000a24:	f001 fe8c 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a2e:	481b      	ldr	r0, [pc, #108]	@ (8000a9c <MX_GPIO_Init+0x104>)
 8000a30:	f001 fe86 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4814      	ldr	r0, [pc, #80]	@ (8000a9c <MX_GPIO_Init+0x104>)
 8000a4c:	f001 fccc 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a50:	2320      	movs	r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <MX_GPIO_Init+0x100>)
 8000a68:	f001 fcbe 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_GPIO_Init+0x104>)
 8000a86:	f001 fcaf 	bl	80023e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	4a0f      	ldr	r2, [pc, #60]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aea:	2007      	movs	r0, #7
 8000aec:	f001 f838 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd8 <HAL_ADC_MspInit+0xdc>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d157      	bne.n	8000bce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b2e      	ldr	r3, [pc, #184]	@ (8000bdc <HAL_ADC_MspInit+0xe0>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	4a2d      	ldr	r2, [pc, #180]	@ (8000bdc <HAL_ADC_MspInit+0xe0>)
 8000b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <HAL_ADC_MspInit+0xe0>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b27      	ldr	r3, [pc, #156]	@ (8000bdc <HAL_ADC_MspInit+0xe0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a26      	ldr	r2, [pc, #152]	@ (8000bdc <HAL_ADC_MspInit+0xe0>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <HAL_ADC_MspInit+0xe0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b56:	2302      	movs	r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	481d      	ldr	r0, [pc, #116]	@ (8000be0 <HAL_ADC_MspInit+0xe4>)
 8000b6a:	f001 fc3d 	bl	80023e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000b70:	4a1d      	ldr	r2, [pc, #116]	@ (8000be8 <HAL_ADC_MspInit+0xec>)
 8000b72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b86:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000b88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b8e:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000b90:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000b98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ba4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bac:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bb2:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000bb4:	f001 f816 	bl	8001be4 <HAL_DMA_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000bbe:	f7ff ff6f 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000bc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bc8:	4a06      	ldr	r2, [pc, #24]	@ (8000be4 <HAL_ADC_MspInit+0xe8>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	@ 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40012000 	.word	0x40012000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	200001cc 	.word	0x200001cc
 8000be8:	40026410 	.word	0x40026410

08000bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a19      	ldr	r2, [pc, #100]	@ (8000c70 <HAL_I2C_MspInit+0x84>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12c      	bne.n	8000c68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a17      	ldr	r2, [pc, #92]	@ (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c30:	2312      	movs	r3, #18
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <HAL_I2C_MspInit+0x8c>)
 8000c48:	f001 fbce 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	4a07      	ldr	r2, [pc, #28]	@ (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <HAL_I2C_MspInit+0x88>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	@ 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40005400 	.word	0x40005400
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020400 	.word	0x40020400

08000c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c8c:	d10d      	bne.n	8000caa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	@ 0x30
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a36      	ldr	r2, [pc, #216]	@ (8000db4 <HAL_UART_MspInit+0xf8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12d      	bne.n	8000d3a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
 8000ce2:	4b35      	ldr	r3, [pc, #212]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	4a34      	ldr	r2, [pc, #208]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cee:	4b32      	ldr	r3, [pc, #200]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a2d      	ldr	r2, [pc, #180]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4822      	ldr	r0, [pc, #136]	@ (8000dbc <HAL_UART_MspInit+0x100>)
 8000d34:	f001 fb58 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d38:	e038      	b.n	8000dac <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a20      	ldr	r2, [pc, #128]	@ (8000dc0 <HAL_UART_MspInit+0x104>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d133      	bne.n	8000dac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d54:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d68:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d70:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <HAL_UART_MspInit+0xfc>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <HAL_UART_MspInit+0x100>)
 8000d98:	f001 fb26 	bl	80023e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2026      	movs	r0, #38	@ 0x26
 8000da2:	f000 fee8 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000da6:	2026      	movs	r0, #38	@ 0x26
 8000da8:	f000 ff01 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 8000dac:	bf00      	nop
 8000dae:	3730      	adds	r7, #48	@ 0x30
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40011000 	.word	0x40011000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40004400 	.word	0x40004400

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <NMI_Handler+0x4>

08000dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <MemManage_Handler+0x4>

08000ddc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1a:	f000 f975 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <USART2_IRQHandler+0x10>)
 8000e2a:	f005 fc95 	bl	8006758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000310 	.word	0x20000310

08000e38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <DMA2_Stream0_IRQHandler+0x10>)
 8000e3e:	f001 f869 	bl	8001f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001cc 	.word	0x200001cc

08000e4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <OTG_FS_IRQHandler+0x10>)
 8000e52:	f002 fdfe 	bl	8003a52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20001af4 	.word	0x20001af4

08000e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return 1;
 8000e64:	2301      	movs	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_kill>:

int _kill(int pid, int sig)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e7a:	f00b fff9 	bl	800ce70 <__errno>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2216      	movs	r2, #22
 8000e82:	601a      	str	r2, [r3, #0]
  return -1;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_exit>:

void _exit (int status)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffe7 	bl	8000e70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ea2:	bf00      	nop
 8000ea4:	e7fd      	b.n	8000ea2 <_exit+0x12>

08000ea6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e00a      	b.n	8000ece <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb8:	f3af 8000 	nop.w
 8000ebc:	4601      	mov	r1, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1c5a      	adds	r2, r3, #1
 8000ec2:	60ba      	str	r2, [r7, #8]
 8000ec4:	b2ca      	uxtb	r2, r1
 8000ec6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	dbf0      	blt.n	8000eb8 <_read+0x12>
  }

  return len;
 8000ed6:	687b      	ldr	r3, [r7, #4]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e009      	b.n	8000f06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	60ba      	str	r2, [r7, #8]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3301      	adds	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	dbf1      	blt.n	8000ef2 <_write+0x12>
  }
  return len;
 8000f0e:	687b      	ldr	r3, [r7, #4]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_close>:

int _close(int file)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f40:	605a      	str	r2, [r3, #4]
  return 0;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_isatty>:

int _isatty(int file)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f00b ff5e 	bl	800ce70 <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20020000 	.word	0x20020000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	20000358 	.word	0x20000358
 8000fe8:	20002348 	.word	0x20002348

08000fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001014:	f7ff ffea 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800103e:	f00b ff1d 	bl	800ce7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff fae3 	bl	800060c <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001054:	0800ee48 	.word	0x0800ee48
  ldr r2, =_sbss
 8001058:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800105c:	20002344 	.word	0x20002344

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <HAL_Init+0x40>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_Init+0x40>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800107e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <HAL_Init+0x40>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 fd67 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fd08 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fd7f 	bl	8001bca <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 fd47 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	2000035c 	.word	0x2000035c

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000035c 	.word	0x2000035c

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e033      	b.n	800120e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fca4 	bl	8000afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d118      	bne.n	8001200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011d6:	f023 0302 	bic.w	r3, r3, #2
 80011da:	f043 0202 	orr.w	r2, r3, #2
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fa6e 	bl	80016c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	f023 0303 	bic.w	r3, r3, #3
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80011fe:	e001      	b.n	8001204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_ADC_Start_DMA+0x1e>
 8001232:	2302      	movs	r3, #2
 8001234:	e0e9      	b.n	800140a <HAL_ADC_Start_DMA+0x1f2>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b01      	cmp	r3, #1
 800124a:	d018      	beq.n	800127e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800125c:	4b6d      	ldr	r3, [pc, #436]	@ (8001414 <HAL_ADC_Start_DMA+0x1fc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a6d      	ldr	r2, [pc, #436]	@ (8001418 <HAL_ADC_Start_DMA+0x200>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0c9a      	lsrs	r2, r3, #18
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001270:	e002      	b.n	8001278 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	3b01      	subs	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800128c:	d107      	bne.n	800129e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800129c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	f040 80a1 	bne.w	80013f0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012ec:	d106      	bne.n	80012fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f023 0206 	bic.w	r2, r3, #6
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80012fa:	e002      	b.n	8001302 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800130a:	4b44      	ldr	r3, [pc, #272]	@ (800141c <HAL_ADC_Start_DMA+0x204>)
 800130c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001312:	4a43      	ldr	r2, [pc, #268]	@ (8001420 <HAL_ADC_Start_DMA+0x208>)
 8001314:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131a:	4a42      	ldr	r2, [pc, #264]	@ (8001424 <HAL_ADC_Start_DMA+0x20c>)
 800131c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001322:	4a41      	ldr	r2, [pc, #260]	@ (8001428 <HAL_ADC_Start_DMA+0x210>)
 8001324:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800132e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800133e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800134e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	334c      	adds	r3, #76	@ 0x4c
 800135a:	4619      	mov	r1, r3
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f000 fcee 	bl	8001d40 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 031f 	and.w	r3, r3, #31
 800136c:	2b00      	cmp	r3, #0
 800136e:	d12a      	bne.n	80013c6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2d      	ldr	r2, [pc, #180]	@ (800142c <HAL_ADC_Start_DMA+0x214>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d015      	beq.n	80013a6 <HAL_ADC_Start_DMA+0x18e>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a2c      	ldr	r2, [pc, #176]	@ (8001430 <HAL_ADC_Start_DMA+0x218>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d105      	bne.n	8001390 <HAL_ADC_Start_DMA+0x178>
 8001384:	4b25      	ldr	r3, [pc, #148]	@ (800141c <HAL_ADC_Start_DMA+0x204>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00a      	beq.n	80013a6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a27      	ldr	r2, [pc, #156]	@ (8001434 <HAL_ADC_Start_DMA+0x21c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d136      	bne.n	8001408 <HAL_ADC_Start_DMA+0x1f0>
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <HAL_ADC_Start_DMA+0x204>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d130      	bne.n	8001408 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d129      	bne.n	8001408 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e020      	b.n	8001408 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a18      	ldr	r2, [pc, #96]	@ (800142c <HAL_ADC_Start_DMA+0x214>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d11b      	bne.n	8001408 <HAL_ADC_Start_DMA+0x1f0>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d114      	bne.n	8001408 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	e00b      	b.n	8001408 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f043 0210 	orr.w	r2, r3, #16
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000000 	.word	0x20000000
 8001418:	431bde83 	.word	0x431bde83
 800141c:	40012300 	.word	0x40012300
 8001420:	080018bd 	.word	0x080018bd
 8001424:	08001977 	.word	0x08001977
 8001428:	08001993 	.word	0x08001993
 800142c:	40012000 	.word	0x40012000
 8001430:	40012100 	.word	0x40012100
 8001434:	40012200 	.word	0x40012200

08001438 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001474:	2b01      	cmp	r3, #1
 8001476:	d101      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1c>
 8001478:	2302      	movs	r3, #2
 800147a:	e113      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x244>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b09      	cmp	r3, #9
 800148a:	d925      	bls.n	80014d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68d9      	ldr	r1, [r3, #12]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	3b1e      	subs	r3, #30
 80014a2:	2207      	movs	r2, #7
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43da      	mvns	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	400a      	ands	r2, r1
 80014b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68d9      	ldr	r1, [r3, #12]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	4603      	mov	r3, r0
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4403      	add	r3, r0
 80014ca:	3b1e      	subs	r3, #30
 80014cc:	409a      	lsls	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	e022      	b.n	800151e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6919      	ldr	r1, [r3, #16]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	2207      	movs	r2, #7
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	400a      	ands	r2, r1
 80014fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6919      	ldr	r1, [r3, #16]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	4603      	mov	r3, r0
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4403      	add	r3, r0
 8001514:	409a      	lsls	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b06      	cmp	r3, #6
 8001524:	d824      	bhi.n	8001570 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	3b05      	subs	r3, #5
 8001538:	221f      	movs	r2, #31
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4618      	mov	r0, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	3b05      	subs	r3, #5
 8001562:	fa00 f203 	lsl.w	r2, r0, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	@ 0x34
 800156e:	e04c      	b.n	800160a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d824      	bhi.n	80015c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b23      	subs	r3, #35	@ 0x23
 800158a:	221f      	movs	r2, #31
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43da      	mvns	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	400a      	ands	r2, r1
 8001598:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	3b23      	subs	r3, #35	@ 0x23
 80015b4:	fa00 f203 	lsl.w	r2, r0, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
 80015c0:	e023      	b.n	800160a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b41      	subs	r3, #65	@ 0x41
 80015d4:	221f      	movs	r2, #31
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	400a      	ands	r2, r1
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3b41      	subs	r3, #65	@ 0x41
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <HAL_ADC_ConfigChannel+0x250>)
 800160c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a28      	ldr	r2, [pc, #160]	@ (80016b4 <HAL_ADC_ConfigChannel+0x254>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d10f      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x1d8>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b12      	cmp	r3, #18
 800161e:	d10b      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a1d      	ldr	r2, [pc, #116]	@ (80016b4 <HAL_ADC_ConfigChannel+0x254>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12b      	bne.n	800169a <HAL_ADC_ConfigChannel+0x23a>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a1c      	ldr	r2, [pc, #112]	@ (80016b8 <HAL_ADC_ConfigChannel+0x258>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d003      	beq.n	8001654 <HAL_ADC_ConfigChannel+0x1f4>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b11      	cmp	r3, #17
 8001652:	d122      	bne.n	800169a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <HAL_ADC_ConfigChannel+0x258>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d111      	bne.n	800169a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_ADC_ConfigChannel+0x25c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a11      	ldr	r2, [pc, #68]	@ (80016c0 <HAL_ADC_ConfigChannel+0x260>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	0c9a      	lsrs	r2, r3, #18
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800168c:	e002      	b.n	8001694 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	3b01      	subs	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f9      	bne.n	800168e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40012300 	.word	0x40012300
 80016b4:	40012000 	.word	0x40012000
 80016b8:	10000012 	.word	0x10000012
 80016bc:	20000000 	.word	0x20000000
 80016c0:	431bde83 	.word	0x431bde83

080016c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016cc:	4b79      	ldr	r3, [pc, #484]	@ (80018b4 <ADC_Init+0x1f0>)
 80016ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	021a      	lsls	r2, r3, #8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800171c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800173e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6899      	ldr	r1, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001756:	4a58      	ldr	r2, [pc, #352]	@ (80018b8 <ADC_Init+0x1f4>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d022      	beq.n	80017a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800176a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6899      	ldr	r1, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800178c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6899      	ldr	r1, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e00f      	b.n	80017c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0202 	bic.w	r2, r2, #2
 80017d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6899      	ldr	r1, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7e1b      	ldrb	r3, [r3, #24]
 80017dc:	005a      	lsls	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d01b      	beq.n	8001828 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800180e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6859      	ldr	r1, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	3b01      	subs	r3, #1
 800181c:	035a      	lsls	r2, r3, #13
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	e007      	b.n	8001838 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001836:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	3b01      	subs	r3, #1
 8001854:	051a      	lsls	r2, r3, #20
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800186c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6899      	ldr	r1, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800187a:	025a      	lsls	r2, r3, #9
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6899      	ldr	r1, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	029a      	lsls	r2, r3, #10
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40012300 	.word	0x40012300
 80018b8:	0f000001 	.word	0x0f000001

080018bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d13c      	bne.n	8001950 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d12b      	bne.n	8001948 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d127      	bne.n	8001948 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001910:	2b00      	cmp	r3, #0
 8001912:	d119      	bne.n	8001948 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0220 	bic.w	r2, r2, #32
 8001922:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f009 fc2f 	bl	800b1ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800194e:	e00e      	b.n	800196e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff fd75 	bl	800144c <HAL_ADC_ErrorCallback>
}
 8001962:	e004      	b.n	800196e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	4798      	blx	r3
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001982:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fd57 	bl	8001438 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2240      	movs	r2, #64	@ 0x40
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f043 0204 	orr.w	r2, r3, #4
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f7ff fd4a 	bl	800144c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	@ (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	@ (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	@ 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff3e 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff31 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff fa9e 	bl	8001130 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e099      	b.n	8001d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c20:	e00f      	b.n	8001c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c22:	f7ff fa85 	bl	8001130 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d908      	bls.n	8001c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e078      	b.n	8001d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e8      	bne.n	8001c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <HAL_DMA_Init+0x158>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d107      	bne.n	8001cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f023 0307 	bic.w	r3, r3, #7
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d117      	bne.n	8001d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fb01 	bl	80022f0 <DMA_CheckFifoParam>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2240      	movs	r2, #64	@ 0x40
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d02:	2301      	movs	r3, #1
 8001d04:	e016      	b.n	8001d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fab8 	bl	8002284 <DMA_CalcBaseAndBitshift>
 8001d14:	4603      	mov	r3, r0
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1c:	223f      	movs	r2, #63	@ 0x3f
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	f010803f 	.word	0xf010803f

08001d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_DMA_Start_IT+0x26>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e040      	b.n	8001de8 <HAL_DMA_Start_IT+0xa8>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d12f      	bne.n	8001dda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fa4a 	bl	8002228 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	223f      	movs	r2, #63	@ 0x3f
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0216 	orr.w	r2, r2, #22
 8001dae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0208 	orr.w	r2, r2, #8
 8001dc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e005      	b.n	8001de6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
 8001de4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dfe:	f7ff f997 	bl	8001130 <HAL_GetTick>
 8001e02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d008      	beq.n	8001e22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2280      	movs	r2, #128	@ 0x80
 8001e14:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e052      	b.n	8001ec8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0216 	bic.w	r2, r2, #22
 8001e30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <HAL_DMA_Abort+0x62>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d007      	beq.n	8001e62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0208 	bic.w	r2, r2, #8
 8001e60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e72:	e013      	b.n	8001e9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e74:	f7ff f95c 	bl	8001130 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d90c      	bls.n	8001e9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2220      	movs	r2, #32
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e015      	b.n	8001ec8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1e4      	bne.n	8001e74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eae:	223f      	movs	r2, #63	@ 0x3f
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d004      	beq.n	8001eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00c      	b.n	8001f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f20:	4b8e      	ldr	r3, [pc, #568]	@ (800215c <HAL_DMA_IRQHandler+0x248>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a8e      	ldr	r2, [pc, #568]	@ (8002160 <HAL_DMA_IRQHandler+0x24c>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0a9b      	lsrs	r3, r3, #10
 8001f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3e:	2208      	movs	r2, #8
 8001f40:	409a      	lsls	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01a      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	2201      	movs	r2, #1
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	f043 0202 	orr.w	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	2204      	movs	r2, #4
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	2204      	movs	r2, #4
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d043      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03c      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200e:	2210      	movs	r2, #16
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d018      	beq.n	8002056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d108      	bne.n	8002044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d024      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
 8002042:	e01f      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e016      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0208 	bic.w	r2, r2, #8
 8002072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	2220      	movs	r2, #32
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 808f 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8087 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	2220      	movs	r2, #32
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d136      	bne.n	800212c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0216 	bic.w	r2, r2, #22
 80020cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_DMA_IRQHandler+0x1da>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	223f      	movs	r2, #63	@ 0x3f
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800211e:	2b00      	cmp	r3, #0
 8002120:	d07e      	beq.n	8002220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
        }
        return;
 800212a:	e079      	b.n	8002220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	2b00      	cmp	r3, #0
 800214e:	d031      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e02c      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000
 8002160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d023      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e01e      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0210 	bic.w	r2, r2, #16
 8002192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d032      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d022      	beq.n	800220e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2205      	movs	r2, #5
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d307      	bcc.n	80021fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f2      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x2cc>
 80021fa:	e000      	b.n	80021fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
 800221e:	e000      	b.n	8002222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002220:	bf00      	nop
    }
  }
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002244:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b40      	cmp	r3, #64	@ 0x40
 8002254:	d108      	bne.n	8002268 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002266:	e007      	b.n	8002278 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	3b10      	subs	r3, #16
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800229e:	4a13      	ldr	r2, [pc, #76]	@ (80022ec <DMA_CalcBaseAndBitshift+0x68>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d909      	bls.n	80022c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	1d1a      	adds	r2, r3, #4
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80022c4:	e007      	b.n	80022d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	aaaaaaab 	.word	0xaaaaaaab
 80022ec:	0800ec80 	.word	0x0800ec80

080022f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11f      	bne.n	800234a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d856      	bhi.n	80023be <DMA_CheckFifoParam+0xce>
 8002310:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <DMA_CheckFifoParam+0x28>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002329 	.word	0x08002329
 800231c:	0800233b 	.word	0x0800233b
 8002320:	08002329 	.word	0x08002329
 8002324:	080023bf 	.word	0x080023bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d046      	beq.n	80023c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002338:	e043      	b.n	80023c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002342:	d140      	bne.n	80023c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002348:	e03d      	b.n	80023c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002352:	d121      	bne.n	8002398 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d837      	bhi.n	80023ca <DMA_CheckFifoParam+0xda>
 800235a:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <DMA_CheckFifoParam+0x70>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002371 	.word	0x08002371
 8002364:	08002377 	.word	0x08002377
 8002368:	08002371 	.word	0x08002371
 800236c:	08002389 	.word	0x08002389
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	e030      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d025      	beq.n	80023ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002386:	e022      	b.n	80023ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002390:	d11f      	bne.n	80023d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002396:	e01c      	b.n	80023d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d903      	bls.n	80023a6 <DMA_CheckFifoParam+0xb6>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d003      	beq.n	80023ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023a4:	e018      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
      break;
 80023aa:	e015      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e00b      	b.n	80023d6 <DMA_CheckFifoParam+0xe6>
      break;
 80023be:	bf00      	nop
 80023c0:	e00a      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c2:	bf00      	nop
 80023c4:	e008      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
 80023c8:	e006      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e004      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e002      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023d2:	bf00      	nop
 80023d4:	e000      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
    }
  } 
  
  return status; 
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e165      	b.n	80026d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 8154 	bne.w	80026ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	2b02      	cmp	r3, #2
 8002438:	d130      	bne.n	800249c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80ae 	beq.w	80026ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b5d      	ldr	r3, [pc, #372]	@ (80026e8 <HAL_GPIO_Init+0x300>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	4a5c      	ldr	r2, [pc, #368]	@ (80026e8 <HAL_GPIO_Init+0x300>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257c:	6453      	str	r3, [r2, #68]	@ 0x44
 800257e:	4b5a      	ldr	r3, [pc, #360]	@ (80026e8 <HAL_GPIO_Init+0x300>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258a:	4a58      	ldr	r2, [pc, #352]	@ (80026ec <HAL_GPIO_Init+0x304>)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4f      	ldr	r2, [pc, #316]	@ (80026f0 <HAL_GPIO_Init+0x308>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d025      	beq.n	8002602 <HAL_GPIO_Init+0x21a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4e      	ldr	r2, [pc, #312]	@ (80026f4 <HAL_GPIO_Init+0x30c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d01f      	beq.n	80025fe <HAL_GPIO_Init+0x216>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4d      	ldr	r2, [pc, #308]	@ (80026f8 <HAL_GPIO_Init+0x310>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d019      	beq.n	80025fa <HAL_GPIO_Init+0x212>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <HAL_GPIO_Init+0x314>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x20e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002700 <HAL_GPIO_Init+0x318>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00d      	beq.n	80025f2 <HAL_GPIO_Init+0x20a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002704 <HAL_GPIO_Init+0x31c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d007      	beq.n	80025ee <HAL_GPIO_Init+0x206>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a49      	ldr	r2, [pc, #292]	@ (8002708 <HAL_GPIO_Init+0x320>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d101      	bne.n	80025ea <HAL_GPIO_Init+0x202>
 80025e6:	2306      	movs	r3, #6
 80025e8:	e00c      	b.n	8002604 <HAL_GPIO_Init+0x21c>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e00a      	b.n	8002604 <HAL_GPIO_Init+0x21c>
 80025ee:	2305      	movs	r3, #5
 80025f0:	e008      	b.n	8002604 <HAL_GPIO_Init+0x21c>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e006      	b.n	8002604 <HAL_GPIO_Init+0x21c>
 80025f6:	2303      	movs	r3, #3
 80025f8:	e004      	b.n	8002604 <HAL_GPIO_Init+0x21c>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e002      	b.n	8002604 <HAL_GPIO_Init+0x21c>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_GPIO_Init+0x21c>
 8002602:	2300      	movs	r3, #0
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	f002 0203 	and.w	r2, r2, #3
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	4093      	lsls	r3, r2
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002614:	4935      	ldr	r1, [pc, #212]	@ (80026ec <HAL_GPIO_Init+0x304>)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002622:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <HAL_GPIO_Init+0x324>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002646:	4a31      	ldr	r2, [pc, #196]	@ (800270c <HAL_GPIO_Init+0x324>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800264c:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <HAL_GPIO_Init+0x324>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002670:	4a26      	ldr	r2, [pc, #152]	@ (800270c <HAL_GPIO_Init+0x324>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002676:	4b25      	ldr	r3, [pc, #148]	@ (800270c <HAL_GPIO_Init+0x324>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269a:	4a1c      	ldr	r2, [pc, #112]	@ (800270c <HAL_GPIO_Init+0x324>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a0:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <HAL_GPIO_Init+0x324>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c4:	4a11      	ldr	r2, [pc, #68]	@ (800270c <HAL_GPIO_Init+0x324>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b0f      	cmp	r3, #15
 80026d4:	f67f ae96 	bls.w	8002404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3724      	adds	r7, #36	@ 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40013800 	.word	0x40013800
 80026f0:	40020000 	.word	0x40020000
 80026f4:	40020400 	.word	0x40020400
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40020c00 	.word	0x40020c00
 8002700:	40021000 	.word	0x40021000
 8002704:	40021400 	.word	0x40021400
 8002708:	40021800 	.word	0x40021800
 800270c:	40013c00 	.word	0x40013c00

08002710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	887b      	ldrh	r3, [r7, #2]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e001      	b.n	8002732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800275c:	e003      	b.n	8002766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e12b      	b.n	80029de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fa26 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	@ 0x24
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d8:	f002 fb80 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 80027dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a81      	ldr	r2, [pc, #516]	@ (80029e8 <HAL_I2C_Init+0x274>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d807      	bhi.n	80027f8 <HAL_I2C_Init+0x84>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a80      	ldr	r2, [pc, #512]	@ (80029ec <HAL_I2C_Init+0x278>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e006      	b.n	8002806 <HAL_I2C_Init+0x92>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a7d      	ldr	r2, [pc, #500]	@ (80029f0 <HAL_I2C_Init+0x27c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bf94      	ite	ls
 8002800:	2301      	movls	r3, #1
 8002802:	2300      	movhi	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0e7      	b.n	80029de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a78      	ldr	r2, [pc, #480]	@ (80029f4 <HAL_I2C_Init+0x280>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0c9b      	lsrs	r3, r3, #18
 8002818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a6a      	ldr	r2, [pc, #424]	@ (80029e8 <HAL_I2C_Init+0x274>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d802      	bhi.n	8002848 <HAL_I2C_Init+0xd4>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3301      	adds	r3, #1
 8002846:	e009      	b.n	800285c <HAL_I2C_Init+0xe8>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	4a69      	ldr	r2, [pc, #420]	@ (80029f8 <HAL_I2C_Init+0x284>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	3301      	adds	r3, #1
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	430b      	orrs	r3, r1
 8002862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800286e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	495c      	ldr	r1, [pc, #368]	@ (80029e8 <HAL_I2C_Init+0x274>)
 8002878:	428b      	cmp	r3, r1
 800287a:	d819      	bhi.n	80028b0 <HAL_I2C_Init+0x13c>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e59      	subs	r1, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fbb1 f3f3 	udiv	r3, r1, r3
 800288a:	1c59      	adds	r1, r3, #1
 800288c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002890:	400b      	ands	r3, r1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_I2C_Init+0x138>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1e59      	subs	r1, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028aa:	e051      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 80028ac:	2304      	movs	r3, #4
 80028ae:	e04f      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <HAL_I2C_Init+0x168>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e012      	b.n	8002902 <HAL_I2C_Init+0x18e>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e58      	subs	r0, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	0099      	lsls	r1, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Init+0x196>
 8002906:	2301      	movs	r3, #1
 8002908:	e022      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10e      	bne.n	8002930 <HAL_I2C_Init+0x1bc>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e58      	subs	r0, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	440b      	add	r3, r1
 8002920:	fbb0 f3f3 	udiv	r3, r0, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800292e:	e00f      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e58      	subs	r0, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	0099      	lsls	r1, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	fbb0 f3f3 	udiv	r3, r0, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	6809      	ldr	r1, [r1, #0]
 8002954:	4313      	orrs	r3, r2
 8002956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800297e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6911      	ldr	r1, [r2, #16]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68d2      	ldr	r2, [r2, #12]
 800298a:	4311      	orrs	r1, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	000186a0 	.word	0x000186a0
 80029ec:	001e847f 	.word	0x001e847f
 80029f0:	003d08ff 	.word	0x003d08ff
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	10624dd3 	.word	0x10624dd3

080029fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	817b      	strh	r3, [r7, #10]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	813b      	strh	r3, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a16:	f7fe fb8b 	bl	8001130 <HAL_GetTick>
 8002a1a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	f040 80d9 	bne.w	8002bdc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2319      	movs	r3, #25
 8002a30:	2201      	movs	r2, #1
 8002a32:	496d      	ldr	r1, [pc, #436]	@ (8002be8 <HAL_I2C_Mem_Write+0x1ec>)
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fc8b 	bl	8003350 <I2C_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a40:	2302      	movs	r3, #2
 8002a42:	e0cc      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_Mem_Write+0x56>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0c5      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d007      	beq.n	8002a78 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2221      	movs	r2, #33	@ 0x21
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2240      	movs	r2, #64	@ 0x40
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a3a      	ldr	r2, [r7, #32]
 8002aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a4d      	ldr	r2, [pc, #308]	@ (8002bec <HAL_I2C_Mem_Write+0x1f0>)
 8002ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aba:	88f8      	ldrh	r0, [r7, #6]
 8002abc:	893a      	ldrh	r2, [r7, #8]
 8002abe:	8979      	ldrh	r1, [r7, #10]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	4603      	mov	r3, r0
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fac2 	bl	8003054 <I2C_RequestMemoryWrite>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d052      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e081      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fd50 	bl	8003584 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d107      	bne.n	8002b02 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06b      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d11b      	bne.n	8002b7c <HAL_I2C_Mem_Write+0x180>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d017      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1aa      	bne.n	8002ada <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fd43 	bl	8003614 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d107      	bne.n	8002bac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002baa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e016      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	00100002 	.word	0x00100002
 8002bec:	ffff0000 	.word	0xffff0000

08002bf0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08c      	sub	sp, #48	@ 0x30
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	460b      	mov	r3, r1
 8002c04:	813b      	strh	r3, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c0a:	f7fe fa91 	bl	8001130 <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	f040 8214 	bne.w	8003046 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2319      	movs	r3, #25
 8002c24:	2201      	movs	r2, #1
 8002c26:	497b      	ldr	r1, [pc, #492]	@ (8002e14 <HAL_I2C_Mem_Read+0x224>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fb91 	bl	8003350 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	e207      	b.n	8003048 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Mem_Read+0x56>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e200      	b.n	8003048 <HAL_I2C_Mem_Read+0x458>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d007      	beq.n	8002c6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2222      	movs	r2, #34	@ 0x22
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2240      	movs	r2, #64	@ 0x40
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a5b      	ldr	r2, [pc, #364]	@ (8002e18 <HAL_I2C_Mem_Read+0x228>)
 8002cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cae:	88f8      	ldrh	r0, [r7, #6]
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fa5e 	bl	8003180 <I2C_RequestMemoryRead>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e1bc      	b.n	8003048 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d113      	bne.n	8002cfe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	623b      	str	r3, [r7, #32]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	623b      	str	r3, [r7, #32]
 8002cea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e190      	b.n	8003020 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d11b      	bne.n	8002d3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e170      	b.n	8003020 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d11b      	bne.n	8002d7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	e150      	b.n	8003020 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d94:	e144      	b.n	8003020 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	f200 80f1 	bhi.w	8002f82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d123      	bne.n	8002df0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002daa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fc79 	bl	80036a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e145      	b.n	8003048 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dee:	e117      	b.n	8003020 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d14e      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfe:	2200      	movs	r2, #0
 8002e00:	4906      	ldr	r1, [pc, #24]	@ (8002e1c <HAL_I2C_Mem_Read+0x22c>)
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 faa4 	bl	8003350 <I2C_WaitOnFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e11a      	b.n	8003048 <HAL_I2C_Mem_Read+0x458>
 8002e12:	bf00      	nop
 8002e14:	00100002 	.word	0x00100002
 8002e18:	ffff0000 	.word	0xffff0000
 8002e1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e94:	e0c4      	b.n	8003020 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	496c      	ldr	r1, [pc, #432]	@ (8003050 <HAL_I2C_Mem_Read+0x460>)
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fa55 	bl	8003350 <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0cb      	b.n	8003048 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4955      	ldr	r1, [pc, #340]	@ (8003050 <HAL_I2C_Mem_Read+0x460>)
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fa27 	bl	8003350 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e09d      	b.n	8003048 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f80:	e04e      	b.n	8003020 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fb8c 	bl	80036a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e058      	b.n	8003048 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d124      	bne.n	8003020 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d107      	bne.n	8002fee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	f47f aeb6 	bne.w	8002d96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
  }
}
 8003048:	4618      	mov	r0, r3
 800304a:	3728      	adds	r7, #40	@ 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	00010004 	.word	0x00010004

08003054 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4603      	mov	r3, r0
 8003064:	817b      	strh	r3, [r7, #10]
 8003066:	460b      	mov	r3, r1
 8003068:	813b      	strh	r3, [r7, #8]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800307c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	2200      	movs	r2, #0
 8003086:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f960 	bl	8003350 <I2C_WaitOnFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00d      	beq.n	80030b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a4:	d103      	bne.n	80030ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e05f      	b.n	8003172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030b2:	897b      	ldrh	r3, [r7, #10]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	6a3a      	ldr	r2, [r7, #32]
 80030c6:	492d      	ldr	r1, [pc, #180]	@ (800317c <I2C_RequestMemoryWrite+0x128>)
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f9bb 	bl	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e04c      	b.n	8003172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030f0:	6a39      	ldr	r1, [r7, #32]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fa46 	bl	8003584 <I2C_WaitOnTXEFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	2b04      	cmp	r3, #4
 8003104:	d107      	bne.n	8003116 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003114:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e02b      	b.n	8003172 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003120:	893b      	ldrh	r3, [r7, #8]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	611a      	str	r2, [r3, #16]
 800312a:	e021      	b.n	8003170 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800312c:	893b      	ldrh	r3, [r7, #8]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b29b      	uxth	r3, r3
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800313a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313c:	6a39      	ldr	r1, [r7, #32]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa20 	bl	8003584 <I2C_WaitOnTXEFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	2b04      	cmp	r3, #4
 8003150:	d107      	bne.n	8003162 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003160:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e005      	b.n	8003172 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003166:	893b      	ldrh	r3, [r7, #8]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	00010002 	.word	0x00010002

08003180 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	4608      	mov	r0, r1
 800318a:	4611      	mov	r1, r2
 800318c:	461a      	mov	r2, r3
 800318e:	4603      	mov	r3, r0
 8003190:	817b      	strh	r3, [r7, #10]
 8003192:	460b      	mov	r3, r1
 8003194:	813b      	strh	r3, [r7, #8]
 8003196:	4613      	mov	r3, r2
 8003198:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f8c2 	bl	8003350 <I2C_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e0:	d103      	bne.n	80031ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e0aa      	b.n	8003344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ee:	897b      	ldrh	r3, [r7, #10]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	4952      	ldr	r1, [pc, #328]	@ (800334c <I2C_RequestMemoryRead+0x1cc>)
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 f91d 	bl	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e097      	b.n	8003344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800322a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800322c:	6a39      	ldr	r1, [r7, #32]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f9a8 	bl	8003584 <I2C_WaitOnTXEFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	2b04      	cmp	r3, #4
 8003240:	d107      	bne.n	8003252 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e076      	b.n	8003344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d105      	bne.n	8003268 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	611a      	str	r2, [r3, #16]
 8003266:	e021      	b.n	80032ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003268:	893b      	ldrh	r3, [r7, #8]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	b29b      	uxth	r3, r3
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003278:	6a39      	ldr	r1, [r7, #32]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f982 	bl	8003584 <I2C_WaitOnTXEFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	2b04      	cmp	r3, #4
 800328c:	d107      	bne.n	800329e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e050      	b.n	8003344 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032a2:	893b      	ldrh	r3, [r7, #8]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ae:	6a39      	ldr	r1, [r7, #32]
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f967 	bl	8003584 <I2C_WaitOnTXEFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d107      	bne.n	80032d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e035      	b.n	8003344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f82b 	bl	8003350 <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330e:	d103      	bne.n	8003318 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003316:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e013      	b.n	8003344 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800331c:	897b      	ldrh	r3, [r7, #10]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	6a3a      	ldr	r2, [r7, #32]
 8003330:	4906      	ldr	r1, [pc, #24]	@ (800334c <I2C_RequestMemoryRead+0x1cc>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f886 	bl	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	00010002 	.word	0x00010002

08003350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	4613      	mov	r3, r2
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003360:	e048      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d044      	beq.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7fd fee1 	bl	8001130 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d139      	bne.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10d      	bne.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	43da      	mvns	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	e00c      	b.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	43da      	mvns	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d116      	bne.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e023      	b.n	800343c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	0c1b      	lsrs	r3, r3, #16
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d10d      	bne.n	800341a <I2C_WaitOnFlagUntilTimeout+0xca>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	43da      	mvns	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4013      	ands	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	e00c      	b.n	8003434 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	43da      	mvns	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4013      	ands	r3, r2
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	429a      	cmp	r2, r3
 8003438:	d093      	beq.n	8003362 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003452:	e071      	b.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003462:	d123      	bne.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003472:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800347c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e067      	b.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b2:	d041      	beq.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b4:	f7fd fe3c 	bl	8001130 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d302      	bcc.n	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d136      	bne.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d10c      	bne.n	80034ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4013      	ands	r3, r2
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e00b      	b.n	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	43da      	mvns	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4013      	ands	r3, r2
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	f043 0220 	orr.w	r2, r3, #32
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e021      	b.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10c      	bne.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	43da      	mvns	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e00b      	b.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	43da      	mvns	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4013      	ands	r3, r2
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	bf14      	ite	ne
 800356e:	2301      	movne	r3, #1
 8003570:	2300      	moveq	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	f47f af6d 	bne.w	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003590:	e034      	b.n	80035fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f8e3 	bl	800375e <I2C_IsAcknowledgeFailed>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e034      	b.n	800360c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d028      	beq.n	80035fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035aa:	f7fd fdc1 	bl	8001130 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11d      	bne.n	80035fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ca:	2b80      	cmp	r3, #128	@ 0x80
 80035cc:	d016      	beq.n	80035fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e007      	b.n	800360c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003606:	2b80      	cmp	r3, #128	@ 0x80
 8003608:	d1c3      	bne.n	8003592 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003620:	e034      	b.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f89b 	bl	800375e <I2C_IsAcknowledgeFailed>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e034      	b.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d028      	beq.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363a:	f7fd fd79 	bl	8001130 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d11d      	bne.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d016      	beq.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e007      	b.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b04      	cmp	r3, #4
 8003698:	d1c3      	bne.n	8003622 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036b0:	e049      	b.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d119      	bne.n	80036f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0210 	mvn.w	r2, #16
 80036c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e030      	b.n	8003756 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f4:	f7fd fd1c 	bl	8001130 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	429a      	cmp	r2, r3
 8003702:	d302      	bcc.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11d      	bne.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b40      	cmp	r3, #64	@ 0x40
 8003716:	d016      	beq.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003750:	2b40      	cmp	r3, #64	@ 0x40
 8003752:	d1ae      	bne.n	80036b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003774:	d11b      	bne.n	80037ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800377e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	f043 0204 	orr.w	r2, r3, #4
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e108      	b.n	80039e0 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f008 fdad 	bl	800c348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2203      	movs	r2, #3
 80037f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037fc:	d102      	bne.n	8003804 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f003 ffe2 	bl	80077d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7c1a      	ldrb	r2, [r3, #16]
 8003816:	f88d 2000 	strb.w	r2, [sp]
 800381a:	3304      	adds	r3, #4
 800381c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800381e:	f003 fec1 	bl	80075a4 <USB_CoreInit>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0d5      	b.n	80039e0 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f003 ffda 	bl	80077f4 <USB_SetCurrentMode>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d005      	beq.n	8003852 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0c6      	b.n	80039e0 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e04a      	b.n	80038ee <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	3315      	adds	r3, #21
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	3314      	adds	r3, #20
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	b298      	uxth	r0, r3
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	332e      	adds	r3, #46	@ 0x2e
 8003894:	4602      	mov	r2, r0
 8003896:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3318      	adds	r3, #24
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	331c      	adds	r3, #28
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3320      	adds	r3, #32
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3324      	adds	r3, #36	@ 0x24
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	3301      	adds	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	791b      	ldrb	r3, [r3, #4]
 80038f2:	7bfa      	ldrb	r2, [r7, #15]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d3af      	bcc.n	8003858 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e044      	b.n	8003988 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	3301      	adds	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	791b      	ldrb	r3, [r3, #4]
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	429a      	cmp	r2, r3
 8003990:	d3b5      	bcc.n	80038fe <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7c1a      	ldrb	r2, [r3, #16]
 800399a:	f88d 2000 	strb.w	r2, [sp]
 800399e:	3304      	adds	r3, #4
 80039a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039a2:	f003 ff73 	bl	800788c <USB_DevInit>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e013      	b.n	80039e0 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	7b1b      	ldrb	r3, [r3, #12]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d102      	bne.n	80039d4 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f001 f96e 	bl	8004cb0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f004 ffb0 	bl	800893e <USB_DevDisconnect>

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_PCD_Start+0x1c>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e022      	b.n	8003a4a <HAL_PCD_Start+0x62>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 febd 	bl	80077b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 ff5e 	bl	80088fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a52:	b590      	push	{r4, r7, lr}
 8003a54:	b08d      	sub	sp, #52	@ 0x34
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f005 f81c 	bl	8008aa6 <USB_GetMode>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f040 84b9 	bne.w	80043e8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f004 ff80 	bl	8008980 <USB_ReadInterrupts>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 84af 	beq.w	80043e6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f004 ff6d 	bl	8008980 <USB_ReadInterrupts>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d107      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f002 0202 	and.w	r2, r2, #2
 8003abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f004 ff5b 	bl	8008980 <USB_ReadInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d161      	bne.n	8003b98 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0210 	bic.w	r2, r2, #16
 8003ae2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f003 020f 	and.w	r2, r3, #15
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	3304      	adds	r3, #4
 8003b02:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b0e:	d124      	bne.n	8003b5a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d035      	beq.n	8003b88 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6a38      	ldr	r0, [r7, #32]
 8003b30:	f004 fd92 	bl	8008658 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b40:	441a      	add	r2, r3
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b52:	441a      	add	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	615a      	str	r2, [r3, #20]
 8003b58:	e016      	b.n	8003b88 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b60:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b64:	d110      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6a38      	ldr	r0, [r7, #32]
 8003b72:	f004 fd71 	bl	8008658 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b82:	441a      	add	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0210 	orr.w	r2, r2, #16
 8003b96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f004 feef 	bl	8008980 <USB_ReadInterrupts>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bac:	f040 80a7 	bne.w	8003cfe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 fef4 	bl	80089a6 <USB_ReadDevAllOutEpInterrupt>
 8003bbe:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bc0:	e099      	b.n	8003cf6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 808e 	beq.w	8003cea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 ff18 	bl	8008a0e <USB_ReadDevOutEPInterrupt>
 8003bde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00c      	beq.n	8003c04 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fed0 	bl	80049a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00c      	beq.n	8003c28 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 ffa6 	bl	8004b74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2310      	movs	r3, #16
 8003c42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d030      	beq.n	8003cb0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c56:	2b80      	cmp	r3, #128	@ 0x80
 8003c58:	d109      	bne.n	8003c6e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c6c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	4413      	add	r3, r2
 8003c80:	3304      	adds	r3, #4
 8003c82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	78db      	ldrb	r3, [r3, #3]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d108      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	4619      	mov	r1, r3
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f008 fc71 	bl	800c580 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003caa:	461a      	mov	r2, r3
 8003cac:	2302      	movs	r3, #2
 8003cae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2320      	movs	r3, #32
 8003cca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ce8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	3301      	adds	r3, #1
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f47f af62 	bne.w	8003bc2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f004 fe3c 	bl	8008980 <USB_ReadInterrupts>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d12:	f040 80db 	bne.w	8003ecc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 fe5d 	bl	80089da <USB_ReadDevAllInEpInterrupt>
 8003d20:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d26:	e0cd      	b.n	8003ec4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80c2 	beq.w	8003eb8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f004 fe83 	bl	8008a4a <USB_ReadDevInEPInterrupt>
 8003d44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d057      	beq.n	8003e00 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	2201      	movs	r2, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69f9      	ldr	r1, [r7, #28]
 8003d6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d70:	4013      	ands	r3, r2
 8003d72:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d80:	461a      	mov	r2, r3
 8003d82:	2301      	movs	r3, #1
 8003d84:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	799b      	ldrb	r3, [r3, #6]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d132      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3320      	adds	r3, #32
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4403      	add	r3, r0
 8003dae:	331c      	adds	r3, #28
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4419      	add	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4403      	add	r3, r0
 8003dc2:	3320      	adds	r3, #32
 8003dc4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d113      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x3a2>
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3324      	adds	r3, #36	@ 0x24
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dec:	461a      	mov	r2, r3
 8003dee:	2101      	movs	r1, #1
 8003df0:	f004 fe8a 	bl	8008b08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f008 fb3b 	bl	800c476 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e16:	461a      	mov	r2, r3
 8003e18:	2308      	movs	r3, #8
 8003e1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e32:	461a      	mov	r2, r3
 8003e34:	2310      	movs	r3, #16
 8003e36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2340      	movs	r3, #64	@ 0x40
 8003e52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d023      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e60:	6a38      	ldr	r0, [r7, #32]
 8003e62:	f003 fe71 	bl	8007b48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	3310      	adds	r3, #16
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	78db      	ldrb	r3, [r3, #3]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d108      	bne.n	8003e94 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2200      	movs	r2, #0
 8003e86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f008 fb88 	bl	800c5a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003eb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fcea 	bl	800488c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	3301      	adds	r3, #1
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f47f af2e 	bne.w	8003d28 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f004 fd55 	bl	8008980 <USB_ReadInterrupts>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003edc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ee0:	d122      	bne.n	8003f28 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d108      	bne.n	8003f12 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f08:	2100      	movs	r1, #0
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f008 fd02 	bl	800c914 <HAL_PCDEx_LPM_Callback>
 8003f10:	e002      	b.n	8003f18 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f008 fb26 	bl	800c564 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f004 fd27 	bl	8008980 <USB_ReadInterrupts>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f3c:	d112      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d102      	bne.n	8003f54 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f008 fae2 	bl	800c518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f62:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 fd09 	bl	8008980 <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f78:	d121      	bne.n	8003fbe <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003f88:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d111      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003fae:	2101      	movs	r1, #1
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f008 fcaf 	bl	800c914 <HAL_PCDEx_LPM_Callback>
 8003fb6:	e002      	b.n	8003fbe <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f008 faad 	bl	800c518 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f004 fcdc 	bl	8008980 <USB_ReadInterrupts>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd2:	f040 80b7 	bne.w	8004144 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2110      	movs	r1, #16
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 fda9 	bl	8007b48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ffa:	e046      	b.n	800408a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004008:	461a      	mov	r2, r3
 800400a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800400e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800402a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800402e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800403c:	461a      	mov	r2, r3
 800403e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004042:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800405e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004062:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004074:	0151      	lsls	r1, r2, #5
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	440a      	add	r2, r1
 800407a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800407e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004082:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004086:	3301      	adds	r3, #1
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	791b      	ldrb	r3, [r3, #4]
 800408e:	461a      	mov	r2, r3
 8004090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004092:	4293      	cmp	r3, r2
 8004094:	d3b2      	bcc.n	8003ffc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040a4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80040a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	7bdb      	ldrb	r3, [r3, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d016      	beq.n	80040e0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040c2:	f043 030b 	orr.w	r3, r3, #11
 80040c6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d8:	f043 030b 	orr.w	r3, r3, #11
 80040dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80040de:	e015      	b.n	800410c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040f2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80040f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	69fa      	ldr	r2, [r7, #28]
 8004102:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004106:	f043 030b 	orr.w	r3, r3, #11
 800410a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800411a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800411e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800412e:	461a      	mov	r2, r3
 8004130:	f004 fcea 	bl	8008b08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f004 fc19 	bl	8008980 <USB_ReadInterrupts>
 800414e:	4603      	mov	r3, r0
 8004150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004158:	d123      	bne.n	80041a2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f004 fcaf 	bl	8008ac2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f003 fd66 	bl	8007c3a <USB_GetDevSpeed>
 800416e:	4603      	mov	r3, r0
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681c      	ldr	r4, [r3, #0]
 800417a:	f000 fea3 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 800417e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004184:	461a      	mov	r2, r3
 8004186:	4620      	mov	r0, r4
 8004188:	f003 fa70 	bl	800766c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f008 f99a 	bl	800c4c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80041a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f004 fbea 	bl	8008980 <USB_ReadInterrupts>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d10a      	bne.n	80041cc <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f008 f977 	bl	800c4aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f002 0208 	and.w	r2, r2, #8
 80041ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f004 fbd5 	bl	8008980 <USB_ReadInterrupts>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041dc:	2b80      	cmp	r3, #128	@ 0x80
 80041de:	d123      	bne.n	8004228 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041ec:	2301      	movs	r3, #1
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f0:	e014      	b.n	800421c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	b2db      	uxtb	r3, r3
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fb0a 	bl	800482a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	3301      	adds	r3, #1
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	791b      	ldrb	r3, [r3, #4]
 8004220:	461a      	mov	r2, r3
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	4293      	cmp	r3, r2
 8004226:	d3e4      	bcc.n	80041f2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f004 fba7 	bl	8008980 <USB_ReadInterrupts>
 8004232:	4603      	mov	r3, r0
 8004234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004238:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800423c:	d13c      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800423e:	2301      	movs	r3, #1
 8004240:	627b      	str	r3, [r7, #36]	@ 0x24
 8004242:	e02b      	b.n	800429c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	3318      	adds	r3, #24
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d115      	bne.n	8004296 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800426a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800426c:	2b00      	cmp	r3, #0
 800426e:	da12      	bge.n	8004296 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	3317      	adds	r3, #23
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800428c:	b2db      	uxtb	r3, r3
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 faca 	bl	800482a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	3301      	adds	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	791b      	ldrb	r3, [r3, #4]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d3cd      	bcc.n	8004244 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80042b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f004 fb5f 	bl	8008980 <USB_ReadInterrupts>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042cc:	d156      	bne.n	800437c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ce:	2301      	movs	r3, #1
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d2:	e045      	b.n	8004360 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d12e      	bne.n	800435a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042fe:	2b00      	cmp	r3, #0
 8004300:	da2b      	bge.n	800435a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800430e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004312:	429a      	cmp	r2, r3
 8004314:	d121      	bne.n	800435a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004356:	6053      	str	r3, [r2, #4]
            break;
 8004358:	e008      	b.n	800436c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	3301      	adds	r3, #1
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	791b      	ldrb	r3, [r3, #4]
 8004364:	461a      	mov	r2, r3
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	4293      	cmp	r3, r2
 800436a:	d3b3      	bcc.n	80042d4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800437a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f004 fafd 	bl	8008980 <USB_ReadInterrupts>
 8004386:	4603      	mov	r3, r0
 8004388:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004390:	d10a      	bne.n	80043a8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f008 f918 	bl	800c5c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80043a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f004 fae7 	bl	8008980 <USB_ReadInterrupts>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d115      	bne.n	80043e8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f008 f908 	bl	800c5e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	e000      	b.n	80043e8 <HAL_PCD_IRQHandler+0x996>
      return;
 80043e6:	bf00      	nop
    }
  }
}
 80043e8:	3734      	adds	r7, #52	@ 0x34
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd90      	pop	{r4, r7, pc}

080043ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_PCD_SetAddress+0x1a>
 8004404:	2302      	movs	r3, #2
 8004406:	e012      	b.n	800442e <HAL_PCD_SetAddress+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f004 fa46 	bl	80088b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	4608      	mov	r0, r1
 8004440:	4611      	mov	r1, r2
 8004442:	461a      	mov	r2, r3
 8004444:	4603      	mov	r3, r0
 8004446:	70fb      	strb	r3, [r7, #3]
 8004448:	460b      	mov	r3, r1
 800444a:	803b      	strh	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004458:	2b00      	cmp	r3, #0
 800445a:	da0f      	bge.n	800447c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	f003 020f 	and.w	r2, r3, #15
 8004462:	4613      	mov	r3, r2
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	3310      	adds	r3, #16
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4413      	add	r3, r2
 8004470:	3304      	adds	r3, #4
 8004472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	705a      	strb	r2, [r3, #1]
 800447a:	e00f      	b.n	800449c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	f003 020f 	and.w	r2, r3, #15
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	3304      	adds	r3, #4
 8004494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80044a8:	883b      	ldrh	r3, [r7, #0]
 80044aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	78ba      	ldrb	r2, [r7, #2]
 80044b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d004      	beq.n	80044ca <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80044ca:	78bb      	ldrb	r3, [r7, #2]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d102      	bne.n	80044d6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_PCD_EP_Open+0xae>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e00e      	b.n	8004502 <HAL_PCD_EP_Open+0xcc>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f003 fbc6 	bl	8007c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004500:	7afb      	ldrb	r3, [r7, #11]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004516:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800451a:	2b00      	cmp	r3, #0
 800451c:	da0f      	bge.n	800453e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	4613      	mov	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	3310      	adds	r3, #16
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	3304      	adds	r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	705a      	strb	r2, [r3, #1]
 800453c:	e00f      	b.n	800455e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	f003 020f 	and.w	r2, r3, #15
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	4413      	add	r3, r2
 8004554:	3304      	adds	r3, #4
 8004556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_PCD_EP_Close+0x6e>
 8004574:	2302      	movs	r3, #2
 8004576:	e00e      	b.n	8004596 <HAL_PCD_EP_Close+0x8c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	4618      	mov	r0, r3
 8004588:	f003 fc04 	bl	8007d94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	460b      	mov	r3, r1
 80045ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045ae:	7afb      	ldrb	r3, [r7, #11]
 80045b0:	f003 020f 	and.w	r2, r3, #15
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	3304      	adds	r3, #4
 80045c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2200      	movs	r2, #0
 80045d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2200      	movs	r2, #0
 80045de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045e0:	7afb      	ldrb	r3, [r7, #11]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	799b      	ldrb	r3, [r3, #6]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d102      	bne.n	80045fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	799b      	ldrb	r3, [r3, #6]
 8004602:	461a      	mov	r2, r3
 8004604:	6979      	ldr	r1, [r7, #20]
 8004606:	f003 fca1 	bl	8007f4c <USB_EPStartXfer>

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	f003 020f 	and.w	r2, r3, #15
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	460b      	mov	r3, r1
 8004652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004654:	7afb      	ldrb	r3, [r7, #11]
 8004656:	f003 020f 	and.w	r2, r3, #15
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	3310      	adds	r3, #16
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	3304      	adds	r3, #4
 800466a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2201      	movs	r2, #1
 8004682:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004684:	7afb      	ldrb	r3, [r7, #11]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	b2da      	uxtb	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	799b      	ldrb	r3, [r3, #6]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d102      	bne.n	800469e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	799b      	ldrb	r3, [r3, #6]
 80046a6:	461a      	mov	r2, r3
 80046a8:	6979      	ldr	r1, [r7, #20]
 80046aa:	f003 fc4f 	bl	8007f4c <USB_EPStartXfer>

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	7912      	ldrb	r2, [r2, #4]
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e04f      	b.n	8004776 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da0f      	bge.n	80046fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 020f 	and.w	r2, r3, #15
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	3310      	adds	r3, #16
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	3304      	adds	r3, #4
 80046f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	705a      	strb	r2, [r3, #1]
 80046fc:	e00d      	b.n	800471a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	3304      	adds	r3, #4
 8004712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	b2da      	uxtb	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_PCD_EP_SetStall+0x82>
 8004736:	2302      	movs	r3, #2
 8004738:	e01d      	b.n	8004776 <HAL_PCD_EP_SetStall+0xbe>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	4618      	mov	r0, r3
 800474a:	f003 ffdd 	bl	8008708 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	7999      	ldrb	r1, [r3, #6]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004766:	461a      	mov	r2, r3
 8004768:	f004 f9ce 	bl	8008b08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	7912      	ldrb	r2, [r2, #4]
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e042      	b.n	8004822 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800479c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	da0f      	bge.n	80047c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	4613      	mov	r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	3310      	adds	r3, #16
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	4413      	add	r3, r2
 80047b8:	3304      	adds	r3, #4
 80047ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	705a      	strb	r2, [r3, #1]
 80047c2:	e00f      	b.n	80047e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4413      	add	r3, r2
 80047da:	3304      	adds	r3, #4
 80047dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ea:	78fb      	ldrb	r3, [r7, #3]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_PCD_EP_ClrStall+0x86>
 8004800:	2302      	movs	r3, #2
 8004802:	e00e      	b.n	8004822 <HAL_PCD_EP_ClrStall+0xa4>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68f9      	ldr	r1, [r7, #12]
 8004812:	4618      	mov	r0, r3
 8004814:	f003 ffe6 	bl	80087e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800483a:	2b00      	cmp	r3, #0
 800483c:	da0c      	bge.n	8004858 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	f003 020f 	and.w	r2, r3, #15
 8004844:	4613      	mov	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	3310      	adds	r3, #16
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	4413      	add	r3, r2
 8004852:	3304      	adds	r3, #4
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e00c      	b.n	8004872 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	f003 020f 	and.w	r2, r3, #15
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	3304      	adds	r3, #4
 8004870:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	4618      	mov	r0, r3
 800487a:	f003 fe05 	bl	8008488 <USB_EPStopXfer>
 800487e:	4603      	mov	r3, r0
 8004880:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004882:	7afb      	ldrb	r3, [r7, #11]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	@ 0x28
 8004890:	af02      	add	r7, sp, #8
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	3310      	adds	r3, #16
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	4413      	add	r3, r2
 80048b0:	3304      	adds	r3, #4
 80048b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d901      	bls.n	80048c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e06b      	b.n	800499c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d902      	bls.n	80048e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	3303      	adds	r3, #3
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048e8:	e02a      	b.n	8004940 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d902      	bls.n	8004906 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3303      	adds	r3, #3
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68d9      	ldr	r1, [r3, #12]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	4603      	mov	r3, r0
 8004922:	6978      	ldr	r0, [r7, #20]
 8004924:	f003 fe5a 	bl	80085dc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	441a      	add	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	441a      	add	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	429a      	cmp	r2, r3
 8004954:	d809      	bhi.n	800496a <PCD_WriteEmptyTxFifo+0xde>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800495e:	429a      	cmp	r2, r3
 8004960:	d203      	bcs.n	800496a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1bf      	bne.n	80048ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	429a      	cmp	r2, r3
 8004974:	d811      	bhi.n	800499a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	2201      	movs	r2, #1
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800498a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	43db      	mvns	r3, r3
 8004990:	6939      	ldr	r1, [r7, #16]
 8004992:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004996:	4013      	ands	r3, r2
 8004998:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	333c      	adds	r3, #60	@ 0x3c
 80049bc:	3304      	adds	r3, #4
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	799b      	ldrb	r3, [r3, #6]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d17b      	bne.n	8004ad2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	4a61      	ldr	r2, [pc, #388]	@ (8004b6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	f240 80b9 	bls.w	8004b60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80b3 	beq.w	8004b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a06:	461a      	mov	r2, r3
 8004a08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a0c:	6093      	str	r3, [r2, #8]
 8004a0e:	e0a7      	b.n	8004b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a26:	461a      	mov	r2, r3
 8004a28:	2320      	movs	r3, #32
 8004a2a:	6093      	str	r3, [r2, #8]
 8004a2c:	e098      	b.n	8004b60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f040 8093 	bne.w	8004b60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d90f      	bls.n	8004a62 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a5e:	6093      	str	r3, [r2, #8]
 8004a60:	e07e      	b.n	8004b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	4413      	add	r3, r2
 8004a74:	3304      	adds	r3, #4
 8004a76:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	0159      	lsls	r1, r3, #5
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	440b      	add	r3, r1
 8004a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d114      	bne.n	8004ac4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004aac:	461a      	mov	r2, r3
 8004aae:	2101      	movs	r1, #1
 8004ab0:	f004 f82a 	bl	8008b08 <USB_EP0_OutStart>
 8004ab4:	e006      	b.n	8004ac4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	441a      	add	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f007 fcb8 	bl	800c440 <HAL_PCD_DataOutStageCallback>
 8004ad0:	e046      	b.n	8004b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	4a26      	ldr	r2, [pc, #152]	@ (8004b70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d124      	bne.n	8004b24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af0:	461a      	mov	r2, r3
 8004af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004af6:	6093      	str	r3, [r2, #8]
 8004af8:	e032      	b.n	8004b60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b10:	461a      	mov	r2, r3
 8004b12:	2320      	movs	r3, #32
 8004b14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f007 fc8f 	bl	800c440 <HAL_PCD_DataOutStageCallback>
 8004b22:	e01d      	b.n	8004b60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d114      	bne.n	8004b54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2100      	movs	r1, #0
 8004b50:	f003 ffda 	bl	8008b08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f007 fc70 	bl	800c440 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	4f54300a 	.word	0x4f54300a
 8004b70:	4f54310a 	.word	0x4f54310a

08004b74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	333c      	adds	r3, #60	@ 0x3c
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a15      	ldr	r2, [pc, #84]	@ (8004bfc <PCD_EP_OutSetupPacket_int+0x88>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d90e      	bls.n	8004bc8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d009      	beq.n	8004bc8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bc6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f007 fc27 	bl	800c41c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8004bfc <PCD_EP_OutSetupPacket_int+0x88>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d90c      	bls.n	8004bf0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	799b      	ldrb	r3, [r3, #6]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d108      	bne.n	8004bf0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004be8:	461a      	mov	r2, r3
 8004bea:	2101      	movs	r1, #1
 8004bec:	f003 ff8c 	bl	8008b08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	4f54300a 	.word	0x4f54300a

08004c00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d107      	bne.n	8004c2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004c1e:	883b      	ldrh	r3, [r7, #0]
 8004c20:	0419      	lsls	r1, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c2c:	e028      	b.n	8004c80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	e00d      	b.n	8004c5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	3340      	adds	r3, #64	@ 0x40
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4413      	add	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d3ec      	bcc.n	8004c42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c68:	883b      	ldrh	r3, [r7, #0]
 8004c6a:	0418      	lsls	r0, r3, #16
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	4302      	orrs	r2, r0
 8004c78:	3340      	adds	r3, #64	@ 0x40
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	460b      	mov	r3, r1
 8004c98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	887a      	ldrh	r2, [r7, #2]
 8004ca0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ce2:	f043 0303 	orr.w	r3, r3, #3
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0cc      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d0c:	4b68      	ldr	r3, [pc, #416]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d90c      	bls.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	4b65      	ldr	r3, [pc, #404]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	4b63      	ldr	r3, [pc, #396]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0b8      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d020      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d4c:	4b59      	ldr	r3, [pc, #356]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a58      	ldr	r2, [pc, #352]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d64:	4b53      	ldr	r3, [pc, #332]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a52      	ldr	r2, [pc, #328]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d70:	4b50      	ldr	r3, [pc, #320]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	494d      	ldr	r1, [pc, #308]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d044      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d107      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d96:	4b47      	ldr	r3, [pc, #284]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d119      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e07f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d003      	beq.n	8004db6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d107      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db6:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e06f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e067      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dd6:	4b37      	ldr	r3, [pc, #220]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f023 0203 	bic.w	r2, r3, #3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	4934      	ldr	r1, [pc, #208]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004de8:	f7fc f9a2 	bl	8001130 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df0:	f7fc f99e 	bl	8001130 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e04f      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 020c 	and.w	r2, r3, #12
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d1eb      	bne.n	8004df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e18:	4b25      	ldr	r3, [pc, #148]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d20c      	bcs.n	8004e40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b22      	ldr	r3, [pc, #136]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b20      	ldr	r3, [pc, #128]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e032      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4c:	4b19      	ldr	r3, [pc, #100]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4916      	ldr	r1, [pc, #88]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6a:	4b12      	ldr	r3, [pc, #72]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	490e      	ldr	r1, [pc, #56]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e7e:	f000 fb7f 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 8004e82:	4602      	mov	r2, r0
 8004e84:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	091b      	lsrs	r3, r3, #4
 8004e8a:	f003 030f 	and.w	r3, r3, #15
 8004e8e:	490a      	ldr	r1, [pc, #40]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	5ccb      	ldrb	r3, [r1, r3]
 8004e92:	fa22 f303 	lsr.w	r3, r2, r3
 8004e96:	4a09      	ldr	r2, [pc, #36]	@ (8004ebc <HAL_RCC_ClockConfig+0x1c4>)
 8004e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fc f902 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023c00 	.word	0x40023c00
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800ec68 	.word	0x0800ec68
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	20000004 	.word	0x20000004

08004ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000000 	.word	0x20000000

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ee0:	f7ff fff0 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b05      	ldr	r3, [pc, #20]	@ (8004efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a9b      	lsrs	r3, r3, #10
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4903      	ldr	r1, [pc, #12]	@ (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023800 	.word	0x40023800
 8004f00:	0800ec78 	.word	0x0800ec78

08004f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f08:	f7ff ffdc 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0b5b      	lsrs	r3, r3, #13
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	@ (8004f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	0800ec78 	.word	0x0800ec78

08004f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	@ 0x30
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004f64:	4b6f      	ldr	r3, [pc, #444]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f6a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	496c      	ldr	r1, [pc, #432]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004f82:	2301      	movs	r3, #1
 8004f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004f92:	4b64      	ldr	r3, [pc, #400]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f98:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	4960      	ldr	r1, [pc, #384]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d017      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fc0:	4b58      	ldr	r3, [pc, #352]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fce:	4955      	ldr	r1, [pc, #340]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d017      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ffc:	4b49      	ldr	r3, [pc, #292]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005002:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500a:	4946      	ldr	r1, [pc, #280]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005016:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800501a:	d101      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005028:	2301      	movs	r3, #1
 800502a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 808a 	beq.w	800514e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800503a:	2300      	movs	r3, #0
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	4b39      	ldr	r3, [pc, #228]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	4a38      	ldr	r2, [pc, #224]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005048:	6413      	str	r3, [r2, #64]	@ 0x40
 800504a:	4b36      	ldr	r3, [pc, #216]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005056:	4b34      	ldr	r3, [pc, #208]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a33      	ldr	r2, [pc, #204]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800505c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005060:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005062:	f7fc f865 	bl	8001130 <HAL_GetTick>
 8005066:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005068:	e008      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506a:	f7fc f861 	bl	8001130 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e278      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800507c:	4b2a      	ldr	r3, [pc, #168]	@ (8005128 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005088:	4b26      	ldr	r3, [pc, #152]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005090:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02f      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d028      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ae:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050b0:	4b1e      	ldr	r3, [pc, #120]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050b6:	4b1d      	ldr	r3, [pc, #116]	@ (800512c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050bc:	4a19      	ldr	r2, [pc, #100]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050c2:	4b18      	ldr	r3, [pc, #96]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d114      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050ce:	f7fc f82f 	bl	8001130 <HAL_GetTick>
 80050d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d4:	e00a      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d6:	f7fc f82b 	bl	8001130 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e240      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0ee      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005100:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005104:	d114      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005106:	4b07      	ldr	r3, [pc, #28]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800511a:	4902      	ldr	r1, [pc, #8]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800511c:	4313      	orrs	r3, r2
 800511e:	608b      	str	r3, [r1, #8]
 8005120:	e00c      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	40007000 	.word	0x40007000
 800512c:	42470e40 	.word	0x42470e40
 8005130:	4b4a      	ldr	r3, [pc, #296]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a49      	ldr	r2, [pc, #292]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005136:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800513a:	6093      	str	r3, [r2, #8]
 800513c:	4b47      	ldr	r3, [pc, #284]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800513e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005148:	4944      	ldr	r1, [pc, #272]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800514a:	4313      	orrs	r3, r2
 800514c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0310 	and.w	r3, r3, #16
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8005160:	4b3f      	ldr	r3, [pc, #252]	@ (8005260 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005162:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005170:	4b3a      	ldr	r3, [pc, #232]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005176:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800517e:	4937      	ldr	r1, [pc, #220]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005192:	4b32      	ldr	r3, [pc, #200]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005198:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a0:	492e      	ldr	r1, [pc, #184]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d011      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051b4:	4b29      	ldr	r3, [pc, #164]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ba:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c2:	4926      	ldr	r1, [pc, #152]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051d2:	d101      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80051d4:	2301      	movs	r3, #1
 80051d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80051e4:	4b1d      	ldr	r3, [pc, #116]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	491a      	ldr	r1, [pc, #104]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005202:	2b00      	cmp	r3, #0
 8005204:	d011      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005206:	4b15      	ldr	r3, [pc, #84]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800520c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005214:	4911      	ldr	r1, [pc, #68]	@ (800525c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005224:	d101      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005226:	2301      	movs	r3, #1
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d005      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005238:	f040 80ff 	bne.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800523c:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005242:	f7fb ff75 	bl	8001130 <HAL_GetTick>
 8005246:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005248:	e00e      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800524a:	f7fb ff71 	bl	8001130 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d907      	bls.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e188      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800525c:	40023800 	.word	0x40023800
 8005260:	424711e0 	.word	0x424711e0
 8005264:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005268:	4b7e      	ldr	r3, [pc, #504]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1ea      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005290:	2b00      	cmp	r3, #0
 8005292:	d028      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d124      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800529c:	4b71      	ldr	r3, [pc, #452]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800529e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052a2:	0c1b      	lsrs	r3, r3, #16
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	3301      	adds	r3, #1
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052b4:	0e1b      	lsrs	r3, r3, #24
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	019b      	lsls	r3, r3, #6
 80052c6:	431a      	orrs	r2, r3
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	3b01      	subs	r3, #1
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	431a      	orrs	r2, r3
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	071b      	lsls	r3, r3, #28
 80052de:	4961      	ldr	r1, [pc, #388]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005304:	2b00      	cmp	r3, #0
 8005306:	d035      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005310:	d130      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005312:	4b54      	ldr	r3, [pc, #336]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005324:	4b4f      	ldr	r3, [pc, #316]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800532a:	0f1b      	lsrs	r3, r3, #28
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	019b      	lsls	r3, r3, #6
 800533c:	431a      	orrs	r2, r3
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	3b01      	subs	r3, #1
 8005344:	041b      	lsls	r3, r3, #16
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	061b      	lsls	r3, r3, #24
 800534e:	431a      	orrs	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	071b      	lsls	r3, r3, #28
 8005354:	4943      	ldr	r1, [pc, #268]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005356:	4313      	orrs	r3, r2
 8005358:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800535c:	4b41      	ldr	r3, [pc, #260]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800535e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005362:	f023 021f 	bic.w	r2, r3, #31
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	3b01      	subs	r3, #1
 800536c:	493d      	ldr	r1, [pc, #244]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537c:	2b00      	cmp	r3, #0
 800537e:	d029      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005388:	d124      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800538a:	4b36      	ldr	r3, [pc, #216]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800538c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	3301      	adds	r3, #1
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800539c:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a2:	0f1b      	lsrs	r3, r3, #28
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	019b      	lsls	r3, r3, #6
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	3b01      	subs	r3, #1
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	431a      	orrs	r2, r3
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	431a      	orrs	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	071b      	lsls	r3, r3, #28
 80053cc:	4925      	ldr	r1, [pc, #148]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d016      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	3b01      	subs	r3, #1
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	061b      	lsls	r3, r3, #24
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	071b      	lsls	r3, r3, #28
 8005406:	4917      	ldr	r1, [pc, #92]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800540e:	4b16      	ldr	r3, [pc, #88]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005410:	2201      	movs	r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005414:	f7fb fe8c 	bl	8001130 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800541c:	f7fb fe88 	bl	8001130 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e09f      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800542e:	4b0d      	ldr	r3, [pc, #52]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	2b01      	cmp	r3, #1
 800543e:	f040 8095 	bne.w	800556c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005442:	4b0a      	ldr	r3, [pc, #40]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005448:	f7fb fe72 	bl	8001130 <HAL_GetTick>
 800544c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800544e:	e00f      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005450:	f7fb fe6e 	bl	8001130 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d908      	bls.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e085      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005462:	bf00      	nop
 8005464:	40023800 	.word	0x40023800
 8005468:	42470068 	.word	0x42470068
 800546c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005470:	4b41      	ldr	r3, [pc, #260]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800547c:	d0e8      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800549a:	2b00      	cmp	r3, #0
 800549c:	d02b      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d127      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80054a6:	4b34      	ldr	r3, [pc, #208]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	3301      	adds	r3, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	019b      	lsls	r3, r3, #6
 80054c2:	431a      	orrs	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	3b01      	subs	r3, #1
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	4928      	ldr	r1, [pc, #160]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054dc:	4b26      	ldr	r3, [pc, #152]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054e2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	3b01      	subs	r3, #1
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	4922      	ldr	r1, [pc, #136]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01d      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005506:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800550a:	d118      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800550c:	4b1a      	ldr	r3, [pc, #104]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005512:	0e1b      	lsrs	r3, r3, #24
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	019b      	lsls	r3, r3, #6
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	3b01      	subs	r3, #1
 800552e:	041b      	lsls	r3, r3, #16
 8005530:	431a      	orrs	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	061b      	lsls	r3, r3, #24
 8005536:	4910      	ldr	r1, [pc, #64]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800553e:	4b0f      	ldr	r3, [pc, #60]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005544:	f7fb fdf4 	bl	8001130 <HAL_GetTick>
 8005548:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800554c:	f7fb fdf0 	bl	8001130 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e007      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800555e:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800556a:	d1ef      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3730      	adds	r7, #48	@ 0x30
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023800 	.word	0x40023800
 800557c:	42470070 	.word	0x42470070

08005580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005584:	b0ae      	sub	sp, #184	@ 0xb8
 8005586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055a6:	4bcb      	ldr	r3, [pc, #812]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b0c      	cmp	r3, #12
 80055b0:	f200 8206 	bhi.w	80059c0 <HAL_RCC_GetSysClockFreq+0x440>
 80055b4:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80055b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ba:	bf00      	nop
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	080059c1 	.word	0x080059c1
 80055c4:	080059c1 	.word	0x080059c1
 80055c8:	080059c1 	.word	0x080059c1
 80055cc:	080055f9 	.word	0x080055f9
 80055d0:	080059c1 	.word	0x080059c1
 80055d4:	080059c1 	.word	0x080059c1
 80055d8:	080059c1 	.word	0x080059c1
 80055dc:	08005601 	.word	0x08005601
 80055e0:	080059c1 	.word	0x080059c1
 80055e4:	080059c1 	.word	0x080059c1
 80055e8:	080059c1 	.word	0x080059c1
 80055ec:	080057f1 	.word	0x080057f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055f0:	4bb9      	ldr	r3, [pc, #740]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80055f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055f6:	e1e7      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055f8:	4bb8      	ldr	r3, [pc, #736]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80055fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055fe:	e1e3      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005600:	4bb4      	ldr	r3, [pc, #720]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005608:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800560c:	4bb1      	ldr	r3, [pc, #708]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d071      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005618:	4bae      	ldr	r3, [pc, #696]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	099b      	lsrs	r3, r3, #6
 800561e:	2200      	movs	r2, #0
 8005620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005624:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800562c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005630:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005634:	2300      	movs	r3, #0
 8005636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800563a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800563e:	4622      	mov	r2, r4
 8005640:	462b      	mov	r3, r5
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	0159      	lsls	r1, r3, #5
 800564c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005650:	0150      	lsls	r0, r2, #5
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4621      	mov	r1, r4
 8005658:	1a51      	subs	r1, r2, r1
 800565a:	6439      	str	r1, [r7, #64]	@ 0x40
 800565c:	4629      	mov	r1, r5
 800565e:	eb63 0301 	sbc.w	r3, r3, r1
 8005662:	647b      	str	r3, [r7, #68]	@ 0x44
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005670:	4649      	mov	r1, r9
 8005672:	018b      	lsls	r3, r1, #6
 8005674:	4641      	mov	r1, r8
 8005676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800567a:	4641      	mov	r1, r8
 800567c:	018a      	lsls	r2, r1, #6
 800567e:	4641      	mov	r1, r8
 8005680:	1a51      	subs	r1, r2, r1
 8005682:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005684:	4649      	mov	r1, r9
 8005686:	eb63 0301 	sbc.w	r3, r3, r1
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005698:	4649      	mov	r1, r9
 800569a:	00cb      	lsls	r3, r1, #3
 800569c:	4641      	mov	r1, r8
 800569e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056a2:	4641      	mov	r1, r8
 80056a4:	00ca      	lsls	r2, r1, #3
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	4622      	mov	r2, r4
 80056ae:	189b      	adds	r3, r3, r2
 80056b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056b2:	462b      	mov	r3, r5
 80056b4:	460a      	mov	r2, r1
 80056b6:	eb42 0303 	adc.w	r3, r2, r3
 80056ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056c8:	4629      	mov	r1, r5
 80056ca:	024b      	lsls	r3, r1, #9
 80056cc:	4621      	mov	r1, r4
 80056ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056d2:	4621      	mov	r1, r4
 80056d4:	024a      	lsls	r2, r1, #9
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80056ec:	f7fa fdf8 	bl	80002e0 <__aeabi_uldivmod>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4613      	mov	r3, r2
 80056f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056fa:	e067      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056fc:	4b75      	ldr	r3, [pc, #468]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	099b      	lsrs	r3, r3, #6
 8005702:	2200      	movs	r2, #0
 8005704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005708:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800570c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005716:	2300      	movs	r3, #0
 8005718:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800571a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800571e:	4622      	mov	r2, r4
 8005720:	462b      	mov	r3, r5
 8005722:	f04f 0000 	mov.w	r0, #0
 8005726:	f04f 0100 	mov.w	r1, #0
 800572a:	0159      	lsls	r1, r3, #5
 800572c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005730:	0150      	lsls	r0, r2, #5
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4621      	mov	r1, r4
 8005738:	1a51      	subs	r1, r2, r1
 800573a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800573c:	4629      	mov	r1, r5
 800573e:	eb63 0301 	sbc.w	r3, r3, r1
 8005742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005750:	4649      	mov	r1, r9
 8005752:	018b      	lsls	r3, r1, #6
 8005754:	4641      	mov	r1, r8
 8005756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800575a:	4641      	mov	r1, r8
 800575c:	018a      	lsls	r2, r1, #6
 800575e:	4641      	mov	r1, r8
 8005760:	ebb2 0a01 	subs.w	sl, r2, r1
 8005764:	4649      	mov	r1, r9
 8005766:	eb63 0b01 	sbc.w	fp, r3, r1
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005776:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800577a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800577e:	4692      	mov	sl, r2
 8005780:	469b      	mov	fp, r3
 8005782:	4623      	mov	r3, r4
 8005784:	eb1a 0303 	adds.w	r3, sl, r3
 8005788:	623b      	str	r3, [r7, #32]
 800578a:	462b      	mov	r3, r5
 800578c:	eb4b 0303 	adc.w	r3, fp, r3
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800579e:	4629      	mov	r1, r5
 80057a0:	028b      	lsls	r3, r1, #10
 80057a2:	4621      	mov	r1, r4
 80057a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057a8:	4621      	mov	r1, r4
 80057aa:	028a      	lsls	r2, r1, #10
 80057ac:	4610      	mov	r0, r2
 80057ae:	4619      	mov	r1, r3
 80057b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057b4:	2200      	movs	r2, #0
 80057b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80057b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80057ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80057be:	f7fa fd8f 	bl	80002e0 <__aeabi_uldivmod>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4613      	mov	r3, r2
 80057c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80057cc:	4b41      	ldr	r3, [pc, #260]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	3301      	adds	r3, #1
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80057de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80057e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80057ee:	e0eb      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057f0:	4b38      	ldr	r3, [pc, #224]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057fc:	4b35      	ldr	r3, [pc, #212]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d06b      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005808:	4b32      	ldr	r3, [pc, #200]	@ (80058d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	099b      	lsrs	r3, r3, #6
 800580e:	2200      	movs	r2, #0
 8005810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005812:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005814:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	663b      	str	r3, [r7, #96]	@ 0x60
 800581c:	2300      	movs	r3, #0
 800581e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005820:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005824:	4622      	mov	r2, r4
 8005826:	462b      	mov	r3, r5
 8005828:	f04f 0000 	mov.w	r0, #0
 800582c:	f04f 0100 	mov.w	r1, #0
 8005830:	0159      	lsls	r1, r3, #5
 8005832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005836:	0150      	lsls	r0, r2, #5
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4621      	mov	r1, r4
 800583e:	1a51      	subs	r1, r2, r1
 8005840:	61b9      	str	r1, [r7, #24]
 8005842:	4629      	mov	r1, r5
 8005844:	eb63 0301 	sbc.w	r3, r3, r1
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005856:	4659      	mov	r1, fp
 8005858:	018b      	lsls	r3, r1, #6
 800585a:	4651      	mov	r1, sl
 800585c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005860:	4651      	mov	r1, sl
 8005862:	018a      	lsls	r2, r1, #6
 8005864:	4651      	mov	r1, sl
 8005866:	ebb2 0801 	subs.w	r8, r2, r1
 800586a:	4659      	mov	r1, fp
 800586c:	eb63 0901 	sbc.w	r9, r3, r1
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800587c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005880:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005884:	4690      	mov	r8, r2
 8005886:	4699      	mov	r9, r3
 8005888:	4623      	mov	r3, r4
 800588a:	eb18 0303 	adds.w	r3, r8, r3
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	462b      	mov	r3, r5
 8005892:	eb49 0303 	adc.w	r3, r9, r3
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80058a4:	4629      	mov	r1, r5
 80058a6:	024b      	lsls	r3, r1, #9
 80058a8:	4621      	mov	r1, r4
 80058aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058ae:	4621      	mov	r1, r4
 80058b0:	024a      	lsls	r2, r1, #9
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058ba:	2200      	movs	r2, #0
 80058bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80058c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058c4:	f7fa fd0c 	bl	80002e0 <__aeabi_uldivmod>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4613      	mov	r3, r2
 80058ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058d2:	e065      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x420>
 80058d4:	40023800 	.word	0x40023800
 80058d8:	00f42400 	.word	0x00f42400
 80058dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058e0:	4b3d      	ldr	r3, [pc, #244]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	099b      	lsrs	r3, r3, #6
 80058e6:	2200      	movs	r2, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	4611      	mov	r1, r2
 80058ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80058f2:	2300      	movs	r3, #0
 80058f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80058f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80058fa:	4642      	mov	r2, r8
 80058fc:	464b      	mov	r3, r9
 80058fe:	f04f 0000 	mov.w	r0, #0
 8005902:	f04f 0100 	mov.w	r1, #0
 8005906:	0159      	lsls	r1, r3, #5
 8005908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800590c:	0150      	lsls	r0, r2, #5
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4641      	mov	r1, r8
 8005914:	1a51      	subs	r1, r2, r1
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	4649      	mov	r1, r9
 800591a:	eb63 0301 	sbc.w	r3, r3, r1
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800592c:	4659      	mov	r1, fp
 800592e:	018b      	lsls	r3, r1, #6
 8005930:	4651      	mov	r1, sl
 8005932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005936:	4651      	mov	r1, sl
 8005938:	018a      	lsls	r2, r1, #6
 800593a:	4651      	mov	r1, sl
 800593c:	1a54      	subs	r4, r2, r1
 800593e:	4659      	mov	r1, fp
 8005940:	eb63 0501 	sbc.w	r5, r3, r1
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	00eb      	lsls	r3, r5, #3
 800594e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005952:	00e2      	lsls	r2, r4, #3
 8005954:	4614      	mov	r4, r2
 8005956:	461d      	mov	r5, r3
 8005958:	4643      	mov	r3, r8
 800595a:	18e3      	adds	r3, r4, r3
 800595c:	603b      	str	r3, [r7, #0]
 800595e:	464b      	mov	r3, r9
 8005960:	eb45 0303 	adc.w	r3, r5, r3
 8005964:	607b      	str	r3, [r7, #4]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005972:	4629      	mov	r1, r5
 8005974:	028b      	lsls	r3, r1, #10
 8005976:	4621      	mov	r1, r4
 8005978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800597c:	4621      	mov	r1, r4
 800597e:	028a      	lsls	r2, r1, #10
 8005980:	4610      	mov	r0, r2
 8005982:	4619      	mov	r1, r3
 8005984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005988:	2200      	movs	r2, #0
 800598a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800598c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800598e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005992:	f7fa fca5 	bl	80002e0 <__aeabi_uldivmod>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4613      	mov	r3, r2
 800599c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80059a0:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	0f1b      	lsrs	r3, r3, #28
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80059ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059be:	e003      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c0:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80059c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80059c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	37b8      	adds	r7, #184	@ 0xb8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800
 80059dc:	00f42400 	.word	0x00f42400

080059e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e28d      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8083 	beq.w	8005b06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a00:	4b94      	ldr	r3, [pc, #592]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 030c 	and.w	r3, r3, #12
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d019      	beq.n	8005a40 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005a0c:	4b91      	ldr	r3, [pc, #580]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 030c 	and.w	r3, r3, #12
        || \
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d106      	bne.n	8005a26 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005a18:	4b8e      	ldr	r3, [pc, #568]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a24:	d00c      	beq.n	8005a40 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a26:	4b8b      	ldr	r3, [pc, #556]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005a2e:	2b0c      	cmp	r3, #12
 8005a30:	d112      	bne.n	8005a58 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a32:	4b88      	ldr	r3, [pc, #544]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a3e:	d10b      	bne.n	8005a58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a40:	4b84      	ldr	r3, [pc, #528]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d05b      	beq.n	8005b04 <HAL_RCC_OscConfig+0x124>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d157      	bne.n	8005b04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e25a      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a60:	d106      	bne.n	8005a70 <HAL_RCC_OscConfig+0x90>
 8005a62:	4b7c      	ldr	r3, [pc, #496]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a7b      	ldr	r2, [pc, #492]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e01d      	b.n	8005aac <HAL_RCC_OscConfig+0xcc>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0xb4>
 8005a7a:	4b76      	ldr	r3, [pc, #472]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a75      	ldr	r2, [pc, #468]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4b73      	ldr	r3, [pc, #460]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a72      	ldr	r2, [pc, #456]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0xcc>
 8005a94:	4b6f      	ldr	r3, [pc, #444]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a6e      	ldr	r2, [pc, #440]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b6c      	ldr	r3, [pc, #432]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a6b      	ldr	r2, [pc, #428]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fb fb3c 	bl	8001130 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005abc:	f7fb fb38 	bl	8001130 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	@ 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e21f      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	4b61      	ldr	r3, [pc, #388]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0xdc>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005adc:	f7fb fb28 	bl	8001130 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fb fb24 	bl	8001130 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	@ 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e20b      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af6:	4b57      	ldr	r3, [pc, #348]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x104>
 8005b02:	e000      	b.n	8005b06 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d06f      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b12:	4b50      	ldr	r3, [pc, #320]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d017      	beq.n	8005b4e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
        || \
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d105      	bne.n	8005b36 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b36:	4b47      	ldr	r3, [pc, #284]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005b3e:	2b0c      	cmp	r3, #12
 8005b40:	d11c      	bne.n	8005b7c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b42:	4b44      	ldr	r3, [pc, #272]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d116      	bne.n	8005b7c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4e:	4b41      	ldr	r3, [pc, #260]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <HAL_RCC_OscConfig+0x186>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d001      	beq.n	8005b66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e1d3      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b66:	4b3b      	ldr	r3, [pc, #236]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4937      	ldr	r1, [pc, #220]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7a:	e03a      	b.n	8005bf2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d020      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b84:	4b34      	ldr	r3, [pc, #208]	@ (8005c58 <HAL_RCC_OscConfig+0x278>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8a:	f7fb fad1 	bl	8001130 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b92:	f7fb facd 	bl	8001130 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e1b4      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb0:	4b28      	ldr	r3, [pc, #160]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4925      	ldr	r1, [pc, #148]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	600b      	str	r3, [r1, #0]
 8005bc4:	e015      	b.n	8005bf2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bc6:	4b24      	ldr	r3, [pc, #144]	@ (8005c58 <HAL_RCC_OscConfig+0x278>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fb fab0 	bl	8001130 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd4:	f7fb faac 	bl	8001130 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e193      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be6:	4b1b      	ldr	r3, [pc, #108]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d036      	beq.n	8005c6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d016      	beq.n	8005c34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c06:	4b15      	ldr	r3, [pc, #84]	@ (8005c5c <HAL_RCC_OscConfig+0x27c>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0c:	f7fb fa90 	bl	8001130 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c14:	f7fb fa8c 	bl	8001130 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e173      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c26:	4b0b      	ldr	r3, [pc, #44]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0x234>
 8005c32:	e01b      	b.n	8005c6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c34:	4b09      	ldr	r3, [pc, #36]	@ (8005c5c <HAL_RCC_OscConfig+0x27c>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3a:	f7fb fa79 	bl	8001130 <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c40:	e00e      	b.n	8005c60 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c42:	f7fb fa75 	bl	8001130 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d907      	bls.n	8005c60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e15c      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
 8005c54:	40023800 	.word	0x40023800
 8005c58:	42470000 	.word	0x42470000
 8005c5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c60:	4b8a      	ldr	r3, [pc, #552]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1ea      	bne.n	8005c42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0304 	and.w	r3, r3, #4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 8097 	beq.w	8005da8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c7e:	4b83      	ldr	r3, [pc, #524]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10f      	bne.n	8005caa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	4a7e      	ldr	r2, [pc, #504]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005caa:	4b79      	ldr	r3, [pc, #484]	@ (8005e90 <HAL_RCC_OscConfig+0x4b0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d118      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cb6:	4b76      	ldr	r3, [pc, #472]	@ (8005e90 <HAL_RCC_OscConfig+0x4b0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a75      	ldr	r2, [pc, #468]	@ (8005e90 <HAL_RCC_OscConfig+0x4b0>)
 8005cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cc2:	f7fb fa35 	bl	8001130 <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc8:	e008      	b.n	8005cdc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cca:	f7fb fa31 	bl	8001130 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e118      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8005e90 <HAL_RCC_OscConfig+0x4b0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0f0      	beq.n	8005cca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d106      	bne.n	8005cfe <HAL_RCC_OscConfig+0x31e>
 8005cf0:	4b66      	ldr	r3, [pc, #408]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf4:	4a65      	ldr	r2, [pc, #404]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cfc:	e01c      	b.n	8005d38 <HAL_RCC_OscConfig+0x358>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b05      	cmp	r3, #5
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0x340>
 8005d06:	4b61      	ldr	r3, [pc, #388]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0a:	4a60      	ldr	r2, [pc, #384]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d0c:	f043 0304 	orr.w	r3, r3, #4
 8005d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d12:	4b5e      	ldr	r3, [pc, #376]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	4a5d      	ldr	r2, [pc, #372]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1e:	e00b      	b.n	8005d38 <HAL_RCC_OscConfig+0x358>
 8005d20:	4b5a      	ldr	r3, [pc, #360]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d24:	4a59      	ldr	r2, [pc, #356]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d2c:	4b57      	ldr	r3, [pc, #348]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d30:	4a56      	ldr	r2, [pc, #344]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d32:	f023 0304 	bic.w	r3, r3, #4
 8005d36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d015      	beq.n	8005d6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fb f9f6 	bl	8001130 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d48:	f7fb f9f2 	bl	8001130 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e0d7      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0ee      	beq.n	8005d48 <HAL_RCC_OscConfig+0x368>
 8005d6a:	e014      	b.n	8005d96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fb f9e0 	bl	8001130 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d72:	e00a      	b.n	8005d8a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d74:	f7fb f9dc 	bl	8001130 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e0c1      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d8a:	4b40      	ldr	r3, [pc, #256]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1ee      	bne.n	8005d74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d105      	bne.n	8005da8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da0:	4a3a      	ldr	r2, [pc, #232]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005da2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005da6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80ad 	beq.w	8005f0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005db2:	4b36      	ldr	r3, [pc, #216]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 030c 	and.w	r3, r3, #12
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d060      	beq.n	8005e80 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d145      	bne.n	8005e52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc6:	4b33      	ldr	r3, [pc, #204]	@ (8005e94 <HAL_RCC_OscConfig+0x4b4>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fb f9b0 	bl	8001130 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd4:	f7fb f9ac 	bl	8001130 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e093      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de6:	4b29      	ldr	r3, [pc, #164]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69da      	ldr	r2, [r3, #28]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	019b      	lsls	r3, r3, #6
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	041b      	lsls	r3, r3, #16
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	491b      	ldr	r1, [pc, #108]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e24:	4b1b      	ldr	r3, [pc, #108]	@ (8005e94 <HAL_RCC_OscConfig+0x4b4>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2a:	f7fb f981 	bl	8001130 <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e32:	f7fb f97d 	bl	8001130 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e064      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e44:	4b11      	ldr	r3, [pc, #68]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0f0      	beq.n	8005e32 <HAL_RCC_OscConfig+0x452>
 8005e50:	e05c      	b.n	8005f0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e52:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <HAL_RCC_OscConfig+0x4b4>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fb f96a 	bl	8001130 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fb f966 	bl	8001130 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e04d      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e72:	4b06      	ldr	r3, [pc, #24]	@ (8005e8c <HAL_RCC_OscConfig+0x4ac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x480>
 8005e7e:	e045      	b.n	8005f0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d107      	bne.n	8005e98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e040      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40007000 	.word	0x40007000
 8005e94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e98:	4b1f      	ldr	r3, [pc, #124]	@ (8005f18 <HAL_RCC_OscConfig+0x538>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d030      	beq.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d129      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d122      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ec8:	4013      	ands	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ece:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d119      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d10f      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d107      	bne.n	8005f08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d001      	beq.n	8005f0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800

08005f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e041      	b.n	8005fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fa fe9a 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f000 f95e 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d001      	beq.n	8005fd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e046      	b.n	8006062 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a23      	ldr	r2, [pc, #140]	@ (8006070 <HAL_TIM_Base_Start+0xb4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d022      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fee:	d01d      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8006074 <HAL_TIM_Base_Start+0xb8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8006078 <HAL_TIM_Base_Start+0xbc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1c      	ldr	r2, [pc, #112]	@ (800607c <HAL_TIM_Base_Start+0xc0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1b      	ldr	r2, [pc, #108]	@ (8006080 <HAL_TIM_Base_Start+0xc4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a19      	ldr	r2, [pc, #100]	@ (8006084 <HAL_TIM_Base_Start+0xc8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_TIM_Base_Start+0x70>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a18      	ldr	r2, [pc, #96]	@ (8006088 <HAL_TIM_Base_Start+0xcc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d111      	bne.n	8006050 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b06      	cmp	r3, #6
 800603c:	d010      	beq.n	8006060 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604e:	e007      	b.n	8006060 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40000400 	.word	0x40000400
 8006078:	40000800 	.word	0x40000800
 800607c:	40000c00 	.word	0x40000c00
 8006080:	40010400 	.word	0x40010400
 8006084:	40014000 	.word	0x40014000
 8006088:	40001800 	.word	0x40001800

0800608c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIM_ConfigClockSource+0x1c>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e0b4      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x186>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e0:	d03e      	beq.n	8006160 <HAL_TIM_ConfigClockSource+0xd4>
 80060e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e6:	f200 8087 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ee:	f000 8086 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x172>
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f6:	d87f      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 80060f8:	2b70      	cmp	r3, #112	@ 0x70
 80060fa:	d01a      	beq.n	8006132 <HAL_TIM_ConfigClockSource+0xa6>
 80060fc:	2b70      	cmp	r3, #112	@ 0x70
 80060fe:	d87b      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006100:	2b60      	cmp	r3, #96	@ 0x60
 8006102:	d050      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006104:	2b60      	cmp	r3, #96	@ 0x60
 8006106:	d877      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006108:	2b50      	cmp	r3, #80	@ 0x50
 800610a:	d03c      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0xfa>
 800610c:	2b50      	cmp	r3, #80	@ 0x50
 800610e:	d873      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006110:	2b40      	cmp	r3, #64	@ 0x40
 8006112:	d058      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006114:	2b40      	cmp	r3, #64	@ 0x40
 8006116:	d86f      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006118:	2b30      	cmp	r3, #48	@ 0x30
 800611a:	d064      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15a>
 800611c:	2b30      	cmp	r3, #48	@ 0x30
 800611e:	d86b      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d060      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d867      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d05c      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15a>
 800612c:	2b10      	cmp	r3, #16
 800612e:	d05a      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006130:	e062      	b.n	80061f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006142:	f000 f991 	bl	8006468 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	609a      	str	r2, [r3, #8]
      break;
 800615e:	e04f      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006170:	f000 f97a 	bl	8006468 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006182:	609a      	str	r2, [r3, #8]
      break;
 8006184:	e03c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006192:	461a      	mov	r2, r3
 8006194:	f000 f8ee 	bl	8006374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2150      	movs	r1, #80	@ 0x50
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f947 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 80061a4:	e02c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b2:	461a      	mov	r2, r3
 80061b4:	f000 f90d 	bl	80063d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2160      	movs	r1, #96	@ 0x60
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f937 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 80061c4:	e01c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d2:	461a      	mov	r2, r3
 80061d4:	f000 f8ce 	bl	8006374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2140      	movs	r1, #64	@ 0x40
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 f927 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 80061e4:	e00c      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f000 f91e 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 80061f6:	e003      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
      break;
 80061fc:	e000      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a46      	ldr	r2, [pc, #280]	@ (8006348 <TIM_Base_SetConfig+0x12c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800623a:	d00f      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a43      	ldr	r2, [pc, #268]	@ (800634c <TIM_Base_SetConfig+0x130>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a42      	ldr	r2, [pc, #264]	@ (8006350 <TIM_Base_SetConfig+0x134>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a41      	ldr	r2, [pc, #260]	@ (8006354 <TIM_Base_SetConfig+0x138>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0x40>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a40      	ldr	r2, [pc, #256]	@ (8006358 <TIM_Base_SetConfig+0x13c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d108      	bne.n	800626e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a35      	ldr	r2, [pc, #212]	@ (8006348 <TIM_Base_SetConfig+0x12c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d02b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800627c:	d027      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a32      	ldr	r2, [pc, #200]	@ (800634c <TIM_Base_SetConfig+0x130>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d023      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a31      	ldr	r2, [pc, #196]	@ (8006350 <TIM_Base_SetConfig+0x134>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01f      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a30      	ldr	r2, [pc, #192]	@ (8006354 <TIM_Base_SetConfig+0x138>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2f      	ldr	r2, [pc, #188]	@ (8006358 <TIM_Base_SetConfig+0x13c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d017      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2e      	ldr	r2, [pc, #184]	@ (800635c <TIM_Base_SetConfig+0x140>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2d      	ldr	r2, [pc, #180]	@ (8006360 <TIM_Base_SetConfig+0x144>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006364 <TIM_Base_SetConfig+0x148>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006368 <TIM_Base_SetConfig+0x14c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2a      	ldr	r2, [pc, #168]	@ (800636c <TIM_Base_SetConfig+0x150>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a29      	ldr	r2, [pc, #164]	@ (8006370 <TIM_Base_SetConfig+0x154>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d108      	bne.n	80062e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a10      	ldr	r2, [pc, #64]	@ (8006348 <TIM_Base_SetConfig+0x12c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_Base_SetConfig+0xf8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a12      	ldr	r2, [pc, #72]	@ (8006358 <TIM_Base_SetConfig+0x13c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d103      	bne.n	800631c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d105      	bne.n	800633a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f023 0201 	bic.w	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	611a      	str	r2, [r3, #16]
  }
}
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40010000 	.word	0x40010000
 800634c:	40000400 	.word	0x40000400
 8006350:	40000800 	.word	0x40000800
 8006354:	40000c00 	.word	0x40000c00
 8006358:	40010400 	.word	0x40010400
 800635c:	40014000 	.word	0x40014000
 8006360:	40014400 	.word	0x40014400
 8006364:	40014800 	.word	0x40014800
 8006368:	40001800 	.word	0x40001800
 800636c:	40001c00 	.word	0x40001c00
 8006370:	40002000 	.word	0x40002000

08006374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0201 	bic.w	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800639e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 030a 	bic.w	r3, r3, #10
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b087      	sub	sp, #28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f023 0210 	bic.w	r2, r3, #16
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	031b      	lsls	r3, r3, #12
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800640e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	f043 0307 	orr.w	r3, r3, #7
 8006454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	021a      	lsls	r2, r3, #8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	431a      	orrs	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4313      	orrs	r3, r2
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064bc:	2302      	movs	r3, #2
 80064be:	e05a      	b.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a21      	ldr	r2, [pc, #132]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d022      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650c:	d01d      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1d      	ldr	r2, [pc, #116]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d018      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1b      	ldr	r2, [pc, #108]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a1a      	ldr	r2, [pc, #104]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a18      	ldr	r2, [pc, #96]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a17      	ldr	r2, [pc, #92]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a15      	ldr	r2, [pc, #84]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d10c      	bne.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4313      	orrs	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40010000 	.word	0x40010000
 8006588:	40000400 	.word	0x40000400
 800658c:	40000800 	.word	0x40000800
 8006590:	40000c00 	.word	0x40000c00
 8006594:	40010400 	.word	0x40010400
 8006598:	40014000 	.word	0x40014000
 800659c:	40001800 	.word	0x40001800

080065a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e042      	b.n	8006638 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fa fb78 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2224      	movs	r2, #36	@ 0x24
 80065d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fd69 	bl	80070bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695a      	ldr	r2, [r3, #20]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	@ 0x28
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	4613      	mov	r3, r2
 800664e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b20      	cmp	r3, #32
 800665e:	d175      	bne.n	800674c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <HAL_UART_Transmit+0x2c>
 8006666:	88fb      	ldrh	r3, [r7, #6]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e06e      	b.n	800674e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2221      	movs	r2, #33	@ 0x21
 800667a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800667e:	f7fa fd57 	bl	8001130 <HAL_GetTick>
 8006682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	88fa      	ldrh	r2, [r7, #6]
 800668e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006698:	d108      	bne.n	80066ac <HAL_UART_Transmit+0x6c>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d104      	bne.n	80066ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	e003      	b.n	80066b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066b4:	e02e      	b.n	8006714 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2200      	movs	r2, #0
 80066be:	2180      	movs	r1, #128	@ 0x80
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 fb05 	bl	8006cd0 <UART_WaitOnFlagUntilTimeout>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e03a      	b.n	800674e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	3302      	adds	r3, #2
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	e007      	b.n	8006706 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	781a      	ldrb	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	3301      	adds	r3, #1
 8006704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1cb      	bne.n	80066b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2200      	movs	r2, #0
 8006726:	2140      	movs	r1, #64	@ 0x40
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 fad1 	bl	8006cd0 <UART_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2220      	movs	r2, #32
 8006738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e006      	b.n	800674e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3720      	adds	r7, #32
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b0ba      	sub	sp, #232	@ 0xe8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800677e:	2300      	movs	r3, #0
 8006780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006784:	2300      	movs	r3, #0
 8006786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800678a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10f      	bne.n	80067be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800679e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <HAL_UART_IRQHandler+0x66>
 80067aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fbc2 	bl	8006f40 <UART_Receive_IT>
      return;
 80067bc:	e25b      	b.n	8006c76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80de 	beq.w	8006984 <HAL_UART_IRQHandler+0x22c>
 80067c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d106      	bne.n	80067e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80d1 	beq.w	8006984 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <HAL_UART_IRQHandler+0xae>
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fe:	f043 0201 	orr.w	r2, r3, #1
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00b      	beq.n	800682a <HAL_UART_IRQHandler+0xd2>
 8006812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	f043 0202 	orr.w	r2, r3, #2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <HAL_UART_IRQHandler+0xf6>
 8006836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006846:	f043 0204 	orr.w	r2, r3, #4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800684e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d011      	beq.n	800687e <HAL_UART_IRQHandler+0x126>
 800685a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d105      	bne.n	8006872 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006876:	f043 0208 	orr.w	r2, r3, #8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 81f2 	beq.w	8006c6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_UART_IRQHandler+0x14e>
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fb4d 	bl	8006f40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b0:	2b40      	cmp	r3, #64	@ 0x40
 80068b2:	bf0c      	ite	eq
 80068b4:	2301      	moveq	r3, #1
 80068b6:	2300      	movne	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d103      	bne.n	80068d2 <HAL_UART_IRQHandler+0x17a>
 80068ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d04f      	beq.n	8006972 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa55 	bl	8006d82 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068e2:	2b40      	cmp	r3, #64	@ 0x40
 80068e4:	d141      	bne.n	800696a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3314      	adds	r3, #20
 80068ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3314      	adds	r3, #20
 800690e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800691e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800692a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1d9      	bne.n	80068e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d013      	beq.n	8006962 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693e:	4a7e      	ldr	r2, [pc, #504]	@ (8006b38 <HAL_UART_IRQHandler+0x3e0>)
 8006940:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006946:	4618      	mov	r0, r3
 8006948:	f7fb fac2 	bl	8001ed0 <HAL_DMA_Abort_IT>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d016      	beq.n	8006980 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800695c:	4610      	mov	r0, r2
 800695e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006960:	e00e      	b.n	8006980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f99e 	bl	8006ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006968:	e00a      	b.n	8006980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f99a 	bl	8006ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006970:	e006      	b.n	8006980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f996 	bl	8006ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800697e:	e175      	b.n	8006c6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	bf00      	nop
    return;
 8006982:	e173      	b.n	8006c6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006988:	2b01      	cmp	r3, #1
 800698a:	f040 814f 	bne.w	8006c2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8148 	beq.w	8006c2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800699c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8141 	beq.w	8006c2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069aa:	2300      	movs	r3, #0
 80069ac:	60bb      	str	r3, [r7, #8]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	60bb      	str	r3, [r7, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	60bb      	str	r3, [r7, #8]
 80069be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ca:	2b40      	cmp	r3, #64	@ 0x40
 80069cc:	f040 80b6 	bne.w	8006b3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 8145 	beq.w	8006c70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80069ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069ee:	429a      	cmp	r2, r3
 80069f0:	f080 813e 	bcs.w	8006c70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a06:	f000 8088 	beq.w	8006b1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006a36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1d9      	bne.n	8006a0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3314      	adds	r3, #20
 8006a5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a68:	f023 0301 	bic.w	r3, r3, #1
 8006a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3314      	adds	r3, #20
 8006a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e1      	bne.n	8006a56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3314      	adds	r3, #20
 8006a98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3314      	adds	r3, #20
 8006ab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ab6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006abc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e3      	bne.n	8006a92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aea:	f023 0310 	bic.w	r3, r3, #16
 8006aee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	330c      	adds	r3, #12
 8006af8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006afc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006afe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e3      	bne.n	8006ad8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fb f96b 	bl	8001df0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f8c1 	bl	8006cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b36:	e09b      	b.n	8006c70 <HAL_UART_IRQHandler+0x518>
 8006b38:	08006e49 	.word	0x08006e49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 808e 	beq.w	8006c74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8089 	beq.w	8006c74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	330c      	adds	r3, #12
 8006b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	330c      	adds	r3, #12
 8006b82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006b86:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e3      	bne.n	8006b62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3314      	adds	r3, #20
 8006ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3314      	adds	r3, #20
 8006bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e3      	bne.n	8006b9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0310 	bic.w	r3, r3, #16
 8006bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006c04:	61fa      	str	r2, [r7, #28]
 8006c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	69b9      	ldr	r1, [r7, #24]
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	617b      	str	r3, [r7, #20]
   return(result);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e3      	bne.n	8006be0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f847 	bl	8006cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c2a:	e023      	b.n	8006c74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d009      	beq.n	8006c4c <HAL_UART_IRQHandler+0x4f4>
 8006c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f913 	bl	8006e70 <UART_Transmit_IT>
    return;
 8006c4a:	e014      	b.n	8006c76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00e      	beq.n	8006c76 <HAL_UART_IRQHandler+0x51e>
 8006c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f953 	bl	8006f10 <UART_EndTransmit_IT>
    return;
 8006c6a:	e004      	b.n	8006c76 <HAL_UART_IRQHandler+0x51e>
    return;
 8006c6c:	bf00      	nop
 8006c6e:	e002      	b.n	8006c76 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c70:	bf00      	nop
 8006c72:	e000      	b.n	8006c76 <HAL_UART_IRQHandler+0x51e>
      return;
 8006c74:	bf00      	nop
  }
}
 8006c76:	37e8      	adds	r7, #232	@ 0xe8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ce0:	e03b      	b.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce8:	d037      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cea:	f7fa fa21 	bl	8001130 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	6a3a      	ldr	r2, [r7, #32]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d302      	bcc.n	8006d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e03a      	b.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d023      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b80      	cmp	r3, #128	@ 0x80
 8006d16:	d020      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b40      	cmp	r3, #64	@ 0x40
 8006d1c:	d01d      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0308 	and.w	r3, r3, #8
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	d116      	bne.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 f81d 	bl	8006d82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2208      	movs	r2, #8
 8006d4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e00f      	b.n	8006d7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	4013      	ands	r3, r2
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	bf0c      	ite	eq
 8006d6a:	2301      	moveq	r3, #1
 8006d6c:	2300      	movne	r3, #0
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d0b4      	beq.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b095      	sub	sp, #84	@ 0x54
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	330c      	adds	r3, #12
 8006da8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006daa:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006db0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3314      	adds	r3, #20
 8006dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3314      	adds	r3, #20
 8006ddc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006de0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006de4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e5      	bne.n	8006dbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d119      	bne.n	8006e2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f023 0310 	bic.w	r3, r3, #16
 8006e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	330c      	adds	r3, #12
 8006e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e1a:	61ba      	str	r2, [r7, #24]
 8006e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6979      	ldr	r1, [r7, #20]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	613b      	str	r3, [r7, #16]
   return(result);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e5      	bne.n	8006dfa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e3c:	bf00      	nop
 8006e3e:	3754      	adds	r7, #84	@ 0x54
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff ff1e 	bl	8006ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b21      	cmp	r3, #33	@ 0x21
 8006e82:	d13e      	bne.n	8006f02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8c:	d114      	bne.n	8006eb8 <UART_Transmit_IT+0x48>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d110      	bne.n	8006eb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eaa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	1c9a      	adds	r2, r3, #2
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	621a      	str	r2, [r3, #32]
 8006eb6:	e008      	b.n	8006eca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	1c59      	adds	r1, r3, #1
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6211      	str	r1, [r2, #32]
 8006ec2:	781a      	ldrb	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10f      	bne.n	8006efe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68da      	ldr	r2, [r3, #12]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006eec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006efc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	e000      	b.n	8006f04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f02:	2302      	movs	r3, #2
  }
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fea3 	bl	8006c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08c      	sub	sp, #48	@ 0x30
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b22      	cmp	r3, #34	@ 0x22
 8006f52:	f040 80ae 	bne.w	80070b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f5e:	d117      	bne.n	8006f90 <UART_Receive_IT+0x50>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d113      	bne.n	8006f90 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f70:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	1c9a      	adds	r2, r3, #2
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f8e:	e026      	b.n	8006fde <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa2:	d007      	beq.n	8006fb4 <UART_Receive_IT+0x74>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <UART_Receive_IT+0x82>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	e008      	b.n	8006fd4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	4619      	mov	r1, r3
 8006fec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d15d      	bne.n	80070ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0220 	bic.w	r2, r2, #32
 8007000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007010:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695a      	ldr	r2, [r3, #20]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0201 	bic.w	r2, r2, #1
 8007020:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007034:	2b01      	cmp	r3, #1
 8007036:	d135      	bne.n	80070a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	330c      	adds	r3, #12
 8007044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	613b      	str	r3, [r7, #16]
   return(result);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f023 0310 	bic.w	r3, r3, #16
 8007054:	627b      	str	r3, [r7, #36]	@ 0x24
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	330c      	adds	r3, #12
 800705c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705e:	623a      	str	r2, [r7, #32]
 8007060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	69f9      	ldr	r1, [r7, #28]
 8007064:	6a3a      	ldr	r2, [r7, #32]
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	61bb      	str	r3, [r7, #24]
   return(result);
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e5      	bne.n	800703e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b10      	cmp	r3, #16
 800707e:	d10a      	bne.n	8007096 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fe0b 	bl	8006cb8 <HAL_UARTEx_RxEventCallback>
 80070a2:	e002      	b.n	80070aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff fdf3 	bl	8006c90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	e002      	b.n	80070b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e000      	b.n	80070b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070b2:	2302      	movs	r3, #2
  }
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3730      	adds	r7, #48	@ 0x30
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070c0:	b0c0      	sub	sp, #256	@ 0x100
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d8:	68d9      	ldr	r1, [r3, #12]
 80070da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	ea40 0301 	orr.w	r3, r0, r1
 80070e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	431a      	orrs	r2, r3
 80070f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	4313      	orrs	r3, r2
 8007104:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007114:	f021 010c 	bic.w	r1, r1, #12
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007122:	430b      	orrs	r3, r1
 8007124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007136:	6999      	ldr	r1, [r3, #24]
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	ea40 0301 	orr.w	r3, r0, r1
 8007142:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4b8f      	ldr	r3, [pc, #572]	@ (8007388 <UART_SetConfig+0x2cc>)
 800714c:	429a      	cmp	r2, r3
 800714e:	d005      	beq.n	800715c <UART_SetConfig+0xa0>
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4b8d      	ldr	r3, [pc, #564]	@ (800738c <UART_SetConfig+0x2d0>)
 8007158:	429a      	cmp	r2, r3
 800715a:	d104      	bne.n	8007166 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800715c:	f7fd fed2 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 8007160:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007164:	e003      	b.n	800716e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007166:	f7fd feb9 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 800716a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800716e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007178:	f040 810c 	bne.w	8007394 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800717c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007180:	2200      	movs	r2, #0
 8007182:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007186:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800718a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800718e:	4622      	mov	r2, r4
 8007190:	462b      	mov	r3, r5
 8007192:	1891      	adds	r1, r2, r2
 8007194:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007196:	415b      	adcs	r3, r3
 8007198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800719a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800719e:	4621      	mov	r1, r4
 80071a0:	eb12 0801 	adds.w	r8, r2, r1
 80071a4:	4629      	mov	r1, r5
 80071a6:	eb43 0901 	adc.w	r9, r3, r1
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071be:	4690      	mov	r8, r2
 80071c0:	4699      	mov	r9, r3
 80071c2:	4623      	mov	r3, r4
 80071c4:	eb18 0303 	adds.w	r3, r8, r3
 80071c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071cc:	462b      	mov	r3, r5
 80071ce:	eb49 0303 	adc.w	r3, r9, r3
 80071d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071ea:	460b      	mov	r3, r1
 80071ec:	18db      	adds	r3, r3, r3
 80071ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80071f0:	4613      	mov	r3, r2
 80071f2:	eb42 0303 	adc.w	r3, r2, r3
 80071f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80071f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007200:	f7f9 f86e 	bl	80002e0 <__aeabi_uldivmod>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4b61      	ldr	r3, [pc, #388]	@ (8007390 <UART_SetConfig+0x2d4>)
 800720a:	fba3 2302 	umull	r2, r3, r3, r2
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	011c      	lsls	r4, r3, #4
 8007212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007216:	2200      	movs	r2, #0
 8007218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800721c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007220:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007224:	4642      	mov	r2, r8
 8007226:	464b      	mov	r3, r9
 8007228:	1891      	adds	r1, r2, r2
 800722a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800722c:	415b      	adcs	r3, r3
 800722e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007230:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007234:	4641      	mov	r1, r8
 8007236:	eb12 0a01 	adds.w	sl, r2, r1
 800723a:	4649      	mov	r1, r9
 800723c:	eb43 0b01 	adc.w	fp, r3, r1
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800724c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007254:	4692      	mov	sl, r2
 8007256:	469b      	mov	fp, r3
 8007258:	4643      	mov	r3, r8
 800725a:	eb1a 0303 	adds.w	r3, sl, r3
 800725e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007262:	464b      	mov	r3, r9
 8007264:	eb4b 0303 	adc.w	r3, fp, r3
 8007268:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800726c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007278:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800727c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007280:	460b      	mov	r3, r1
 8007282:	18db      	adds	r3, r3, r3
 8007284:	643b      	str	r3, [r7, #64]	@ 0x40
 8007286:	4613      	mov	r3, r2
 8007288:	eb42 0303 	adc.w	r3, r2, r3
 800728c:	647b      	str	r3, [r7, #68]	@ 0x44
 800728e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007292:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007296:	f7f9 f823 	bl	80002e0 <__aeabi_uldivmod>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007390 <UART_SetConfig+0x2d4>)
 80072a2:	fba3 2301 	umull	r2, r3, r3, r1
 80072a6:	095b      	lsrs	r3, r3, #5
 80072a8:	2264      	movs	r2, #100	@ 0x64
 80072aa:	fb02 f303 	mul.w	r3, r2, r3
 80072ae:	1acb      	subs	r3, r1, r3
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072b6:	4b36      	ldr	r3, [pc, #216]	@ (8007390 <UART_SetConfig+0x2d4>)
 80072b8:	fba3 2302 	umull	r2, r3, r3, r2
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072c4:	441c      	add	r4, r3
 80072c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072d8:	4642      	mov	r2, r8
 80072da:	464b      	mov	r3, r9
 80072dc:	1891      	adds	r1, r2, r2
 80072de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072e0:	415b      	adcs	r3, r3
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072e8:	4641      	mov	r1, r8
 80072ea:	1851      	adds	r1, r2, r1
 80072ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80072ee:	4649      	mov	r1, r9
 80072f0:	414b      	adcs	r3, r1
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007300:	4659      	mov	r1, fp
 8007302:	00cb      	lsls	r3, r1, #3
 8007304:	4651      	mov	r1, sl
 8007306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800730a:	4651      	mov	r1, sl
 800730c:	00ca      	lsls	r2, r1, #3
 800730e:	4610      	mov	r0, r2
 8007310:	4619      	mov	r1, r3
 8007312:	4603      	mov	r3, r0
 8007314:	4642      	mov	r2, r8
 8007316:	189b      	adds	r3, r3, r2
 8007318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800731c:	464b      	mov	r3, r9
 800731e:	460a      	mov	r2, r1
 8007320:	eb42 0303 	adc.w	r3, r2, r3
 8007324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007334:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007338:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800733c:	460b      	mov	r3, r1
 800733e:	18db      	adds	r3, r3, r3
 8007340:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007342:	4613      	mov	r3, r2
 8007344:	eb42 0303 	adc.w	r3, r2, r3
 8007348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800734a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800734e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007352:	f7f8 ffc5 	bl	80002e0 <__aeabi_uldivmod>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4b0d      	ldr	r3, [pc, #52]	@ (8007390 <UART_SetConfig+0x2d4>)
 800735c:	fba3 1302 	umull	r1, r3, r3, r2
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	2164      	movs	r1, #100	@ 0x64
 8007364:	fb01 f303 	mul.w	r3, r1, r3
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	3332      	adds	r3, #50	@ 0x32
 800736e:	4a08      	ldr	r2, [pc, #32]	@ (8007390 <UART_SetConfig+0x2d4>)
 8007370:	fba2 2303 	umull	r2, r3, r2, r3
 8007374:	095b      	lsrs	r3, r3, #5
 8007376:	f003 0207 	and.w	r2, r3, #7
 800737a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4422      	add	r2, r4
 8007382:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007384:	e106      	b.n	8007594 <UART_SetConfig+0x4d8>
 8007386:	bf00      	nop
 8007388:	40011000 	.word	0x40011000
 800738c:	40011400 	.word	0x40011400
 8007390:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007398:	2200      	movs	r2, #0
 800739a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800739e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80073a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80073a6:	4642      	mov	r2, r8
 80073a8:	464b      	mov	r3, r9
 80073aa:	1891      	adds	r1, r2, r2
 80073ac:	6239      	str	r1, [r7, #32]
 80073ae:	415b      	adcs	r3, r3
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073b6:	4641      	mov	r1, r8
 80073b8:	1854      	adds	r4, r2, r1
 80073ba:	4649      	mov	r1, r9
 80073bc:	eb43 0501 	adc.w	r5, r3, r1
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	00eb      	lsls	r3, r5, #3
 80073ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073ce:	00e2      	lsls	r2, r4, #3
 80073d0:	4614      	mov	r4, r2
 80073d2:	461d      	mov	r5, r3
 80073d4:	4643      	mov	r3, r8
 80073d6:	18e3      	adds	r3, r4, r3
 80073d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073dc:	464b      	mov	r3, r9
 80073de:	eb45 0303 	adc.w	r3, r5, r3
 80073e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	f04f 0300 	mov.w	r3, #0
 80073fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007402:	4629      	mov	r1, r5
 8007404:	008b      	lsls	r3, r1, #2
 8007406:	4621      	mov	r1, r4
 8007408:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800740c:	4621      	mov	r1, r4
 800740e:	008a      	lsls	r2, r1, #2
 8007410:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007414:	f7f8 ff64 	bl	80002e0 <__aeabi_uldivmod>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4b60      	ldr	r3, [pc, #384]	@ (80075a0 <UART_SetConfig+0x4e4>)
 800741e:	fba3 2302 	umull	r2, r3, r3, r2
 8007422:	095b      	lsrs	r3, r3, #5
 8007424:	011c      	lsls	r4, r3, #4
 8007426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800742a:	2200      	movs	r2, #0
 800742c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007430:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007434:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007438:	4642      	mov	r2, r8
 800743a:	464b      	mov	r3, r9
 800743c:	1891      	adds	r1, r2, r2
 800743e:	61b9      	str	r1, [r7, #24]
 8007440:	415b      	adcs	r3, r3
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007448:	4641      	mov	r1, r8
 800744a:	1851      	adds	r1, r2, r1
 800744c:	6139      	str	r1, [r7, #16]
 800744e:	4649      	mov	r1, r9
 8007450:	414b      	adcs	r3, r1
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	f04f 0300 	mov.w	r3, #0
 800745c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007460:	4659      	mov	r1, fp
 8007462:	00cb      	lsls	r3, r1, #3
 8007464:	4651      	mov	r1, sl
 8007466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800746a:	4651      	mov	r1, sl
 800746c:	00ca      	lsls	r2, r1, #3
 800746e:	4610      	mov	r0, r2
 8007470:	4619      	mov	r1, r3
 8007472:	4603      	mov	r3, r0
 8007474:	4642      	mov	r2, r8
 8007476:	189b      	adds	r3, r3, r2
 8007478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800747c:	464b      	mov	r3, r9
 800747e:	460a      	mov	r2, r1
 8007480:	eb42 0303 	adc.w	r3, r2, r3
 8007484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007492:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80074a0:	4649      	mov	r1, r9
 80074a2:	008b      	lsls	r3, r1, #2
 80074a4:	4641      	mov	r1, r8
 80074a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074aa:	4641      	mov	r1, r8
 80074ac:	008a      	lsls	r2, r1, #2
 80074ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80074b2:	f7f8 ff15 	bl	80002e0 <__aeabi_uldivmod>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	4b38      	ldr	r3, [pc, #224]	@ (80075a0 <UART_SetConfig+0x4e4>)
 80074be:	fba3 2301 	umull	r2, r3, r3, r1
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	2264      	movs	r2, #100	@ 0x64
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	1acb      	subs	r3, r1, r3
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	3332      	adds	r3, #50	@ 0x32
 80074d0:	4a33      	ldr	r2, [pc, #204]	@ (80075a0 <UART_SetConfig+0x4e4>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074dc:	441c      	add	r4, r3
 80074de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074e2:	2200      	movs	r2, #0
 80074e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80074e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80074e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074ec:	4642      	mov	r2, r8
 80074ee:	464b      	mov	r3, r9
 80074f0:	1891      	adds	r1, r2, r2
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	415b      	adcs	r3, r3
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074fc:	4641      	mov	r1, r8
 80074fe:	1851      	adds	r1, r2, r1
 8007500:	6039      	str	r1, [r7, #0]
 8007502:	4649      	mov	r1, r9
 8007504:	414b      	adcs	r3, r1
 8007506:	607b      	str	r3, [r7, #4]
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007514:	4659      	mov	r1, fp
 8007516:	00cb      	lsls	r3, r1, #3
 8007518:	4651      	mov	r1, sl
 800751a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751e:	4651      	mov	r1, sl
 8007520:	00ca      	lsls	r2, r1, #3
 8007522:	4610      	mov	r0, r2
 8007524:	4619      	mov	r1, r3
 8007526:	4603      	mov	r3, r0
 8007528:	4642      	mov	r2, r8
 800752a:	189b      	adds	r3, r3, r2
 800752c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800752e:	464b      	mov	r3, r9
 8007530:	460a      	mov	r2, r1
 8007532:	eb42 0303 	adc.w	r3, r2, r3
 8007536:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	663b      	str	r3, [r7, #96]	@ 0x60
 8007542:	667a      	str	r2, [r7, #100]	@ 0x64
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007550:	4649      	mov	r1, r9
 8007552:	008b      	lsls	r3, r1, #2
 8007554:	4641      	mov	r1, r8
 8007556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800755a:	4641      	mov	r1, r8
 800755c:	008a      	lsls	r2, r1, #2
 800755e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007562:	f7f8 febd 	bl	80002e0 <__aeabi_uldivmod>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4b0d      	ldr	r3, [pc, #52]	@ (80075a0 <UART_SetConfig+0x4e4>)
 800756c:	fba3 1302 	umull	r1, r3, r3, r2
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	2164      	movs	r1, #100	@ 0x64
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	3332      	adds	r3, #50	@ 0x32
 800757e:	4a08      	ldr	r2, [pc, #32]	@ (80075a0 <UART_SetConfig+0x4e4>)
 8007580:	fba2 2303 	umull	r2, r3, r2, r3
 8007584:	095b      	lsrs	r3, r3, #5
 8007586:	f003 020f 	and.w	r2, r3, #15
 800758a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4422      	add	r2, r4
 8007592:	609a      	str	r2, [r3, #8]
}
 8007594:	bf00      	nop
 8007596:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800759a:	46bd      	mov	sp, r7
 800759c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075a0:	51eb851f 	.word	0x51eb851f

080075a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075a4:	b084      	sub	sp, #16
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	f107 001c 	add.w	r0, r7, #28
 80075b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d123      	bne.n	8007606 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80075d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d105      	bne.n	80075fa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 fae2 	bl	8008bc4 <USB_CoreReset>
 8007600:	4603      	mov	r3, r0
 8007602:	73fb      	strb	r3, [r7, #15]
 8007604:	e01b      	b.n	800763e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 fad6 	bl	8008bc4 <USB_CoreReset>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800761c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007628:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007630:	e005      	b.n	800763e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007636:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800763e:	7fbb      	ldrb	r3, [r7, #30]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d10b      	bne.n	800765c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f043 0206 	orr.w	r2, r3, #6
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f043 0220 	orr.w	r2, r3, #32
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007668:	b004      	add	sp, #16
 800766a:	4770      	bx	lr

0800766c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d165      	bne.n	800774c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	4a41      	ldr	r2, [pc, #260]	@ (8007788 <USB_SetTurnaroundTime+0x11c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d906      	bls.n	8007696 <USB_SetTurnaroundTime+0x2a>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	4a40      	ldr	r2, [pc, #256]	@ (800778c <USB_SetTurnaroundTime+0x120>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d202      	bcs.n	8007696 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007690:	230f      	movs	r3, #15
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e062      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	4a3c      	ldr	r2, [pc, #240]	@ (800778c <USB_SetTurnaroundTime+0x120>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d306      	bcc.n	80076ac <USB_SetTurnaroundTime+0x40>
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	4a3b      	ldr	r2, [pc, #236]	@ (8007790 <USB_SetTurnaroundTime+0x124>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d202      	bcs.n	80076ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076a6:	230e      	movs	r3, #14
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	e057      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4a38      	ldr	r2, [pc, #224]	@ (8007790 <USB_SetTurnaroundTime+0x124>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d306      	bcc.n	80076c2 <USB_SetTurnaroundTime+0x56>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4a37      	ldr	r2, [pc, #220]	@ (8007794 <USB_SetTurnaroundTime+0x128>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d202      	bcs.n	80076c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80076bc:	230d      	movs	r3, #13
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	e04c      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	4a33      	ldr	r2, [pc, #204]	@ (8007794 <USB_SetTurnaroundTime+0x128>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d306      	bcc.n	80076d8 <USB_SetTurnaroundTime+0x6c>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4a32      	ldr	r2, [pc, #200]	@ (8007798 <USB_SetTurnaroundTime+0x12c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d802      	bhi.n	80076d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80076d2:	230c      	movs	r3, #12
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e041      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4a2f      	ldr	r2, [pc, #188]	@ (8007798 <USB_SetTurnaroundTime+0x12c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d906      	bls.n	80076ee <USB_SetTurnaroundTime+0x82>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4a2e      	ldr	r2, [pc, #184]	@ (800779c <USB_SetTurnaroundTime+0x130>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d802      	bhi.n	80076ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80076e8:	230b      	movs	r3, #11
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e036      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	4a2a      	ldr	r2, [pc, #168]	@ (800779c <USB_SetTurnaroundTime+0x130>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d906      	bls.n	8007704 <USB_SetTurnaroundTime+0x98>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	4a29      	ldr	r2, [pc, #164]	@ (80077a0 <USB_SetTurnaroundTime+0x134>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d802      	bhi.n	8007704 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80076fe:	230a      	movs	r3, #10
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	e02b      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4a26      	ldr	r2, [pc, #152]	@ (80077a0 <USB_SetTurnaroundTime+0x134>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d906      	bls.n	800771a <USB_SetTurnaroundTime+0xae>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4a25      	ldr	r2, [pc, #148]	@ (80077a4 <USB_SetTurnaroundTime+0x138>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d202      	bcs.n	800771a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007714:	2309      	movs	r3, #9
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	e020      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4a21      	ldr	r2, [pc, #132]	@ (80077a4 <USB_SetTurnaroundTime+0x138>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d306      	bcc.n	8007730 <USB_SetTurnaroundTime+0xc4>
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4a20      	ldr	r2, [pc, #128]	@ (80077a8 <USB_SetTurnaroundTime+0x13c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d802      	bhi.n	8007730 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800772a:	2308      	movs	r3, #8
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	e015      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4a1d      	ldr	r2, [pc, #116]	@ (80077a8 <USB_SetTurnaroundTime+0x13c>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d906      	bls.n	8007746 <USB_SetTurnaroundTime+0xda>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4a1c      	ldr	r2, [pc, #112]	@ (80077ac <USB_SetTurnaroundTime+0x140>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d202      	bcs.n	8007746 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007740:	2307      	movs	r3, #7
 8007742:	617b      	str	r3, [r7, #20]
 8007744:	e00a      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007746:	2306      	movs	r3, #6
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e007      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007752:	2309      	movs	r3, #9
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e001      	b.n	800775c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007758:	2309      	movs	r3, #9
 800775a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	029b      	lsls	r3, r3, #10
 8007770:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007774:	431a      	orrs	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	00d8acbf 	.word	0x00d8acbf
 800778c:	00e4e1c0 	.word	0x00e4e1c0
 8007790:	00f42400 	.word	0x00f42400
 8007794:	01067380 	.word	0x01067380
 8007798:	011a499f 	.word	0x011a499f
 800779c:	01312cff 	.word	0x01312cff
 80077a0:	014ca43f 	.word	0x014ca43f
 80077a4:	016e3600 	.word	0x016e3600
 80077a8:	01a6ab1f 	.word	0x01a6ab1f
 80077ac:	01e84800 	.word	0x01e84800

080077b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f043 0201 	orr.w	r2, r3, #1
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f023 0201 	bic.w	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d115      	bne.n	8007842 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007822:	200a      	movs	r0, #10
 8007824:	f7f9 fc90 	bl	8001148 <HAL_Delay>
      ms += 10U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	330a      	adds	r3, #10
 800782c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 f939 	bl	8008aa6 <USB_GetMode>
 8007834:	4603      	mov	r3, r0
 8007836:	2b01      	cmp	r3, #1
 8007838:	d01e      	beq.n	8007878 <USB_SetCurrentMode+0x84>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2bc7      	cmp	r3, #199	@ 0xc7
 800783e:	d9f0      	bls.n	8007822 <USB_SetCurrentMode+0x2e>
 8007840:	e01a      	b.n	8007878 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d115      	bne.n	8007874 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007854:	200a      	movs	r0, #10
 8007856:	f7f9 fc77 	bl	8001148 <HAL_Delay>
      ms += 10U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	330a      	adds	r3, #10
 800785e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 f920 	bl	8008aa6 <USB_GetMode>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d005      	beq.n	8007878 <USB_SetCurrentMode+0x84>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007870:	d9f0      	bls.n	8007854 <USB_SetCurrentMode+0x60>
 8007872:	e001      	b.n	8007878 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e005      	b.n	8007884 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2bc8      	cmp	r3, #200	@ 0xc8
 800787c:	d101      	bne.n	8007882 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800788c:	b084      	sub	sp, #16
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800789a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	e009      	b.n	80078c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3340      	adds	r3, #64	@ 0x40
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	2200      	movs	r2, #0
 80078b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	3301      	adds	r3, #1
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	2b0e      	cmp	r3, #14
 80078c4:	d9f2      	bls.n	80078ac <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80078c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d11c      	bne.n	8007908 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078dc:	f043 0302 	orr.w	r3, r3, #2
 80078e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	e005      	b.n	8007914 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800791a:	461a      	mov	r2, r3
 800791c:	2300      	movs	r3, #0
 800791e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007920:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007924:	2b01      	cmp	r3, #1
 8007926:	d10d      	bne.n	8007944 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800792c:	2b00      	cmp	r3, #0
 800792e:	d104      	bne.n	800793a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007930:	2100      	movs	r1, #0
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f968 	bl	8007c08 <USB_SetDevSpeed>
 8007938:	e008      	b.n	800794c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800793a:	2101      	movs	r1, #1
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f963 	bl	8007c08 <USB_SetDevSpeed>
 8007942:	e003      	b.n	800794c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007944:	2103      	movs	r1, #3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f95e 	bl	8007c08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800794c:	2110      	movs	r1, #16
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f8fa 	bl	8007b48 <USB_FlushTxFifo>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f924 	bl	8007bac <USB_FlushRxFifo>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007974:	461a      	mov	r2, r3
 8007976:	2300      	movs	r3, #0
 8007978:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007980:	461a      	mov	r2, r3
 8007982:	2300      	movs	r3, #0
 8007984:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800798c:	461a      	mov	r2, r3
 800798e:	2300      	movs	r3, #0
 8007990:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007992:	2300      	movs	r3, #0
 8007994:	613b      	str	r3, [r7, #16]
 8007996:	e043      	b.n	8007a20 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079ae:	d118      	bne.n	80079e2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c2:	461a      	mov	r2, r3
 80079c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	e013      	b.n	80079f4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d8:	461a      	mov	r2, r3
 80079da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	e008      	b.n	80079f4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ee:	461a      	mov	r2, r3
 80079f0:	2300      	movs	r3, #0
 80079f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a00:	461a      	mov	r2, r3
 8007a02:	2300      	movs	r3, #0
 8007a04:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a12:	461a      	mov	r2, r3
 8007a14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	613b      	str	r3, [r7, #16]
 8007a20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007a24:	461a      	mov	r2, r3
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d3b5      	bcc.n	8007998 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	613b      	str	r3, [r7, #16]
 8007a30:	e043      	b.n	8007aba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a48:	d118      	bne.n	8007a7c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10a      	bne.n	8007a66 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	e013      	b.n	8007a8e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a72:	461a      	mov	r2, r3
 8007a74:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	e008      	b.n	8007a8e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a88:	461a      	mov	r2, r3
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aac:	461a      	mov	r2, r3
 8007aae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ab2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007abe:	461a      	mov	r2, r3
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d3b5      	bcc.n	8007a32 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ad8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007ae6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d105      	bne.n	8007afc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	f043 0210 	orr.w	r2, r3, #16
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699a      	ldr	r2, [r3, #24]
 8007b00:	4b10      	ldr	r3, [pc, #64]	@ (8007b44 <USB_DevInit+0x2b8>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	f043 0208 	orr.w	r2, r3, #8
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b1c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d107      	bne.n	8007b34 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b2c:	f043 0304 	orr.w	r3, r3, #4
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b40:	b004      	add	sp, #16
 8007b42:	4770      	bx	lr
 8007b44:	803c3800 	.word	0x803c3800

08007b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b62:	d901      	bls.n	8007b68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e01b      	b.n	8007ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	daf2      	bge.n	8007b56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	019b      	lsls	r3, r3, #6
 8007b78:	f043 0220 	orr.w	r2, r3, #32
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b8c:	d901      	bls.n	8007b92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e006      	b.n	8007ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d0f0      	beq.n	8007b80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bc4:	d901      	bls.n	8007bca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e018      	b.n	8007bfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	daf2      	bge.n	8007bb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2210      	movs	r2, #16
 8007bda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007be8:	d901      	bls.n	8007bee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e006      	b.n	8007bfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b10      	cmp	r3, #16
 8007bf8:	d0f0      	beq.n	8007bdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	68f9      	ldr	r1, [r7, #12]
 8007c24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b087      	sub	sp, #28
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f003 0306 	and.w	r3, r3, #6
 8007c52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d102      	bne.n	8007c60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75fb      	strb	r3, [r7, #23]
 8007c5e:	e00a      	b.n	8007c76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d002      	beq.n	8007c6c <USB_GetDevSpeed+0x32>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b06      	cmp	r3, #6
 8007c6a:	d102      	bne.n	8007c72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	75fb      	strb	r3, [r7, #23]
 8007c70:	e001      	b.n	8007c76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007c72:	230f      	movs	r3, #15
 8007c74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	785b      	ldrb	r3, [r3, #1]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d13a      	bne.n	8007d16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca6:	69da      	ldr	r2, [r3, #28]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	68f9      	ldr	r1, [r7, #12]
 8007cba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d155      	bne.n	8007d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	791b      	ldrb	r3, [r3, #4]
 8007cf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	059b      	lsls	r3, r3, #22
 8007cfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	0151      	lsls	r1, r2, #5
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	440a      	add	r2, r1
 8007d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	e036      	b.n	8007d84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d1c:	69da      	ldr	r2, [r3, #28]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	2101      	movs	r1, #1
 8007d28:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2c:	041b      	lsls	r3, r3, #16
 8007d2e:	68f9      	ldr	r1, [r7, #12]
 8007d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d34:	4313      	orrs	r3, r2
 8007d36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d11a      	bne.n	8007d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	791b      	ldrb	r3, [r3, #4]
 8007d68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
	...

08007d94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	785b      	ldrb	r3, [r3, #1]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d161      	bne.n	8007e74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dc6:	d11f      	bne.n	8007e08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007de2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007de6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	2101      	movs	r1, #1
 8007e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	43db      	mvns	r3, r3
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e28:	4013      	ands	r3, r2
 8007e2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	43db      	mvns	r3, r3
 8007e46:	68f9      	ldr	r1, [r7, #12]
 8007e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	0159      	lsls	r1, r3, #5
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	440b      	add	r3, r1
 8007e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4b35      	ldr	r3, [pc, #212]	@ (8007f44 <USB_DeactivateEndpoint+0x1b0>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	600b      	str	r3, [r1, #0]
 8007e72:	e060      	b.n	8007f36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e8a:	d11f      	bne.n	8007ecc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007eaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	0151      	lsls	r1, r2, #5
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	440a      	add	r2, r1
 8007ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ec6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007eca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	f003 030f 	and.w	r3, r3, #15
 8007edc:	2101      	movs	r1, #1
 8007ede:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee2:	041b      	lsls	r3, r3, #16
 8007ee4:	43db      	mvns	r3, r3
 8007ee6:	68f9      	ldr	r1, [r7, #12]
 8007ee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007eec:	4013      	ands	r3, r2
 8007eee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	2101      	movs	r1, #1
 8007f02:	fa01 f303 	lsl.w	r3, r1, r3
 8007f06:	041b      	lsls	r3, r3, #16
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f10:	4013      	ands	r3, r2
 8007f12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	0159      	lsls	r1, r3, #5
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	440b      	add	r3, r1
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4b05      	ldr	r3, [pc, #20]	@ (8007f48 <USB_DeactivateEndpoint+0x1b4>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	ec337800 	.word	0xec337800
 8007f48:	eff37800 	.word	0xeff37800

08007f4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	@ 0x28
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	f040 817f 	bne.w	800826c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d132      	bne.n	8007fdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	0151      	lsls	r1, r2, #5
 8007f88:	69fa      	ldr	r2, [r7, #28]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007f94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	0151      	lsls	r1, r2, #5
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	440a      	add	r2, r1
 8007fb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	69fa      	ldr	r2, [r7, #28]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fd4:	0cdb      	lsrs	r3, r3, #19
 8007fd6:	04db      	lsls	r3, r3, #19
 8007fd8:	6113      	str	r3, [r2, #16]
 8007fda:	e097      	b.n	800810c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	0151      	lsls	r1, r2, #5
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	440a      	add	r2, r1
 8007ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ff6:	0cdb      	lsrs	r3, r3, #19
 8007ff8:	04db      	lsls	r3, r3, #19
 8007ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	0151      	lsls	r1, r2, #5
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	440a      	add	r2, r1
 8008012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008016:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800801a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800801e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d11a      	bne.n	800805c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	691a      	ldr	r2, [r3, #16]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	429a      	cmp	r2, r3
 8008030:	d903      	bls.n	800803a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	689a      	ldr	r2, [r3, #8]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	015a      	lsls	r2, r3, #5
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	4413      	add	r3, r2
 8008042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	0151      	lsls	r1, r2, #5
 800804c:	69fa      	ldr	r2, [r7, #28]
 800804e:	440a      	add	r2, r1
 8008050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008058:	6113      	str	r3, [r2, #16]
 800805a:	e044      	b.n	80080e6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	4413      	add	r3, r2
 8008066:	1e5a      	subs	r2, r3, #1
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008070:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800807e:	691a      	ldr	r2, [r3, #16]
 8008080:	8afb      	ldrh	r3, [r7, #22]
 8008082:	04d9      	lsls	r1, r3, #19
 8008084:	4ba4      	ldr	r3, [pc, #656]	@ (8008318 <USB_EPStartXfer+0x3cc>)
 8008086:	400b      	ands	r3, r1
 8008088:	69b9      	ldr	r1, [r7, #24]
 800808a:	0148      	lsls	r0, r1, #5
 800808c:	69f9      	ldr	r1, [r7, #28]
 800808e:	4401      	add	r1, r0
 8008090:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008094:	4313      	orrs	r3, r2
 8008096:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	791b      	ldrb	r3, [r3, #4]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d122      	bne.n	80080e6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080ba:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80080be:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080cc:	691a      	ldr	r2, [r3, #16]
 80080ce:	8afb      	ldrh	r3, [r7, #22]
 80080d0:	075b      	lsls	r3, r3, #29
 80080d2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80080d6:	69b9      	ldr	r1, [r7, #24]
 80080d8:	0148      	lsls	r0, r1, #5
 80080da:	69f9      	ldr	r1, [r7, #28]
 80080dc:	4401      	add	r1, r0
 80080de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80080e2:	4313      	orrs	r3, r2
 80080e4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080fc:	69b9      	ldr	r1, [r7, #24]
 80080fe:	0148      	lsls	r0, r1, #5
 8008100:	69f9      	ldr	r1, [r7, #28]
 8008102:	4401      	add	r1, r0
 8008104:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008108:	4313      	orrs	r3, r2
 800810a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d14b      	bne.n	80081aa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	015a      	lsls	r2, r3, #5
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	4413      	add	r3, r2
 8008122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008126:	461a      	mov	r2, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	791b      	ldrb	r3, [r3, #4]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d128      	bne.n	8008188 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008142:	2b00      	cmp	r3, #0
 8008144:	d110      	bne.n	8008168 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	440a      	add	r2, r1
 800815c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008160:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	e00f      	b.n	8008188 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	440a      	add	r2, r1
 800817e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008186:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	69ba      	ldr	r2, [r7, #24]
 8008198:	0151      	lsls	r1, r2, #5
 800819a:	69fa      	ldr	r2, [r7, #28]
 800819c:	440a      	add	r2, r1
 800819e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	e166      	b.n	8008478 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	0151      	lsls	r1, r2, #5
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	440a      	add	r2, r1
 80081c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081c8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	791b      	ldrb	r3, [r3, #4]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d015      	beq.n	80081fe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f000 814e 	beq.w	8008478 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	f003 030f 	and.w	r3, r3, #15
 80081ec:	2101      	movs	r1, #1
 80081ee:	fa01 f303 	lsl.w	r3, r1, r3
 80081f2:	69f9      	ldr	r1, [r7, #28]
 80081f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081f8:	4313      	orrs	r3, r2
 80081fa:	634b      	str	r3, [r1, #52]	@ 0x34
 80081fc:	e13c      	b.n	8008478 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d110      	bne.n	8008230 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008228:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e00f      	b.n	8008250 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	0151      	lsls	r1, r2, #5
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	440a      	add	r2, r1
 8008246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800824a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800824e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	68d9      	ldr	r1, [r3, #12]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	b298      	uxth	r0, r3
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	4603      	mov	r3, r0
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f9b9 	bl	80085dc <USB_WritePacket>
 800826a:	e105      	b.n	8008478 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	4413      	add	r3, r2
 8008274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	0151      	lsls	r1, r2, #5
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	440a      	add	r2, r1
 8008282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008286:	0cdb      	lsrs	r3, r3, #19
 8008288:	04db      	lsls	r3, r3, #19
 800828a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082ae:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d132      	bne.n	800831c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	6a1b      	ldr	r3, [r3, #32]
 80082e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082e4:	69b9      	ldr	r1, [r7, #24]
 80082e6:	0148      	lsls	r0, r1, #5
 80082e8:	69f9      	ldr	r1, [r7, #28]
 80082ea:	4401      	add	r1, r0
 80082ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80082f0:	4313      	orrs	r3, r2
 80082f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800830e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008312:	6113      	str	r3, [r2, #16]
 8008314:	e062      	b.n	80083dc <USB_EPStartXfer+0x490>
 8008316:	bf00      	nop
 8008318:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d123      	bne.n	800836c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800833a:	69b9      	ldr	r1, [r7, #24]
 800833c:	0148      	lsls	r0, r1, #5
 800833e:	69f9      	ldr	r1, [r7, #28]
 8008340:	4401      	add	r1, r0
 8008342:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008346:	4313      	orrs	r3, r2
 8008348:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	0151      	lsls	r1, r2, #5
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	440a      	add	r2, r1
 8008360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008364:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008368:	6113      	str	r3, [r2, #16]
 800836a:	e037      	b.n	80083dc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	4413      	add	r3, r2
 8008376:	1e5a      	subs	r2, r3, #1
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008380:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	8afa      	ldrh	r2, [r7, #22]
 8008388:	fb03 f202 	mul.w	r2, r3, r2
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800839c:	691a      	ldr	r2, [r3, #16]
 800839e:	8afb      	ldrh	r3, [r7, #22]
 80083a0:	04d9      	lsls	r1, r3, #19
 80083a2:	4b38      	ldr	r3, [pc, #224]	@ (8008484 <USB_EPStartXfer+0x538>)
 80083a4:	400b      	ands	r3, r1
 80083a6:	69b9      	ldr	r1, [r7, #24]
 80083a8:	0148      	lsls	r0, r1, #5
 80083aa:	69f9      	ldr	r1, [r7, #28]
 80083ac:	4401      	add	r1, r0
 80083ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083b2:	4313      	orrs	r3, r2
 80083b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083cc:	69b9      	ldr	r1, [r7, #24]
 80083ce:	0148      	lsls	r0, r1, #5
 80083d0:	69f9      	ldr	r1, [r7, #28]
 80083d2:	4401      	add	r1, r0
 80083d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083d8:	4313      	orrs	r3, r2
 80083da:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d10d      	bne.n	80083fe <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d009      	beq.n	80083fe <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	68d9      	ldr	r1, [r3, #12]
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083fa:	460a      	mov	r2, r1
 80083fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	791b      	ldrb	r3, [r3, #4]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d128      	bne.n	8008458 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008412:	2b00      	cmp	r3, #0
 8008414:	d110      	bne.n	8008438 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	015a      	lsls	r2, r3, #5
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	4413      	add	r3, r2
 800841e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	0151      	lsls	r1, r2, #5
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	440a      	add	r2, r1
 800842c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008430:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	e00f      	b.n	8008458 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	440a      	add	r2, r1
 800844e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008456:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	0151      	lsls	r1, r2, #5
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	440a      	add	r2, r1
 800846e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008472:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3720      	adds	r7, #32
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	1ff80000 	.word	0x1ff80000

08008488 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d14a      	bne.n	800853c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084be:	f040 8086 	bne.w	80085ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	7812      	ldrb	r2, [r2, #0]
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	7812      	ldrb	r2, [r2, #0]
 80084fa:	0151      	lsls	r1, r2, #5
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	440a      	add	r2, r1
 8008500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008504:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008508:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008516:	4293      	cmp	r3, r2
 8008518:	d902      	bls.n	8008520 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	75fb      	strb	r3, [r7, #23]
          break;
 800851e:	e056      	b.n	80085ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008534:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008538:	d0e7      	beq.n	800850a <USB_EPStopXfer+0x82>
 800853a:	e048      	b.n	80085ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008550:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008554:	d13b      	bne.n	80085ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	7812      	ldrb	r2, [r2, #0]
 800856a:	0151      	lsls	r1, r2, #5
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	440a      	add	r2, r1
 8008570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008574:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008578:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	4413      	add	r3, r2
 8008584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	7812      	ldrb	r2, [r2, #0]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	440a      	add	r2, r1
 8008594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008598:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800859c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d902      	bls.n	80085b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	75fb      	strb	r3, [r7, #23]
          break;
 80085b2:	e00c      	b.n	80085ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085cc:	d0e7      	beq.n	800859e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80085ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80085dc:	b480      	push	{r7}
 80085de:	b089      	sub	sp, #36	@ 0x24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4611      	mov	r1, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	460b      	mov	r3, r1
 80085ec:	71fb      	strb	r3, [r7, #7]
 80085ee:	4613      	mov	r3, r2
 80085f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80085fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d123      	bne.n	800864a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008602:	88bb      	ldrh	r3, [r7, #4]
 8008604:	3303      	adds	r3, #3
 8008606:	089b      	lsrs	r3, r3, #2
 8008608:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800860a:	2300      	movs	r3, #0
 800860c:	61bb      	str	r3, [r7, #24]
 800860e:	e018      	b.n	8008642 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	031a      	lsls	r2, r3, #12
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	4413      	add	r3, r2
 8008618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800861c:	461a      	mov	r2, r3
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	3301      	adds	r3, #1
 8008628:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	3301      	adds	r3, #1
 800862e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	3301      	adds	r3, #1
 8008634:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	3301      	adds	r3, #1
 800863a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	3301      	adds	r3, #1
 8008640:	61bb      	str	r3, [r7, #24]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	429a      	cmp	r2, r3
 8008648:	d3e2      	bcc.n	8008610 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3724      	adds	r7, #36	@ 0x24
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008658:	b480      	push	{r7}
 800865a:	b08b      	sub	sp, #44	@ 0x2c
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	089b      	lsrs	r3, r3, #2
 8008672:	b29b      	uxth	r3, r3
 8008674:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008676:	88fb      	ldrh	r3, [r7, #6]
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800867e:	2300      	movs	r3, #0
 8008680:	623b      	str	r3, [r7, #32]
 8008682:	e014      	b.n	80086ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008692:	3301      	adds	r3, #1
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008698:	3301      	adds	r3, #1
 800869a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800869c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869e:	3301      	adds	r3, #1
 80086a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	3301      	adds	r3, #1
 80086a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	3301      	adds	r3, #1
 80086ac:	623b      	str	r3, [r7, #32]
 80086ae:	6a3a      	ldr	r2, [r7, #32]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d3e6      	bcc.n	8008684 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80086b6:	8bfb      	ldrh	r3, [r7, #30]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01e      	beq.n	80086fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086c6:	461a      	mov	r2, r3
 80086c8:	f107 0310 	add.w	r3, r7, #16
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	fa22 f303 	lsr.w	r3, r2, r3
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e0:	701a      	strb	r2, [r3, #0]
      i++;
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	3301      	adds	r3, #1
 80086e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80086e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ea:	3301      	adds	r3, #1
 80086ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80086ee:	8bfb      	ldrh	r3, [r7, #30]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80086f4:	8bfb      	ldrh	r3, [r7, #30]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1ea      	bne.n	80086d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80086fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	372c      	adds	r7, #44	@ 0x2c
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d12c      	bne.n	800877e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	db12      	blt.n	800875c <USB_EPSetStall+0x54>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00f      	beq.n	800875c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	0151      	lsls	r1, r2, #5
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	440a      	add	r2, r1
 8008752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008756:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800875a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	440a      	add	r2, r1
 8008772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	e02b      	b.n	80087d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	db12      	blt.n	80087b6 <USB_EPSetStall+0xae>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00f      	beq.n	80087b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	0151      	lsls	r1, r2, #5
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	440a      	add	r2, r1
 80087ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	0151      	lsls	r1, r2, #5
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	440a      	add	r2, r1
 80087cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d128      	bne.n	8008852 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	440a      	add	r2, r1
 8008816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800881a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800881e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	791b      	ldrb	r3, [r3, #4]
 8008824:	2b03      	cmp	r3, #3
 8008826:	d003      	beq.n	8008830 <USB_EPClearStall+0x4c>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	791b      	ldrb	r3, [r3, #4]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d138      	bne.n	80088a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	440a      	add	r2, r1
 8008846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800884a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	e027      	b.n	80088a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	0151      	lsls	r1, r2, #5
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	440a      	add	r2, r1
 8008868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800886c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008870:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	791b      	ldrb	r3, [r3, #4]
 8008876:	2b03      	cmp	r3, #3
 8008878:	d003      	beq.n	8008882 <USB_EPClearStall+0x9e>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	791b      	ldrb	r3, [r3, #4]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d10f      	bne.n	80088a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	440a      	add	r2, r1
 8008898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800889c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80088d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	011b      	lsls	r3, r3, #4
 80088e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80088e4:	68f9      	ldr	r1, [r7, #12]
 80088e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088ea:	4313      	orrs	r3, r2
 80088ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800892a:	f023 0302 	bic.w	r3, r3, #2
 800892e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800893e:	b480      	push	{r7}
 8008940:	b085      	sub	sp, #20
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008958:	f023 0303 	bic.w	r3, r3, #3
 800895c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800896c:	f043 0302 	orr.w	r3, r3, #2
 8008970:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4013      	ands	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008998:	68fb      	ldr	r3, [r7, #12]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b085      	sub	sp, #20
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	4013      	ands	r3, r2
 80089c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	0c1b      	lsrs	r3, r3, #16
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	4013      	ands	r3, r2
 80089fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	b29b      	uxth	r3, r3
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b085      	sub	sp, #20
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a1e:	78fb      	ldrb	r3, [r7, #3]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b087      	sub	sp, #28
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a6e:	78fb      	ldrb	r3, [r7, #3]
 8008a70:	f003 030f 	and.w	r3, r3, #15
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7a:	01db      	lsls	r3, r3, #7
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	4013      	ands	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a98:	68bb      	ldr	r3, [r7, #8]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	f003 0301 	and.w	r3, r3, #1
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008adc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008ae0:	f023 0307 	bic.w	r3, r3, #7
 8008ae4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008af8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	460b      	mov	r3, r1
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	333c      	adds	r3, #60	@ 0x3c
 8008b1e:	3304      	adds	r3, #4
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	4a26      	ldr	r2, [pc, #152]	@ (8008bc0 <USB_EP0_OutStart+0xb8>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d90a      	bls.n	8008b42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b3c:	d101      	bne.n	8008b42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e037      	b.n	8008bb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b48:	461a      	mov	r2, r3
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b70:	f043 0318 	orr.w	r3, r3, #24
 8008b74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b84:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008b88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b8a:	7afb      	ldrb	r3, [r7, #11]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d10f      	bne.n	8008bb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008baa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008bae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	4f54300a 	.word	0x4f54300a

08008bc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bdc:	d901      	bls.n	8008be2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e01b      	b.n	8008c1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	daf2      	bge.n	8008bd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f043 0201 	orr.w	r2, r3, #1
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c06:	d901      	bls.n	8008c0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e006      	b.n	8008c1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d0f0      	beq.n	8008bfa <USB_CoreReset+0x36>

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
	...

08008c28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	460b      	mov	r3, r1
 8008c32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c34:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008c38:	f003 feba 	bl	800c9b0 <USBD_static_malloc>
 8008c3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	32b0      	adds	r2, #176	@ 0xb0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008c54:	2302      	movs	r3, #2
 8008c56:	e0d4      	b.n	8008e02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008c58:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f004 f8a5 	bl	800cdae <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	32b0      	adds	r2, #176	@ 0xb0
 8008c6e:	68f9      	ldr	r1, [r7, #12]
 8008c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	32b0      	adds	r2, #176	@ 0xb0
 8008c7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	7c1b      	ldrb	r3, [r3, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d138      	bne.n	8008d02 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c90:	4b5e      	ldr	r3, [pc, #376]	@ (8008e0c <USBD_CDC_Init+0x1e4>)
 8008c92:	7819      	ldrb	r1, [r3, #0]
 8008c94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c98:	2202      	movs	r2, #2
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f003 fd17 	bl	800c6ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8008e0c <USBD_CDC_Init+0x1e4>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	f003 020f 	and.w	r2, r3, #15
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	3324      	adds	r3, #36	@ 0x24
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008cba:	4b55      	ldr	r3, [pc, #340]	@ (8008e10 <USBD_CDC_Init+0x1e8>)
 8008cbc:	7819      	ldrb	r1, [r3, #0]
 8008cbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f003 fd02 	bl	800c6ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008cca:	4b51      	ldr	r3, [pc, #324]	@ (8008e10 <USBD_CDC_Init+0x1e8>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	f003 020f 	and.w	r2, r3, #15
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8008e14 <USBD_CDC_Init+0x1ec>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	f003 020f 	and.w	r2, r3, #15
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	3326      	adds	r3, #38	@ 0x26
 8008cfc:	2210      	movs	r2, #16
 8008cfe:	801a      	strh	r2, [r3, #0]
 8008d00:	e035      	b.n	8008d6e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d02:	4b42      	ldr	r3, [pc, #264]	@ (8008e0c <USBD_CDC_Init+0x1e4>)
 8008d04:	7819      	ldrb	r1, [r3, #0]
 8008d06:	2340      	movs	r3, #64	@ 0x40
 8008d08:	2202      	movs	r2, #2
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f003 fcdf 	bl	800c6ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d10:	4b3e      	ldr	r3, [pc, #248]	@ (8008e0c <USBD_CDC_Init+0x1e4>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 020f 	and.w	r2, r3, #15
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	3324      	adds	r3, #36	@ 0x24
 8008d26:	2201      	movs	r2, #1
 8008d28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d2a:	4b39      	ldr	r3, [pc, #228]	@ (8008e10 <USBD_CDC_Init+0x1e8>)
 8008d2c:	7819      	ldrb	r1, [r3, #0]
 8008d2e:	2340      	movs	r3, #64	@ 0x40
 8008d30:	2202      	movs	r2, #2
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f003 fccb 	bl	800c6ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d38:	4b35      	ldr	r3, [pc, #212]	@ (8008e10 <USBD_CDC_Init+0x1e8>)
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	f003 020f 	and.w	r2, r3, #15
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	440b      	add	r3, r1
 8008d4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d50:	2201      	movs	r2, #1
 8008d52:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008d54:	4b2f      	ldr	r3, [pc, #188]	@ (8008e14 <USBD_CDC_Init+0x1ec>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	f003 020f 	and.w	r2, r3, #15
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	3326      	adds	r3, #38	@ 0x26
 8008d6a:	2210      	movs	r2, #16
 8008d6c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d6e:	4b29      	ldr	r3, [pc, #164]	@ (8008e14 <USBD_CDC_Init+0x1ec>)
 8008d70:	7819      	ldrb	r1, [r3, #0]
 8008d72:	2308      	movs	r3, #8
 8008d74:	2203      	movs	r2, #3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f003 fca9 	bl	800c6ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008d7c:	4b25      	ldr	r3, [pc, #148]	@ (8008e14 <USBD_CDC_Init+0x1ec>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	f003 020f 	and.w	r2, r3, #15
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	440b      	add	r3, r1
 8008d90:	3324      	adds	r3, #36	@ 0x24
 8008d92:	2201      	movs	r2, #1
 8008d94:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	33b0      	adds	r3, #176	@ 0xb0
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e018      	b.n	8008e02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	7c1b      	ldrb	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8008e10 <USBD_CDC_Init+0x1e8>)
 8008dda:	7819      	ldrb	r1, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008de2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f003 fd60 	bl	800c8ac <USBD_LL_PrepareReceive>
 8008dec:	e008      	b.n	8008e00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dee:	4b08      	ldr	r3, [pc, #32]	@ (8008e10 <USBD_CDC_Init+0x1e8>)
 8008df0:	7819      	ldrb	r1, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008df8:	2340      	movs	r3, #64	@ 0x40
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f003 fd56 	bl	800c8ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000093 	.word	0x20000093
 8008e10:	20000094 	.word	0x20000094
 8008e14:	20000095 	.word	0x20000095

08008e18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008e24:	4b3a      	ldr	r3, [pc, #232]	@ (8008f10 <USBD_CDC_DeInit+0xf8>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f003 fc75 	bl	800c71a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008e30:	4b37      	ldr	r3, [pc, #220]	@ (8008f10 <USBD_CDC_DeInit+0xf8>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	f003 020f 	and.w	r2, r3, #15
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	440b      	add	r3, r1
 8008e44:	3324      	adds	r3, #36	@ 0x24
 8008e46:	2200      	movs	r2, #0
 8008e48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008e4a:	4b32      	ldr	r3, [pc, #200]	@ (8008f14 <USBD_CDC_DeInit+0xfc>)
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f003 fc62 	bl	800c71a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008e56:	4b2f      	ldr	r3, [pc, #188]	@ (8008f14 <USBD_CDC_DeInit+0xfc>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	f003 020f 	and.w	r2, r3, #15
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	440b      	add	r3, r1
 8008e6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e6e:	2200      	movs	r2, #0
 8008e70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008e72:	4b29      	ldr	r3, [pc, #164]	@ (8008f18 <USBD_CDC_DeInit+0x100>)
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f003 fc4e 	bl	800c71a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008e7e:	4b26      	ldr	r3, [pc, #152]	@ (8008f18 <USBD_CDC_DeInit+0x100>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	f003 020f 	and.w	r2, r3, #15
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	3324      	adds	r3, #36	@ 0x24
 8008e94:	2200      	movs	r2, #0
 8008e96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008e98:	4b1f      	ldr	r3, [pc, #124]	@ (8008f18 <USBD_CDC_DeInit+0x100>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	f003 020f 	and.w	r2, r3, #15
 8008ea0:	6879      	ldr	r1, [r7, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	3326      	adds	r3, #38	@ 0x26
 8008eae:	2200      	movs	r2, #0
 8008eb0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	32b0      	adds	r2, #176	@ 0xb0
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d01f      	beq.n	8008f04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	33b0      	adds	r3, #176	@ 0xb0
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	32b0      	adds	r2, #176	@ 0xb0
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f003 fd70 	bl	800c9cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	32b0      	adds	r2, #176	@ 0xb0
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20000093 	.word	0x20000093
 8008f14:	20000094 	.word	0x20000094
 8008f18:	20000095 	.word	0x20000095

08008f1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	32b0      	adds	r2, #176	@ 0xb0
 8008f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e0bf      	b.n	80090cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d050      	beq.n	8008ffa <USBD_CDC_Setup+0xde>
 8008f58:	2b20      	cmp	r3, #32
 8008f5a:	f040 80af 	bne.w	80090bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	88db      	ldrh	r3, [r3, #6]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d03a      	beq.n	8008fdc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	b25b      	sxtb	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	da1b      	bge.n	8008fa8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	33b0      	adds	r3, #176	@ 0xb0
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	4413      	add	r3, r2
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008f86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	88d2      	ldrh	r2, [r2, #6]
 8008f8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	88db      	ldrh	r3, [r3, #6]
 8008f92:	2b07      	cmp	r3, #7
 8008f94:	bf28      	it	cs
 8008f96:	2307      	movcs	r3, #7
 8008f98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	89fa      	ldrh	r2, [r7, #14]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 fdbd 	bl	800ab20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008fa6:	e090      	b.n	80090ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	785a      	ldrb	r2, [r3, #1]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	88db      	ldrh	r3, [r3, #6]
 8008fb6:	2b3f      	cmp	r3, #63	@ 0x3f
 8008fb8:	d803      	bhi.n	8008fc2 <USBD_CDC_Setup+0xa6>
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	88db      	ldrh	r3, [r3, #6]
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	e000      	b.n	8008fc4 <USBD_CDC_Setup+0xa8>
 8008fc2:	2240      	movs	r2, #64	@ 0x40
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008fca:	6939      	ldr	r1, [r7, #16]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 fdcf 	bl	800ab78 <USBD_CtlPrepareRx>
      break;
 8008fda:	e076      	b.n	80090ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	33b0      	adds	r3, #176	@ 0xb0
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	7850      	ldrb	r0, [r2, #1]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	4798      	blx	r3
      break;
 8008ff8:	e067      	b.n	80090ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	785b      	ldrb	r3, [r3, #1]
 8008ffe:	2b0b      	cmp	r3, #11
 8009000:	d851      	bhi.n	80090a6 <USBD_CDC_Setup+0x18a>
 8009002:	a201      	add	r2, pc, #4	@ (adr r2, 8009008 <USBD_CDC_Setup+0xec>)
 8009004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009008:	08009039 	.word	0x08009039
 800900c:	080090b5 	.word	0x080090b5
 8009010:	080090a7 	.word	0x080090a7
 8009014:	080090a7 	.word	0x080090a7
 8009018:	080090a7 	.word	0x080090a7
 800901c:	080090a7 	.word	0x080090a7
 8009020:	080090a7 	.word	0x080090a7
 8009024:	080090a7 	.word	0x080090a7
 8009028:	080090a7 	.word	0x080090a7
 800902c:	080090a7 	.word	0x080090a7
 8009030:	08009063 	.word	0x08009063
 8009034:	0800908d 	.word	0x0800908d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b03      	cmp	r3, #3
 8009042:	d107      	bne.n	8009054 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009044:	f107 030a 	add.w	r3, r7, #10
 8009048:	2202      	movs	r2, #2
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 fd67 	bl	800ab20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009052:	e032      	b.n	80090ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fce5 	bl	800aa26 <USBD_CtlError>
            ret = USBD_FAIL;
 800905c:	2303      	movs	r3, #3
 800905e:	75fb      	strb	r3, [r7, #23]
          break;
 8009060:	e02b      	b.n	80090ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b03      	cmp	r3, #3
 800906c:	d107      	bne.n	800907e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800906e:	f107 030d 	add.w	r3, r7, #13
 8009072:	2201      	movs	r2, #1
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 fd52 	bl	800ab20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800907c:	e01d      	b.n	80090ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f001 fcd0 	bl	800aa26 <USBD_CtlError>
            ret = USBD_FAIL;
 8009086:	2303      	movs	r3, #3
 8009088:	75fb      	strb	r3, [r7, #23]
          break;
 800908a:	e016      	b.n	80090ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b03      	cmp	r3, #3
 8009096:	d00f      	beq.n	80090b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 fcc3 	bl	800aa26 <USBD_CtlError>
            ret = USBD_FAIL;
 80090a0:	2303      	movs	r3, #3
 80090a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80090a4:	e008      	b.n	80090b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 fcbc 	bl	800aa26 <USBD_CtlError>
          ret = USBD_FAIL;
 80090ae:	2303      	movs	r3, #3
 80090b0:	75fb      	strb	r3, [r7, #23]
          break;
 80090b2:	e002      	b.n	80090ba <USBD_CDC_Setup+0x19e>
          break;
 80090b4:	bf00      	nop
 80090b6:	e008      	b.n	80090ca <USBD_CDC_Setup+0x1ae>
          break;
 80090b8:	bf00      	nop
      }
      break;
 80090ba:	e006      	b.n	80090ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 fcb1 	bl	800aa26 <USBD_CtlError>
      ret = USBD_FAIL;
 80090c4:	2303      	movs	r3, #3
 80090c6:	75fb      	strb	r3, [r7, #23]
      break;
 80090c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	32b0      	adds	r2, #176	@ 0xb0
 80090f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e065      	b.n	80091ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	32b0      	adds	r2, #176	@ 0xb0
 8009108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	f003 020f 	and.w	r2, r3, #15
 8009114:	6879      	ldr	r1, [r7, #4]
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	440b      	add	r3, r1
 8009120:	3318      	adds	r3, #24
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d02f      	beq.n	8009188 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	f003 020f 	and.w	r2, r3, #15
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	3318      	adds	r3, #24
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	78fb      	ldrb	r3, [r7, #3]
 8009140:	f003 010f 	and.w	r1, r3, #15
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	460b      	mov	r3, r1
 8009148:	00db      	lsls	r3, r3, #3
 800914a:	440b      	add	r3, r1
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4403      	add	r3, r0
 8009150:	331c      	adds	r3, #28
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	fbb2 f1f3 	udiv	r1, r2, r3
 8009158:	fb01 f303 	mul.w	r3, r1, r3
 800915c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800915e:	2b00      	cmp	r3, #0
 8009160:	d112      	bne.n	8009188 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009162:	78fb      	ldrb	r3, [r7, #3]
 8009164:	f003 020f 	and.w	r2, r3, #15
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	440b      	add	r3, r1
 8009174:	3318      	adds	r3, #24
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800917a:	78f9      	ldrb	r1, [r7, #3]
 800917c:	2300      	movs	r3, #0
 800917e:	2200      	movs	r2, #0
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f003 fb72 	bl	800c86a <USBD_LL_Transmit>
 8009186:	e01f      	b.n	80091c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	33b0      	adds	r3, #176	@ 0xb0
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d010      	beq.n	80091c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	33b0      	adds	r3, #176	@ 0xb0
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80091c4:	78fa      	ldrb	r2, [r7, #3]
 80091c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	460b      	mov	r3, r1
 80091dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	32b0      	adds	r2, #176	@ 0xb0
 80091e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	32b0      	adds	r2, #176	@ 0xb0
 80091f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009200:	2303      	movs	r3, #3
 8009202:	e01a      	b.n	800923a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f003 fb70 	bl	800c8ee <USBD_LL_GetRxDataSize>
 800920e:	4602      	mov	r2, r0
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	33b0      	adds	r3, #176	@ 0xb0
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009234:	4611      	mov	r1, r2
 8009236:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	32b0      	adds	r2, #176	@ 0xb0
 8009254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009258:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009260:	2303      	movs	r3, #3
 8009262:	e024      	b.n	80092ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	33b0      	adds	r3, #176	@ 0xb0
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d019      	beq.n	80092ac <USBD_CDC_EP0_RxReady+0x6a>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800927e:	2bff      	cmp	r3, #255	@ 0xff
 8009280:	d014      	beq.n	80092ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	33b0      	adds	r3, #176	@ 0xb0
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800929a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80092a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	22ff      	movs	r2, #255	@ 0xff
 80092a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092c0:	2182      	movs	r1, #130	@ 0x82
 80092c2:	4818      	ldr	r0, [pc, #96]	@ (8009324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092c4:	f000 fd4f 	bl	8009d66 <USBD_GetEpDesc>
 80092c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092ca:	2101      	movs	r1, #1
 80092cc:	4815      	ldr	r0, [pc, #84]	@ (8009324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092ce:	f000 fd4a 	bl	8009d66 <USBD_GetEpDesc>
 80092d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092d4:	2181      	movs	r1, #129	@ 0x81
 80092d6:	4813      	ldr	r0, [pc, #76]	@ (8009324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092d8:	f000 fd45 	bl	8009d66 <USBD_GetEpDesc>
 80092dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2210      	movs	r2, #16
 80092e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d006      	beq.n	80092fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092f8:	711a      	strb	r2, [r3, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d006      	beq.n	8009312 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800930c:	711a      	strb	r2, [r3, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2243      	movs	r2, #67	@ 0x43
 8009316:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009318:	4b02      	ldr	r3, [pc, #8]	@ (8009324 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20000050 	.word	0x20000050

08009328 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009330:	2182      	movs	r1, #130	@ 0x82
 8009332:	4818      	ldr	r0, [pc, #96]	@ (8009394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009334:	f000 fd17 	bl	8009d66 <USBD_GetEpDesc>
 8009338:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800933a:	2101      	movs	r1, #1
 800933c:	4815      	ldr	r0, [pc, #84]	@ (8009394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800933e:	f000 fd12 	bl	8009d66 <USBD_GetEpDesc>
 8009342:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009344:	2181      	movs	r1, #129	@ 0x81
 8009346:	4813      	ldr	r0, [pc, #76]	@ (8009394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009348:	f000 fd0d 	bl	8009d66 <USBD_GetEpDesc>
 800934c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	2210      	movs	r2, #16
 8009358:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d006      	beq.n	800936e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2200      	movs	r2, #0
 8009364:	711a      	strb	r2, [r3, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f042 0202 	orr.w	r2, r2, #2
 800936c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d006      	beq.n	8009382 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	711a      	strb	r2, [r3, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f042 0202 	orr.w	r2, r2, #2
 8009380:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2243      	movs	r2, #67	@ 0x43
 8009386:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009388:	4b02      	ldr	r3, [pc, #8]	@ (8009394 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800938a:	4618      	mov	r0, r3
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000050 	.word	0x20000050

08009398 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093a0:	2182      	movs	r1, #130	@ 0x82
 80093a2:	4818      	ldr	r0, [pc, #96]	@ (8009404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093a4:	f000 fcdf 	bl	8009d66 <USBD_GetEpDesc>
 80093a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093aa:	2101      	movs	r1, #1
 80093ac:	4815      	ldr	r0, [pc, #84]	@ (8009404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093ae:	f000 fcda 	bl	8009d66 <USBD_GetEpDesc>
 80093b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093b4:	2181      	movs	r1, #129	@ 0x81
 80093b6:	4813      	ldr	r0, [pc, #76]	@ (8009404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093b8:	f000 fcd5 	bl	8009d66 <USBD_GetEpDesc>
 80093bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2210      	movs	r2, #16
 80093c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d006      	beq.n	80093de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093d8:	711a      	strb	r2, [r3, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d006      	beq.n	80093f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093ec:	711a      	strb	r2, [r3, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2243      	movs	r2, #67	@ 0x43
 80093f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80093f8:	4b02      	ldr	r3, [pc, #8]	@ (8009404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000050 	.word	0x20000050

08009408 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	220a      	movs	r2, #10
 8009414:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009416:	4b03      	ldr	r3, [pc, #12]	@ (8009424 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009418:	4618      	mov	r0, r3
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	2000000c 	.word	0x2000000c

08009428 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009438:	2303      	movs	r3, #3
 800943a:	e009      	b.n	8009450 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	33b0      	adds	r3, #176	@ 0xb0
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800945c:	b480      	push	{r7}
 800945e:	b087      	sub	sp, #28
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	32b0      	adds	r2, #176	@ 0xb0
 8009472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009476:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800947e:	2303      	movs	r3, #3
 8009480:	e008      	b.n	8009494 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	32b0      	adds	r2, #176	@ 0xb0
 80094b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e004      	b.n	80094ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
	...

080094dc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	32b0      	adds	r2, #176	@ 0xb0
 80094ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80094f4:	2301      	movs	r3, #1
 80094f6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80094fe:	2303      	movs	r3, #3
 8009500:	e025      	b.n	800954e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009508:	2b00      	cmp	r3, #0
 800950a:	d11f      	bne.n	800954c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2201      	movs	r2, #1
 8009510:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009514:	4b10      	ldr	r3, [pc, #64]	@ (8009558 <USBD_CDC_TransmitPacket+0x7c>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 020f 	and.w	r2, r3, #15
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	4613      	mov	r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4403      	add	r3, r0
 800952e:	3318      	adds	r3, #24
 8009530:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009532:	4b09      	ldr	r3, [pc, #36]	@ (8009558 <USBD_CDC_TransmitPacket+0x7c>)
 8009534:	7819      	ldrb	r1, [r3, #0]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f003 f991 	bl	800c86a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	20000093 	.word	0x20000093

0800955c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	32b0      	adds	r2, #176	@ 0xb0
 800956e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009572:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	32b0      	adds	r2, #176	@ 0xb0
 800957e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009586:	2303      	movs	r3, #3
 8009588:	e018      	b.n	80095bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	7c1b      	ldrb	r3, [r3, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009592:	4b0c      	ldr	r3, [pc, #48]	@ (80095c4 <USBD_CDC_ReceivePacket+0x68>)
 8009594:	7819      	ldrb	r1, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800959c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f003 f983 	bl	800c8ac <USBD_LL_PrepareReceive>
 80095a6:	e008      	b.n	80095ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80095a8:	4b06      	ldr	r3, [pc, #24]	@ (80095c4 <USBD_CDC_ReceivePacket+0x68>)
 80095aa:	7819      	ldrb	r1, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095b2:	2340      	movs	r3, #64	@ 0x40
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f003 f979 	bl	800c8ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000094 	.word	0x20000094

080095c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	4613      	mov	r3, r2
 80095d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d101      	bne.n	80095e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80095dc:	2303      	movs	r3, #3
 80095de:	e01f      	b.n	8009620 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	79fa      	ldrb	r2, [r7, #7]
 8009612:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f002 fff3 	bl	800c600 <USBD_LL_Init>
 800961a:	4603      	mov	r3, r0
 800961c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800963c:	2303      	movs	r3, #3
 800963e:	e025      	b.n	800968c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	32ae      	adds	r2, #174	@ 0xae
 8009652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00f      	beq.n	800967c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	32ae      	adds	r2, #174	@ 0xae
 8009666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	f107 020e 	add.w	r2, r7, #14
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
 8009674:	4602      	mov	r2, r0
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f002 fffb 	bl	800c698 <USBD_LL_Start>
 80096a2:	4603      	mov	r3, r0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	460b      	mov	r3, r1
 80096cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d009      	beq.n	80096f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	4611      	mov	r1, r2
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	4798      	blx	r3
 80096ec:	4603      	mov	r3, r0
 80096ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	78fa      	ldrb	r2, [r7, #3]
 8009714:	4611      	mov	r1, r2
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	4798      	blx	r3
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009720:	2303      	movs	r3, #3
 8009722:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	4618      	mov	r0, r3
 8009742:	f001 f936 	bl	800a9b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009754:	461a      	mov	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009762:	f003 031f 	and.w	r3, r3, #31
 8009766:	2b02      	cmp	r3, #2
 8009768:	d01a      	beq.n	80097a0 <USBD_LL_SetupStage+0x72>
 800976a:	2b02      	cmp	r3, #2
 800976c:	d822      	bhi.n	80097b4 <USBD_LL_SetupStage+0x86>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <USBD_LL_SetupStage+0x4a>
 8009772:	2b01      	cmp	r3, #1
 8009774:	d00a      	beq.n	800978c <USBD_LL_SetupStage+0x5e>
 8009776:	e01d      	b.n	80097b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fb63 	bl	8009e4c <USBD_StdDevReq>
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]
      break;
 800978a:	e020      	b.n	80097ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fbcb 	bl	8009f30 <USBD_StdItfReq>
 800979a:	4603      	mov	r3, r0
 800979c:	73fb      	strb	r3, [r7, #15]
      break;
 800979e:	e016      	b.n	80097ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fc2d 	bl	800a008 <USBD_StdEPReq>
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]
      break;
 80097b2:	e00c      	b.n	80097ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80097ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f002 ffc8 	bl	800c758 <USBD_LL_StallEP>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
      break;
 80097cc:	bf00      	nop
  }

  return ret;
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	460b      	mov	r3, r1
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d16e      	bne.n	80098ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80097f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80097fe:	2b03      	cmp	r3, #3
 8009800:	f040 8098 	bne.w	8009934 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	429a      	cmp	r2, r3
 800980e:	d913      	bls.n	8009838 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	689a      	ldr	r2, [r3, #8]
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	1ad2      	subs	r2, r2, r3
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	4293      	cmp	r3, r2
 8009828:	bf28      	it	cs
 800982a:	4613      	movcs	r3, r2
 800982c:	461a      	mov	r2, r3
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f001 f9be 	bl	800abb2 <USBD_CtlContinueRx>
 8009836:	e07d      	b.n	8009934 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800983e:	f003 031f 	and.w	r3, r3, #31
 8009842:	2b02      	cmp	r3, #2
 8009844:	d014      	beq.n	8009870 <USBD_LL_DataOutStage+0x98>
 8009846:	2b02      	cmp	r3, #2
 8009848:	d81d      	bhi.n	8009886 <USBD_LL_DataOutStage+0xae>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <USBD_LL_DataOutStage+0x7c>
 800984e:	2b01      	cmp	r3, #1
 8009850:	d003      	beq.n	800985a <USBD_LL_DataOutStage+0x82>
 8009852:	e018      	b.n	8009886 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	75bb      	strb	r3, [r7, #22]
            break;
 8009858:	e018      	b.n	800988c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009860:	b2db      	uxtb	r3, r3
 8009862:	4619      	mov	r1, r3
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fa64 	bl	8009d32 <USBD_CoreFindIF>
 800986a:	4603      	mov	r3, r0
 800986c:	75bb      	strb	r3, [r7, #22]
            break;
 800986e:	e00d      	b.n	800988c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009876:	b2db      	uxtb	r3, r3
 8009878:	4619      	mov	r1, r3
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 fa66 	bl	8009d4c <USBD_CoreFindEP>
 8009880:	4603      	mov	r3, r0
 8009882:	75bb      	strb	r3, [r7, #22]
            break;
 8009884:	e002      	b.n	800988c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	75bb      	strb	r3, [r7, #22]
            break;
 800988a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800988c:	7dbb      	ldrb	r3, [r7, #22]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d119      	bne.n	80098c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b03      	cmp	r3, #3
 800989c:	d113      	bne.n	80098c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800989e:	7dba      	ldrb	r2, [r7, #22]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	32ae      	adds	r2, #174	@ 0xae
 80098a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80098ae:	7dba      	ldrb	r2, [r7, #22]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80098b6:	7dba      	ldrb	r2, [r7, #22]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	32ae      	adds	r2, #174	@ 0xae
 80098bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f001 f984 	bl	800abd4 <USBD_CtlSendStatus>
 80098cc:	e032      	b.n	8009934 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80098ce:	7afb      	ldrb	r3, [r7, #11]
 80098d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	4619      	mov	r1, r3
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 fa37 	bl	8009d4c <USBD_CoreFindEP>
 80098de:	4603      	mov	r3, r0
 80098e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098e2:	7dbb      	ldrb	r3, [r7, #22]
 80098e4:	2bff      	cmp	r3, #255	@ 0xff
 80098e6:	d025      	beq.n	8009934 <USBD_LL_DataOutStage+0x15c>
 80098e8:	7dbb      	ldrb	r3, [r7, #22]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d122      	bne.n	8009934 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d117      	bne.n	800992a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80098fa:	7dba      	ldrb	r2, [r7, #22]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	32ae      	adds	r2, #174	@ 0xae
 8009900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00f      	beq.n	800992a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800990a:	7dba      	ldrb	r2, [r7, #22]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009912:	7dba      	ldrb	r2, [r7, #22]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	32ae      	adds	r2, #174	@ 0xae
 8009918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	7afa      	ldrb	r2, [r7, #11]
 8009920:	4611      	mov	r1, r2
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	4798      	blx	r3
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	e000      	b.n	8009936 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b086      	sub	sp, #24
 8009942:	af00      	add	r7, sp, #0
 8009944:	60f8      	str	r0, [r7, #12]
 8009946:	460b      	mov	r3, r1
 8009948:	607a      	str	r2, [r7, #4]
 800994a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800994c:	7afb      	ldrb	r3, [r7, #11]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d16f      	bne.n	8009a32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3314      	adds	r3, #20
 8009956:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800995e:	2b02      	cmp	r3, #2
 8009960:	d15a      	bne.n	8009a18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	689a      	ldr	r2, [r3, #8]
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	429a      	cmp	r2, r3
 800996c:	d914      	bls.n	8009998 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	689a      	ldr	r2, [r3, #8]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	1ad2      	subs	r2, r2, r3
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	461a      	mov	r2, r3
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f001 f8e6 	bl	800ab56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800998a:	2300      	movs	r3, #0
 800998c:	2200      	movs	r2, #0
 800998e:	2100      	movs	r1, #0
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f002 ff8b 	bl	800c8ac <USBD_LL_PrepareReceive>
 8009996:	e03f      	b.n	8009a18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	68da      	ldr	r2, [r3, #12]
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d11c      	bne.n	80099de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d316      	bcc.n	80099de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d20f      	bcs.n	80099de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099be:	2200      	movs	r2, #0
 80099c0:	2100      	movs	r1, #0
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f001 f8c7 	bl	800ab56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099d0:	2300      	movs	r3, #0
 80099d2:	2200      	movs	r2, #0
 80099d4:	2100      	movs	r1, #0
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f002 ff68 	bl	800c8ac <USBD_LL_PrepareReceive>
 80099dc:	e01c      	b.n	8009a18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d10f      	bne.n	8009a0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d009      	beq.n	8009a0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a04:	68db      	ldr	r3, [r3, #12]
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a0a:	2180      	movs	r1, #128	@ 0x80
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f002 fea3 	bl	800c758 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f001 f8f1 	bl	800abfa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d03a      	beq.n	8009a98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f7ff fe42 	bl	80096ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009a30:	e032      	b.n	8009a98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009a32:	7afb      	ldrb	r3, [r7, #11]
 8009a34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f985 	bl	8009d4c <USBD_CoreFindEP>
 8009a42:	4603      	mov	r3, r0
 8009a44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	2bff      	cmp	r3, #255	@ 0xff
 8009a4a:	d025      	beq.n	8009a98 <USBD_LL_DataInStage+0x15a>
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d122      	bne.n	8009a98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d11c      	bne.n	8009a98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009a5e:	7dfa      	ldrb	r2, [r7, #23]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	32ae      	adds	r2, #174	@ 0xae
 8009a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d014      	beq.n	8009a98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009a6e:	7dfa      	ldrb	r2, [r7, #23]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009a76:	7dfa      	ldrb	r2, [r7, #23]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	32ae      	adds	r2, #174	@ 0xae
 8009a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	7afa      	ldrb	r2, [r7, #11]
 8009a84:	4611      	mov	r1, r2
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	4798      	blx	r3
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009a8e:	7dbb      	ldrb	r3, [r7, #22]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009a94:	7dbb      	ldrb	r3, [r7, #22]
 8009a96:	e000      	b.n	8009a9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d014      	beq.n	8009b08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00e      	beq.n	8009b08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	6852      	ldr	r2, [r2, #4]
 8009af6:	b2d2      	uxtb	r2, r2
 8009af8:	4611      	mov	r1, r2
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	4798      	blx	r3
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009b04:	2303      	movs	r3, #3
 8009b06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b08:	2340      	movs	r3, #64	@ 0x40
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f002 fddd 	bl	800c6ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2240      	movs	r2, #64	@ 0x40
 8009b20:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b24:	2340      	movs	r3, #64	@ 0x40
 8009b26:	2200      	movs	r2, #0
 8009b28:	2180      	movs	r1, #128	@ 0x80
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f002 fdcf 	bl	800c6ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2240      	movs	r2, #64	@ 0x40
 8009b3a:	621a      	str	r2, [r3, #32]

  return ret;
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	78fa      	ldrb	r2, [r7, #3]
 8009b56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b083      	sub	sp, #12
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b04      	cmp	r3, #4
 8009b78:	d006      	beq.n	8009b88 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2204      	movs	r2, #4
 8009b8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b083      	sub	sp, #12
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b04      	cmp	r3, #4
 8009bb0:	d106      	bne.n	8009bc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b082      	sub	sp, #8
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d110      	bne.n	8009c04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d005      	beq.n	8009c04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b082      	sub	sp, #8
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	32ae      	adds	r2, #174	@ 0xae
 8009c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e01c      	b.n	8009c6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d115      	bne.n	8009c68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	32ae      	adds	r2, #174	@ 0xae
 8009c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	32ae      	adds	r2, #174	@ 0xae
 8009c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	78fa      	ldrb	r2, [r7, #3]
 8009c62:	4611      	mov	r1, r2
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b082      	sub	sp, #8
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	32ae      	adds	r2, #174	@ 0xae
 8009c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d101      	bne.n	8009c94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e01c      	b.n	8009cce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d115      	bne.n	8009ccc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	32ae      	adds	r2, #174	@ 0xae
 8009caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00b      	beq.n	8009ccc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	32ae      	adds	r2, #174	@ 0xae
 8009cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc4:	78fa      	ldrb	r2, [r7, #3]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b083      	sub	sp, #12
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00e      	beq.n	8009d28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	6852      	ldr	r2, [r2, #4]
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	4611      	mov	r1, r2
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	4798      	blx	r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009d24:	2303      	movs	r3, #3
 8009d26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009d58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b086      	sub	sp, #24
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	885b      	ldrh	r3, [r3, #2]
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	7812      	ldrb	r2, [r2, #0]
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d91f      	bls.n	8009dcc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009d92:	e013      	b.n	8009dbc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009d94:	f107 030a 	add.w	r3, r7, #10
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6978      	ldr	r0, [r7, #20]
 8009d9c:	f000 f81b 	bl	8009dd6 <USBD_GetNextDesc>
 8009da0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	785b      	ldrb	r3, [r3, #1]
 8009da6:	2b05      	cmp	r3, #5
 8009da8:	d108      	bne.n	8009dbc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	789b      	ldrb	r3, [r3, #2]
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d008      	beq.n	8009dca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009db8:	2300      	movs	r3, #0
 8009dba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	885b      	ldrh	r3, [r3, #2]
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	897b      	ldrh	r3, [r7, #10]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d8e5      	bhi.n	8009d94 <USBD_GetEpDesc+0x2e>
 8009dc8:	e000      	b.n	8009dcc <USBD_GetEpDesc+0x66>
          break;
 8009dca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009dcc:	693b      	ldr	r3, [r7, #16]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b085      	sub	sp, #20
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	7812      	ldrb	r2, [r2, #0]
 8009dec:	4413      	add	r3, r2
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e00:	68fb      	ldr	r3, [r7, #12]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b087      	sub	sp, #28
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	3301      	adds	r3, #1
 8009e24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009e2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009e30:	021b      	lsls	r3, r3, #8
 8009e32:	b21a      	sxth	r2, r3
 8009e34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	b21b      	sxth	r3, r3
 8009e3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009e3e:	89fb      	ldrh	r3, [r7, #14]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	371c      	adds	r7, #28
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e62:	2b40      	cmp	r3, #64	@ 0x40
 8009e64:	d005      	beq.n	8009e72 <USBD_StdDevReq+0x26>
 8009e66:	2b40      	cmp	r3, #64	@ 0x40
 8009e68:	d857      	bhi.n	8009f1a <USBD_StdDevReq+0xce>
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00f      	beq.n	8009e8e <USBD_StdDevReq+0x42>
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	d153      	bne.n	8009f1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	32ae      	adds	r2, #174	@ 0xae
 8009e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	4798      	blx	r3
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e8c:	e04a      	b.n	8009f24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	785b      	ldrb	r3, [r3, #1]
 8009e92:	2b09      	cmp	r3, #9
 8009e94:	d83b      	bhi.n	8009f0e <USBD_StdDevReq+0xc2>
 8009e96:	a201      	add	r2, pc, #4	@ (adr r2, 8009e9c <USBD_StdDevReq+0x50>)
 8009e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9c:	08009ef1 	.word	0x08009ef1
 8009ea0:	08009f05 	.word	0x08009f05
 8009ea4:	08009f0f 	.word	0x08009f0f
 8009ea8:	08009efb 	.word	0x08009efb
 8009eac:	08009f0f 	.word	0x08009f0f
 8009eb0:	08009ecf 	.word	0x08009ecf
 8009eb4:	08009ec5 	.word	0x08009ec5
 8009eb8:	08009f0f 	.word	0x08009f0f
 8009ebc:	08009ee7 	.word	0x08009ee7
 8009ec0:	08009ed9 	.word	0x08009ed9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa3c 	bl	800a344 <USBD_GetDescriptor>
          break;
 8009ecc:	e024      	b.n	8009f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fbcb 	bl	800a66c <USBD_SetAddress>
          break;
 8009ed6:	e01f      	b.n	8009f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fc0a 	bl	800a6f4 <USBD_SetConfig>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]
          break;
 8009ee4:	e018      	b.n	8009f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 fcad 	bl	800a848 <USBD_GetConfig>
          break;
 8009eee:	e013      	b.n	8009f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fcde 	bl	800a8b4 <USBD_GetStatus>
          break;
 8009ef8:	e00e      	b.n	8009f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009efa:	6839      	ldr	r1, [r7, #0]
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fd0d 	bl	800a91c <USBD_SetFeature>
          break;
 8009f02:	e009      	b.n	8009f18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fd31 	bl	800a96e <USBD_ClrFeature>
          break;
 8009f0c:	e004      	b.n	8009f18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fd88 	bl	800aa26 <USBD_CtlError>
          break;
 8009f16:	bf00      	nop
      }
      break;
 8009f18:	e004      	b.n	8009f24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fd82 	bl	800aa26 <USBD_CtlError>
      break;
 8009f22:	bf00      	nop
  }

  return ret;
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop

08009f30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f46:	2b40      	cmp	r3, #64	@ 0x40
 8009f48:	d005      	beq.n	8009f56 <USBD_StdItfReq+0x26>
 8009f4a:	2b40      	cmp	r3, #64	@ 0x40
 8009f4c:	d852      	bhi.n	8009ff4 <USBD_StdItfReq+0xc4>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <USBD_StdItfReq+0x26>
 8009f52:	2b20      	cmp	r3, #32
 8009f54:	d14e      	bne.n	8009ff4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d840      	bhi.n	8009fe6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	889b      	ldrh	r3, [r3, #4]
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d836      	bhi.n	8009fdc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	889b      	ldrh	r3, [r3, #4]
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff fedb 	bl	8009d32 <USBD_CoreFindIF>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	2bff      	cmp	r3, #255	@ 0xff
 8009f84:	d01d      	beq.n	8009fc2 <USBD_StdItfReq+0x92>
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d11a      	bne.n	8009fc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009f8c:	7bba      	ldrb	r2, [r7, #14]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	32ae      	adds	r2, #174	@ 0xae
 8009f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00f      	beq.n	8009fbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009f9c:	7bba      	ldrb	r2, [r7, #14]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009fa4:	7bba      	ldrb	r2, [r7, #14]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	32ae      	adds	r2, #174	@ 0xae
 8009faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	4798      	blx	r3
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009fba:	e004      	b.n	8009fc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009fc0:	e001      	b.n	8009fc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	88db      	ldrh	r3, [r3, #6]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d110      	bne.n	8009ff0 <USBD_StdItfReq+0xc0>
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10d      	bne.n	8009ff0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fdfd 	bl	800abd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009fda:	e009      	b.n	8009ff0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fd21 	bl	800aa26 <USBD_CtlError>
          break;
 8009fe4:	e004      	b.n	8009ff0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fd1c 	bl	800aa26 <USBD_CtlError>
          break;
 8009fee:	e000      	b.n	8009ff2 <USBD_StdItfReq+0xc2>
          break;
 8009ff0:	bf00      	nop
      }
      break;
 8009ff2:	e004      	b.n	8009ffe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fd15 	bl	800aa26 <USBD_CtlError>
      break;
 8009ffc:	bf00      	nop
  }

  return ret;
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	889b      	ldrh	r3, [r3, #4]
 800a01a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a024:	2b40      	cmp	r3, #64	@ 0x40
 800a026:	d007      	beq.n	800a038 <USBD_StdEPReq+0x30>
 800a028:	2b40      	cmp	r3, #64	@ 0x40
 800a02a:	f200 817f 	bhi.w	800a32c <USBD_StdEPReq+0x324>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d02a      	beq.n	800a088 <USBD_StdEPReq+0x80>
 800a032:	2b20      	cmp	r3, #32
 800a034:	f040 817a 	bne.w	800a32c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	4619      	mov	r1, r3
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7ff fe85 	bl	8009d4c <USBD_CoreFindEP>
 800a042:	4603      	mov	r3, r0
 800a044:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a046:	7b7b      	ldrb	r3, [r7, #13]
 800a048:	2bff      	cmp	r3, #255	@ 0xff
 800a04a:	f000 8174 	beq.w	800a336 <USBD_StdEPReq+0x32e>
 800a04e:	7b7b      	ldrb	r3, [r7, #13]
 800a050:	2b00      	cmp	r3, #0
 800a052:	f040 8170 	bne.w	800a336 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a056:	7b7a      	ldrb	r2, [r7, #13]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a05e:	7b7a      	ldrb	r2, [r7, #13]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	32ae      	adds	r2, #174	@ 0xae
 800a064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 8163 	beq.w	800a336 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a070:	7b7a      	ldrb	r2, [r7, #13]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	32ae      	adds	r2, #174	@ 0xae
 800a076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
 800a082:	4603      	mov	r3, r0
 800a084:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a086:	e156      	b.n	800a336 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	785b      	ldrb	r3, [r3, #1]
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d008      	beq.n	800a0a2 <USBD_StdEPReq+0x9a>
 800a090:	2b03      	cmp	r3, #3
 800a092:	f300 8145 	bgt.w	800a320 <USBD_StdEPReq+0x318>
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 809b 	beq.w	800a1d2 <USBD_StdEPReq+0x1ca>
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d03c      	beq.n	800a11a <USBD_StdEPReq+0x112>
 800a0a0:	e13e      	b.n	800a320 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d002      	beq.n	800a0b4 <USBD_StdEPReq+0xac>
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	d016      	beq.n	800a0e0 <USBD_StdEPReq+0xd8>
 800a0b2:	e02c      	b.n	800a10e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00d      	beq.n	800a0d6 <USBD_StdEPReq+0xce>
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	2b80      	cmp	r3, #128	@ 0x80
 800a0be:	d00a      	beq.n	800a0d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f002 fb47 	bl	800c758 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0ca:	2180      	movs	r1, #128	@ 0x80
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f002 fb43 	bl	800c758 <USBD_LL_StallEP>
 800a0d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0d4:	e020      	b.n	800a118 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fca4 	bl	800aa26 <USBD_CtlError>
              break;
 800a0de:	e01b      	b.n	800a118 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	885b      	ldrh	r3, [r3, #2]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10e      	bne.n	800a106 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00b      	beq.n	800a106 <USBD_StdEPReq+0xfe>
 800a0ee:	7bbb      	ldrb	r3, [r7, #14]
 800a0f0:	2b80      	cmp	r3, #128	@ 0x80
 800a0f2:	d008      	beq.n	800a106 <USBD_StdEPReq+0xfe>
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	88db      	ldrh	r3, [r3, #6]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f002 fb29 	bl	800c758 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fd64 	bl	800abd4 <USBD_CtlSendStatus>

              break;
 800a10c:	e004      	b.n	800a118 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fc88 	bl	800aa26 <USBD_CtlError>
              break;
 800a116:	bf00      	nop
          }
          break;
 800a118:	e107      	b.n	800a32a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b02      	cmp	r3, #2
 800a124:	d002      	beq.n	800a12c <USBD_StdEPReq+0x124>
 800a126:	2b03      	cmp	r3, #3
 800a128:	d016      	beq.n	800a158 <USBD_StdEPReq+0x150>
 800a12a:	e04b      	b.n	800a1c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00d      	beq.n	800a14e <USBD_StdEPReq+0x146>
 800a132:	7bbb      	ldrb	r3, [r7, #14]
 800a134:	2b80      	cmp	r3, #128	@ 0x80
 800a136:	d00a      	beq.n	800a14e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a138:	7bbb      	ldrb	r3, [r7, #14]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f002 fb0b 	bl	800c758 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a142:	2180      	movs	r1, #128	@ 0x80
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f002 fb07 	bl	800c758 <USBD_LL_StallEP>
 800a14a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a14c:	e040      	b.n	800a1d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fc68 	bl	800aa26 <USBD_CtlError>
              break;
 800a156:	e03b      	b.n	800a1d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	885b      	ldrh	r3, [r3, #2]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d136      	bne.n	800a1ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a166:	2b00      	cmp	r3, #0
 800a168:	d004      	beq.n	800a174 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f002 fb11 	bl	800c796 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fd2d 	bl	800abd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a17a:	7bbb      	ldrb	r3, [r7, #14]
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff fde4 	bl	8009d4c <USBD_CoreFindEP>
 800a184:	4603      	mov	r3, r0
 800a186:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a188:	7b7b      	ldrb	r3, [r7, #13]
 800a18a:	2bff      	cmp	r3, #255	@ 0xff
 800a18c:	d01f      	beq.n	800a1ce <USBD_StdEPReq+0x1c6>
 800a18e:	7b7b      	ldrb	r3, [r7, #13]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d11c      	bne.n	800a1ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a194:	7b7a      	ldrb	r2, [r7, #13]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a19c:	7b7a      	ldrb	r2, [r7, #13]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	32ae      	adds	r2, #174	@ 0xae
 800a1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d010      	beq.n	800a1ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a1ac:	7b7a      	ldrb	r2, [r7, #13]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	32ae      	adds	r2, #174	@ 0xae
 800a1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	4798      	blx	r3
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a1c2:	e004      	b.n	800a1ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fc2d 	bl	800aa26 <USBD_CtlError>
              break;
 800a1cc:	e000      	b.n	800a1d0 <USBD_StdEPReq+0x1c8>
              break;
 800a1ce:	bf00      	nop
          }
          break;
 800a1d0:	e0ab      	b.n	800a32a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d002      	beq.n	800a1e4 <USBD_StdEPReq+0x1dc>
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d032      	beq.n	800a248 <USBD_StdEPReq+0x240>
 800a1e2:	e097      	b.n	800a314 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d007      	beq.n	800a1fa <USBD_StdEPReq+0x1f2>
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	2b80      	cmp	r3, #128	@ 0x80
 800a1ee:	d004      	beq.n	800a1fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fc17 	bl	800aa26 <USBD_CtlError>
                break;
 800a1f8:	e091      	b.n	800a31e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	da0b      	bge.n	800a21a <USBD_StdEPReq+0x212>
 800a202:	7bbb      	ldrb	r3, [r7, #14]
 800a204:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	3310      	adds	r3, #16
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	4413      	add	r3, r2
 800a216:	3304      	adds	r3, #4
 800a218:	e00b      	b.n	800a232 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
 800a21c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a220:	4613      	mov	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	4413      	add	r3, r2
 800a230:	3304      	adds	r3, #4
 800a232:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2202      	movs	r2, #2
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fc6d 	bl	800ab20 <USBD_CtlSendData>
              break;
 800a246:	e06a      	b.n	800a31e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	da11      	bge.n	800a274 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a250:	7bbb      	ldrb	r3, [r7, #14]
 800a252:	f003 020f 	and.w	r2, r3, #15
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	4613      	mov	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	440b      	add	r3, r1
 800a262:	3324      	adds	r3, #36	@ 0x24
 800a264:	881b      	ldrh	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d117      	bne.n	800a29a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fbda 	bl	800aa26 <USBD_CtlError>
                  break;
 800a272:	e054      	b.n	800a31e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	f003 020f 	and.w	r2, r3, #15
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	4613      	mov	r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	4413      	add	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	440b      	add	r3, r1
 800a286:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d104      	bne.n	800a29a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a290:	6839      	ldr	r1, [r7, #0]
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 fbc7 	bl	800aa26 <USBD_CtlError>
                  break;
 800a298:	e041      	b.n	800a31e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a29a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	da0b      	bge.n	800a2ba <USBD_StdEPReq+0x2b2>
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	3310      	adds	r3, #16
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	e00b      	b.n	800a2d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2ba:	7bbb      	ldrb	r3, [r7, #14]
 800a2bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <USBD_StdEPReq+0x2d8>
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
 800a2dc:	2b80      	cmp	r3, #128	@ 0x80
 800a2de:	d103      	bne.n	800a2e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	e00e      	b.n	800a306 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f002 fa71 	bl	800c7d4 <USBD_LL_IsStallEP>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d003      	beq.n	800a300 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	e002      	b.n	800a306 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2200      	movs	r2, #0
 800a304:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2202      	movs	r2, #2
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fc07 	bl	800ab20 <USBD_CtlSendData>
              break;
 800a312:	e004      	b.n	800a31e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a314:	6839      	ldr	r1, [r7, #0]
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 fb85 	bl	800aa26 <USBD_CtlError>
              break;
 800a31c:	bf00      	nop
          }
          break;
 800a31e:	e004      	b.n	800a32a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fb7f 	bl	800aa26 <USBD_CtlError>
          break;
 800a328:	bf00      	nop
      }
      break;
 800a32a:	e005      	b.n	800a338 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fb79 	bl	800aa26 <USBD_CtlError>
      break;
 800a334:	e000      	b.n	800a338 <USBD_StdEPReq+0x330>
      break;
 800a336:	bf00      	nop
  }

  return ret;
 800a338:	7bfb      	ldrb	r3, [r7, #15]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a34e:	2300      	movs	r3, #0
 800a350:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a352:	2300      	movs	r3, #0
 800a354:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a356:	2300      	movs	r3, #0
 800a358:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	885b      	ldrh	r3, [r3, #2]
 800a35e:	0a1b      	lsrs	r3, r3, #8
 800a360:	b29b      	uxth	r3, r3
 800a362:	3b01      	subs	r3, #1
 800a364:	2b0e      	cmp	r3, #14
 800a366:	f200 8152 	bhi.w	800a60e <USBD_GetDescriptor+0x2ca>
 800a36a:	a201      	add	r2, pc, #4	@ (adr r2, 800a370 <USBD_GetDescriptor+0x2c>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a3e1 	.word	0x0800a3e1
 800a374:	0800a3f9 	.word	0x0800a3f9
 800a378:	0800a439 	.word	0x0800a439
 800a37c:	0800a60f 	.word	0x0800a60f
 800a380:	0800a60f 	.word	0x0800a60f
 800a384:	0800a5af 	.word	0x0800a5af
 800a388:	0800a5db 	.word	0x0800a5db
 800a38c:	0800a60f 	.word	0x0800a60f
 800a390:	0800a60f 	.word	0x0800a60f
 800a394:	0800a60f 	.word	0x0800a60f
 800a398:	0800a60f 	.word	0x0800a60f
 800a39c:	0800a60f 	.word	0x0800a60f
 800a3a0:	0800a60f 	.word	0x0800a60f
 800a3a4:	0800a60f 	.word	0x0800a60f
 800a3a8:	0800a3ad 	.word	0x0800a3ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3b2:	69db      	ldr	r3, [r3, #28]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00b      	beq.n	800a3d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	7c12      	ldrb	r2, [r2, #16]
 800a3c4:	f107 0108 	add.w	r1, r7, #8
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	4798      	blx	r3
 800a3cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3ce:	e126      	b.n	800a61e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fb27 	bl	800aa26 <USBD_CtlError>
        err++;
 800a3d8:	7afb      	ldrb	r3, [r7, #11]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	72fb      	strb	r3, [r7, #11]
      break;
 800a3de:	e11e      	b.n	800a61e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	7c12      	ldrb	r2, [r2, #16]
 800a3ec:	f107 0108 	add.w	r1, r7, #8
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	4798      	blx	r3
 800a3f4:	60f8      	str	r0, [r7, #12]
      break;
 800a3f6:	e112      	b.n	800a61e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7c1b      	ldrb	r3, [r3, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10d      	bne.n	800a41c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a408:	f107 0208 	add.w	r2, r7, #8
 800a40c:	4610      	mov	r0, r2
 800a40e:	4798      	blx	r3
 800a410:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	3301      	adds	r3, #1
 800a416:	2202      	movs	r2, #2
 800a418:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a41a:	e100      	b.n	800a61e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a424:	f107 0208 	add.w	r2, r7, #8
 800a428:	4610      	mov	r0, r2
 800a42a:	4798      	blx	r3
 800a42c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3301      	adds	r3, #1
 800a432:	2202      	movs	r2, #2
 800a434:	701a      	strb	r2, [r3, #0]
      break;
 800a436:	e0f2      	b.n	800a61e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	885b      	ldrh	r3, [r3, #2]
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b05      	cmp	r3, #5
 800a440:	f200 80ac 	bhi.w	800a59c <USBD_GetDescriptor+0x258>
 800a444:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <USBD_GetDescriptor+0x108>)
 800a446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44a:	bf00      	nop
 800a44c:	0800a465 	.word	0x0800a465
 800a450:	0800a499 	.word	0x0800a499
 800a454:	0800a4cd 	.word	0x0800a4cd
 800a458:	0800a501 	.word	0x0800a501
 800a45c:	0800a535 	.word	0x0800a535
 800a460:	0800a569 	.word	0x0800a569
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00b      	beq.n	800a488 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	7c12      	ldrb	r2, [r2, #16]
 800a47c:	f107 0108 	add.w	r1, r7, #8
 800a480:	4610      	mov	r0, r2
 800a482:	4798      	blx	r3
 800a484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a486:	e091      	b.n	800a5ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a488:	6839      	ldr	r1, [r7, #0]
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 facb 	bl	800aa26 <USBD_CtlError>
            err++;
 800a490:	7afb      	ldrb	r3, [r7, #11]
 800a492:	3301      	adds	r3, #1
 800a494:	72fb      	strb	r3, [r7, #11]
          break;
 800a496:	e089      	b.n	800a5ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00b      	beq.n	800a4bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	7c12      	ldrb	r2, [r2, #16]
 800a4b0:	f107 0108 	add.w	r1, r7, #8
 800a4b4:	4610      	mov	r0, r2
 800a4b6:	4798      	blx	r3
 800a4b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ba:	e077      	b.n	800a5ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fab1 	bl	800aa26 <USBD_CtlError>
            err++;
 800a4c4:	7afb      	ldrb	r3, [r7, #11]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ca:	e06f      	b.n	800a5ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00b      	beq.n	800a4f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	7c12      	ldrb	r2, [r2, #16]
 800a4e4:	f107 0108 	add.w	r1, r7, #8
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	4798      	blx	r3
 800a4ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ee:	e05d      	b.n	800a5ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa97 	bl	800aa26 <USBD_CtlError>
            err++;
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fe:	e055      	b.n	800a5ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00b      	beq.n	800a524 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7c12      	ldrb	r2, [r2, #16]
 800a518:	f107 0108 	add.w	r1, r7, #8
 800a51c:	4610      	mov	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a522:	e043      	b.n	800a5ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fa7d 	bl	800aa26 <USBD_CtlError>
            err++;
 800a52c:	7afb      	ldrb	r3, [r7, #11]
 800a52e:	3301      	adds	r3, #1
 800a530:	72fb      	strb	r3, [r7, #11]
          break;
 800a532:	e03b      	b.n	800a5ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	7c12      	ldrb	r2, [r2, #16]
 800a54c:	f107 0108 	add.w	r1, r7, #8
 800a550:	4610      	mov	r0, r2
 800a552:	4798      	blx	r3
 800a554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a556:	e029      	b.n	800a5ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa63 	bl	800aa26 <USBD_CtlError>
            err++;
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	3301      	adds	r3, #1
 800a564:	72fb      	strb	r3, [r7, #11]
          break;
 800a566:	e021      	b.n	800a5ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00b      	beq.n	800a58c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	7c12      	ldrb	r2, [r2, #16]
 800a580:	f107 0108 	add.w	r1, r7, #8
 800a584:	4610      	mov	r0, r2
 800a586:	4798      	blx	r3
 800a588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a58a:	e00f      	b.n	800a5ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fa49 	bl	800aa26 <USBD_CtlError>
            err++;
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	3301      	adds	r3, #1
 800a598:	72fb      	strb	r3, [r7, #11]
          break;
 800a59a:	e007      	b.n	800a5ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a59c:	6839      	ldr	r1, [r7, #0]
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f000 fa41 	bl	800aa26 <USBD_CtlError>
          err++;
 800a5a4:	7afb      	ldrb	r3, [r7, #11]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a5aa:	bf00      	nop
      }
      break;
 800a5ac:	e037      	b.n	800a61e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	7c1b      	ldrb	r3, [r3, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d109      	bne.n	800a5ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5be:	f107 0208 	add.w	r2, r7, #8
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	4798      	blx	r3
 800a5c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5c8:	e029      	b.n	800a61e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fa2a 	bl	800aa26 <USBD_CtlError>
        err++;
 800a5d2:	7afb      	ldrb	r3, [r7, #11]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	72fb      	strb	r3, [r7, #11]
      break;
 800a5d8:	e021      	b.n	800a61e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	7c1b      	ldrb	r3, [r3, #16]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10d      	bne.n	800a5fe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ea:	f107 0208 	add.w	r2, r7, #8
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	4798      	blx	r3
 800a5f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	2207      	movs	r2, #7
 800a5fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a5fc:	e00f      	b.n	800a61e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fa10 	bl	800aa26 <USBD_CtlError>
        err++;
 800a606:	7afb      	ldrb	r3, [r7, #11]
 800a608:	3301      	adds	r3, #1
 800a60a:	72fb      	strb	r3, [r7, #11]
      break;
 800a60c:	e007      	b.n	800a61e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fa08 	bl	800aa26 <USBD_CtlError>
      err++;
 800a616:	7afb      	ldrb	r3, [r7, #11]
 800a618:	3301      	adds	r3, #1
 800a61a:	72fb      	strb	r3, [r7, #11]
      break;
 800a61c:	bf00      	nop
  }

  if (err != 0U)
 800a61e:	7afb      	ldrb	r3, [r7, #11]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d11e      	bne.n	800a662 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	88db      	ldrh	r3, [r3, #6]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d016      	beq.n	800a65a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a62c:	893b      	ldrh	r3, [r7, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00e      	beq.n	800a650 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	88da      	ldrh	r2, [r3, #6]
 800a636:	893b      	ldrh	r3, [r7, #8]
 800a638:	4293      	cmp	r3, r2
 800a63a:	bf28      	it	cs
 800a63c:	4613      	movcs	r3, r2
 800a63e:	b29b      	uxth	r3, r3
 800a640:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a642:	893b      	ldrh	r3, [r7, #8]
 800a644:	461a      	mov	r2, r3
 800a646:	68f9      	ldr	r1, [r7, #12]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fa69 	bl	800ab20 <USBD_CtlSendData>
 800a64e:	e009      	b.n	800a664 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f9e7 	bl	800aa26 <USBD_CtlError>
 800a658:	e004      	b.n	800a664 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 faba 	bl	800abd4 <USBD_CtlSendStatus>
 800a660:	e000      	b.n	800a664 <USBD_GetDescriptor+0x320>
    return;
 800a662:	bf00      	nop
  }
}
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop

0800a66c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	889b      	ldrh	r3, [r3, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d131      	bne.n	800a6e2 <USBD_SetAddress+0x76>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	88db      	ldrh	r3, [r3, #6]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d12d      	bne.n	800a6e2 <USBD_SetAddress+0x76>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	885b      	ldrh	r3, [r3, #2]
 800a68a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a68c:	d829      	bhi.n	800a6e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	885b      	ldrh	r3, [r3, #2]
 800a692:	b2db      	uxtb	r3, r3
 800a694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a698:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d104      	bne.n	800a6b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f9bc 	bl	800aa26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ae:	e01d      	b.n	800a6ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	7bfa      	ldrb	r2, [r7, #15]
 800a6b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f002 f8b5 	bl	800c82c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fa86 	bl	800abd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d004      	beq.n	800a6d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6d6:	e009      	b.n	800a6ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e0:	e004      	b.n	800a6ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 f99e 	bl	800aa26 <USBD_CtlError>
  }
}
 800a6ea:	bf00      	nop
 800a6ec:	bf00      	nop
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	885b      	ldrh	r3, [r3, #2]
 800a706:	b2da      	uxtb	r2, r3
 800a708:	4b4e      	ldr	r3, [pc, #312]	@ (800a844 <USBD_SetConfig+0x150>)
 800a70a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a70c:	4b4d      	ldr	r3, [pc, #308]	@ (800a844 <USBD_SetConfig+0x150>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d905      	bls.n	800a720 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a714:	6839      	ldr	r1, [r7, #0]
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f985 	bl	800aa26 <USBD_CtlError>
    return USBD_FAIL;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e08c      	b.n	800a83a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d002      	beq.n	800a732 <USBD_SetConfig+0x3e>
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d029      	beq.n	800a784 <USBD_SetConfig+0x90>
 800a730:	e075      	b.n	800a81e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a732:	4b44      	ldr	r3, [pc, #272]	@ (800a844 <USBD_SetConfig+0x150>)
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d020      	beq.n	800a77c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a73a:	4b42      	ldr	r3, [pc, #264]	@ (800a844 <USBD_SetConfig+0x150>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	461a      	mov	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a744:	4b3f      	ldr	r3, [pc, #252]	@ (800a844 <USBD_SetConfig+0x150>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7fe ffb9 	bl	80096c2 <USBD_SetClassConfig>
 800a750:	4603      	mov	r3, r0
 800a752:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d008      	beq.n	800a76c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a75a:	6839      	ldr	r1, [r7, #0]
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f962 	bl	800aa26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2202      	movs	r2, #2
 800a766:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a76a:	e065      	b.n	800a838 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fa31 	bl	800abd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2203      	movs	r2, #3
 800a776:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a77a:	e05d      	b.n	800a838 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 fa29 	bl	800abd4 <USBD_CtlSendStatus>
      break;
 800a782:	e059      	b.n	800a838 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a784:	4b2f      	ldr	r3, [pc, #188]	@ (800a844 <USBD_SetConfig+0x150>)
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d112      	bne.n	800a7b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2202      	movs	r2, #2
 800a790:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a794:	4b2b      	ldr	r3, [pc, #172]	@ (800a844 <USBD_SetConfig+0x150>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	461a      	mov	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a79e:	4b29      	ldr	r3, [pc, #164]	@ (800a844 <USBD_SetConfig+0x150>)
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7fe ffa8 	bl	80096fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fa12 	bl	800abd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a7b0:	e042      	b.n	800a838 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a7b2:	4b24      	ldr	r3, [pc, #144]	@ (800a844 <USBD_SetConfig+0x150>)
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d02a      	beq.n	800a816 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f7fe ff96 	bl	80096fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a7ce:	4b1d      	ldr	r3, [pc, #116]	@ (800a844 <USBD_SetConfig+0x150>)
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a844 <USBD_SetConfig+0x150>)
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7fe ff6f 	bl	80096c2 <USBD_SetClassConfig>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00f      	beq.n	800a80e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a7ee:	6839      	ldr	r1, [r7, #0]
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f918 	bl	800aa26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7fe ff7b 	bl	80096fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2202      	movs	r2, #2
 800a808:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a80c:	e014      	b.n	800a838 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f9e0 	bl	800abd4 <USBD_CtlSendStatus>
      break;
 800a814:	e010      	b.n	800a838 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f9dc 	bl	800abd4 <USBD_CtlSendStatus>
      break;
 800a81c:	e00c      	b.n	800a838 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f900 	bl	800aa26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a826:	4b07      	ldr	r3, [pc, #28]	@ (800a844 <USBD_SetConfig+0x150>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7fe ff64 	bl	80096fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a832:	2303      	movs	r3, #3
 800a834:	73fb      	strb	r3, [r7, #15]
      break;
 800a836:	bf00      	nop
  }

  return ret;
 800a838:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	20000360 	.word	0x20000360

0800a848 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	88db      	ldrh	r3, [r3, #6]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d004      	beq.n	800a864 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f8e2 	bl	800aa26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a862:	e023      	b.n	800a8ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	dc02      	bgt.n	800a876 <USBD_GetConfig+0x2e>
 800a870:	2b00      	cmp	r3, #0
 800a872:	dc03      	bgt.n	800a87c <USBD_GetConfig+0x34>
 800a874:	e015      	b.n	800a8a2 <USBD_GetConfig+0x5a>
 800a876:	2b03      	cmp	r3, #3
 800a878:	d00b      	beq.n	800a892 <USBD_GetConfig+0x4a>
 800a87a:	e012      	b.n	800a8a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3308      	adds	r3, #8
 800a886:	2201      	movs	r2, #1
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f948 	bl	800ab20 <USBD_CtlSendData>
        break;
 800a890:	e00c      	b.n	800a8ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	3304      	adds	r3, #4
 800a896:	2201      	movs	r2, #1
 800a898:	4619      	mov	r1, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f940 	bl	800ab20 <USBD_CtlSendData>
        break;
 800a8a0:	e004      	b.n	800a8ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a8a2:	6839      	ldr	r1, [r7, #0]
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f8be 	bl	800aa26 <USBD_CtlError>
        break;
 800a8aa:	bf00      	nop
}
 800a8ac:	bf00      	nop
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d81e      	bhi.n	800a90a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	88db      	ldrh	r3, [r3, #6]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d004      	beq.n	800a8de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 f8a5 	bl	800aa26 <USBD_CtlError>
        break;
 800a8dc:	e01a      	b.n	800a914 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d005      	beq.n	800a8fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	f043 0202 	orr.w	r2, r3, #2
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	330c      	adds	r3, #12
 800a8fe:	2202      	movs	r2, #2
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f90c 	bl	800ab20 <USBD_CtlSendData>
      break;
 800a908:	e004      	b.n	800a914 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f88a 	bl	800aa26 <USBD_CtlError>
      break;
 800a912:	bf00      	nop
  }
}
 800a914:	bf00      	nop
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	885b      	ldrh	r3, [r3, #2]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d107      	bne.n	800a93e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f94c 	bl	800abd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a93c:	e013      	b.n	800a966 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	885b      	ldrh	r3, [r3, #2]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d10b      	bne.n	800a95e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	889b      	ldrh	r3, [r3, #4]
 800a94a:	0a1b      	lsrs	r3, r3, #8
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f93c 	bl	800abd4 <USBD_CtlSendStatus>
}
 800a95c:	e003      	b.n	800a966 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f860 	bl	800aa26 <USBD_CtlError>
}
 800a966:	bf00      	nop
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	3b01      	subs	r3, #1
 800a982:	2b02      	cmp	r3, #2
 800a984:	d80b      	bhi.n	800a99e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	885b      	ldrh	r3, [r3, #2]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d10c      	bne.n	800a9a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f91c 	bl	800abd4 <USBD_CtlSendStatus>
      }
      break;
 800a99c:	e004      	b.n	800a9a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f840 	bl	800aa26 <USBD_CtlError>
      break;
 800a9a6:	e000      	b.n	800a9aa <USBD_ClrFeature+0x3c>
      break;
 800a9a8:	bf00      	nop
  }
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b084      	sub	sp, #16
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	781a      	ldrb	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	781a      	ldrb	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f7ff fa16 	bl	8009e0e <SWAPBYTE>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff fa09 	bl	8009e0e <SWAPBYTE>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	461a      	mov	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3301      	adds	r3, #1
 800aa08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7ff f9fc 	bl	8009e0e <SWAPBYTE>
 800aa16:	4603      	mov	r3, r0
 800aa18:	461a      	mov	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	80da      	strh	r2, [r3, #6]
}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b082      	sub	sp, #8
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa30:	2180      	movs	r1, #128	@ 0x80
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f001 fe90 	bl	800c758 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aa38:	2100      	movs	r1, #0
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f001 fe8c 	bl	800c758 <USBD_LL_StallEP>
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d042      	beq.n	800aae4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800aa62:	6938      	ldr	r0, [r7, #16]
 800aa64:	f000 f842 	bl	800aaec <USBD_GetLen>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa72:	d808      	bhi.n	800aa86 <USBD_GetString+0x3e>
 800aa74:	6938      	ldr	r0, [r7, #16]
 800aa76:	f000 f839 	bl	800aaec <USBD_GetLen>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	e001      	b.n	800aa8a <USBD_GetString+0x42>
 800aa86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aa8e:	7dfb      	ldrb	r3, [r7, #23]
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	4413      	add	r3, r2
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	7812      	ldrb	r2, [r2, #0]
 800aa98:	701a      	strb	r2, [r3, #0]
  idx++;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	2203      	movs	r2, #3
 800aaa8:	701a      	strb	r2, [r3, #0]
  idx++;
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	3301      	adds	r3, #1
 800aaae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aab0:	e013      	b.n	800aada <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	4413      	add	r3, r2
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	7812      	ldrb	r2, [r2, #0]
 800aabc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3301      	adds	r3, #1
 800aac2:	613b      	str	r3, [r7, #16]
    idx++;
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	3301      	adds	r3, #1
 800aac8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	4413      	add	r3, r2
 800aad0:	2200      	movs	r2, #0
 800aad2:	701a      	strb	r2, [r3, #0]
    idx++;
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	3301      	adds	r3, #1
 800aad8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e7      	bne.n	800aab2 <USBD_GetString+0x6a>
 800aae2:	e000      	b.n	800aae6 <USBD_GetString+0x9e>
    return;
 800aae4:	bf00      	nop
  }
}
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aafc:	e005      	b.n	800ab0a <USBD_GetLen+0x1e>
  {
    len++;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	3301      	adds	r3, #1
 800ab02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3301      	adds	r3, #1
 800ab08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f5      	bne.n	800aafe <USBD_GetLen+0x12>
  }

  return len;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2202      	movs	r2, #2
 800ab30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	2100      	movs	r1, #0
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f001 fe8f 	bl	800c86a <USBD_LL_Transmit>

  return USBD_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	2100      	movs	r1, #0
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f001 fe7e 	bl	800c86a <USBD_LL_Transmit>

  return USBD_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2203      	movs	r2, #3
 800ab88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	2100      	movs	r1, #0
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f001 fe82 	bl	800c8ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	2100      	movs	r1, #0
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f001 fe71 	bl	800c8ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2204      	movs	r2, #4
 800abe0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800abe4:	2300      	movs	r3, #0
 800abe6:	2200      	movs	r2, #0
 800abe8:	2100      	movs	r1, #0
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f001 fe3d 	bl	800c86a <USBD_LL_Transmit>

  return USBD_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b082      	sub	sp, #8
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2205      	movs	r2, #5
 800ac06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2100      	movs	r1, #0
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f001 fe4b 	bl	800c8ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <delayInit>:
#include <API_delay.h>
#include <stm32f4xx_hal.h>

void delayInit(delay_t* delay, tick_t duration){
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
	assert(delay);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d105      	bne.n	800ac3c <delayInit+0x1c>
 800ac30:	4b0a      	ldr	r3, [pc, #40]	@ (800ac5c <delayInit+0x3c>)
 800ac32:	4a0b      	ldr	r2, [pc, #44]	@ (800ac60 <delayInit+0x40>)
 800ac34:	2105      	movs	r1, #5
 800ac36:	480b      	ldr	r0, [pc, #44]	@ (800ac64 <delayInit+0x44>)
 800ac38:	f001 fefe 	bl	800ca38 <__assert_func>

	delay->startTime = HAL_GetTick();
 800ac3c:	f7f6 fa78 	bl	8001130 <HAL_GetTick>
 800ac40:	4602      	mov	r2, r0
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	601a      	str	r2, [r3, #0]
	delay->duration = duration;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	683a      	ldr	r2, [r7, #0]
 800ac4a:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	609a      	str	r2, [r3, #8]
}
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	0800e758 	.word	0x0800e758
 800ac60:	0800ec88 	.word	0x0800ec88
 800ac64:	0800e760 	.word	0x0800e760

0800ac68 <delayRead>:

bool_t delayRead(delay_t* delay){
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
	assert(delay);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d105      	bne.n	800ac82 <delayRead+0x1a>
 800ac76:	4b16      	ldr	r3, [pc, #88]	@ (800acd0 <delayRead+0x68>)
 800ac78:	4a16      	ldr	r2, [pc, #88]	@ (800acd4 <delayRead+0x6c>)
 800ac7a:	210d      	movs	r1, #13
 800ac7c:	4816      	ldr	r0, [pc, #88]	@ (800acd8 <delayRead+0x70>)
 800ac7e:	f001 fedb 	bl	800ca38 <__assert_func>

	tick_t Current_time = HAL_GetTick();
 800ac82:	f7f6 fa55 	bl	8001130 <HAL_GetTick>
 800ac86:	60b8      	str	r0, [r7, #8]
	bool_t Done = false;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73fb      	strb	r3, [r7, #15]

	if(!delay->running){
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d106      	bne.n	800aca2 <delayRead+0x3a>
		delay->startTime = Current_time;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	601a      	str	r2, [r3, #0]
		delay->running = true;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	609a      	str	r2, [r3, #8]
 800aca0:	e011      	b.n	800acc6 <delayRead+0x5e>
	}else{
		// Done is TRUE when the duration has elapsed
		// Done is FALSE when theres time remaining
		Done = (Current_time - delay->startTime) >= delay->duration;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	1ad2      	subs	r2, r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	429a      	cmp	r2, r3
 800acb0:	bf2c      	ite	cs
 800acb2:	2301      	movcs	r3, #1
 800acb4:	2300      	movcc	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]
		// If it's done, it should stop running
		delay->running = !Done;
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
 800acba:	f083 0301 	eor.w	r3, r3, #1
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	461a      	mov	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	609a      	str	r2, [r3, #8]
	}
	return Done;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	0800e758 	.word	0x0800e758
 800acd4:	0800ec94 	.word	0x0800ec94
 800acd8:	0800e760 	.word	0x0800e760

0800acdc <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration ){
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
	assert(delay);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d105      	bne.n	800acf8 <delayWrite+0x1c>
 800acec:	4b06      	ldr	r3, [pc, #24]	@ (800ad08 <delayWrite+0x2c>)
 800acee:	4a07      	ldr	r2, [pc, #28]	@ (800ad0c <delayWrite+0x30>)
 800acf0:	2120      	movs	r1, #32
 800acf2:	4807      	ldr	r0, [pc, #28]	@ (800ad10 <delayWrite+0x34>)
 800acf4:	f001 fea0 	bl	800ca38 <__assert_func>

	delay->duration = duration;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	605a      	str	r2, [r3, #4]
}
 800acfe:	bf00      	nop
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	0800e758 	.word	0x0800e758
 800ad0c:	0800eca0 	.word	0x0800eca0
 800ad10:	0800e760 	.word	0x0800e760

0800ad14 <on_initializing>:
 * @brief Inicializa los periféricos y carga configuración desde EEPROM.
 *
 * Inicia ADC con DMA, TIM2, carga umbrales de EEPROM y prepara drivers para operación.
 */
static void on_initializing(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
    debug_uart_print("INIT: entering on_initializing()\r\n");
 800ad18:	4812      	ldr	r0, [pc, #72]	@ (800ad64 <on_initializing+0x50>)
 800ad1a:	f000 ff4f 	bl	800bbbc <debug_uart_print>
    usb_commands_init();
 800ad1e:	f001 f82b 	bl	800bd78 <usb_commands_init>
    eeprom_init();
 800ad22:	f000 fbc9 	bl	800b4b8 <eeprom_init>
    rtc_init();
 800ad26:	f000 fe73 	bl	800ba10 <rtc_init>
    bt_init();
 800ad2a:	f000 faaf 	bl	800b28c <bt_init>

    // Leer umbrales desde EEPROM o usar valores por defecto si falla
    eeprom_read_thresholds(&threshold_low, &threshold_high);
 800ad2e:	490e      	ldr	r1, [pc, #56]	@ (800ad68 <on_initializing+0x54>)
 800ad30:	480e      	ldr	r0, [pc, #56]	@ (800ad6c <on_initializing+0x58>)
 800ad32:	f000 fc10 	bl	800b556 <eeprom_read_thresholds>

    // Iniciar ADC1 con DMA a 1 kHz
    HAL_TIM_Base_Start(&htim2);
 800ad36:	480e      	ldr	r0, [pc, #56]	@ (800ad70 <on_initializing+0x5c>)
 800ad38:	f7fb f940 	bl	8005fbc <HAL_TIM_Base_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buffer, ADC_BUFFER_SIZE);
 800ad3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad40:	490c      	ldr	r1, [pc, #48]	@ (800ad74 <on_initializing+0x60>)
 800ad42:	480d      	ldr	r0, [pc, #52]	@ (800ad78 <on_initializing+0x64>)
 800ad44:	f7f6 fa68 	bl	8001218 <HAL_ADC_Start_DMA>

    // Iniciar delay no bloqueante de 1 segundo
    delayInit(&measureDelay, INIT_DELAY_MS);
 800ad48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ad4c:	480b      	ldr	r0, [pc, #44]	@ (800ad7c <on_initializing+0x68>)
 800ad4e:	f7ff ff67 	bl	800ac20 <delayInit>
    debug_uart_print("INIT: drivers initialized\r\n");
 800ad52:	480b      	ldr	r0, [pc, #44]	@ (800ad80 <on_initializing+0x6c>)
 800ad54:	f000 ff32 	bl	800bbbc <debug_uart_print>
    application_state = STATE_IDLE;
 800ad58:	4b0a      	ldr	r3, [pc, #40]	@ (800ad84 <on_initializing+0x70>)
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	701a      	strb	r2, [r3, #0]
}
 800ad5e:	bf00      	nop
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	0800e780 	.word	0x0800e780
 800ad68:	20000372 	.word	0x20000372
 800ad6c:	20000370 	.word	0x20000370
 800ad70:	20000280 	.word	0x20000280
 800ad74:	20000374 	.word	0x20000374
 800ad78:	20000184 	.word	0x20000184
 800ad7c:	20000364 	.word	0x20000364
 800ad80:	0800e7a4 	.word	0x0800e7a4
 800ad84:	20000361 	.word	0x20000361

0800ad88 <on_idle>:

/**
 * @brief Estado de espera. Gestiona botones y transición por timeout o USB.
 */
static void on_idle(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
    button_update();
 800ad8c:	f000 face 	bl	800b32c <button_update>

    if (button_was_long_pressed()) {
 800ad90:	f000 fb68 	bl	800b464 <button_was_long_pressed>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d005      	beq.n	800ada6 <on_idle+0x1e>
        eeprom_erase_log();
 800ad9a:	f000 fd27 	bl	800b7ec <eeprom_erase_log>
        usb_cdc_sendString("EEPROM logs erased.\r\n");
 800ad9e:	4811      	ldr	r0, [pc, #68]	@ (800ade4 <on_idle+0x5c>)
 800ada0:	f000 ffd6 	bl	800bd50 <usb_cdc_sendString>
 800ada4:	e009      	b.n	800adba <on_idle+0x32>
    }
    else if (button_was_pressed()) {
 800ada6:	f000 fb49 	bl	800b43c <button_was_pressed>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d004      	beq.n	800adba <on_idle+0x32>
        eeprom_restore_defaults();
 800adb0:	f000 fd4e 	bl	800b850 <eeprom_restore_defaults>
        usb_cdc_sendString("Thresholds restored to defaults.\r\n");
 800adb4:	480c      	ldr	r0, [pc, #48]	@ (800ade8 <on_idle+0x60>)
 800adb6:	f000 ffcb 	bl	800bd50 <usb_cdc_sendString>
    }

    if (delayRead(&measureDelay)) {
 800adba:	480c      	ldr	r0, [pc, #48]	@ (800adec <on_idle+0x64>)
 800adbc:	f7ff ff54 	bl	800ac68 <delayRead>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <on_idle+0x46>
        application_state = STATE_MONITORING;
 800adc6:	4b0a      	ldr	r3, [pc, #40]	@ (800adf0 <on_idle+0x68>)
 800adc8:	2202      	movs	r2, #2
 800adca:	701a      	strb	r2, [r3, #0]
        return;
 800adcc:	e008      	b.n	800ade0 <on_idle+0x58>
    }
    if (usb_commands_pending()) {
 800adce:	f000 ffd9 	bl	800bd84 <usb_commands_pending>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <on_idle+0x58>
        application_state = STATE_USB_COMMAND;
 800add8:	4b05      	ldr	r3, [pc, #20]	@ (800adf0 <on_idle+0x68>)
 800adda:	2203      	movs	r2, #3
 800addc:	701a      	strb	r2, [r3, #0]
        return;
 800adde:	bf00      	nop
    }
}
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	0800e7c0 	.word	0x0800e7c0
 800ade8:	0800e7d8 	.word	0x0800e7d8
 800adec:	20000364 	.word	0x20000364
 800adf0:	20000361 	.word	0x20000361

0800adf4 <on_monitoring>:

/**
 * @brief Clasifica nivel de sonido, reporta y loguea si es alto.
 */
static void on_monitoring(void)
{
 800adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adf6:	b09f      	sub	sp, #124	@ 0x7c
 800adf8:	af06      	add	r7, sp, #24
    char buf[80];
    debug_uart_print("=== ENTER MONITORING ===\r\n");
 800adfa:	4841      	ldr	r0, [pc, #260]	@ (800af00 <on_monitoring+0x10c>)
 800adfc:	f000 fede 	bl	800bbbc <debug_uart_print>
    sprintf(buf, "DBG: Envelope = %u\r\n", envelope);
 800ae00:	4b40      	ldr	r3, [pc, #256]	@ (800af04 <on_monitoring+0x110>)
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	461a      	mov	r2, r3
 800ae08:	f107 0310 	add.w	r3, r7, #16
 800ae0c:	493e      	ldr	r1, [pc, #248]	@ (800af08 <on_monitoring+0x114>)
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f001 ff3a 	bl	800cc88 <siprintf>
    debug_uart_print(buf);
 800ae14:	f107 0310 	add.w	r3, r7, #16
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 fecf 	bl	800bbbc <debug_uart_print>

    if (envelope <= threshold_low) {
 800ae1e:	4b39      	ldr	r3, [pc, #228]	@ (800af04 <on_monitoring+0x110>)
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	4b39      	ldr	r3, [pc, #228]	@ (800af0c <on_monitoring+0x118>)
 800ae26:	881b      	ldrh	r3, [r3, #0]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d806      	bhi.n	800ae3a <on_monitoring+0x46>
        debug_uart_print("DBG: Classification → LOW NOISE\r\n");
 800ae2c:	4838      	ldr	r0, [pc, #224]	@ (800af10 <on_monitoring+0x11c>)
 800ae2e:	f000 fec5 	bl	800bbbc <debug_uart_print>
        bt_send("LOW NOISE\r\n");
 800ae32:	4838      	ldr	r0, [pc, #224]	@ (800af14 <on_monitoring+0x120>)
 800ae34:	f000 fa31 	bl	800b29a <bt_send>
 800ae38:	e053      	b.n	800aee2 <on_monitoring+0xee>
    } else if (envelope < threshold_high) {
 800ae3a:	4b32      	ldr	r3, [pc, #200]	@ (800af04 <on_monitoring+0x110>)
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	4b35      	ldr	r3, [pc, #212]	@ (800af18 <on_monitoring+0x124>)
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d206      	bcs.n	800ae56 <on_monitoring+0x62>
        debug_uart_print("DBG: Classification → MEDIUM NOISE\r\n");
 800ae48:	4834      	ldr	r0, [pc, #208]	@ (800af1c <on_monitoring+0x128>)
 800ae4a:	f000 feb7 	bl	800bbbc <debug_uart_print>
        bt_send("MEDIUM NOISE\r\n");
 800ae4e:	4834      	ldr	r0, [pc, #208]	@ (800af20 <on_monitoring+0x12c>)
 800ae50:	f000 fa23 	bl	800b29a <bt_send>
 800ae54:	e045      	b.n	800aee2 <on_monitoring+0xee>
    } else {
        debug_uart_print("DBG: Classification → HIGH NOISE\r\n");
 800ae56:	4833      	ldr	r0, [pc, #204]	@ (800af24 <on_monitoring+0x130>)
 800ae58:	f000 feb0 	bl	800bbbc <debug_uart_print>
        bt_send("HIGH NOISE\r\n");
 800ae5c:	4832      	ldr	r0, [pc, #200]	@ (800af28 <on_monitoring+0x134>)
 800ae5e:	f000 fa1c 	bl	800b29a <bt_send>

        rtc_datetime_t dt;
        if (rtc_get_datetime(&dt)) {
 800ae62:	f107 0308 	add.w	r3, r7, #8
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 fdf4 	bl	800ba54 <rtc_get_datetime>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d034      	beq.n	800aedc <on_monitoring+0xe8>
            sprintf(buf,
                    "DBG: Logging @ %02u/%02u/20%02u %02u:%02u:%02u, lvl=%u\r\n",
                    dt.day, dt.month, dt.year,
 800ae72:	7afb      	ldrb	r3, [r7, #11]
            sprintf(buf,
 800ae74:	461e      	mov	r6, r3
                    dt.day, dt.month, dt.year,
 800ae76:	7b7b      	ldrb	r3, [r7, #13]
            sprintf(buf,
 800ae78:	469c      	mov	ip, r3
                    dt.day, dt.month, dt.year,
 800ae7a:	7bbb      	ldrb	r3, [r7, #14]
            sprintf(buf,
 800ae7c:	461a      	mov	r2, r3
                    dt.hour, dt.min, dt.sec,
 800ae7e:	7abb      	ldrb	r3, [r7, #10]
            sprintf(buf,
 800ae80:	4619      	mov	r1, r3
                    dt.hour, dt.min, dt.sec,
 800ae82:	7a7b      	ldrb	r3, [r7, #9]
            sprintf(buf,
 800ae84:	461c      	mov	r4, r3
                    dt.hour, dt.min, dt.sec,
 800ae86:	7a3b      	ldrb	r3, [r7, #8]
            sprintf(buf,
 800ae88:	461d      	mov	r5, r3
 800ae8a:	4b1e      	ldr	r3, [pc, #120]	@ (800af04 <on_monitoring+0x110>)
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	f107 0010 	add.w	r0, r7, #16
 800ae94:	9304      	str	r3, [sp, #16]
 800ae96:	9503      	str	r5, [sp, #12]
 800ae98:	9402      	str	r4, [sp, #8]
 800ae9a:	9101      	str	r1, [sp, #4]
 800ae9c:	9200      	str	r2, [sp, #0]
 800ae9e:	4663      	mov	r3, ip
 800aea0:	4632      	mov	r2, r6
 800aea2:	4922      	ldr	r1, [pc, #136]	@ (800af2c <on_monitoring+0x138>)
 800aea4:	f001 fef0 	bl	800cc88 <siprintf>
                    envelope);
            debug_uart_print(buf);
 800aea8:	f107 0310 	add.w	r3, r7, #16
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 fe85 	bl	800bbbc <debug_uart_print>

            eeprom_log_entry_t entry = {
                .year   = dt.year,
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
            eeprom_log_entry_t entry = {
 800aeb4:	703b      	strb	r3, [r7, #0]
                .month  = dt.month,
 800aeb6:	7b7b      	ldrb	r3, [r7, #13]
            eeprom_log_entry_t entry = {
 800aeb8:	707b      	strb	r3, [r7, #1]
                .day    = dt.day,
 800aeba:	7afb      	ldrb	r3, [r7, #11]
            eeprom_log_entry_t entry = {
 800aebc:	70bb      	strb	r3, [r7, #2]
                .hour   = dt.hour,
 800aebe:	7abb      	ldrb	r3, [r7, #10]
            eeprom_log_entry_t entry = {
 800aec0:	70fb      	strb	r3, [r7, #3]
                .minute = dt.min,
 800aec2:	7a7b      	ldrb	r3, [r7, #9]
            eeprom_log_entry_t entry = {
 800aec4:	713b      	strb	r3, [r7, #4]
                .second = dt.sec,
 800aec6:	7a3b      	ldrb	r3, [r7, #8]
            eeprom_log_entry_t entry = {
 800aec8:	717b      	strb	r3, [r7, #5]
 800aeca:	4b0e      	ldr	r3, [pc, #56]	@ (800af04 <on_monitoring+0x110>)
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	b29b      	uxth	r3, r3
 800aed0:	80fb      	strh	r3, [r7, #6]
                .level  = (uint16_t)envelope
            };
            eeprom_log_high_event(&entry);
 800aed2:	463b      	mov	r3, r7
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 fb91 	bl	800b5fc <eeprom_log_high_event>
 800aeda:	e002      	b.n	800aee2 <on_monitoring+0xee>
        } else {
            debug_uart_print("DBG: RTC read failed, skipping log\r\n");
 800aedc:	4814      	ldr	r0, [pc, #80]	@ (800af30 <on_monitoring+0x13c>)
 800aede:	f000 fe6d 	bl	800bbbc <debug_uart_print>
        }
    }

    debug_uart_print("=== EXIT MONITORING ===\r\n");
 800aee2:	4814      	ldr	r0, [pc, #80]	@ (800af34 <on_monitoring+0x140>)
 800aee4:	f000 fe6a 	bl	800bbbc <debug_uart_print>
    delayWrite(&measureDelay, INIT_DELAY_MS);
 800aee8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800aeec:	4812      	ldr	r0, [pc, #72]	@ (800af38 <on_monitoring+0x144>)
 800aeee:	f7ff fef5 	bl	800acdc <delayWrite>
    application_state = STATE_IDLE;
 800aef2:	4b12      	ldr	r3, [pc, #72]	@ (800af3c <on_monitoring+0x148>)
 800aef4:	2201      	movs	r2, #1
 800aef6:	701a      	strb	r2, [r3, #0]
}
 800aef8:	bf00      	nop
 800aefa:	3764      	adds	r7, #100	@ 0x64
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af00:	0800e7fc 	.word	0x0800e7fc
 800af04:	20000574 	.word	0x20000574
 800af08:	0800e818 	.word	0x0800e818
 800af0c:	20000370 	.word	0x20000370
 800af10:	0800e830 	.word	0x0800e830
 800af14:	0800e854 	.word	0x0800e854
 800af18:	20000372 	.word	0x20000372
 800af1c:	0800e860 	.word	0x0800e860
 800af20:	0800e888 	.word	0x0800e888
 800af24:	0800e898 	.word	0x0800e898
 800af28:	0800e8c0 	.word	0x0800e8c0
 800af2c:	0800e8d0 	.word	0x0800e8d0
 800af30:	0800e90c 	.word	0x0800e90c
 800af34:	0800e934 	.word	0x0800e934
 800af38:	20000364 	.word	0x20000364
 800af3c:	20000361 	.word	0x20000361

0800af40 <on_usb_command>:
/**
 * @brief Procesa comandos entrantes desde la interfaz USB CDC.
 */

static void on_usb_command(void)
{
 800af40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af42:	b0b3      	sub	sp, #204	@ 0xcc
 800af44:	af06      	add	r7, sp, #24
    pending_action_t act;
    char buf[64];
    usb_command_t cmd = usb_commands_get(&act);
 800af46:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 ff62 	bl	800be14 <usb_commands_get>
 800af50:	4603      	mov	r3, r0
 800af52:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
    switch (cmd) {
 800af56:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	f200 80e1 	bhi.w	800b122 <on_usb_command+0x1e2>
 800af60:	a201      	add	r2, pc, #4	@ (adr r2, 800af68 <on_usb_command+0x28>)
 800af62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af66:	bf00      	nop
 800af68:	0800af7d 	.word	0x0800af7d
 800af6c:	0800afa3 	.word	0x0800afa3
 800af70:	0800afd9 	.word	0x0800afd9
 800af74:	0800b033 	.word	0x0800b033
 800af78:	0800b055 	.word	0x0800b055
        case CMD_GET_THRESH: {
            snprintf(buf, sizeof(buf), "TH_LOW=%u TH_HIGH=%u\r\n", threshold_low, threshold_high);
 800af7c:	4b6e      	ldr	r3, [pc, #440]	@ (800b138 <on_usb_command+0x1f8>)
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	461a      	mov	r2, r3
 800af82:	4b6e      	ldr	r3, [pc, #440]	@ (800b13c <on_usb_command+0x1fc>)
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	4613      	mov	r3, r2
 800af8e:	4a6c      	ldr	r2, [pc, #432]	@ (800b140 <on_usb_command+0x200>)
 800af90:	2140      	movs	r1, #64	@ 0x40
 800af92:	f001 fe43 	bl	800cc1c <sniprintf>
            usb_cdc_sendString(buf);
 800af96:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 fed8 	bl	800bd50 <usb_cdc_sendString>
            break;
 800afa0:	e0c2      	b.n	800b128 <on_usb_command+0x1e8>
        }
        case CMD_SET_THRESH: {
            if (eeprom_write_thresholds(act.low, act.high)) {
 800afa2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800afa6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800afaa:	4611      	mov	r1, r2
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fb01 	bl	800b5b4 <eeprom_write_thresholds>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00b      	beq.n	800afd0 <on_usb_command+0x90>
                threshold_low  = act.low;
 800afb8:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 800afbc:	4b5e      	ldr	r3, [pc, #376]	@ (800b138 <on_usb_command+0x1f8>)
 800afbe:	801a      	strh	r2, [r3, #0]
                threshold_high = act.high;
 800afc0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800afc4:	4b5d      	ldr	r3, [pc, #372]	@ (800b13c <on_usb_command+0x1fc>)
 800afc6:	801a      	strh	r2, [r3, #0]
                usb_cdc_sendString("Thresholds updated\r\n");
 800afc8:	485e      	ldr	r0, [pc, #376]	@ (800b144 <on_usb_command+0x204>)
 800afca:	f000 fec1 	bl	800bd50 <usb_cdc_sendString>
            } else {
                usb_cdc_sendString("EEPROM write error\r\n");
            }
            break;
 800afce:	e0ab      	b.n	800b128 <on_usb_command+0x1e8>
                usb_cdc_sendString("EEPROM write error\r\n");
 800afd0:	485d      	ldr	r0, [pc, #372]	@ (800b148 <on_usb_command+0x208>)
 800afd2:	f000 febd 	bl	800bd50 <usb_cdc_sendString>
            break;
 800afd6:	e0a7      	b.n	800b128 <on_usb_command+0x1e8>
        }
        case CMD_GET_TIME: {
            rtc_datetime_t dt;
            if (rtc_get_datetime(&dt)) {
 800afd8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 fd39 	bl	800ba54 <rtc_get_datetime>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d020      	beq.n	800b02a <on_usb_command+0xea>
                snprintf(buf, sizeof(buf),
                         "%02u/%02u/20%02u %02u:%02u:%02u\r\n",
                         dt.date, dt.month, dt.year,
 800afe8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
                snprintf(buf, sizeof(buf),
 800afec:	461e      	mov	r6, r3
                         dt.date, dt.month, dt.year,
 800afee:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800aff2:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
                         dt.hour, dt.min, dt.sec);
 800aff6:	f897 105a 	ldrb.w	r1, [r7, #90]	@ 0x5a
 800affa:	f897 0059 	ldrb.w	r0, [r7, #89]	@ 0x59
                snprintf(buf, sizeof(buf),
 800affe:	4604      	mov	r4, r0
                         dt.hour, dt.min, dt.sec);
 800b000:	f897 0058 	ldrb.w	r0, [r7, #88]	@ 0x58
                snprintf(buf, sizeof(buf),
 800b004:	4605      	mov	r5, r0
 800b006:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800b00a:	9504      	str	r5, [sp, #16]
 800b00c:	9403      	str	r4, [sp, #12]
 800b00e:	9102      	str	r1, [sp, #8]
 800b010:	9201      	str	r2, [sp, #4]
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	4633      	mov	r3, r6
 800b016:	4a4d      	ldr	r2, [pc, #308]	@ (800b14c <on_usb_command+0x20c>)
 800b018:	2140      	movs	r1, #64	@ 0x40
 800b01a:	f001 fdff 	bl	800cc1c <sniprintf>
                usb_cdc_sendString(buf);
 800b01e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fe94 	bl	800bd50 <usb_cdc_sendString>
            } else {
                usb_cdc_sendString("RTC: ND\r\n");
            }
            break;
 800b028:	e07e      	b.n	800b128 <on_usb_command+0x1e8>
                usb_cdc_sendString("RTC: ND\r\n");
 800b02a:	4849      	ldr	r0, [pc, #292]	@ (800b150 <on_usb_command+0x210>)
 800b02c:	f000 fe90 	bl	800bd50 <usb_cdc_sendString>
            break;
 800b030:	e07a      	b.n	800b128 <on_usb_command+0x1e8>
        }
        case CMD_SET_TIME: {
            if (rtc_set_datetime(&act.dt)) {
 800b032:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800b036:	3306      	adds	r3, #6
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 fd6d 	bl	800bb18 <rtc_set_datetime>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d003      	beq.n	800b04c <on_usb_command+0x10c>
                usb_cdc_sendString("RTC updated\r\n");
 800b044:	4843      	ldr	r0, [pc, #268]	@ (800b154 <on_usb_command+0x214>)
 800b046:	f000 fe83 	bl	800bd50 <usb_cdc_sendString>
            } else {
                usb_cdc_sendString("RTC write error\r\n");
            }
            break;
 800b04a:	e06d      	b.n	800b128 <on_usb_command+0x1e8>
                usb_cdc_sendString("RTC write error\r\n");
 800b04c:	4842      	ldr	r0, [pc, #264]	@ (800b158 <on_usb_command+0x218>)
 800b04e:	f000 fe7f 	bl	800bd50 <usb_cdc_sendString>
            break;
 800b052:	e069      	b.n	800b128 <on_usb_command+0x1e8>
        }
        case CMD_GET_LOG: {
            eeprom_log_entry_t entries[EEPROM_LOG_MAX_ENTRIES];
            uint8_t count;
            if (eeprom_read_log(entries, EEPROM_LOG_MAX_ENTRIES, &count)) {
 800b054:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800b058:	1d3b      	adds	r3, r7, #4
 800b05a:	210a      	movs	r1, #10
 800b05c:	4618      	mov	r0, r3
 800b05e:	f000 fb47 	bl	800b6f0 <eeprom_read_log>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d058      	beq.n	800b11a <on_usb_command+0x1da>
                for (uint8_t i = 0; i < count; i++) {
 800b068:	2300      	movs	r3, #0
 800b06a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 800b06e:	e04d      	b.n	800b10c <on_usb_command+0x1cc>
                    snprintf(buf, sizeof(buf),
                             "%02u/%02u/20%02u %02u:%02u:%02u Lvl=%u\r\n",
                             entries[i].day,
 800b070:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	33b0      	adds	r3, #176	@ 0xb0
 800b078:	443b      	add	r3, r7
 800b07a:	f813 3caa 	ldrb.w	r3, [r3, #-170]
                    snprintf(buf, sizeof(buf),
 800b07e:	469c      	mov	ip, r3
                             entries[i].month,
 800b080:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800b084:	00db      	lsls	r3, r3, #3
 800b086:	33b0      	adds	r3, #176	@ 0xb0
 800b088:	443b      	add	r3, r7
 800b08a:	f813 3cab 	ldrb.w	r3, [r3, #-171]
                    snprintf(buf, sizeof(buf),
 800b08e:	461a      	mov	r2, r3
                             entries[i].year,
 800b090:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	33b0      	adds	r3, #176	@ 0xb0
 800b098:	443b      	add	r3, r7
 800b09a:	f813 3cac 	ldrb.w	r3, [r3, #-172]
                    snprintf(buf, sizeof(buf),
 800b09e:	4619      	mov	r1, r3
                             entries[i].hour,
 800b0a0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	33b0      	adds	r3, #176	@ 0xb0
 800b0a8:	443b      	add	r3, r7
 800b0aa:	f813 3ca9 	ldrb.w	r3, [r3, #-169]
                    snprintf(buf, sizeof(buf),
 800b0ae:	461c      	mov	r4, r3
                             entries[i].minute,
 800b0b0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800b0b4:	00db      	lsls	r3, r3, #3
 800b0b6:	33b0      	adds	r3, #176	@ 0xb0
 800b0b8:	443b      	add	r3, r7
 800b0ba:	f813 3ca8 	ldrb.w	r3, [r3, #-168]
                    snprintf(buf, sizeof(buf),
 800b0be:	461d      	mov	r5, r3
                             entries[i].second,
 800b0c0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800b0c4:	00db      	lsls	r3, r3, #3
 800b0c6:	33b0      	adds	r3, #176	@ 0xb0
 800b0c8:	443b      	add	r3, r7
 800b0ca:	f813 3ca7 	ldrb.w	r3, [r3, #-167]
                    snprintf(buf, sizeof(buf),
 800b0ce:	461e      	mov	r6, r3
                             entries[i].level);
 800b0d0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800b0d4:	00db      	lsls	r3, r3, #3
 800b0d6:	33b0      	adds	r3, #176	@ 0xb0
 800b0d8:	443b      	add	r3, r7
 800b0da:	f833 3ca6 	ldrh.w	r3, [r3, #-166]
                    snprintf(buf, sizeof(buf),
 800b0de:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800b0e2:	9305      	str	r3, [sp, #20]
 800b0e4:	9604      	str	r6, [sp, #16]
 800b0e6:	9503      	str	r5, [sp, #12]
 800b0e8:	9402      	str	r4, [sp, #8]
 800b0ea:	9101      	str	r1, [sp, #4]
 800b0ec:	9200      	str	r2, [sp, #0]
 800b0ee:	4663      	mov	r3, ip
 800b0f0:	4a1a      	ldr	r2, [pc, #104]	@ (800b15c <on_usb_command+0x21c>)
 800b0f2:	2140      	movs	r1, #64	@ 0x40
 800b0f4:	f001 fd92 	bl	800cc1c <sniprintf>
                    usb_cdc_sendString(buf);
 800b0f8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 fe27 	bl	800bd50 <usb_cdc_sendString>
                for (uint8_t i = 0; i < count; i++) {
 800b102:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800b106:	3301      	adds	r3, #1
 800b108:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 800b10c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b110:	f897 20af 	ldrb.w	r2, [r7, #175]	@ 0xaf
 800b114:	429a      	cmp	r2, r3
 800b116:	d3ab      	bcc.n	800b070 <on_usb_command+0x130>
                }
            } else {
                usb_cdc_sendString("Log empty or error\r\n");
            }
            break;
 800b118:	e006      	b.n	800b128 <on_usb_command+0x1e8>
                usb_cdc_sendString("Log empty or error\r\n");
 800b11a:	4811      	ldr	r0, [pc, #68]	@ (800b160 <on_usb_command+0x220>)
 800b11c:	f000 fe18 	bl	800bd50 <usb_cdc_sendString>
            break;
 800b120:	e002      	b.n	800b128 <on_usb_command+0x1e8>
        }
        case CMD_HELP:
        default:
            usb_commands_print_help();
 800b122:	f000 fedf 	bl	800bee4 <usb_commands_print_help>
            break;
 800b126:	bf00      	nop
    }
    application_state = STATE_IDLE;
 800b128:	4b0e      	ldr	r3, [pc, #56]	@ (800b164 <on_usb_command+0x224>)
 800b12a:	2201      	movs	r2, #1
 800b12c:	701a      	strb	r2, [r3, #0]
}
 800b12e:	bf00      	nop
 800b130:	37b4      	adds	r7, #180	@ 0xb4
 800b132:	46bd      	mov	sp, r7
 800b134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b136:	bf00      	nop
 800b138:	20000370 	.word	0x20000370
 800b13c:	20000372 	.word	0x20000372
 800b140:	0800e950 	.word	0x0800e950
 800b144:	0800e968 	.word	0x0800e968
 800b148:	0800e980 	.word	0x0800e980
 800b14c:	0800e998 	.word	0x0800e998
 800b150:	0800e9bc 	.word	0x0800e9bc
 800b154:	0800e9c8 	.word	0x0800e9c8
 800b158:	0800e9d8 	.word	0x0800e9d8
 800b15c:	0800e9ec 	.word	0x0800e9ec
 800b160:	0800ea18 	.word	0x0800ea18
 800b164:	20000361 	.word	0x20000361

0800b168 <appUpdate>:
 *
 * Lazo principal que evalúa el estado de la aplicación y despacha a los handlers correspondientes.
 * Esta función bloquea y debe ser llamada una sola vez desde main().
 */
void appUpdate(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	af00      	add	r7, sp, #0
    while (1) {
        switch (application_state) {
 800b16c:	4b0e      	ldr	r3, [pc, #56]	@ (800b1a8 <appUpdate+0x40>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	2b03      	cmp	r3, #3
 800b172:	d8fb      	bhi.n	800b16c <appUpdate+0x4>
 800b174:	a201      	add	r2, pc, #4	@ (adr r2, 800b17c <appUpdate+0x14>)
 800b176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b17a:	bf00      	nop
 800b17c:	0800b18d 	.word	0x0800b18d
 800b180:	0800b193 	.word	0x0800b193
 800b184:	0800b199 	.word	0x0800b199
 800b188:	0800b19f 	.word	0x0800b19f
            case STATE_INITIALIZING:
                on_initializing();
 800b18c:	f7ff fdc2 	bl	800ad14 <on_initializing>
                break;
 800b190:	e009      	b.n	800b1a6 <appUpdate+0x3e>

            case STATE_IDLE:
                on_idle();
 800b192:	f7ff fdf9 	bl	800ad88 <on_idle>
                break;
 800b196:	e006      	b.n	800b1a6 <appUpdate+0x3e>

            case STATE_MONITORING:
                on_monitoring();
 800b198:	f7ff fe2c 	bl	800adf4 <on_monitoring>
                break;
 800b19c:	e003      	b.n	800b1a6 <appUpdate+0x3e>

            case STATE_USB_COMMAND:
                on_usb_command();
 800b19e:	f7ff fecf 	bl	800af40 <on_usb_command>
                break;
 800b1a2:	bf00      	nop
 800b1a4:	e7e2      	b.n	800b16c <appUpdate+0x4>
        switch (application_state) {
 800b1a6:	e7e1      	b.n	800b16c <appUpdate+0x4>
 800b1a8:	20000361 	.word	0x20000361

0800b1ac <HAL_ADC_ConvCpltCallback>:
 *
 * @param hadc Puntero al handler del ADC.
 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08a      	sub	sp, #40	@ 0x28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
    // Verifico que la interrupción venga del ADC1
    if (hadc->Instance != ADC1){
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a30      	ldr	r2, [pc, #192]	@ (800b27c <HAL_ADC_ConvCpltCallback+0xd0>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d15a      	bne.n	800b274 <HAL_ADC_ConvCpltCallback+0xc8>
        return;
    }

    // 1) Calcular el nivel de offset (DC bias) promedio
    uint32_t sum = 0;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	623b      	str	r3, [r7, #32]
 800b1c6:	e00a      	b.n	800b1de <HAL_ADC_ConvCpltCallback+0x32>
        sum += adc_dma_buffer[i];
 800b1c8:	4a2d      	ldr	r2, [pc, #180]	@ (800b280 <HAL_ADC_ConvCpltCallback+0xd4>)
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d4:	4413      	add	r3, r2
 800b1d6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	623b      	str	r3, [r7, #32]
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	2bff      	cmp	r3, #255	@ 0xff
 800b1e2:	ddf1      	ble.n	800b1c8 <HAL_ADC_ConvCpltCallback+0x1c>
    }
    float bias = (float)sum / (float)ADC_BUFFER_SIZE;
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b1ee:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800b284 <HAL_ADC_ConvCpltCallback+0xd8>
 800b1f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b1f6:	edc7 7a05 	vstr	s15, [r7, #20]

    // 2) Calcular la suma de los cuadrados de la señal centrada en el bias
    uint32_t sum_sq = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b1fe:	2300      	movs	r3, #0
 800b200:	61bb      	str	r3, [r7, #24]
 800b202:	e01b      	b.n	800b23c <HAL_ADC_ConvCpltCallback+0x90>
        float d = (float)adc_dma_buffer[i] - bias;
 800b204:	4a1e      	ldr	r2, [pc, #120]	@ (800b280 <HAL_ADC_ConvCpltCallback+0xd4>)
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b214:	edd7 7a05 	vldr	s15, [r7, #20]
 800b218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b21c:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_sq += (uint32_t)(d * d);
 800b220:	edd7 7a03 	vldr	s15, [r7, #12]
 800b224:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b22c:	ee17 2a90 	vmov	r2, s15
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	4413      	add	r3, r2
 800b234:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	3301      	adds	r3, #1
 800b23a:	61bb      	str	r3, [r7, #24]
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	2bff      	cmp	r3, #255	@ 0xff
 800b240:	dde0      	ble.n	800b204 <HAL_ADC_ConvCpltCallback+0x58>
    }

    // 3) Obtener RMS: raíz cuadrada del promedio de los cuadrados
    float rms = sqrtf((float)sum_sq / (float)ADC_BUFFER_SIZE);
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	ee07 3a90 	vmov	s15, r3
 800b248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800b284 <HAL_ADC_ConvCpltCallback+0xd8>
 800b250:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b254:	eeb0 0a47 	vmov.f32	s0, s14
 800b258:	f003 fa50 	bl	800e6fc <sqrtf>
 800b25c:	ed87 0a04 	vstr	s0, [r7, #16]

    // 4) Guardar el valor RMS en la variable global envelope
    envelope = rms;
 800b260:	edd7 7a04 	vldr	s15, [r7, #16]
 800b264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b268:	ee17 3a90 	vmov	r3, s15
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	4b06      	ldr	r3, [pc, #24]	@ (800b288 <HAL_ADC_ConvCpltCallback+0xdc>)
 800b270:	801a      	strh	r2, [r3, #0]
 800b272:	e000      	b.n	800b276 <HAL_ADC_ConvCpltCallback+0xca>
        return;
 800b274:	bf00      	nop
}
 800b276:	3728      	adds	r7, #40	@ 0x28
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	40012000 	.word	0x40012000
 800b280:	20000374 	.word	0x20000374
 800b284:	43800000 	.word	0x43800000
 800b288:	20000574 	.word	0x20000574

0800b28c <bt_init>:
#include <string.h>

/**
 * Inicializa el módulo Bluetooth llamando al port específico.
 */
bool_t bt_init(void) {
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
    return port_bt_init();
 800b290:	f000 f822 	bl	800b2d8 <port_bt_init>
 800b294:	4603      	mov	r3, r0
}
 800b296:	4618      	mov	r0, r3
 800b298:	bd80      	pop	{r7, pc}

0800b29a <bt_send>:

/**
 * Envía un string como mensaje Bluetooth usando la función raw.
 * Internamente convierte el string a un buffer de bytes.
 */
bool_t bt_send(const char* msg) {
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b082      	sub	sp, #8
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
    return bt_send_raw((const uint8_t*)msg, strlen(msg));
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7f4 ffbe 	bl	8000224 <strlen>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f805 	bl	800b2bc <bt_send_raw>
 800b2b2:	4603      	mov	r3, r0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <bt_send_raw>:

/**
 * Envía datos crudos por Bluetooth usando la función del port.
 */
bool_t bt_send_raw(const uint8_t* data, size_t len) {
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
    return port_bt_send(data, len);
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 f815 	bl	800b2f8 <port_bt_send>
 800b2ce:	4603      	mov	r3, r0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3708      	adds	r7, #8
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <port_bt_init>:
/**
 * Inicializa el periférico UART utilizado para Bluetooth.
 *
 * @return true si HAL_UART_Init devuelve HAL_OK
 */
bool_t port_bt_init(void) {
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	af00      	add	r7, sp, #0
    return HAL_UART_Init(&huart1) == HAL_OK;
 800b2dc:	4805      	ldr	r0, [pc, #20]	@ (800b2f4 <port_bt_init+0x1c>)
 800b2de:	f7fb f95f 	bl	80065a0 <HAL_UART_Init>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bf0c      	ite	eq
 800b2e8:	2301      	moveq	r3, #1
 800b2ea:	2300      	movne	r3, #0
 800b2ec:	b2db      	uxtb	r3, r3
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	200002c8 	.word	0x200002c8

0800b2f8 <port_bt_send>:
 *
 * @param data Buffer con los datos a enviar.
 * @param len Cantidad de bytes del buffer.
 * @return true si la transmisión fue exitosa.
 */
bool_t port_bt_send(const uint8_t* data, size_t len) {
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY) == HAL_OK;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	b29a      	uxth	r2, r3
 800b306:	f04f 33ff 	mov.w	r3, #4294967295
 800b30a:	6879      	ldr	r1, [r7, #4]
 800b30c:	4806      	ldr	r0, [pc, #24]	@ (800b328 <port_bt_send+0x30>)
 800b30e:	f7fb f997 	bl	8006640 <HAL_UART_Transmit>
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	bf0c      	ite	eq
 800b318:	2301      	moveq	r3, #1
 800b31a:	2300      	movne	r3, #0
 800b31c:	b2db      	uxtb	r3, r3
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	200002c8 	.word	0x200002c8

0800b32c <button_update>:
/**
 * Actualiza la máquina de estados del botón.
 *
 * Se encarga del manejo de rebotes y detección de pulsaciones largas o cortas.
 */
void button_update(void) {
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
    bool_t phys = port_button_read(); // Lectura física del botón
 800b332:	f000 f8ab 	bl	800b48c <port_button_read>
 800b336:	4603      	mov	r3, r0
 800b338:	71fb      	strb	r3, [r7, #7]

    switch(state) {
 800b33a:	4b3b      	ldr	r3, [pc, #236]	@ (800b428 <button_update+0xfc>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d86e      	bhi.n	800b420 <button_update+0xf4>
 800b342:	a201      	add	r2, pc, #4	@ (adr r2, 800b348 <button_update+0x1c>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b359 	.word	0x0800b359
 800b34c:	0800b36f 	.word	0x0800b36f
 800b350:	0800b3a1 	.word	0x0800b3a1
 800b354:	0800b3dd 	.word	0x0800b3dd
        case UP:
            if (phys) {
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d059      	beq.n	800b412 <button_update+0xe6>
                state = FALLING;
 800b35e:	4b32      	ldr	r3, [pc, #200]	@ (800b428 <button_update+0xfc>)
 800b360:	2201      	movs	r2, #1
 800b362:	701a      	strb	r2, [r3, #0]
                delayInit(&dbDelay, DEBOUNCE_MS);
 800b364:	2128      	movs	r1, #40	@ 0x28
 800b366:	4831      	ldr	r0, [pc, #196]	@ (800b42c <button_update+0x100>)
 800b368:	f7ff fc5a 	bl	800ac20 <delayInit>
            }
            break;
 800b36c:	e051      	b.n	800b412 <button_update+0xe6>

        case FALLING:
            if (delayRead(&dbDelay)) {
 800b36e:	482f      	ldr	r0, [pc, #188]	@ (800b42c <button_update+0x100>)
 800b370:	f7ff fc7a 	bl	800ac68 <delayRead>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d04d      	beq.n	800b416 <button_update+0xea>
                if (phys) {
 800b37a:	79fb      	ldrb	r3, [r7, #7]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00b      	beq.n	800b398 <button_update+0x6c>
                    state = DOWN;
 800b380:	4b29      	ldr	r3, [pc, #164]	@ (800b428 <button_update+0xfc>)
 800b382:	2202      	movs	r2, #2
 800b384:	701a      	strb	r2, [r3, #0]
                    delayInit(&holdDelay, HOLD_MS); // Comenzar conteo para pulsación larga
 800b386:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b38a:	4829      	ldr	r0, [pc, #164]	@ (800b430 <button_update+0x104>)
 800b38c:	f7ff fc48 	bl	800ac20 <delayInit>
                    longFlag = false;
 800b390:	4b28      	ldr	r3, [pc, #160]	@ (800b434 <button_update+0x108>)
 800b392:	2200      	movs	r2, #0
 800b394:	701a      	strb	r2, [r3, #0]
                } else {
                    state = UP; // Falsa alarma
                }
            }
            break;
 800b396:	e03e      	b.n	800b416 <button_update+0xea>
                    state = UP; // Falsa alarma
 800b398:	4b23      	ldr	r3, [pc, #140]	@ (800b428 <button_update+0xfc>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	701a      	strb	r2, [r3, #0]
            break;
 800b39e:	e03a      	b.n	800b416 <button_update+0xea>

        case DOWN:
            if (delayRead(&holdDelay) && !longFlag) {
 800b3a0:	4823      	ldr	r0, [pc, #140]	@ (800b430 <button_update+0x104>)
 800b3a2:	f7ff fc61 	bl	800ac68 <delayRead>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d009      	beq.n	800b3c0 <button_update+0x94>
 800b3ac:	4b21      	ldr	r3, [pc, #132]	@ (800b434 <button_update+0x108>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	f083 0301 	eor.w	r3, r3, #1
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d002      	beq.n	800b3c0 <button_update+0x94>
                longFlag = true; // Se detecta pulsación larga
 800b3ba:	4b1e      	ldr	r3, [pc, #120]	@ (800b434 <button_update+0x108>)
 800b3bc:	2201      	movs	r2, #1
 800b3be:	701a      	strb	r2, [r3, #0]
            }
            if (!phys) {
 800b3c0:	79fb      	ldrb	r3, [r7, #7]
 800b3c2:	f083 0301 	eor.w	r3, r3, #1
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d026      	beq.n	800b41a <button_update+0xee>
                state = RISING;
 800b3cc:	4b16      	ldr	r3, [pc, #88]	@ (800b428 <button_update+0xfc>)
 800b3ce:	2203      	movs	r2, #3
 800b3d0:	701a      	strb	r2, [r3, #0]
                delayInit(&dbDelay, DEBOUNCE_MS);
 800b3d2:	2128      	movs	r1, #40	@ 0x28
 800b3d4:	4815      	ldr	r0, [pc, #84]	@ (800b42c <button_update+0x100>)
 800b3d6:	f7ff fc23 	bl	800ac20 <delayInit>
            }
            break;
 800b3da:	e01e      	b.n	800b41a <button_update+0xee>

        case RISING:
            if (delayRead(&dbDelay)) {
 800b3dc:	4813      	ldr	r0, [pc, #76]	@ (800b42c <button_update+0x100>)
 800b3de:	f7ff fc43 	bl	800ac68 <delayRead>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d01a      	beq.n	800b41e <button_update+0xf2>
                if (!phys) {
 800b3e8:	79fb      	ldrb	r3, [r7, #7]
 800b3ea:	f083 0301 	eor.w	r3, r3, #1
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00a      	beq.n	800b40a <button_update+0xde>
                    if (longFlag) {
 800b3f4:	4b0f      	ldr	r3, [pc, #60]	@ (800b434 <button_update+0x108>)
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d102      	bne.n	800b402 <button_update+0xd6>
                        // No se genera shortFlag en caso de long
                    } else {
                        shortFlag = true; // Pulsación corta válida
 800b3fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b438 <button_update+0x10c>)
 800b3fe:	2201      	movs	r2, #1
 800b400:	701a      	strb	r2, [r3, #0]
                    }
                    state = UP;
 800b402:	4b09      	ldr	r3, [pc, #36]	@ (800b428 <button_update+0xfc>)
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
                } else {
                    state = DOWN; // Rebote, seguir abajo
                }
            }
            break;
 800b408:	e009      	b.n	800b41e <button_update+0xf2>
                    state = DOWN; // Rebote, seguir abajo
 800b40a:	4b07      	ldr	r3, [pc, #28]	@ (800b428 <button_update+0xfc>)
 800b40c:	2202      	movs	r2, #2
 800b40e:	701a      	strb	r2, [r3, #0]
            break;
 800b410:	e005      	b.n	800b41e <button_update+0xf2>
            break;
 800b412:	bf00      	nop
 800b414:	e004      	b.n	800b420 <button_update+0xf4>
            break;
 800b416:	bf00      	nop
 800b418:	e002      	b.n	800b420 <button_update+0xf4>
            break;
 800b41a:	bf00      	nop
 800b41c:	e000      	b.n	800b420 <button_update+0xf4>
            break;
 800b41e:	bf00      	nop
    }
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20000576 	.word	0x20000576
 800b42c:	2000057c 	.word	0x2000057c
 800b430:	20000588 	.word	0x20000588
 800b434:	20000578 	.word	0x20000578
 800b438:	20000577 	.word	0x20000577

0800b43c <button_was_pressed>:

/**
 * Verifica si hubo una pulsación corta desde la última consulta.
 */
bool_t button_was_pressed(void) {
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
    if (shortFlag) {
 800b440:	4b07      	ldr	r3, [pc, #28]	@ (800b460 <button_was_pressed+0x24>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d004      	beq.n	800b452 <button_was_pressed+0x16>
        shortFlag = false;
 800b448:	4b05      	ldr	r3, [pc, #20]	@ (800b460 <button_was_pressed+0x24>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	701a      	strb	r2, [r3, #0]
        return true;
 800b44e:	2301      	movs	r3, #1
 800b450:	e000      	b.n	800b454 <button_was_pressed+0x18>
    }
    return false;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	20000577 	.word	0x20000577

0800b464 <button_was_long_pressed>:

/**
 * Verifica si hubo una pulsación larga desde la última consulta.
 */
bool_t button_was_long_pressed(void) {
 800b464:	b480      	push	{r7}
 800b466:	af00      	add	r7, sp, #0
    if (longFlag) {
 800b468:	4b07      	ldr	r3, [pc, #28]	@ (800b488 <button_was_long_pressed+0x24>)
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d004      	beq.n	800b47a <button_was_long_pressed+0x16>
        longFlag = false;
 800b470:	4b05      	ldr	r3, [pc, #20]	@ (800b488 <button_was_long_pressed+0x24>)
 800b472:	2200      	movs	r2, #0
 800b474:	701a      	strb	r2, [r3, #0]
        return true;
 800b476:	2301      	movs	r3, #1
 800b478:	e000      	b.n	800b47c <button_was_long_pressed+0x18>
    }
    return false;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	20000578 	.word	0x20000578

0800b48c <port_button_read>:
 * Utiliza HAL_GPIO_ReadPin para leer el pin físico del botón. Si el botón es activo-bajo,
 * invierte la lógica para que devuelva true cuando esté presionado.
 *
 * @return true si el botón está presionado, false si está liberado.
 */
bool_t port_button_read(void) {
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
    // Leemos el estado lógico del pin del botón
    GPIO_PinState pin_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 800b492:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b496:	4807      	ldr	r0, [pc, #28]	@ (800b4b4 <port_button_read+0x28>)
 800b498:	f7f7 f93a 	bl	8002710 <HAL_GPIO_ReadPin>
 800b49c:	4603      	mov	r3, r0
 800b49e:	71fb      	strb	r3, [r7, #7]

    // Si el botón es activo-bajo (pull-down), consideramos presionado cuando el pin está en bajo (RESET)
    // Si fuera activo-alto, consideraríamos presionado cuando el pin esté en alto (SET)
    // El operador ternario permite devolver directamente true o false según esta lógica
    return BUTTON_PULL_LOW ? (pin_state == GPIO_PIN_RESET) : (pin_state == GPIO_PIN_SET);
 800b4a0:	79fb      	ldrb	r3, [r7, #7]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	bf0c      	ite	eq
 800b4a6:	2301      	moveq	r3, #1
 800b4a8:	2300      	movne	r3, #0
 800b4aa:	b2db      	uxtb	r3, r3
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	40020800 	.word	0x40020800

0800b4b8 <eeprom_init>:
#include "eeprom.h"
#include "port_eeprom.h"

// ─── Inicialización de EEPROM ─────────────────────────────────────────────
bool_t eeprom_init(void)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
    uint8_t sig;

    // 1) Leemos la firma almacenada
    if (!eeprom_read(EEPROM_SIGNATURE_ADDR, &sig, 1)) {
 800b4be:	f107 030f 	add.w	r3, r7, #15
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	f000 f9cc 	bl	800b864 <eeprom_read>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f083 0301 	eor.w	r3, r3, #1
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <eeprom_init+0x24>
        return false;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e038      	b.n	800b54e <eeprom_init+0x96>
    }

    // 2) Si la firma no coincide, es la primera vez → inicializamos
    if (sig != EEPROM_SIGNATURE_VALUE) {
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	2ba5      	cmp	r3, #165	@ 0xa5
 800b4e0:	d034      	beq.n	800b54c <eeprom_init+0x94>
        // ─── Escribimos firma + thresholds por defecto ───
        uint8_t buf[1 + 2*2];
        buf[0] = EEPROM_SIGNATURE_VALUE;
 800b4e2:	23a5      	movs	r3, #165	@ 0xa5
 800b4e4:	723b      	strb	r3, [r7, #8]
        buf[1] = (uint8_t)(DEFAULT_THRESHOLD_LOW  & 0xFF);
 800b4e6:	230a      	movs	r3, #10
 800b4e8:	727b      	strb	r3, [r7, #9]
        buf[2] = (uint8_t)(DEFAULT_THRESHOLD_LOW >> 8);
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	72bb      	strb	r3, [r7, #10]
        buf[3] = (uint8_t)(DEFAULT_THRESHOLD_HIGH & 0xFF);
 800b4ee:	2314      	movs	r3, #20
 800b4f0:	72fb      	strb	r3, [r7, #11]
        buf[4] = (uint8_t)(DEFAULT_THRESHOLD_HIGH >> 8);
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	733b      	strb	r3, [r7, #12]

        if (!eeprom_write(EEPROM_SIGNATURE_ADDR, buf, sizeof(buf))) {
 800b4f6:	f107 0308 	add.w	r3, r7, #8
 800b4fa:	2205      	movs	r2, #5
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	2000      	movs	r0, #0
 800b500:	f000 f9d2 	bl	800b8a8 <eeprom_write>
 800b504:	4603      	mov	r3, r0
 800b506:	f083 0301 	eor.w	r3, r3, #1
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d001      	beq.n	800b514 <eeprom_init+0x5c>
            return false;
 800b510:	2300      	movs	r3, #0
 800b512:	e01c      	b.n	800b54e <eeprom_init+0x96>
        }

        // ─── Inicializamos los punteros del buffer circular ───
        uint8_t zero = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	71fb      	strb	r3, [r7, #7]
        if (!eeprom_write(EEPROM_LOG_HEAD_ADDR,  &zero, 1) ||
 800b518:	1dfb      	adds	r3, r7, #7
 800b51a:	2201      	movs	r2, #1
 800b51c:	4619      	mov	r1, r3
 800b51e:	200f      	movs	r0, #15
 800b520:	f000 f9c2 	bl	800b8a8 <eeprom_write>
 800b524:	4603      	mov	r3, r0
 800b526:	f083 0301 	eor.w	r3, r3, #1
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10b      	bne.n	800b548 <eeprom_init+0x90>
            !eeprom_write(EEPROM_LOG_COUNT_ADDR, &zero, 1))
 800b530:	1dfb      	adds	r3, r7, #7
 800b532:	2201      	movs	r2, #1
 800b534:	4619      	mov	r1, r3
 800b536:	2010      	movs	r0, #16
 800b538:	f000 f9b6 	bl	800b8a8 <eeprom_write>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f083 0301 	eor.w	r3, r3, #1
 800b542:	b2db      	uxtb	r3, r3
        if (!eeprom_write(EEPROM_LOG_HEAD_ADDR,  &zero, 1) ||
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <eeprom_init+0x94>
        {
            return false;
 800b548:	2300      	movs	r3, #0
 800b54a:	e000      	b.n	800b54e <eeprom_init+0x96>
        }
    }

    return true;
 800b54c:	2301      	movs	r3, #1
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <eeprom_read_thresholds>:

// ─── Leer thresholds LOW y HIGH ───────────────────────────────────────────
bool_t eeprom_read_thresholds(uint16_t *low, uint16_t *high)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b084      	sub	sp, #16
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	6039      	str	r1, [r7, #0]
    uint8_t buf[2*2];
    if (!eeprom_read(EEPROM_THRESH_ADDR, buf, sizeof(buf))) {
 800b560:	f107 030c 	add.w	r3, r7, #12
 800b564:	2204      	movs	r2, #4
 800b566:	4619      	mov	r1, r3
 800b568:	2001      	movs	r0, #1
 800b56a:	f000 f97b 	bl	800b864 <eeprom_read>
 800b56e:	4603      	mov	r3, r0
 800b570:	f083 0301 	eor.w	r3, r3, #1
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d001      	beq.n	800b57e <eeprom_read_thresholds+0x28>
        return false;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e016      	b.n	800b5ac <eeprom_read_thresholds+0x56>
    }
    // Desempaquetado little endian
    *low  = (uint16_t)buf[0] | ((uint16_t)buf[1] << 8);
 800b57e:	7b3b      	ldrb	r3, [r7, #12]
 800b580:	b21a      	sxth	r2, r3
 800b582:	7b7b      	ldrb	r3, [r7, #13]
 800b584:	b21b      	sxth	r3, r3
 800b586:	021b      	lsls	r3, r3, #8
 800b588:	b21b      	sxth	r3, r3
 800b58a:	4313      	orrs	r3, r2
 800b58c:	b21b      	sxth	r3, r3
 800b58e:	b29a      	uxth	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	801a      	strh	r2, [r3, #0]
    *high = (uint16_t)buf[2] | ((uint16_t)buf[3] << 8);
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	b21a      	sxth	r2, r3
 800b598:	7bfb      	ldrb	r3, [r7, #15]
 800b59a:	b21b      	sxth	r3, r3
 800b59c:	021b      	lsls	r3, r3, #8
 800b59e:	b21b      	sxth	r3, r3
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	b21b      	sxth	r3, r3
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	801a      	strh	r2, [r3, #0]
    return true;
 800b5aa:	2301      	movs	r3, #1
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <eeprom_write_thresholds>:

// ─── Escribir nuevos thresholds ───────────────────────────────────────────
bool_t eeprom_write_thresholds(uint16_t low, uint16_t high)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	460a      	mov	r2, r1
 800b5be:	80fb      	strh	r3, [r7, #6]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[2*2];
    buf[0] = (uint8_t)(low & 0xFF);
 800b5c4:	88fb      	ldrh	r3, [r7, #6]
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t)(low >> 8);
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	0a1b      	lsrs	r3, r3, #8
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t)(high & 0xFF);
 800b5d4:	88bb      	ldrh	r3, [r7, #4]
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t)(high >> 8);
 800b5da:	88bb      	ldrh	r3, [r7, #4]
 800b5dc:	0a1b      	lsrs	r3, r3, #8
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	73fb      	strb	r3, [r7, #15]
    return eeprom_write(EEPROM_THRESH_ADDR, buf, sizeof(buf));
 800b5e4:	f107 030c 	add.w	r3, r7, #12
 800b5e8:	2204      	movs	r2, #4
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	2001      	movs	r0, #1
 800b5ee:	f000 f95b 	bl	800b8a8 <eeprom_write>
 800b5f2:	4603      	mov	r3, r0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <eeprom_log_high_event>:

// ─── Guardar nuevo evento de ruido alto ───────────────────────────────────
bool_t eeprom_log_high_event(const eeprom_log_entry_t *evt)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08c      	sub	sp, #48	@ 0x30
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
    uint8_t head, count;

    // 1) Leer HEAD y COUNT actuales del buffer
    eeprom_read(EEPROM_LOG_HEAD_ADDR,  &head,  1);
 800b604:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800b608:	2201      	movs	r2, #1
 800b60a:	4619      	mov	r1, r3
 800b60c:	200f      	movs	r0, #15
 800b60e:	f000 f929 	bl	800b864 <eeprom_read>
    eeprom_read(EEPROM_LOG_COUNT_ADDR, &count, 1);
 800b612:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b616:	2201      	movs	r2, #1
 800b618:	4619      	mov	r1, r3
 800b61a:	2010      	movs	r0, #16
 800b61c:	f000 f922 	bl	800b864 <eeprom_read>

    // Validar límites por si están corruptos
    if (head  >= EEPROM_LOG_MAX_ENTRIES) head  = 0;
 800b620:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b624:	2b09      	cmp	r3, #9
 800b626:	d902      	bls.n	800b62e <eeprom_log_high_event+0x32>
 800b628:	2300      	movs	r3, #0
 800b62a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    if (count >  EEPROM_LOG_MAX_ENTRIES) count = 0;
 800b62e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b632:	2b0a      	cmp	r3, #10
 800b634:	d902      	bls.n	800b63c <eeprom_log_high_event+0x40>
 800b636:	2300      	movs	r3, #0
 800b638:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // 2) Si no está lleno, incrementamos count
    if (count < EEPROM_LOG_MAX_ENTRIES) {
 800b63c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b640:	2b09      	cmp	r3, #9
 800b642:	d805      	bhi.n	800b650 <eeprom_log_high_event+0x54>
        count++;
 800b644:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b648:	3301      	adds	r3, #1
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // 3) Calculamos la dirección para guardar el evento
    uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
                       + (uint16_t)head * EEPROM_LOG_ENTRY_SIZE;
 800b650:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b654:	3304      	adds	r3, #4
    uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
 800b656:	b29b      	uxth	r3, r3
 800b658:	00db      	lsls	r3, r3, #3
 800b65a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    if (!eeprom_write(slot_addr, (uint8_t*)evt, EEPROM_LOG_ENTRY_SIZE)) {
 800b65c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b65e:	2208      	movs	r2, #8
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	4618      	mov	r0, r3
 800b664:	f000 f920 	bl	800b8a8 <eeprom_write>
 800b668:	4603      	mov	r3, r0
 800b66a:	f083 0301 	eor.w	r3, r3, #1
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <eeprom_log_high_event+0x7c>
        return false;
 800b674:	2300      	movs	r3, #0
 800b676:	e031      	b.n	800b6dc <eeprom_log_high_event+0xe0>
    }

    // 4) Avanzar HEAD circularmente y guardar ambos punteros
    head = (head + 1) % EEPROM_LOG_MAX_ENTRIES;
 800b678:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	4b19      	ldr	r3, [pc, #100]	@ (800b6e4 <eeprom_log_high_event+0xe8>)
 800b680:	fb83 1302 	smull	r1, r3, r3, r2
 800b684:	1099      	asrs	r1, r3, #2
 800b686:	17d3      	asrs	r3, r2, #31
 800b688:	1ac9      	subs	r1, r1, r3
 800b68a:	460b      	mov	r3, r1
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	440b      	add	r3, r1
 800b690:	005b      	lsls	r3, r3, #1
 800b692:	1ad1      	subs	r1, r2, r3
 800b694:	b2cb      	uxtb	r3, r1
 800b696:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    eeprom_write(EEPROM_LOG_HEAD_ADDR,  &head,  1);
 800b69a:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800b69e:	2201      	movs	r2, #1
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	200f      	movs	r0, #15
 800b6a4:	f000 f900 	bl	800b8a8 <eeprom_write>
    eeprom_write(EEPROM_LOG_COUNT_ADDR, &count, 1);
 800b6a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	2010      	movs	r0, #16
 800b6b2:	f000 f8f9 	bl	800b8a8 <eeprom_write>

    // Mensaje de debug
    debug_uart_print("LOG: wrote slot ");
 800b6b6:	480c      	ldr	r0, [pc, #48]	@ (800b6e8 <eeprom_log_high_event+0xec>)
 800b6b8:	f000 fa80 	bl	800bbbc <debug_uart_print>
    char dbg[32];
    sprintf(dbg, "%u, count=%u\r\n", head, count);
 800b6bc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b6c6:	f107 000c 	add.w	r0, r7, #12
 800b6ca:	4908      	ldr	r1, [pc, #32]	@ (800b6ec <eeprom_log_high_event+0xf0>)
 800b6cc:	f001 fadc 	bl	800cc88 <siprintf>
    debug_uart_print(dbg);
 800b6d0:	f107 030c 	add.w	r3, r7, #12
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 fa71 	bl	800bbbc <debug_uart_print>

    return true;
 800b6da:	2301      	movs	r3, #1
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3730      	adds	r7, #48	@ 0x30
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	66666667 	.word	0x66666667
 800b6e8:	0800ea30 	.word	0x0800ea30
 800b6ec:	0800ea44 	.word	0x0800ea44

0800b6f0 <eeprom_read_log>:

// ─── Leer los últimos eventos registrados ────────────────────────────────
bool_t eeprom_read_log(eeprom_log_entry_t *entries,
                     uint8_t max_entries,
                     uint8_t *out_count)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	607a      	str	r2, [r7, #4]
 800b6fc:	72fb      	strb	r3, [r7, #11]
    uint8_t head, count;

    // 1) Leer HEAD y COUNT actuales
    if (!eeprom_read(EEPROM_LOG_HEAD_ADDR,  &head,  1) ||
 800b6fe:	f107 0311 	add.w	r3, r7, #17
 800b702:	2201      	movs	r2, #1
 800b704:	4619      	mov	r1, r3
 800b706:	200f      	movs	r0, #15
 800b708:	f000 f8ac 	bl	800b864 <eeprom_read>
 800b70c:	4603      	mov	r3, r0
 800b70e:	f083 0301 	eor.w	r3, r3, #1
 800b712:	b2db      	uxtb	r3, r3
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10c      	bne.n	800b732 <eeprom_read_log+0x42>
        !eeprom_read(EEPROM_LOG_COUNT_ADDR, &count, 1))
 800b718:	f107 0310 	add.w	r3, r7, #16
 800b71c:	2201      	movs	r2, #1
 800b71e:	4619      	mov	r1, r3
 800b720:	2010      	movs	r0, #16
 800b722:	f000 f89f 	bl	800b864 <eeprom_read>
 800b726:	4603      	mov	r3, r0
 800b728:	f083 0301 	eor.w	r3, r3, #1
 800b72c:	b2db      	uxtb	r3, r3
    if (!eeprom_read(EEPROM_LOG_HEAD_ADDR,  &head,  1) ||
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <eeprom_read_log+0x46>
    {
        return false;
 800b732:	2300      	movs	r3, #0
 800b734:	e054      	b.n	800b7e0 <eeprom_read_log+0xf0>
    }

    // Validaciones de límites
    if (head  >= EEPROM_LOG_MAX_ENTRIES) head  = 0;
 800b736:	7c7b      	ldrb	r3, [r7, #17]
 800b738:	2b09      	cmp	r3, #9
 800b73a:	d901      	bls.n	800b740 <eeprom_read_log+0x50>
 800b73c:	2300      	movs	r3, #0
 800b73e:	747b      	strb	r3, [r7, #17]
    if (count >  EEPROM_LOG_MAX_ENTRIES) count = EEPROM_LOG_MAX_ENTRIES;
 800b740:	7c3b      	ldrb	r3, [r7, #16]
 800b742:	2b0a      	cmp	r3, #10
 800b744:	d901      	bls.n	800b74a <eeprom_read_log+0x5a>
 800b746:	230a      	movs	r3, #10
 800b748:	743b      	strb	r3, [r7, #16]
    if (count >  max_entries)             count = max_entries;
 800b74a:	7c3b      	ldrb	r3, [r7, #16]
 800b74c:	7afa      	ldrb	r2, [r7, #11]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d201      	bcs.n	800b756 <eeprom_read_log+0x66>
 800b752:	7afb      	ldrb	r3, [r7, #11]
 800b754:	743b      	strb	r3, [r7, #16]

    // 2) Calculamos el índice del evento más antiguo
    uint8_t start = (head + EEPROM_LOG_MAX_ENTRIES - count)
 800b756:	7c7b      	ldrb	r3, [r7, #17]
 800b758:	330a      	adds	r3, #10
 800b75a:	7c3a      	ldrb	r2, [r7, #16]
 800b75c:	1a9a      	subs	r2, r3, r2
                  % EEPROM_LOG_MAX_ENTRIES;
 800b75e:	4b22      	ldr	r3, [pc, #136]	@ (800b7e8 <eeprom_read_log+0xf8>)
 800b760:	fb83 1302 	smull	r1, r3, r3, r2
 800b764:	1099      	asrs	r1, r3, #2
 800b766:	17d3      	asrs	r3, r2, #31
 800b768:	1ac9      	subs	r1, r1, r3
 800b76a:	460b      	mov	r3, r1
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	440b      	add	r3, r1
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	1ad1      	subs	r1, r2, r3
    uint8_t start = (head + EEPROM_LOG_MAX_ENTRIES - count)
 800b774:	460b      	mov	r3, r1
 800b776:	75bb      	strb	r3, [r7, #22]

    // 3) Leemos los eventos en orden circular
    for (uint8_t i = 0; i < count; i++) {
 800b778:	2300      	movs	r3, #0
 800b77a:	75fb      	strb	r3, [r7, #23]
 800b77c:	e028      	b.n	800b7d0 <eeprom_read_log+0xe0>
        uint8_t idx = (start + i) % EEPROM_LOG_MAX_ENTRIES;
 800b77e:	7dba      	ldrb	r2, [r7, #22]
 800b780:	7dfb      	ldrb	r3, [r7, #23]
 800b782:	441a      	add	r2, r3
 800b784:	4b18      	ldr	r3, [pc, #96]	@ (800b7e8 <eeprom_read_log+0xf8>)
 800b786:	fb83 1302 	smull	r1, r3, r3, r2
 800b78a:	1099      	asrs	r1, r3, #2
 800b78c:	17d3      	asrs	r3, r2, #31
 800b78e:	1ac9      	subs	r1, r1, r3
 800b790:	460b      	mov	r3, r1
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	440b      	add	r3, r1
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	1ad1      	subs	r1, r2, r3
 800b79a:	460b      	mov	r3, r1
 800b79c:	757b      	strb	r3, [r7, #21]
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
                           + idx * EEPROM_LOG_ENTRY_SIZE;
 800b79e:	7d7b      	ldrb	r3, [r7, #21]
 800b7a0:	3304      	adds	r3, #4
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	00db      	lsls	r3, r3, #3
 800b7a6:	827b      	strh	r3, [r7, #18]

        if (!eeprom_read(slot_addr,
                         (uint8_t*)&entries[i],
 800b7a8:	7dfb      	ldrb	r3, [r7, #23]
 800b7aa:	00db      	lsls	r3, r3, #3
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	18d1      	adds	r1, r2, r3
        if (!eeprom_read(slot_addr,
 800b7b0:	8a7b      	ldrh	r3, [r7, #18]
 800b7b2:	2208      	movs	r2, #8
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f000 f855 	bl	800b864 <eeprom_read>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	f083 0301 	eor.w	r3, r3, #1
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <eeprom_read_log+0xda>
                         EEPROM_LOG_ENTRY_SIZE))
        {
            return false;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e00a      	b.n	800b7e0 <eeprom_read_log+0xf0>
    for (uint8_t i = 0; i < count; i++) {
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	75fb      	strb	r3, [r7, #23]
 800b7d0:	7c3b      	ldrb	r3, [r7, #16]
 800b7d2:	7dfa      	ldrb	r2, [r7, #23]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d3d2      	bcc.n	800b77e <eeprom_read_log+0x8e>
        }
    }

    *out_count = count;
 800b7d8:	7c3a      	ldrb	r2, [r7, #16]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	701a      	strb	r2, [r3, #0]
    return true;
 800b7de:	2301      	movs	r3, #1
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	66666667 	.word	0x66666667

0800b7ec <eeprom_erase_log>:

// ─── Borrar todo el log de eventos ───────────────────────────────────────
void eeprom_erase_log(void)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
    uint8_t zero = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	72fb      	strb	r3, [r7, #11]

    // 1) Resetear HEAD y COUNT
    eeprom_write(EEPROM_LOG_HEAD_ADDR,  &zero, 1);
 800b7f6:	f107 030b 	add.w	r3, r7, #11
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	200f      	movs	r0, #15
 800b800:	f000 f852 	bl	800b8a8 <eeprom_write>
    eeprom_write(EEPROM_LOG_COUNT_ADDR, &zero, 1);
 800b804:	f107 030b 	add.w	r3, r7, #11
 800b808:	2201      	movs	r2, #1
 800b80a:	4619      	mov	r1, r3
 800b80c:	2010      	movs	r0, #16
 800b80e:	f000 f84b 	bl	800b8a8 <eeprom_write>

    // 2) Limpiar todas las entradas (opcional, valor 0xFF = vacío)
    uint8_t empty_entry[EEPROM_LOG_ENTRY_SIZE];
    memset(empty_entry, 0xFF, EEPROM_LOG_ENTRY_SIZE);
 800b812:	463b      	mov	r3, r7
 800b814:	2208      	movs	r2, #8
 800b816:	21ff      	movs	r1, #255	@ 0xff
 800b818:	4618      	mov	r0, r3
 800b81a:	f001 fac8 	bl	800cdae <memset>

    for (uint8_t i = 0; i < EEPROM_LOG_MAX_ENTRIES; i++) {
 800b81e:	2300      	movs	r3, #0
 800b820:	73fb      	strb	r3, [r7, #15]
 800b822:	e00d      	b.n	800b840 <eeprom_erase_log+0x54>
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
                           + (uint16_t)i * EEPROM_LOG_ENTRY_SIZE;
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	3304      	adds	r3, #4
        uint16_t slot_addr = EEPROM_LOG_ENTRY_ADDR
 800b828:	b29b      	uxth	r3, r3
 800b82a:	00db      	lsls	r3, r3, #3
 800b82c:	81bb      	strh	r3, [r7, #12]
        eeprom_write(slot_addr, empty_entry, EEPROM_LOG_ENTRY_SIZE);
 800b82e:	4639      	mov	r1, r7
 800b830:	89bb      	ldrh	r3, [r7, #12]
 800b832:	2208      	movs	r2, #8
 800b834:	4618      	mov	r0, r3
 800b836:	f000 f837 	bl	800b8a8 <eeprom_write>
    for (uint8_t i = 0; i < EEPROM_LOG_MAX_ENTRIES; i++) {
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
 800b83c:	3301      	adds	r3, #1
 800b83e:	73fb      	strb	r3, [r7, #15]
 800b840:	7bfb      	ldrb	r3, [r7, #15]
 800b842:	2b09      	cmp	r3, #9
 800b844:	d9ee      	bls.n	800b824 <eeprom_erase_log+0x38>
    }
}
 800b846:	bf00      	nop
 800b848:	bf00      	nop
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <eeprom_restore_defaults>:

// ─── Restaurar los thresholds por defecto ────────────────────────────────
bool_t eeprom_restore_defaults(void)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	af00      	add	r7, sp, #0
    return eeprom_write_thresholds(DEFAULT_THRESHOLD_LOW,
 800b854:	2114      	movs	r1, #20
 800b856:	200a      	movs	r0, #10
 800b858:	f7ff feac 	bl	800b5b4 <eeprom_write_thresholds>
 800b85c:	4603      	mov	r3, r0
                                   DEFAULT_THRESHOLD_HIGH);
}
 800b85e:	4618      	mov	r0, r3
 800b860:	bd80      	pop	{r7, pc}
	...

0800b864 <eeprom_read>:

/**
 * Lee datos desde la EEPROM por I2C.
 */
bool_t eeprom_read(uint16_t mem_addr, uint8_t *data, uint16_t len)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af04      	add	r7, sp, #16
 800b86a:	4603      	mov	r3, r0
 800b86c:	6039      	str	r1, [r7, #0]
 800b86e:	80fb      	strh	r3, [r7, #6]
 800b870:	4613      	mov	r3, r2
 800b872:	80bb      	strh	r3, [r7, #4]
    return (HAL_I2C_Mem_Read(&hi2c1,
 800b874:	88fa      	ldrh	r2, [r7, #6]
 800b876:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b87a:	9302      	str	r3, [sp, #8]
 800b87c:	88bb      	ldrh	r3, [r7, #4]
 800b87e:	9301      	str	r3, [sp, #4]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	2310      	movs	r3, #16
 800b886:	21a0      	movs	r1, #160	@ 0xa0
 800b888:	4806      	ldr	r0, [pc, #24]	@ (800b8a4 <eeprom_read+0x40>)
 800b88a:	f7f7 f9b1 	bl	8002bf0 <HAL_I2C_Mem_Read>
 800b88e:	4603      	mov	r3, r0
                             EEPROM_I2C_ADDR,
                             mem_addr,
                             I2C_MEMADD_SIZE_16BIT,
                             data,
                             len,
                             500) == HAL_OK);
 800b890:	2b00      	cmp	r3, #0
 800b892:	bf0c      	ite	eq
 800b894:	2301      	moveq	r3, #1
 800b896:	2300      	movne	r3, #0
 800b898:	b2db      	uxtb	r3, r3
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	2000022c 	.word	0x2000022c

0800b8a8 <eeprom_write>:
 * Escribe datos a la EEPROM por I2C.
 *
 * Luego de escribir, espera al menos 6 ms para completar el ciclo interno de escritura.
 */
bool_t eeprom_write(uint16_t mem_addr, const uint8_t *data, uint16_t len)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af04      	add	r7, sp, #16
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	6039      	str	r1, [r7, #0]
 800b8b2:	80fb      	strh	r3, [r7, #6]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	80bb      	strh	r3, [r7, #4]
    if (HAL_I2C_Mem_Write(&hi2c1,
 800b8b8:	88fa      	ldrh	r2, [r7, #6]
 800b8ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800b8be:	9302      	str	r3, [sp, #8]
 800b8c0:	88bb      	ldrh	r3, [r7, #4]
 800b8c2:	9301      	str	r3, [sp, #4]
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	2310      	movs	r3, #16
 800b8ca:	21a0      	movs	r1, #160	@ 0xa0
 800b8cc:	4807      	ldr	r0, [pc, #28]	@ (800b8ec <eeprom_write+0x44>)
 800b8ce:	f7f7 f895 	bl	80029fc <HAL_I2C_Mem_Write>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d001      	beq.n	800b8dc <eeprom_write+0x34>
                          I2C_MEMADD_SIZE_16BIT,
                          (uint8_t*)data,
                          len,
                          500) != HAL_OK)
    {
        return false;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	e003      	b.n	800b8e4 <eeprom_write+0x3c>
    }
    // Esperamos el ciclo de escritura interna de la EEPROM (~5 ms)
    HAL_Delay(6);
 800b8dc:	2006      	movs	r0, #6
 800b8de:	f7f5 fc33 	bl	8001148 <HAL_Delay>
    return true;
 800b8e2:	2301      	movs	r3, #1
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	2000022c 	.word	0x2000022c

0800b8f0 <port_rtc_init>:
/**
 * Inicializa el puerto del RTC. No se necesita lógica adicional ya que CubeMX
 * ya inicializa el periférico I2C.
 */
bool_t port_rtc_init(void)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	af00      	add	r7, sp, #0
    return true;
 800b8f4:	2301      	movs	r3, #1
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <port_rtc_read>:
 * Lee datos desde registros del DS1307.
 *
 * Utiliza lectura de memoria con dirección de 8 bits.
 */
bool_t port_rtc_read(uint8_t reg_addr, uint8_t *buf, uint8_t len)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af04      	add	r7, sp, #16
 800b906:	4603      	mov	r3, r0
 800b908:	6039      	str	r1, [r7, #0]
 800b90a:	71fb      	strb	r3, [r7, #7]
 800b90c:	4613      	mov	r3, r2
 800b90e:	71bb      	strb	r3, [r7, #6]
    return (HAL_I2C_Mem_Read(&hi2c1,
 800b910:	79fb      	ldrb	r3, [r7, #7]
 800b912:	b29a      	uxth	r2, r3
 800b914:	79bb      	ldrb	r3, [r7, #6]
 800b916:	b29b      	uxth	r3, r3
 800b918:	21c8      	movs	r1, #200	@ 0xc8
 800b91a:	9102      	str	r1, [sp, #8]
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	2301      	movs	r3, #1
 800b924:	21d0      	movs	r1, #208	@ 0xd0
 800b926:	4806      	ldr	r0, [pc, #24]	@ (800b940 <port_rtc_read+0x40>)
 800b928:	f7f7 f962 	bl	8002bf0 <HAL_I2C_Mem_Read>
 800b92c:	4603      	mov	r3, r0
                             DS1307_ADDR,
                             reg_addr,
                             I2C_MEMADD_SIZE_8BIT,
                             buf,
                             len,
                             200) == HAL_OK);
 800b92e:	2b00      	cmp	r3, #0
 800b930:	bf0c      	ite	eq
 800b932:	2301      	moveq	r3, #1
 800b934:	2300      	movne	r3, #0
 800b936:	b2db      	uxtb	r3, r3
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	2000022c 	.word	0x2000022c

0800b944 <port_rtc_write>:
 *
 * Aunque el DS1307 no requiere retardo posterior a la escritura,
 * se introduce una pequeña demora por seguridad.
 */
bool_t port_rtc_write(uint8_t reg_addr, const uint8_t *buf, uint8_t len)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af04      	add	r7, sp, #16
 800b94a:	4603      	mov	r3, r0
 800b94c:	6039      	str	r1, [r7, #0]
 800b94e:	71fb      	strb	r3, [r7, #7]
 800b950:	4613      	mov	r3, r2
 800b952:	71bb      	strb	r3, [r7, #6]
    if (HAL_I2C_Mem_Write(&hi2c1,
 800b954:	79fb      	ldrb	r3, [r7, #7]
 800b956:	b29a      	uxth	r2, r3
 800b958:	79bb      	ldrb	r3, [r7, #6]
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	21c8      	movs	r1, #200	@ 0xc8
 800b95e:	9102      	str	r1, [sp, #8]
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	2301      	movs	r3, #1
 800b968:	21d0      	movs	r1, #208	@ 0xd0
 800b96a:	4808      	ldr	r0, [pc, #32]	@ (800b98c <port_rtc_write+0x48>)
 800b96c:	f7f7 f846 	bl	80029fc <HAL_I2C_Mem_Write>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <port_rtc_write+0x36>
                          reg_addr,
                          I2C_MEMADD_SIZE_8BIT,
                          (uint8_t*)buf,
                          len,
                          200) != HAL_OK) {
        return false;
 800b976:	2300      	movs	r3, #0
 800b978:	e003      	b.n	800b982 <port_rtc_write+0x3e>
    }

    // Breve retardo por seguridad (aunque no es estrictamente necesario para el DS1307)
    HAL_Delay(1);
 800b97a:	2001      	movs	r0, #1
 800b97c:	f7f5 fbe4 	bl	8001148 <HAL_Delay>
    return true;
 800b980:	2301      	movs	r3, #1
}
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	2000022c 	.word	0x2000022c

0800b990 <bcd2bin>:

// === Funciones auxiliares ===

// Convierte un número codificado en BCD (ej: 0x25 = 37) a binario decimal (37)
// BCD codifica los dígitos decimales por separado en nibbles: 0x25 = 0x2*10 + 0x5 = 25
static uint8_t bcd2bin(uint8_t v) {
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	71fb      	strb	r3, [r7, #7]
    return (v & 0x0F) + ((v >> 4) * 10);
 800b99a:	79fb      	ldrb	r3, [r7, #7]
 800b99c:	f003 030f 	and.w	r3, r3, #15
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	79fb      	ldrb	r3, [r7, #7]
 800b9a4:	091b      	lsrs	r3, r3, #4
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	0089      	lsls	r1, r1, #2
 800b9ac:	440b      	add	r3, r1
 800b9ae:	005b      	lsls	r3, r3, #1
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	4413      	add	r3, r2
 800b9b4:	b2db      	uxtb	r3, r3
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <bin2bcd>:

// Convierte un número decimal (ej: 37) a formato BCD: 0x25
static uint8_t bin2bcd(uint8_t v) {
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	71fb      	strb	r3, [r7, #7]
    return ((v / 10) << 4) | (v % 10);
 800b9ce:	79fb      	ldrb	r3, [r7, #7]
 800b9d0:	4a0e      	ldr	r2, [pc, #56]	@ (800ba0c <bin2bcd+0x48>)
 800b9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d6:	08db      	lsrs	r3, r3, #3
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	b25b      	sxtb	r3, r3
 800b9dc:	011b      	lsls	r3, r3, #4
 800b9de:	b258      	sxtb	r0, r3
 800b9e0:	79fa      	ldrb	r2, [r7, #7]
 800b9e2:	4b0a      	ldr	r3, [pc, #40]	@ (800ba0c <bin2bcd+0x48>)
 800b9e4:	fba3 1302 	umull	r1, r3, r3, r2
 800b9e8:	08d9      	lsrs	r1, r3, #3
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	005b      	lsls	r3, r3, #1
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	b25b      	sxtb	r3, r3
 800b9f8:	4303      	orrs	r3, r0
 800b9fa:	b25b      	sxtb	r3, r3
 800b9fc:	b2db      	uxtb	r3, r3
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	cccccccd 	.word	0xcccccccd

0800ba10 <rtc_init>:
static bool_t time_set = false;

// === Funciones públicas ===

bool_t rtc_init(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
    port_rtc_init();
 800ba16:	f7ff ff6b 	bl	800b8f0 <port_rtc_init>

    uint8_t sec_reg;
    // Leemos el registro de segundos (reg 0x00), donde el bit 7 (CH) indica si el reloj está detenido
    if (!port_rtc_read(0x00, &sec_reg, 1)) {
 800ba1a:	1dfb      	adds	r3, r7, #7
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	4619      	mov	r1, r3
 800ba20:	2000      	movs	r0, #0
 800ba22:	f7ff ff6d 	bl	800b900 <port_rtc_read>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f083 0301 	eor.w	r3, r3, #1
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <rtc_init+0x26>
        return false;
 800ba32:	2300      	movs	r3, #0
 800ba34:	e008      	b.n	800ba48 <rtc_init+0x38>
    }

    // Si el bit CH está en 1, el reloj no está corriendo → time_set = false
    time_set = !(sec_reg & 0x80);
 800ba36:	79fb      	ldrb	r3, [r7, #7]
 800ba38:	b25b      	sxtb	r3, r3
 800ba3a:	43db      	mvns	r3, r3
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	09db      	lsrs	r3, r3, #7
 800ba40:	b2da      	uxtb	r2, r3
 800ba42:	4b03      	ldr	r3, [pc, #12]	@ (800ba50 <rtc_init+0x40>)
 800ba44:	701a      	strb	r2, [r3, #0]
    return true;
 800ba46:	2301      	movs	r3, #1
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	20000594 	.word	0x20000594

0800ba54 <rtc_get_datetime>:
{
    return time_set;
}

bool_t rtc_get_datetime(rtc_datetime_t *dt)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
    if (!time_set) return false;
 800ba5c:	4b2d      	ldr	r3, [pc, #180]	@ (800bb14 <rtc_get_datetime+0xc0>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	f083 0301 	eor.w	r3, r3, #1
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <rtc_get_datetime+0x1a>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e04d      	b.n	800bb0a <rtc_get_datetime+0xb6>

    uint8_t buf[7];
    // Leemos los 7 registros de tiempo desde 0x00
    if (!port_rtc_read(0x00, buf, 7)) {
 800ba6e:	f107 0308 	add.w	r3, r7, #8
 800ba72:	2207      	movs	r2, #7
 800ba74:	4619      	mov	r1, r3
 800ba76:	2000      	movs	r0, #0
 800ba78:	f7ff ff42 	bl	800b900 <port_rtc_read>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	f083 0301 	eor.w	r3, r3, #1
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <rtc_get_datetime+0x38>
        return false;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	e03e      	b.n	800bb0a <rtc_get_datetime+0xb6>
    }

    // Convertimos los campos BCD a binario
    dt->sec   = bcd2bin(buf[0] & 0x7F);  // bit 7 = CH, lo descartamos
 800ba8c:	7a3b      	ldrb	r3, [r7, #8]
 800ba8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7ff ff7b 	bl	800b990 <bcd2bin>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	701a      	strb	r2, [r3, #0]
    dt->min   = bcd2bin(buf[1]);
 800baa2:	7a7b      	ldrb	r3, [r7, #9]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff ff73 	bl	800b990 <bcd2bin>
 800baaa:	4603      	mov	r3, r0
 800baac:	461a      	mov	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	705a      	strb	r2, [r3, #1]
    dt->hour  = bcd2bin(buf[2] & 0x3F);  // 24h, ignoramos bit 6 AM/PM
 800bab2:	7abb      	ldrb	r3, [r7, #10]
 800bab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff ff68 	bl	800b990 <bcd2bin>
 800bac0:	4603      	mov	r3, r0
 800bac2:	461a      	mov	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	709a      	strb	r2, [r3, #2]
    dt->day   = bcd2bin(buf[3]);
 800bac8:	7afb      	ldrb	r3, [r7, #11]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7ff ff60 	bl	800b990 <bcd2bin>
 800bad0:	4603      	mov	r3, r0
 800bad2:	461a      	mov	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	70da      	strb	r2, [r3, #3]
    dt->date  = bcd2bin(buf[4]);
 800bad8:	7b3b      	ldrb	r3, [r7, #12]
 800bada:	4618      	mov	r0, r3
 800badc:	f7ff ff58 	bl	800b990 <bcd2bin>
 800bae0:	4603      	mov	r3, r0
 800bae2:	461a      	mov	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	711a      	strb	r2, [r3, #4]
    dt->month = bcd2bin(buf[5]);
 800bae8:	7b7b      	ldrb	r3, [r7, #13]
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff ff50 	bl	800b990 <bcd2bin>
 800baf0:	4603      	mov	r3, r0
 800baf2:	461a      	mov	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	715a      	strb	r2, [r3, #5]
    dt->year  = bcd2bin(buf[6]);
 800baf8:	7bbb      	ldrb	r3, [r7, #14]
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7ff ff48 	bl	800b990 <bcd2bin>
 800bb00:	4603      	mov	r3, r0
 800bb02:	461a      	mov	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	719a      	strb	r2, [r3, #6]
    return true;
 800bb08:	2301      	movs	r3, #1
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000594 	.word	0x20000594

0800bb18 <rtc_set_datetime>:

bool_t rtc_set_datetime(const rtc_datetime_t *dt)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
    uint8_t buf[8];

    // Codificamos los campos a BCD
    buf[0] = bin2bcd(dt->sec) & 0x7F;  // bit 7 (CH) en 0 para arrancar reloj
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7ff ff4d 	bl	800b9c4 <bin2bcd>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	723b      	strb	r3, [r7, #8]
    buf[1] = bin2bcd(dt->min);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	785b      	ldrb	r3, [r3, #1]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff ff43 	bl	800b9c4 <bin2bcd>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	727b      	strb	r3, [r7, #9]
    buf[2] = bin2bcd(dt->hour);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	789b      	ldrb	r3, [r3, #2]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7ff ff3c 	bl	800b9c4 <bin2bcd>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	72bb      	strb	r3, [r7, #10]
    buf[3] = bin2bcd(dt->day);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	78db      	ldrb	r3, [r3, #3]
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7ff ff35 	bl	800b9c4 <bin2bcd>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	72fb      	strb	r3, [r7, #11]
    buf[4] = bin2bcd(dt->date);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	791b      	ldrb	r3, [r3, #4]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff ff2e 	bl	800b9c4 <bin2bcd>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	733b      	strb	r3, [r7, #12]
    buf[5] = bin2bcd(dt->month);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	795b      	ldrb	r3, [r3, #5]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7ff ff27 	bl	800b9c4 <bin2bcd>
 800bb76:	4603      	mov	r3, r0
 800bb78:	737b      	strb	r3, [r7, #13]
    buf[6] = bin2bcd(dt->year);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	799b      	ldrb	r3, [r3, #6]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7ff ff20 	bl	800b9c4 <bin2bcd>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73bb      	strb	r3, [r7, #14]

    // Escribimos los 7 registros en el RTC comenzando desde la dirección 0x00
    if (!port_rtc_write(0x00, buf, 7)) {
 800bb88:	f107 0308 	add.w	r3, r7, #8
 800bb8c:	2207      	movs	r2, #7
 800bb8e:	4619      	mov	r1, r3
 800bb90:	2000      	movs	r0, #0
 800bb92:	f7ff fed7 	bl	800b944 <port_rtc_write>
 800bb96:	4603      	mov	r3, r0
 800bb98:	f083 0301 	eor.w	r3, r3, #1
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <rtc_set_datetime+0x8e>
        return false;
 800bba2:	2300      	movs	r3, #0
 800bba4:	e003      	b.n	800bbae <rtc_set_datetime+0x96>
    }

    time_set = true;
 800bba6:	4b04      	ldr	r3, [pc, #16]	@ (800bbb8 <rtc_set_datetime+0xa0>)
 800bba8:	2201      	movs	r2, #1
 800bbaa:	701a      	strb	r2, [r3, #0]
    return true;
 800bbac:	2301      	movs	r3, #1
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20000594 	.word	0x20000594

0800bbbc <debug_uart_print>:
/**
 * Envía un string de texto a través de la UART de debug.
 *
 * Internamente convierte el string a un buffer de bytes y llama a la función binaria.
 */
bool_t debug_uart_print(const char* msg) {
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
    return debug_uart_send_raw((const uint8_t*)msg, strlen(msg));
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7f4 fb2d 	bl	8000224 <strlen>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	4619      	mov	r1, r3
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f805 	bl	800bbde <debug_uart_send_raw>
 800bbd4:	4603      	mov	r3, r0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <debug_uart_send_raw>:

/**
 * Envía datos crudos (bytes) a través de la UART de debug.
 */
bool_t debug_uart_send_raw(const uint8_t* data, size_t len) {
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	6039      	str	r1, [r7, #0]
    return port_debug_uart_send(data, len);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f806 	bl	800bbfc <port_debug_uart_send>
 800bbf0:	4603      	mov	r3, r0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
	...

0800bbfc <port_debug_uart_send>:
/**
 * Envía datos por UART2 con timeout bloqueante.
 *
 * Esta función es bloqueante: espera hasta que se transmitan todos los datos.
 */
bool_t port_debug_uart_send(const uint8_t* data, size_t len) {
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY) == HAL_OK;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bc0e:	6879      	ldr	r1, [r7, #4]
 800bc10:	4806      	ldr	r0, [pc, #24]	@ (800bc2c <port_debug_uart_send+0x30>)
 800bc12:	f7fa fd15 	bl	8006640 <HAL_UART_Transmit>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bf0c      	ite	eq
 800bc1c:	2301      	moveq	r3, #1
 800bc1e:	2300      	movne	r3, #0
 800bc20:	b2db      	uxtb	r3, r3
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20000310 	.word	0x20000310

0800bc30 <port_usb_cdc_transmit>:

/**
 * @brief Transmite datos por USB CDC utilizando la función de HAL.
 */
int port_usb_cdc_transmit(const uint8_t *buf, uint16_t len)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	807b      	strh	r3, [r7, #2]
    return CDC_Transmit_FS((uint8_t*)buf, len);
 800bc3c:	887b      	ldrh	r3, [r7, #2]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fa27 	bl	800c094 <CDC_Transmit_FS>
 800bc46:	4603      	mov	r3, r0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <usb_cdc_init>:
// Bandera que indica si hay un comando pendiente por procesar
static volatile bool command_pending = false;
// Buffer de comando recibido (terminado en null)
static char usb_cmd_buffer[USB_CMD_BUFFER_SIZE] = { 0 };

void usb_cdc_init(void) {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
    command_pending = false;
 800bc54:	4b04      	ldr	r3, [pc, #16]	@ (800bc68 <usb_cdc_init+0x18>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	701a      	strb	r2, [r3, #0]
    memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800bc5a:	2280      	movs	r2, #128	@ 0x80
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	4803      	ldr	r0, [pc, #12]	@ (800bc6c <usb_cdc_init+0x1c>)
 800bc60:	f001 f8a5 	bl	800cdae <memset>
}
 800bc64:	bf00      	nop
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	20000595 	.word	0x20000595
 800bc6c:	20000598 	.word	0x20000598

0800bc70 <usb_cdc_receiveCallback>:

void usb_cdc_receiveCallback(uint8_t *Buf, uint32_t Len) {
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
    debug_uart_print("usb_cdc_receiveCallback()\r\n");
 800bc7a:	481e      	ldr	r0, [pc, #120]	@ (800bcf4 <usb_cdc_receiveCallback+0x84>)
 800bc7c:	f7ff ff9e 	bl	800bbbc <debug_uart_print>
    debug_uart_print((char*) Buf);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff ff9b 	bl	800bbbc <debug_uart_print>
    debug_uart_print("\r\n");
 800bc86:	481c      	ldr	r0, [pc, #112]	@ (800bcf8 <usb_cdc_receiveCallback+0x88>)
 800bc88:	f7ff ff98 	bl	800bbbc <debug_uart_print>

    // Elimina caracteres de nueva línea o retorno de carro al final
    while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800bc8c:	e002      	b.n	800bc94 <usb_cdc_receiveCallback+0x24>
        Len--;
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	603b      	str	r3, [r7, #0]
    while (Len > 0 && (Buf[Len - 1] == '\r' || Buf[Len - 1] == '\n')) {
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00d      	beq.n	800bcb6 <usb_cdc_receiveCallback+0x46>
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	4413      	add	r3, r2
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	2b0d      	cmp	r3, #13
 800bca6:	d0f2      	beq.n	800bc8e <usb_cdc_receiveCallback+0x1e>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	4413      	add	r3, r2
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b0a      	cmp	r3, #10
 800bcb4:	d0eb      	beq.n	800bc8e <usb_cdc_receiveCallback+0x1e>
    }

    // Si no hay otro comando pendiente y cabe en el buffer, lo copiamos
    if (!command_pending && Len < USB_CMD_BUFFER_SIZE) {
 800bcb6:	4b11      	ldr	r3, [pc, #68]	@ (800bcfc <usb_cdc_receiveCallback+0x8c>)
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	f083 0301 	eor.w	r3, r3, #1
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d011      	beq.n	800bcea <usb_cdc_receiveCallback+0x7a>
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b7f      	cmp	r3, #127	@ 0x7f
 800bcca:	d80e      	bhi.n	800bcea <usb_cdc_receiveCallback+0x7a>
        memcpy(usb_cmd_buffer, Buf, Len);
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	480b      	ldr	r0, [pc, #44]	@ (800bd00 <usb_cdc_receiveCallback+0x90>)
 800bcd2:	f001 f8fa 	bl	800ceca <memcpy>

        // Garantiza que el buffer quede null-terminado para usarlo como string
        usb_cmd_buffer[Len < USB_CMD_BUFFER_SIZE ? Len : USB_CMD_BUFFER_SIZE - 1] = '\0';
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	2b7f      	cmp	r3, #127	@ 0x7f
 800bcda:	bf28      	it	cs
 800bcdc:	237f      	movcs	r3, #127	@ 0x7f
 800bcde:	4a08      	ldr	r2, [pc, #32]	@ (800bd00 <usb_cdc_receiveCallback+0x90>)
 800bce0:	2100      	movs	r1, #0
 800bce2:	54d1      	strb	r1, [r2, r3]

        command_pending = true;
 800bce4:	4b05      	ldr	r3, [pc, #20]	@ (800bcfc <usb_cdc_receiveCallback+0x8c>)
 800bce6:	2201      	movs	r2, #1
 800bce8:	701a      	strb	r2, [r3, #0]
    }
    // Si ya había un comando pendiente, se descarta la nueva entrada
}
 800bcea:	bf00      	nop
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	0800ea54 	.word	0x0800ea54
 800bcf8:	0800ea70 	.word	0x0800ea70
 800bcfc:	20000595 	.word	0x20000595
 800bd00:	20000598 	.word	0x20000598

0800bd04 <usb_cdc_isCommandPending>:

bool usb_cdc_isCommandPending(void) {
 800bd04:	b480      	push	{r7}
 800bd06:	af00      	add	r7, sp, #0
    return command_pending;
 800bd08:	4b03      	ldr	r3, [pc, #12]	@ (800bd18 <usb_cdc_isCommandPending+0x14>)
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	b2db      	uxtb	r3, r3
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	20000595 	.word	0x20000595

0800bd1c <usb_cdc_getCommand>:

const char* usb_cdc_getCommand(void) {
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
    return usb_cmd_buffer;
 800bd20:	4b02      	ldr	r3, [pc, #8]	@ (800bd2c <usb_cdc_getCommand+0x10>)
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	20000598 	.word	0x20000598

0800bd30 <usb_cdc_clearCommand>:

void usb_cdc_clearCommand(void) {
 800bd30:	b580      	push	{r7, lr}
 800bd32:	af00      	add	r7, sp, #0
    command_pending = false;
 800bd34:	4b04      	ldr	r3, [pc, #16]	@ (800bd48 <usb_cdc_clearCommand+0x18>)
 800bd36:	2200      	movs	r2, #0
 800bd38:	701a      	strb	r2, [r3, #0]
    memset(usb_cmd_buffer, 0, USB_CMD_BUFFER_SIZE);
 800bd3a:	2280      	movs	r2, #128	@ 0x80
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	4803      	ldr	r0, [pc, #12]	@ (800bd4c <usb_cdc_clearCommand+0x1c>)
 800bd40:	f001 f835 	bl	800cdae <memset>
}
 800bd44:	bf00      	nop
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	20000595 	.word	0x20000595
 800bd4c:	20000598 	.word	0x20000598

0800bd50 <usb_cdc_sendString>:

uint8_t usb_cdc_sendString(const char *str) {
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
    uint16_t len = (uint16_t) strlen(str);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7f4 fa63 	bl	8000224 <strlen>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	81fb      	strh	r3, [r7, #14]
    return port_usb_cdc_transmit((const uint8_t*) str, len);
 800bd62:	89fb      	ldrh	r3, [r7, #14]
 800bd64:	4619      	mov	r1, r3
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f7ff ff62 	bl	800bc30 <port_usb_cdc_transmit>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	b2db      	uxtb	r3, r3
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <usb_commands_init>:
#include "debug_uart.h"
#include "rtc.h"
#include "usb_cdc.h"
#include "usb_commands.h"

void usb_commands_init(void) {
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	af00      	add	r7, sp, #0
    // Asegura que el driver de CDC esté inicializado
    usb_cdc_init();
 800bd7c:	f7ff ff68 	bl	800bc50 <usb_cdc_init>
}
 800bd80:	bf00      	nop
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <usb_commands_pending>:

bool_t usb_commands_pending(void) {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	af00      	add	r7, sp, #0
    return usb_cdc_isCommandPending();
 800bd88:	f7ff ffbc 	bl	800bd04 <usb_cdc_isCommandPending>
 800bd8c:	4603      	mov	r3, r0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	bd80      	pop	{r7, pc}
	...

0800bd94 <parse_settime_args>:

// Parsea los argumentos del comando 'settime'
static bool_t parse_settime_args(const char *args, rtc_datetime_t *dt) {
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b08e      	sub	sp, #56	@ 0x38
 800bd98:	af04      	add	r7, sp, #16
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
    unsigned int yy, MM, DD, hh, mm, ss;
    int matched = sscanf(args, "%u %u %u %u %u %u", &yy, &MM, &DD, &hh, &mm, &ss);
 800bd9e:	f107 011c 	add.w	r1, r7, #28
 800bda2:	f107 0220 	add.w	r2, r7, #32
 800bda6:	f107 030c 	add.w	r3, r7, #12
 800bdaa:	9303      	str	r3, [sp, #12]
 800bdac:	f107 0310 	add.w	r3, r7, #16
 800bdb0:	9302      	str	r3, [sp, #8]
 800bdb2:	f107 0314 	add.w	r3, r7, #20
 800bdb6:	9301      	str	r3, [sp, #4]
 800bdb8:	f107 0318 	add.w	r3, r7, #24
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4913      	ldr	r1, [pc, #76]	@ (800be10 <parse_settime_args+0x7c>)
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 ff82 	bl	800cccc <siscanf>
 800bdc8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (matched != 6) {
 800bdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdcc:	2b06      	cmp	r3, #6
 800bdce:	d001      	beq.n	800bdd4 <parse_settime_args+0x40>
        return false;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	e018      	b.n	800be06 <parse_settime_args+0x72>
    }
    dt->year   = (uint8_t)yy;
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	719a      	strb	r2, [r3, #6]
    dt->month  = (uint8_t)MM;
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	715a      	strb	r2, [r3, #5]
    dt->date   = (uint8_t)DD;
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	b2da      	uxtb	r2, r3
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	711a      	strb	r2, [r3, #4]
    dt->hour   = (uint8_t)hh;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	709a      	strb	r2, [r3, #2]
    dt->min    = (uint8_t)mm;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	705a      	strb	r2, [r3, #1]
    dt->sec    = (uint8_t)ss;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	b2da      	uxtb	r2, r3
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	701a      	strb	r2, [r3, #0]
    return true;
 800be04:	2301      	movs	r3, #1
}
 800be06:	4618      	mov	r0, r3
 800be08:	3728      	adds	r7, #40	@ 0x28
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	0800ea74 	.word	0x0800ea74

0800be14 <usb_commands_get>:

usb_command_t usb_commands_get(pending_action_t *out) {
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
    const char *cmd = usb_cdc_getCommand();
 800be1c:	f7ff ff7e 	bl	800bd1c <usb_cdc_getCommand>
 800be20:	60f8      	str	r0, [r7, #12]

    if (strcmp(cmd, USB_CMD_GET_THRESH) == 0) {
 800be22:	492b      	ldr	r1, [pc, #172]	@ (800bed0 <usb_commands_get+0xbc>)
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f7f4 f9f3 	bl	8000210 <strcmp>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d103      	bne.n	800be38 <usb_commands_get+0x24>
        out->cmd = CMD_GET_THRESH;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	701a      	strb	r2, [r3, #0]
 800be36:	e043      	b.n	800bec0 <usb_commands_get+0xac>
    } else if (sscanf(cmd, USB_CMD_SET_THRESH " %hu %hu", &out->low, &out->high) == 2) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	1c9a      	adds	r2, r3, #2
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3304      	adds	r3, #4
 800be40:	4924      	ldr	r1, [pc, #144]	@ (800bed4 <usb_commands_get+0xc0>)
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f000 ff42 	bl	800cccc <siscanf>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	d103      	bne.n	800be56 <usb_commands_get+0x42>
        out->cmd = CMD_SET_THRESH;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2201      	movs	r2, #1
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	e034      	b.n	800bec0 <usb_commands_get+0xac>
    } else if (strcmp(cmd, USB_CMD_GET_TIME) == 0) {
 800be56:	4920      	ldr	r1, [pc, #128]	@ (800bed8 <usb_commands_get+0xc4>)
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f7f4 f9d9 	bl	8000210 <strcmp>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d103      	bne.n	800be6c <usb_commands_get+0x58>
        out->cmd = CMD_GET_TIME;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2202      	movs	r2, #2
 800be68:	701a      	strb	r2, [r3, #0]
 800be6a:	e029      	b.n	800bec0 <usb_commands_get+0xac>
    } else if (strncmp(cmd, USB_CMD_SET_TIME " ", strlen(USB_CMD_SET_TIME) + 1) == 0) {
 800be6c:	2208      	movs	r2, #8
 800be6e:	491b      	ldr	r1, [pc, #108]	@ (800bedc <usb_commands_get+0xc8>)
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f000 ffa4 	bl	800cdbe <strncmp>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d113      	bne.n	800bea4 <usb_commands_get+0x90>
        const char *args = cmd + strlen(USB_CMD_SET_TIME) + 1;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	3308      	adds	r3, #8
 800be80:	60bb      	str	r3, [r7, #8]
        if (parse_settime_args(args, &out->dt)) {
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	3306      	adds	r3, #6
 800be86:	4619      	mov	r1, r3
 800be88:	68b8      	ldr	r0, [r7, #8]
 800be8a:	f7ff ff83 	bl	800bd94 <parse_settime_args>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d003      	beq.n	800be9c <usb_commands_get+0x88>
            out->cmd = CMD_SET_TIME;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2203      	movs	r2, #3
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	e011      	b.n	800bec0 <usb_commands_get+0xac>
        } else {
            out->cmd = CMD_HELP;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2205      	movs	r2, #5
 800bea0:	701a      	strb	r2, [r3, #0]
 800bea2:	e00d      	b.n	800bec0 <usb_commands_get+0xac>
        }
    } else if (strcmp(cmd, USB_CMD_GET_LOG) == 0) {
 800bea4:	490e      	ldr	r1, [pc, #56]	@ (800bee0 <usb_commands_get+0xcc>)
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f7f4 f9b2 	bl	8000210 <strcmp>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d103      	bne.n	800beba <usb_commands_get+0xa6>
        out->cmd = CMD_GET_LOG;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2204      	movs	r2, #4
 800beb6:	701a      	strb	r2, [r3, #0]
 800beb8:	e002      	b.n	800bec0 <usb_commands_get+0xac>
    } else {
        out->cmd = CMD_HELP;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2205      	movs	r2, #5
 800bebe:	701a      	strb	r2, [r3, #0]
    }

    usb_cdc_clearCommand();
 800bec0:	f7ff ff36 	bl	800bd30 <usb_cdc_clearCommand>
    return out->cmd;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	781b      	ldrb	r3, [r3, #0]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3710      	adds	r7, #16
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	0800ea88 	.word	0x0800ea88
 800bed4:	0800ea90 	.word	0x0800ea90
 800bed8:	0800eaa0 	.word	0x0800eaa0
 800bedc:	0800eaa8 	.word	0x0800eaa8
 800bee0:	0800eab4 	.word	0x0800eab4

0800bee4 <usb_commands_print_help>:

void usb_commands_print_help(void) {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
    usb_cdc_sendString(
 800bee8:	4802      	ldr	r0, [pc, #8]	@ (800bef4 <usb_commands_print_help+0x10>)
 800beea:	f7ff ff31 	bl	800bd50 <usb_cdc_sendString>
        "  gettime                - Leer fecha/hora del RTC\r\n"
        "  settime YY MM DD h m s - Establecer fecha/hora RTC\r\n"
        "  getlog                 - Mostrar eventos registrados\r\n"
        "  help                   - Mostrar esta ayuda\r\n"
    );
}
 800beee:	bf00      	nop
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	0800eabc 	.word	0x0800eabc

0800bef8 <project_main>:
// === Public variable definitions ================================================================================= //
// === Private variable definitions ================================================================================ //
// === Private function implementation ============================================================================= //
// === Public function implementation ============================================================================== //

void project_main() { appUpdate(); }
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
 800befc:	f7ff f934 	bl	800b168 <appUpdate>
 800bf00:	bf00      	nop
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	4912      	ldr	r1, [pc, #72]	@ (800bf54 <MX_USB_DEVICE_Init+0x50>)
 800bf0c:	4812      	ldr	r0, [pc, #72]	@ (800bf58 <MX_USB_DEVICE_Init+0x54>)
 800bf0e:	f7fd fb5b 	bl	80095c8 <USBD_Init>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bf18:	f7f4 fdc2 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bf1c:	490f      	ldr	r1, [pc, #60]	@ (800bf5c <MX_USB_DEVICE_Init+0x58>)
 800bf1e:	480e      	ldr	r0, [pc, #56]	@ (800bf58 <MX_USB_DEVICE_Init+0x54>)
 800bf20:	f7fd fb82 	bl	8009628 <USBD_RegisterClass>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d001      	beq.n	800bf2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bf2a:	f7f4 fdb9 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bf2e:	490c      	ldr	r1, [pc, #48]	@ (800bf60 <MX_USB_DEVICE_Init+0x5c>)
 800bf30:	4809      	ldr	r0, [pc, #36]	@ (800bf58 <MX_USB_DEVICE_Init+0x54>)
 800bf32:	f7fd fa79 	bl	8009428 <USBD_CDC_RegisterInterface>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d001      	beq.n	800bf40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bf3c:	f7f4 fdb0 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bf40:	4805      	ldr	r0, [pc, #20]	@ (800bf58 <MX_USB_DEVICE_Init+0x54>)
 800bf42:	f7fd fba7 	bl	8009694 <USBD_Start>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bf4c:	f7f4 fda8 	bl	8000aa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bf50:	bf00      	nop
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	200000ac 	.word	0x200000ac
 800bf58:	20000618 	.word	0x20000618
 800bf5c:	20000018 	.word	0x20000018
 800bf60:	20000098 	.word	0x20000098

0800bf64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bf68:	2200      	movs	r2, #0
 800bf6a:	4905      	ldr	r1, [pc, #20]	@ (800bf80 <CDC_Init_FS+0x1c>)
 800bf6c:	4805      	ldr	r0, [pc, #20]	@ (800bf84 <CDC_Init_FS+0x20>)
 800bf6e:	f7fd fa75 	bl	800945c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bf72:	4905      	ldr	r1, [pc, #20]	@ (800bf88 <CDC_Init_FS+0x24>)
 800bf74:	4803      	ldr	r0, [pc, #12]	@ (800bf84 <CDC_Init_FS+0x20>)
 800bf76:	f7fd fa93 	bl	80094a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bf7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	200010f4 	.word	0x200010f4
 800bf84:	20000618 	.word	0x20000618
 800bf88:	200008f4 	.word	0x200008f4

0800bf8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bf90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	6039      	str	r1, [r7, #0]
 800bfa6:	71fb      	strb	r3, [r7, #7]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bfac:	79fb      	ldrb	r3, [r7, #7]
 800bfae:	2b23      	cmp	r3, #35	@ 0x23
 800bfb0:	d84a      	bhi.n	800c048 <CDC_Control_FS+0xac>
 800bfb2:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb8 <CDC_Control_FS+0x1c>)
 800bfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb8:	0800c049 	.word	0x0800c049
 800bfbc:	0800c049 	.word	0x0800c049
 800bfc0:	0800c049 	.word	0x0800c049
 800bfc4:	0800c049 	.word	0x0800c049
 800bfc8:	0800c049 	.word	0x0800c049
 800bfcc:	0800c049 	.word	0x0800c049
 800bfd0:	0800c049 	.word	0x0800c049
 800bfd4:	0800c049 	.word	0x0800c049
 800bfd8:	0800c049 	.word	0x0800c049
 800bfdc:	0800c049 	.word	0x0800c049
 800bfe0:	0800c049 	.word	0x0800c049
 800bfe4:	0800c049 	.word	0x0800c049
 800bfe8:	0800c049 	.word	0x0800c049
 800bfec:	0800c049 	.word	0x0800c049
 800bff0:	0800c049 	.word	0x0800c049
 800bff4:	0800c049 	.word	0x0800c049
 800bff8:	0800c049 	.word	0x0800c049
 800bffc:	0800c049 	.word	0x0800c049
 800c000:	0800c049 	.word	0x0800c049
 800c004:	0800c049 	.word	0x0800c049
 800c008:	0800c049 	.word	0x0800c049
 800c00c:	0800c049 	.word	0x0800c049
 800c010:	0800c049 	.word	0x0800c049
 800c014:	0800c049 	.word	0x0800c049
 800c018:	0800c049 	.word	0x0800c049
 800c01c:	0800c049 	.word	0x0800c049
 800c020:	0800c049 	.word	0x0800c049
 800c024:	0800c049 	.word	0x0800c049
 800c028:	0800c049 	.word	0x0800c049
 800c02c:	0800c049 	.word	0x0800c049
 800c030:	0800c049 	.word	0x0800c049
 800c034:	0800c049 	.word	0x0800c049
 800c038:	0800c049 	.word	0x0800c049
 800c03c:	0800c049 	.word	0x0800c049
 800c040:	0800c049 	.word	0x0800c049
 800c044:	0800c049 	.word	0x0800c049
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c048:	bf00      	nop
  }

  return (USBD_OK);
 800c04a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > 0) {
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d005      	beq.n	800c076 <CDC_Receive_FS+0x1e>
	    usb_cdc_receiveCallback(Buf, *Len);
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff fdfd 	bl	800bc70 <usb_cdc_receiveCallback>
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	4805      	ldr	r0, [pc, #20]	@ (800c090 <CDC_Receive_FS+0x38>)
 800c07a:	f7fd fa11 	bl	80094a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c07e:	4804      	ldr	r0, [pc, #16]	@ (800c090 <CDC_Receive_FS+0x38>)
 800c080:	f7fd fa6c 	bl	800955c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c084:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	20000618 	.word	0x20000618

0800c094 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	460b      	mov	r3, r1
 800c09e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c0a4:	4b0d      	ldr	r3, [pc, #52]	@ (800c0dc <CDC_Transmit_FS+0x48>)
 800c0a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c0aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e00b      	b.n	800c0d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c0ba:	887b      	ldrh	r3, [r7, #2]
 800c0bc:	461a      	mov	r2, r3
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	4806      	ldr	r0, [pc, #24]	@ (800c0dc <CDC_Transmit_FS+0x48>)
 800c0c2:	f7fd f9cb 	bl	800945c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c0c6:	4805      	ldr	r0, [pc, #20]	@ (800c0dc <CDC_Transmit_FS+0x48>)
 800c0c8:	f7fd fa08 	bl	80094dc <USBD_CDC_TransmitPacket>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20000618 	.word	0x20000618

0800c0e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c0f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	371c      	adds	r7, #28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
	...

0800c104 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	4603      	mov	r3, r0
 800c10c:	6039      	str	r1, [r7, #0]
 800c10e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	2212      	movs	r2, #18
 800c114:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c116:	4b03      	ldr	r3, [pc, #12]	@ (800c124 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c118:	4618      	mov	r0, r3
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	200000cc 	.word	0x200000cc

0800c128 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	4603      	mov	r3, r0
 800c130:	6039      	str	r1, [r7, #0]
 800c132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2204      	movs	r2, #4
 800c138:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c13a:	4b03      	ldr	r3, [pc, #12]	@ (800c148 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	200000ec 	.word	0x200000ec

0800c14c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	4603      	mov	r3, r0
 800c154:	6039      	str	r1, [r7, #0]
 800c156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c158:	79fb      	ldrb	r3, [r7, #7]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d105      	bne.n	800c16a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	4907      	ldr	r1, [pc, #28]	@ (800c180 <USBD_FS_ProductStrDescriptor+0x34>)
 800c162:	4808      	ldr	r0, [pc, #32]	@ (800c184 <USBD_FS_ProductStrDescriptor+0x38>)
 800c164:	f7fe fc70 	bl	800aa48 <USBD_GetString>
 800c168:	e004      	b.n	800c174 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	4904      	ldr	r1, [pc, #16]	@ (800c180 <USBD_FS_ProductStrDescriptor+0x34>)
 800c16e:	4805      	ldr	r0, [pc, #20]	@ (800c184 <USBD_FS_ProductStrDescriptor+0x38>)
 800c170:	f7fe fc6a 	bl	800aa48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c174:	4b02      	ldr	r3, [pc, #8]	@ (800c180 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c176:	4618      	mov	r0, r3
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	200018f4 	.word	0x200018f4
 800c184:	0800ec14 	.word	0x0800ec14

0800c188 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	4603      	mov	r3, r0
 800c190:	6039      	str	r1, [r7, #0]
 800c192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	4904      	ldr	r1, [pc, #16]	@ (800c1a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c198:	4804      	ldr	r0, [pc, #16]	@ (800c1ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c19a:	f7fe fc55 	bl	800aa48 <USBD_GetString>
  return USBD_StrDesc;
 800c19e:	4b02      	ldr	r3, [pc, #8]	@ (800c1a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	200018f4 	.word	0x200018f4
 800c1ac:	0800ec2c 	.word	0x0800ec2c

0800c1b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	6039      	str	r1, [r7, #0]
 800c1ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	221a      	movs	r2, #26
 800c1c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c1c2:	f000 f855 	bl	800c270 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c1c6:	4b02      	ldr	r3, [pc, #8]	@ (800c1d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	200000f0 	.word	0x200000f0

0800c1d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	6039      	str	r1, [r7, #0]
 800c1de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c1e0:	79fb      	ldrb	r3, [r7, #7]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d105      	bne.n	800c1f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	4907      	ldr	r1, [pc, #28]	@ (800c208 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1ea:	4808      	ldr	r0, [pc, #32]	@ (800c20c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1ec:	f7fe fc2c 	bl	800aa48 <USBD_GetString>
 800c1f0:	e004      	b.n	800c1fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	4904      	ldr	r1, [pc, #16]	@ (800c208 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c1f6:	4805      	ldr	r0, [pc, #20]	@ (800c20c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c1f8:	f7fe fc26 	bl	800aa48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1fc:	4b02      	ldr	r3, [pc, #8]	@ (800c208 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	200018f4 	.word	0x200018f4
 800c20c:	0800ec40 	.word	0x0800ec40

0800c210 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	6039      	str	r1, [r7, #0]
 800c21a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c21c:	79fb      	ldrb	r3, [r7, #7]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d105      	bne.n	800c22e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c222:	683a      	ldr	r2, [r7, #0]
 800c224:	4907      	ldr	r1, [pc, #28]	@ (800c244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c226:	4808      	ldr	r0, [pc, #32]	@ (800c248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c228:	f7fe fc0e 	bl	800aa48 <USBD_GetString>
 800c22c:	e004      	b.n	800c238 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	4904      	ldr	r1, [pc, #16]	@ (800c244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c232:	4805      	ldr	r0, [pc, #20]	@ (800c248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c234:	f7fe fc08 	bl	800aa48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c238:	4b02      	ldr	r3, [pc, #8]	@ (800c244 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	200018f4 	.word	0x200018f4
 800c248:	0800ec4c 	.word	0x0800ec4c

0800c24c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	6039      	str	r1, [r7, #0]
 800c256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	220c      	movs	r2, #12
 800c25c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c25e:	4b03      	ldr	r3, [pc, #12]	@ (800c26c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c260:	4618      	mov	r0, r3
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	200000e0 	.word	0x200000e0

0800c270 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c276:	4b0f      	ldr	r3, [pc, #60]	@ (800c2b4 <Get_SerialNum+0x44>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c27c:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b8 <Get_SerialNum+0x48>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c282:	4b0e      	ldr	r3, [pc, #56]	@ (800c2bc <Get_SerialNum+0x4c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4413      	add	r3, r2
 800c28e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d009      	beq.n	800c2aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c296:	2208      	movs	r2, #8
 800c298:	4909      	ldr	r1, [pc, #36]	@ (800c2c0 <Get_SerialNum+0x50>)
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f000 f814 	bl	800c2c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2a0:	2204      	movs	r2, #4
 800c2a2:	4908      	ldr	r1, [pc, #32]	@ (800c2c4 <Get_SerialNum+0x54>)
 800c2a4:	68b8      	ldr	r0, [r7, #8]
 800c2a6:	f000 f80f 	bl	800c2c8 <IntToUnicode>
  }
}
 800c2aa:	bf00      	nop
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	1fff7a10 	.word	0x1fff7a10
 800c2b8:	1fff7a14 	.word	0x1fff7a14
 800c2bc:	1fff7a18 	.word	0x1fff7a18
 800c2c0:	200000f2 	.word	0x200000f2
 800c2c4:	20000102 	.word	0x20000102

0800c2c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b087      	sub	sp, #28
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c2da:	2300      	movs	r3, #0
 800c2dc:	75fb      	strb	r3, [r7, #23]
 800c2de:	e027      	b.n	800c330 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	0f1b      	lsrs	r3, r3, #28
 800c2e4:	2b09      	cmp	r3, #9
 800c2e6:	d80b      	bhi.n	800c300 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	0f1b      	lsrs	r3, r3, #28
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	005b      	lsls	r3, r3, #1
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	440b      	add	r3, r1
 800c2f8:	3230      	adds	r2, #48	@ 0x30
 800c2fa:	b2d2      	uxtb	r2, r2
 800c2fc:	701a      	strb	r2, [r3, #0]
 800c2fe:	e00a      	b.n	800c316 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	0f1b      	lsrs	r3, r3, #28
 800c304:	b2da      	uxtb	r2, r3
 800c306:	7dfb      	ldrb	r3, [r7, #23]
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	4619      	mov	r1, r3
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	440b      	add	r3, r1
 800c310:	3237      	adds	r2, #55	@ 0x37
 800c312:	b2d2      	uxtb	r2, r2
 800c314:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c31c:	7dfb      	ldrb	r3, [r7, #23]
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	3301      	adds	r3, #1
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	4413      	add	r3, r2
 800c326:	2200      	movs	r2, #0
 800c328:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	3301      	adds	r3, #1
 800c32e:	75fb      	strb	r3, [r7, #23]
 800c330:	7dfa      	ldrb	r2, [r7, #23]
 800c332:	79fb      	ldrb	r3, [r7, #7]
 800c334:	429a      	cmp	r2, r3
 800c336:	d3d3      	bcc.n	800c2e0 <IntToUnicode+0x18>
  }
}
 800c338:	bf00      	nop
 800c33a:	bf00      	nop
 800c33c:	371c      	adds	r7, #28
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr
	...

0800c348 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b0a0      	sub	sp, #128	@ 0x80
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c350:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800c354:	2200      	movs	r2, #0
 800c356:	601a      	str	r2, [r3, #0]
 800c358:	605a      	str	r2, [r3, #4]
 800c35a:	609a      	str	r2, [r3, #8]
 800c35c:	60da      	str	r2, [r3, #12]
 800c35e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c360:	f107 0310 	add.w	r3, r7, #16
 800c364:	225c      	movs	r2, #92	@ 0x5c
 800c366:	2100      	movs	r1, #0
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 fd20 	bl	800cdae <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c376:	d149      	bne.n	800c40c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c378:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c37c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c37e:	2300      	movs	r3, #0
 800c380:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c382:	f107 0310 	add.w	r3, r7, #16
 800c386:	4618      	mov	r0, r3
 800c388:	f7f8 fdd0 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c392:	f7f4 fb85 	bl	8000aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c396:	2300      	movs	r3, #0
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	4b1e      	ldr	r3, [pc, #120]	@ (800c414 <HAL_PCD_MspInit+0xcc>)
 800c39c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c39e:	4a1d      	ldr	r2, [pc, #116]	@ (800c414 <HAL_PCD_MspInit+0xcc>)
 800c3a0:	f043 0301 	orr.w	r3, r3, #1
 800c3a4:	6313      	str	r3, [r2, #48]	@ 0x30
 800c3a6:	4b1b      	ldr	r3, [pc, #108]	@ (800c414 <HAL_PCD_MspInit+0xcc>)
 800c3a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	60fb      	str	r3, [r7, #12]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c3b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c3b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c3c4:	230a      	movs	r3, #10
 800c3c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	4812      	ldr	r0, [pc, #72]	@ (800c418 <HAL_PCD_MspInit+0xd0>)
 800c3d0:	f7f6 f80a 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c3d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c414 <HAL_PCD_MspInit+0xcc>)
 800c3d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c414 <HAL_PCD_MspInit+0xcc>)
 800c3da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3de:	6353      	str	r3, [r2, #52]	@ 0x34
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	60bb      	str	r3, [r7, #8]
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c414 <HAL_PCD_MspInit+0xcc>)
 800c3e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3e8:	4a0a      	ldr	r2, [pc, #40]	@ (800c414 <HAL_PCD_MspInit+0xcc>)
 800c3ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c3ee:	6453      	str	r3, [r2, #68]	@ 0x44
 800c3f0:	4b08      	ldr	r3, [pc, #32]	@ (800c414 <HAL_PCD_MspInit+0xcc>)
 800c3f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3f8:	60bb      	str	r3, [r7, #8]
 800c3fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2100      	movs	r1, #0
 800c400:	2043      	movs	r0, #67	@ 0x43
 800c402:	f7f5 fbb8 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c406:	2043      	movs	r0, #67	@ 0x43
 800c408:	f7f5 fbd1 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c40c:	bf00      	nop
 800c40e:	3780      	adds	r7, #128	@ 0x80
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	40023800 	.word	0x40023800
 800c418:	40020000 	.word	0x40020000

0800c41c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c430:	4619      	mov	r1, r3
 800c432:	4610      	mov	r0, r2
 800c434:	f7fd f97b 	bl	800972e <USBD_LL_SetupStage>
}
 800c438:	bf00      	nop
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	460b      	mov	r3, r1
 800c44a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c452:	78fa      	ldrb	r2, [r7, #3]
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	4613      	mov	r3, r2
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	4413      	add	r3, r2
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	440b      	add	r3, r1
 800c460:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	78fb      	ldrb	r3, [r7, #3]
 800c468:	4619      	mov	r1, r3
 800c46a:	f7fd f9b5 	bl	80097d8 <USBD_LL_DataOutStage>
}
 800c46e:	bf00      	nop
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	460b      	mov	r3, r1
 800c480:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c488:	78fa      	ldrb	r2, [r7, #3]
 800c48a:	6879      	ldr	r1, [r7, #4]
 800c48c:	4613      	mov	r3, r2
 800c48e:	00db      	lsls	r3, r3, #3
 800c490:	4413      	add	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	440b      	add	r3, r1
 800c496:	3320      	adds	r3, #32
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	78fb      	ldrb	r3, [r7, #3]
 800c49c:	4619      	mov	r1, r3
 800c49e:	f7fd fa4e 	bl	800993e <USBD_LL_DataInStage>
}
 800c4a2:	bf00      	nop
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fd fb88 	bl	8009bce <USBD_LL_SOF>
}
 800c4be:	bf00      	nop
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	79db      	ldrb	r3, [r3, #7]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d102      	bne.n	800c4e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	73fb      	strb	r3, [r7, #15]
 800c4de:	e008      	b.n	800c4f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	79db      	ldrb	r3, [r3, #7]
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d102      	bne.n	800c4ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	73fb      	strb	r3, [r7, #15]
 800c4ec:	e001      	b.n	800c4f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c4ee:	f7f4 fad7 	bl	8000aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4f8:	7bfa      	ldrb	r2, [r7, #15]
 800c4fa:	4611      	mov	r1, r2
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fd fb22 	bl	8009b46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fd faca 	bl	8009aa2 <USBD_LL_Reset>
}
 800c50e:	bf00      	nop
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c526:	4618      	mov	r0, r3
 800c528:	f7fd fb1d 	bl	8009b66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	6812      	ldr	r2, [r2, #0]
 800c53a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c53e:	f043 0301 	orr.w	r3, r3, #1
 800c542:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7adb      	ldrb	r3, [r3, #11]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d005      	beq.n	800c558 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c54c:	4b04      	ldr	r3, [pc, #16]	@ (800c560 <HAL_PCD_SuspendCallback+0x48>)
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	4a03      	ldr	r2, [pc, #12]	@ (800c560 <HAL_PCD_SuspendCallback+0x48>)
 800c552:	f043 0306 	orr.w	r3, r3, #6
 800c556:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	e000ed00 	.word	0xe000ed00

0800c564 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c572:	4618      	mov	r0, r3
 800c574:	f7fd fb13 	bl	8009b9e <USBD_LL_Resume>
}
 800c578:	bf00      	nop
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	460b      	mov	r3, r1
 800c58a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c592:	78fa      	ldrb	r2, [r7, #3]
 800c594:	4611      	mov	r1, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f7fd fb6b 	bl	8009c72 <USBD_LL_IsoOUTIncomplete>
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5b6:	78fa      	ldrb	r2, [r7, #3]
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fd fb27 	bl	8009c0e <USBD_LL_IsoINIncomplete>
}
 800c5c0:	bf00      	nop
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fd fb7d 	bl	8009cd6 <USBD_LL_DevConnected>
}
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fd fb7a 	bl	8009cec <USBD_LL_DevDisconnected>
}
 800c5f8:	bf00      	nop
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d13c      	bne.n	800c68a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c610:	4a20      	ldr	r2, [pc, #128]	@ (800c694 <USBD_LL_Init+0x94>)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a1e      	ldr	r2, [pc, #120]	@ (800c694 <USBD_LL_Init+0x94>)
 800c61c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c620:	4b1c      	ldr	r3, [pc, #112]	@ (800c694 <USBD_LL_Init+0x94>)
 800c622:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c626:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c628:	4b1a      	ldr	r3, [pc, #104]	@ (800c694 <USBD_LL_Init+0x94>)
 800c62a:	2206      	movs	r2, #6
 800c62c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c62e:	4b19      	ldr	r3, [pc, #100]	@ (800c694 <USBD_LL_Init+0x94>)
 800c630:	2202      	movs	r2, #2
 800c632:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c634:	4b17      	ldr	r3, [pc, #92]	@ (800c694 <USBD_LL_Init+0x94>)
 800c636:	2200      	movs	r2, #0
 800c638:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c63a:	4b16      	ldr	r3, [pc, #88]	@ (800c694 <USBD_LL_Init+0x94>)
 800c63c:	2202      	movs	r2, #2
 800c63e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c640:	4b14      	ldr	r3, [pc, #80]	@ (800c694 <USBD_LL_Init+0x94>)
 800c642:	2200      	movs	r2, #0
 800c644:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c646:	4b13      	ldr	r3, [pc, #76]	@ (800c694 <USBD_LL_Init+0x94>)
 800c648:	2200      	movs	r2, #0
 800c64a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c64c:	4b11      	ldr	r3, [pc, #68]	@ (800c694 <USBD_LL_Init+0x94>)
 800c64e:	2200      	movs	r2, #0
 800c650:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c652:	4b10      	ldr	r3, [pc, #64]	@ (800c694 <USBD_LL_Init+0x94>)
 800c654:	2200      	movs	r2, #0
 800c656:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c658:	4b0e      	ldr	r3, [pc, #56]	@ (800c694 <USBD_LL_Init+0x94>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c65e:	480d      	ldr	r0, [pc, #52]	@ (800c694 <USBD_LL_Init+0x94>)
 800c660:	f7f7 f8ac 	bl	80037bc <HAL_PCD_Init>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d001      	beq.n	800c66e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c66a:	f7f4 fa19 	bl	8000aa0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c66e:	2180      	movs	r1, #128	@ 0x80
 800c670:	4808      	ldr	r0, [pc, #32]	@ (800c694 <USBD_LL_Init+0x94>)
 800c672:	f7f8 fb0c 	bl	8004c8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c676:	2240      	movs	r2, #64	@ 0x40
 800c678:	2100      	movs	r1, #0
 800c67a:	4806      	ldr	r0, [pc, #24]	@ (800c694 <USBD_LL_Init+0x94>)
 800c67c:	f7f8 fac0 	bl	8004c00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c680:	2280      	movs	r2, #128	@ 0x80
 800c682:	2101      	movs	r1, #1
 800c684:	4803      	ldr	r0, [pc, #12]	@ (800c694 <USBD_LL_Init+0x94>)
 800c686:	f7f8 fabb 	bl	8004c00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	20001af4 	.word	0x20001af4

0800c698 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7f7 f99a 	bl	80039e8 <HAL_PCD_Start>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 f990 	bl	800c9e0 <USBD_Get_USB_Status>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	4608      	mov	r0, r1
 800c6d8:	4611      	mov	r1, r2
 800c6da:	461a      	mov	r2, r3
 800c6dc:	4603      	mov	r3, r0
 800c6de:	70fb      	strb	r3, [r7, #3]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	70bb      	strb	r3, [r7, #2]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c6f6:	78bb      	ldrb	r3, [r7, #2]
 800c6f8:	883a      	ldrh	r2, [r7, #0]
 800c6fa:	78f9      	ldrb	r1, [r7, #3]
 800c6fc:	f7f7 fe9b 	bl	8004436 <HAL_PCD_EP_Open>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c704:	7bfb      	ldrb	r3, [r7, #15]
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f96a 	bl	800c9e0 <USBD_Get_USB_Status>
 800c70c:	4603      	mov	r3, r0
 800c70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c710:	7bbb      	ldrb	r3, [r7, #14]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b084      	sub	sp, #16
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	460b      	mov	r3, r1
 800c724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c734:	78fa      	ldrb	r2, [r7, #3]
 800c736:	4611      	mov	r1, r2
 800c738:	4618      	mov	r0, r3
 800c73a:	f7f7 fee6 	bl	800450a <HAL_PCD_EP_Close>
 800c73e:	4603      	mov	r3, r0
 800c740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c742:	7bfb      	ldrb	r3, [r7, #15]
 800c744:	4618      	mov	r0, r3
 800c746:	f000 f94b 	bl	800c9e0 <USBD_Get_USB_Status>
 800c74a:	4603      	mov	r3, r0
 800c74c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	460b      	mov	r3, r1
 800c762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c772:	78fa      	ldrb	r2, [r7, #3]
 800c774:	4611      	mov	r1, r2
 800c776:	4618      	mov	r0, r3
 800c778:	f7f7 ff9e 	bl	80046b8 <HAL_PCD_EP_SetStall>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c780:	7bfb      	ldrb	r3, [r7, #15]
 800c782:	4618      	mov	r0, r3
 800c784:	f000 f92c 	bl	800c9e0 <USBD_Get_USB_Status>
 800c788:	4603      	mov	r3, r0
 800c78a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c78c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	460b      	mov	r3, r1
 800c7a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7b0:	78fa      	ldrb	r2, [r7, #3]
 800c7b2:	4611      	mov	r1, r2
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7f7 ffe2 	bl	800477e <HAL_PCD_EP_ClrStall>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7be:	7bfb      	ldrb	r3, [r7, #15]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 f90d 	bl	800c9e0 <USBD_Get_USB_Status>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c7e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	da0b      	bge.n	800c808 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c7f0:	78fb      	ldrb	r3, [r7, #3]
 800c7f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c7f6:	68f9      	ldr	r1, [r7, #12]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	4413      	add	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	440b      	add	r3, r1
 800c802:	3316      	adds	r3, #22
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	e00b      	b.n	800c820 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c808:	78fb      	ldrb	r3, [r7, #3]
 800c80a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c80e:	68f9      	ldr	r1, [r7, #12]
 800c810:	4613      	mov	r3, r2
 800c812:	00db      	lsls	r3, r3, #3
 800c814:	4413      	add	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	440b      	add	r3, r1
 800c81a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c81e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c838:	2300      	movs	r3, #0
 800c83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c846:	78fa      	ldrb	r2, [r7, #3]
 800c848:	4611      	mov	r1, r2
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7f7 fdcf 	bl	80043ee <HAL_PCD_SetAddress>
 800c850:	4603      	mov	r3, r0
 800c852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c854:	7bfb      	ldrb	r3, [r7, #15]
 800c856:	4618      	mov	r0, r3
 800c858:	f000 f8c2 	bl	800c9e0 <USBD_Get_USB_Status>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c860:	7bbb      	ldrb	r3, [r7, #14]
}
 800c862:	4618      	mov	r0, r3
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b086      	sub	sp, #24
 800c86e:	af00      	add	r7, sp, #0
 800c870:	60f8      	str	r0, [r7, #12]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	603b      	str	r3, [r7, #0]
 800c876:	460b      	mov	r3, r1
 800c878:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c888:	7af9      	ldrb	r1, [r7, #11]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	f7f7 fed9 	bl	8004644 <HAL_PCD_EP_Transmit>
 800c892:	4603      	mov	r3, r0
 800c894:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c896:	7dfb      	ldrb	r3, [r7, #23]
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 f8a1 	bl	800c9e0 <USBD_Get_USB_Status>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	607a      	str	r2, [r7, #4]
 800c8b6:	603b      	str	r3, [r7, #0]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c8ca:	7af9      	ldrb	r1, [r7, #11]
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	f7f7 fe65 	bl	800459e <HAL_PCD_EP_Receive>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 f880 	bl	800c9e0 <USBD_Get_USB_Status>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b082      	sub	sp, #8
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c900:	78fa      	ldrb	r2, [r7, #3]
 800c902:	4611      	mov	r1, r2
 800c904:	4618      	mov	r0, r3
 800c906:	f7f7 fe85 	bl	8004614 <HAL_PCD_EP_GetRxCount>
 800c90a:	4603      	mov	r3, r0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	460b      	mov	r3, r1
 800c91e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c920:	78fb      	ldrb	r3, [r7, #3]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d002      	beq.n	800c92c <HAL_PCDEx_LPM_Callback+0x18>
 800c926:	2b01      	cmp	r3, #1
 800c928:	d01f      	beq.n	800c96a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c92a:	e03b      	b.n	800c9a4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	7adb      	ldrb	r3, [r3, #11]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d007      	beq.n	800c944 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c934:	f7f3 fe84 	bl	8000640 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c938:	4b1c      	ldr	r3, [pc, #112]	@ (800c9ac <HAL_PCDEx_LPM_Callback+0x98>)
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	4a1b      	ldr	r2, [pc, #108]	@ (800c9ac <HAL_PCDEx_LPM_Callback+0x98>)
 800c93e:	f023 0306 	bic.w	r3, r3, #6
 800c942:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	6812      	ldr	r2, [r2, #0]
 800c952:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c956:	f023 0301 	bic.w	r3, r3, #1
 800c95a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c962:	4618      	mov	r0, r3
 800c964:	f7fd f91b 	bl	8009b9e <USBD_LL_Resume>
    break;
 800c968:	e01c      	b.n	800c9a4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	6812      	ldr	r2, [r2, #0]
 800c978:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c97c:	f043 0301 	orr.w	r3, r3, #1
 800c980:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fd f8ec 	bl	8009b66 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	7adb      	ldrb	r3, [r3, #11]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d005      	beq.n	800c9a2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c996:	4b05      	ldr	r3, [pc, #20]	@ (800c9ac <HAL_PCDEx_LPM_Callback+0x98>)
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	4a04      	ldr	r2, [pc, #16]	@ (800c9ac <HAL_PCDEx_LPM_Callback+0x98>)
 800c99c:	f043 0306 	orr.w	r3, r3, #6
 800c9a0:	6113      	str	r3, [r2, #16]
    break;
 800c9a2:	bf00      	nop
}
 800c9a4:	bf00      	nop
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	e000ed00 	.word	0xe000ed00

0800c9b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9b8:	4b03      	ldr	r3, [pc, #12]	@ (800c9c8 <USBD_static_malloc+0x18>)
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	20001fd8 	.word	0x20001fd8

0800c9cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]

}
 800c9d4:	bf00      	nop
 800c9d6:	370c      	adds	r7, #12
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b085      	sub	sp, #20
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9ee:	79fb      	ldrb	r3, [r7, #7]
 800c9f0:	2b03      	cmp	r3, #3
 800c9f2:	d817      	bhi.n	800ca24 <USBD_Get_USB_Status+0x44>
 800c9f4:	a201      	add	r2, pc, #4	@ (adr r2, 800c9fc <USBD_Get_USB_Status+0x1c>)
 800c9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fa:	bf00      	nop
 800c9fc:	0800ca0d 	.word	0x0800ca0d
 800ca00:	0800ca13 	.word	0x0800ca13
 800ca04:	0800ca19 	.word	0x0800ca19
 800ca08:	0800ca1f 	.word	0x0800ca1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca10:	e00b      	b.n	800ca2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca12:	2303      	movs	r3, #3
 800ca14:	73fb      	strb	r3, [r7, #15]
    break;
 800ca16:	e008      	b.n	800ca2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca1c:	e005      	b.n	800ca2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	73fb      	strb	r3, [r7, #15]
    break;
 800ca22:	e002      	b.n	800ca2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca24:	2303      	movs	r3, #3
 800ca26:	73fb      	strb	r3, [r7, #15]
    break;
 800ca28:	bf00      	nop
  }
  return usb_status;
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3714      	adds	r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <__assert_func>:
 800ca38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca3a:	4614      	mov	r4, r2
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4b09      	ldr	r3, [pc, #36]	@ (800ca64 <__assert_func+0x2c>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4605      	mov	r5, r0
 800ca44:	68d8      	ldr	r0, [r3, #12]
 800ca46:	b14c      	cbz	r4, 800ca5c <__assert_func+0x24>
 800ca48:	4b07      	ldr	r3, [pc, #28]	@ (800ca68 <__assert_func+0x30>)
 800ca4a:	9100      	str	r1, [sp, #0]
 800ca4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca50:	4906      	ldr	r1, [pc, #24]	@ (800ca6c <__assert_func+0x34>)
 800ca52:	462b      	mov	r3, r5
 800ca54:	f000 f8b2 	bl	800cbbc <fiprintf>
 800ca58:	f000 fa45 	bl	800cee6 <abort>
 800ca5c:	4b04      	ldr	r3, [pc, #16]	@ (800ca70 <__assert_func+0x38>)
 800ca5e:	461c      	mov	r4, r3
 800ca60:	e7f3      	b.n	800ca4a <__assert_func+0x12>
 800ca62:	bf00      	nop
 800ca64:	20000118 	.word	0x20000118
 800ca68:	0800ecab 	.word	0x0800ecab
 800ca6c:	0800ecb8 	.word	0x0800ecb8
 800ca70:	0800ece6 	.word	0x0800ece6

0800ca74 <std>:
 800ca74:	2300      	movs	r3, #0
 800ca76:	b510      	push	{r4, lr}
 800ca78:	4604      	mov	r4, r0
 800ca7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ca7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca82:	6083      	str	r3, [r0, #8]
 800ca84:	8181      	strh	r1, [r0, #12]
 800ca86:	6643      	str	r3, [r0, #100]	@ 0x64
 800ca88:	81c2      	strh	r2, [r0, #14]
 800ca8a:	6183      	str	r3, [r0, #24]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	2208      	movs	r2, #8
 800ca90:	305c      	adds	r0, #92	@ 0x5c
 800ca92:	f000 f98c 	bl	800cdae <memset>
 800ca96:	4b0d      	ldr	r3, [pc, #52]	@ (800cacc <std+0x58>)
 800ca98:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cad0 <std+0x5c>)
 800ca9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca9e:	4b0d      	ldr	r3, [pc, #52]	@ (800cad4 <std+0x60>)
 800caa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800caa2:	4b0d      	ldr	r3, [pc, #52]	@ (800cad8 <std+0x64>)
 800caa4:	6323      	str	r3, [r4, #48]	@ 0x30
 800caa6:	4b0d      	ldr	r3, [pc, #52]	@ (800cadc <std+0x68>)
 800caa8:	6224      	str	r4, [r4, #32]
 800caaa:	429c      	cmp	r4, r3
 800caac:	d006      	beq.n	800cabc <std+0x48>
 800caae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cab2:	4294      	cmp	r4, r2
 800cab4:	d002      	beq.n	800cabc <std+0x48>
 800cab6:	33d0      	adds	r3, #208	@ 0xd0
 800cab8:	429c      	cmp	r4, r3
 800caba:	d105      	bne.n	800cac8 <std+0x54>
 800cabc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac4:	f000 b9fe 	b.w	800cec4 <__retarget_lock_init_recursive>
 800cac8:	bd10      	pop	{r4, pc}
 800caca:	bf00      	nop
 800cacc:	0800cd25 	.word	0x0800cd25
 800cad0:	0800cd4b 	.word	0x0800cd4b
 800cad4:	0800cd83 	.word	0x0800cd83
 800cad8:	0800cda7 	.word	0x0800cda7
 800cadc:	200021f8 	.word	0x200021f8

0800cae0 <stdio_exit_handler>:
 800cae0:	4a02      	ldr	r2, [pc, #8]	@ (800caec <stdio_exit_handler+0xc>)
 800cae2:	4903      	ldr	r1, [pc, #12]	@ (800caf0 <stdio_exit_handler+0x10>)
 800cae4:	4803      	ldr	r0, [pc, #12]	@ (800caf4 <stdio_exit_handler+0x14>)
 800cae6:	f000 b87b 	b.w	800cbe0 <_fwalk_sglue>
 800caea:	bf00      	nop
 800caec:	2000010c 	.word	0x2000010c
 800caf0:	0800e075 	.word	0x0800e075
 800caf4:	2000011c 	.word	0x2000011c

0800caf8 <cleanup_stdio>:
 800caf8:	6841      	ldr	r1, [r0, #4]
 800cafa:	4b0c      	ldr	r3, [pc, #48]	@ (800cb2c <cleanup_stdio+0x34>)
 800cafc:	4299      	cmp	r1, r3
 800cafe:	b510      	push	{r4, lr}
 800cb00:	4604      	mov	r4, r0
 800cb02:	d001      	beq.n	800cb08 <cleanup_stdio+0x10>
 800cb04:	f001 fab6 	bl	800e074 <_fflush_r>
 800cb08:	68a1      	ldr	r1, [r4, #8]
 800cb0a:	4b09      	ldr	r3, [pc, #36]	@ (800cb30 <cleanup_stdio+0x38>)
 800cb0c:	4299      	cmp	r1, r3
 800cb0e:	d002      	beq.n	800cb16 <cleanup_stdio+0x1e>
 800cb10:	4620      	mov	r0, r4
 800cb12:	f001 faaf 	bl	800e074 <_fflush_r>
 800cb16:	68e1      	ldr	r1, [r4, #12]
 800cb18:	4b06      	ldr	r3, [pc, #24]	@ (800cb34 <cleanup_stdio+0x3c>)
 800cb1a:	4299      	cmp	r1, r3
 800cb1c:	d004      	beq.n	800cb28 <cleanup_stdio+0x30>
 800cb1e:	4620      	mov	r0, r4
 800cb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb24:	f001 baa6 	b.w	800e074 <_fflush_r>
 800cb28:	bd10      	pop	{r4, pc}
 800cb2a:	bf00      	nop
 800cb2c:	200021f8 	.word	0x200021f8
 800cb30:	20002260 	.word	0x20002260
 800cb34:	200022c8 	.word	0x200022c8

0800cb38 <global_stdio_init.part.0>:
 800cb38:	b510      	push	{r4, lr}
 800cb3a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb68 <global_stdio_init.part.0+0x30>)
 800cb3c:	4c0b      	ldr	r4, [pc, #44]	@ (800cb6c <global_stdio_init.part.0+0x34>)
 800cb3e:	4a0c      	ldr	r2, [pc, #48]	@ (800cb70 <global_stdio_init.part.0+0x38>)
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	4620      	mov	r0, r4
 800cb44:	2200      	movs	r2, #0
 800cb46:	2104      	movs	r1, #4
 800cb48:	f7ff ff94 	bl	800ca74 <std>
 800cb4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cb50:	2201      	movs	r2, #1
 800cb52:	2109      	movs	r1, #9
 800cb54:	f7ff ff8e 	bl	800ca74 <std>
 800cb58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cb5c:	2202      	movs	r2, #2
 800cb5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb62:	2112      	movs	r1, #18
 800cb64:	f7ff bf86 	b.w	800ca74 <std>
 800cb68:	20002330 	.word	0x20002330
 800cb6c:	200021f8 	.word	0x200021f8
 800cb70:	0800cae1 	.word	0x0800cae1

0800cb74 <__sfp_lock_acquire>:
 800cb74:	4801      	ldr	r0, [pc, #4]	@ (800cb7c <__sfp_lock_acquire+0x8>)
 800cb76:	f000 b9a6 	b.w	800cec6 <__retarget_lock_acquire_recursive>
 800cb7a:	bf00      	nop
 800cb7c:	20002339 	.word	0x20002339

0800cb80 <__sfp_lock_release>:
 800cb80:	4801      	ldr	r0, [pc, #4]	@ (800cb88 <__sfp_lock_release+0x8>)
 800cb82:	f000 b9a1 	b.w	800cec8 <__retarget_lock_release_recursive>
 800cb86:	bf00      	nop
 800cb88:	20002339 	.word	0x20002339

0800cb8c <__sinit>:
 800cb8c:	b510      	push	{r4, lr}
 800cb8e:	4604      	mov	r4, r0
 800cb90:	f7ff fff0 	bl	800cb74 <__sfp_lock_acquire>
 800cb94:	6a23      	ldr	r3, [r4, #32]
 800cb96:	b11b      	cbz	r3, 800cba0 <__sinit+0x14>
 800cb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb9c:	f7ff bff0 	b.w	800cb80 <__sfp_lock_release>
 800cba0:	4b04      	ldr	r3, [pc, #16]	@ (800cbb4 <__sinit+0x28>)
 800cba2:	6223      	str	r3, [r4, #32]
 800cba4:	4b04      	ldr	r3, [pc, #16]	@ (800cbb8 <__sinit+0x2c>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1f5      	bne.n	800cb98 <__sinit+0xc>
 800cbac:	f7ff ffc4 	bl	800cb38 <global_stdio_init.part.0>
 800cbb0:	e7f2      	b.n	800cb98 <__sinit+0xc>
 800cbb2:	bf00      	nop
 800cbb4:	0800caf9 	.word	0x0800caf9
 800cbb8:	20002330 	.word	0x20002330

0800cbbc <fiprintf>:
 800cbbc:	b40e      	push	{r1, r2, r3}
 800cbbe:	b503      	push	{r0, r1, lr}
 800cbc0:	4601      	mov	r1, r0
 800cbc2:	ab03      	add	r3, sp, #12
 800cbc4:	4805      	ldr	r0, [pc, #20]	@ (800cbdc <fiprintf+0x20>)
 800cbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbca:	6800      	ldr	r0, [r0, #0]
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	f000 fddb 	bl	800d788 <_vfiprintf_r>
 800cbd2:	b002      	add	sp, #8
 800cbd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbd8:	b003      	add	sp, #12
 800cbda:	4770      	bx	lr
 800cbdc:	20000118 	.word	0x20000118

0800cbe0 <_fwalk_sglue>:
 800cbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	4688      	mov	r8, r1
 800cbe8:	4614      	mov	r4, r2
 800cbea:	2600      	movs	r6, #0
 800cbec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbf0:	f1b9 0901 	subs.w	r9, r9, #1
 800cbf4:	d505      	bpl.n	800cc02 <_fwalk_sglue+0x22>
 800cbf6:	6824      	ldr	r4, [r4, #0]
 800cbf8:	2c00      	cmp	r4, #0
 800cbfa:	d1f7      	bne.n	800cbec <_fwalk_sglue+0xc>
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc02:	89ab      	ldrh	r3, [r5, #12]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d907      	bls.n	800cc18 <_fwalk_sglue+0x38>
 800cc08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	d003      	beq.n	800cc18 <_fwalk_sglue+0x38>
 800cc10:	4629      	mov	r1, r5
 800cc12:	4638      	mov	r0, r7
 800cc14:	47c0      	blx	r8
 800cc16:	4306      	orrs	r6, r0
 800cc18:	3568      	adds	r5, #104	@ 0x68
 800cc1a:	e7e9      	b.n	800cbf0 <_fwalk_sglue+0x10>

0800cc1c <sniprintf>:
 800cc1c:	b40c      	push	{r2, r3}
 800cc1e:	b530      	push	{r4, r5, lr}
 800cc20:	4b18      	ldr	r3, [pc, #96]	@ (800cc84 <sniprintf+0x68>)
 800cc22:	1e0c      	subs	r4, r1, #0
 800cc24:	681d      	ldr	r5, [r3, #0]
 800cc26:	b09d      	sub	sp, #116	@ 0x74
 800cc28:	da08      	bge.n	800cc3c <sniprintf+0x20>
 800cc2a:	238b      	movs	r3, #139	@ 0x8b
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc32:	b01d      	add	sp, #116	@ 0x74
 800cc34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc38:	b002      	add	sp, #8
 800cc3a:	4770      	bx	lr
 800cc3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cc40:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc44:	f04f 0300 	mov.w	r3, #0
 800cc48:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cc4a:	bf14      	ite	ne
 800cc4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cc50:	4623      	moveq	r3, r4
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	9307      	str	r3, [sp, #28]
 800cc56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc5a:	9002      	str	r0, [sp, #8]
 800cc5c:	9006      	str	r0, [sp, #24]
 800cc5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cc64:	ab21      	add	r3, sp, #132	@ 0x84
 800cc66:	a902      	add	r1, sp, #8
 800cc68:	4628      	mov	r0, r5
 800cc6a:	9301      	str	r3, [sp, #4]
 800cc6c:	f000 fa96 	bl	800d19c <_svfiprintf_r>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	bfbc      	itt	lt
 800cc74:	238b      	movlt	r3, #139	@ 0x8b
 800cc76:	602b      	strlt	r3, [r5, #0]
 800cc78:	2c00      	cmp	r4, #0
 800cc7a:	d0da      	beq.n	800cc32 <sniprintf+0x16>
 800cc7c:	9b02      	ldr	r3, [sp, #8]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	701a      	strb	r2, [r3, #0]
 800cc82:	e7d6      	b.n	800cc32 <sniprintf+0x16>
 800cc84:	20000118 	.word	0x20000118

0800cc88 <siprintf>:
 800cc88:	b40e      	push	{r1, r2, r3}
 800cc8a:	b510      	push	{r4, lr}
 800cc8c:	b09d      	sub	sp, #116	@ 0x74
 800cc8e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cc90:	9002      	str	r0, [sp, #8]
 800cc92:	9006      	str	r0, [sp, #24]
 800cc94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cc98:	480a      	ldr	r0, [pc, #40]	@ (800ccc4 <siprintf+0x3c>)
 800cc9a:	9107      	str	r1, [sp, #28]
 800cc9c:	9104      	str	r1, [sp, #16]
 800cc9e:	490a      	ldr	r1, [pc, #40]	@ (800ccc8 <siprintf+0x40>)
 800cca0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cca4:	9105      	str	r1, [sp, #20]
 800cca6:	2400      	movs	r4, #0
 800cca8:	a902      	add	r1, sp, #8
 800ccaa:	6800      	ldr	r0, [r0, #0]
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ccb0:	f000 fa74 	bl	800d19c <_svfiprintf_r>
 800ccb4:	9b02      	ldr	r3, [sp, #8]
 800ccb6:	701c      	strb	r4, [r3, #0]
 800ccb8:	b01d      	add	sp, #116	@ 0x74
 800ccba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccbe:	b003      	add	sp, #12
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	20000118 	.word	0x20000118
 800ccc8:	ffff0208 	.word	0xffff0208

0800cccc <siscanf>:
 800cccc:	b40e      	push	{r1, r2, r3}
 800ccce:	b570      	push	{r4, r5, r6, lr}
 800ccd0:	b09d      	sub	sp, #116	@ 0x74
 800ccd2:	ac21      	add	r4, sp, #132	@ 0x84
 800ccd4:	2500      	movs	r5, #0
 800ccd6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ccda:	f854 6b04 	ldr.w	r6, [r4], #4
 800ccde:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cce2:	951b      	str	r5, [sp, #108]	@ 0x6c
 800cce4:	9002      	str	r0, [sp, #8]
 800cce6:	9006      	str	r0, [sp, #24]
 800cce8:	f7f3 fa9c 	bl	8000224 <strlen>
 800ccec:	4b0b      	ldr	r3, [pc, #44]	@ (800cd1c <siscanf+0x50>)
 800ccee:	9003      	str	r0, [sp, #12]
 800ccf0:	9007      	str	r0, [sp, #28]
 800ccf2:	480b      	ldr	r0, [pc, #44]	@ (800cd20 <siscanf+0x54>)
 800ccf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ccfa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ccfe:	4632      	mov	r2, r6
 800cd00:	4623      	mov	r3, r4
 800cd02:	a902      	add	r1, sp, #8
 800cd04:	6800      	ldr	r0, [r0, #0]
 800cd06:	950f      	str	r5, [sp, #60]	@ 0x3c
 800cd08:	9514      	str	r5, [sp, #80]	@ 0x50
 800cd0a:	9401      	str	r4, [sp, #4]
 800cd0c:	f000 fb9c 	bl	800d448 <__ssvfiscanf_r>
 800cd10:	b01d      	add	sp, #116	@ 0x74
 800cd12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd16:	b003      	add	sp, #12
 800cd18:	4770      	bx	lr
 800cd1a:	bf00      	nop
 800cd1c:	0800cd47 	.word	0x0800cd47
 800cd20:	20000118 	.word	0x20000118

0800cd24 <__sread>:
 800cd24:	b510      	push	{r4, lr}
 800cd26:	460c      	mov	r4, r1
 800cd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd2c:	f000 f87c 	bl	800ce28 <_read_r>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	bfab      	itete	ge
 800cd34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd36:	89a3      	ldrhlt	r3, [r4, #12]
 800cd38:	181b      	addge	r3, r3, r0
 800cd3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd3e:	bfac      	ite	ge
 800cd40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd42:	81a3      	strhlt	r3, [r4, #12]
 800cd44:	bd10      	pop	{r4, pc}

0800cd46 <__seofread>:
 800cd46:	2000      	movs	r0, #0
 800cd48:	4770      	bx	lr

0800cd4a <__swrite>:
 800cd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4e:	461f      	mov	r7, r3
 800cd50:	898b      	ldrh	r3, [r1, #12]
 800cd52:	05db      	lsls	r3, r3, #23
 800cd54:	4605      	mov	r5, r0
 800cd56:	460c      	mov	r4, r1
 800cd58:	4616      	mov	r6, r2
 800cd5a:	d505      	bpl.n	800cd68 <__swrite+0x1e>
 800cd5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd60:	2302      	movs	r3, #2
 800cd62:	2200      	movs	r2, #0
 800cd64:	f000 f84e 	bl	800ce04 <_lseek_r>
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	4632      	mov	r2, r6
 800cd76:	463b      	mov	r3, r7
 800cd78:	4628      	mov	r0, r5
 800cd7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7e:	f000 b865 	b.w	800ce4c <_write_r>

0800cd82 <__sseek>:
 800cd82:	b510      	push	{r4, lr}
 800cd84:	460c      	mov	r4, r1
 800cd86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd8a:	f000 f83b 	bl	800ce04 <_lseek_r>
 800cd8e:	1c43      	adds	r3, r0, #1
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	bf15      	itete	ne
 800cd94:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd9e:	81a3      	strheq	r3, [r4, #12]
 800cda0:	bf18      	it	ne
 800cda2:	81a3      	strhne	r3, [r4, #12]
 800cda4:	bd10      	pop	{r4, pc}

0800cda6 <__sclose>:
 800cda6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdaa:	f000 b81b 	b.w	800cde4 <_close_r>

0800cdae <memset>:
 800cdae:	4402      	add	r2, r0
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d100      	bne.n	800cdb8 <memset+0xa>
 800cdb6:	4770      	bx	lr
 800cdb8:	f803 1b01 	strb.w	r1, [r3], #1
 800cdbc:	e7f9      	b.n	800cdb2 <memset+0x4>

0800cdbe <strncmp>:
 800cdbe:	b510      	push	{r4, lr}
 800cdc0:	b16a      	cbz	r2, 800cdde <strncmp+0x20>
 800cdc2:	3901      	subs	r1, #1
 800cdc4:	1884      	adds	r4, r0, r2
 800cdc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d103      	bne.n	800cdda <strncmp+0x1c>
 800cdd2:	42a0      	cmp	r0, r4
 800cdd4:	d001      	beq.n	800cdda <strncmp+0x1c>
 800cdd6:	2a00      	cmp	r2, #0
 800cdd8:	d1f5      	bne.n	800cdc6 <strncmp+0x8>
 800cdda:	1ad0      	subs	r0, r2, r3
 800cddc:	bd10      	pop	{r4, pc}
 800cdde:	4610      	mov	r0, r2
 800cde0:	e7fc      	b.n	800cddc <strncmp+0x1e>
	...

0800cde4 <_close_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4d06      	ldr	r5, [pc, #24]	@ (800ce00 <_close_r+0x1c>)
 800cde8:	2300      	movs	r3, #0
 800cdea:	4604      	mov	r4, r0
 800cdec:	4608      	mov	r0, r1
 800cdee:	602b      	str	r3, [r5, #0]
 800cdf0:	f7f4 f892 	bl	8000f18 <_close>
 800cdf4:	1c43      	adds	r3, r0, #1
 800cdf6:	d102      	bne.n	800cdfe <_close_r+0x1a>
 800cdf8:	682b      	ldr	r3, [r5, #0]
 800cdfa:	b103      	cbz	r3, 800cdfe <_close_r+0x1a>
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	bd38      	pop	{r3, r4, r5, pc}
 800ce00:	20002334 	.word	0x20002334

0800ce04 <_lseek_r>:
 800ce04:	b538      	push	{r3, r4, r5, lr}
 800ce06:	4d07      	ldr	r5, [pc, #28]	@ (800ce24 <_lseek_r+0x20>)
 800ce08:	4604      	mov	r4, r0
 800ce0a:	4608      	mov	r0, r1
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	2200      	movs	r2, #0
 800ce10:	602a      	str	r2, [r5, #0]
 800ce12:	461a      	mov	r2, r3
 800ce14:	f7f4 f8a7 	bl	8000f66 <_lseek>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_lseek_r+0x1e>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_lseek_r+0x1e>
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	20002334 	.word	0x20002334

0800ce28 <_read_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4d07      	ldr	r5, [pc, #28]	@ (800ce48 <_read_r+0x20>)
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	4608      	mov	r0, r1
 800ce30:	4611      	mov	r1, r2
 800ce32:	2200      	movs	r2, #0
 800ce34:	602a      	str	r2, [r5, #0]
 800ce36:	461a      	mov	r2, r3
 800ce38:	f7f4 f835 	bl	8000ea6 <_read>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d102      	bne.n	800ce46 <_read_r+0x1e>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	b103      	cbz	r3, 800ce46 <_read_r+0x1e>
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	20002334 	.word	0x20002334

0800ce4c <_write_r>:
 800ce4c:	b538      	push	{r3, r4, r5, lr}
 800ce4e:	4d07      	ldr	r5, [pc, #28]	@ (800ce6c <_write_r+0x20>)
 800ce50:	4604      	mov	r4, r0
 800ce52:	4608      	mov	r0, r1
 800ce54:	4611      	mov	r1, r2
 800ce56:	2200      	movs	r2, #0
 800ce58:	602a      	str	r2, [r5, #0]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	f7f4 f840 	bl	8000ee0 <_write>
 800ce60:	1c43      	adds	r3, r0, #1
 800ce62:	d102      	bne.n	800ce6a <_write_r+0x1e>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	b103      	cbz	r3, 800ce6a <_write_r+0x1e>
 800ce68:	6023      	str	r3, [r4, #0]
 800ce6a:	bd38      	pop	{r3, r4, r5, pc}
 800ce6c:	20002334 	.word	0x20002334

0800ce70 <__errno>:
 800ce70:	4b01      	ldr	r3, [pc, #4]	@ (800ce78 <__errno+0x8>)
 800ce72:	6818      	ldr	r0, [r3, #0]
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	20000118 	.word	0x20000118

0800ce7c <__libc_init_array>:
 800ce7c:	b570      	push	{r4, r5, r6, lr}
 800ce7e:	4d0d      	ldr	r5, [pc, #52]	@ (800ceb4 <__libc_init_array+0x38>)
 800ce80:	4c0d      	ldr	r4, [pc, #52]	@ (800ceb8 <__libc_init_array+0x3c>)
 800ce82:	1b64      	subs	r4, r4, r5
 800ce84:	10a4      	asrs	r4, r4, #2
 800ce86:	2600      	movs	r6, #0
 800ce88:	42a6      	cmp	r6, r4
 800ce8a:	d109      	bne.n	800cea0 <__libc_init_array+0x24>
 800ce8c:	4d0b      	ldr	r5, [pc, #44]	@ (800cebc <__libc_init_array+0x40>)
 800ce8e:	4c0c      	ldr	r4, [pc, #48]	@ (800cec0 <__libc_init_array+0x44>)
 800ce90:	f001 fc56 	bl	800e740 <_init>
 800ce94:	1b64      	subs	r4, r4, r5
 800ce96:	10a4      	asrs	r4, r4, #2
 800ce98:	2600      	movs	r6, #0
 800ce9a:	42a6      	cmp	r6, r4
 800ce9c:	d105      	bne.n	800ceaa <__libc_init_array+0x2e>
 800ce9e:	bd70      	pop	{r4, r5, r6, pc}
 800cea0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cea4:	4798      	blx	r3
 800cea6:	3601      	adds	r6, #1
 800cea8:	e7ee      	b.n	800ce88 <__libc_init_array+0xc>
 800ceaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceae:	4798      	blx	r3
 800ceb0:	3601      	adds	r6, #1
 800ceb2:	e7f2      	b.n	800ce9a <__libc_init_array+0x1e>
 800ceb4:	0800ee40 	.word	0x0800ee40
 800ceb8:	0800ee40 	.word	0x0800ee40
 800cebc:	0800ee40 	.word	0x0800ee40
 800cec0:	0800ee44 	.word	0x0800ee44

0800cec4 <__retarget_lock_init_recursive>:
 800cec4:	4770      	bx	lr

0800cec6 <__retarget_lock_acquire_recursive>:
 800cec6:	4770      	bx	lr

0800cec8 <__retarget_lock_release_recursive>:
 800cec8:	4770      	bx	lr

0800ceca <memcpy>:
 800ceca:	440a      	add	r2, r1
 800cecc:	4291      	cmp	r1, r2
 800cece:	f100 33ff 	add.w	r3, r0, #4294967295
 800ced2:	d100      	bne.n	800ced6 <memcpy+0xc>
 800ced4:	4770      	bx	lr
 800ced6:	b510      	push	{r4, lr}
 800ced8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cedc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cee0:	4291      	cmp	r1, r2
 800cee2:	d1f9      	bne.n	800ced8 <memcpy+0xe>
 800cee4:	bd10      	pop	{r4, pc}

0800cee6 <abort>:
 800cee6:	b508      	push	{r3, lr}
 800cee8:	2006      	movs	r0, #6
 800ceea:	f001 fa35 	bl	800e358 <raise>
 800ceee:	2001      	movs	r0, #1
 800cef0:	f7f3 ffce 	bl	8000e90 <_exit>

0800cef4 <_free_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4605      	mov	r5, r0
 800cef8:	2900      	cmp	r1, #0
 800cefa:	d041      	beq.n	800cf80 <_free_r+0x8c>
 800cefc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf00:	1f0c      	subs	r4, r1, #4
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	bfb8      	it	lt
 800cf06:	18e4      	addlt	r4, r4, r3
 800cf08:	f000 f8e0 	bl	800d0cc <__malloc_lock>
 800cf0c:	4a1d      	ldr	r2, [pc, #116]	@ (800cf84 <_free_r+0x90>)
 800cf0e:	6813      	ldr	r3, [r2, #0]
 800cf10:	b933      	cbnz	r3, 800cf20 <_free_r+0x2c>
 800cf12:	6063      	str	r3, [r4, #4]
 800cf14:	6014      	str	r4, [r2, #0]
 800cf16:	4628      	mov	r0, r5
 800cf18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf1c:	f000 b8dc 	b.w	800d0d8 <__malloc_unlock>
 800cf20:	42a3      	cmp	r3, r4
 800cf22:	d908      	bls.n	800cf36 <_free_r+0x42>
 800cf24:	6820      	ldr	r0, [r4, #0]
 800cf26:	1821      	adds	r1, r4, r0
 800cf28:	428b      	cmp	r3, r1
 800cf2a:	bf01      	itttt	eq
 800cf2c:	6819      	ldreq	r1, [r3, #0]
 800cf2e:	685b      	ldreq	r3, [r3, #4]
 800cf30:	1809      	addeq	r1, r1, r0
 800cf32:	6021      	streq	r1, [r4, #0]
 800cf34:	e7ed      	b.n	800cf12 <_free_r+0x1e>
 800cf36:	461a      	mov	r2, r3
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	b10b      	cbz	r3, 800cf40 <_free_r+0x4c>
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	d9fa      	bls.n	800cf36 <_free_r+0x42>
 800cf40:	6811      	ldr	r1, [r2, #0]
 800cf42:	1850      	adds	r0, r2, r1
 800cf44:	42a0      	cmp	r0, r4
 800cf46:	d10b      	bne.n	800cf60 <_free_r+0x6c>
 800cf48:	6820      	ldr	r0, [r4, #0]
 800cf4a:	4401      	add	r1, r0
 800cf4c:	1850      	adds	r0, r2, r1
 800cf4e:	4283      	cmp	r3, r0
 800cf50:	6011      	str	r1, [r2, #0]
 800cf52:	d1e0      	bne.n	800cf16 <_free_r+0x22>
 800cf54:	6818      	ldr	r0, [r3, #0]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	6053      	str	r3, [r2, #4]
 800cf5a:	4408      	add	r0, r1
 800cf5c:	6010      	str	r0, [r2, #0]
 800cf5e:	e7da      	b.n	800cf16 <_free_r+0x22>
 800cf60:	d902      	bls.n	800cf68 <_free_r+0x74>
 800cf62:	230c      	movs	r3, #12
 800cf64:	602b      	str	r3, [r5, #0]
 800cf66:	e7d6      	b.n	800cf16 <_free_r+0x22>
 800cf68:	6820      	ldr	r0, [r4, #0]
 800cf6a:	1821      	adds	r1, r4, r0
 800cf6c:	428b      	cmp	r3, r1
 800cf6e:	bf04      	itt	eq
 800cf70:	6819      	ldreq	r1, [r3, #0]
 800cf72:	685b      	ldreq	r3, [r3, #4]
 800cf74:	6063      	str	r3, [r4, #4]
 800cf76:	bf04      	itt	eq
 800cf78:	1809      	addeq	r1, r1, r0
 800cf7a:	6021      	streq	r1, [r4, #0]
 800cf7c:	6054      	str	r4, [r2, #4]
 800cf7e:	e7ca      	b.n	800cf16 <_free_r+0x22>
 800cf80:	bd38      	pop	{r3, r4, r5, pc}
 800cf82:	bf00      	nop
 800cf84:	20002340 	.word	0x20002340

0800cf88 <sbrk_aligned>:
 800cf88:	b570      	push	{r4, r5, r6, lr}
 800cf8a:	4e0f      	ldr	r6, [pc, #60]	@ (800cfc8 <sbrk_aligned+0x40>)
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	6831      	ldr	r1, [r6, #0]
 800cf90:	4605      	mov	r5, r0
 800cf92:	b911      	cbnz	r1, 800cf9a <sbrk_aligned+0x12>
 800cf94:	f001 f9fc 	bl	800e390 <_sbrk_r>
 800cf98:	6030      	str	r0, [r6, #0]
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f001 f9f7 	bl	800e390 <_sbrk_r>
 800cfa2:	1c43      	adds	r3, r0, #1
 800cfa4:	d103      	bne.n	800cfae <sbrk_aligned+0x26>
 800cfa6:	f04f 34ff 	mov.w	r4, #4294967295
 800cfaa:	4620      	mov	r0, r4
 800cfac:	bd70      	pop	{r4, r5, r6, pc}
 800cfae:	1cc4      	adds	r4, r0, #3
 800cfb0:	f024 0403 	bic.w	r4, r4, #3
 800cfb4:	42a0      	cmp	r0, r4
 800cfb6:	d0f8      	beq.n	800cfaa <sbrk_aligned+0x22>
 800cfb8:	1a21      	subs	r1, r4, r0
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f001 f9e8 	bl	800e390 <_sbrk_r>
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	d1f2      	bne.n	800cfaa <sbrk_aligned+0x22>
 800cfc4:	e7ef      	b.n	800cfa6 <sbrk_aligned+0x1e>
 800cfc6:	bf00      	nop
 800cfc8:	2000233c 	.word	0x2000233c

0800cfcc <_malloc_r>:
 800cfcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd0:	1ccd      	adds	r5, r1, #3
 800cfd2:	f025 0503 	bic.w	r5, r5, #3
 800cfd6:	3508      	adds	r5, #8
 800cfd8:	2d0c      	cmp	r5, #12
 800cfda:	bf38      	it	cc
 800cfdc:	250c      	movcc	r5, #12
 800cfde:	2d00      	cmp	r5, #0
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	db01      	blt.n	800cfe8 <_malloc_r+0x1c>
 800cfe4:	42a9      	cmp	r1, r5
 800cfe6:	d904      	bls.n	800cff2 <_malloc_r+0x26>
 800cfe8:	230c      	movs	r3, #12
 800cfea:	6033      	str	r3, [r6, #0]
 800cfec:	2000      	movs	r0, #0
 800cfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0c8 <_malloc_r+0xfc>
 800cff6:	f000 f869 	bl	800d0cc <__malloc_lock>
 800cffa:	f8d8 3000 	ldr.w	r3, [r8]
 800cffe:	461c      	mov	r4, r3
 800d000:	bb44      	cbnz	r4, 800d054 <_malloc_r+0x88>
 800d002:	4629      	mov	r1, r5
 800d004:	4630      	mov	r0, r6
 800d006:	f7ff ffbf 	bl	800cf88 <sbrk_aligned>
 800d00a:	1c43      	adds	r3, r0, #1
 800d00c:	4604      	mov	r4, r0
 800d00e:	d158      	bne.n	800d0c2 <_malloc_r+0xf6>
 800d010:	f8d8 4000 	ldr.w	r4, [r8]
 800d014:	4627      	mov	r7, r4
 800d016:	2f00      	cmp	r7, #0
 800d018:	d143      	bne.n	800d0a2 <_malloc_r+0xd6>
 800d01a:	2c00      	cmp	r4, #0
 800d01c:	d04b      	beq.n	800d0b6 <_malloc_r+0xea>
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	4639      	mov	r1, r7
 800d022:	4630      	mov	r0, r6
 800d024:	eb04 0903 	add.w	r9, r4, r3
 800d028:	f001 f9b2 	bl	800e390 <_sbrk_r>
 800d02c:	4581      	cmp	r9, r0
 800d02e:	d142      	bne.n	800d0b6 <_malloc_r+0xea>
 800d030:	6821      	ldr	r1, [r4, #0]
 800d032:	1a6d      	subs	r5, r5, r1
 800d034:	4629      	mov	r1, r5
 800d036:	4630      	mov	r0, r6
 800d038:	f7ff ffa6 	bl	800cf88 <sbrk_aligned>
 800d03c:	3001      	adds	r0, #1
 800d03e:	d03a      	beq.n	800d0b6 <_malloc_r+0xea>
 800d040:	6823      	ldr	r3, [r4, #0]
 800d042:	442b      	add	r3, r5
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	f8d8 3000 	ldr.w	r3, [r8]
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	bb62      	cbnz	r2, 800d0a8 <_malloc_r+0xdc>
 800d04e:	f8c8 7000 	str.w	r7, [r8]
 800d052:	e00f      	b.n	800d074 <_malloc_r+0xa8>
 800d054:	6822      	ldr	r2, [r4, #0]
 800d056:	1b52      	subs	r2, r2, r5
 800d058:	d420      	bmi.n	800d09c <_malloc_r+0xd0>
 800d05a:	2a0b      	cmp	r2, #11
 800d05c:	d917      	bls.n	800d08e <_malloc_r+0xc2>
 800d05e:	1961      	adds	r1, r4, r5
 800d060:	42a3      	cmp	r3, r4
 800d062:	6025      	str	r5, [r4, #0]
 800d064:	bf18      	it	ne
 800d066:	6059      	strne	r1, [r3, #4]
 800d068:	6863      	ldr	r3, [r4, #4]
 800d06a:	bf08      	it	eq
 800d06c:	f8c8 1000 	streq.w	r1, [r8]
 800d070:	5162      	str	r2, [r4, r5]
 800d072:	604b      	str	r3, [r1, #4]
 800d074:	4630      	mov	r0, r6
 800d076:	f000 f82f 	bl	800d0d8 <__malloc_unlock>
 800d07a:	f104 000b 	add.w	r0, r4, #11
 800d07e:	1d23      	adds	r3, r4, #4
 800d080:	f020 0007 	bic.w	r0, r0, #7
 800d084:	1ac2      	subs	r2, r0, r3
 800d086:	bf1c      	itt	ne
 800d088:	1a1b      	subne	r3, r3, r0
 800d08a:	50a3      	strne	r3, [r4, r2]
 800d08c:	e7af      	b.n	800cfee <_malloc_r+0x22>
 800d08e:	6862      	ldr	r2, [r4, #4]
 800d090:	42a3      	cmp	r3, r4
 800d092:	bf0c      	ite	eq
 800d094:	f8c8 2000 	streq.w	r2, [r8]
 800d098:	605a      	strne	r2, [r3, #4]
 800d09a:	e7eb      	b.n	800d074 <_malloc_r+0xa8>
 800d09c:	4623      	mov	r3, r4
 800d09e:	6864      	ldr	r4, [r4, #4]
 800d0a0:	e7ae      	b.n	800d000 <_malloc_r+0x34>
 800d0a2:	463c      	mov	r4, r7
 800d0a4:	687f      	ldr	r7, [r7, #4]
 800d0a6:	e7b6      	b.n	800d016 <_malloc_r+0x4a>
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	42a3      	cmp	r3, r4
 800d0ae:	d1fb      	bne.n	800d0a8 <_malloc_r+0xdc>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	6053      	str	r3, [r2, #4]
 800d0b4:	e7de      	b.n	800d074 <_malloc_r+0xa8>
 800d0b6:	230c      	movs	r3, #12
 800d0b8:	6033      	str	r3, [r6, #0]
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f000 f80c 	bl	800d0d8 <__malloc_unlock>
 800d0c0:	e794      	b.n	800cfec <_malloc_r+0x20>
 800d0c2:	6005      	str	r5, [r0, #0]
 800d0c4:	e7d6      	b.n	800d074 <_malloc_r+0xa8>
 800d0c6:	bf00      	nop
 800d0c8:	20002340 	.word	0x20002340

0800d0cc <__malloc_lock>:
 800d0cc:	4801      	ldr	r0, [pc, #4]	@ (800d0d4 <__malloc_lock+0x8>)
 800d0ce:	f7ff befa 	b.w	800cec6 <__retarget_lock_acquire_recursive>
 800d0d2:	bf00      	nop
 800d0d4:	20002338 	.word	0x20002338

0800d0d8 <__malloc_unlock>:
 800d0d8:	4801      	ldr	r0, [pc, #4]	@ (800d0e0 <__malloc_unlock+0x8>)
 800d0da:	f7ff bef5 	b.w	800cec8 <__retarget_lock_release_recursive>
 800d0de:	bf00      	nop
 800d0e0:	20002338 	.word	0x20002338

0800d0e4 <__ssputs_r>:
 800d0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e8:	688e      	ldr	r6, [r1, #8]
 800d0ea:	461f      	mov	r7, r3
 800d0ec:	42be      	cmp	r6, r7
 800d0ee:	680b      	ldr	r3, [r1, #0]
 800d0f0:	4682      	mov	sl, r0
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	4690      	mov	r8, r2
 800d0f6:	d82d      	bhi.n	800d154 <__ssputs_r+0x70>
 800d0f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d100:	d026      	beq.n	800d150 <__ssputs_r+0x6c>
 800d102:	6965      	ldr	r5, [r4, #20]
 800d104:	6909      	ldr	r1, [r1, #16]
 800d106:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d10a:	eba3 0901 	sub.w	r9, r3, r1
 800d10e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d112:	1c7b      	adds	r3, r7, #1
 800d114:	444b      	add	r3, r9
 800d116:	106d      	asrs	r5, r5, #1
 800d118:	429d      	cmp	r5, r3
 800d11a:	bf38      	it	cc
 800d11c:	461d      	movcc	r5, r3
 800d11e:	0553      	lsls	r3, r2, #21
 800d120:	d527      	bpl.n	800d172 <__ssputs_r+0x8e>
 800d122:	4629      	mov	r1, r5
 800d124:	f7ff ff52 	bl	800cfcc <_malloc_r>
 800d128:	4606      	mov	r6, r0
 800d12a:	b360      	cbz	r0, 800d186 <__ssputs_r+0xa2>
 800d12c:	6921      	ldr	r1, [r4, #16]
 800d12e:	464a      	mov	r2, r9
 800d130:	f7ff fecb 	bl	800ceca <memcpy>
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d13a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	6126      	str	r6, [r4, #16]
 800d142:	6165      	str	r5, [r4, #20]
 800d144:	444e      	add	r6, r9
 800d146:	eba5 0509 	sub.w	r5, r5, r9
 800d14a:	6026      	str	r6, [r4, #0]
 800d14c:	60a5      	str	r5, [r4, #8]
 800d14e:	463e      	mov	r6, r7
 800d150:	42be      	cmp	r6, r7
 800d152:	d900      	bls.n	800d156 <__ssputs_r+0x72>
 800d154:	463e      	mov	r6, r7
 800d156:	6820      	ldr	r0, [r4, #0]
 800d158:	4632      	mov	r2, r6
 800d15a:	4641      	mov	r1, r8
 800d15c:	f001 f8ba 	bl	800e2d4 <memmove>
 800d160:	68a3      	ldr	r3, [r4, #8]
 800d162:	1b9b      	subs	r3, r3, r6
 800d164:	60a3      	str	r3, [r4, #8]
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	4433      	add	r3, r6
 800d16a:	6023      	str	r3, [r4, #0]
 800d16c:	2000      	movs	r0, #0
 800d16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d172:	462a      	mov	r2, r5
 800d174:	f001 f91c 	bl	800e3b0 <_realloc_r>
 800d178:	4606      	mov	r6, r0
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d1e0      	bne.n	800d140 <__ssputs_r+0x5c>
 800d17e:	6921      	ldr	r1, [r4, #16]
 800d180:	4650      	mov	r0, sl
 800d182:	f7ff feb7 	bl	800cef4 <_free_r>
 800d186:	230c      	movs	r3, #12
 800d188:	f8ca 3000 	str.w	r3, [sl]
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	f04f 30ff 	mov.w	r0, #4294967295
 800d198:	e7e9      	b.n	800d16e <__ssputs_r+0x8a>
	...

0800d19c <_svfiprintf_r>:
 800d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a0:	4698      	mov	r8, r3
 800d1a2:	898b      	ldrh	r3, [r1, #12]
 800d1a4:	061b      	lsls	r3, r3, #24
 800d1a6:	b09d      	sub	sp, #116	@ 0x74
 800d1a8:	4607      	mov	r7, r0
 800d1aa:	460d      	mov	r5, r1
 800d1ac:	4614      	mov	r4, r2
 800d1ae:	d510      	bpl.n	800d1d2 <_svfiprintf_r+0x36>
 800d1b0:	690b      	ldr	r3, [r1, #16]
 800d1b2:	b973      	cbnz	r3, 800d1d2 <_svfiprintf_r+0x36>
 800d1b4:	2140      	movs	r1, #64	@ 0x40
 800d1b6:	f7ff ff09 	bl	800cfcc <_malloc_r>
 800d1ba:	6028      	str	r0, [r5, #0]
 800d1bc:	6128      	str	r0, [r5, #16]
 800d1be:	b930      	cbnz	r0, 800d1ce <_svfiprintf_r+0x32>
 800d1c0:	230c      	movs	r3, #12
 800d1c2:	603b      	str	r3, [r7, #0]
 800d1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c8:	b01d      	add	sp, #116	@ 0x74
 800d1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ce:	2340      	movs	r3, #64	@ 0x40
 800d1d0:	616b      	str	r3, [r5, #20]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1d6:	2320      	movs	r3, #32
 800d1d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1e0:	2330      	movs	r3, #48	@ 0x30
 800d1e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d380 <_svfiprintf_r+0x1e4>
 800d1e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1ea:	f04f 0901 	mov.w	r9, #1
 800d1ee:	4623      	mov	r3, r4
 800d1f0:	469a      	mov	sl, r3
 800d1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1f6:	b10a      	cbz	r2, 800d1fc <_svfiprintf_r+0x60>
 800d1f8:	2a25      	cmp	r2, #37	@ 0x25
 800d1fa:	d1f9      	bne.n	800d1f0 <_svfiprintf_r+0x54>
 800d1fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d200:	d00b      	beq.n	800d21a <_svfiprintf_r+0x7e>
 800d202:	465b      	mov	r3, fp
 800d204:	4622      	mov	r2, r4
 800d206:	4629      	mov	r1, r5
 800d208:	4638      	mov	r0, r7
 800d20a:	f7ff ff6b 	bl	800d0e4 <__ssputs_r>
 800d20e:	3001      	adds	r0, #1
 800d210:	f000 80a7 	beq.w	800d362 <_svfiprintf_r+0x1c6>
 800d214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d216:	445a      	add	r2, fp
 800d218:	9209      	str	r2, [sp, #36]	@ 0x24
 800d21a:	f89a 3000 	ldrb.w	r3, [sl]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 809f 	beq.w	800d362 <_svfiprintf_r+0x1c6>
 800d224:	2300      	movs	r3, #0
 800d226:	f04f 32ff 	mov.w	r2, #4294967295
 800d22a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d22e:	f10a 0a01 	add.w	sl, sl, #1
 800d232:	9304      	str	r3, [sp, #16]
 800d234:	9307      	str	r3, [sp, #28]
 800d236:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d23a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d23c:	4654      	mov	r4, sl
 800d23e:	2205      	movs	r2, #5
 800d240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d244:	484e      	ldr	r0, [pc, #312]	@ (800d380 <_svfiprintf_r+0x1e4>)
 800d246:	f7f2 fffb 	bl	8000240 <memchr>
 800d24a:	9a04      	ldr	r2, [sp, #16]
 800d24c:	b9d8      	cbnz	r0, 800d286 <_svfiprintf_r+0xea>
 800d24e:	06d0      	lsls	r0, r2, #27
 800d250:	bf44      	itt	mi
 800d252:	2320      	movmi	r3, #32
 800d254:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d258:	0711      	lsls	r1, r2, #28
 800d25a:	bf44      	itt	mi
 800d25c:	232b      	movmi	r3, #43	@ 0x2b
 800d25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d262:	f89a 3000 	ldrb.w	r3, [sl]
 800d266:	2b2a      	cmp	r3, #42	@ 0x2a
 800d268:	d015      	beq.n	800d296 <_svfiprintf_r+0xfa>
 800d26a:	9a07      	ldr	r2, [sp, #28]
 800d26c:	4654      	mov	r4, sl
 800d26e:	2000      	movs	r0, #0
 800d270:	f04f 0c0a 	mov.w	ip, #10
 800d274:	4621      	mov	r1, r4
 800d276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d27a:	3b30      	subs	r3, #48	@ 0x30
 800d27c:	2b09      	cmp	r3, #9
 800d27e:	d94b      	bls.n	800d318 <_svfiprintf_r+0x17c>
 800d280:	b1b0      	cbz	r0, 800d2b0 <_svfiprintf_r+0x114>
 800d282:	9207      	str	r2, [sp, #28]
 800d284:	e014      	b.n	800d2b0 <_svfiprintf_r+0x114>
 800d286:	eba0 0308 	sub.w	r3, r0, r8
 800d28a:	fa09 f303 	lsl.w	r3, r9, r3
 800d28e:	4313      	orrs	r3, r2
 800d290:	9304      	str	r3, [sp, #16]
 800d292:	46a2      	mov	sl, r4
 800d294:	e7d2      	b.n	800d23c <_svfiprintf_r+0xa0>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	1d19      	adds	r1, r3, #4
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	9103      	str	r1, [sp, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	bfbb      	ittet	lt
 800d2a2:	425b      	neglt	r3, r3
 800d2a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d2a8:	9307      	strge	r3, [sp, #28]
 800d2aa:	9307      	strlt	r3, [sp, #28]
 800d2ac:	bfb8      	it	lt
 800d2ae:	9204      	strlt	r2, [sp, #16]
 800d2b0:	7823      	ldrb	r3, [r4, #0]
 800d2b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2b4:	d10a      	bne.n	800d2cc <_svfiprintf_r+0x130>
 800d2b6:	7863      	ldrb	r3, [r4, #1]
 800d2b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2ba:	d132      	bne.n	800d322 <_svfiprintf_r+0x186>
 800d2bc:	9b03      	ldr	r3, [sp, #12]
 800d2be:	1d1a      	adds	r2, r3, #4
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	9203      	str	r2, [sp, #12]
 800d2c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2c8:	3402      	adds	r4, #2
 800d2ca:	9305      	str	r3, [sp, #20]
 800d2cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d390 <_svfiprintf_r+0x1f4>
 800d2d0:	7821      	ldrb	r1, [r4, #0]
 800d2d2:	2203      	movs	r2, #3
 800d2d4:	4650      	mov	r0, sl
 800d2d6:	f7f2 ffb3 	bl	8000240 <memchr>
 800d2da:	b138      	cbz	r0, 800d2ec <_svfiprintf_r+0x150>
 800d2dc:	9b04      	ldr	r3, [sp, #16]
 800d2de:	eba0 000a 	sub.w	r0, r0, sl
 800d2e2:	2240      	movs	r2, #64	@ 0x40
 800d2e4:	4082      	lsls	r2, r0
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	3401      	adds	r4, #1
 800d2ea:	9304      	str	r3, [sp, #16]
 800d2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f0:	4824      	ldr	r0, [pc, #144]	@ (800d384 <_svfiprintf_r+0x1e8>)
 800d2f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2f6:	2206      	movs	r2, #6
 800d2f8:	f7f2 ffa2 	bl	8000240 <memchr>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d036      	beq.n	800d36e <_svfiprintf_r+0x1d2>
 800d300:	4b21      	ldr	r3, [pc, #132]	@ (800d388 <_svfiprintf_r+0x1ec>)
 800d302:	bb1b      	cbnz	r3, 800d34c <_svfiprintf_r+0x1b0>
 800d304:	9b03      	ldr	r3, [sp, #12]
 800d306:	3307      	adds	r3, #7
 800d308:	f023 0307 	bic.w	r3, r3, #7
 800d30c:	3308      	adds	r3, #8
 800d30e:	9303      	str	r3, [sp, #12]
 800d310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d312:	4433      	add	r3, r6
 800d314:	9309      	str	r3, [sp, #36]	@ 0x24
 800d316:	e76a      	b.n	800d1ee <_svfiprintf_r+0x52>
 800d318:	fb0c 3202 	mla	r2, ip, r2, r3
 800d31c:	460c      	mov	r4, r1
 800d31e:	2001      	movs	r0, #1
 800d320:	e7a8      	b.n	800d274 <_svfiprintf_r+0xd8>
 800d322:	2300      	movs	r3, #0
 800d324:	3401      	adds	r4, #1
 800d326:	9305      	str	r3, [sp, #20]
 800d328:	4619      	mov	r1, r3
 800d32a:	f04f 0c0a 	mov.w	ip, #10
 800d32e:	4620      	mov	r0, r4
 800d330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d334:	3a30      	subs	r2, #48	@ 0x30
 800d336:	2a09      	cmp	r2, #9
 800d338:	d903      	bls.n	800d342 <_svfiprintf_r+0x1a6>
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d0c6      	beq.n	800d2cc <_svfiprintf_r+0x130>
 800d33e:	9105      	str	r1, [sp, #20]
 800d340:	e7c4      	b.n	800d2cc <_svfiprintf_r+0x130>
 800d342:	fb0c 2101 	mla	r1, ip, r1, r2
 800d346:	4604      	mov	r4, r0
 800d348:	2301      	movs	r3, #1
 800d34a:	e7f0      	b.n	800d32e <_svfiprintf_r+0x192>
 800d34c:	ab03      	add	r3, sp, #12
 800d34e:	9300      	str	r3, [sp, #0]
 800d350:	462a      	mov	r2, r5
 800d352:	4b0e      	ldr	r3, [pc, #56]	@ (800d38c <_svfiprintf_r+0x1f0>)
 800d354:	a904      	add	r1, sp, #16
 800d356:	4638      	mov	r0, r7
 800d358:	f3af 8000 	nop.w
 800d35c:	1c42      	adds	r2, r0, #1
 800d35e:	4606      	mov	r6, r0
 800d360:	d1d6      	bne.n	800d310 <_svfiprintf_r+0x174>
 800d362:	89ab      	ldrh	r3, [r5, #12]
 800d364:	065b      	lsls	r3, r3, #25
 800d366:	f53f af2d 	bmi.w	800d1c4 <_svfiprintf_r+0x28>
 800d36a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d36c:	e72c      	b.n	800d1c8 <_svfiprintf_r+0x2c>
 800d36e:	ab03      	add	r3, sp, #12
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	462a      	mov	r2, r5
 800d374:	4b05      	ldr	r3, [pc, #20]	@ (800d38c <_svfiprintf_r+0x1f0>)
 800d376:	a904      	add	r1, sp, #16
 800d378:	4638      	mov	r0, r7
 800d37a:	f000 fb8b 	bl	800da94 <_printf_i>
 800d37e:	e7ed      	b.n	800d35c <_svfiprintf_r+0x1c0>
 800d380:	0800ece7 	.word	0x0800ece7
 800d384:	0800ecf1 	.word	0x0800ecf1
 800d388:	00000000 	.word	0x00000000
 800d38c:	0800d0e5 	.word	0x0800d0e5
 800d390:	0800eced 	.word	0x0800eced

0800d394 <_sungetc_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	1c4b      	adds	r3, r1, #1
 800d398:	4614      	mov	r4, r2
 800d39a:	d103      	bne.n	800d3a4 <_sungetc_r+0x10>
 800d39c:	f04f 35ff 	mov.w	r5, #4294967295
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	8993      	ldrh	r3, [r2, #12]
 800d3a6:	f023 0320 	bic.w	r3, r3, #32
 800d3aa:	8193      	strh	r3, [r2, #12]
 800d3ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3ae:	6852      	ldr	r2, [r2, #4]
 800d3b0:	b2cd      	uxtb	r5, r1
 800d3b2:	b18b      	cbz	r3, 800d3d8 <_sungetc_r+0x44>
 800d3b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	dd08      	ble.n	800d3cc <_sungetc_r+0x38>
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	1e5a      	subs	r2, r3, #1
 800d3be:	6022      	str	r2, [r4, #0]
 800d3c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d3c4:	6863      	ldr	r3, [r4, #4]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	6063      	str	r3, [r4, #4]
 800d3ca:	e7e9      	b.n	800d3a0 <_sungetc_r+0xc>
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	f000 feb2 	bl	800e136 <__submore>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d0f1      	beq.n	800d3ba <_sungetc_r+0x26>
 800d3d6:	e7e1      	b.n	800d39c <_sungetc_r+0x8>
 800d3d8:	6921      	ldr	r1, [r4, #16]
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	b151      	cbz	r1, 800d3f4 <_sungetc_r+0x60>
 800d3de:	4299      	cmp	r1, r3
 800d3e0:	d208      	bcs.n	800d3f4 <_sungetc_r+0x60>
 800d3e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d3e6:	42a9      	cmp	r1, r5
 800d3e8:	d104      	bne.n	800d3f4 <_sungetc_r+0x60>
 800d3ea:	3b01      	subs	r3, #1
 800d3ec:	3201      	adds	r2, #1
 800d3ee:	6023      	str	r3, [r4, #0]
 800d3f0:	6062      	str	r2, [r4, #4]
 800d3f2:	e7d5      	b.n	800d3a0 <_sungetc_r+0xc>
 800d3f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800d3f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3fe:	2303      	movs	r3, #3
 800d400:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d402:	4623      	mov	r3, r4
 800d404:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d408:	6023      	str	r3, [r4, #0]
 800d40a:	2301      	movs	r3, #1
 800d40c:	e7dc      	b.n	800d3c8 <_sungetc_r+0x34>

0800d40e <__ssrefill_r>:
 800d40e:	b510      	push	{r4, lr}
 800d410:	460c      	mov	r4, r1
 800d412:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d414:	b169      	cbz	r1, 800d432 <__ssrefill_r+0x24>
 800d416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d41a:	4299      	cmp	r1, r3
 800d41c:	d001      	beq.n	800d422 <__ssrefill_r+0x14>
 800d41e:	f7ff fd69 	bl	800cef4 <_free_r>
 800d422:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d424:	6063      	str	r3, [r4, #4]
 800d426:	2000      	movs	r0, #0
 800d428:	6360      	str	r0, [r4, #52]	@ 0x34
 800d42a:	b113      	cbz	r3, 800d432 <__ssrefill_r+0x24>
 800d42c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d42e:	6023      	str	r3, [r4, #0]
 800d430:	bd10      	pop	{r4, pc}
 800d432:	6923      	ldr	r3, [r4, #16]
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	2300      	movs	r3, #0
 800d438:	6063      	str	r3, [r4, #4]
 800d43a:	89a3      	ldrh	r3, [r4, #12]
 800d43c:	f043 0320 	orr.w	r3, r3, #32
 800d440:	81a3      	strh	r3, [r4, #12]
 800d442:	f04f 30ff 	mov.w	r0, #4294967295
 800d446:	e7f3      	b.n	800d430 <__ssrefill_r+0x22>

0800d448 <__ssvfiscanf_r>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	460c      	mov	r4, r1
 800d44e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d452:	2100      	movs	r1, #0
 800d454:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d458:	49a6      	ldr	r1, [pc, #664]	@ (800d6f4 <__ssvfiscanf_r+0x2ac>)
 800d45a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d45c:	f10d 0804 	add.w	r8, sp, #4
 800d460:	49a5      	ldr	r1, [pc, #660]	@ (800d6f8 <__ssvfiscanf_r+0x2b0>)
 800d462:	4fa6      	ldr	r7, [pc, #664]	@ (800d6fc <__ssvfiscanf_r+0x2b4>)
 800d464:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d468:	4606      	mov	r6, r0
 800d46a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	f892 9000 	ldrb.w	r9, [r2]
 800d472:	f1b9 0f00 	cmp.w	r9, #0
 800d476:	f000 8158 	beq.w	800d72a <__ssvfiscanf_r+0x2e2>
 800d47a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800d47e:	f013 0308 	ands.w	r3, r3, #8
 800d482:	f102 0501 	add.w	r5, r2, #1
 800d486:	d019      	beq.n	800d4bc <__ssvfiscanf_r+0x74>
 800d488:	6863      	ldr	r3, [r4, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	dd0f      	ble.n	800d4ae <__ssvfiscanf_r+0x66>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	781a      	ldrb	r2, [r3, #0]
 800d492:	5cba      	ldrb	r2, [r7, r2]
 800d494:	0712      	lsls	r2, r2, #28
 800d496:	d401      	bmi.n	800d49c <__ssvfiscanf_r+0x54>
 800d498:	462a      	mov	r2, r5
 800d49a:	e7e8      	b.n	800d46e <__ssvfiscanf_r+0x26>
 800d49c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d49e:	3201      	adds	r2, #1
 800d4a0:	9245      	str	r2, [sp, #276]	@ 0x114
 800d4a2:	6862      	ldr	r2, [r4, #4]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	3a01      	subs	r2, #1
 800d4a8:	6062      	str	r2, [r4, #4]
 800d4aa:	6023      	str	r3, [r4, #0]
 800d4ac:	e7ec      	b.n	800d488 <__ssvfiscanf_r+0x40>
 800d4ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d4b0:	4621      	mov	r1, r4
 800d4b2:	4630      	mov	r0, r6
 800d4b4:	4798      	blx	r3
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	d0e9      	beq.n	800d48e <__ssvfiscanf_r+0x46>
 800d4ba:	e7ed      	b.n	800d498 <__ssvfiscanf_r+0x50>
 800d4bc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800d4c0:	f040 8085 	bne.w	800d5ce <__ssvfiscanf_r+0x186>
 800d4c4:	9341      	str	r3, [sp, #260]	@ 0x104
 800d4c6:	9343      	str	r3, [sp, #268]	@ 0x10c
 800d4c8:	7853      	ldrb	r3, [r2, #1]
 800d4ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4cc:	bf02      	ittt	eq
 800d4ce:	2310      	moveq	r3, #16
 800d4d0:	1c95      	addeq	r5, r2, #2
 800d4d2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d4d4:	220a      	movs	r2, #10
 800d4d6:	46aa      	mov	sl, r5
 800d4d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d4dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d4e0:	2b09      	cmp	r3, #9
 800d4e2:	d91e      	bls.n	800d522 <__ssvfiscanf_r+0xda>
 800d4e4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800d700 <__ssvfiscanf_r+0x2b8>
 800d4e8:	2203      	movs	r2, #3
 800d4ea:	4658      	mov	r0, fp
 800d4ec:	f7f2 fea8 	bl	8000240 <memchr>
 800d4f0:	b138      	cbz	r0, 800d502 <__ssvfiscanf_r+0xba>
 800d4f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d4f4:	eba0 000b 	sub.w	r0, r0, fp
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	4083      	lsls	r3, r0
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	9341      	str	r3, [sp, #260]	@ 0x104
 800d500:	4655      	mov	r5, sl
 800d502:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d506:	2b78      	cmp	r3, #120	@ 0x78
 800d508:	d806      	bhi.n	800d518 <__ssvfiscanf_r+0xd0>
 800d50a:	2b57      	cmp	r3, #87	@ 0x57
 800d50c:	d810      	bhi.n	800d530 <__ssvfiscanf_r+0xe8>
 800d50e:	2b25      	cmp	r3, #37	@ 0x25
 800d510:	d05d      	beq.n	800d5ce <__ssvfiscanf_r+0x186>
 800d512:	d857      	bhi.n	800d5c4 <__ssvfiscanf_r+0x17c>
 800d514:	2b00      	cmp	r3, #0
 800d516:	d075      	beq.n	800d604 <__ssvfiscanf_r+0x1bc>
 800d518:	2303      	movs	r3, #3
 800d51a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d51c:	230a      	movs	r3, #10
 800d51e:	9342      	str	r3, [sp, #264]	@ 0x108
 800d520:	e088      	b.n	800d634 <__ssvfiscanf_r+0x1ec>
 800d522:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d524:	fb02 1103 	mla	r1, r2, r3, r1
 800d528:	3930      	subs	r1, #48	@ 0x30
 800d52a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d52c:	4655      	mov	r5, sl
 800d52e:	e7d2      	b.n	800d4d6 <__ssvfiscanf_r+0x8e>
 800d530:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d534:	2a20      	cmp	r2, #32
 800d536:	d8ef      	bhi.n	800d518 <__ssvfiscanf_r+0xd0>
 800d538:	a101      	add	r1, pc, #4	@ (adr r1, 800d540 <__ssvfiscanf_r+0xf8>)
 800d53a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d53e:	bf00      	nop
 800d540:	0800d613 	.word	0x0800d613
 800d544:	0800d519 	.word	0x0800d519
 800d548:	0800d519 	.word	0x0800d519
 800d54c:	0800d66d 	.word	0x0800d66d
 800d550:	0800d519 	.word	0x0800d519
 800d554:	0800d519 	.word	0x0800d519
 800d558:	0800d519 	.word	0x0800d519
 800d55c:	0800d519 	.word	0x0800d519
 800d560:	0800d519 	.word	0x0800d519
 800d564:	0800d519 	.word	0x0800d519
 800d568:	0800d519 	.word	0x0800d519
 800d56c:	0800d683 	.word	0x0800d683
 800d570:	0800d669 	.word	0x0800d669
 800d574:	0800d5cb 	.word	0x0800d5cb
 800d578:	0800d5cb 	.word	0x0800d5cb
 800d57c:	0800d5cb 	.word	0x0800d5cb
 800d580:	0800d519 	.word	0x0800d519
 800d584:	0800d625 	.word	0x0800d625
 800d588:	0800d519 	.word	0x0800d519
 800d58c:	0800d519 	.word	0x0800d519
 800d590:	0800d519 	.word	0x0800d519
 800d594:	0800d519 	.word	0x0800d519
 800d598:	0800d693 	.word	0x0800d693
 800d59c:	0800d62d 	.word	0x0800d62d
 800d5a0:	0800d60b 	.word	0x0800d60b
 800d5a4:	0800d519 	.word	0x0800d519
 800d5a8:	0800d519 	.word	0x0800d519
 800d5ac:	0800d68f 	.word	0x0800d68f
 800d5b0:	0800d519 	.word	0x0800d519
 800d5b4:	0800d669 	.word	0x0800d669
 800d5b8:	0800d519 	.word	0x0800d519
 800d5bc:	0800d519 	.word	0x0800d519
 800d5c0:	0800d613 	.word	0x0800d613
 800d5c4:	3b45      	subs	r3, #69	@ 0x45
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d8a6      	bhi.n	800d518 <__ssvfiscanf_r+0xd0>
 800d5ca:	2305      	movs	r3, #5
 800d5cc:	e031      	b.n	800d632 <__ssvfiscanf_r+0x1ea>
 800d5ce:	6863      	ldr	r3, [r4, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	dd0d      	ble.n	800d5f0 <__ssvfiscanf_r+0x1a8>
 800d5d4:	6823      	ldr	r3, [r4, #0]
 800d5d6:	781a      	ldrb	r2, [r3, #0]
 800d5d8:	454a      	cmp	r2, r9
 800d5da:	f040 80a6 	bne.w	800d72a <__ssvfiscanf_r+0x2e2>
 800d5de:	3301      	adds	r3, #1
 800d5e0:	6862      	ldr	r2, [r4, #4]
 800d5e2:	6023      	str	r3, [r4, #0]
 800d5e4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d5e6:	3a01      	subs	r2, #1
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	6062      	str	r2, [r4, #4]
 800d5ec:	9345      	str	r3, [sp, #276]	@ 0x114
 800d5ee:	e753      	b.n	800d498 <__ssvfiscanf_r+0x50>
 800d5f0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	4798      	blx	r3
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d0eb      	beq.n	800d5d4 <__ssvfiscanf_r+0x18c>
 800d5fc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f040 808b 	bne.w	800d71a <__ssvfiscanf_r+0x2d2>
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
 800d608:	e08b      	b.n	800d722 <__ssvfiscanf_r+0x2da>
 800d60a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d60c:	f042 0220 	orr.w	r2, r2, #32
 800d610:	9241      	str	r2, [sp, #260]	@ 0x104
 800d612:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d618:	9241      	str	r2, [sp, #260]	@ 0x104
 800d61a:	2210      	movs	r2, #16
 800d61c:	2b6e      	cmp	r3, #110	@ 0x6e
 800d61e:	9242      	str	r2, [sp, #264]	@ 0x108
 800d620:	d902      	bls.n	800d628 <__ssvfiscanf_r+0x1e0>
 800d622:	e005      	b.n	800d630 <__ssvfiscanf_r+0x1e8>
 800d624:	2300      	movs	r3, #0
 800d626:	9342      	str	r3, [sp, #264]	@ 0x108
 800d628:	2303      	movs	r3, #3
 800d62a:	e002      	b.n	800d632 <__ssvfiscanf_r+0x1ea>
 800d62c:	2308      	movs	r3, #8
 800d62e:	9342      	str	r3, [sp, #264]	@ 0x108
 800d630:	2304      	movs	r3, #4
 800d632:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d634:	6863      	ldr	r3, [r4, #4]
 800d636:	2b00      	cmp	r3, #0
 800d638:	dd39      	ble.n	800d6ae <__ssvfiscanf_r+0x266>
 800d63a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d63c:	0659      	lsls	r1, r3, #25
 800d63e:	d404      	bmi.n	800d64a <__ssvfiscanf_r+0x202>
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	781a      	ldrb	r2, [r3, #0]
 800d644:	5cba      	ldrb	r2, [r7, r2]
 800d646:	0712      	lsls	r2, r2, #28
 800d648:	d438      	bmi.n	800d6bc <__ssvfiscanf_r+0x274>
 800d64a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	dc47      	bgt.n	800d6e0 <__ssvfiscanf_r+0x298>
 800d650:	466b      	mov	r3, sp
 800d652:	4622      	mov	r2, r4
 800d654:	a941      	add	r1, sp, #260	@ 0x104
 800d656:	4630      	mov	r0, r6
 800d658:	f000 fb3a 	bl	800dcd0 <_scanf_chars>
 800d65c:	2801      	cmp	r0, #1
 800d65e:	d064      	beq.n	800d72a <__ssvfiscanf_r+0x2e2>
 800d660:	2802      	cmp	r0, #2
 800d662:	f47f af19 	bne.w	800d498 <__ssvfiscanf_r+0x50>
 800d666:	e7c9      	b.n	800d5fc <__ssvfiscanf_r+0x1b4>
 800d668:	220a      	movs	r2, #10
 800d66a:	e7d7      	b.n	800d61c <__ssvfiscanf_r+0x1d4>
 800d66c:	4629      	mov	r1, r5
 800d66e:	4640      	mov	r0, r8
 800d670:	f000 fd28 	bl	800e0c4 <__sccl>
 800d674:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d67a:	9341      	str	r3, [sp, #260]	@ 0x104
 800d67c:	4605      	mov	r5, r0
 800d67e:	2301      	movs	r3, #1
 800d680:	e7d7      	b.n	800d632 <__ssvfiscanf_r+0x1ea>
 800d682:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d688:	9341      	str	r3, [sp, #260]	@ 0x104
 800d68a:	2300      	movs	r3, #0
 800d68c:	e7d1      	b.n	800d632 <__ssvfiscanf_r+0x1ea>
 800d68e:	2302      	movs	r3, #2
 800d690:	e7cf      	b.n	800d632 <__ssvfiscanf_r+0x1ea>
 800d692:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d694:	06c3      	lsls	r3, r0, #27
 800d696:	f53f aeff 	bmi.w	800d498 <__ssvfiscanf_r+0x50>
 800d69a:	9b00      	ldr	r3, [sp, #0]
 800d69c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d69e:	1d19      	adds	r1, r3, #4
 800d6a0:	9100      	str	r1, [sp, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	07c0      	lsls	r0, r0, #31
 800d6a6:	bf4c      	ite	mi
 800d6a8:	801a      	strhmi	r2, [r3, #0]
 800d6aa:	601a      	strpl	r2, [r3, #0]
 800d6ac:	e6f4      	b.n	800d498 <__ssvfiscanf_r+0x50>
 800d6ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	4798      	blx	r3
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d0bf      	beq.n	800d63a <__ssvfiscanf_r+0x1f2>
 800d6ba:	e79f      	b.n	800d5fc <__ssvfiscanf_r+0x1b4>
 800d6bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d6be:	3201      	adds	r2, #1
 800d6c0:	9245      	str	r2, [sp, #276]	@ 0x114
 800d6c2:	6862      	ldr	r2, [r4, #4]
 800d6c4:	3a01      	subs	r2, #1
 800d6c6:	2a00      	cmp	r2, #0
 800d6c8:	6062      	str	r2, [r4, #4]
 800d6ca:	dd02      	ble.n	800d6d2 <__ssvfiscanf_r+0x28a>
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	6023      	str	r3, [r4, #0]
 800d6d0:	e7b6      	b.n	800d640 <__ssvfiscanf_r+0x1f8>
 800d6d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d6d4:	4621      	mov	r1, r4
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	4798      	blx	r3
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d0b0      	beq.n	800d640 <__ssvfiscanf_r+0x1f8>
 800d6de:	e78d      	b.n	800d5fc <__ssvfiscanf_r+0x1b4>
 800d6e0:	2b04      	cmp	r3, #4
 800d6e2:	dc0f      	bgt.n	800d704 <__ssvfiscanf_r+0x2bc>
 800d6e4:	466b      	mov	r3, sp
 800d6e6:	4622      	mov	r2, r4
 800d6e8:	a941      	add	r1, sp, #260	@ 0x104
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f000 fb4a 	bl	800dd84 <_scanf_i>
 800d6f0:	e7b4      	b.n	800d65c <__ssvfiscanf_r+0x214>
 800d6f2:	bf00      	nop
 800d6f4:	0800d395 	.word	0x0800d395
 800d6f8:	0800d40f 	.word	0x0800d40f
 800d6fc:	0800ed36 	.word	0x0800ed36
 800d700:	0800eced 	.word	0x0800eced
 800d704:	4b0a      	ldr	r3, [pc, #40]	@ (800d730 <__ssvfiscanf_r+0x2e8>)
 800d706:	2b00      	cmp	r3, #0
 800d708:	f43f aec6 	beq.w	800d498 <__ssvfiscanf_r+0x50>
 800d70c:	466b      	mov	r3, sp
 800d70e:	4622      	mov	r2, r4
 800d710:	a941      	add	r1, sp, #260	@ 0x104
 800d712:	4630      	mov	r0, r6
 800d714:	f3af 8000 	nop.w
 800d718:	e7a0      	b.n	800d65c <__ssvfiscanf_r+0x214>
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	065b      	lsls	r3, r3, #25
 800d71e:	f53f af71 	bmi.w	800d604 <__ssvfiscanf_r+0x1bc>
 800d722:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d72a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d72c:	e7f9      	b.n	800d722 <__ssvfiscanf_r+0x2da>
 800d72e:	bf00      	nop
 800d730:	00000000 	.word	0x00000000

0800d734 <__sfputc_r>:
 800d734:	6893      	ldr	r3, [r2, #8]
 800d736:	3b01      	subs	r3, #1
 800d738:	2b00      	cmp	r3, #0
 800d73a:	b410      	push	{r4}
 800d73c:	6093      	str	r3, [r2, #8]
 800d73e:	da08      	bge.n	800d752 <__sfputc_r+0x1e>
 800d740:	6994      	ldr	r4, [r2, #24]
 800d742:	42a3      	cmp	r3, r4
 800d744:	db01      	blt.n	800d74a <__sfputc_r+0x16>
 800d746:	290a      	cmp	r1, #10
 800d748:	d103      	bne.n	800d752 <__sfputc_r+0x1e>
 800d74a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d74e:	f000 bd2c 	b.w	800e1aa <__swbuf_r>
 800d752:	6813      	ldr	r3, [r2, #0]
 800d754:	1c58      	adds	r0, r3, #1
 800d756:	6010      	str	r0, [r2, #0]
 800d758:	7019      	strb	r1, [r3, #0]
 800d75a:	4608      	mov	r0, r1
 800d75c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <__sfputs_r>:
 800d762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d764:	4606      	mov	r6, r0
 800d766:	460f      	mov	r7, r1
 800d768:	4614      	mov	r4, r2
 800d76a:	18d5      	adds	r5, r2, r3
 800d76c:	42ac      	cmp	r4, r5
 800d76e:	d101      	bne.n	800d774 <__sfputs_r+0x12>
 800d770:	2000      	movs	r0, #0
 800d772:	e007      	b.n	800d784 <__sfputs_r+0x22>
 800d774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d778:	463a      	mov	r2, r7
 800d77a:	4630      	mov	r0, r6
 800d77c:	f7ff ffda 	bl	800d734 <__sfputc_r>
 800d780:	1c43      	adds	r3, r0, #1
 800d782:	d1f3      	bne.n	800d76c <__sfputs_r+0xa>
 800d784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d788 <_vfiprintf_r>:
 800d788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78c:	460d      	mov	r5, r1
 800d78e:	b09d      	sub	sp, #116	@ 0x74
 800d790:	4614      	mov	r4, r2
 800d792:	4698      	mov	r8, r3
 800d794:	4606      	mov	r6, r0
 800d796:	b118      	cbz	r0, 800d7a0 <_vfiprintf_r+0x18>
 800d798:	6a03      	ldr	r3, [r0, #32]
 800d79a:	b90b      	cbnz	r3, 800d7a0 <_vfiprintf_r+0x18>
 800d79c:	f7ff f9f6 	bl	800cb8c <__sinit>
 800d7a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7a2:	07d9      	lsls	r1, r3, #31
 800d7a4:	d405      	bmi.n	800d7b2 <_vfiprintf_r+0x2a>
 800d7a6:	89ab      	ldrh	r3, [r5, #12]
 800d7a8:	059a      	lsls	r2, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <_vfiprintf_r+0x2a>
 800d7ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7ae:	f7ff fb8a 	bl	800cec6 <__retarget_lock_acquire_recursive>
 800d7b2:	89ab      	ldrh	r3, [r5, #12]
 800d7b4:	071b      	lsls	r3, r3, #28
 800d7b6:	d501      	bpl.n	800d7bc <_vfiprintf_r+0x34>
 800d7b8:	692b      	ldr	r3, [r5, #16]
 800d7ba:	b99b      	cbnz	r3, 800d7e4 <_vfiprintf_r+0x5c>
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f000 fd32 	bl	800e228 <__swsetup_r>
 800d7c4:	b170      	cbz	r0, 800d7e4 <_vfiprintf_r+0x5c>
 800d7c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7c8:	07dc      	lsls	r4, r3, #31
 800d7ca:	d504      	bpl.n	800d7d6 <_vfiprintf_r+0x4e>
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	b01d      	add	sp, #116	@ 0x74
 800d7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d6:	89ab      	ldrh	r3, [r5, #12]
 800d7d8:	0598      	lsls	r0, r3, #22
 800d7da:	d4f7      	bmi.n	800d7cc <_vfiprintf_r+0x44>
 800d7dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7de:	f7ff fb73 	bl	800cec8 <__retarget_lock_release_recursive>
 800d7e2:	e7f3      	b.n	800d7cc <_vfiprintf_r+0x44>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7e8:	2320      	movs	r3, #32
 800d7ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7f2:	2330      	movs	r3, #48	@ 0x30
 800d7f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d9a4 <_vfiprintf_r+0x21c>
 800d7f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7fc:	f04f 0901 	mov.w	r9, #1
 800d800:	4623      	mov	r3, r4
 800d802:	469a      	mov	sl, r3
 800d804:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d808:	b10a      	cbz	r2, 800d80e <_vfiprintf_r+0x86>
 800d80a:	2a25      	cmp	r2, #37	@ 0x25
 800d80c:	d1f9      	bne.n	800d802 <_vfiprintf_r+0x7a>
 800d80e:	ebba 0b04 	subs.w	fp, sl, r4
 800d812:	d00b      	beq.n	800d82c <_vfiprintf_r+0xa4>
 800d814:	465b      	mov	r3, fp
 800d816:	4622      	mov	r2, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	4630      	mov	r0, r6
 800d81c:	f7ff ffa1 	bl	800d762 <__sfputs_r>
 800d820:	3001      	adds	r0, #1
 800d822:	f000 80a7 	beq.w	800d974 <_vfiprintf_r+0x1ec>
 800d826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d828:	445a      	add	r2, fp
 800d82a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d82c:	f89a 3000 	ldrb.w	r3, [sl]
 800d830:	2b00      	cmp	r3, #0
 800d832:	f000 809f 	beq.w	800d974 <_vfiprintf_r+0x1ec>
 800d836:	2300      	movs	r3, #0
 800d838:	f04f 32ff 	mov.w	r2, #4294967295
 800d83c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d840:	f10a 0a01 	add.w	sl, sl, #1
 800d844:	9304      	str	r3, [sp, #16]
 800d846:	9307      	str	r3, [sp, #28]
 800d848:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d84c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d84e:	4654      	mov	r4, sl
 800d850:	2205      	movs	r2, #5
 800d852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d856:	4853      	ldr	r0, [pc, #332]	@ (800d9a4 <_vfiprintf_r+0x21c>)
 800d858:	f7f2 fcf2 	bl	8000240 <memchr>
 800d85c:	9a04      	ldr	r2, [sp, #16]
 800d85e:	b9d8      	cbnz	r0, 800d898 <_vfiprintf_r+0x110>
 800d860:	06d1      	lsls	r1, r2, #27
 800d862:	bf44      	itt	mi
 800d864:	2320      	movmi	r3, #32
 800d866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d86a:	0713      	lsls	r3, r2, #28
 800d86c:	bf44      	itt	mi
 800d86e:	232b      	movmi	r3, #43	@ 0x2b
 800d870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d874:	f89a 3000 	ldrb.w	r3, [sl]
 800d878:	2b2a      	cmp	r3, #42	@ 0x2a
 800d87a:	d015      	beq.n	800d8a8 <_vfiprintf_r+0x120>
 800d87c:	9a07      	ldr	r2, [sp, #28]
 800d87e:	4654      	mov	r4, sl
 800d880:	2000      	movs	r0, #0
 800d882:	f04f 0c0a 	mov.w	ip, #10
 800d886:	4621      	mov	r1, r4
 800d888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d88c:	3b30      	subs	r3, #48	@ 0x30
 800d88e:	2b09      	cmp	r3, #9
 800d890:	d94b      	bls.n	800d92a <_vfiprintf_r+0x1a2>
 800d892:	b1b0      	cbz	r0, 800d8c2 <_vfiprintf_r+0x13a>
 800d894:	9207      	str	r2, [sp, #28]
 800d896:	e014      	b.n	800d8c2 <_vfiprintf_r+0x13a>
 800d898:	eba0 0308 	sub.w	r3, r0, r8
 800d89c:	fa09 f303 	lsl.w	r3, r9, r3
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	9304      	str	r3, [sp, #16]
 800d8a4:	46a2      	mov	sl, r4
 800d8a6:	e7d2      	b.n	800d84e <_vfiprintf_r+0xc6>
 800d8a8:	9b03      	ldr	r3, [sp, #12]
 800d8aa:	1d19      	adds	r1, r3, #4
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	9103      	str	r1, [sp, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	bfbb      	ittet	lt
 800d8b4:	425b      	neglt	r3, r3
 800d8b6:	f042 0202 	orrlt.w	r2, r2, #2
 800d8ba:	9307      	strge	r3, [sp, #28]
 800d8bc:	9307      	strlt	r3, [sp, #28]
 800d8be:	bfb8      	it	lt
 800d8c0:	9204      	strlt	r2, [sp, #16]
 800d8c2:	7823      	ldrb	r3, [r4, #0]
 800d8c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8c6:	d10a      	bne.n	800d8de <_vfiprintf_r+0x156>
 800d8c8:	7863      	ldrb	r3, [r4, #1]
 800d8ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8cc:	d132      	bne.n	800d934 <_vfiprintf_r+0x1ac>
 800d8ce:	9b03      	ldr	r3, [sp, #12]
 800d8d0:	1d1a      	adds	r2, r3, #4
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	9203      	str	r2, [sp, #12]
 800d8d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8da:	3402      	adds	r4, #2
 800d8dc:	9305      	str	r3, [sp, #20]
 800d8de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d9b4 <_vfiprintf_r+0x22c>
 800d8e2:	7821      	ldrb	r1, [r4, #0]
 800d8e4:	2203      	movs	r2, #3
 800d8e6:	4650      	mov	r0, sl
 800d8e8:	f7f2 fcaa 	bl	8000240 <memchr>
 800d8ec:	b138      	cbz	r0, 800d8fe <_vfiprintf_r+0x176>
 800d8ee:	9b04      	ldr	r3, [sp, #16]
 800d8f0:	eba0 000a 	sub.w	r0, r0, sl
 800d8f4:	2240      	movs	r2, #64	@ 0x40
 800d8f6:	4082      	lsls	r2, r0
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	3401      	adds	r4, #1
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d902:	4829      	ldr	r0, [pc, #164]	@ (800d9a8 <_vfiprintf_r+0x220>)
 800d904:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d908:	2206      	movs	r2, #6
 800d90a:	f7f2 fc99 	bl	8000240 <memchr>
 800d90e:	2800      	cmp	r0, #0
 800d910:	d03f      	beq.n	800d992 <_vfiprintf_r+0x20a>
 800d912:	4b26      	ldr	r3, [pc, #152]	@ (800d9ac <_vfiprintf_r+0x224>)
 800d914:	bb1b      	cbnz	r3, 800d95e <_vfiprintf_r+0x1d6>
 800d916:	9b03      	ldr	r3, [sp, #12]
 800d918:	3307      	adds	r3, #7
 800d91a:	f023 0307 	bic.w	r3, r3, #7
 800d91e:	3308      	adds	r3, #8
 800d920:	9303      	str	r3, [sp, #12]
 800d922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d924:	443b      	add	r3, r7
 800d926:	9309      	str	r3, [sp, #36]	@ 0x24
 800d928:	e76a      	b.n	800d800 <_vfiprintf_r+0x78>
 800d92a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d92e:	460c      	mov	r4, r1
 800d930:	2001      	movs	r0, #1
 800d932:	e7a8      	b.n	800d886 <_vfiprintf_r+0xfe>
 800d934:	2300      	movs	r3, #0
 800d936:	3401      	adds	r4, #1
 800d938:	9305      	str	r3, [sp, #20]
 800d93a:	4619      	mov	r1, r3
 800d93c:	f04f 0c0a 	mov.w	ip, #10
 800d940:	4620      	mov	r0, r4
 800d942:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d946:	3a30      	subs	r2, #48	@ 0x30
 800d948:	2a09      	cmp	r2, #9
 800d94a:	d903      	bls.n	800d954 <_vfiprintf_r+0x1cc>
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d0c6      	beq.n	800d8de <_vfiprintf_r+0x156>
 800d950:	9105      	str	r1, [sp, #20]
 800d952:	e7c4      	b.n	800d8de <_vfiprintf_r+0x156>
 800d954:	fb0c 2101 	mla	r1, ip, r1, r2
 800d958:	4604      	mov	r4, r0
 800d95a:	2301      	movs	r3, #1
 800d95c:	e7f0      	b.n	800d940 <_vfiprintf_r+0x1b8>
 800d95e:	ab03      	add	r3, sp, #12
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	462a      	mov	r2, r5
 800d964:	4b12      	ldr	r3, [pc, #72]	@ (800d9b0 <_vfiprintf_r+0x228>)
 800d966:	a904      	add	r1, sp, #16
 800d968:	4630      	mov	r0, r6
 800d96a:	f3af 8000 	nop.w
 800d96e:	4607      	mov	r7, r0
 800d970:	1c78      	adds	r0, r7, #1
 800d972:	d1d6      	bne.n	800d922 <_vfiprintf_r+0x19a>
 800d974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d976:	07d9      	lsls	r1, r3, #31
 800d978:	d405      	bmi.n	800d986 <_vfiprintf_r+0x1fe>
 800d97a:	89ab      	ldrh	r3, [r5, #12]
 800d97c:	059a      	lsls	r2, r3, #22
 800d97e:	d402      	bmi.n	800d986 <_vfiprintf_r+0x1fe>
 800d980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d982:	f7ff faa1 	bl	800cec8 <__retarget_lock_release_recursive>
 800d986:	89ab      	ldrh	r3, [r5, #12]
 800d988:	065b      	lsls	r3, r3, #25
 800d98a:	f53f af1f 	bmi.w	800d7cc <_vfiprintf_r+0x44>
 800d98e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d990:	e71e      	b.n	800d7d0 <_vfiprintf_r+0x48>
 800d992:	ab03      	add	r3, sp, #12
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	462a      	mov	r2, r5
 800d998:	4b05      	ldr	r3, [pc, #20]	@ (800d9b0 <_vfiprintf_r+0x228>)
 800d99a:	a904      	add	r1, sp, #16
 800d99c:	4630      	mov	r0, r6
 800d99e:	f000 f879 	bl	800da94 <_printf_i>
 800d9a2:	e7e4      	b.n	800d96e <_vfiprintf_r+0x1e6>
 800d9a4:	0800ece7 	.word	0x0800ece7
 800d9a8:	0800ecf1 	.word	0x0800ecf1
 800d9ac:	00000000 	.word	0x00000000
 800d9b0:	0800d763 	.word	0x0800d763
 800d9b4:	0800eced 	.word	0x0800eced

0800d9b8 <_printf_common>:
 800d9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9bc:	4616      	mov	r6, r2
 800d9be:	4698      	mov	r8, r3
 800d9c0:	688a      	ldr	r2, [r1, #8]
 800d9c2:	690b      	ldr	r3, [r1, #16]
 800d9c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	bfb8      	it	lt
 800d9cc:	4613      	movlt	r3, r2
 800d9ce:	6033      	str	r3, [r6, #0]
 800d9d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9d4:	4607      	mov	r7, r0
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	b10a      	cbz	r2, 800d9de <_printf_common+0x26>
 800d9da:	3301      	adds	r3, #1
 800d9dc:	6033      	str	r3, [r6, #0]
 800d9de:	6823      	ldr	r3, [r4, #0]
 800d9e0:	0699      	lsls	r1, r3, #26
 800d9e2:	bf42      	ittt	mi
 800d9e4:	6833      	ldrmi	r3, [r6, #0]
 800d9e6:	3302      	addmi	r3, #2
 800d9e8:	6033      	strmi	r3, [r6, #0]
 800d9ea:	6825      	ldr	r5, [r4, #0]
 800d9ec:	f015 0506 	ands.w	r5, r5, #6
 800d9f0:	d106      	bne.n	800da00 <_printf_common+0x48>
 800d9f2:	f104 0a19 	add.w	sl, r4, #25
 800d9f6:	68e3      	ldr	r3, [r4, #12]
 800d9f8:	6832      	ldr	r2, [r6, #0]
 800d9fa:	1a9b      	subs	r3, r3, r2
 800d9fc:	42ab      	cmp	r3, r5
 800d9fe:	dc26      	bgt.n	800da4e <_printf_common+0x96>
 800da00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da04:	6822      	ldr	r2, [r4, #0]
 800da06:	3b00      	subs	r3, #0
 800da08:	bf18      	it	ne
 800da0a:	2301      	movne	r3, #1
 800da0c:	0692      	lsls	r2, r2, #26
 800da0e:	d42b      	bmi.n	800da68 <_printf_common+0xb0>
 800da10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da14:	4641      	mov	r1, r8
 800da16:	4638      	mov	r0, r7
 800da18:	47c8      	blx	r9
 800da1a:	3001      	adds	r0, #1
 800da1c:	d01e      	beq.n	800da5c <_printf_common+0xa4>
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	6922      	ldr	r2, [r4, #16]
 800da22:	f003 0306 	and.w	r3, r3, #6
 800da26:	2b04      	cmp	r3, #4
 800da28:	bf02      	ittt	eq
 800da2a:	68e5      	ldreq	r5, [r4, #12]
 800da2c:	6833      	ldreq	r3, [r6, #0]
 800da2e:	1aed      	subeq	r5, r5, r3
 800da30:	68a3      	ldr	r3, [r4, #8]
 800da32:	bf0c      	ite	eq
 800da34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da38:	2500      	movne	r5, #0
 800da3a:	4293      	cmp	r3, r2
 800da3c:	bfc4      	itt	gt
 800da3e:	1a9b      	subgt	r3, r3, r2
 800da40:	18ed      	addgt	r5, r5, r3
 800da42:	2600      	movs	r6, #0
 800da44:	341a      	adds	r4, #26
 800da46:	42b5      	cmp	r5, r6
 800da48:	d11a      	bne.n	800da80 <_printf_common+0xc8>
 800da4a:	2000      	movs	r0, #0
 800da4c:	e008      	b.n	800da60 <_printf_common+0xa8>
 800da4e:	2301      	movs	r3, #1
 800da50:	4652      	mov	r2, sl
 800da52:	4641      	mov	r1, r8
 800da54:	4638      	mov	r0, r7
 800da56:	47c8      	blx	r9
 800da58:	3001      	adds	r0, #1
 800da5a:	d103      	bne.n	800da64 <_printf_common+0xac>
 800da5c:	f04f 30ff 	mov.w	r0, #4294967295
 800da60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da64:	3501      	adds	r5, #1
 800da66:	e7c6      	b.n	800d9f6 <_printf_common+0x3e>
 800da68:	18e1      	adds	r1, r4, r3
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	2030      	movs	r0, #48	@ 0x30
 800da6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da72:	4422      	add	r2, r4
 800da74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da7c:	3302      	adds	r3, #2
 800da7e:	e7c7      	b.n	800da10 <_printf_common+0x58>
 800da80:	2301      	movs	r3, #1
 800da82:	4622      	mov	r2, r4
 800da84:	4641      	mov	r1, r8
 800da86:	4638      	mov	r0, r7
 800da88:	47c8      	blx	r9
 800da8a:	3001      	adds	r0, #1
 800da8c:	d0e6      	beq.n	800da5c <_printf_common+0xa4>
 800da8e:	3601      	adds	r6, #1
 800da90:	e7d9      	b.n	800da46 <_printf_common+0x8e>
	...

0800da94 <_printf_i>:
 800da94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da98:	7e0f      	ldrb	r7, [r1, #24]
 800da9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da9c:	2f78      	cmp	r7, #120	@ 0x78
 800da9e:	4691      	mov	r9, r2
 800daa0:	4680      	mov	r8, r0
 800daa2:	460c      	mov	r4, r1
 800daa4:	469a      	mov	sl, r3
 800daa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800daaa:	d807      	bhi.n	800dabc <_printf_i+0x28>
 800daac:	2f62      	cmp	r7, #98	@ 0x62
 800daae:	d80a      	bhi.n	800dac6 <_printf_i+0x32>
 800dab0:	2f00      	cmp	r7, #0
 800dab2:	f000 80d1 	beq.w	800dc58 <_printf_i+0x1c4>
 800dab6:	2f58      	cmp	r7, #88	@ 0x58
 800dab8:	f000 80b8 	beq.w	800dc2c <_printf_i+0x198>
 800dabc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dac0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dac4:	e03a      	b.n	800db3c <_printf_i+0xa8>
 800dac6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800daca:	2b15      	cmp	r3, #21
 800dacc:	d8f6      	bhi.n	800dabc <_printf_i+0x28>
 800dace:	a101      	add	r1, pc, #4	@ (adr r1, 800dad4 <_printf_i+0x40>)
 800dad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dad4:	0800db2d 	.word	0x0800db2d
 800dad8:	0800db41 	.word	0x0800db41
 800dadc:	0800dabd 	.word	0x0800dabd
 800dae0:	0800dabd 	.word	0x0800dabd
 800dae4:	0800dabd 	.word	0x0800dabd
 800dae8:	0800dabd 	.word	0x0800dabd
 800daec:	0800db41 	.word	0x0800db41
 800daf0:	0800dabd 	.word	0x0800dabd
 800daf4:	0800dabd 	.word	0x0800dabd
 800daf8:	0800dabd 	.word	0x0800dabd
 800dafc:	0800dabd 	.word	0x0800dabd
 800db00:	0800dc3f 	.word	0x0800dc3f
 800db04:	0800db6b 	.word	0x0800db6b
 800db08:	0800dbf9 	.word	0x0800dbf9
 800db0c:	0800dabd 	.word	0x0800dabd
 800db10:	0800dabd 	.word	0x0800dabd
 800db14:	0800dc61 	.word	0x0800dc61
 800db18:	0800dabd 	.word	0x0800dabd
 800db1c:	0800db6b 	.word	0x0800db6b
 800db20:	0800dabd 	.word	0x0800dabd
 800db24:	0800dabd 	.word	0x0800dabd
 800db28:	0800dc01 	.word	0x0800dc01
 800db2c:	6833      	ldr	r3, [r6, #0]
 800db2e:	1d1a      	adds	r2, r3, #4
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6032      	str	r2, [r6, #0]
 800db34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db3c:	2301      	movs	r3, #1
 800db3e:	e09c      	b.n	800dc7a <_printf_i+0x1e6>
 800db40:	6833      	ldr	r3, [r6, #0]
 800db42:	6820      	ldr	r0, [r4, #0]
 800db44:	1d19      	adds	r1, r3, #4
 800db46:	6031      	str	r1, [r6, #0]
 800db48:	0606      	lsls	r6, r0, #24
 800db4a:	d501      	bpl.n	800db50 <_printf_i+0xbc>
 800db4c:	681d      	ldr	r5, [r3, #0]
 800db4e:	e003      	b.n	800db58 <_printf_i+0xc4>
 800db50:	0645      	lsls	r5, r0, #25
 800db52:	d5fb      	bpl.n	800db4c <_printf_i+0xb8>
 800db54:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db58:	2d00      	cmp	r5, #0
 800db5a:	da03      	bge.n	800db64 <_printf_i+0xd0>
 800db5c:	232d      	movs	r3, #45	@ 0x2d
 800db5e:	426d      	negs	r5, r5
 800db60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db64:	4858      	ldr	r0, [pc, #352]	@ (800dcc8 <_printf_i+0x234>)
 800db66:	230a      	movs	r3, #10
 800db68:	e011      	b.n	800db8e <_printf_i+0xfa>
 800db6a:	6821      	ldr	r1, [r4, #0]
 800db6c:	6833      	ldr	r3, [r6, #0]
 800db6e:	0608      	lsls	r0, r1, #24
 800db70:	f853 5b04 	ldr.w	r5, [r3], #4
 800db74:	d402      	bmi.n	800db7c <_printf_i+0xe8>
 800db76:	0649      	lsls	r1, r1, #25
 800db78:	bf48      	it	mi
 800db7a:	b2ad      	uxthmi	r5, r5
 800db7c:	2f6f      	cmp	r7, #111	@ 0x6f
 800db7e:	4852      	ldr	r0, [pc, #328]	@ (800dcc8 <_printf_i+0x234>)
 800db80:	6033      	str	r3, [r6, #0]
 800db82:	bf14      	ite	ne
 800db84:	230a      	movne	r3, #10
 800db86:	2308      	moveq	r3, #8
 800db88:	2100      	movs	r1, #0
 800db8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db8e:	6866      	ldr	r6, [r4, #4]
 800db90:	60a6      	str	r6, [r4, #8]
 800db92:	2e00      	cmp	r6, #0
 800db94:	db05      	blt.n	800dba2 <_printf_i+0x10e>
 800db96:	6821      	ldr	r1, [r4, #0]
 800db98:	432e      	orrs	r6, r5
 800db9a:	f021 0104 	bic.w	r1, r1, #4
 800db9e:	6021      	str	r1, [r4, #0]
 800dba0:	d04b      	beq.n	800dc3a <_printf_i+0x1a6>
 800dba2:	4616      	mov	r6, r2
 800dba4:	fbb5 f1f3 	udiv	r1, r5, r3
 800dba8:	fb03 5711 	mls	r7, r3, r1, r5
 800dbac:	5dc7      	ldrb	r7, [r0, r7]
 800dbae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbb2:	462f      	mov	r7, r5
 800dbb4:	42bb      	cmp	r3, r7
 800dbb6:	460d      	mov	r5, r1
 800dbb8:	d9f4      	bls.n	800dba4 <_printf_i+0x110>
 800dbba:	2b08      	cmp	r3, #8
 800dbbc:	d10b      	bne.n	800dbd6 <_printf_i+0x142>
 800dbbe:	6823      	ldr	r3, [r4, #0]
 800dbc0:	07df      	lsls	r7, r3, #31
 800dbc2:	d508      	bpl.n	800dbd6 <_printf_i+0x142>
 800dbc4:	6923      	ldr	r3, [r4, #16]
 800dbc6:	6861      	ldr	r1, [r4, #4]
 800dbc8:	4299      	cmp	r1, r3
 800dbca:	bfde      	ittt	le
 800dbcc:	2330      	movle	r3, #48	@ 0x30
 800dbce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbd6:	1b92      	subs	r2, r2, r6
 800dbd8:	6122      	str	r2, [r4, #16]
 800dbda:	f8cd a000 	str.w	sl, [sp]
 800dbde:	464b      	mov	r3, r9
 800dbe0:	aa03      	add	r2, sp, #12
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	4640      	mov	r0, r8
 800dbe6:	f7ff fee7 	bl	800d9b8 <_printf_common>
 800dbea:	3001      	adds	r0, #1
 800dbec:	d14a      	bne.n	800dc84 <_printf_i+0x1f0>
 800dbee:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf2:	b004      	add	sp, #16
 800dbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	f043 0320 	orr.w	r3, r3, #32
 800dbfe:	6023      	str	r3, [r4, #0]
 800dc00:	4832      	ldr	r0, [pc, #200]	@ (800dccc <_printf_i+0x238>)
 800dc02:	2778      	movs	r7, #120	@ 0x78
 800dc04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	6831      	ldr	r1, [r6, #0]
 800dc0c:	061f      	lsls	r7, r3, #24
 800dc0e:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc12:	d402      	bmi.n	800dc1a <_printf_i+0x186>
 800dc14:	065f      	lsls	r7, r3, #25
 800dc16:	bf48      	it	mi
 800dc18:	b2ad      	uxthmi	r5, r5
 800dc1a:	6031      	str	r1, [r6, #0]
 800dc1c:	07d9      	lsls	r1, r3, #31
 800dc1e:	bf44      	itt	mi
 800dc20:	f043 0320 	orrmi.w	r3, r3, #32
 800dc24:	6023      	strmi	r3, [r4, #0]
 800dc26:	b11d      	cbz	r5, 800dc30 <_printf_i+0x19c>
 800dc28:	2310      	movs	r3, #16
 800dc2a:	e7ad      	b.n	800db88 <_printf_i+0xf4>
 800dc2c:	4826      	ldr	r0, [pc, #152]	@ (800dcc8 <_printf_i+0x234>)
 800dc2e:	e7e9      	b.n	800dc04 <_printf_i+0x170>
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	f023 0320 	bic.w	r3, r3, #32
 800dc36:	6023      	str	r3, [r4, #0]
 800dc38:	e7f6      	b.n	800dc28 <_printf_i+0x194>
 800dc3a:	4616      	mov	r6, r2
 800dc3c:	e7bd      	b.n	800dbba <_printf_i+0x126>
 800dc3e:	6833      	ldr	r3, [r6, #0]
 800dc40:	6825      	ldr	r5, [r4, #0]
 800dc42:	6961      	ldr	r1, [r4, #20]
 800dc44:	1d18      	adds	r0, r3, #4
 800dc46:	6030      	str	r0, [r6, #0]
 800dc48:	062e      	lsls	r6, r5, #24
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	d501      	bpl.n	800dc52 <_printf_i+0x1be>
 800dc4e:	6019      	str	r1, [r3, #0]
 800dc50:	e002      	b.n	800dc58 <_printf_i+0x1c4>
 800dc52:	0668      	lsls	r0, r5, #25
 800dc54:	d5fb      	bpl.n	800dc4e <_printf_i+0x1ba>
 800dc56:	8019      	strh	r1, [r3, #0]
 800dc58:	2300      	movs	r3, #0
 800dc5a:	6123      	str	r3, [r4, #16]
 800dc5c:	4616      	mov	r6, r2
 800dc5e:	e7bc      	b.n	800dbda <_printf_i+0x146>
 800dc60:	6833      	ldr	r3, [r6, #0]
 800dc62:	1d1a      	adds	r2, r3, #4
 800dc64:	6032      	str	r2, [r6, #0]
 800dc66:	681e      	ldr	r6, [r3, #0]
 800dc68:	6862      	ldr	r2, [r4, #4]
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	f7f2 fae7 	bl	8000240 <memchr>
 800dc72:	b108      	cbz	r0, 800dc78 <_printf_i+0x1e4>
 800dc74:	1b80      	subs	r0, r0, r6
 800dc76:	6060      	str	r0, [r4, #4]
 800dc78:	6863      	ldr	r3, [r4, #4]
 800dc7a:	6123      	str	r3, [r4, #16]
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc82:	e7aa      	b.n	800dbda <_printf_i+0x146>
 800dc84:	6923      	ldr	r3, [r4, #16]
 800dc86:	4632      	mov	r2, r6
 800dc88:	4649      	mov	r1, r9
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	47d0      	blx	sl
 800dc8e:	3001      	adds	r0, #1
 800dc90:	d0ad      	beq.n	800dbee <_printf_i+0x15a>
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	079b      	lsls	r3, r3, #30
 800dc96:	d413      	bmi.n	800dcc0 <_printf_i+0x22c>
 800dc98:	68e0      	ldr	r0, [r4, #12]
 800dc9a:	9b03      	ldr	r3, [sp, #12]
 800dc9c:	4298      	cmp	r0, r3
 800dc9e:	bfb8      	it	lt
 800dca0:	4618      	movlt	r0, r3
 800dca2:	e7a6      	b.n	800dbf2 <_printf_i+0x15e>
 800dca4:	2301      	movs	r3, #1
 800dca6:	4632      	mov	r2, r6
 800dca8:	4649      	mov	r1, r9
 800dcaa:	4640      	mov	r0, r8
 800dcac:	47d0      	blx	sl
 800dcae:	3001      	adds	r0, #1
 800dcb0:	d09d      	beq.n	800dbee <_printf_i+0x15a>
 800dcb2:	3501      	adds	r5, #1
 800dcb4:	68e3      	ldr	r3, [r4, #12]
 800dcb6:	9903      	ldr	r1, [sp, #12]
 800dcb8:	1a5b      	subs	r3, r3, r1
 800dcba:	42ab      	cmp	r3, r5
 800dcbc:	dcf2      	bgt.n	800dca4 <_printf_i+0x210>
 800dcbe:	e7eb      	b.n	800dc98 <_printf_i+0x204>
 800dcc0:	2500      	movs	r5, #0
 800dcc2:	f104 0619 	add.w	r6, r4, #25
 800dcc6:	e7f5      	b.n	800dcb4 <_printf_i+0x220>
 800dcc8:	0800ecf8 	.word	0x0800ecf8
 800dccc:	0800ed09 	.word	0x0800ed09

0800dcd0 <_scanf_chars>:
 800dcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcd4:	4615      	mov	r5, r2
 800dcd6:	688a      	ldr	r2, [r1, #8]
 800dcd8:	4680      	mov	r8, r0
 800dcda:	460c      	mov	r4, r1
 800dcdc:	b932      	cbnz	r2, 800dcec <_scanf_chars+0x1c>
 800dcde:	698a      	ldr	r2, [r1, #24]
 800dce0:	2a00      	cmp	r2, #0
 800dce2:	bf14      	ite	ne
 800dce4:	f04f 32ff 	movne.w	r2, #4294967295
 800dce8:	2201      	moveq	r2, #1
 800dcea:	608a      	str	r2, [r1, #8]
 800dcec:	6822      	ldr	r2, [r4, #0]
 800dcee:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800dd80 <_scanf_chars+0xb0>
 800dcf2:	06d1      	lsls	r1, r2, #27
 800dcf4:	bf5f      	itttt	pl
 800dcf6:	681a      	ldrpl	r2, [r3, #0]
 800dcf8:	1d11      	addpl	r1, r2, #4
 800dcfa:	6019      	strpl	r1, [r3, #0]
 800dcfc:	6816      	ldrpl	r6, [r2, #0]
 800dcfe:	2700      	movs	r7, #0
 800dd00:	69a0      	ldr	r0, [r4, #24]
 800dd02:	b188      	cbz	r0, 800dd28 <_scanf_chars+0x58>
 800dd04:	2801      	cmp	r0, #1
 800dd06:	d107      	bne.n	800dd18 <_scanf_chars+0x48>
 800dd08:	682b      	ldr	r3, [r5, #0]
 800dd0a:	781a      	ldrb	r2, [r3, #0]
 800dd0c:	6963      	ldr	r3, [r4, #20]
 800dd0e:	5c9b      	ldrb	r3, [r3, r2]
 800dd10:	b953      	cbnz	r3, 800dd28 <_scanf_chars+0x58>
 800dd12:	2f00      	cmp	r7, #0
 800dd14:	d031      	beq.n	800dd7a <_scanf_chars+0xaa>
 800dd16:	e022      	b.n	800dd5e <_scanf_chars+0x8e>
 800dd18:	2802      	cmp	r0, #2
 800dd1a:	d120      	bne.n	800dd5e <_scanf_chars+0x8e>
 800dd1c:	682b      	ldr	r3, [r5, #0]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	f819 3003 	ldrb.w	r3, [r9, r3]
 800dd24:	071b      	lsls	r3, r3, #28
 800dd26:	d41a      	bmi.n	800dd5e <_scanf_chars+0x8e>
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	06da      	lsls	r2, r3, #27
 800dd2c:	bf5e      	ittt	pl
 800dd2e:	682b      	ldrpl	r3, [r5, #0]
 800dd30:	781b      	ldrbpl	r3, [r3, #0]
 800dd32:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dd36:	682a      	ldr	r2, [r5, #0]
 800dd38:	686b      	ldr	r3, [r5, #4]
 800dd3a:	3201      	adds	r2, #1
 800dd3c:	602a      	str	r2, [r5, #0]
 800dd3e:	68a2      	ldr	r2, [r4, #8]
 800dd40:	3b01      	subs	r3, #1
 800dd42:	3a01      	subs	r2, #1
 800dd44:	606b      	str	r3, [r5, #4]
 800dd46:	3701      	adds	r7, #1
 800dd48:	60a2      	str	r2, [r4, #8]
 800dd4a:	b142      	cbz	r2, 800dd5e <_scanf_chars+0x8e>
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	dcd7      	bgt.n	800dd00 <_scanf_chars+0x30>
 800dd50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dd54:	4629      	mov	r1, r5
 800dd56:	4640      	mov	r0, r8
 800dd58:	4798      	blx	r3
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d0d0      	beq.n	800dd00 <_scanf_chars+0x30>
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	f013 0310 	ands.w	r3, r3, #16
 800dd64:	d105      	bne.n	800dd72 <_scanf_chars+0xa2>
 800dd66:	68e2      	ldr	r2, [r4, #12]
 800dd68:	3201      	adds	r2, #1
 800dd6a:	60e2      	str	r2, [r4, #12]
 800dd6c:	69a2      	ldr	r2, [r4, #24]
 800dd6e:	b102      	cbz	r2, 800dd72 <_scanf_chars+0xa2>
 800dd70:	7033      	strb	r3, [r6, #0]
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	443b      	add	r3, r7
 800dd76:	6123      	str	r3, [r4, #16]
 800dd78:	2000      	movs	r0, #0
 800dd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd7e:	bf00      	nop
 800dd80:	0800ed36 	.word	0x0800ed36

0800dd84 <_scanf_i>:
 800dd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd88:	4698      	mov	r8, r3
 800dd8a:	4b74      	ldr	r3, [pc, #464]	@ (800df5c <_scanf_i+0x1d8>)
 800dd8c:	460c      	mov	r4, r1
 800dd8e:	4682      	mov	sl, r0
 800dd90:	4616      	mov	r6, r2
 800dd92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd96:	b087      	sub	sp, #28
 800dd98:	ab03      	add	r3, sp, #12
 800dd9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dd9e:	4b70      	ldr	r3, [pc, #448]	@ (800df60 <_scanf_i+0x1dc>)
 800dda0:	69a1      	ldr	r1, [r4, #24]
 800dda2:	4a70      	ldr	r2, [pc, #448]	@ (800df64 <_scanf_i+0x1e0>)
 800dda4:	2903      	cmp	r1, #3
 800dda6:	bf08      	it	eq
 800dda8:	461a      	moveq	r2, r3
 800ddaa:	68a3      	ldr	r3, [r4, #8]
 800ddac:	9201      	str	r2, [sp, #4]
 800ddae:	1e5a      	subs	r2, r3, #1
 800ddb0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ddb4:	bf88      	it	hi
 800ddb6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ddba:	4627      	mov	r7, r4
 800ddbc:	bf82      	ittt	hi
 800ddbe:	eb03 0905 	addhi.w	r9, r3, r5
 800ddc2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ddc6:	60a3      	strhi	r3, [r4, #8]
 800ddc8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ddcc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800ddd0:	bf98      	it	ls
 800ddd2:	f04f 0900 	movls.w	r9, #0
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	463d      	mov	r5, r7
 800ddda:	f04f 0b00 	mov.w	fp, #0
 800ddde:	6831      	ldr	r1, [r6, #0]
 800dde0:	ab03      	add	r3, sp, #12
 800dde2:	7809      	ldrb	r1, [r1, #0]
 800dde4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dde8:	2202      	movs	r2, #2
 800ddea:	f7f2 fa29 	bl	8000240 <memchr>
 800ddee:	b328      	cbz	r0, 800de3c <_scanf_i+0xb8>
 800ddf0:	f1bb 0f01 	cmp.w	fp, #1
 800ddf4:	d159      	bne.n	800deaa <_scanf_i+0x126>
 800ddf6:	6862      	ldr	r2, [r4, #4]
 800ddf8:	b92a      	cbnz	r2, 800de06 <_scanf_i+0x82>
 800ddfa:	6822      	ldr	r2, [r4, #0]
 800ddfc:	2108      	movs	r1, #8
 800ddfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de02:	6061      	str	r1, [r4, #4]
 800de04:	6022      	str	r2, [r4, #0]
 800de06:	6822      	ldr	r2, [r4, #0]
 800de08:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800de0c:	6022      	str	r2, [r4, #0]
 800de0e:	68a2      	ldr	r2, [r4, #8]
 800de10:	1e51      	subs	r1, r2, #1
 800de12:	60a1      	str	r1, [r4, #8]
 800de14:	b192      	cbz	r2, 800de3c <_scanf_i+0xb8>
 800de16:	6832      	ldr	r2, [r6, #0]
 800de18:	1c51      	adds	r1, r2, #1
 800de1a:	6031      	str	r1, [r6, #0]
 800de1c:	7812      	ldrb	r2, [r2, #0]
 800de1e:	f805 2b01 	strb.w	r2, [r5], #1
 800de22:	6872      	ldr	r2, [r6, #4]
 800de24:	3a01      	subs	r2, #1
 800de26:	2a00      	cmp	r2, #0
 800de28:	6072      	str	r2, [r6, #4]
 800de2a:	dc07      	bgt.n	800de3c <_scanf_i+0xb8>
 800de2c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800de30:	4631      	mov	r1, r6
 800de32:	4650      	mov	r0, sl
 800de34:	4790      	blx	r2
 800de36:	2800      	cmp	r0, #0
 800de38:	f040 8085 	bne.w	800df46 <_scanf_i+0x1c2>
 800de3c:	f10b 0b01 	add.w	fp, fp, #1
 800de40:	f1bb 0f03 	cmp.w	fp, #3
 800de44:	d1cb      	bne.n	800ddde <_scanf_i+0x5a>
 800de46:	6863      	ldr	r3, [r4, #4]
 800de48:	b90b      	cbnz	r3, 800de4e <_scanf_i+0xca>
 800de4a:	230a      	movs	r3, #10
 800de4c:	6063      	str	r3, [r4, #4]
 800de4e:	6863      	ldr	r3, [r4, #4]
 800de50:	4945      	ldr	r1, [pc, #276]	@ (800df68 <_scanf_i+0x1e4>)
 800de52:	6960      	ldr	r0, [r4, #20]
 800de54:	1ac9      	subs	r1, r1, r3
 800de56:	f000 f935 	bl	800e0c4 <__sccl>
 800de5a:	f04f 0b00 	mov.w	fp, #0
 800de5e:	68a3      	ldr	r3, [r4, #8]
 800de60:	6822      	ldr	r2, [r4, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d03d      	beq.n	800dee2 <_scanf_i+0x15e>
 800de66:	6831      	ldr	r1, [r6, #0]
 800de68:	6960      	ldr	r0, [r4, #20]
 800de6a:	f891 c000 	ldrb.w	ip, [r1]
 800de6e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800de72:	2800      	cmp	r0, #0
 800de74:	d035      	beq.n	800dee2 <_scanf_i+0x15e>
 800de76:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800de7a:	d124      	bne.n	800dec6 <_scanf_i+0x142>
 800de7c:	0510      	lsls	r0, r2, #20
 800de7e:	d522      	bpl.n	800dec6 <_scanf_i+0x142>
 800de80:	f10b 0b01 	add.w	fp, fp, #1
 800de84:	f1b9 0f00 	cmp.w	r9, #0
 800de88:	d003      	beq.n	800de92 <_scanf_i+0x10e>
 800de8a:	3301      	adds	r3, #1
 800de8c:	f109 39ff 	add.w	r9, r9, #4294967295
 800de90:	60a3      	str	r3, [r4, #8]
 800de92:	6873      	ldr	r3, [r6, #4]
 800de94:	3b01      	subs	r3, #1
 800de96:	2b00      	cmp	r3, #0
 800de98:	6073      	str	r3, [r6, #4]
 800de9a:	dd1b      	ble.n	800ded4 <_scanf_i+0x150>
 800de9c:	6833      	ldr	r3, [r6, #0]
 800de9e:	3301      	adds	r3, #1
 800dea0:	6033      	str	r3, [r6, #0]
 800dea2:	68a3      	ldr	r3, [r4, #8]
 800dea4:	3b01      	subs	r3, #1
 800dea6:	60a3      	str	r3, [r4, #8]
 800dea8:	e7d9      	b.n	800de5e <_scanf_i+0xda>
 800deaa:	f1bb 0f02 	cmp.w	fp, #2
 800deae:	d1ae      	bne.n	800de0e <_scanf_i+0x8a>
 800deb0:	6822      	ldr	r2, [r4, #0]
 800deb2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800deb6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800deba:	d1c4      	bne.n	800de46 <_scanf_i+0xc2>
 800debc:	2110      	movs	r1, #16
 800debe:	6061      	str	r1, [r4, #4]
 800dec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dec4:	e7a2      	b.n	800de0c <_scanf_i+0x88>
 800dec6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800deca:	6022      	str	r2, [r4, #0]
 800decc:	780b      	ldrb	r3, [r1, #0]
 800dece:	f805 3b01 	strb.w	r3, [r5], #1
 800ded2:	e7de      	b.n	800de92 <_scanf_i+0x10e>
 800ded4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ded8:	4631      	mov	r1, r6
 800deda:	4650      	mov	r0, sl
 800dedc:	4798      	blx	r3
 800dede:	2800      	cmp	r0, #0
 800dee0:	d0df      	beq.n	800dea2 <_scanf_i+0x11e>
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	05d9      	lsls	r1, r3, #23
 800dee6:	d50d      	bpl.n	800df04 <_scanf_i+0x180>
 800dee8:	42bd      	cmp	r5, r7
 800deea:	d909      	bls.n	800df00 <_scanf_i+0x17c>
 800deec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800def0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800def4:	4632      	mov	r2, r6
 800def6:	4650      	mov	r0, sl
 800def8:	4798      	blx	r3
 800defa:	f105 39ff 	add.w	r9, r5, #4294967295
 800defe:	464d      	mov	r5, r9
 800df00:	42bd      	cmp	r5, r7
 800df02:	d028      	beq.n	800df56 <_scanf_i+0x1d2>
 800df04:	6822      	ldr	r2, [r4, #0]
 800df06:	f012 0210 	ands.w	r2, r2, #16
 800df0a:	d113      	bne.n	800df34 <_scanf_i+0x1b0>
 800df0c:	702a      	strb	r2, [r5, #0]
 800df0e:	6863      	ldr	r3, [r4, #4]
 800df10:	9e01      	ldr	r6, [sp, #4]
 800df12:	4639      	mov	r1, r7
 800df14:	4650      	mov	r0, sl
 800df16:	47b0      	blx	r6
 800df18:	f8d8 3000 	ldr.w	r3, [r8]
 800df1c:	6821      	ldr	r1, [r4, #0]
 800df1e:	1d1a      	adds	r2, r3, #4
 800df20:	f8c8 2000 	str.w	r2, [r8]
 800df24:	f011 0f20 	tst.w	r1, #32
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	d00f      	beq.n	800df4c <_scanf_i+0x1c8>
 800df2c:	6018      	str	r0, [r3, #0]
 800df2e:	68e3      	ldr	r3, [r4, #12]
 800df30:	3301      	adds	r3, #1
 800df32:	60e3      	str	r3, [r4, #12]
 800df34:	6923      	ldr	r3, [r4, #16]
 800df36:	1bed      	subs	r5, r5, r7
 800df38:	445d      	add	r5, fp
 800df3a:	442b      	add	r3, r5
 800df3c:	6123      	str	r3, [r4, #16]
 800df3e:	2000      	movs	r0, #0
 800df40:	b007      	add	sp, #28
 800df42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df46:	f04f 0b00 	mov.w	fp, #0
 800df4a:	e7ca      	b.n	800dee2 <_scanf_i+0x15e>
 800df4c:	07ca      	lsls	r2, r1, #31
 800df4e:	bf4c      	ite	mi
 800df50:	8018      	strhmi	r0, [r3, #0]
 800df52:	6018      	strpl	r0, [r3, #0]
 800df54:	e7eb      	b.n	800df2e <_scanf_i+0x1aa>
 800df56:	2001      	movs	r0, #1
 800df58:	e7f2      	b.n	800df40 <_scanf_i+0x1bc>
 800df5a:	bf00      	nop
 800df5c:	0800ec5c 	.word	0x0800ec5c
 800df60:	0800e501 	.word	0x0800e501
 800df64:	0800e5e1 	.word	0x0800e5e1
 800df68:	0800ed2a 	.word	0x0800ed2a

0800df6c <__sflush_r>:
 800df6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df74:	0716      	lsls	r6, r2, #28
 800df76:	4605      	mov	r5, r0
 800df78:	460c      	mov	r4, r1
 800df7a:	d454      	bmi.n	800e026 <__sflush_r+0xba>
 800df7c:	684b      	ldr	r3, [r1, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	dc02      	bgt.n	800df88 <__sflush_r+0x1c>
 800df82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800df84:	2b00      	cmp	r3, #0
 800df86:	dd48      	ble.n	800e01a <__sflush_r+0xae>
 800df88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800df8a:	2e00      	cmp	r6, #0
 800df8c:	d045      	beq.n	800e01a <__sflush_r+0xae>
 800df8e:	2300      	movs	r3, #0
 800df90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800df94:	682f      	ldr	r7, [r5, #0]
 800df96:	6a21      	ldr	r1, [r4, #32]
 800df98:	602b      	str	r3, [r5, #0]
 800df9a:	d030      	beq.n	800dffe <__sflush_r+0x92>
 800df9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	0759      	lsls	r1, r3, #29
 800dfa2:	d505      	bpl.n	800dfb0 <__sflush_r+0x44>
 800dfa4:	6863      	ldr	r3, [r4, #4]
 800dfa6:	1ad2      	subs	r2, r2, r3
 800dfa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dfaa:	b10b      	cbz	r3, 800dfb0 <__sflush_r+0x44>
 800dfac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dfae:	1ad2      	subs	r2, r2, r3
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dfb4:	6a21      	ldr	r1, [r4, #32]
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	47b0      	blx	r6
 800dfba:	1c43      	adds	r3, r0, #1
 800dfbc:	89a3      	ldrh	r3, [r4, #12]
 800dfbe:	d106      	bne.n	800dfce <__sflush_r+0x62>
 800dfc0:	6829      	ldr	r1, [r5, #0]
 800dfc2:	291d      	cmp	r1, #29
 800dfc4:	d82b      	bhi.n	800e01e <__sflush_r+0xb2>
 800dfc6:	4a2a      	ldr	r2, [pc, #168]	@ (800e070 <__sflush_r+0x104>)
 800dfc8:	40ca      	lsrs	r2, r1
 800dfca:	07d6      	lsls	r6, r2, #31
 800dfcc:	d527      	bpl.n	800e01e <__sflush_r+0xb2>
 800dfce:	2200      	movs	r2, #0
 800dfd0:	6062      	str	r2, [r4, #4]
 800dfd2:	04d9      	lsls	r1, r3, #19
 800dfd4:	6922      	ldr	r2, [r4, #16]
 800dfd6:	6022      	str	r2, [r4, #0]
 800dfd8:	d504      	bpl.n	800dfe4 <__sflush_r+0x78>
 800dfda:	1c42      	adds	r2, r0, #1
 800dfdc:	d101      	bne.n	800dfe2 <__sflush_r+0x76>
 800dfde:	682b      	ldr	r3, [r5, #0]
 800dfe0:	b903      	cbnz	r3, 800dfe4 <__sflush_r+0x78>
 800dfe2:	6560      	str	r0, [r4, #84]	@ 0x54
 800dfe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dfe6:	602f      	str	r7, [r5, #0]
 800dfe8:	b1b9      	cbz	r1, 800e01a <__sflush_r+0xae>
 800dfea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dfee:	4299      	cmp	r1, r3
 800dff0:	d002      	beq.n	800dff8 <__sflush_r+0x8c>
 800dff2:	4628      	mov	r0, r5
 800dff4:	f7fe ff7e 	bl	800cef4 <_free_r>
 800dff8:	2300      	movs	r3, #0
 800dffa:	6363      	str	r3, [r4, #52]	@ 0x34
 800dffc:	e00d      	b.n	800e01a <__sflush_r+0xae>
 800dffe:	2301      	movs	r3, #1
 800e000:	4628      	mov	r0, r5
 800e002:	47b0      	blx	r6
 800e004:	4602      	mov	r2, r0
 800e006:	1c50      	adds	r0, r2, #1
 800e008:	d1c9      	bne.n	800df9e <__sflush_r+0x32>
 800e00a:	682b      	ldr	r3, [r5, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d0c6      	beq.n	800df9e <__sflush_r+0x32>
 800e010:	2b1d      	cmp	r3, #29
 800e012:	d001      	beq.n	800e018 <__sflush_r+0xac>
 800e014:	2b16      	cmp	r3, #22
 800e016:	d11e      	bne.n	800e056 <__sflush_r+0xea>
 800e018:	602f      	str	r7, [r5, #0]
 800e01a:	2000      	movs	r0, #0
 800e01c:	e022      	b.n	800e064 <__sflush_r+0xf8>
 800e01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e022:	b21b      	sxth	r3, r3
 800e024:	e01b      	b.n	800e05e <__sflush_r+0xf2>
 800e026:	690f      	ldr	r7, [r1, #16]
 800e028:	2f00      	cmp	r7, #0
 800e02a:	d0f6      	beq.n	800e01a <__sflush_r+0xae>
 800e02c:	0793      	lsls	r3, r2, #30
 800e02e:	680e      	ldr	r6, [r1, #0]
 800e030:	bf08      	it	eq
 800e032:	694b      	ldreq	r3, [r1, #20]
 800e034:	600f      	str	r7, [r1, #0]
 800e036:	bf18      	it	ne
 800e038:	2300      	movne	r3, #0
 800e03a:	eba6 0807 	sub.w	r8, r6, r7
 800e03e:	608b      	str	r3, [r1, #8]
 800e040:	f1b8 0f00 	cmp.w	r8, #0
 800e044:	dde9      	ble.n	800e01a <__sflush_r+0xae>
 800e046:	6a21      	ldr	r1, [r4, #32]
 800e048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e04a:	4643      	mov	r3, r8
 800e04c:	463a      	mov	r2, r7
 800e04e:	4628      	mov	r0, r5
 800e050:	47b0      	blx	r6
 800e052:	2800      	cmp	r0, #0
 800e054:	dc08      	bgt.n	800e068 <__sflush_r+0xfc>
 800e056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e05e:	81a3      	strh	r3, [r4, #12]
 800e060:	f04f 30ff 	mov.w	r0, #4294967295
 800e064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e068:	4407      	add	r7, r0
 800e06a:	eba8 0800 	sub.w	r8, r8, r0
 800e06e:	e7e7      	b.n	800e040 <__sflush_r+0xd4>
 800e070:	20400001 	.word	0x20400001

0800e074 <_fflush_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	690b      	ldr	r3, [r1, #16]
 800e078:	4605      	mov	r5, r0
 800e07a:	460c      	mov	r4, r1
 800e07c:	b913      	cbnz	r3, 800e084 <_fflush_r+0x10>
 800e07e:	2500      	movs	r5, #0
 800e080:	4628      	mov	r0, r5
 800e082:	bd38      	pop	{r3, r4, r5, pc}
 800e084:	b118      	cbz	r0, 800e08e <_fflush_r+0x1a>
 800e086:	6a03      	ldr	r3, [r0, #32]
 800e088:	b90b      	cbnz	r3, 800e08e <_fflush_r+0x1a>
 800e08a:	f7fe fd7f 	bl	800cb8c <__sinit>
 800e08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d0f3      	beq.n	800e07e <_fflush_r+0xa>
 800e096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e098:	07d0      	lsls	r0, r2, #31
 800e09a:	d404      	bmi.n	800e0a6 <_fflush_r+0x32>
 800e09c:	0599      	lsls	r1, r3, #22
 800e09e:	d402      	bmi.n	800e0a6 <_fflush_r+0x32>
 800e0a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0a2:	f7fe ff10 	bl	800cec6 <__retarget_lock_acquire_recursive>
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	4621      	mov	r1, r4
 800e0aa:	f7ff ff5f 	bl	800df6c <__sflush_r>
 800e0ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e0b0:	07da      	lsls	r2, r3, #31
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	d4e4      	bmi.n	800e080 <_fflush_r+0xc>
 800e0b6:	89a3      	ldrh	r3, [r4, #12]
 800e0b8:	059b      	lsls	r3, r3, #22
 800e0ba:	d4e1      	bmi.n	800e080 <_fflush_r+0xc>
 800e0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e0be:	f7fe ff03 	bl	800cec8 <__retarget_lock_release_recursive>
 800e0c2:	e7dd      	b.n	800e080 <_fflush_r+0xc>

0800e0c4 <__sccl>:
 800e0c4:	b570      	push	{r4, r5, r6, lr}
 800e0c6:	780b      	ldrb	r3, [r1, #0]
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	2b5e      	cmp	r3, #94	@ 0x5e
 800e0cc:	bf0b      	itete	eq
 800e0ce:	784b      	ldrbeq	r3, [r1, #1]
 800e0d0:	1c4a      	addne	r2, r1, #1
 800e0d2:	1c8a      	addeq	r2, r1, #2
 800e0d4:	2100      	movne	r1, #0
 800e0d6:	bf08      	it	eq
 800e0d8:	2101      	moveq	r1, #1
 800e0da:	3801      	subs	r0, #1
 800e0dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e0e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e0e4:	42a8      	cmp	r0, r5
 800e0e6:	d1fb      	bne.n	800e0e0 <__sccl+0x1c>
 800e0e8:	b90b      	cbnz	r3, 800e0ee <__sccl+0x2a>
 800e0ea:	1e50      	subs	r0, r2, #1
 800e0ec:	bd70      	pop	{r4, r5, r6, pc}
 800e0ee:	f081 0101 	eor.w	r1, r1, #1
 800e0f2:	54e1      	strb	r1, [r4, r3]
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e0fc:	2d2d      	cmp	r5, #45	@ 0x2d
 800e0fe:	d005      	beq.n	800e10c <__sccl+0x48>
 800e100:	2d5d      	cmp	r5, #93	@ 0x5d
 800e102:	d016      	beq.n	800e132 <__sccl+0x6e>
 800e104:	2d00      	cmp	r5, #0
 800e106:	d0f1      	beq.n	800e0ec <__sccl+0x28>
 800e108:	462b      	mov	r3, r5
 800e10a:	e7f2      	b.n	800e0f2 <__sccl+0x2e>
 800e10c:	7846      	ldrb	r6, [r0, #1]
 800e10e:	2e5d      	cmp	r6, #93	@ 0x5d
 800e110:	d0fa      	beq.n	800e108 <__sccl+0x44>
 800e112:	42b3      	cmp	r3, r6
 800e114:	dcf8      	bgt.n	800e108 <__sccl+0x44>
 800e116:	3002      	adds	r0, #2
 800e118:	461a      	mov	r2, r3
 800e11a:	3201      	adds	r2, #1
 800e11c:	4296      	cmp	r6, r2
 800e11e:	54a1      	strb	r1, [r4, r2]
 800e120:	dcfb      	bgt.n	800e11a <__sccl+0x56>
 800e122:	1af2      	subs	r2, r6, r3
 800e124:	3a01      	subs	r2, #1
 800e126:	1c5d      	adds	r5, r3, #1
 800e128:	42b3      	cmp	r3, r6
 800e12a:	bfa8      	it	ge
 800e12c:	2200      	movge	r2, #0
 800e12e:	18ab      	adds	r3, r5, r2
 800e130:	e7e1      	b.n	800e0f6 <__sccl+0x32>
 800e132:	4610      	mov	r0, r2
 800e134:	e7da      	b.n	800e0ec <__sccl+0x28>

0800e136 <__submore>:
 800e136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e13a:	460c      	mov	r4, r1
 800e13c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e13e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e142:	4299      	cmp	r1, r3
 800e144:	d11d      	bne.n	800e182 <__submore+0x4c>
 800e146:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e14a:	f7fe ff3f 	bl	800cfcc <_malloc_r>
 800e14e:	b918      	cbnz	r0, 800e158 <__submore+0x22>
 800e150:	f04f 30ff 	mov.w	r0, #4294967295
 800e154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e15c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e15e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e162:	6360      	str	r0, [r4, #52]	@ 0x34
 800e164:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e168:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e16c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e170:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e174:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e178:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e17c:	6020      	str	r0, [r4, #0]
 800e17e:	2000      	movs	r0, #0
 800e180:	e7e8      	b.n	800e154 <__submore+0x1e>
 800e182:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e184:	0077      	lsls	r7, r6, #1
 800e186:	463a      	mov	r2, r7
 800e188:	f000 f912 	bl	800e3b0 <_realloc_r>
 800e18c:	4605      	mov	r5, r0
 800e18e:	2800      	cmp	r0, #0
 800e190:	d0de      	beq.n	800e150 <__submore+0x1a>
 800e192:	eb00 0806 	add.w	r8, r0, r6
 800e196:	4601      	mov	r1, r0
 800e198:	4632      	mov	r2, r6
 800e19a:	4640      	mov	r0, r8
 800e19c:	f7fe fe95 	bl	800ceca <memcpy>
 800e1a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e1a4:	f8c4 8000 	str.w	r8, [r4]
 800e1a8:	e7e9      	b.n	800e17e <__submore+0x48>

0800e1aa <__swbuf_r>:
 800e1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ac:	460e      	mov	r6, r1
 800e1ae:	4614      	mov	r4, r2
 800e1b0:	4605      	mov	r5, r0
 800e1b2:	b118      	cbz	r0, 800e1bc <__swbuf_r+0x12>
 800e1b4:	6a03      	ldr	r3, [r0, #32]
 800e1b6:	b90b      	cbnz	r3, 800e1bc <__swbuf_r+0x12>
 800e1b8:	f7fe fce8 	bl	800cb8c <__sinit>
 800e1bc:	69a3      	ldr	r3, [r4, #24]
 800e1be:	60a3      	str	r3, [r4, #8]
 800e1c0:	89a3      	ldrh	r3, [r4, #12]
 800e1c2:	071a      	lsls	r2, r3, #28
 800e1c4:	d501      	bpl.n	800e1ca <__swbuf_r+0x20>
 800e1c6:	6923      	ldr	r3, [r4, #16]
 800e1c8:	b943      	cbnz	r3, 800e1dc <__swbuf_r+0x32>
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f000 f82b 	bl	800e228 <__swsetup_r>
 800e1d2:	b118      	cbz	r0, 800e1dc <__swbuf_r+0x32>
 800e1d4:	f04f 37ff 	mov.w	r7, #4294967295
 800e1d8:	4638      	mov	r0, r7
 800e1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	6922      	ldr	r2, [r4, #16]
 800e1e0:	1a98      	subs	r0, r3, r2
 800e1e2:	6963      	ldr	r3, [r4, #20]
 800e1e4:	b2f6      	uxtb	r6, r6
 800e1e6:	4283      	cmp	r3, r0
 800e1e8:	4637      	mov	r7, r6
 800e1ea:	dc05      	bgt.n	800e1f8 <__swbuf_r+0x4e>
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7ff ff40 	bl	800e074 <_fflush_r>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d1ed      	bne.n	800e1d4 <__swbuf_r+0x2a>
 800e1f8:	68a3      	ldr	r3, [r4, #8]
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	60a3      	str	r3, [r4, #8]
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	1c5a      	adds	r2, r3, #1
 800e202:	6022      	str	r2, [r4, #0]
 800e204:	701e      	strb	r6, [r3, #0]
 800e206:	6962      	ldr	r2, [r4, #20]
 800e208:	1c43      	adds	r3, r0, #1
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d004      	beq.n	800e218 <__swbuf_r+0x6e>
 800e20e:	89a3      	ldrh	r3, [r4, #12]
 800e210:	07db      	lsls	r3, r3, #31
 800e212:	d5e1      	bpl.n	800e1d8 <__swbuf_r+0x2e>
 800e214:	2e0a      	cmp	r6, #10
 800e216:	d1df      	bne.n	800e1d8 <__swbuf_r+0x2e>
 800e218:	4621      	mov	r1, r4
 800e21a:	4628      	mov	r0, r5
 800e21c:	f7ff ff2a 	bl	800e074 <_fflush_r>
 800e220:	2800      	cmp	r0, #0
 800e222:	d0d9      	beq.n	800e1d8 <__swbuf_r+0x2e>
 800e224:	e7d6      	b.n	800e1d4 <__swbuf_r+0x2a>
	...

0800e228 <__swsetup_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4b29      	ldr	r3, [pc, #164]	@ (800e2d0 <__swsetup_r+0xa8>)
 800e22c:	4605      	mov	r5, r0
 800e22e:	6818      	ldr	r0, [r3, #0]
 800e230:	460c      	mov	r4, r1
 800e232:	b118      	cbz	r0, 800e23c <__swsetup_r+0x14>
 800e234:	6a03      	ldr	r3, [r0, #32]
 800e236:	b90b      	cbnz	r3, 800e23c <__swsetup_r+0x14>
 800e238:	f7fe fca8 	bl	800cb8c <__sinit>
 800e23c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e240:	0719      	lsls	r1, r3, #28
 800e242:	d422      	bmi.n	800e28a <__swsetup_r+0x62>
 800e244:	06da      	lsls	r2, r3, #27
 800e246:	d407      	bmi.n	800e258 <__swsetup_r+0x30>
 800e248:	2209      	movs	r2, #9
 800e24a:	602a      	str	r2, [r5, #0]
 800e24c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e250:	81a3      	strh	r3, [r4, #12]
 800e252:	f04f 30ff 	mov.w	r0, #4294967295
 800e256:	e033      	b.n	800e2c0 <__swsetup_r+0x98>
 800e258:	0758      	lsls	r0, r3, #29
 800e25a:	d512      	bpl.n	800e282 <__swsetup_r+0x5a>
 800e25c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e25e:	b141      	cbz	r1, 800e272 <__swsetup_r+0x4a>
 800e260:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e264:	4299      	cmp	r1, r3
 800e266:	d002      	beq.n	800e26e <__swsetup_r+0x46>
 800e268:	4628      	mov	r0, r5
 800e26a:	f7fe fe43 	bl	800cef4 <_free_r>
 800e26e:	2300      	movs	r3, #0
 800e270:	6363      	str	r3, [r4, #52]	@ 0x34
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e278:	81a3      	strh	r3, [r4, #12]
 800e27a:	2300      	movs	r3, #0
 800e27c:	6063      	str	r3, [r4, #4]
 800e27e:	6923      	ldr	r3, [r4, #16]
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	f043 0308 	orr.w	r3, r3, #8
 800e288:	81a3      	strh	r3, [r4, #12]
 800e28a:	6923      	ldr	r3, [r4, #16]
 800e28c:	b94b      	cbnz	r3, 800e2a2 <__swsetup_r+0x7a>
 800e28e:	89a3      	ldrh	r3, [r4, #12]
 800e290:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e298:	d003      	beq.n	800e2a2 <__swsetup_r+0x7a>
 800e29a:	4621      	mov	r1, r4
 800e29c:	4628      	mov	r0, r5
 800e29e:	f000 f9c7 	bl	800e630 <__smakebuf_r>
 800e2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2a6:	f013 0201 	ands.w	r2, r3, #1
 800e2aa:	d00a      	beq.n	800e2c2 <__swsetup_r+0x9a>
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	60a2      	str	r2, [r4, #8]
 800e2b0:	6962      	ldr	r2, [r4, #20]
 800e2b2:	4252      	negs	r2, r2
 800e2b4:	61a2      	str	r2, [r4, #24]
 800e2b6:	6922      	ldr	r2, [r4, #16]
 800e2b8:	b942      	cbnz	r2, 800e2cc <__swsetup_r+0xa4>
 800e2ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2be:	d1c5      	bne.n	800e24c <__swsetup_r+0x24>
 800e2c0:	bd38      	pop	{r3, r4, r5, pc}
 800e2c2:	0799      	lsls	r1, r3, #30
 800e2c4:	bf58      	it	pl
 800e2c6:	6962      	ldrpl	r2, [r4, #20]
 800e2c8:	60a2      	str	r2, [r4, #8]
 800e2ca:	e7f4      	b.n	800e2b6 <__swsetup_r+0x8e>
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	e7f7      	b.n	800e2c0 <__swsetup_r+0x98>
 800e2d0:	20000118 	.word	0x20000118

0800e2d4 <memmove>:
 800e2d4:	4288      	cmp	r0, r1
 800e2d6:	b510      	push	{r4, lr}
 800e2d8:	eb01 0402 	add.w	r4, r1, r2
 800e2dc:	d902      	bls.n	800e2e4 <memmove+0x10>
 800e2de:	4284      	cmp	r4, r0
 800e2e0:	4623      	mov	r3, r4
 800e2e2:	d807      	bhi.n	800e2f4 <memmove+0x20>
 800e2e4:	1e43      	subs	r3, r0, #1
 800e2e6:	42a1      	cmp	r1, r4
 800e2e8:	d008      	beq.n	800e2fc <memmove+0x28>
 800e2ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2f2:	e7f8      	b.n	800e2e6 <memmove+0x12>
 800e2f4:	4402      	add	r2, r0
 800e2f6:	4601      	mov	r1, r0
 800e2f8:	428a      	cmp	r2, r1
 800e2fa:	d100      	bne.n	800e2fe <memmove+0x2a>
 800e2fc:	bd10      	pop	{r4, pc}
 800e2fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e306:	e7f7      	b.n	800e2f8 <memmove+0x24>

0800e308 <_raise_r>:
 800e308:	291f      	cmp	r1, #31
 800e30a:	b538      	push	{r3, r4, r5, lr}
 800e30c:	4605      	mov	r5, r0
 800e30e:	460c      	mov	r4, r1
 800e310:	d904      	bls.n	800e31c <_raise_r+0x14>
 800e312:	2316      	movs	r3, #22
 800e314:	6003      	str	r3, [r0, #0]
 800e316:	f04f 30ff 	mov.w	r0, #4294967295
 800e31a:	bd38      	pop	{r3, r4, r5, pc}
 800e31c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e31e:	b112      	cbz	r2, 800e326 <_raise_r+0x1e>
 800e320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e324:	b94b      	cbnz	r3, 800e33a <_raise_r+0x32>
 800e326:	4628      	mov	r0, r5
 800e328:	f000 f830 	bl	800e38c <_getpid_r>
 800e32c:	4622      	mov	r2, r4
 800e32e:	4601      	mov	r1, r0
 800e330:	4628      	mov	r0, r5
 800e332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e336:	f000 b817 	b.w	800e368 <_kill_r>
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d00a      	beq.n	800e354 <_raise_r+0x4c>
 800e33e:	1c59      	adds	r1, r3, #1
 800e340:	d103      	bne.n	800e34a <_raise_r+0x42>
 800e342:	2316      	movs	r3, #22
 800e344:	6003      	str	r3, [r0, #0]
 800e346:	2001      	movs	r0, #1
 800e348:	e7e7      	b.n	800e31a <_raise_r+0x12>
 800e34a:	2100      	movs	r1, #0
 800e34c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e350:	4620      	mov	r0, r4
 800e352:	4798      	blx	r3
 800e354:	2000      	movs	r0, #0
 800e356:	e7e0      	b.n	800e31a <_raise_r+0x12>

0800e358 <raise>:
 800e358:	4b02      	ldr	r3, [pc, #8]	@ (800e364 <raise+0xc>)
 800e35a:	4601      	mov	r1, r0
 800e35c:	6818      	ldr	r0, [r3, #0]
 800e35e:	f7ff bfd3 	b.w	800e308 <_raise_r>
 800e362:	bf00      	nop
 800e364:	20000118 	.word	0x20000118

0800e368 <_kill_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	4d07      	ldr	r5, [pc, #28]	@ (800e388 <_kill_r+0x20>)
 800e36c:	2300      	movs	r3, #0
 800e36e:	4604      	mov	r4, r0
 800e370:	4608      	mov	r0, r1
 800e372:	4611      	mov	r1, r2
 800e374:	602b      	str	r3, [r5, #0]
 800e376:	f7f2 fd7b 	bl	8000e70 <_kill>
 800e37a:	1c43      	adds	r3, r0, #1
 800e37c:	d102      	bne.n	800e384 <_kill_r+0x1c>
 800e37e:	682b      	ldr	r3, [r5, #0]
 800e380:	b103      	cbz	r3, 800e384 <_kill_r+0x1c>
 800e382:	6023      	str	r3, [r4, #0]
 800e384:	bd38      	pop	{r3, r4, r5, pc}
 800e386:	bf00      	nop
 800e388:	20002334 	.word	0x20002334

0800e38c <_getpid_r>:
 800e38c:	f7f2 bd68 	b.w	8000e60 <_getpid>

0800e390 <_sbrk_r>:
 800e390:	b538      	push	{r3, r4, r5, lr}
 800e392:	4d06      	ldr	r5, [pc, #24]	@ (800e3ac <_sbrk_r+0x1c>)
 800e394:	2300      	movs	r3, #0
 800e396:	4604      	mov	r4, r0
 800e398:	4608      	mov	r0, r1
 800e39a:	602b      	str	r3, [r5, #0]
 800e39c:	f7f2 fdf0 	bl	8000f80 <_sbrk>
 800e3a0:	1c43      	adds	r3, r0, #1
 800e3a2:	d102      	bne.n	800e3aa <_sbrk_r+0x1a>
 800e3a4:	682b      	ldr	r3, [r5, #0]
 800e3a6:	b103      	cbz	r3, 800e3aa <_sbrk_r+0x1a>
 800e3a8:	6023      	str	r3, [r4, #0]
 800e3aa:	bd38      	pop	{r3, r4, r5, pc}
 800e3ac:	20002334 	.word	0x20002334

0800e3b0 <_realloc_r>:
 800e3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b4:	4607      	mov	r7, r0
 800e3b6:	4614      	mov	r4, r2
 800e3b8:	460d      	mov	r5, r1
 800e3ba:	b921      	cbnz	r1, 800e3c6 <_realloc_r+0x16>
 800e3bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c0:	4611      	mov	r1, r2
 800e3c2:	f7fe be03 	b.w	800cfcc <_malloc_r>
 800e3c6:	b92a      	cbnz	r2, 800e3d4 <_realloc_r+0x24>
 800e3c8:	f7fe fd94 	bl	800cef4 <_free_r>
 800e3cc:	4625      	mov	r5, r4
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d4:	f000 f98a 	bl	800e6ec <_malloc_usable_size_r>
 800e3d8:	4284      	cmp	r4, r0
 800e3da:	4606      	mov	r6, r0
 800e3dc:	d802      	bhi.n	800e3e4 <_realloc_r+0x34>
 800e3de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3e2:	d8f4      	bhi.n	800e3ce <_realloc_r+0x1e>
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	f7fe fdf0 	bl	800cfcc <_malloc_r>
 800e3ec:	4680      	mov	r8, r0
 800e3ee:	b908      	cbnz	r0, 800e3f4 <_realloc_r+0x44>
 800e3f0:	4645      	mov	r5, r8
 800e3f2:	e7ec      	b.n	800e3ce <_realloc_r+0x1e>
 800e3f4:	42b4      	cmp	r4, r6
 800e3f6:	4622      	mov	r2, r4
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	bf28      	it	cs
 800e3fc:	4632      	movcs	r2, r6
 800e3fe:	f7fe fd64 	bl	800ceca <memcpy>
 800e402:	4629      	mov	r1, r5
 800e404:	4638      	mov	r0, r7
 800e406:	f7fe fd75 	bl	800cef4 <_free_r>
 800e40a:	e7f1      	b.n	800e3f0 <_realloc_r+0x40>

0800e40c <_strtol_l.isra.0>:
 800e40c:	2b24      	cmp	r3, #36	@ 0x24
 800e40e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e412:	4686      	mov	lr, r0
 800e414:	4690      	mov	r8, r2
 800e416:	d801      	bhi.n	800e41c <_strtol_l.isra.0+0x10>
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d106      	bne.n	800e42a <_strtol_l.isra.0+0x1e>
 800e41c:	f7fe fd28 	bl	800ce70 <__errno>
 800e420:	2316      	movs	r3, #22
 800e422:	6003      	str	r3, [r0, #0]
 800e424:	2000      	movs	r0, #0
 800e426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42a:	4834      	ldr	r0, [pc, #208]	@ (800e4fc <_strtol_l.isra.0+0xf0>)
 800e42c:	460d      	mov	r5, r1
 800e42e:	462a      	mov	r2, r5
 800e430:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e434:	5d06      	ldrb	r6, [r0, r4]
 800e436:	f016 0608 	ands.w	r6, r6, #8
 800e43a:	d1f8      	bne.n	800e42e <_strtol_l.isra.0+0x22>
 800e43c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e43e:	d110      	bne.n	800e462 <_strtol_l.isra.0+0x56>
 800e440:	782c      	ldrb	r4, [r5, #0]
 800e442:	2601      	movs	r6, #1
 800e444:	1c95      	adds	r5, r2, #2
 800e446:	f033 0210 	bics.w	r2, r3, #16
 800e44a:	d115      	bne.n	800e478 <_strtol_l.isra.0+0x6c>
 800e44c:	2c30      	cmp	r4, #48	@ 0x30
 800e44e:	d10d      	bne.n	800e46c <_strtol_l.isra.0+0x60>
 800e450:	782a      	ldrb	r2, [r5, #0]
 800e452:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e456:	2a58      	cmp	r2, #88	@ 0x58
 800e458:	d108      	bne.n	800e46c <_strtol_l.isra.0+0x60>
 800e45a:	786c      	ldrb	r4, [r5, #1]
 800e45c:	3502      	adds	r5, #2
 800e45e:	2310      	movs	r3, #16
 800e460:	e00a      	b.n	800e478 <_strtol_l.isra.0+0x6c>
 800e462:	2c2b      	cmp	r4, #43	@ 0x2b
 800e464:	bf04      	itt	eq
 800e466:	782c      	ldrbeq	r4, [r5, #0]
 800e468:	1c95      	addeq	r5, r2, #2
 800e46a:	e7ec      	b.n	800e446 <_strtol_l.isra.0+0x3a>
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1f6      	bne.n	800e45e <_strtol_l.isra.0+0x52>
 800e470:	2c30      	cmp	r4, #48	@ 0x30
 800e472:	bf14      	ite	ne
 800e474:	230a      	movne	r3, #10
 800e476:	2308      	moveq	r3, #8
 800e478:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e47c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e480:	2200      	movs	r2, #0
 800e482:	fbbc f9f3 	udiv	r9, ip, r3
 800e486:	4610      	mov	r0, r2
 800e488:	fb03 ca19 	mls	sl, r3, r9, ip
 800e48c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e490:	2f09      	cmp	r7, #9
 800e492:	d80f      	bhi.n	800e4b4 <_strtol_l.isra.0+0xa8>
 800e494:	463c      	mov	r4, r7
 800e496:	42a3      	cmp	r3, r4
 800e498:	dd1b      	ble.n	800e4d2 <_strtol_l.isra.0+0xc6>
 800e49a:	1c57      	adds	r7, r2, #1
 800e49c:	d007      	beq.n	800e4ae <_strtol_l.isra.0+0xa2>
 800e49e:	4581      	cmp	r9, r0
 800e4a0:	d314      	bcc.n	800e4cc <_strtol_l.isra.0+0xc0>
 800e4a2:	d101      	bne.n	800e4a8 <_strtol_l.isra.0+0x9c>
 800e4a4:	45a2      	cmp	sl, r4
 800e4a6:	db11      	blt.n	800e4cc <_strtol_l.isra.0+0xc0>
 800e4a8:	fb00 4003 	mla	r0, r0, r3, r4
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4b2:	e7eb      	b.n	800e48c <_strtol_l.isra.0+0x80>
 800e4b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e4b8:	2f19      	cmp	r7, #25
 800e4ba:	d801      	bhi.n	800e4c0 <_strtol_l.isra.0+0xb4>
 800e4bc:	3c37      	subs	r4, #55	@ 0x37
 800e4be:	e7ea      	b.n	800e496 <_strtol_l.isra.0+0x8a>
 800e4c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e4c4:	2f19      	cmp	r7, #25
 800e4c6:	d804      	bhi.n	800e4d2 <_strtol_l.isra.0+0xc6>
 800e4c8:	3c57      	subs	r4, #87	@ 0x57
 800e4ca:	e7e4      	b.n	800e496 <_strtol_l.isra.0+0x8a>
 800e4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d0:	e7ed      	b.n	800e4ae <_strtol_l.isra.0+0xa2>
 800e4d2:	1c53      	adds	r3, r2, #1
 800e4d4:	d108      	bne.n	800e4e8 <_strtol_l.isra.0+0xdc>
 800e4d6:	2322      	movs	r3, #34	@ 0x22
 800e4d8:	f8ce 3000 	str.w	r3, [lr]
 800e4dc:	4660      	mov	r0, ip
 800e4de:	f1b8 0f00 	cmp.w	r8, #0
 800e4e2:	d0a0      	beq.n	800e426 <_strtol_l.isra.0+0x1a>
 800e4e4:	1e69      	subs	r1, r5, #1
 800e4e6:	e006      	b.n	800e4f6 <_strtol_l.isra.0+0xea>
 800e4e8:	b106      	cbz	r6, 800e4ec <_strtol_l.isra.0+0xe0>
 800e4ea:	4240      	negs	r0, r0
 800e4ec:	f1b8 0f00 	cmp.w	r8, #0
 800e4f0:	d099      	beq.n	800e426 <_strtol_l.isra.0+0x1a>
 800e4f2:	2a00      	cmp	r2, #0
 800e4f4:	d1f6      	bne.n	800e4e4 <_strtol_l.isra.0+0xd8>
 800e4f6:	f8c8 1000 	str.w	r1, [r8]
 800e4fa:	e794      	b.n	800e426 <_strtol_l.isra.0+0x1a>
 800e4fc:	0800ed36 	.word	0x0800ed36

0800e500 <_strtol_r>:
 800e500:	f7ff bf84 	b.w	800e40c <_strtol_l.isra.0>

0800e504 <_strtoul_l.isra.0>:
 800e504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e508:	4e34      	ldr	r6, [pc, #208]	@ (800e5dc <_strtoul_l.isra.0+0xd8>)
 800e50a:	4686      	mov	lr, r0
 800e50c:	460d      	mov	r5, r1
 800e50e:	4628      	mov	r0, r5
 800e510:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e514:	5d37      	ldrb	r7, [r6, r4]
 800e516:	f017 0708 	ands.w	r7, r7, #8
 800e51a:	d1f8      	bne.n	800e50e <_strtoul_l.isra.0+0xa>
 800e51c:	2c2d      	cmp	r4, #45	@ 0x2d
 800e51e:	d110      	bne.n	800e542 <_strtoul_l.isra.0+0x3e>
 800e520:	782c      	ldrb	r4, [r5, #0]
 800e522:	2701      	movs	r7, #1
 800e524:	1c85      	adds	r5, r0, #2
 800e526:	f033 0010 	bics.w	r0, r3, #16
 800e52a:	d115      	bne.n	800e558 <_strtoul_l.isra.0+0x54>
 800e52c:	2c30      	cmp	r4, #48	@ 0x30
 800e52e:	d10d      	bne.n	800e54c <_strtoul_l.isra.0+0x48>
 800e530:	7828      	ldrb	r0, [r5, #0]
 800e532:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e536:	2858      	cmp	r0, #88	@ 0x58
 800e538:	d108      	bne.n	800e54c <_strtoul_l.isra.0+0x48>
 800e53a:	786c      	ldrb	r4, [r5, #1]
 800e53c:	3502      	adds	r5, #2
 800e53e:	2310      	movs	r3, #16
 800e540:	e00a      	b.n	800e558 <_strtoul_l.isra.0+0x54>
 800e542:	2c2b      	cmp	r4, #43	@ 0x2b
 800e544:	bf04      	itt	eq
 800e546:	782c      	ldrbeq	r4, [r5, #0]
 800e548:	1c85      	addeq	r5, r0, #2
 800e54a:	e7ec      	b.n	800e526 <_strtoul_l.isra.0+0x22>
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1f6      	bne.n	800e53e <_strtoul_l.isra.0+0x3a>
 800e550:	2c30      	cmp	r4, #48	@ 0x30
 800e552:	bf14      	ite	ne
 800e554:	230a      	movne	r3, #10
 800e556:	2308      	moveq	r3, #8
 800e558:	f04f 38ff 	mov.w	r8, #4294967295
 800e55c:	2600      	movs	r6, #0
 800e55e:	fbb8 f8f3 	udiv	r8, r8, r3
 800e562:	fb03 f908 	mul.w	r9, r3, r8
 800e566:	ea6f 0909 	mvn.w	r9, r9
 800e56a:	4630      	mov	r0, r6
 800e56c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e570:	f1bc 0f09 	cmp.w	ip, #9
 800e574:	d810      	bhi.n	800e598 <_strtoul_l.isra.0+0x94>
 800e576:	4664      	mov	r4, ip
 800e578:	42a3      	cmp	r3, r4
 800e57a:	dd1e      	ble.n	800e5ba <_strtoul_l.isra.0+0xb6>
 800e57c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e580:	d007      	beq.n	800e592 <_strtoul_l.isra.0+0x8e>
 800e582:	4580      	cmp	r8, r0
 800e584:	d316      	bcc.n	800e5b4 <_strtoul_l.isra.0+0xb0>
 800e586:	d101      	bne.n	800e58c <_strtoul_l.isra.0+0x88>
 800e588:	45a1      	cmp	r9, r4
 800e58a:	db13      	blt.n	800e5b4 <_strtoul_l.isra.0+0xb0>
 800e58c:	fb00 4003 	mla	r0, r0, r3, r4
 800e590:	2601      	movs	r6, #1
 800e592:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e596:	e7e9      	b.n	800e56c <_strtoul_l.isra.0+0x68>
 800e598:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e59c:	f1bc 0f19 	cmp.w	ip, #25
 800e5a0:	d801      	bhi.n	800e5a6 <_strtoul_l.isra.0+0xa2>
 800e5a2:	3c37      	subs	r4, #55	@ 0x37
 800e5a4:	e7e8      	b.n	800e578 <_strtoul_l.isra.0+0x74>
 800e5a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e5aa:	f1bc 0f19 	cmp.w	ip, #25
 800e5ae:	d804      	bhi.n	800e5ba <_strtoul_l.isra.0+0xb6>
 800e5b0:	3c57      	subs	r4, #87	@ 0x57
 800e5b2:	e7e1      	b.n	800e578 <_strtoul_l.isra.0+0x74>
 800e5b4:	f04f 36ff 	mov.w	r6, #4294967295
 800e5b8:	e7eb      	b.n	800e592 <_strtoul_l.isra.0+0x8e>
 800e5ba:	1c73      	adds	r3, r6, #1
 800e5bc:	d106      	bne.n	800e5cc <_strtoul_l.isra.0+0xc8>
 800e5be:	2322      	movs	r3, #34	@ 0x22
 800e5c0:	f8ce 3000 	str.w	r3, [lr]
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	b932      	cbnz	r2, 800e5d6 <_strtoul_l.isra.0+0xd2>
 800e5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5cc:	b107      	cbz	r7, 800e5d0 <_strtoul_l.isra.0+0xcc>
 800e5ce:	4240      	negs	r0, r0
 800e5d0:	2a00      	cmp	r2, #0
 800e5d2:	d0f9      	beq.n	800e5c8 <_strtoul_l.isra.0+0xc4>
 800e5d4:	b106      	cbz	r6, 800e5d8 <_strtoul_l.isra.0+0xd4>
 800e5d6:	1e69      	subs	r1, r5, #1
 800e5d8:	6011      	str	r1, [r2, #0]
 800e5da:	e7f5      	b.n	800e5c8 <_strtoul_l.isra.0+0xc4>
 800e5dc:	0800ed36 	.word	0x0800ed36

0800e5e0 <_strtoul_r>:
 800e5e0:	f7ff bf90 	b.w	800e504 <_strtoul_l.isra.0>

0800e5e4 <__swhatbuf_r>:
 800e5e4:	b570      	push	{r4, r5, r6, lr}
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5ec:	2900      	cmp	r1, #0
 800e5ee:	b096      	sub	sp, #88	@ 0x58
 800e5f0:	4615      	mov	r5, r2
 800e5f2:	461e      	mov	r6, r3
 800e5f4:	da0d      	bge.n	800e612 <__swhatbuf_r+0x2e>
 800e5f6:	89a3      	ldrh	r3, [r4, #12]
 800e5f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5fc:	f04f 0100 	mov.w	r1, #0
 800e600:	bf14      	ite	ne
 800e602:	2340      	movne	r3, #64	@ 0x40
 800e604:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e608:	2000      	movs	r0, #0
 800e60a:	6031      	str	r1, [r6, #0]
 800e60c:	602b      	str	r3, [r5, #0]
 800e60e:	b016      	add	sp, #88	@ 0x58
 800e610:	bd70      	pop	{r4, r5, r6, pc}
 800e612:	466a      	mov	r2, sp
 800e614:	f000 f848 	bl	800e6a8 <_fstat_r>
 800e618:	2800      	cmp	r0, #0
 800e61a:	dbec      	blt.n	800e5f6 <__swhatbuf_r+0x12>
 800e61c:	9901      	ldr	r1, [sp, #4]
 800e61e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e622:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e626:	4259      	negs	r1, r3
 800e628:	4159      	adcs	r1, r3
 800e62a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e62e:	e7eb      	b.n	800e608 <__swhatbuf_r+0x24>

0800e630 <__smakebuf_r>:
 800e630:	898b      	ldrh	r3, [r1, #12]
 800e632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e634:	079d      	lsls	r5, r3, #30
 800e636:	4606      	mov	r6, r0
 800e638:	460c      	mov	r4, r1
 800e63a:	d507      	bpl.n	800e64c <__smakebuf_r+0x1c>
 800e63c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	6123      	str	r3, [r4, #16]
 800e644:	2301      	movs	r3, #1
 800e646:	6163      	str	r3, [r4, #20]
 800e648:	b003      	add	sp, #12
 800e64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e64c:	ab01      	add	r3, sp, #4
 800e64e:	466a      	mov	r2, sp
 800e650:	f7ff ffc8 	bl	800e5e4 <__swhatbuf_r>
 800e654:	9f00      	ldr	r7, [sp, #0]
 800e656:	4605      	mov	r5, r0
 800e658:	4639      	mov	r1, r7
 800e65a:	4630      	mov	r0, r6
 800e65c:	f7fe fcb6 	bl	800cfcc <_malloc_r>
 800e660:	b948      	cbnz	r0, 800e676 <__smakebuf_r+0x46>
 800e662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e666:	059a      	lsls	r2, r3, #22
 800e668:	d4ee      	bmi.n	800e648 <__smakebuf_r+0x18>
 800e66a:	f023 0303 	bic.w	r3, r3, #3
 800e66e:	f043 0302 	orr.w	r3, r3, #2
 800e672:	81a3      	strh	r3, [r4, #12]
 800e674:	e7e2      	b.n	800e63c <__smakebuf_r+0xc>
 800e676:	89a3      	ldrh	r3, [r4, #12]
 800e678:	6020      	str	r0, [r4, #0]
 800e67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e67e:	81a3      	strh	r3, [r4, #12]
 800e680:	9b01      	ldr	r3, [sp, #4]
 800e682:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e686:	b15b      	cbz	r3, 800e6a0 <__smakebuf_r+0x70>
 800e688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e68c:	4630      	mov	r0, r6
 800e68e:	f000 f81d 	bl	800e6cc <_isatty_r>
 800e692:	b128      	cbz	r0, 800e6a0 <__smakebuf_r+0x70>
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	f023 0303 	bic.w	r3, r3, #3
 800e69a:	f043 0301 	orr.w	r3, r3, #1
 800e69e:	81a3      	strh	r3, [r4, #12]
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	431d      	orrs	r5, r3
 800e6a4:	81a5      	strh	r5, [r4, #12]
 800e6a6:	e7cf      	b.n	800e648 <__smakebuf_r+0x18>

0800e6a8 <_fstat_r>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	4d07      	ldr	r5, [pc, #28]	@ (800e6c8 <_fstat_r+0x20>)
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	4608      	mov	r0, r1
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	602b      	str	r3, [r5, #0]
 800e6b6:	f7f2 fc3b 	bl	8000f30 <_fstat>
 800e6ba:	1c43      	adds	r3, r0, #1
 800e6bc:	d102      	bne.n	800e6c4 <_fstat_r+0x1c>
 800e6be:	682b      	ldr	r3, [r5, #0]
 800e6c0:	b103      	cbz	r3, 800e6c4 <_fstat_r+0x1c>
 800e6c2:	6023      	str	r3, [r4, #0]
 800e6c4:	bd38      	pop	{r3, r4, r5, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20002334 	.word	0x20002334

0800e6cc <_isatty_r>:
 800e6cc:	b538      	push	{r3, r4, r5, lr}
 800e6ce:	4d06      	ldr	r5, [pc, #24]	@ (800e6e8 <_isatty_r+0x1c>)
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	4608      	mov	r0, r1
 800e6d6:	602b      	str	r3, [r5, #0]
 800e6d8:	f7f2 fc3a 	bl	8000f50 <_isatty>
 800e6dc:	1c43      	adds	r3, r0, #1
 800e6de:	d102      	bne.n	800e6e6 <_isatty_r+0x1a>
 800e6e0:	682b      	ldr	r3, [r5, #0]
 800e6e2:	b103      	cbz	r3, 800e6e6 <_isatty_r+0x1a>
 800e6e4:	6023      	str	r3, [r4, #0]
 800e6e6:	bd38      	pop	{r3, r4, r5, pc}
 800e6e8:	20002334 	.word	0x20002334

0800e6ec <_malloc_usable_size_r>:
 800e6ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6f0:	1f18      	subs	r0, r3, #4
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	bfbc      	itt	lt
 800e6f6:	580b      	ldrlt	r3, [r1, r0]
 800e6f8:	18c0      	addlt	r0, r0, r3
 800e6fa:	4770      	bx	lr

0800e6fc <sqrtf>:
 800e6fc:	b508      	push	{r3, lr}
 800e6fe:	ed2d 8b02 	vpush	{d8}
 800e702:	eeb0 8a40 	vmov.f32	s16, s0
 800e706:	f000 f817 	bl	800e738 <__ieee754_sqrtf>
 800e70a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e712:	d60c      	bvs.n	800e72e <sqrtf+0x32>
 800e714:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e734 <sqrtf+0x38>
 800e718:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e720:	d505      	bpl.n	800e72e <sqrtf+0x32>
 800e722:	f7fe fba5 	bl	800ce70 <__errno>
 800e726:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e72a:	2321      	movs	r3, #33	@ 0x21
 800e72c:	6003      	str	r3, [r0, #0]
 800e72e:	ecbd 8b02 	vpop	{d8}
 800e732:	bd08      	pop	{r3, pc}
 800e734:	00000000 	.word	0x00000000

0800e738 <__ieee754_sqrtf>:
 800e738:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e73c:	4770      	bx	lr
	...

0800e740 <_init>:
 800e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e742:	bf00      	nop
 800e744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e746:	bc08      	pop	{r3}
 800e748:	469e      	mov	lr, r3
 800e74a:	4770      	bx	lr

0800e74c <_fini>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	bf00      	nop
 800e750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e752:	bc08      	pop	{r3}
 800e754:	469e      	mov	lr, r3
 800e756:	4770      	bx	lr
